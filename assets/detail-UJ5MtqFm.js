var NR=Object.defineProperty;var V_=S=>{throw TypeError(S)};var jR=(S,n,e)=>n in S?NR(S,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):S[n]=e;var Oe=(S,n,e)=>jR(S,typeof n!="symbol"?n+"":n,e),eS=(S,n,e)=>n.has(S)||V_("Cannot "+e);var b=(S,n,e)=>(eS(S,n,"read from private field"),e?e.call(S):n.get(S)),rt=(S,n,e)=>n.has(S)?V_("Cannot add the same private member more than once"):n instanceof WeakSet?n.add(S):n.set(S,e),K=(S,n,e,i)=>(eS(S,n,"write to private field"),i?i.call(S,e):n.set(S,e),e),it=(S,n,e)=>(eS(S,n,"access private method"),e);var io=(S,n,e,i)=>({set _(a){K(S,n,a,e)},get _(){return b(S,n,i)}});import{c as h_,g as ul,a as BR,l as lr,L as bc}from"./Leaflet.ImageOverlay.Rotated-BYgn05Ch.js";import _P from"proj4";var CP={exports:{}};(function(S,n){(function(e,i){S.exports=i()})(typeof self<"u"?self:h_,function(){return function(e){var i={};function a(s){if(i[s])return i[s].exports;var o=i[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,a),o.l=!0,o.exports}return a.m=e,a.c=i,a.d=function(s,o,h){a.o(s,o)||Object.defineProperty(s,o,{enumerable:!0,get:h})},a.r=function(s){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},a.t=function(s,o){if(1&o&&(s=a(s)),8&o||4&o&&typeof s=="object"&&s&&s.__esModule)return s;var h=Object.create(null);if(a.r(h),Object.defineProperty(h,"default",{enumerable:!0,value:s}),2&o&&typeof s!="string")for(var f in s)a.d(h,f,(function(d){return s[d]}).bind(null,f));return h},a.n=function(s){var o=s&&s.__esModule?function(){return s.default}:function(){return s};return a.d(o,"a",o),o},a.o=function(s,o){return Object.prototype.hasOwnProperty.call(s,o)},a.p="",a(a.s=107)}([function(e,i,a){const s=a(73);e.exports=function(o){return o[0]==="+"&&(o=o.substring(1)),(o=(o=s(o)).replace(/^0+(?=\d)/,"")).includes(".")&&(o=o.replace(/\.?0+$/,"")),o===""&&(o="0"),o==="-0"&&(o="0"),o}},function(e,i,a){const s=a(4),o=a(0),h=a(15),f=a(32);function d(p,g,x){p=o(p),g=o(g);const w=p[0]!=="-",_=g[0]!=="-",A=h(p),T=h(g);if(A||T)return w==_?"Infinity":"-Infinity";if(g==="0")throw new Error("[preciso] division by zero");if(p===""||p==="0")return"0";const E=w!==_?"-":"";return w||(p=s(p)),_||(g=s(g)),E+f(p,g,x)}e.exports=d,e.exports.default=d},function(e,i,a){a.d(i,"a",function(){return s}),a.d(i,"b",function(){return o}),a.d(i,"c",function(){return h}),a.d(i,"d",function(){return f}),a.d(i,"e",function(){return d});const s=Symbol("thread.errors"),o=Symbol("thread.events"),h=Symbol("thread.terminate"),f=Symbol("thread.transferable"),d=Symbol("thread.worker")},function(e,i){var a;a=function(){return this}();try{a=a||new Function("return this")()}catch{typeof window=="object"&&(a=window)}e.exports=a},function(e,i,a){const s=a(0);function o(h){return(h=s(h))[0]==="-"?h.substring(1):h}e.exports=o,e.exports.default=o},function(e,i,a){function s(o,h){const f=o.length,d=h.length,p=o.indexOf("."),g=h.indexOf("."),x=p===-1?f:p,w=g===-1?d:g,_=x-w;let A=_<0?-1*_:0,T=_<=0?0:_,E=Math.max(x,w)+1+Math.max(f-x,d-w)-1,P=0;for(;P<E;){const M=P-A,F=M===x?".":o[M]||"0",k=P-T,O=k===w?".":h[k]||"0";if(F!==O){if(F>O)return">";if(F<O)return"<"}P++}return"="}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(5),o=a(0),h=a(9),f=a(31),d=a(15);function p(g,x,{infinity_minus_infinity:w="NaN"}={}){g=o(g),x=o(x);const _=g[0]!=="-",A=x[0]!=="-",T=!_,E=!A,P=d(g),M=d(x);if(P&&M)return _&&A?"Infinity":T&E?"-Infinity":w;if(P)return _?"Infinity":"-Infinity";if(M)return A?"Infinity":"-Infinity";if(_&&A)return h(g,x);if(T&&E)return"-"+h(g.substring(1),x.substring(1));if(T&&A)switch(g=g.substring(1),s(g,x)){case"=":return"0";case"<":return f(x,g);case">":return"-"+f(g,x)}else if(_&&!A)switch(x=x.substring(1),s(g,x)){case"=":return"0";case"<":return"-"+f(x,g);case">":return f(g,x)}}e.exports=p,e.exports.default=p},function(e,i,a){(function(s){/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */var o=a(108),h=a(109),f=a(60);function d(){return g.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function p(z,Y){if(d()<Y)throw new RangeError("Invalid typed array length");return g.TYPED_ARRAY_SUPPORT?(z=new Uint8Array(Y)).__proto__=g.prototype:(z===null&&(z=new g(Y)),z.length=Y),z}function g(z,Y,at){if(!(g.TYPED_ARRAY_SUPPORT||this instanceof g))return new g(z,Y,at);if(typeof z=="number"){if(typeof Y=="string")throw new Error("If encoding is specified then the first argument must be a string");return _(this,z)}return x(this,z,Y,at)}function x(z,Y,at,Tt){if(typeof Y=="number")throw new TypeError('"value" argument must not be a number');return typeof ArrayBuffer<"u"&&Y instanceof ArrayBuffer?function(Ot,Pt,$t,me){if(Pt.byteLength,$t<0||Pt.byteLength<$t)throw new RangeError("'offset' is out of bounds");if(Pt.byteLength<$t+(me||0))throw new RangeError("'length' is out of bounds");return Pt=$t===void 0&&me===void 0?new Uint8Array(Pt):me===void 0?new Uint8Array(Pt,$t):new Uint8Array(Pt,$t,me),g.TYPED_ARRAY_SUPPORT?(Ot=Pt).__proto__=g.prototype:Ot=A(Ot,Pt),Ot}(z,Y,at,Tt):typeof Y=="string"?function(Ot,Pt,$t){if(typeof $t=="string"&&$t!==""||($t="utf8"),!g.isEncoding($t))throw new TypeError('"encoding" must be a valid string encoding');var me=0|E(Pt,$t),$e=(Ot=p(Ot,me)).write(Pt,$t);return $e!==me&&(Ot=Ot.slice(0,$e)),Ot}(z,Y,at):function(Ot,Pt){if(g.isBuffer(Pt)){var $t=0|T(Pt.length);return(Ot=p(Ot,$t)).length===0||Pt.copy(Ot,0,0,$t),Ot}if(Pt){if(typeof ArrayBuffer<"u"&&Pt.buffer instanceof ArrayBuffer||"length"in Pt)return typeof Pt.length!="number"||(me=Pt.length)!=me?p(Ot,0):A(Ot,Pt);if(Pt.type==="Buffer"&&f(Pt.data))return A(Ot,Pt.data)}var me;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(z,Y)}function w(z){if(typeof z!="number")throw new TypeError('"size" argument must be a number');if(z<0)throw new RangeError('"size" argument must not be negative')}function _(z,Y){if(w(Y),z=p(z,Y<0?0:0|T(Y)),!g.TYPED_ARRAY_SUPPORT)for(var at=0;at<Y;++at)z[at]=0;return z}function A(z,Y){var at=Y.length<0?0:0|T(Y.length);z=p(z,at);for(var Tt=0;Tt<at;Tt+=1)z[Tt]=255&Y[Tt];return z}function T(z){if(z>=d())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+d().toString(16)+" bytes");return 0|z}function E(z,Y){if(g.isBuffer(z))return z.length;if(typeof ArrayBuffer<"u"&&typeof ArrayBuffer.isView=="function"&&(ArrayBuffer.isView(z)||z instanceof ArrayBuffer))return z.byteLength;typeof z!="string"&&(z=""+z);var at=z.length;if(at===0)return 0;for(var Tt=!1;;)switch(Y){case"ascii":case"latin1":case"binary":return at;case"utf8":case"utf-8":case void 0:return Lt(z).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*at;case"hex":return at>>>1;case"base64":return Qt(z).length;default:if(Tt)return Lt(z).length;Y=(""+Y).toLowerCase(),Tt=!0}}function P(z,Y,at){var Tt=!1;if((Y===void 0||Y<0)&&(Y=0),Y>this.length||((at===void 0||at>this.length)&&(at=this.length),at<=0)||(at>>>=0)<=(Y>>>=0))return"";for(z||(z="utf8");;)switch(z){case"hex":return J(this,Y,at);case"utf8":case"utf-8":return Z(this,Y,at);case"ascii":return V(this,Y,at);case"latin1":case"binary":return B(this,Y,at);case"base64":return N(this,Y,at);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return lt(this,Y,at);default:if(Tt)throw new TypeError("Unknown encoding: "+z);z=(z+"").toLowerCase(),Tt=!0}}function M(z,Y,at){var Tt=z[Y];z[Y]=z[at],z[at]=Tt}function F(z,Y,at,Tt,Ot){if(z.length===0)return-1;if(typeof at=="string"?(Tt=at,at=0):at>2147483647?at=2147483647:at<-2147483648&&(at=-2147483648),at=+at,isNaN(at)&&(at=Ot?0:z.length-1),at<0&&(at=z.length+at),at>=z.length){if(Ot)return-1;at=z.length-1}else if(at<0){if(!Ot)return-1;at=0}if(typeof Y=="string"&&(Y=g.from(Y,Tt)),g.isBuffer(Y))return Y.length===0?-1:k(z,Y,at,Tt,Ot);if(typeof Y=="number")return Y&=255,g.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf=="function"?Ot?Uint8Array.prototype.indexOf.call(z,Y,at):Uint8Array.prototype.lastIndexOf.call(z,Y,at):k(z,[Y],at,Tt,Ot);throw new TypeError("val must be string, number or Buffer")}function k(z,Y,at,Tt,Ot){var Pt,$t=1,me=z.length,$e=Y.length;if(Tt!==void 0&&((Tt=String(Tt).toLowerCase())==="ucs2"||Tt==="ucs-2"||Tt==="utf16le"||Tt==="utf-16le")){if(z.length<2||Y.length<2)return-1;$t=2,me/=2,$e/=2,at/=2}function ue(On,je){return $t===1?On[je]:On.readUInt16BE(je*$t)}if(Ot){var Ht=-1;for(Pt=at;Pt<me;Pt++)if(ue(z,Pt)===ue(Y,Ht===-1?0:Pt-Ht)){if(Ht===-1&&(Ht=Pt),Pt-Ht+1===$e)return Ht*$t}else Ht!==-1&&(Pt-=Pt-Ht),Ht=-1}else for(at+$e>me&&(at=me-$e),Pt=at;Pt>=0;Pt--){for(var Se=!0,Qe=0;Qe<$e;Qe++)if(ue(z,Pt+Qe)!==ue(Y,Qe)){Se=!1;break}if(Se)return Pt}return-1}function O(z,Y,at,Tt){at=Number(at)||0;var Ot=z.length-at;Tt?(Tt=Number(Tt))>Ot&&(Tt=Ot):Tt=Ot;var Pt=Y.length;if(Pt%2!=0)throw new TypeError("Invalid hex string");Tt>Pt/2&&(Tt=Pt/2);for(var $t=0;$t<Tt;++$t){var me=parseInt(Y.substr(2*$t,2),16);if(isNaN(me))return $t;z[at+$t]=me}return $t}function v(z,Y,at,Tt){return he(Lt(Y,z.length-at),z,at,Tt)}function R(z,Y,at,Tt){return he(function(Ot){for(var Pt=[],$t=0;$t<Ot.length;++$t)Pt.push(255&Ot.charCodeAt($t));return Pt}(Y),z,at,Tt)}function G(z,Y,at,Tt){return R(z,Y,at,Tt)}function j(z,Y,at,Tt){return he(Qt(Y),z,at,Tt)}function U(z,Y,at,Tt){return he(function(Ot,Pt){for(var $t,me,$e,ue=[],Ht=0;Ht<Ot.length&&!((Pt-=2)<0);++Ht)$t=Ot.charCodeAt(Ht),me=$t>>8,$e=$t%256,ue.push($e),ue.push(me);return ue}(Y,z.length-at),z,at,Tt)}function N(z,Y,at){return Y===0&&at===z.length?o.fromByteArray(z):o.fromByteArray(z.slice(Y,at))}function Z(z,Y,at){at=Math.min(z.length,at);for(var Tt=[],Ot=Y;Ot<at;){var Pt,$t,me,$e,ue=z[Ot],Ht=null,Se=ue>239?4:ue>223?3:ue>191?2:1;if(Ot+Se<=at)switch(Se){case 1:ue<128&&(Ht=ue);break;case 2:(192&(Pt=z[Ot+1]))==128&&($e=(31&ue)<<6|63&Pt)>127&&(Ht=$e);break;case 3:Pt=z[Ot+1],$t=z[Ot+2],(192&Pt)==128&&(192&$t)==128&&($e=(15&ue)<<12|(63&Pt)<<6|63&$t)>2047&&($e<55296||$e>57343)&&(Ht=$e);break;case 4:Pt=z[Ot+1],$t=z[Ot+2],me=z[Ot+3],(192&Pt)==128&&(192&$t)==128&&(192&me)==128&&($e=(15&ue)<<18|(63&Pt)<<12|(63&$t)<<6|63&me)>65535&&$e<1114112&&(Ht=$e)}Ht===null?(Ht=65533,Se=1):Ht>65535&&(Ht-=65536,Tt.push(Ht>>>10&1023|55296),Ht=56320|1023&Ht),Tt.push(Ht),Ot+=Se}return function(Qe){var On=Qe.length;if(On<=4096)return String.fromCharCode.apply(String,Qe);for(var je="",fe=0;fe<On;)je+=String.fromCharCode.apply(String,Qe.slice(fe,fe+=4096));return je}(Tt)}i.Buffer=g,i.SlowBuffer=function(z){return+z!=z&&(z=0),g.alloc(+z)},i.INSPECT_MAX_BYTES=50,g.TYPED_ARRAY_SUPPORT=s.TYPED_ARRAY_SUPPORT!==void 0?s.TYPED_ARRAY_SUPPORT:function(){try{var z=new Uint8Array(1);return z.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},z.foo()===42&&typeof z.subarray=="function"&&z.subarray(1,1).byteLength===0}catch{return!1}}(),i.kMaxLength=d(),g.poolSize=8192,g._augment=function(z){return z.__proto__=g.prototype,z},g.from=function(z,Y,at){return x(null,z,Y,at)},g.TYPED_ARRAY_SUPPORT&&(g.prototype.__proto__=Uint8Array.prototype,g.__proto__=Uint8Array,typeof Symbol<"u"&&Symbol.species&&g[Symbol.species]===g&&Object.defineProperty(g,Symbol.species,{value:null,configurable:!0})),g.alloc=function(z,Y,at){return function(Tt,Ot,Pt,$t){return w(Ot),Ot<=0?p(Tt,Ot):Pt!==void 0?typeof $t=="string"?p(Tt,Ot).fill(Pt,$t):p(Tt,Ot).fill(Pt):p(Tt,Ot)}(null,z,Y,at)},g.allocUnsafe=function(z){return _(null,z)},g.allocUnsafeSlow=function(z){return _(null,z)},g.isBuffer=function(z){return!(z==null||!z._isBuffer)},g.compare=function(z,Y){if(!g.isBuffer(z)||!g.isBuffer(Y))throw new TypeError("Arguments must be Buffers");if(z===Y)return 0;for(var at=z.length,Tt=Y.length,Ot=0,Pt=Math.min(at,Tt);Ot<Pt;++Ot)if(z[Ot]!==Y[Ot]){at=z[Ot],Tt=Y[Ot];break}return at<Tt?-1:Tt<at?1:0},g.isEncoding=function(z){switch(String(z).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},g.concat=function(z,Y){if(!f(z))throw new TypeError('"list" argument must be an Array of Buffers');if(z.length===0)return g.alloc(0);var at;if(Y===void 0)for(Y=0,at=0;at<z.length;++at)Y+=z[at].length;var Tt=g.allocUnsafe(Y),Ot=0;for(at=0;at<z.length;++at){var Pt=z[at];if(!g.isBuffer(Pt))throw new TypeError('"list" argument must be an Array of Buffers');Pt.copy(Tt,Ot),Ot+=Pt.length}return Tt},g.byteLength=E,g.prototype._isBuffer=!0,g.prototype.swap16=function(){var z=this.length;if(z%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var Y=0;Y<z;Y+=2)M(this,Y,Y+1);return this},g.prototype.swap32=function(){var z=this.length;if(z%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var Y=0;Y<z;Y+=4)M(this,Y,Y+3),M(this,Y+1,Y+2);return this},g.prototype.swap64=function(){var z=this.length;if(z%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var Y=0;Y<z;Y+=8)M(this,Y,Y+7),M(this,Y+1,Y+6),M(this,Y+2,Y+5),M(this,Y+3,Y+4);return this},g.prototype.toString=function(){var z=0|this.length;return z===0?"":arguments.length===0?Z(this,0,z):P.apply(this,arguments)},g.prototype.equals=function(z){if(!g.isBuffer(z))throw new TypeError("Argument must be a Buffer");return this===z||g.compare(this,z)===0},g.prototype.inspect=function(){var z="",Y=i.INSPECT_MAX_BYTES;return this.length>0&&(z=this.toString("hex",0,Y).match(/.{2}/g).join(" "),this.length>Y&&(z+=" ... ")),"<Buffer "+z+">"},g.prototype.compare=function(z,Y,at,Tt,Ot){if(!g.isBuffer(z))throw new TypeError("Argument must be a Buffer");if(Y===void 0&&(Y=0),at===void 0&&(at=z?z.length:0),Tt===void 0&&(Tt=0),Ot===void 0&&(Ot=this.length),Y<0||at>z.length||Tt<0||Ot>this.length)throw new RangeError("out of range index");if(Tt>=Ot&&Y>=at)return 0;if(Tt>=Ot)return-1;if(Y>=at)return 1;if(this===z)return 0;for(var Pt=(Ot>>>=0)-(Tt>>>=0),$t=(at>>>=0)-(Y>>>=0),me=Math.min(Pt,$t),$e=this.slice(Tt,Ot),ue=z.slice(Y,at),Ht=0;Ht<me;++Ht)if($e[Ht]!==ue[Ht]){Pt=$e[Ht],$t=ue[Ht];break}return Pt<$t?-1:$t<Pt?1:0},g.prototype.includes=function(z,Y,at){return this.indexOf(z,Y,at)!==-1},g.prototype.indexOf=function(z,Y,at){return F(this,z,Y,at,!0)},g.prototype.lastIndexOf=function(z,Y,at){return F(this,z,Y,at,!1)},g.prototype.write=function(z,Y,at,Tt){if(Y===void 0)Tt="utf8",at=this.length,Y=0;else if(at===void 0&&typeof Y=="string")Tt=Y,at=this.length,Y=0;else{if(!isFinite(Y))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");Y|=0,isFinite(at)?(at|=0,Tt===void 0&&(Tt="utf8")):(Tt=at,at=void 0)}var Ot=this.length-Y;if((at===void 0||at>Ot)&&(at=Ot),z.length>0&&(at<0||Y<0)||Y>this.length)throw new RangeError("Attempt to write outside buffer bounds");Tt||(Tt="utf8");for(var Pt=!1;;)switch(Tt){case"hex":return O(this,z,Y,at);case"utf8":case"utf-8":return v(this,z,Y,at);case"ascii":return R(this,z,Y,at);case"latin1":case"binary":return G(this,z,Y,at);case"base64":return j(this,z,Y,at);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return U(this,z,Y,at);default:if(Pt)throw new TypeError("Unknown encoding: "+Tt);Tt=(""+Tt).toLowerCase(),Pt=!0}},g.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function V(z,Y,at){var Tt="";at=Math.min(z.length,at);for(var Ot=Y;Ot<at;++Ot)Tt+=String.fromCharCode(127&z[Ot]);return Tt}function B(z,Y,at){var Tt="";at=Math.min(z.length,at);for(var Ot=Y;Ot<at;++Ot)Tt+=String.fromCharCode(z[Ot]);return Tt}function J(z,Y,at){var Tt=z.length;(!Y||Y<0)&&(Y=0),(!at||at<0||at>Tt)&&(at=Tt);for(var Ot="",Pt=Y;Pt<at;++Pt)Ot+=Wt(z[Pt]);return Ot}function lt(z,Y,at){for(var Tt=z.slice(Y,at),Ot="",Pt=0;Pt<Tt.length;Pt+=2)Ot+=String.fromCharCode(Tt[Pt]+256*Tt[Pt+1]);return Ot}function mt(z,Y,at){if(z%1!=0||z<0)throw new RangeError("offset is not uint");if(z+Y>at)throw new RangeError("Trying to access beyond buffer length")}function ut(z,Y,at,Tt,Ot,Pt){if(!g.isBuffer(z))throw new TypeError('"buffer" argument must be a Buffer instance');if(Y>Ot||Y<Pt)throw new RangeError('"value" argument is out of bounds');if(at+Tt>z.length)throw new RangeError("Index out of range")}function ft(z,Y,at,Tt){Y<0&&(Y=65535+Y+1);for(var Ot=0,Pt=Math.min(z.length-at,2);Ot<Pt;++Ot)z[at+Ot]=(Y&255<<8*(Tt?Ot:1-Ot))>>>8*(Tt?Ot:1-Ot)}function tt(z,Y,at,Tt){Y<0&&(Y=4294967295+Y+1);for(var Ot=0,Pt=Math.min(z.length-at,4);Ot<Pt;++Ot)z[at+Ot]=Y>>>8*(Tt?Ot:3-Ot)&255}function et(z,Y,at,Tt,Ot,Pt){if(at+Tt>z.length)throw new RangeError("Index out of range");if(at<0)throw new RangeError("Index out of range")}function St(z,Y,at,Tt,Ot){return Ot||et(z,0,at,4),h.write(z,Y,at,Tt,23,4),at+4}function _t(z,Y,at,Tt,Ot){return Ot||et(z,0,at,8),h.write(z,Y,at,Tt,52,8),at+8}g.prototype.slice=function(z,Y){var at,Tt=this.length;if((z=~~z)<0?(z+=Tt)<0&&(z=0):z>Tt&&(z=Tt),(Y=Y===void 0?Tt:~~Y)<0?(Y+=Tt)<0&&(Y=0):Y>Tt&&(Y=Tt),Y<z&&(Y=z),g.TYPED_ARRAY_SUPPORT)(at=this.subarray(z,Y)).__proto__=g.prototype;else{var Ot=Y-z;at=new g(Ot,void 0);for(var Pt=0;Pt<Ot;++Pt)at[Pt]=this[Pt+z]}return at},g.prototype.readUIntLE=function(z,Y,at){z|=0,Y|=0,at||mt(z,Y,this.length);for(var Tt=this[z],Ot=1,Pt=0;++Pt<Y&&(Ot*=256);)Tt+=this[z+Pt]*Ot;return Tt},g.prototype.readUIntBE=function(z,Y,at){z|=0,Y|=0,at||mt(z,Y,this.length);for(var Tt=this[z+--Y],Ot=1;Y>0&&(Ot*=256);)Tt+=this[z+--Y]*Ot;return Tt},g.prototype.readUInt8=function(z,Y){return Y||mt(z,1,this.length),this[z]},g.prototype.readUInt16LE=function(z,Y){return Y||mt(z,2,this.length),this[z]|this[z+1]<<8},g.prototype.readUInt16BE=function(z,Y){return Y||mt(z,2,this.length),this[z]<<8|this[z+1]},g.prototype.readUInt32LE=function(z,Y){return Y||mt(z,4,this.length),(this[z]|this[z+1]<<8|this[z+2]<<16)+16777216*this[z+3]},g.prototype.readUInt32BE=function(z,Y){return Y||mt(z,4,this.length),16777216*this[z]+(this[z+1]<<16|this[z+2]<<8|this[z+3])},g.prototype.readIntLE=function(z,Y,at){z|=0,Y|=0,at||mt(z,Y,this.length);for(var Tt=this[z],Ot=1,Pt=0;++Pt<Y&&(Ot*=256);)Tt+=this[z+Pt]*Ot;return Tt>=(Ot*=128)&&(Tt-=Math.pow(2,8*Y)),Tt},g.prototype.readIntBE=function(z,Y,at){z|=0,Y|=0,at||mt(z,Y,this.length);for(var Tt=Y,Ot=1,Pt=this[z+--Tt];Tt>0&&(Ot*=256);)Pt+=this[z+--Tt]*Ot;return Pt>=(Ot*=128)&&(Pt-=Math.pow(2,8*Y)),Pt},g.prototype.readInt8=function(z,Y){return Y||mt(z,1,this.length),128&this[z]?-1*(255-this[z]+1):this[z]},g.prototype.readInt16LE=function(z,Y){Y||mt(z,2,this.length);var at=this[z]|this[z+1]<<8;return 32768&at?4294901760|at:at},g.prototype.readInt16BE=function(z,Y){Y||mt(z,2,this.length);var at=this[z+1]|this[z]<<8;return 32768&at?4294901760|at:at},g.prototype.readInt32LE=function(z,Y){return Y||mt(z,4,this.length),this[z]|this[z+1]<<8|this[z+2]<<16|this[z+3]<<24},g.prototype.readInt32BE=function(z,Y){return Y||mt(z,4,this.length),this[z]<<24|this[z+1]<<16|this[z+2]<<8|this[z+3]},g.prototype.readFloatLE=function(z,Y){return Y||mt(z,4,this.length),h.read(this,z,!0,23,4)},g.prototype.readFloatBE=function(z,Y){return Y||mt(z,4,this.length),h.read(this,z,!1,23,4)},g.prototype.readDoubleLE=function(z,Y){return Y||mt(z,8,this.length),h.read(this,z,!0,52,8)},g.prototype.readDoubleBE=function(z,Y){return Y||mt(z,8,this.length),h.read(this,z,!1,52,8)},g.prototype.writeUIntLE=function(z,Y,at,Tt){z=+z,Y|=0,at|=0,Tt||ut(this,z,Y,at,Math.pow(2,8*at)-1,0);var Ot=1,Pt=0;for(this[Y]=255&z;++Pt<at&&(Ot*=256);)this[Y+Pt]=z/Ot&255;return Y+at},g.prototype.writeUIntBE=function(z,Y,at,Tt){z=+z,Y|=0,at|=0,Tt||ut(this,z,Y,at,Math.pow(2,8*at)-1,0);var Ot=at-1,Pt=1;for(this[Y+Ot]=255&z;--Ot>=0&&(Pt*=256);)this[Y+Ot]=z/Pt&255;return Y+at},g.prototype.writeUInt8=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,1,255,0),g.TYPED_ARRAY_SUPPORT||(z=Math.floor(z)),this[Y]=255&z,Y+1},g.prototype.writeUInt16LE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,2,65535,0),g.TYPED_ARRAY_SUPPORT?(this[Y]=255&z,this[Y+1]=z>>>8):ft(this,z,Y,!0),Y+2},g.prototype.writeUInt16BE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,2,65535,0),g.TYPED_ARRAY_SUPPORT?(this[Y]=z>>>8,this[Y+1]=255&z):ft(this,z,Y,!1),Y+2},g.prototype.writeUInt32LE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,4,4294967295,0),g.TYPED_ARRAY_SUPPORT?(this[Y+3]=z>>>24,this[Y+2]=z>>>16,this[Y+1]=z>>>8,this[Y]=255&z):tt(this,z,Y,!0),Y+4},g.prototype.writeUInt32BE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,4,4294967295,0),g.TYPED_ARRAY_SUPPORT?(this[Y]=z>>>24,this[Y+1]=z>>>16,this[Y+2]=z>>>8,this[Y+3]=255&z):tt(this,z,Y,!1),Y+4},g.prototype.writeIntLE=function(z,Y,at,Tt){if(z=+z,Y|=0,!Tt){var Ot=Math.pow(2,8*at-1);ut(this,z,Y,at,Ot-1,-Ot)}var Pt=0,$t=1,me=0;for(this[Y]=255&z;++Pt<at&&($t*=256);)z<0&&me===0&&this[Y+Pt-1]!==0&&(me=1),this[Y+Pt]=(z/$t>>0)-me&255;return Y+at},g.prototype.writeIntBE=function(z,Y,at,Tt){if(z=+z,Y|=0,!Tt){var Ot=Math.pow(2,8*at-1);ut(this,z,Y,at,Ot-1,-Ot)}var Pt=at-1,$t=1,me=0;for(this[Y+Pt]=255&z;--Pt>=0&&($t*=256);)z<0&&me===0&&this[Y+Pt+1]!==0&&(me=1),this[Y+Pt]=(z/$t>>0)-me&255;return Y+at},g.prototype.writeInt8=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,1,127,-128),g.TYPED_ARRAY_SUPPORT||(z=Math.floor(z)),z<0&&(z=255+z+1),this[Y]=255&z,Y+1},g.prototype.writeInt16LE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,2,32767,-32768),g.TYPED_ARRAY_SUPPORT?(this[Y]=255&z,this[Y+1]=z>>>8):ft(this,z,Y,!0),Y+2},g.prototype.writeInt16BE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,2,32767,-32768),g.TYPED_ARRAY_SUPPORT?(this[Y]=z>>>8,this[Y+1]=255&z):ft(this,z,Y,!1),Y+2},g.prototype.writeInt32LE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,4,2147483647,-2147483648),g.TYPED_ARRAY_SUPPORT?(this[Y]=255&z,this[Y+1]=z>>>8,this[Y+2]=z>>>16,this[Y+3]=z>>>24):tt(this,z,Y,!0),Y+4},g.prototype.writeInt32BE=function(z,Y,at){return z=+z,Y|=0,at||ut(this,z,Y,4,2147483647,-2147483648),z<0&&(z=4294967295+z+1),g.TYPED_ARRAY_SUPPORT?(this[Y]=z>>>24,this[Y+1]=z>>>16,this[Y+2]=z>>>8,this[Y+3]=255&z):tt(this,z,Y,!1),Y+4},g.prototype.writeFloatLE=function(z,Y,at){return St(this,z,Y,!0,at)},g.prototype.writeFloatBE=function(z,Y,at){return St(this,z,Y,!1,at)},g.prototype.writeDoubleLE=function(z,Y,at){return _t(this,z,Y,!0,at)},g.prototype.writeDoubleBE=function(z,Y,at){return _t(this,z,Y,!1,at)},g.prototype.copy=function(z,Y,at,Tt){if(at||(at=0),Tt||Tt===0||(Tt=this.length),Y>=z.length&&(Y=z.length),Y||(Y=0),Tt>0&&Tt<at&&(Tt=at),Tt===at||z.length===0||this.length===0)return 0;if(Y<0)throw new RangeError("targetStart out of bounds");if(at<0||at>=this.length)throw new RangeError("sourceStart out of bounds");if(Tt<0)throw new RangeError("sourceEnd out of bounds");Tt>this.length&&(Tt=this.length),z.length-Y<Tt-at&&(Tt=z.length-Y+at);var Ot,Pt=Tt-at;if(this===z&&at<Y&&Y<Tt)for(Ot=Pt-1;Ot>=0;--Ot)z[Ot+Y]=this[Ot+at];else if(Pt<1e3||!g.TYPED_ARRAY_SUPPORT)for(Ot=0;Ot<Pt;++Ot)z[Ot+Y]=this[Ot+at];else Uint8Array.prototype.set.call(z,this.subarray(at,at+Pt),Y);return Pt},g.prototype.fill=function(z,Y,at,Tt){if(typeof z=="string"){if(typeof Y=="string"?(Tt=Y,Y=0,at=this.length):typeof at=="string"&&(Tt=at,at=this.length),z.length===1){var Ot=z.charCodeAt(0);Ot<256&&(z=Ot)}if(Tt!==void 0&&typeof Tt!="string")throw new TypeError("encoding must be a string");if(typeof Tt=="string"&&!g.isEncoding(Tt))throw new TypeError("Unknown encoding: "+Tt)}else typeof z=="number"&&(z&=255);if(Y<0||this.length<Y||this.length<at)throw new RangeError("Out of range index");if(at<=Y)return this;var Pt;if(Y>>>=0,at=at===void 0?this.length:at>>>0,z||(z=0),typeof z=="number")for(Pt=Y;Pt<at;++Pt)this[Pt]=z;else{var $t=g.isBuffer(z)?z:Lt(new g(z,Tt).toString()),me=$t.length;for(Pt=0;Pt<at-Y;++Pt)this[Pt+Y]=$t[Pt%me]}return this};var Gt=/[^+\/0-9A-Za-z-_]/g;function Wt(z){return z<16?"0"+z.toString(16):z.toString(16)}function Lt(z,Y){var at;Y=Y||1/0;for(var Tt=z.length,Ot=null,Pt=[],$t=0;$t<Tt;++$t){if((at=z.charCodeAt($t))>55295&&at<57344){if(!Ot){if(at>56319){(Y-=3)>-1&&Pt.push(239,191,189);continue}if($t+1===Tt){(Y-=3)>-1&&Pt.push(239,191,189);continue}Ot=at;continue}if(at<56320){(Y-=3)>-1&&Pt.push(239,191,189),Ot=at;continue}at=65536+(Ot-55296<<10|at-56320)}else Ot&&(Y-=3)>-1&&Pt.push(239,191,189);if(Ot=null,at<128){if((Y-=1)<0)break;Pt.push(at)}else if(at<2048){if((Y-=2)<0)break;Pt.push(at>>6|192,63&at|128)}else if(at<65536){if((Y-=3)<0)break;Pt.push(at>>12|224,at>>6&63|128,63&at|128)}else{if(!(at<1114112))throw new Error("Invalid code point");if((Y-=4)<0)break;Pt.push(at>>18|240,at>>12&63|128,at>>6&63|128,63&at|128)}}return Pt}function Qt(z){return o.toByteArray(function(Y){if((Y=function(at){return at.trim?at.trim():at.replace(/^\s+|\s+$/g,"")}(Y).replace(Gt,"")).length<2)return"";for(;Y.length%4!=0;)Y+="=";return Y}(z))}function he(z,Y,at,Tt){for(var Ot=0;Ot<Tt&&!(Ot+at>=Y.length||Ot>=z.length);++Ot)Y[Ot+at]=z[Ot];return Ot}}).call(this,a(3))},function(e,i){var a,s,o=e.exports={};function h(){throw new Error("setTimeout has not been defined")}function f(){throw new Error("clearTimeout has not been defined")}function d(P){if(a===setTimeout)return setTimeout(P,0);if((a===h||!a)&&setTimeout)return a=setTimeout,setTimeout(P,0);try{return a(P,0)}catch{try{return a.call(null,P,0)}catch{return a.call(this,P,0)}}}(function(){try{a=typeof setTimeout=="function"?setTimeout:h}catch{a=h}try{s=typeof clearTimeout=="function"?clearTimeout:f}catch{s=f}})();var p,g=[],x=!1,w=-1;function _(){x&&p&&(x=!1,p.length?g=p.concat(g):w=-1,g.length&&A())}function A(){if(!x){var P=d(_);x=!0;for(var M=g.length;M;){for(p=g,g=[];++w<M;)p&&p[w].run();w=-1,M=g.length}p=null,x=!1,function(F){if(s===clearTimeout)return clearTimeout(F);if((s===f||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(F);try{s(F)}catch{try{return s.call(null,F)}catch{return s.call(this,F)}}}(P)}}function T(P,M){this.fun=P,this.array=M}function E(){}o.nextTick=function(P){var M=new Array(arguments.length-1);if(arguments.length>1)for(var F=1;F<arguments.length;F++)M[F-1]=arguments[F];g.push(new T(P,M)),g.length!==1||x||d(A)},T.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=E,o.addListener=E,o.once=E,o.off=E,o.removeListener=E,o.removeAllListeners=E,o.emit=E,o.prependListener=E,o.prependOnceListener=E,o.listeners=function(P){return[]},o.binding=function(P){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(P){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,i,a){const{MAX_SAFE_INTEGER_LENGTH:s}=a(30);function o(h,f){const d=h.length,p=f.length,g=h.indexOf("."),x=f.indexOf("."),w=g===-1?d:g,_=x===-1?p:x;if(g===-1&&x===-1&&d<s&&p<s)return(Number(h)+Number(f)).toFixed();const A=w-_;let T=Math.max(w,_),E=Math.max(d-w-1,p-_-1),P=A<0?-1*A:0,M=A<=0?0:A,F=T+1+E-1,k="",O=0,v=F;if(E>0){for(;v>F-E;){const R=h[v-P]||"0",G=f[v-M]||"0";let j=Number(R)+Number(G)+O;j>=10?(j-=10,O=1):O=0,k===""&&j===0||(k=j+k),v--}k&&(k="."+k),v--}if(T>0)for(;v>=0;){const R=h[v-P]||"0",G=f[v-M]||"0";let j=Number(R)+Number(G)+O;j>=10?(j-=10,O=1):O=0,k=j+k,v--}return O===1&&(k=O+k),k[0]==="."&&(k="0"+k),k}e.exports=o,e.exports.default=o},function(e,i){typeof Object.create=="function"?e.exports=function(a,s){s&&(a.super_=s,a.prototype=Object.create(s.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(a,s){if(s){a.super_=s;var o=function(){};o.prototype=s.prototype,a.prototype=new o,a.prototype.constructor=a}}},function(e,i,a){function s(o){return/^[-+]?0(\.0+)?(e[\.\d]+)?$/.test(o)}e.exports=s,e.exports.default=s},function(e,i,a){(function(s){i.formatArgs=function(h){if(h[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+h[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const f="color: "+this.color;h.splice(1,0,f,"color: inherit");let d=0,p=0;h[0].replace(/%[a-zA-Z%]/g,g=>{g!=="%%"&&(d++,g==="%c"&&(p=d))}),h.splice(p,0,f)},i.save=function(h){try{h?i.storage.setItem("debug",h):i.storage.removeItem("debug")}catch{}},i.load=function(){let h;try{h=i.storage.getItem("debug")}catch{}return!h&&s!==void 0&&"env"in s&&(h=s.env.DEBUG),h},i.useColors=function(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},i.storage=function(){try{return localStorage}catch{}}(),i.destroy=(()=>{let h=!1;return()=>{h||(h=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),i.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],i.log=console.debug||console.log||(()=>{}),e.exports=a(134)(i);const{formatters:o}=e.exports;o.j=function(h){try{return JSON.stringify(h)}catch(f){return"[UnexpectedJSONParseError]: "+f.message}}}).call(this,a(8))},function(e,i,a){a.d(i,"a",function(){return h}),a.d(i,"b",function(){return f});const s={deserialize:d=>Object.assign(Error(d.message),{name:d.name,stack:d.stack}),serialize:d=>({__error_marker:"$$error",message:d.message,name:d.name,stack:d.stack})};let o={deserialize(d){return(p=d)&&typeof p=="object"&&"__error_marker"in p&&p.__error_marker==="$$error"?s.deserialize(d):d;var p},serialize:d=>d instanceof Error?s.serialize(d):d};function h(d){return o.deserialize(d)}function f(d){return o.serialize(d)}},function(e,i,a){var s=a(28),o=Object.keys||function(T){var E=[];for(var P in T)E.push(P);return E};e.exports=w;var h=Object.create(a(21));h.inherits=a(10);var f=a(61),d=a(65);h.inherits(w,f);for(var p=o(d.prototype),g=0;g<p.length;g++){var x=p[g];w.prototype[x]||(w.prototype[x]=d.prototype[x])}function w(T){if(!(this instanceof w))return new w(T);f.call(this,T),d.call(this,T),T&&T.readable===!1&&(this.readable=!1),T&&T.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,T&&T.allowHalfOpen===!1&&(this.allowHalfOpen=!1),this.once("end",_)}function _(){this.allowHalfOpen||this._writableState.ended||s.nextTick(A,this)}function A(T){T.end()}Object.defineProperty(w.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(w.prototype,"destroyed",{get:function(){return this._readableState!==void 0&&this._writableState!==void 0&&this._readableState.destroyed&&this._writableState.destroyed},set:function(T){this._readableState!==void 0&&this._writableState!==void 0&&(this._readableState.destroyed=T,this._writableState.destroyed=T)}}),w.prototype._destroy=function(T,E){this.push(null),this.end(),s.nextTick(E,T)}},function(e,i,a){function s(o){return!!o.match(/^(|-|\+)inf(inity)?$/i)}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(0),o=a(15);function h(f){return!o(f)&&!(f=s(f)).includes(".")&&!f.includes("/")}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(4),o=a(0),h=a(5),f=a(48),d=a(36);function p(g,{max_decimal_digits:x}={}){let w=o(g[0]),_=s(w),A=w[0]==="-"?"-":"";const T=g.length;for(let E=1;E<T;E++){const P=o(g[E]),M=P[0]==="-"?"-":"",F=s(P);A=A!==M?"-":"",_=h(_,F)==="<"?f(F,_):f(_,F),w=A+_}return typeof x=="number"&&(w=d(w,{digits:x})),w}e.exports=p,e.exports.default=p},function(e,i,a){const s=a(184);e.exports=function(o){return o[0]==="+"&&(o=o.substring(1)),(o=(o=s(o)).replace(/^0+(?=\d)/,"")).includes(".")&&(o=o.replace(/\.?0+$/,"")),o===""&&(o="0"),o}},function(e,i,a){let s;function o(){return s||(s=function(){try{throw new Error}catch(x){const w=(""+x.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);if(w)return(""+w[0]).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)?\/[^/]+(?:\?.*)?$/,"$1")+"/"}return"/"}()),s}a.d(i,"a",function(){return h}),a.d(i,"b",function(){return g});const h=typeof navigator<"u"&&navigator.hardwareConcurrency?navigator.hardwareConcurrency:4,f=x=>/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(x);function d(x){const w=new Blob([x],{type:"application/javascript"});return URL.createObjectURL(w)}let p;function g(){return p||(p=function(){if(typeof Worker>"u")return class{constructor(){throw Error("No web worker implementation available. You might have tried to spawn a worker within a worker in a browser that doesn't support workers in workers.")}};class x extends Worker{constructor(A,T){var E,P;typeof A=="string"&&T&&T._baseURL?A=new URL(A,T._baseURL):typeof A=="string"&&!f(A)&&o().match(/^file:\/\//i)&&(A=new URL(A,o().replace(/\/[^\/]+$/,"/")),((E=T==null?void 0:T.CORSWorkaround)===null||E===void 0||E)&&(A=d(`importScripts(${JSON.stringify(A)});`))),typeof A=="string"&&f(A)&&((P=T==null?void 0:T.CORSWorkaround)===null||P===void 0||P)&&(A=d(`importScripts(${JSON.stringify(A)});`)),super(A,T)}}class w extends x{constructor(A,T){super(window.URL.createObjectURL(A),T)}static fromText(A,T){const E=new window.Blob([A],{type:"text/javascript"});return new w(E,T)}}return{blob:w,default:x}}()),p}},function(e,i,a){var s,o;a.d(i,"a",function(){return s}),a.d(i,"b",function(){return o}),function(h){h.cancel="cancel",h.run="run"}(s||(s={})),function(h){h.error="error",h.init="init",h.result="result",h.running="running",h.uncaughtError="uncaughtError"}(o||(o={}))},function(e,i,a){function s(o){return Object.prototype.toString.call(o)}i.isArray=function(o){return Array.isArray?Array.isArray(o):s(o)==="[object Array]"},i.isBoolean=function(o){return typeof o=="boolean"},i.isNull=function(o){return o===null},i.isNullOrUndefined=function(o){return o==null},i.isNumber=function(o){return typeof o=="number"},i.isString=function(o){return typeof o=="string"},i.isSymbol=function(o){return typeof o=="symbol"},i.isUndefined=function(o){return o===void 0},i.isRegExp=function(o){return s(o)==="[object RegExp]"},i.isObject=function(o){return typeof o=="object"&&o!==null},i.isDate=function(o){return s(o)==="[object Date]"},i.isError=function(o){return s(o)==="[object Error]"||o instanceof Error},i.isFunction=function(o){return typeof o=="function"},i.isPrimitive=function(o){return o===null||typeof o=="boolean"||typeof o=="number"||typeof o=="string"||typeof o=="symbol"||o===void 0},i.isBuffer=a(7).Buffer.isBuffer},function(e,i,a){const s=a(11),o=a(50);function h(f){return s(f)?"":o(f)}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(35);function o(h,f){return s(h,"2",f)}e.exports=o,e.exports.default=o},function(e,i,a){a.d(i,"a",function(){return h});var s=a(2);function o(f){throw Error(f)}const h={errors:f=>f[s.a]||o("Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise."),events:f=>f[s.b]||o("Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise."),terminate:f=>f[s.c]()}},function(e,i){},function(e,i,a){const s=()=>typeof Symbol=="function",o=O=>s()&&!!Symbol[O],h=O=>o(O)?Symbol[O]:"@@"+O;o("asyncIterator")||(Symbol.asyncIterator=Symbol.asyncIterator||Symbol.for("Symbol.asyncIterator"));const f=h("iterator"),d=h("observable"),p=h("species");function g(O,v){const R=O[v];if(R!=null){if(typeof R!="function")throw new TypeError(R+" is not a function");return R}}function x(O){let v=O.constructor;return v!==void 0&&(v=v[p],v===null&&(v=void 0)),v!==void 0?v:k}function w(O){w.log?w.log(O):setTimeout(()=>{throw O},0)}function _(O){Promise.resolve().then(()=>{try{O()}catch(v){w(v)}})}function A(O){const v=O._cleanup;if(v!==void 0&&(O._cleanup=void 0,v))try{if(typeof v=="function")v();else{const R=g(v,"unsubscribe");R&&R.call(v)}}catch(R){w(R)}}function T(O){O._observer=void 0,O._queue=void 0,O._state="closed"}function E(O,v,R){O._state="running";const G=O._observer;try{const j=G?g(G,v):void 0;switch(v){case"next":j&&j.call(G,R);break;case"error":if(T(O),!j)throw R;j.call(G,R);break;case"complete":T(O),j&&j.call(G)}}catch(j){w(j)}O._state==="closed"?A(O):O._state==="running"&&(O._state="ready")}function P(O,v,R){if(O._state!=="closed")return O._state==="buffering"?(O._queue=O._queue||[],void O._queue.push({type:v,value:R})):O._state!=="ready"?(O._state="buffering",O._queue=[{type:v,value:R}],void _(()=>function(G){const j=G._queue;if(j){G._queue=void 0,G._state="ready";for(const U of j)if(E(G,U.type,U.value),G._state==="closed")break}}(O))):void E(O,v,R)}class M{constructor(v,R){this._cleanup=void 0,this._observer=v,this._queue=void 0,this._state="initializing";const G=new F(this);try{this._cleanup=R.call(void 0,G)}catch(j){G.error(j)}this._state==="initializing"&&(this._state="ready")}get closed(){return this._state==="closed"}unsubscribe(){this._state!=="closed"&&(T(this),A(this))}}class F{constructor(v){this._subscription=v}get closed(){return this._subscription._state==="closed"}next(v){P(this._subscription,"next",v)}error(v){P(this._subscription,"error",v)}complete(){P(this._subscription,"complete")}}class k{constructor(v){if(!(this instanceof k))throw new TypeError("Observable cannot be called as a function");if(typeof v!="function")throw new TypeError("Observable initializer must be a function");this._subscriber=v}subscribe(v,R,G){return typeof v=="object"&&v!==null||(v={next:v,error:R,complete:G}),new M(v,this._subscriber)}pipe(v,...R){let G=this;for(const j of[v,...R])G=j(G);return G}tap(v,R,G){const j=typeof v!="object"||v===null?{next:v,error:R,complete:G}:v;return new k(U=>this.subscribe({next(N){j.next&&j.next(N),U.next(N)},error(N){j.error&&j.error(N),U.error(N)},complete(){j.complete&&j.complete(),U.complete()},start(N){j.start&&j.start(N)}}))}forEach(v){return new Promise((R,G)=>{if(typeof v!="function")return void G(new TypeError(v+" is not a function"));function j(){U.unsubscribe(),R(void 0)}const U=this.subscribe({next(N){try{v(N,j)}catch(Z){G(Z),U.unsubscribe()}},error(N){G(N)},complete(){R(void 0)}})})}map(v){if(typeof v!="function")throw new TypeError(v+" is not a function");return new(x(this))(R=>this.subscribe({next(G){let j=G;try{j=v(G)}catch(U){return R.error(U)}R.next(j)},error(G){R.error(G)},complete(){R.complete()}}))}filter(v){if(typeof v!="function")throw new TypeError(v+" is not a function");return new(x(this))(R=>this.subscribe({next(G){try{if(!v(G))return}catch(j){return R.error(j)}R.next(G)},error(G){R.error(G)},complete(){R.complete()}}))}reduce(v,R){if(typeof v!="function")throw new TypeError(v+" is not a function");const G=x(this),j=arguments.length>1;let U=!1,N=R;return new G(Z=>this.subscribe({next(V){const B=!U;if(U=!0,!B||j)try{N=v(N,V)}catch(J){return Z.error(J)}else N=V},error(V){Z.error(V)},complete(){if(!U&&!j)return Z.error(new TypeError("Cannot reduce an empty sequence"));Z.next(N),Z.complete()}}))}concat(...v){const R=x(this);return new R(G=>{let j,U=0;return function N(Z){j=Z.subscribe({next(V){G.next(V)},error(V){G.error(V)},complete(){U===v.length?(j=void 0,G.complete()):N(R.from(v[U++]))}})}(this),()=>{j&&(j.unsubscribe(),j=void 0)}})}flatMap(v){if(typeof v!="function")throw new TypeError(v+" is not a function");const R=x(this);return new R(G=>{const j=[],U=this.subscribe({next(Z){let V;if(v)try{V=v(Z)}catch(J){return G.error(J)}else V=Z;const B=R.from(V).subscribe({next(J){G.next(J)},error(J){G.error(J)},complete(){const J=j.indexOf(B);J>=0&&j.splice(J,1),N()}});j.push(B)},error(Z){G.error(Z)},complete(){N()}});function N(){U.closed&&j.length===0&&G.complete()}return()=>{j.forEach(Z=>Z.unsubscribe()),U.unsubscribe()}})}[d](){return this}static from(v){const R=typeof this=="function"?this:k;if(v==null)throw new TypeError(v+" is not an object");const G=g(v,d);if(G){const j=G.call(v);if(Object(j)!==j)throw new TypeError(j+" is not an object");return function(U){return U instanceof k}(j)&&j.constructor===R?j:new R(U=>j.subscribe(U))}if(o("iterator")){const j=g(v,f);if(j)return new R(U=>{_(()=>{if(!U.closed){for(const N of j.call(v))if(U.next(N),U.closed)return;U.complete()}})})}if(Array.isArray(v))return new R(j=>{_(()=>{if(!j.closed){for(const U of v)if(j.next(U),j.closed)return;j.complete()}})});throw new TypeError(v+" is not observable")}static of(...v){return new(typeof this=="function"?this:k)(R=>{_(()=>{if(!R.closed){for(const G of v)if(R.next(G),R.closed)return;R.complete()}})})}static get[p](){return this}}s()&&Object.defineProperty(k,Symbol("extensions"),{value:{symbol:d,hostReportError:w},configurable:!0}),i.a=k},function(e,i,a){var s;a.d(i,"a",function(){return s}),function(o){o.internalError="internalError",o.message="message",o.termination="termination"}(s||(s={}))},function(e,i,a){(function(s){s===void 0||!s.version||s.version.indexOf("v0.")===0||s.version.indexOf("v1.")===0&&s.version.indexOf("v1.8.")!==0?e.exports={nextTick:function(o,h,f,d){if(typeof o!="function")throw new TypeError('"callback" argument must be a function');var p,g,x=arguments.length;switch(x){case 0:case 1:return s.nextTick(o);case 2:return s.nextTick(function(){o.call(null,h)});case 3:return s.nextTick(function(){o.call(null,h,f)});case 4:return s.nextTick(function(){o.call(null,h,f,d)});default:for(p=new Array(x-1),g=0;g<p.length;)p[g++]=arguments[g];return s.nextTick(function(){o.apply(null,p)})}}}:e.exports=s}).call(this,a(8))},function(e,i,a){var s=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";function o(d,p){return Object.prototype.hasOwnProperty.call(d,p)}i.assign=function(d){for(var p=Array.prototype.slice.call(arguments,1);p.length;){var g=p.shift();if(g){if(typeof g!="object")throw new TypeError(g+"must be non-object");for(var x in g)o(g,x)&&(d[x]=g[x])}}return d},i.shrinkBuf=function(d,p){return d.length===p?d:d.subarray?d.subarray(0,p):(d.length=p,d)};var h={arraySet:function(d,p,g,x,w){if(p.subarray&&d.subarray)d.set(p.subarray(g,g+x),w);else for(var _=0;_<x;_++)d[w+_]=p[g+_]},flattenChunks:function(d){var p,g,x,w,_,A;for(x=0,p=0,g=d.length;p<g;p++)x+=d[p].length;for(A=new Uint8Array(x),w=0,p=0,g=d.length;p<g;p++)_=d[p],A.set(_,w),w+=_.length;return A}},f={arraySet:function(d,p,g,x,w){for(var _=0;_<x;_++)d[w+_]=p[g+_]},flattenChunks:function(d){return[].concat.apply([],d)}};i.setTyped=function(d){d?(i.Buf8=Uint8Array,i.Buf16=Uint16Array,i.Buf32=Int32Array,i.assign(i,h)):(i.Buf8=Array,i.Buf16=Array,i.Buf32=Array,i.assign(i,f))},i.setTyped(s)},function(e,i,a){const{MAX_SAFE_INTEGER:s}=a(74),o=s.toString().length-1;e.exports={MAX_SAFE_INTEGER_LENGTH:o}},function(e,i,a){const{MAX_SAFE_INTEGER_LENGTH:s}=a(30);function o(h,f){const d=h.length,p=f.length,g=h.indexOf("."),x=f.indexOf("."),w=g===-1?d:g,_=x===-1?p:x;if(g===-1&&x===-1&&d<s&&p<s)return(Number(h)-Number(f)).toFixed();const A=w-_;let T=Math.max(w,_),E=Math.max(d-w-1,p-_-1),P=A<0?-1*A:0,M=A<=0?0:A,F=T+1+E-1,k="",O=0,v=F;if(E>0){for(;v>F-E;){let R=h[v-P]||"0",G=f[v-M]||"0";R-=O,O=0;let j=R-G;if(j<0)for(;j<0;)O++,j+=10;else O&&O--;k===""&&j===0||(k=j+k),v--}k!==""&&(k="."+k),v--}if(T>0){for(;v>0;){let U=h[v-P]||"0",N=f[v-M]||"0";U-=O,O=0;let Z=U-N;if(Z<0)for(;Z<0;)O++,Z+=10;else O&&O--;k=Z+k,v--}const R=h[0-P]||"0",G=f[0-M]||"0";let j=Number(R)-(O>0?1:0)-Number(G);j!==0&&(k=j+k),k=k.replace(/^0+/,"")}return k[0]==="."&&(k="0"+k),k}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(5),o=a(6),h=a(33),f=a(49);function d(p,g,{format:x="string",max_decimal_digits:w=100,ellipsis:_=!1}={}){p[0]==="0"&&(p=p.substring(1)),g[0]==="0"&&(g=g.substring(1));const A=p.indexOf("."),T=g.indexOf("."),E=A===-1?p.length:A,P=T===-1?0:g.length-1-T;let M=!1;p=p.replace(/\./,""),g=g.replace(/\./,"");const F=p.length;let k,O="",v="",R=-1*P,G=0;for(let V=0;V<F;V++)if(O+=p[V],k=s(O,g),k===">"){let B=1,J=o(g,g),lt=g;for(;s(J,O)!==">";)B++,lt=J,J=o(J,g);if(B=B.toString(),v!=="")for(let mt=B.length;mt<=G;mt++)v+="0";v+=B,O=h(O,lt),G=0}else{if(k==="<"){v===""&&R++,G++;continue}if(k==="="){if(v!=="")for(let B=0;B<G;B++)v+="0";v+="1",O="0",G=0}}if(O.match(/^0+$/g))k==="<"&&(v+=O.substring(0,O.length-1));else{const V={},B=E-R-v.length+w+1;v===""&&(G=0);for(let J=0;J<B;J++){if(O+="0",_)if(O in V){if(V[O]++,V[O]>3){v+="...",M=!0;break}}else V[O]=1;const lt=s(O,g);if(lt===">"){let mt=1,ut=o(g,g),ft=g;for(;s(ut,O)!==">";)mt++,ft=ut,ut=o(ut,g);mt=mt.toString();for(let tt=mt.length;tt<=G;tt++)v+="0";if(v+=mt,O=h(O,ft),O==="0")break;G=0}else{if(lt==="<"){G++;continue}if(lt==="="){for(let mt=0;mt<G;mt++)v+="0";v+="1",G=0;break}}}}const j=E-R,U=v.length;let N;if(j===U)N=0;else if(j<0)v="0."+"0".repeat(Math.abs(j))+v,N=U-j;else if(j>U){for(let V=U;V<j;V++)v+="0";N=0}else j<U?(v=v.substring(0,j)+"."+v.substring(j),N=U-j):j===0&&(v="0."+v,N=U);v=v.replace(/^0+/,""),v=v.replace(/\.\d+0+$/,"");const Z=N-w;return M||Z>0&&(v=f(v.substring(0,v.length-Z+1))),v[0]==="."&&(v="0"+v),x==="object"?{quotient:v,extra_decimals:Z}:v}e.exports=d,e.exports.default=d},function(e,i,a){const s=a(0),o=a(5),h=a(15),f=a(9),d=a(31);function p(g,x,{infinity_minus_infinity:w="NaN"}={}){g=s(g),x=s(x);const _=g[0]!=="-",A=x[0]!=="-",T=h(g),E=h(x);if(T&&E){if(_===A)return w;if(_)return"Infinity";if(A)return"-Infinity"}else{if(T)return g;if(E)return A?"-Infinity":"Infinity"}if(_){if(A){const P=o(g,x);return P===">"?d(g,x):P==="<"?"-"+d(x,g):"0"}return f(g,x.substring(1))}if(A)return"-"+f(g.substring(1),x);{g=g.substring(1),x=x.substring(1);const P=o(g,x);return P===">"?"-"+d(g,x):P==="<"?d(x,g):"0"}}e.exports=p,e.exports.default=p},function(e,i,a){const s=a(0),o=a(5);function h(f,d){f=s(f),d=s(d);const p=f[0]!=="-",g=d[0]!=="-";return p?g?o(f,d):">":g?"<":o(d.substring(1),f.substring(1))}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(4),o=a(0),h=a(1),f=a(77),d=a(16),p=a(52),g=a(78),x=a(11),w=a(53),_=a(54),A=a(81),T=a(37),E=a(36),P=a(22),M=a(85);function F(k,O,{zero_to_the_power_of_zero:v="1",ellipsis:R=!1,imaginary:G=!0,max_decimal_digits:j=100,fraction:U=!1}={}){k=o(k),O=o(O);const N=G&&p(k);N&&(k=k.replace(/i$/,""));const Z=x(k),V=x(O);if(Z&&V)return v;if(V)return"1";const B=P(O);if(Z){if(B==="+")return"0";if(B==="-")return"Infinity"}const J=d(O);if(B==="+"&&J){let lt=_(k,O);return typeof j=="number"&&(lt=E(lt,{digits:j})),N&&g(O)&&(lt+="i"),lt}if(B==="-"&&J){const lt="1",mt=_(k,s(O));return h(lt,mt,{ellipsis:R,max_decimal_digits:j})}if(!J){O=s(O);let[lt,mt]=O.includes("/")?O.split("/"):f(O);[lt,mt]=M(lt,mt);let ut=T(k,mt,{imaginary:G}),ft=w(lt,ut);return typeof j=="number"&&(ft=E(ft,{digits:j})),B==="-"&&(ft=A(ft,{fraction:U,max_decimal_digits:j})),ft}}e.exports=F,e.exports.default=F},function(e,i,a){const s=a(52),o=a(164);function h(f,{digits:d=0}={}){return s(f)?o(f.substring(0,f.length-1),{digits:d})+"i":o(f,{digits:d})}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(4),o=a(0),h=a(5),f=a(82),d=a(16),p=a(80),g=a(54),x=a(83);function w(_,A,{imaginary:T=!0,max_decimal_digits:E=100}={}){if(_=o(_),(A=o(A))==="1")return _;if(_==="1")return"1";if(!d(A))throw new Error("[preciso] can't find fractional roots");if(p(A))throw new Error("[preciso] can't find root of negative indexes");const P=s(_),M=p(_),F=f(A),k=M&&F;if(k&&!T)throw new Error("[preciso] root has an imaginary number");const O=M&&!F?"-":"",v=x(P,A),R=["9","8","7","6","5","4","3","2","1","0"];let G="";for(let U=0;U<v;U++)for(let N=0;N<R.length;N++){const Z=G+R[N];let V=Z+"0".repeat(v-U-1);const B=g(V,A),J=h(B,P);if(J==="=")return k&&(V+="i"),O+V;if(J==="<"){G=Z;break}}let j=G+".";for(let U=0;U<E;U++){let N=!1;for(let Z=0;Z<R.length;Z++){let V=j+R[Z];const B=g(V,A),J=h(B,P);if(J==="=")return k&&(V+="i"),O+V;if(J==="<"){j=V,N=!0;break}}if(!N)break}return k&&(j+="i"),O+j}e.exports=w,e.exports.default=w},function(e,i,a){a(18);function s(o,h){const f=o.length,d=h.length,p=o.indexOf("."),g=h.indexOf("."),x=p===-1?f:p,w=g===-1?d:g,_=x-w;let A=_<0?-1*_:0,T=_<=0?0:_,E=Math.max(x,w)+1+Math.max(f-x,d-w)-1,P=0;for(;P<E;){const M=P-A,F=M===x?".":o[M]||"0",k=P-T,O=k===w?".":h[k]||"0";if(F!==O){if(F>O)return">";if(F<O)return"<"}P++}return"="}e.exports=s,e.exports.default=s},function(e,i,a){var s=a(140);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var h=/^([a-z0-9.+-]+:)/i,f=/:[0-9]*$/,d=/^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/,p=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r",`
`,"	"]),g=["'"].concat(p),x=["%","/","?",";","#"].concat(g),w=["/","?","#"],_=/^[+a-z0-9A-Z_-]{0,63}$/,A=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,T={javascript:!0,"javascript:":!0},E={javascript:!0,"javascript:":!0},P={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},M=a(142);function F(k,O,v){if(k&&typeof k=="object"&&k instanceof o)return k;var R=new o;return R.parse(k,O,v),R}o.prototype.parse=function(k,O,v){if(typeof k!="string")throw new TypeError("Parameter 'url' must be a string, not "+typeof k);var R=k.indexOf("?"),G=R!==-1&&R<k.indexOf("#")?"?":"#",j=k.split(G);j[0]=j[0].replace(/\\/g,"/");var U=k=j.join(G);if(U=U.trim(),!v&&k.split("#").length===1){var N=d.exec(U);if(N)return this.path=U,this.href=U,this.pathname=N[1],N[2]?(this.search=N[2],this.query=O?M.parse(this.search.substr(1)):this.search.substr(1)):O&&(this.search="",this.query={}),this}var Z=h.exec(U);if(Z){var V=(Z=Z[0]).toLowerCase();this.protocol=V,U=U.substr(Z.length)}if(v||Z||U.match(/^\/\/[^@/]+@[^@/]+/)){var B=U.substr(0,2)==="//";!B||Z&&E[Z]||(U=U.substr(2),this.slashes=!0)}if(!E[Z]&&(B||Z&&!P[Z])){for(var J,lt,mt=-1,ut=0;ut<w.length;ut++)(ft=U.indexOf(w[ut]))!==-1&&(mt===-1||ft<mt)&&(mt=ft);for((lt=mt===-1?U.lastIndexOf("@"):U.lastIndexOf("@",mt))!==-1&&(J=U.slice(0,lt),U=U.slice(lt+1),this.auth=decodeURIComponent(J)),mt=-1,ut=0;ut<x.length;ut++){var ft;(ft=U.indexOf(x[ut]))!==-1&&(mt===-1||ft<mt)&&(mt=ft)}mt===-1&&(mt=U.length),this.host=U.slice(0,mt),U=U.slice(mt),this.parseHost(),this.hostname=this.hostname||"";var tt=this.hostname[0]==="["&&this.hostname[this.hostname.length-1]==="]";if(!tt)for(var et=this.hostname.split(/\./),St=(ut=0,et.length);ut<St;ut++){var _t=et[ut];if(_t&&!_t.match(_)){for(var Gt="",Wt=0,Lt=_t.length;Wt<Lt;Wt++)_t.charCodeAt(Wt)>127?Gt+="x":Gt+=_t[Wt];if(!Gt.match(_)){var Qt=et.slice(0,ut),he=et.slice(ut+1),z=_t.match(A);z&&(Qt.push(z[1]),he.unshift(z[2])),he.length&&(U="/"+he.join(".")+U),this.hostname=Qt.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),tt||(this.hostname=s.toASCII(this.hostname));var Y=this.port?":"+this.port:"",at=this.hostname||"";this.host=at+Y,this.href+=this.host,tt&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),U[0]!=="/"&&(U="/"+U))}if(!T[V])for(ut=0,St=g.length;ut<St;ut++){var Tt=g[ut];if(U.indexOf(Tt)!==-1){var Ot=encodeURIComponent(Tt);Ot===Tt&&(Ot=escape(Tt)),U=U.split(Tt).join(Ot)}}var Pt=U.indexOf("#");Pt!==-1&&(this.hash=U.substr(Pt),U=U.slice(0,Pt));var $t=U.indexOf("?");if($t!==-1?(this.search=U.substr($t),this.query=U.substr($t+1),O&&(this.query=M.parse(this.query)),U=U.slice(0,$t)):O&&(this.search="",this.query={}),U&&(this.pathname=U),P[V]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){Y=this.pathname||"";var me=this.search||"";this.path=Y+me}return this.href=this.format(),this},o.prototype.format=function(){var k=this.auth||"";k&&(k=(k=encodeURIComponent(k)).replace(/%3A/i,":"),k+="@");var O=this.protocol||"",v=this.pathname||"",R=this.hash||"",G=!1,j="";this.host?G=k+this.host:this.hostname&&(G=k+(this.hostname.indexOf(":")===-1?this.hostname:"["+this.hostname+"]"),this.port&&(G+=":"+this.port)),this.query&&typeof this.query=="object"&&Object.keys(this.query).length&&(j=M.stringify(this.query));var U=this.search||j&&"?"+j||"";return O&&O.substr(-1)!==":"&&(O+=":"),this.slashes||(!O||P[O])&&G!==!1?(G="//"+(G||""),v&&v.charAt(0)!=="/"&&(v="/"+v)):G||(G=""),R&&R.charAt(0)!=="#"&&(R="#"+R),U&&U.charAt(0)!=="?"&&(U="?"+U),O+G+(v=v.replace(/[?#]/g,function(N){return encodeURIComponent(N)}))+(U=U.replace("#","%23"))+R},o.prototype.resolve=function(k){return this.resolveObject(F(k,!1,!0)).format()},o.prototype.resolveObject=function(k){if(typeof k=="string"){var O=new o;O.parse(k,!1,!0),k=O}for(var v=new o,R=Object.keys(this),G=0;G<R.length;G++){var j=R[G];v[j]=this[j]}if(v.hash=k.hash,k.href==="")return v.href=v.format(),v;if(k.slashes&&!k.protocol){for(var U=Object.keys(k),N=0;N<U.length;N++){var Z=U[N];Z!=="protocol"&&(v[Z]=k[Z])}return P[v.protocol]&&v.hostname&&!v.pathname&&(v.pathname="/",v.path=v.pathname),v.href=v.format(),v}if(k.protocol&&k.protocol!==v.protocol){if(!P[k.protocol]){for(var V=Object.keys(k),B=0;B<V.length;B++){var J=V[B];v[J]=k[J]}return v.href=v.format(),v}if(v.protocol=k.protocol,k.host||E[k.protocol])v.pathname=k.pathname;else{for(var lt=(k.pathname||"").split("/");lt.length&&!(k.host=lt.shift()););k.host||(k.host=""),k.hostname||(k.hostname=""),lt[0]!==""&&lt.unshift(""),lt.length<2&&lt.unshift(""),v.pathname=lt.join("/")}if(v.search=k.search,v.query=k.query,v.host=k.host||"",v.auth=k.auth,v.hostname=k.hostname||k.host,v.port=k.port,v.pathname||v.search){var mt=v.pathname||"",ut=v.search||"";v.path=mt+ut}return v.slashes=v.slashes||k.slashes,v.href=v.format(),v}var ft=v.pathname&&v.pathname.charAt(0)==="/",tt=k.host||k.pathname&&k.pathname.charAt(0)==="/",et=tt||ft||v.host&&k.pathname,St=et,_t=v.pathname&&v.pathname.split("/")||[],Gt=(lt=k.pathname&&k.pathname.split("/")||[],v.protocol&&!P[v.protocol]);if(Gt&&(v.hostname="",v.port=null,v.host&&(_t[0]===""?_t[0]=v.host:_t.unshift(v.host)),v.host="",k.protocol&&(k.hostname=null,k.port=null,k.host&&(lt[0]===""?lt[0]=k.host:lt.unshift(k.host)),k.host=null),et=et&&(lt[0]===""||_t[0]==="")),tt)v.host=k.host||k.host===""?k.host:v.host,v.hostname=k.hostname||k.hostname===""?k.hostname:v.hostname,v.search=k.search,v.query=k.query,_t=lt;else if(lt.length)_t||(_t=[]),_t.pop(),_t=_t.concat(lt),v.search=k.search,v.query=k.query;else if(k.search!=null)return Gt&&(v.host=_t.shift(),v.hostname=v.host,(z=!!(v.host&&v.host.indexOf("@")>0)&&v.host.split("@"))&&(v.auth=z.shift(),v.hostname=z.shift(),v.host=v.hostname)),v.search=k.search,v.query=k.query,v.pathname===null&&v.search===null||(v.path=(v.pathname?v.pathname:"")+(v.search?v.search:"")),v.href=v.format(),v;if(!_t.length)return v.pathname=null,v.search?v.path="/"+v.search:v.path=null,v.href=v.format(),v;for(var Wt=_t.slice(-1)[0],Lt=(v.host||k.host||_t.length>1)&&(Wt==="."||Wt==="..")||Wt==="",Qt=0,he=_t.length;he>=0;he--)(Wt=_t[he])==="."?_t.splice(he,1):Wt===".."?(_t.splice(he,1),Qt++):Qt&&(_t.splice(he,1),Qt--);if(!et&&!St)for(;Qt--;Qt)_t.unshift("..");!et||_t[0]===""||_t[0]&&_t[0].charAt(0)==="/"||_t.unshift(""),Lt&&_t.join("/").substr(-1)!=="/"&&_t.push("");var z,Y=_t[0]===""||_t[0]&&_t[0].charAt(0)==="/";return Gt&&(v.hostname=Y?"":_t.length?_t.shift():"",v.host=v.hostname,(z=!!(v.host&&v.host.indexOf("@")>0)&&v.host.split("@"))&&(v.auth=z.shift(),v.hostname=z.shift(),v.host=v.hostname)),(et=et||v.host&&_t.length)&&!Y&&_t.unshift(""),_t.length>0?v.pathname=_t.join("/"):(v.pathname=null,v.path=null),v.pathname===null&&v.search===null||(v.path=(v.pathname?v.pathname:"")+(v.search?v.search:"")),v.auth=k.auth||v.auth,v.slashes=v.slashes||k.slashes,v.href=v.format(),v},o.prototype.parseHost=function(){var k=this.host,O=f.exec(k);O&&((O=O[0])!==":"&&(this.port=O.substr(1)),k=k.substr(0,k.length-O.length)),k&&(this.hostname=k)},i.parse=F,i.resolve=function(k,O){return F(k,!1,!0).resolve(O)},i.resolveObject=function(k,O){return k?F(k,!1,!0).resolveObject(O):O},i.format=function(k){return typeof k=="string"&&(k=F(k)),k instanceof o?k.format():o.prototype.format.call(k)},i.Url=o},function(e,i,a){(function(s){var o=a(136),h=a(70),f=a(138),d=a(139),p=a(39),g=i;g.request=function(x,w){x=typeof x=="string"?p.parse(x):f(x);var _=s.location.protocol.search(/^https?:$/)===-1?"http:":"",A=x.protocol||_,T=x.hostname||x.host,E=x.port,P=x.path||"/";T&&T.indexOf(":")!==-1&&(T="["+T+"]"),x.url=(T?A+"//"+T:"")+(E?":"+E:"")+P,x.method=(x.method||"GET").toUpperCase(),x.headers=x.headers||{};var M=new o(x);return w&&M.on("response",w),M},g.get=function(x,w){var _=g.request(x,w);return _.end(),_},g.ClientRequest=o,g.IncomingMessage=h.IncomingMessage,g.Agent=function(){},g.Agent.defaultMaxSockets=4,g.globalAgent=new g.Agent,g.STATUS_CODES=d,g.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]}).call(this,a(3))},,function(e,i,a){(i=e.exports=a(61)).Stream=i,i.Readable=i,i.Writable=a(65),i.Duplex=a(14),i.Transform=a(67),i.PassThrough=a(122)},function(e,i,a){var s=a(7),o=s.Buffer;function h(d,p){for(var g in d)p[g]=d[g]}function f(d,p,g){return o(d,p,g)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?e.exports=s:(h(s,i),i.Buffer=f),h(o,f),f.from=function(d,p,g){if(typeof d=="number")throw new TypeError("Argument must not be a number");return o(d,p,g)},f.alloc=function(d,p,g){if(typeof d!="number")throw new TypeError("Argument must be a number");var x=o(d);return p!==void 0?typeof g=="string"?x.fill(p,g):x.fill(p):x.fill(0),x},f.allocUnsafe=function(d){if(typeof d!="number")throw new TypeError("Argument must be a number");return o(d)},f.allocUnsafeSlow=function(d){if(typeof d!="number")throw new TypeError("Argument must be a number");return s.SlowBuffer(d)}},function(e,i,a){var s=SyntaxError,o=Function,h=TypeError,f=function(B){try{return o('"use strict"; return ('+B+").constructor;")()}catch{}},d=Object.getOwnPropertyDescriptor;if(d)try{d({},"")}catch{d=null}var p=function(){throw new h},g=d?function(){try{return p}catch{try{return d(arguments,"callee").get}catch{return p}}}():p,x=a(145)(),w=a(147)(),_=Object.getPrototypeOf||(w?function(B){return B.__proto__}:null),A={},T=typeof Uint8Array<"u"&&_?_(Uint8Array):void 0,E={"%AggregateError%":typeof AggregateError>"u"?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":x&&_?_([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":A,"%AsyncGenerator%":A,"%AsyncGeneratorFunction%":A,"%AsyncIteratorPrototype%":A,"%Atomics%":typeof Atomics>"u"?void 0:Atomics,"%BigInt%":typeof BigInt>"u"?void 0:BigInt,"%BigInt64Array%":typeof BigInt64Array>"u"?void 0:BigInt64Array,"%BigUint64Array%":typeof BigUint64Array>"u"?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?void 0:Float32Array,"%Float64Array%":typeof Float64Array>"u"?void 0:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?void 0:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":A,"%Int8Array%":typeof Int8Array>"u"?void 0:Int8Array,"%Int16Array%":typeof Int16Array>"u"?void 0:Int16Array,"%Int32Array%":typeof Int32Array>"u"?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":x&&_?_(_([][Symbol.iterator]())):void 0,"%JSON%":typeof JSON=="object"?JSON:void 0,"%Map%":typeof Map>"u"?void 0:Map,"%MapIteratorPrototype%":typeof Map<"u"&&x&&_?_(new Map()[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?void 0:Promise,"%Proxy%":typeof Proxy>"u"?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?void 0:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?void 0:Set,"%SetIteratorPrototype%":typeof Set<"u"&&x&&_?_(new Set()[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":x&&_?_(""[Symbol.iterator]()):void 0,"%Symbol%":x?Symbol:void 0,"%SyntaxError%":s,"%ThrowTypeError%":g,"%TypedArray%":T,"%TypeError%":h,"%Uint8Array%":typeof Uint8Array>"u"?void 0:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?void 0:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?void 0:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?void 0:WeakMap,"%WeakRef%":typeof WeakRef>"u"?void 0:WeakRef,"%WeakSet%":typeof WeakSet>"u"?void 0:WeakSet};if(_)try{null.error}catch(B){var P=_(_(B));E["%Error.prototype%"]=P}var M={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},F=a(45),k=a(149),O=F.call(Function.call,Array.prototype.concat),v=F.call(Function.apply,Array.prototype.splice),R=F.call(Function.call,String.prototype.replace),G=F.call(Function.call,String.prototype.slice),j=F.call(Function.call,RegExp.prototype.exec),U=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,N=/\\(\\)?/g,Z=function(B){var J=G(B,0,1),lt=G(B,-1);if(J==="%"&&lt!=="%")throw new s("invalid intrinsic syntax, expected closing `%`");if(lt==="%"&&J!=="%")throw new s("invalid intrinsic syntax, expected opening `%`");var mt=[];return R(B,U,function(ut,ft,tt,et){mt[mt.length]=tt?R(et,N,"$1"):ft||ut}),mt},V=function(B,J){var lt,mt=B;if(k(M,mt)&&(mt="%"+(lt=M[mt])[0]+"%"),k(E,mt)){var ut=E[mt];if(ut===A&&(ut=function ft(tt){var et;if(tt==="%AsyncFunction%")et=f("async function () {}");else if(tt==="%GeneratorFunction%")et=f("function* () {}");else if(tt==="%AsyncGeneratorFunction%")et=f("async function* () {}");else if(tt==="%AsyncGenerator%"){var St=ft("%AsyncGeneratorFunction%");St&&(et=St.prototype)}else if(tt==="%AsyncIteratorPrototype%"){var _t=ft("%AsyncGenerator%");_t&&_&&(et=_(_t.prototype))}return E[tt]=et,et}(mt)),ut===void 0&&!J)throw new h("intrinsic "+B+" exists, but is not available. Please file an issue!");return{alias:lt,name:mt,value:ut}}throw new s("intrinsic "+B+" does not exist!")};e.exports=function(B,J){if(typeof B!="string"||B.length===0)throw new h("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof J!="boolean")throw new h('"allowMissing" argument must be a boolean');if(j(/^%?[^%]*%?$/,B)===null)throw new s("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var lt=Z(B),mt=lt.length>0?lt[0]:"",ut=V("%"+mt+"%",J),ft=ut.name,tt=ut.value,et=!1,St=ut.alias;St&&(mt=St[0],v(lt,O([0,1],St)));for(var _t=1,Gt=!0;_t<lt.length;_t+=1){var Wt=lt[_t],Lt=G(Wt,0,1),Qt=G(Wt,-1);if((Lt==='"'||Lt==="'"||Lt==="`"||Qt==='"'||Qt==="'"||Qt==="`")&&Lt!==Qt)throw new s("property names with quotes must have matching quotes");if(Wt!=="constructor"&&Gt||(et=!0),k(E,ft="%"+(mt+="."+Wt)+"%"))tt=E[ft];else if(tt!=null){if(!(Wt in tt)){if(!J)throw new h("base intrinsic for "+B+" exists, but the property is not available.");return}if(d&&_t+1>=lt.length){var he=d(tt,Wt);tt=(Gt=!!he)&&"get"in he&&!("originalValue"in he.get)?he.get:tt[Wt]}else Gt=k(tt,Wt),tt=tt[Wt];Gt&&!et&&(E[ft]=tt)}}return tt}},function(e,i,a){var s=a(148);e.exports=Function.prototype.bind||s},function(e,i,a){var s=String.prototype.replace,o=/%20/g,h="RFC1738",f="RFC3986";e.exports={default:f,formatters:{RFC1738:function(d){return s.call(d,o,"+")},RFC3986:function(d){return String(d)}},RFC1738:h,RFC3986:f}},function(e,i,a){const s=a(5),o=a(11),h=a(48),f=a(9);function d(p,g,x="1"){if(o(p))return"0";let w=p,_=p;for(;s(_,g)==="<";)_=f(_,x),w=h(w,_);return w}e.exports=d,e.exports.default=d},function(e,i,a){const{MAX_SAFE_INTEGER_LENGTH:s}=a(30);function o(h,f){if(h==="0"||f==="0")return"0";const d=h.indexOf("."),p=f.indexOf("."),g=(d===-1?h.length:d)+(p===-1?f.length:p),x=(d===-1?0:h.length-1-d)+(p===-1?0:f.length-1-p);if(x===0&&g<s)return(Number(h)*Number(f)).toFixed(0);const w=h.replace(".",""),_=f.replace(".",""),A=w.length,T=_.length,E=[];let P=A;for(;P>=0;){const G=P,j=P-=15,U=w.substring(j,G);E.push([Number(U),U.length])}const M=[],F=[];for(let G=0,j=T-1;j>=0;j--,G++){const U=_[j],N=Number(U);let Z=0,V="";const B=E.length-1;E.forEach(([J,lt],mt)=>{let ut=(Z+N*J).toString();const ft=ut.length;if(ft>lt&&mt!==B){const tt=-1*lt;V=ut.slice(tt)+V,Z=Number(ut.slice(0,tt))}else{const tt=lt-ft;for(let et=0;et<tt;et++)ut="0"+ut;Z=0,V=ut+V}}),V+="0".repeat(G),M.push(V),F.push([Array.from(V).map(J=>Number(J)),V.length])}const k=M.length,O=F[F.length-1][1]+k;let v="",R=0;for(let G=0;G<O;G++){let j=R;const U=Math.min(G,k-1);for(let N=0;N<=U;N++){const[Z,V]=F[N],B=V-1-G;B>=0&&(j+=Z[B])}j>=10?(j=j.toString(),v=j[j.length-1]+v,R=Number(j.slice(0,-1))):(v=j+v,R=0)}if(x===0)v=v.replace(/^0+/,"");else{const G=v.length-x;v=v.substring(0,G)+"."+v.substring(G),v=v.replace(/^0+/,""),v=v.replace(/\.?0+$/,""),v[0]==="."&&(v="0"+v)}return v}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(6),o=a(160),h=["5","6","7","8","9"];function f(d){if(d.match(/\.9+$/))return s(o(d),"1");d[0]==="+"&&(d=d.substring(1));const p=d.length;let g="";const x=d[d.length-1];if(h.includes(x)){let w;for(w=p-2;w>=0;w--){const _=d[w];if(_==="."||_==="-")continue;const A=Number(_)+1;if(A!==10){g=A+g;break}g="0"+g}w>0&&(g=d.substring(0,w)+g)}else g=d.substring(0,p-1);return g[g.length-1]==="."&&(g=g.substring(0,g.length-1)),g.indexOf(".")>-1&&(g=g.replace(/0+$/,"")),g}e.exports=f,e.exports.default=f},function(e,i,a){function s(o){return o[0]==="-"?"-":"+"}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(0);function o(h){const f=(h=s(h)).indexOf(".");return f===-1?"0":(h.length-f-1).toString()}e.exports=o,e.exports.default=o},function(e,i,a){function s(o){return o.includes("i")}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(79);function o(){const h=Array.from(arguments),f=typeof h[h.length-1]=="object"?h[h.length-1]:void 0,d=Array.isArray(h[0])?h[0]:f?h.slice(0,h.length-1):h;return s(d,f)}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(17);function o(h,f){const d=Number(f);let p=h;for(let g=1;g<d;g++)p=s([p,h]);return p}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(6);function o(h){let f="0";for(let d of h)f=s(f,d);return f}e.exports=o,e.exports.default=o},function(e,i){const a=9007199254740991 .toString().length-1;e.exports={MAX_SAFE_INTEGER:9007199254740991,MAX_SAFE_INTEGER_LENGTH:a}},function(e,i,a){(function(s){a.d(i,"a",function(){return F});var o=a(12),h=a.n(o),f=a(26),d=a(13),p=a(104),g=a(2),x=a(27),w=a(59),_=function(k,O,v,R){return new(v||(v=Promise))(function(G,j){function U(V){try{Z(R.next(V))}catch(B){j(B)}}function N(V){try{Z(R.throw(V))}catch(B){j(B)}}function Z(V){var B;V.done?G(V.value):(B=V.value,B instanceof v?B:new v(function(J){J(B)})).then(U,N)}Z((R=R.apply(k,[])).next())})};const A=h()("threads:master:messages"),T=h()("threads:master:spawn"),E=h()("threads:master:thread-utils"),P=s!==void 0&&s.env.THREADS_WORKER_INIT_TIMEOUT?Number.parseInt(s.env.THREADS_WORKER_INIT_TIMEOUT,10):1e4;function M(k,O,v,R){const G=v.filter(j=>j.type===x.a.internalError).map(j=>j.error);return Object.assign(k,{[g.a]:G,[g.b]:v,[g.c]:R,[g.e]:O})}function F(k,O){return _(this,void 0,void 0,function*(){T("Initializing new thread");const v=O&&O.timeout?O.timeout:P,R=(yield function(N,Z,V){return _(this,void 0,void 0,function*(){let B;const J=new Promise((mt,ut)=>{B=setTimeout(()=>ut(Error(V)),Z)}),lt=yield Promise.race([N,J]);return clearTimeout(B),lt})}(function(N){return new Promise((Z,V)=>{const B=J=>{var lt;A("Message from worker before finishing initialization:",J.data),(lt=J.data)&&lt.type==="init"?(N.removeEventListener("message",B),Z(J.data)):(mt=>mt&&mt.type==="uncaughtError")(J.data)&&(N.removeEventListener("message",B),V(Object(d.a)(J.data.error)))};N.addEventListener("message",B)})}(k),v,`Timeout: Did not receive an init message from worker after ${v}ms. Make sure the worker calls expose().`)).exposed,{termination:G,terminate:j}=function(N){const[Z,V]=Object(p.a)();return{terminate:()=>_(this,void 0,void 0,function*(){E("Terminating worker"),yield N.terminate(),V()}),termination:Z}}(k),U=function(N,Z){return new f.a(V=>{const B=lt=>{const mt={type:x.a.message,data:lt.data};V.next(mt)},J=lt=>{E("Unhandled promise rejection event in thread:",lt);const mt={type:x.a.internalError,error:Error(lt.reason)};V.next(mt)};N.addEventListener("message",B),N.addEventListener("unhandledrejection",J),Z.then(()=>{const lt={type:x.a.termination};N.removeEventListener("message",B),N.removeEventListener("unhandledrejection",J),V.next(lt),V.complete()})})}(k,G);if(R.type==="function")return M(Object(w.a)(k),k,U,j);if(R.type==="module")return M(Object(w.b)(k,R.methods),k,U,j);{const N=R.type;throw Error("Worker init message states unexpected type of expose(): "+N)}})}}).call(this,a(8))},function(e,i,a){a.d(i,"a",function(){return P});var s=a(12),o=a.n(s),h=a(103),f=a(201),d=a(26);function p(M){return Promise.all(M.map(F=>{const k=R=>({status:"fulfilled",value:R}),O=R=>({status:"rejected",reason:R}),v=Promise.resolve(F);try{return v.then(k,O)}catch(R){return Promise.reject(R)}}))}var g,x=a(19);(function(M){M.initialized="initialized",M.taskCanceled="taskCanceled",M.taskCompleted="taskCompleted",M.taskFailed="taskFailed",M.taskQueued="taskQueued",M.taskQueueDrained="taskQueueDrained",M.taskStart="taskStart",M.terminated="terminated"})(g||(g={}));var w=a(24),_=function(M,F,k,O){return new(k||(k=Promise))(function(v,R){function G(N){try{U(O.next(N))}catch(Z){R(Z)}}function j(N){try{U(O.throw(N))}catch(Z){R(Z)}}function U(N){var Z;N.done?v(N.value):(Z=N.value,Z instanceof k?Z:new k(function(V){V(Z)})).then(G,j)}U((O=O.apply(M,[])).next())})};let A=1;class T{constructor(F,k){this.eventSubject=new h.a,this.initErrors=[],this.isClosing=!1,this.nextTaskID=1,this.taskQueue=[];const O=typeof k=="number"?{size:k}:k||{},{size:v=x.a}=O;this.debug=o()("threads:pool:"+(O.name||String(A++)).replace(/\W/g," ").trim().replace(/\s+/g,"-")),this.options=O,this.workers=function(R,G){return function(j){const U=[];for(let N=0;N<j;N++)U.push(N);return U}(G).map(()=>({init:R(),runningTasks:[]}))}(F,v),this.eventObservable=Object(f.a)(d.a.from(this.eventSubject)),Promise.all(this.workers.map(R=>R.init)).then(()=>this.eventSubject.next({type:g.initialized,size:this.workers.length}),R=>{this.debug("Error while initializing pool worker:",R),this.eventSubject.error(R),this.initErrors.push(R)})}findIdlingWorker(){const{concurrency:F=1}=this.options;return this.workers.find(k=>k.runningTasks.length<F)}runPoolTask(F,k){return _(this,void 0,void 0,function*(){const O=this.workers.indexOf(F)+1;this.debug(`Running task #${k.id} on worker #${O}...`),this.eventSubject.next({type:g.taskStart,taskID:k.id,workerID:O});try{const v=yield k.run(yield F.init);this.debug(`Task #${k.id} completed successfully`),this.eventSubject.next({type:g.taskCompleted,returnValue:v,taskID:k.id,workerID:O})}catch(v){this.debug(`Task #${k.id} failed`),this.eventSubject.next({type:g.taskFailed,taskID:k.id,error:v,workerID:O})}})}run(F,k){return _(this,void 0,void 0,function*(){const O=_(this,void 0,void 0,function*(){var v;yield(v=0,new Promise(R=>setTimeout(R,v)));try{yield this.runPoolTask(F,k)}finally{F.runningTasks=F.runningTasks.filter(R=>R!==O),this.isClosing||this.scheduleWork()}});F.runningTasks.push(O)})}scheduleWork(){this.debug("Attempt de-queueing a task in order to run it...");const F=this.findIdlingWorker();if(!F)return;const k=this.taskQueue.shift();if(!k)return this.debug("Task queue is empty"),void this.eventSubject.next({type:g.taskQueueDrained});this.run(F,k)}taskCompletion(F){return new Promise((k,O)=>{const v=this.events().subscribe(R=>{R.type===g.taskCompleted&&R.taskID===F?(v.unsubscribe(),k(R.returnValue)):R.type===g.taskFailed&&R.taskID===F?(v.unsubscribe(),O(R.error)):R.type===g.terminated&&(v.unsubscribe(),O(Error("Pool has been terminated before task was run.")))})})}settled(F=!1){return _(this,void 0,void 0,function*(){const k=()=>{return R=this.workers,G=j=>j.runningTasks,R.reduce((j,U)=>[...j,...G(U)],[]);var R,G},O=[],v=this.eventObservable.subscribe(R=>{R.type===g.taskFailed&&O.push(R.error)});return this.initErrors.length>0?Promise.reject(this.initErrors[0]):F&&this.taskQueue.length===0?(yield p(k()),O):(yield new Promise((R,G)=>{const j=this.eventObservable.subscribe({next(U){U.type===g.taskQueueDrained&&(j.unsubscribe(),R(void 0))},error:G})}),yield p(k()),v.unsubscribe(),O)})}completed(F=!1){return _(this,void 0,void 0,function*(){const k=this.settled(F),O=new Promise((R,G)=>{const j=this.eventObservable.subscribe({next(U){U.type===g.taskQueueDrained?(j.unsubscribe(),R(k)):U.type===g.taskFailed&&(j.unsubscribe(),G(U.error))},error:G})}),v=yield Promise.race([k,O]);if(v.length>0)throw v[0]})}events(){return this.eventObservable}queue(F){const{maxQueuedJobs:k=1/0}=this.options;if(this.isClosing)throw Error("Cannot schedule pool tasks after terminate() has been called.");if(this.initErrors.length>0)throw this.initErrors[0];const O=this.nextTaskID++,v=this.taskCompletion(O);v.catch(G=>{this.debug(`Task #${O} errored:`,G)});const R={id:O,run:F,cancel:()=>{this.taskQueue.indexOf(R)!==-1&&(this.taskQueue=this.taskQueue.filter(G=>G!==R),this.eventSubject.next({type:g.taskCanceled,taskID:R.id}))},then:v.then.bind(v)};if(this.taskQueue.length>=k)throw Error(`Maximum number of pool tasks queued. Refusing to queue another one.
This usually happens for one of two reasons: We are either at peak workload right now or some tasks just won't finish, thus blocking the pool.`);return this.debug(`Queueing task #${R.id}...`),this.taskQueue.push(R),this.eventSubject.next({type:g.taskQueued,taskID:R.id}),this.scheduleWork(),R}terminate(F){return _(this,void 0,void 0,function*(){this.isClosing=!0,F||(yield this.completed(!0)),this.eventSubject.next({type:g.terminated,remainingQueue:[...this.taskQueue]}),this.eventSubject.complete(),yield Promise.all(this.workers.map(k=>_(this,void 0,void 0,function*(){return w.a.terminate(yield k.init)})))})}}function E(M,F){return new T(M,F)}T.EventType=g,E.EventType=g;const P=E},function(e,i,a){a.d(i,"a",function(){return F}),a.d(i,"b",function(){return k});var s=a(12),o=a.n(s),h=a(26),f=a(201),d=a(13);const p=()=>{},g=O=>O,x=O=>Promise.resolve().then(O);function w(O){throw O}class _ extends h.a{constructor(v){super(R=>{const G=this,j=Object.assign(Object.assign({},R),{complete(){R.complete(),G.onCompletion()},error(U){R.error(U),G.onError(U)},next(U){R.next(U),G.onNext(U)}});try{return this.initHasRun=!0,v(j)}catch(U){j.error(U)}}),this.initHasRun=!1,this.fulfillmentCallbacks=[],this.rejectionCallbacks=[],this.firstValueSet=!1,this.state="pending"}onNext(v){this.firstValueSet||(this.firstValue=v,this.firstValueSet=!0)}onError(v){this.state="rejected",this.rejection=v;for(const R of this.rejectionCallbacks)x(()=>R(v))}onCompletion(){this.state="fulfilled";for(const v of this.fulfillmentCallbacks)x(()=>v(this.firstValue))}then(v,R){const G=v||g,j=R||w;let U=!1;return new Promise((N,Z)=>{const V=B=>{if(!U){U=!0;try{N(j(B))}catch(J){Z(J)}}};return this.initHasRun||this.subscribe({error:V}),this.state==="fulfilled"?N(G(this.firstValue)):this.state==="rejected"?(U=!0,N(j(this.rejection))):(this.fulfillmentCallbacks.push(B=>{try{N(G(B))}catch(J){V(J)}}),void this.rejectionCallbacks.push(V))})}catch(v){return this.then(void 0,v)}finally(v){const R=v||p;return this.then(G=>(R(),G),()=>R())}static from(v){return function(R){return R&&typeof R.then=="function"}(v)?new _(R=>{v.then(G=>{R.next(G),R.complete()},G=>{R.error(G)})}):super.from(v)}}var A=a(105),T=a(20);const E=o()("threads:master:messages");let P=1;function M(O,v){return new h.a(R=>{let G;const j=U=>{var N;if(E("Message from worker:",U.data),U.data&&U.data.uid===v){if((N=U.data)&&N.type===T.b.running)G=U.data.resultType;else if((Z=>Z&&Z.type===T.b.result)(U.data))G==="promise"?(U.data.payload!==void 0&&R.next(Object(d.a)(U.data.payload)),R.complete(),O.removeEventListener("message",j)):(U.data.payload&&R.next(Object(d.a)(U.data.payload)),U.data.complete&&(R.complete(),O.removeEventListener("message",j)));else if((Z=>Z&&Z.type===T.b.error)(U.data)){const Z=Object(d.a)(U.data.error);R.error(Z),O.removeEventListener("message",j)}}};return O.addEventListener("message",j),()=>{if(G==="observable"||!G){const U={type:T.a.cancel,uid:v};O.postMessage(U)}O.removeEventListener("message",j)}})}function F(O,v){return(...R)=>{const G=P++,{args:j,transferables:U}=function(Z){if(Z.length===0)return{args:[],transferables:[]};const V=[],B=[];for(const lt of Z)Object(A.a)(lt)?(V.push(Object(d.b)(lt.send)),B.push(...lt.transferables)):V.push(Object(d.b)(lt));return{args:V,transferables:B.length===0?B:(J=B,Array.from(new Set(J)))};var J}(R),N={type:T.a.run,uid:G,method:v,args:j};E("Sending command to run function to worker:",N);try{O.postMessage(N,U)}catch(Z){return _.from(Promise.reject(Z))}return _.from(Object(f.a)(M(O,G)))}}function k(O,v){const R={};for(const G of v)R[G]=F(O,G);return R}},function(e,i){var a={}.toString;e.exports=Array.isArray||function(s){return a.call(s)=="[object Array]"}},function(e,i,a){(function(s,o){var h=a(28);e.exports=O;var f,d=a(60);O.ReadableState=k,a(62).EventEmitter;var p=function(tt,et){return tt.listeners(et).length},g=a(63),x=a(43).Buffer,w=(s!==void 0?s:typeof window<"u"?window:typeof self<"u"?self:{}).Uint8Array||function(){},_=Object.create(a(21));_.inherits=a(10);var A=a(115),T=void 0;T=A&&A.debuglog?A.debuglog("stream"):function(){};var E,P=a(116),M=a(64);_.inherits(O,g);var F=["error","close","destroy","pause","resume"];function k(tt,et){tt=tt||{};var St=et instanceof(f=f||a(14));this.objectMode=!!tt.objectMode,St&&(this.objectMode=this.objectMode||!!tt.readableObjectMode);var _t=tt.highWaterMark,Gt=tt.readableHighWaterMark,Wt=this.objectMode?16:16384;this.highWaterMark=_t||_t===0?_t:St&&(Gt||Gt===0)?Gt:Wt,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new P,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=tt.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,tt.encoding&&(E||(E=a(66).StringDecoder),this.decoder=new E(tt.encoding),this.encoding=tt.encoding)}function O(tt){if(f=f||a(14),!(this instanceof O))return new O(tt);this._readableState=new k(tt,this),this.readable=!0,tt&&(typeof tt.read=="function"&&(this._read=tt.read),typeof tt.destroy=="function"&&(this._destroy=tt.destroy)),g.call(this)}function v(tt,et,St,_t,Gt){var Wt,Lt=tt._readableState;return et===null?(Lt.reading=!1,function(Qt,he){if(!he.ended){if(he.decoder){var z=he.decoder.end();z&&z.length&&(he.buffer.push(z),he.length+=he.objectMode?1:z.length)}he.ended=!0,j(Qt)}}(tt,Lt)):(Gt||(Wt=function(Qt,he){var z;Y=he,x.isBuffer(Y)||Y instanceof w||typeof he=="string"||he===void 0||Qt.objectMode||(z=new TypeError("Invalid non-string/buffer chunk"));var Y;return z}(Lt,et)),Wt?tt.emit("error",Wt):Lt.objectMode||et&&et.length>0?(typeof et=="string"||Lt.objectMode||Object.getPrototypeOf(et)===x.prototype||(et=function(Qt){return x.from(Qt)}(et)),_t?Lt.endEmitted?tt.emit("error",new Error("stream.unshift() after end event")):R(tt,Lt,et,!0):Lt.ended?tt.emit("error",new Error("stream.push() after EOF")):(Lt.reading=!1,Lt.decoder&&!St?(et=Lt.decoder.write(et),Lt.objectMode||et.length!==0?R(tt,Lt,et,!1):N(tt,Lt)):R(tt,Lt,et,!1))):_t||(Lt.reading=!1)),function(Qt){return!Qt.ended&&(Qt.needReadable||Qt.length<Qt.highWaterMark||Qt.length===0)}(Lt)}function R(tt,et,St,_t){et.flowing&&et.length===0&&!et.sync?(tt.emit("data",St),tt.read(0)):(et.length+=et.objectMode?1:St.length,_t?et.buffer.unshift(St):et.buffer.push(St),et.needReadable&&j(tt)),N(tt,et)}Object.defineProperty(O.prototype,"destroyed",{get:function(){return this._readableState!==void 0&&this._readableState.destroyed},set:function(tt){this._readableState&&(this._readableState.destroyed=tt)}}),O.prototype.destroy=M.destroy,O.prototype._undestroy=M.undestroy,O.prototype._destroy=function(tt,et){this.push(null),et(tt)},O.prototype.push=function(tt,et){var St,_t=this._readableState;return _t.objectMode?St=!0:typeof tt=="string"&&((et=et||_t.defaultEncoding)!==_t.encoding&&(tt=x.from(tt,et),et=""),St=!0),v(this,tt,et,!1,St)},O.prototype.unshift=function(tt){return v(this,tt,null,!0,!1)},O.prototype.isPaused=function(){return this._readableState.flowing===!1},O.prototype.setEncoding=function(tt){return E||(E=a(66).StringDecoder),this._readableState.decoder=new E(tt),this._readableState.encoding=tt,this};function G(tt,et){return tt<=0||et.length===0&&et.ended?0:et.objectMode?1:tt!=tt?et.flowing&&et.length?et.buffer.head.data.length:et.length:(tt>et.highWaterMark&&(et.highWaterMark=function(St){return St>=8388608?St=8388608:(St--,St|=St>>>1,St|=St>>>2,St|=St>>>4,St|=St>>>8,St|=St>>>16,St++),St}(tt)),tt<=et.length?tt:et.ended?et.length:(et.needReadable=!0,0))}function j(tt){var et=tt._readableState;et.needReadable=!1,et.emittedReadable||(T("emitReadable",et.flowing),et.emittedReadable=!0,et.sync?h.nextTick(U,tt):U(tt))}function U(tt){T("emit readable"),tt.emit("readable"),J(tt)}function N(tt,et){et.readingMore||(et.readingMore=!0,h.nextTick(Z,tt,et))}function Z(tt,et){for(var St=et.length;!et.reading&&!et.flowing&&!et.ended&&et.length<et.highWaterMark&&(T("maybeReadMore read 0"),tt.read(0),St!==et.length);)St=et.length;et.readingMore=!1}function V(tt){T("readable nexttick read 0"),tt.read(0)}function B(tt,et){et.reading||(T("resume read 0"),tt.read(0)),et.resumeScheduled=!1,et.awaitDrain=0,tt.emit("resume"),J(tt),et.flowing&&!et.reading&&tt.read(0)}function J(tt){var et=tt._readableState;for(T("flow",et.flowing);et.flowing&&tt.read()!==null;);}function lt(tt,et){return et.length===0?null:(et.objectMode?St=et.buffer.shift():!tt||tt>=et.length?(St=et.decoder?et.buffer.join(""):et.buffer.length===1?et.buffer.head.data:et.buffer.concat(et.length),et.buffer.clear()):St=function(_t,Gt,Wt){var Lt;return _t<Gt.head.data.length?(Lt=Gt.head.data.slice(0,_t),Gt.head.data=Gt.head.data.slice(_t)):Lt=_t===Gt.head.data.length?Gt.shift():Wt?function(Qt,he){var z=he.head,Y=1,at=z.data;for(Qt-=at.length;z=z.next;){var Tt=z.data,Ot=Qt>Tt.length?Tt.length:Qt;if(Ot===Tt.length?at+=Tt:at+=Tt.slice(0,Qt),(Qt-=Ot)===0){Ot===Tt.length?(++Y,z.next?he.head=z.next:he.head=he.tail=null):(he.head=z,z.data=Tt.slice(Ot));break}++Y}return he.length-=Y,at}(_t,Gt):function(Qt,he){var z=x.allocUnsafe(Qt),Y=he.head,at=1;for(Y.data.copy(z),Qt-=Y.data.length;Y=Y.next;){var Tt=Y.data,Ot=Qt>Tt.length?Tt.length:Qt;if(Tt.copy(z,z.length-Qt,0,Ot),(Qt-=Ot)===0){Ot===Tt.length?(++at,Y.next?he.head=Y.next:he.head=he.tail=null):(he.head=Y,Y.data=Tt.slice(Ot));break}++at}return he.length-=at,z}(_t,Gt),Lt}(tt,et.buffer,et.decoder),St);var St}function mt(tt){var et=tt._readableState;if(et.length>0)throw new Error('"endReadable()" called on non-empty stream');et.endEmitted||(et.ended=!0,h.nextTick(ut,et,tt))}function ut(tt,et){tt.endEmitted||tt.length!==0||(tt.endEmitted=!0,et.readable=!1,et.emit("end"))}function ft(tt,et){for(var St=0,_t=tt.length;St<_t;St++)if(tt[St]===et)return St;return-1}O.prototype.read=function(tt){T("read",tt),tt=parseInt(tt,10);var et=this._readableState,St=tt;if(tt!==0&&(et.emittedReadable=!1),tt===0&&et.needReadable&&(et.length>=et.highWaterMark||et.ended))return T("read: emitReadable",et.length,et.ended),et.length===0&&et.ended?mt(this):j(this),null;if((tt=G(tt,et))===0&&et.ended)return et.length===0&&mt(this),null;var _t,Gt=et.needReadable;return T("need readable",Gt),(et.length===0||et.length-tt<et.highWaterMark)&&T("length less than watermark",Gt=!0),et.ended||et.reading?T("reading or ended",Gt=!1):Gt&&(T("do read"),et.reading=!0,et.sync=!0,et.length===0&&(et.needReadable=!0),this._read(et.highWaterMark),et.sync=!1,et.reading||(tt=G(St,et))),(_t=tt>0?lt(tt,et):null)===null?(et.needReadable=!0,tt=0):et.length-=tt,et.length===0&&(et.ended||(et.needReadable=!0),St!==tt&&et.ended&&mt(this)),_t!==null&&this.emit("data",_t),_t},O.prototype._read=function(tt){this.emit("error",new Error("_read() is not implemented"))},O.prototype.pipe=function(tt,et){var St=this,_t=this._readableState;switch(_t.pipesCount){case 0:_t.pipes=tt;break;case 1:_t.pipes=[_t.pipes,tt];break;default:_t.pipes.push(tt)}_t.pipesCount+=1,T("pipe count=%d opts=%j",_t.pipesCount,et);var Gt=(!et||et.end!==!1)&&tt!==o.stdout&&tt!==o.stderr?Lt:Pt;function Wt($t,me){T("onunpipe"),$t===St&&me&&me.hasUnpiped===!1&&(me.hasUnpiped=!0,T("cleanup"),tt.removeListener("close",Tt),tt.removeListener("finish",Ot),tt.removeListener("drain",Qt),tt.removeListener("error",at),tt.removeListener("unpipe",Wt),St.removeListener("end",Lt),St.removeListener("end",Pt),St.removeListener("data",Y),he=!0,!_t.awaitDrain||tt._writableState&&!tt._writableState.needDrain||Qt())}function Lt(){T("onend"),tt.end()}_t.endEmitted?h.nextTick(Gt):St.once("end",Gt),tt.on("unpipe",Wt);var Qt=function($t){return function(){var me=$t._readableState;T("pipeOnDrain",me.awaitDrain),me.awaitDrain&&me.awaitDrain--,me.awaitDrain===0&&p($t,"data")&&(me.flowing=!0,J($t))}}(St);tt.on("drain",Qt);var he=!1,z=!1;function Y($t){T("ondata"),z=!1,tt.write($t)!==!1||z||((_t.pipesCount===1&&_t.pipes===tt||_t.pipesCount>1&&ft(_t.pipes,tt)!==-1)&&!he&&(T("false write response, pause",_t.awaitDrain),_t.awaitDrain++,z=!0),St.pause())}function at($t){T("onerror",$t),Pt(),tt.removeListener("error",at),p(tt,"error")===0&&tt.emit("error",$t)}function Tt(){tt.removeListener("finish",Ot),Pt()}function Ot(){T("onfinish"),tt.removeListener("close",Tt),Pt()}function Pt(){T("unpipe"),St.unpipe(tt)}return St.on("data",Y),function($t,me,$e){if(typeof $t.prependListener=="function")return $t.prependListener(me,$e);$t._events&&$t._events[me]?d($t._events[me])?$t._events[me].unshift($e):$t._events[me]=[$e,$t._events[me]]:$t.on(me,$e)}(tt,"error",at),tt.once("close",Tt),tt.once("finish",Ot),tt.emit("pipe",St),_t.flowing||(T("pipe resume"),St.resume()),tt},O.prototype.unpipe=function(tt){var et=this._readableState,St={hasUnpiped:!1};if(et.pipesCount===0)return this;if(et.pipesCount===1)return tt&&tt!==et.pipes||(tt||(tt=et.pipes),et.pipes=null,et.pipesCount=0,et.flowing=!1,tt&&tt.emit("unpipe",this,St)),this;if(!tt){var _t=et.pipes,Gt=et.pipesCount;et.pipes=null,et.pipesCount=0,et.flowing=!1;for(var Wt=0;Wt<Gt;Wt++)_t[Wt].emit("unpipe",this,{hasUnpiped:!1});return this}var Lt=ft(et.pipes,tt);return Lt===-1||(et.pipes.splice(Lt,1),et.pipesCount-=1,et.pipesCount===1&&(et.pipes=et.pipes[0]),tt.emit("unpipe",this,St)),this},O.prototype.on=function(tt,et){var St=g.prototype.on.call(this,tt,et);if(tt==="data")this._readableState.flowing!==!1&&this.resume();else if(tt==="readable"){var _t=this._readableState;_t.endEmitted||_t.readableListening||(_t.readableListening=_t.needReadable=!0,_t.emittedReadable=!1,_t.reading?_t.length&&j(this):h.nextTick(V,this))}return St},O.prototype.addListener=O.prototype.on,O.prototype.resume=function(){var tt=this._readableState;return tt.flowing||(T("resume"),tt.flowing=!0,function(et,St){St.resumeScheduled||(St.resumeScheduled=!0,h.nextTick(B,et,St))}(this,tt)),this},O.prototype.pause=function(){return T("call pause flowing=%j",this._readableState.flowing),this._readableState.flowing!==!1&&(T("pause"),this._readableState.flowing=!1,this.emit("pause")),this},O.prototype.wrap=function(tt){var et=this,St=this._readableState,_t=!1;for(var Gt in tt.on("end",function(){if(T("wrapped end"),St.decoder&&!St.ended){var Lt=St.decoder.end();Lt&&Lt.length&&et.push(Lt)}et.push(null)}),tt.on("data",function(Lt){T("wrapped data"),St.decoder&&(Lt=St.decoder.write(Lt)),St.objectMode&&Lt==null||(St.objectMode||Lt&&Lt.length)&&(et.push(Lt)||(_t=!0,tt.pause()))}),tt)this[Gt]===void 0&&typeof tt[Gt]=="function"&&(this[Gt]=function(Lt){return function(){return tt[Lt].apply(tt,arguments)}}(Gt));for(var Wt=0;Wt<F.length;Wt++)tt.on(F[Wt],this.emit.bind(this,F[Wt]));return this._read=function(Lt){T("wrapped _read",Lt),_t&&(_t=!1,tt.resume())},this},Object.defineProperty(O.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),O._fromList=lt}).call(this,a(3),a(8))},function(e,i,a){var s,o=typeof Reflect=="object"?Reflect:null,h=o&&typeof o.apply=="function"?o.apply:function(F,k,O){return Function.prototype.apply.call(F,k,O)};s=o&&typeof o.ownKeys=="function"?o.ownKeys:Object.getOwnPropertySymbols?function(F){return Object.getOwnPropertyNames(F).concat(Object.getOwnPropertySymbols(F))}:function(F){return Object.getOwnPropertyNames(F)};var f=Number.isNaN||function(F){return F!=F};function d(){d.init.call(this)}e.exports=d,e.exports.once=function(F,k){return new Promise(function(O,v){function R(j){F.removeListener(k,G),v(j)}function G(){typeof F.removeListener=="function"&&F.removeListener("error",R),O([].slice.call(arguments))}M(F,k,G,{once:!0}),k!=="error"&&function(j,U,N){typeof j.on=="function"&&M(j,"error",U,N)}(F,R,{once:!0})})},d.EventEmitter=d,d.prototype._events=void 0,d.prototype._eventsCount=0,d.prototype._maxListeners=void 0;var p=10;function g(F){if(typeof F!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof F)}function x(F){return F._maxListeners===void 0?d.defaultMaxListeners:F._maxListeners}function w(F,k,O,v){var R,G,j,U;if(g(O),(G=F._events)===void 0?(G=F._events=Object.create(null),F._eventsCount=0):(G.newListener!==void 0&&(F.emit("newListener",k,O.listener?O.listener:O),G=F._events),j=G[k]),j===void 0)j=G[k]=O,++F._eventsCount;else if(typeof j=="function"?j=G[k]=v?[O,j]:[j,O]:v?j.unshift(O):j.push(O),(R=x(F))>0&&j.length>R&&!j.warned){j.warned=!0;var N=new Error("Possible EventEmitter memory leak detected. "+j.length+" "+String(k)+" listeners added. Use emitter.setMaxListeners() to increase limit");N.name="MaxListenersExceededWarning",N.emitter=F,N.type=k,N.count=j.length,U=N,console&&console.warn&&console.warn(U)}return F}function _(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function A(F,k,O){var v={fired:!1,wrapFn:void 0,target:F,type:k,listener:O},R=_.bind(v);return R.listener=O,v.wrapFn=R,R}function T(F,k,O){var v=F._events;if(v===void 0)return[];var R=v[k];return R===void 0?[]:typeof R=="function"?O?[R.listener||R]:[R]:O?function(G){for(var j=new Array(G.length),U=0;U<j.length;++U)j[U]=G[U].listener||G[U];return j}(R):P(R,R.length)}function E(F){var k=this._events;if(k!==void 0){var O=k[F];if(typeof O=="function")return 1;if(O!==void 0)return O.length}return 0}function P(F,k){for(var O=new Array(k),v=0;v<k;++v)O[v]=F[v];return O}function M(F,k,O,v){if(typeof F.on=="function")v.once?F.once(k,O):F.on(k,O);else{if(typeof F.addEventListener!="function")throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof F);F.addEventListener(k,function R(G){v.once&&F.removeEventListener(k,R),O(G)})}}Object.defineProperty(d,"defaultMaxListeners",{enumerable:!0,get:function(){return p},set:function(F){if(typeof F!="number"||F<0||f(F))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+F+".");p=F}}),d.init=function(){this._events!==void 0&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},d.prototype.setMaxListeners=function(F){if(typeof F!="number"||F<0||f(F))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+F+".");return this._maxListeners=F,this},d.prototype.getMaxListeners=function(){return x(this)},d.prototype.emit=function(F){for(var k=[],O=1;O<arguments.length;O++)k.push(arguments[O]);var v=F==="error",R=this._events;if(R!==void 0)v=v&&R.error===void 0;else if(!v)return!1;if(v){var G;if(k.length>0&&(G=k[0]),G instanceof Error)throw G;var j=new Error("Unhandled error."+(G?" ("+G.message+")":""));throw j.context=G,j}var U=R[F];if(U===void 0)return!1;if(typeof U=="function")h(U,this,k);else{var N=U.length,Z=P(U,N);for(O=0;O<N;++O)h(Z[O],this,k)}return!0},d.prototype.addListener=function(F,k){return w(this,F,k,!1)},d.prototype.on=d.prototype.addListener,d.prototype.prependListener=function(F,k){return w(this,F,k,!0)},d.prototype.once=function(F,k){return g(k),this.on(F,A(this,F,k)),this},d.prototype.prependOnceListener=function(F,k){return g(k),this.prependListener(F,A(this,F,k)),this},d.prototype.removeListener=function(F,k){var O,v,R,G,j;if(g(k),(v=this._events)===void 0)return this;if((O=v[F])===void 0)return this;if(O===k||O.listener===k)--this._eventsCount==0?this._events=Object.create(null):(delete v[F],v.removeListener&&this.emit("removeListener",F,O.listener||k));else if(typeof O!="function"){for(R=-1,G=O.length-1;G>=0;G--)if(O[G]===k||O[G].listener===k){j=O[G].listener,R=G;break}if(R<0)return this;R===0?O.shift():function(U,N){for(;N+1<U.length;N++)U[N]=U[N+1];U.pop()}(O,R),O.length===1&&(v[F]=O[0]),v.removeListener!==void 0&&this.emit("removeListener",F,j||k)}return this},d.prototype.off=d.prototype.removeListener,d.prototype.removeAllListeners=function(F){var k,O,v;if((O=this._events)===void 0)return this;if(O.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):O[F]!==void 0&&(--this._eventsCount==0?this._events=Object.create(null):delete O[F]),this;if(arguments.length===0){var R,G=Object.keys(O);for(v=0;v<G.length;++v)(R=G[v])!=="removeListener"&&this.removeAllListeners(R);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(typeof(k=O[F])=="function")this.removeListener(F,k);else if(k!==void 0)for(v=k.length-1;v>=0;v--)this.removeListener(F,k[v]);return this},d.prototype.listeners=function(F){return T(this,F,!0)},d.prototype.rawListeners=function(F){return T(this,F,!1)},d.listenerCount=function(F,k){return typeof F.listenerCount=="function"?F.listenerCount(k):E.call(F,k)},d.prototype.listenerCount=E,d.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},function(e,i,a){e.exports=a(62).EventEmitter},function(e,i,a){var s=a(28);function o(h,f){h.emit("error",f)}e.exports={destroy:function(h,f){var d=this,p=this._readableState&&this._readableState.destroyed,g=this._writableState&&this._writableState.destroyed;return p||g?(f?f(h):h&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,s.nextTick(o,this,h)):s.nextTick(o,this,h)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(h||null,function(x){!f&&x?d._writableState?d._writableState.errorEmitted||(d._writableState.errorEmitted=!0,s.nextTick(o,d,x)):s.nextTick(o,d,x):f&&f(x)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,i,a){(function(s,o,h){var f=a(28);function d(N){var Z=this;this.next=null,this.entry=null,this.finish=function(){(function(V,B,J){var lt=V.entry;for(V.entry=null;lt;){var mt=lt.callback;B.pendingcb--,mt(J),lt=lt.next}B.corkedRequestsFree.next=V})(Z,N)}}e.exports=k;var p,g=!s.browser&&["v0.10","v0.9."].indexOf(s.version.slice(0,5))>-1?o:f.nextTick;k.WritableState=F;var x=Object.create(a(21));x.inherits=a(10);var w={deprecate:a(120)},_=a(63),A=a(43).Buffer,T=(h!==void 0?h:typeof window<"u"?window:typeof self<"u"?self:{}).Uint8Array||function(){},E,P=a(64);function M(){}function F(N,Z){p=p||a(14),N=N||{};var V=Z instanceof p;this.objectMode=!!N.objectMode,V&&(this.objectMode=this.objectMode||!!N.writableObjectMode);var B=N.highWaterMark,J=N.writableHighWaterMark,lt=this.objectMode?16:16384;this.highWaterMark=B||B===0?B:V&&(J||J===0)?J:lt,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var mt=N.decodeStrings===!1;this.decodeStrings=!mt,this.defaultEncoding=N.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(ut){(function(ft,tt){var et=ft._writableState,St=et.sync,_t=et.writecb;if(function(Wt){Wt.writing=!1,Wt.writecb=null,Wt.length-=Wt.writelen,Wt.writelen=0}(et),tt)(function(Wt,Lt,Qt,he,z){--Lt.pendingcb,Qt?(f.nextTick(z,he),f.nextTick(U,Wt,Lt),Wt._writableState.errorEmitted=!0,Wt.emit("error",he)):(z(he),Wt._writableState.errorEmitted=!0,Wt.emit("error",he),U(Wt,Lt))})(ft,et,St,tt,_t);else{var Gt=G(et);Gt||et.corked||et.bufferProcessing||!et.bufferedRequest||R(ft,et),St?g(v,ft,et,Gt,_t):v(ft,et,Gt,_t)}})(Z,ut)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new d(this)}function k(N){if(p=p||a(14),!(E.call(k,this)||this instanceof p))return new k(N);this._writableState=new F(N,this),this.writable=!0,N&&(typeof N.write=="function"&&(this._write=N.write),typeof N.writev=="function"&&(this._writev=N.writev),typeof N.destroy=="function"&&(this._destroy=N.destroy),typeof N.final=="function"&&(this._final=N.final)),_.call(this)}function O(N,Z,V,B,J,lt,mt){Z.writelen=B,Z.writecb=mt,Z.writing=!0,Z.sync=!0,V?N._writev(J,Z.onwrite):N._write(J,lt,Z.onwrite),Z.sync=!1}function v(N,Z,V,B){V||function(J,lt){lt.length===0&&lt.needDrain&&(lt.needDrain=!1,J.emit("drain"))}(N,Z),Z.pendingcb--,B(),U(N,Z)}function R(N,Z){Z.bufferProcessing=!0;var V=Z.bufferedRequest;if(N._writev&&V&&V.next){var B=Z.bufferedRequestCount,J=new Array(B),lt=Z.corkedRequestsFree;lt.entry=V;for(var mt=0,ut=!0;V;)J[mt]=V,V.isBuf||(ut=!1),V=V.next,mt+=1;J.allBuffers=ut,O(N,Z,!0,Z.length,J,"",lt.finish),Z.pendingcb++,Z.lastBufferedRequest=null,lt.next?(Z.corkedRequestsFree=lt.next,lt.next=null):Z.corkedRequestsFree=new d(Z),Z.bufferedRequestCount=0}else{for(;V;){var ft=V.chunk,tt=V.encoding,et=V.callback;if(O(N,Z,!1,Z.objectMode?1:ft.length,ft,tt,et),V=V.next,Z.bufferedRequestCount--,Z.writing)break}V===null&&(Z.lastBufferedRequest=null)}Z.bufferedRequest=V,Z.bufferProcessing=!1}function G(N){return N.ending&&N.length===0&&N.bufferedRequest===null&&!N.finished&&!N.writing}function j(N,Z){N._final(function(V){Z.pendingcb--,V&&N.emit("error",V),Z.prefinished=!0,N.emit("prefinish"),U(N,Z)})}function U(N,Z){var V=G(Z);return V&&(function(B,J){J.prefinished||J.finalCalled||(typeof B._final=="function"?(J.pendingcb++,J.finalCalled=!0,f.nextTick(j,B,J)):(J.prefinished=!0,B.emit("prefinish")))}(N,Z),Z.pendingcb===0&&(Z.finished=!0,N.emit("finish"))),V}x.inherits(k,_),F.prototype.getBuffer=function(){for(var N=this.bufferedRequest,Z=[];N;)Z.push(N),N=N.next;return Z},function(){try{Object.defineProperty(F.prototype,"buffer",{get:w.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch{}}(),typeof Symbol=="function"&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]=="function"?(E=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(N){return!!E.call(this,N)||this===k&&N&&N._writableState instanceof F}})):E=function(N){return N instanceof this},k.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},k.prototype.write=function(N,Z,V){var B,J=this._writableState,lt=!1,mt=!J.objectMode&&(B=N,A.isBuffer(B)||B instanceof T);return mt&&!A.isBuffer(N)&&(N=function(ut){return A.from(ut)}(N)),typeof Z=="function"&&(V=Z,Z=null),mt?Z="buffer":Z||(Z=J.defaultEncoding),typeof V!="function"&&(V=M),J.ended?function(ut,ft){var tt=new Error("write after end");ut.emit("error",tt),f.nextTick(ft,tt)}(this,V):(mt||function(ut,ft,tt,et){var St=!0,_t=!1;return tt===null?_t=new TypeError("May not write null values to stream"):typeof tt=="string"||tt===void 0||ft.objectMode||(_t=new TypeError("Invalid non-string/buffer chunk")),_t&&(ut.emit("error",_t),f.nextTick(et,_t),St=!1),St}(this,J,N,V))&&(J.pendingcb++,lt=function(ut,ft,tt,et,St,_t){if(!tt){var Gt=function(he,z,Y){return he.objectMode||he.decodeStrings===!1||typeof z!="string"||(z=A.from(z,Y)),z}(ft,et,St);et!==Gt&&(tt=!0,St="buffer",et=Gt)}var Wt=ft.objectMode?1:et.length;ft.length+=Wt;var Lt=ft.length<ft.highWaterMark;if(Lt||(ft.needDrain=!0),ft.writing||ft.corked){var Qt=ft.lastBufferedRequest;ft.lastBufferedRequest={chunk:et,encoding:St,isBuf:tt,callback:_t,next:null},Qt?Qt.next=ft.lastBufferedRequest:ft.bufferedRequest=ft.lastBufferedRequest,ft.bufferedRequestCount+=1}else O(ut,ft,!1,Wt,et,St,_t);return Lt}(this,J,mt,N,Z,V)),lt},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var N=this._writableState;N.corked&&(N.corked--,N.writing||N.corked||N.bufferProcessing||!N.bufferedRequest||R(this,N))},k.prototype.setDefaultEncoding=function(N){if(typeof N=="string"&&(N=N.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((N+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+N);return this._writableState.defaultEncoding=N,this},Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(N,Z,V){V(new Error("_write() is not implemented"))},k.prototype._writev=null,k.prototype.end=function(N,Z,V){var B=this._writableState;typeof N=="function"?(V=N,N=null,Z=null):typeof Z=="function"&&(V=Z,Z=null),N!=null&&this.write(N,Z),B.corked&&(B.corked=1,this.uncork()),B.ending||function(J,lt,mt){lt.ending=!0,U(J,lt),mt&&(lt.finished?f.nextTick(mt):J.once("finish",mt)),lt.ended=!0,J.writable=!1}(this,B,V)},Object.defineProperty(k.prototype,"destroyed",{get:function(){return this._writableState!==void 0&&this._writableState.destroyed},set:function(N){this._writableState&&(this._writableState.destroyed=N)}}),k.prototype.destroy=P.destroy,k.prototype._undestroy=P.undestroy,k.prototype._destroy=function(N,Z){this.end(),Z(N)}}).call(this,a(8),a(118).setImmediate,a(3))},function(e,i,a){var s=a(121).Buffer,o=s.isEncoding||function(T){switch((T=""+T)&&T.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function h(T){var E;switch(this.encoding=function(P){var M=function(F){if(!F)return"utf8";for(var k;;)switch(F){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return F;default:if(k)return;F=(""+F).toLowerCase(),k=!0}}(P);if(typeof M!="string"&&(s.isEncoding===o||!o(P)))throw new Error("Unknown encoding: "+P);return M||P}(T),this.encoding){case"utf16le":this.text=p,this.end=g,E=4;break;case"utf8":this.fillLast=d,E=4;break;case"base64":this.text=x,this.end=w,E=3;break;default:return this.write=_,void(this.end=A)}this.lastNeed=0,this.lastTotal=0,this.lastChar=s.allocUnsafe(E)}function f(T){return T<=127?0:T>>5==6?2:T>>4==14?3:T>>3==30?4:-1}function d(T){var E=this.lastTotal-this.lastNeed,P=function(M,F,k){if((192&F[0])!=128)return M.lastNeed=0,"�".repeat(k);if(M.lastNeed>1&&F.length>1){if((192&F[1])!=128)return M.lastNeed=1,"�".repeat(k+1);if(M.lastNeed>2&&F.length>2&&(192&F[2])!=128)return M.lastNeed=2,"�".repeat(k+2)}}(this,T,E);return P!==void 0?P:this.lastNeed<=T.length?(T.copy(this.lastChar,E,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(T.copy(this.lastChar,E,0,T.length),void(this.lastNeed-=T.length))}function p(T,E){if((T.length-E)%2==0){var P=T.toString("utf16le",E);if(P){var M=P.charCodeAt(P.length-1);if(M>=55296&&M<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=T[T.length-2],this.lastChar[1]=T[T.length-1],P.slice(0,-1)}return P}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=T[T.length-1],T.toString("utf16le",E,T.length-1)}function g(T){var E=T&&T.length?this.write(T):"";if(this.lastNeed){var P=this.lastTotal-this.lastNeed;return E+this.lastChar.toString("utf16le",0,P)}return E}function x(T,E){var P=(T.length-E)%3;return P===0?T.toString("base64",E):(this.lastNeed=3-P,this.lastTotal=3,P===1?this.lastChar[0]=T[T.length-1]:(this.lastChar[0]=T[T.length-2],this.lastChar[1]=T[T.length-1]),T.toString("base64",E,T.length-P))}function w(T){var E=T&&T.length?this.write(T):"";return this.lastNeed?E+this.lastChar.toString("base64",0,3-this.lastNeed):E}function _(T){return T.toString(this.encoding)}function A(T){return T&&T.length?this.write(T):""}i.StringDecoder=h,h.prototype.write=function(T){if(T.length===0)return"";var E,P;if(this.lastNeed){if((E=this.fillLast(T))===void 0)return"";P=this.lastNeed,this.lastNeed=0}else P=0;return P<T.length?E?E+this.text(T,P):this.text(T,P):E||""},h.prototype.end=function(T){var E=T&&T.length?this.write(T):"";return this.lastNeed?E+"�".repeat(this.lastTotal-this.lastNeed):E},h.prototype.text=function(T,E){var P=function(F,k,O){var v=k.length-1;if(v<O)return 0;var R=f(k[v]);return R>=0?(R>0&&(F.lastNeed=R-1),R):--v<O?0:(R=f(k[v]))>=0?(R>0&&(F.lastNeed=R-2),R):--v<O?0:(R=f(k[v]))>=0?(R>0&&(R===2?R=0:F.lastNeed=R-3),R):0}(this,T,E);if(!this.lastNeed)return T.toString("utf8",E);this.lastTotal=P;var M=T.length-(P-this.lastNeed);return T.copy(this.lastChar,0,M),T.toString("utf8",E,M)},h.prototype.fillLast=function(T){if(this.lastNeed<=T.length)return T.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);T.copy(this.lastChar,this.lastTotal-this.lastNeed,0,T.length),this.lastNeed-=T.length}},function(e,i,a){e.exports=f;var s=a(14),o=Object.create(a(21));function h(g,x){var w=this._transformState;w.transforming=!1;var _=w.writecb;if(!_)return this.emit("error",new Error("write callback called multiple times"));w.writechunk=null,w.writecb=null,x!=null&&this.push(x),_(g);var A=this._readableState;A.reading=!1,(A.needReadable||A.length<A.highWaterMark)&&this._read(A.highWaterMark)}function f(g){if(!(this instanceof f))return new f(g);s.call(this,g),this._transformState={afterTransform:h.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,g&&(typeof g.transform=="function"&&(this._transform=g.transform),typeof g.flush=="function"&&(this._flush=g.flush)),this.on("prefinish",d)}function d(){var g=this;typeof this._flush=="function"?this._flush(function(x,w){p(g,x,w)}):p(this,null,null)}function p(g,x,w){if(x)return g.emit("error",x);if(w!=null&&g.push(w),g._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(g._transformState.transforming)throw new Error("Calling transform done when still transforming");return g.push(null)}o.inherits=a(10),o.inherits(f,s),f.prototype.push=function(g,x){return this._transformState.needTransform=!1,s.prototype.push.call(this,g,x)},f.prototype._transform=function(g,x,w){throw new Error("_transform() is not implemented")},f.prototype._write=function(g,x,w){var _=this._transformState;if(_.writecb=w,_.writechunk=g,_.writeencoding=x,!_.transforming){var A=this._readableState;(_.needTransform||A.needReadable||A.length<A.highWaterMark)&&this._read(A.highWaterMark)}},f.prototype._read=function(g){var x=this._transformState;x.writechunk!==null&&x.writecb&&!x.transforming?(x.transforming=!0,this._transform(x.writechunk,x.writeencoding,x.afterTransform)):x.needTransform=!0},f.prototype._destroy=function(g,x){var w=this;s.prototype._destroy.call(this,g,function(_){x(_),w.emit("close")})}},function(e,i,a){(function(s){var o=a(198),h=a(58),f=a(57);const d=typeof navigator<"u"?navigator.hardwareConcurrency:null;i.a=class{constructor(p=d){const g=new o.a(s);this.pool=Object(h.a)(()=>Object(f.a)(g),p)}async decode(p,g){return new Promise((x,w)=>{this.pool.queue(async _=>{try{const A=await _(p,g);x(A)}catch(A){w(A)}})})}destroy(){this.pool.terminate(!0)}}}).call(this,a(133))},function(e,i,a){(function(s){i.fetch=g(s.fetch)&&g(s.ReadableStream),i.writableStream=g(s.WritableStream),i.abortController=g(s.AbortController),i.blobConstructor=!1;try{new Blob([new ArrayBuffer(1)]),i.blobConstructor=!0}catch{}var o;function h(){if(o!==void 0)return o;if(s.XMLHttpRequest){o=new s.XMLHttpRequest;try{o.open("GET",s.XDomainRequest?"/":"https://example.com")}catch{o=null}}else o=null;return o}function f(x){var w=h();if(!w)return!1;try{return w.responseType=x,w.responseType===x}catch{}return!1}var d=s.ArrayBuffer!==void 0,p=d&&g(s.ArrayBuffer.prototype.slice);function g(x){return typeof x=="function"}i.arraybuffer=i.fetch||d&&f("arraybuffer"),i.msstream=!i.fetch&&p&&f("ms-stream"),i.mozchunkedarraybuffer=!i.fetch&&d&&f("moz-chunked-arraybuffer"),i.overrideMimeType=i.fetch||!!h()&&g(h().overrideMimeType),i.vbArray=g(s.VBArray),o=null}).call(this,a(3))},function(e,i,a){(function(s,o,h){var f=a(69),d=a(10),p=a(42),g=i.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},x=i.IncomingMessage=function(w,_,A,T){var E=this;if(p.Readable.call(E),E._mode=A,E.headers={},E.rawHeaders=[],E.trailers={},E.rawTrailers=[],E.on("end",function(){s.nextTick(function(){E.emit("close")})}),A==="fetch"){if(E._fetchResponse=_,E.url=_.url,E.statusCode=_.status,E.statusMessage=_.statusText,_.headers.forEach(function(O,v){E.headers[v.toLowerCase()]=O,E.rawHeaders.push(v,O)}),f.writableStream){var P=new WritableStream({write:function(O){return new Promise(function(v,R){E._destroyed?R():E.push(new o(O))?v():E._resumeFetch=v})},close:function(){h.clearTimeout(T),E._destroyed||E.push(null)},abort:function(O){E._destroyed||E.emit("error",O)}});try{return void _.body.pipeTo(P).catch(function(O){h.clearTimeout(T),E._destroyed||E.emit("error",O)})}catch{}}var M=_.body.getReader();(function O(){M.read().then(function(v){if(!E._destroyed){if(v.done)return h.clearTimeout(T),void E.push(null);E.push(new o(v.value)),O()}}).catch(function(v){h.clearTimeout(T),E._destroyed||E.emit("error",v)})})()}else if(E._xhr=w,E._pos=0,E.url=w.responseURL,E.statusCode=w.status,E.statusMessage=w.statusText,w.getAllResponseHeaders().split(/\r?\n/).forEach(function(O){var v=O.match(/^([^:]+):\s*(.*)/);if(v){var R=v[1].toLowerCase();R==="set-cookie"?(E.headers[R]===void 0&&(E.headers[R]=[]),E.headers[R].push(v[2])):E.headers[R]!==void 0?E.headers[R]+=", "+v[2]:E.headers[R]=v[2],E.rawHeaders.push(v[1],v[2])}}),E._charset="x-user-defined",!f.overrideMimeType){var F=E.rawHeaders["mime-type"];if(F){var k=F.match(/;\s*charset=([^;])(;|$)/);k&&(E._charset=k[1].toLowerCase())}E._charset||(E._charset="utf-8")}};d(x,p.Readable),x.prototype._read=function(){var w=this._resumeFetch;w&&(this._resumeFetch=null,w())},x.prototype._onXHRProgress=function(){var w=this,_=w._xhr,A=null;switch(w._mode){case"text:vbarray":if(_.readyState!==g.DONE)break;try{A=new h.VBArray(_.responseBody).toArray()}catch{}if(A!==null){w.push(new o(A));break}case"text":try{A=_.responseText}catch{w._mode="text:vbarray";break}if(A.length>w._pos){var T=A.substr(w._pos);if(w._charset==="x-user-defined"){for(var E=new o(T.length),P=0;P<T.length;P++)E[P]=255&T.charCodeAt(P);w.push(E)}else w.push(T,w._charset);w._pos=A.length}break;case"arraybuffer":if(_.readyState!==g.DONE||!_.response)break;A=_.response,w.push(new o(new Uint8Array(A)));break;case"moz-chunked-arraybuffer":if(A=_.response,_.readyState!==g.LOADING||!A)break;w.push(new o(new Uint8Array(A)));break;case"ms-stream":if(A=_.response,_.readyState!==g.LOADING)break;var M=new h.MSStreamReader;M.onprogress=function(){M.result.byteLength>w._pos&&(w.push(new o(new Uint8Array(M.result.slice(w._pos)))),w._pos=M.result.byteLength)},M.onload=function(){w.push(null)},M.readAsArrayBuffer(A)}w._xhr.readyState===g.DONE&&w._mode!=="ms-stream"&&w.push(null)}}).call(this,a(8),a(7).Buffer,a(3))},function(e,i,a){var s=a(46),o=Object.prototype.hasOwnProperty,h=Array.isArray,f=function(){for(var p=[],g=0;g<256;++g)p.push("%"+((g<16?"0":"")+g.toString(16)).toUpperCase());return p}(),d=function(p,g){for(var x=g&&g.plainObjects?Object.create(null):{},w=0;w<p.length;++w)p[w]!==void 0&&(x[w]=p[w]);return x};e.exports={arrayToObject:d,assign:function(p,g){return Object.keys(g).reduce(function(x,w){return x[w]=g[w],x},p)},combine:function(p,g){return[].concat(p,g)},compact:function(p){for(var g=[{obj:{o:p},prop:"o"}],x=[],w=0;w<g.length;++w)for(var _=g[w],A=_.obj[_.prop],T=Object.keys(A),E=0;E<T.length;++E){var P=T[E],M=A[P];typeof M=="object"&&M!==null&&x.indexOf(M)===-1&&(g.push({obj:A,prop:P}),x.push(M))}return function(F){for(;F.length>1;){var k=F.pop(),O=k.obj[k.prop];if(h(O)){for(var v=[],R=0;R<O.length;++R)O[R]!==void 0&&v.push(O[R]);k.obj[k.prop]=v}}}(g),p},decode:function(p,g,x){var w=p.replace(/\+/g," ");if(x==="iso-8859-1")return w.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(w)}catch{return w}},encode:function(p,g,x,w,_){if(p.length===0)return p;var A=p;if(typeof p=="symbol"?A=Symbol.prototype.toString.call(p):typeof p!="string"&&(A=String(p)),x==="iso-8859-1")return escape(A).replace(/%u[0-9a-f]{4}/gi,function(M){return"%26%23"+parseInt(M.slice(2),16)+"%3B"});for(var T="",E=0;E<A.length;++E){var P=A.charCodeAt(E);P===45||P===46||P===95||P===126||P>=48&&P<=57||P>=65&&P<=90||P>=97&&P<=122||_===s.RFC1738&&(P===40||P===41)?T+=A.charAt(E):P<128?T+=f[P]:P<2048?T+=f[192|P>>6]+f[128|63&P]:P<55296||P>=57344?T+=f[224|P>>12]+f[128|P>>6&63]+f[128|63&P]:(E+=1,P=65536+((1023&P)<<10|1023&A.charCodeAt(E)),T+=f[240|P>>18]+f[128|P>>12&63]+f[128|P>>6&63]+f[128|63&P])}return T},isBuffer:function(p){return!(!p||typeof p!="object")&&!!(p.constructor&&p.constructor.isBuffer&&p.constructor.isBuffer(p))},isRegExp:function(p){return Object.prototype.toString.call(p)==="[object RegExp]"},maybeMap:function(p,g){if(h(p)){for(var x=[],w=0;w<p.length;w+=1)x.push(g(p[w]));return x}return g(p)},merge:function p(g,x,w){if(!x)return g;if(typeof x!="object"){if(h(g))g.push(x);else{if(!g||typeof g!="object")return[g,x];(w&&(w.plainObjects||w.allowPrototypes)||!o.call(Object.prototype,x))&&(g[x]=!0)}return g}if(!g||typeof g!="object")return[g].concat(x);var _=g;return h(g)&&!h(x)&&(_=d(g,w)),h(g)&&h(x)?(x.forEach(function(A,T){if(o.call(g,T)){var E=g[T];E&&typeof E=="object"&&A&&typeof A=="object"?g[T]=p(E,A,w):g.push(A)}else g[T]=A}),g):Object.keys(x).reduce(function(A,T){var E=x[T];return o.call(A,T)?A[T]=p(A[T],E,w):A[T]=E,A},_)}}},function(e,i,a){function s(T){try{T[Symbol.iterator]=function(){return this}}catch{}}function o(T){T["@@iterator"]=function(){return this}}function h(T){const E={next:T};return s(E),o(E),E}function f(T){try{return T.constructor.name.endsWith("Array")}catch{return!1}}function d(T){try{return typeof T.next=="function"}catch{return!1}}function p(T){try{return"@@iterator"in T}catch{return!1}}function g(T){try{return Symbol.iterator in T.constructor.prototype}catch{return!1}}function x(T){try{return Symbol.iterator in T&&typeof T.next=="function"&&T.propertyIsEnumerable("next")===!1}catch{return!1}}function w(T){const E=T["@@iterator"];return d(E)?E:typeof E=="function"?E():void 0}function _(T){let E=0,P=T.length;return h(()=>E++<P?{value:T[E],done:!1}:{done:!0})}function A(T){if(x(T))return T;if(g(T))return T[Symbol.iterator]();if(d(T))return h(T.next);if(p(T))return w(T);if(typeof T=="string"||f(T))return _(T);throw"[iter-fun] unable to determine iterator"}e.exports={addSymbolIterator:s,addSymbolIteratorFallback:o,isIterator:x,isArray:f,hasNext:d,hasSymbolIterator:g,hasIterator:p,getIterator:w,createIterator:_,getOrCreateIterator:A,wrapNextFunction:h,zip:function(T){return T=T.map(A),h(function(){const E=T.map(P=>P.next());return E.every(({done:P})=>P)?{done:!0}:{done:!1,value:E.map(({value:P})=>P)}})}}},function(e,i,a){function s(o){o[0]==="+"&&(o=o.substring(1));const h=o[0]==="-"?"-":"";h==="-"&&(o=o.substring(1));const f=o.indexOf("e");if(f===-1)return h+o;let d=o.indexOf(".");d===-1&&(d=f);const p=Number(o.substring(f+1)),g=o.substring(0,f).replace(".",""),x=d+p,w=g.length;if(x>=w){const _=x-w;let A=g;for(let T=0;T<_;T++)A+="0";return h+A}if(x<0){let _="0.";for(let A=0;A>x;A--)_+="0";return _+=g,h+_}return h+g.substring(0,x)+"."+g.substring(x)}e.exports=s,e.exports.default=s},function(e,i,a){e.exports={MAX_SAFE_INTEGER:9007199254740991}},function(e,i,a){const s=a(47);function o(h){return h==="0"?"1":s("1",h)}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(4),o=a(0),h=a(9),f=a(22);function d(p){if((p=o(p)).indexOf(".")===-1)return p;const g=f(p);return p=s(p).split(".")[0],g==="+"?h(p,"1"):g==="-"?p==="0"||p===""?"0":"-"+p:void 0}e.exports=d,e.exports.default=d},function(e,i,a){const s=a(51);function o(h){const f=s(h);return[h.replace(/\./g,"").replace(/^0/,""),1+"0".repeat(f)]}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(0),o=a(16);function h(f){if(f=s(f),!o(f))throw new Error("can't call is_odd on decimal");return["1","3","5","7","9"].includes(f.charAt(f.length-1))}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(52),o=a(15),h=a(78),f=a(11),d=a(17),p=a(50);function g(x,{max_decimal_digits:w,infinity_times_zero:_="NaN"}={}){const A=x.some(M=>o(M)),T=x.some(M=>f(M));if(A&&T)return _;if(A)return x.filter(M=>p(M)==="-").length%2==0?"Infinity":"-Infinity";if(T)return"0";const E=h(x.filter(M=>s(M)).length.toString());let P=d(x.map(M=>M.replace(/i$/,"")),{max_decimal_digits:w});return E&&(P+="i"),P}e.exports=g,e.exports.default=g},function(e,i,a){const s=a(0);function o(h){return(h=s(h))[0]==="-"}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(1),o=a(165),h=a(166);function f(d,{max_decimal_digits:p=100,fraction:g=!1}={}){if(o(d)){const[x,w]=h(d);return g?w+"/"+x:s(w,x,{max_decimal_digits:p})}return g?"1/"+d:s("1",d,{max_decimal_digits:p})}e.exports=f,e.exports.default=f},function(e,i,a){const s=a(0),o=a(16);function h(f){if(f=s(f),!o(f))throw new Error("can't call is_even on decimal");return["0","2","4","6","8"].includes(f.charAt(f.length-1))}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(76),o=a(84),h=a(1);function f(d,p){const g=o(d);return g==="0"?"0":s(h(g,p,{max_decimal_digits:1}))}e.exports=f,e.exports.default=f},function(e,i,a){const s=a(4),o=a(0);function h(f){const d=(f=s(o(f))).indexOf(".");return(d===-1?f.length:d).toString()}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(1),o=a(82),h=a(86),f=a(87);function d(p,g){const x=f("2",h(["1000",g,g]));for(;p.endsWith("0")&&g.endsWith("0");)p=p.substring(0,p.length-1),g=g.substring(0,g.length-1);for(;o(p)&&o(g);)p=s(p,"2"),g=s(g,"2");let w=!0;for(;w;){w=!1;for(let _=0;_<x.length;_++){const A=x[_],T=A.length+1,E=s(p,A,{ellipsis:!0,max_decimal_digits:T});if(E.indexOf(".")===-1){const P=s(g,A,{ellipsis:!0,max_decimal_digits:T});if(P.indexOf(".")===-1){p=E,g=P,w=!0;break}}}}return[p,g]}e.exports=d,e.exports.default=d},function(e,i,a){const s=a(0),o=a(34);function h(f){typeof f=="string"&&(f=Array.prototype.slice.call(arguments));let d=s(f[0]);const p=f.length;for(let g=1;g<p;g++){const x=f[g];o(x,d)==="<"&&(d=x)}return d}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(5),o=a(1),h=a(16),f=a(9);function d(p="0",g="100"){const x=["2","3","5","7","11"].filter(_=>s(_,p)!=="<"&&s(_,g)!==">");let w="13";for(;s(w,g)!==">";)/^\d+5/.test(w)||/^(\d)\1+/.test(w)||["9","7","3"].every(_=>!h(o(w,_)))&&x.push(w),w=f(w,"2");return x}e.exports=d,e.exports.default=d},function(e,i,a){const s=a(6),o=a(1);function h({max_decimal_digits:f=100,steps:d=100}={}){let p="1",g="1";for(let x=1;x<d;x++)g=o(g,x.toString(),{max_decimal_digits:f}),p=s(p,g);return p}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(0),o=a(90),h=a(91),f=a(11),d=a(88),p=a(35);function g(x,{max_decimal_digits:w=100}={}){const _=d({max_decimal_digits:2*w});return o(x)?"0":h(x)?"Infinity":f(x)?"1":(x=s(x),p(_,x,{max_decimal_digits:w}))}e.exports=g,e.exports.default=g},function(e,i,a){function s(o){return!!o.match(/^-inf(inity)?$/i)}e.exports=s,e.exports.default=s},function(e,i,a){function s(o){return!!o.match(/^\+?inf(inity)?$/i)}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(37);function o(h,f){return s(h,"2",f)}e.exports=o,e.exports.default=o},function(e,i,a){function s(o){const h=o.indexOf(".");return h===-1?o:o.substring(0,h)}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(95),o=a(185);function h(f,d,{precise:p=!1}={precise:!1}){return p?o(s(f.toString(),d.toString()),"2"):(f+d)/2}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(38),o=a(18),h=a(96),f=a(97);function d(p,g){p=o(p),g=o(g);const x=p[0]!=="-",w=g[0]!=="-";if(x&&w)return h(p,g);if(!x&&!w)return"-"+h(p.substring(1),g.substring(1));if(!x&&w)switch(p=p.substring(1),s(p,g)){case"=":return"0";case"<":return f(g,p);case">":return"-"+f(p,g)}else if(x&&!w)switch(g=g.substring(1),s(p,g)){case"=":return"0";case"<":return"-"+f(g,p);case">":return f(p,g)}}e.exports=d,e.exports.default=d},function(e,i,a){const{MAX_SAFE_INTEGER_LENGTH:s}=a(56);e.exports=function(o,h){const f=o.length,d=h.length,p=o.indexOf("."),g=h.indexOf("."),x=p===-1?f:p,w=g===-1?d:g;if(p===-1&&g===-1&&f<s&&d<s)return(Number(o)+Number(h)).toFixed();const _=x-w;let A=Math.max(x,w),T=Math.max(f-x-1,d-w-1),E=_<0?-1*_:0,P=_<=0?0:_,M=A+1+T-1,F="",k=0,O=M;if(T>0){for(;O>M-T;){const v=o[O-E]||"0",R=h[O-P]||"0";let G=Number(v)+Number(R)+k;G>=10?(G-=10,k=1):k=0,F===""&&G===0||(F=G+F),O--}F&&(F="."+F),O--}if(A>0)for(;O>=0;){const v=o[O-E]||"0",R=h[O-P]||"0";let G=Number(v)+Number(R)+k;G>=10?(G-=10,k=1):k=0,F=G+F,O--}return k===1&&(F=k+F),F[0]==="."&&(F="0"+F),F}},function(e,i,a){const{MAX_SAFE_INTEGER_LENGTH:s}=a(56);e.exports=function(o,h){const f=o.length,d=h.length,p=o.indexOf("."),g=h.indexOf("."),x=p===-1?f:p,w=g===-1?d:g;if(p===-1&&g===-1&&f<s&&d<s)return(Number(o)-Number(h)).toFixed();const _=x-w;let A=Math.max(x,w),T=Math.max(f-x-1,d-w-1),E=_<0?-1*_:0,P=_<=0?0:_,M=A+1+T-1,F="",k=0,O=M;if(T>0){for(;O>M-T;){let v=o[O-E]||"0",R=h[O-P]||"0";v-=k,k=0;let G=v-R;if(G<0)for(;G<0;)k++,G+=10;else k&&k--;F===""&&G===0||(F=G+F),O--}F!==""&&(F="."+F),O--}if(A>0){for(;O>0;){let j=o[O-E]||"0",U=h[O-P]||"0";j-=k,k=0;let N=j-U;if(N<0)for(;N<0;)k++,N+=10;else k&&k--;F=N+F,O--}const v=o[0-E]||"0",R=h[0-P]||"0";let G=Number(v)-(k>0?1:0)-Number(R);G!==0&&(F=G+F),F=F.replace(/^0+/,"")}return F[0]==="."&&(F="0"+F),F}},function(e,i,a){const s=a(18);function o(h){return(h=s(h))[0]==="-"?h.substring(1):h}e.exports=o,e.exports.default=o},function(e,i,a){e.exports={countIn1D:function(s){return s.reduce(function(o,h){return o[h]===void 0?o[h]=1:o[h]++,o},{})},countIn2D:function(s){return s.reduce(function(o,h){return h.forEach(function(f){o[f]===void 0?o[f]=1:o[f]++}),o},{})},unflatten:function(s,o){for(var h=o.height,f=o.width,d=[],p=0;p<h;p++){var g=p*f,x=g+f;d.push(s.subarray(g,x))}return d}}},function(e,i,a){a.r(i),a.d(i,"globals",function(){return s}),a.d(i,"rgb",function(){return o}),a.d(i,"getDecoder",function(){return Gt}),a.d(i,"setLogger",function(){return yc}),a.d(i,"GeoTIFF",function(){return Na}),a.d(i,"MultiGeoTIFF",function(){return be}),a.d(i,"fromUrl",function(){return dn}),a.d(i,"fromArrayBuffer",function(){return q}),a.d(i,"fromFile",function(){return nt}),a.d(i,"fromBlob",function(){return ot}),a.d(i,"fromUrls",function(){return gt}),a.d(i,"writeArrayBuffer",function(){return yt}),a.d(i,"Pool",function(){return Pt.a});var s={};a.r(s),a.d(s,"fieldTagNames",function(){return d}),a.d(s,"fieldTags",function(){return p}),a.d(s,"fieldTagTypes",function(){return g}),a.d(s,"arrayFields",function(){return x}),a.d(s,"fieldTypeNames",function(){return w}),a.d(s,"fieldTypes",function(){return _}),a.d(s,"photometricInterpretations",function(){return A}),a.d(s,"ExtraSamplesValues",function(){return T}),a.d(s,"geoKeyNames",function(){return E}),a.d(s,"geoKeys",function(){return P});var o={};a.r(o),a.d(o,"fromWhiteIsZero",function(){return M}),a.d(o,"fromBlackIsZero",function(){return F}),a.d(o,"fromPalette",function(){return k}),a.d(o,"fromCMYK",function(){return O}),a.d(o,"fromYCbCr",function(){return v}),a.d(o,"fromCIELab",function(){return R});var h=a(101),f=a.n(h);const d={315:"Artist",258:"BitsPerSample",265:"CellLength",264:"CellWidth",320:"ColorMap",259:"Compression",33432:"Copyright",306:"DateTime",338:"ExtraSamples",266:"FillOrder",289:"FreeByteCounts",288:"FreeOffsets",291:"GrayResponseCurve",290:"GrayResponseUnit",316:"HostComputer",270:"ImageDescription",257:"ImageLength",256:"ImageWidth",271:"Make",281:"MaxSampleValue",280:"MinSampleValue",272:"Model",254:"NewSubfileType",274:"Orientation",262:"PhotometricInterpretation",284:"PlanarConfiguration",296:"ResolutionUnit",278:"RowsPerStrip",277:"SamplesPerPixel",305:"Software",279:"StripByteCounts",273:"StripOffsets",255:"SubfileType",263:"Threshholding",282:"XResolution",283:"YResolution",326:"BadFaxLines",327:"CleanFaxData",343:"ClipPath",328:"ConsecutiveBadFaxLines",433:"Decode",434:"DefaultImageColor",269:"DocumentName",336:"DotRange",321:"HalftoneHints",346:"Indexed",347:"JPEGTables",285:"PageName",297:"PageNumber",317:"Predictor",319:"PrimaryChromaticities",532:"ReferenceBlackWhite",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",559:"StripRowCounts",330:"SubIFDs",292:"T4Options",293:"T6Options",325:"TileByteCounts",323:"TileLength",324:"TileOffsets",322:"TileWidth",301:"TransferFunction",318:"WhitePoint",344:"XClipPathUnits",286:"XPosition",529:"YCbCrCoefficients",531:"YCbCrPositioning",530:"YCbCrSubSampling",345:"YClipPathUnits",287:"YPosition",37378:"ApertureValue",40961:"ColorSpace",36868:"DateTimeDigitized",36867:"DateTimeOriginal",34665:"Exif IFD",36864:"ExifVersion",33434:"ExposureTime",41728:"FileSource",37385:"Flash",40960:"FlashpixVersion",33437:"FNumber",42016:"ImageUniqueID",37384:"LightSource",37500:"MakerNote",37377:"ShutterSpeedValue",37510:"UserComment",33723:"IPTC",34675:"ICC Profile",700:"XMP",42112:"GDAL_METADATA",42113:"GDAL_NODATA",34377:"Photoshop",33550:"ModelPixelScale",33922:"ModelTiepoint",34264:"ModelTransformation",34735:"GeoKeyDirectory",34736:"GeoDoubleParams",34737:"GeoAsciiParams"},p={};for(const $ in d)d.hasOwnProperty($)&&(p[d[$]]=parseInt($,10));const g={256:"SHORT",257:"SHORT",258:"SHORT",259:"SHORT",262:"SHORT",273:"LONG",274:"SHORT",277:"SHORT",278:"LONG",279:"LONG",282:"RATIONAL",283:"RATIONAL",284:"SHORT",286:"SHORT",287:"RATIONAL",296:"SHORT",305:"ASCII",306:"ASCII",338:"SHORT",339:"SHORT",513:"LONG",514:"LONG",1024:"SHORT",1025:"SHORT",2048:"SHORT",2049:"ASCII",33550:"DOUBLE",33922:"DOUBLE",34665:"LONG",34735:"SHORT",34737:"ASCII",42113:"ASCII"},x=[p.BitsPerSample,p.ExtraSamples,p.SampleFormat,p.StripByteCounts,p.StripOffsets,p.StripRowCounts,p.TileByteCounts,p.TileOffsets],w={1:"BYTE",2:"ASCII",3:"SHORT",4:"LONG",5:"RATIONAL",6:"SBYTE",7:"UNDEFINED",8:"SSHORT",9:"SLONG",10:"SRATIONAL",11:"FLOAT",12:"DOUBLE",13:"IFD",16:"LONG8",17:"SLONG8",18:"IFD8"},_={};for(const $ in w)w.hasOwnProperty($)&&(_[w[$]]=parseInt($,10));const A={WhiteIsZero:0,BlackIsZero:1,RGB:2,Palette:3,TransparencyMask:4,CMYK:5,YCbCr:6,CIELab:8,ICCLab:9},T={Unspecified:0,Assocalpha:1,Unassalpha:2},E={1024:"GTModelTypeGeoKey",1025:"GTRasterTypeGeoKey",1026:"GTCitationGeoKey",2048:"GeographicTypeGeoKey",2049:"GeogCitationGeoKey",2050:"GeogGeodeticDatumGeoKey",2051:"GeogPrimeMeridianGeoKey",2052:"GeogLinearUnitsGeoKey",2053:"GeogLinearUnitSizeGeoKey",2054:"GeogAngularUnitsGeoKey",2055:"GeogAngularUnitSizeGeoKey",2056:"GeogEllipsoidGeoKey",2057:"GeogSemiMajorAxisGeoKey",2058:"GeogSemiMinorAxisGeoKey",2059:"GeogInvFlatteningGeoKey",2060:"GeogAzimuthUnitsGeoKey",2061:"GeogPrimeMeridianLongGeoKey",2062:"GeogTOWGS84GeoKey",3072:"ProjectedCSTypeGeoKey",3073:"PCSCitationGeoKey",3074:"ProjectionGeoKey",3075:"ProjCoordTransGeoKey",3076:"ProjLinearUnitsGeoKey",3077:"ProjLinearUnitSizeGeoKey",3078:"ProjStdParallel1GeoKey",3079:"ProjStdParallel2GeoKey",3080:"ProjNatOriginLongGeoKey",3081:"ProjNatOriginLatGeoKey",3082:"ProjFalseEastingGeoKey",3083:"ProjFalseNorthingGeoKey",3084:"ProjFalseOriginLongGeoKey",3085:"ProjFalseOriginLatGeoKey",3086:"ProjFalseOriginEastingGeoKey",3087:"ProjFalseOriginNorthingGeoKey",3088:"ProjCenterLongGeoKey",3089:"ProjCenterLatGeoKey",3090:"ProjCenterEastingGeoKey",3091:"ProjCenterNorthingGeoKey",3092:"ProjScaleAtNatOriginGeoKey",3093:"ProjScaleAtCenterGeoKey",3094:"ProjAzimuthAngleGeoKey",3095:"ProjStraightVertPoleLongGeoKey",3096:"ProjRectifiedGridAngleGeoKey",4096:"VerticalCSTypeGeoKey",4097:"VerticalCitationGeoKey",4098:"VerticalDatumGeoKey",4099:"VerticalUnitsGeoKey"},P={};for(const $ in E)E.hasOwnProperty($)&&(P[E[$]]=parseInt($,10));function M($,L){const{width:W,height:ht}=$,pt=new Uint8Array(W*ht*3);let kt;for(let At=0,xt=0;At<$.length;++At,xt+=3)kt=256-$[At]/L*256,pt[xt]=kt,pt[xt+1]=kt,pt[xt+2]=kt;return pt}function F($,L){const{width:W,height:ht}=$,pt=new Uint8Array(W*ht*3);let kt;for(let At=0,xt=0;At<$.length;++At,xt+=3)kt=$[At]/L*256,pt[xt]=kt,pt[xt+1]=kt,pt[xt+2]=kt;return pt}function k($,L){const{width:W,height:ht}=$,pt=new Uint8Array(W*ht*3),kt=L.length/3,At=L.length/3*2;for(let xt=0,wt=0;xt<$.length;++xt,wt+=3){const It=$[xt];pt[wt]=L[It]/65536*256,pt[wt+1]=L[It+kt]/65536*256,pt[wt+2]=L[It+At]/65536*256}return pt}function O($){const{width:L,height:W}=$,ht=new Uint8Array(L*W*3);for(let pt=0,kt=0;pt<$.length;pt+=4,kt+=3){const At=$[pt],xt=$[pt+1],wt=$[pt+2],It=$[pt+3];ht[kt]=(255-At)/256*255*((255-It)/256),ht[kt+1]=(255-xt)/256*255*((255-It)/256),ht[kt+2]=(255-wt)/256*255*((255-It)/256)}return ht}function v($){const{width:L,height:W}=$,ht=new Uint8ClampedArray(L*W*3);for(let pt=0,kt=0;pt<$.length;pt+=3,kt+=3){const At=$[pt],xt=$[pt+1],wt=$[pt+2];ht[kt]=At+1.402*(wt-128),ht[kt+1]=At-.34414*(xt-128)-.71414*(wt-128),ht[kt+2]=At+1.772*(xt-128)}return ht}function R($){const{width:L,height:W}=$,ht=new Uint8Array(L*W*3);for(let pt=0,kt=0;pt<$.length;pt+=3,kt+=3){let At,xt,wt,It=($[pt+0]+16)/116,Et=($[pt+1]<<24>>24)/500+It,Ut=It-($[pt+2]<<24>>24)/200;Et=.95047*(Et*Et*Et>.008856?Et*Et*Et:(Et-16/116)/7.787),It=1*(It*It*It>.008856?It*It*It:(It-16/116)/7.787),Ut=1.08883*(Ut*Ut*Ut>.008856?Ut*Ut*Ut:(Ut-16/116)/7.787),At=3.2406*Et+-1.5372*It+-.4986*Ut,xt=-.9689*Et+1.8758*It+.0415*Ut,wt=.0557*Et+-.204*It+1.057*Ut,At=At>.0031308?1.055*At**(1/2.4)-.055:12.92*At,xt=xt>.0031308?1.055*xt**(1/2.4)-.055:12.92*xt,wt=wt>.0031308?1.055*wt**(1/2.4)-.055:12.92*wt,ht[kt]=255*Math.max(0,Math.min(1,At)),ht[kt+1]=255*Math.max(0,Math.min(1,xt)),ht[kt+2]=255*Math.max(0,Math.min(1,wt))}return ht}function G($,L){let W=$.length-L,ht=0;do{for(let pt=L;pt>0;pt--)$[ht+L]+=$[ht],ht++;W-=L}while(W>0)}function j($,L,W){let ht=0,pt=$.length;const kt=pt/W;for(;pt>L;){for(let xt=L;xt>0;--xt)$[ht+L]+=$[ht],++ht;pt-=L}const At=$.slice();for(let xt=0;xt<kt;++xt)for(let wt=0;wt<W;++wt)$[W*xt+wt]=At[(W-wt-1)*kt+xt]}class U{decode(L,W){const ht=this.decodeBlock(W),pt=L.Predictor||1;if(pt!==1){const kt=!L.StripOffsets;return function(At,xt,wt,It,Et,Ut){if(xt===1)return At;for(let zt=0;zt<Et.length;++zt){if(Et[zt]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(Et[zt]!==Et[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const Ft=Et[0]/8,Dt=Ut===2?1:Et.length;for(let zt=0;zt<It&&!(zt*Dt*wt*Ft>=At.byteLength);++zt){let Jt;if(xt===2){switch(Et[0]){case 8:Jt=new Uint8Array(At,zt*Dt*wt*Ft,Dt*wt*Ft);break;case 16:Jt=new Uint16Array(At,zt*Dt*wt*Ft,Dt*wt*Ft/2);break;case 32:Jt=new Uint32Array(At,zt*Dt*wt*Ft,Dt*wt*Ft/4);break;default:throw new Error(`Predictor 2 not allowed with ${Et[0]} bits per sample.`)}G(Jt,Dt)}else xt===3&&(Jt=new Uint8Array(At,zt*Dt*wt*Ft,Dt*wt*Ft),j(Jt,Dt,Ft))}return At}(ht,pt,kt?L.TileWidth:L.ImageWidth,kt?L.TileLength:L.RowsPerStrip||L.ImageLength,L.BitsPerSample,L.PlanarConfiguration)}return ht}}class N extends U{decodeBlock(L){return L}}function Z($,L){for(let W=L.length-1;W>=0;W--)$.push(L[W]);return $}function V($){const L=new Uint16Array(4093),W=new Uint8Array(4093);for(let zt=0;zt<=257;zt++)L[zt]=4096,W[zt]=zt;let ht=258,pt=9,kt=0;function At(){ht=258,pt=9}function xt(zt){const Jt=function(oe,te,Mt){const Vt=te%8,Zt=Math.floor(te/8),ae=8-Vt,Kt=te+Mt-8*(Zt+1);let xe=8*(Zt+2)-(te+Mt);const qt=8*(Zt+2)-te;if(xe=Math.max(0,xe),Zt>=oe.length)return console.warn("ran off the end of the buffer before finding EOI_CODE (end on input code)"),257;let qe=oe[Zt]&2**(8-Vt)-1;qe<<=Mt-ae;let bn=qe;if(Zt+1<oe.length){let Be=oe[Zt+1]>>>xe;Be<<=Math.max(0,Mt-qt),bn+=Be}if(Kt>8&&Zt+2<oe.length){const Be=8*(Zt+3)-(te+Mt);bn+=oe[Zt+2]>>>Be}return bn}(zt,kt,pt);return kt+=pt,Jt}function wt(zt,Jt){return W[ht]=Jt,L[ht]=zt,ht++,ht-1}function It(zt){const Jt=[];for(let oe=zt;oe!==4096;oe=L[oe])Jt.push(W[oe]);return Jt}const Et=[];At();const Ut=new Uint8Array($);let Ft,Dt=xt(Ut);for(;Dt!==257;){if(Dt===256){for(At(),Dt=xt(Ut);Dt===256;)Dt=xt(Ut);if(Dt===257)break;if(Dt>256)throw new Error("corrupted code at scanline "+Dt);Z(Et,It(Dt)),Ft=Dt}else if(Dt<ht){const zt=It(Dt);Z(Et,zt),wt(Ft,zt[zt.length-1]),Ft=Dt}else{const zt=It(Ft);if(!zt)throw new Error(`Bogus entry. Not in dictionary, ${Ft} / ${ht}, position: ${kt}`);Z(Et,zt),Et.push(zt[zt.length-1]),wt(Ft,zt[zt.length-1]),Ft=Dt}ht+1>=2**pt&&(pt===12?Ft=void 0:pt++),Dt=xt(Ut)}return new Uint8Array(Et)}class B extends U{decodeBlock(L){return V(L).buffer}}const J=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]);function lt($,L){let W=0;const ht=[];let pt=16;for(;pt>0&&!$[pt-1];)--pt;ht.push({children:[],index:0});let kt,At=ht[0];for(let xt=0;xt<pt;xt++){for(let wt=0;wt<$[xt];wt++){for(At=ht.pop(),At.children[At.index]=L[W];At.index>0;)At=ht.pop();for(At.index++,ht.push(At);ht.length<=xt;)ht.push(kt={children:[],index:0}),At.children[At.index]=kt.children,At=kt;W++}xt+1<pt&&(ht.push(kt={children:[],index:0}),At.children[At.index]=kt.children,At=kt)}return ht[0].children}function mt($,L,W,ht,pt,kt,At,xt,wt){const{mcusPerLine:It,progressive:Et}=W,Ut=L;let Ft=L,Dt=0,zt=0;function Jt(){if(zt>0)return zt--,Dt>>zt&1;if(Dt=$[Ft++],Dt===255){const sn=$[Ft++];if(sn)throw new Error("unexpected marker: "+(Dt<<8|sn).toString(16))}return zt=7,Dt>>>7}function oe(sn){let nn,ln=sn;for(;(nn=Jt())!==null;){if(ln=ln[nn],typeof ln=="number")return ln;if(typeof ln!="object")throw new Error("invalid huffman sequence")}return null}function te(sn){let nn=sn,ln=0;for(;nn>0;){const bi=Jt();if(bi===null)return;ln=ln<<1|bi,--nn}return ln}function Mt(sn){const nn=te(sn);return nn>=1<<sn-1?nn:nn+(-1<<sn)+1}let Vt=0,Zt,ae=0;function Kt(sn,nn,ln,bi,rr){const Cr=ln%It,xi=(ln/It|0)*sn.v+bi,wc=Cr*sn.h+rr;nn(sn,sn.blocks[xi][wc])}function xe(sn,nn,ln){const bi=ln/sn.blocksPerLine|0,rr=ln%sn.blocksPerLine;nn(sn,sn.blocks[bi][rr])}const qt=ht.length;let qe,bn,Be,Wn,os,Rs;Rs=Et?kt===0?xt===0?function(sn,nn){const ln=oe(sn.huffmanTableDC),bi=ln===0?0:Mt(ln)<<wt;sn.pred+=bi,nn[0]=sn.pred}:function(sn,nn){nn[0]|=Jt()<<wt}:xt===0?function(sn,nn){if(Vt>0)return void Vt--;let ln=kt;const bi=At;for(;ln<=bi;){const rr=oe(sn.huffmanTableAC),Cr=15&rr,xi=rr>>4;if(Cr===0){if(xi<15){Vt=te(xi)+(1<<xi)-1;break}ln+=16}else ln+=xi,nn[J[ln]]=Mt(Cr)*(1<<wt),ln++}}:function(sn,nn){let ln=kt;const bi=At;let rr=0;for(;ln<=bi;){const Cr=J[ln],xi=nn[Cr]<0?-1:1;switch(ae){case 0:{const wc=oe(sn.huffmanTableAC),wh=15&wc;if(rr=wc>>4,wh===0)rr<15?(Vt=te(rr)+(1<<rr),ae=4):(rr=16,ae=1);else{if(wh!==1)throw new Error("invalid ACn encoding");Zt=Mt(wh),ae=rr?2:3}continue}case 1:case 2:nn[Cr]?nn[Cr]+=(Jt()<<wt)*xi:(rr--,rr===0&&(ae=ae===2?3:0));break;case 3:nn[Cr]?nn[Cr]+=(Jt()<<wt)*xi:(nn[Cr]=Zt<<wt,ae=0);break;case 4:nn[Cr]&&(nn[Cr]+=(Jt()<<wt)*xi)}ln++}ae===4&&(Vt--,Vt===0&&(ae=0))}:function(sn,nn){const ln=oe(sn.huffmanTableDC),bi=ln===0?0:Mt(ln);sn.pred+=bi,nn[0]=sn.pred;let rr=1;for(;rr<64;){const Cr=oe(sn.huffmanTableAC),xi=15&Cr,wc=Cr>>4;if(xi===0){if(wc<15)break;rr+=16}else rr+=wc,nn[J[rr]]=Mt(xi),rr++}};let J0,hl,No=0;hl=qt===1?ht[0].blocksPerLine*ht[0].blocksPerColumn:It*W.mcusPerColumn;const tu=pt||hl;for(;No<hl;){for(bn=0;bn<qt;bn++)ht[bn].pred=0;if(Vt=0,qt===1)for(qe=ht[0],os=0;os<tu;os++)xe(qe,Rs,No),No++;else for(os=0;os<tu;os++){for(bn=0;bn<qt;bn++){qe=ht[bn];const{h:sn,v:nn}=qe;for(Be=0;Be<nn;Be++)for(Wn=0;Wn<sn;Wn++)Kt(qe,Rs,No,Be,Wn)}if(No++,No===hl)break}if(zt=0,J0=$[Ft]<<8|$[Ft+1],J0<65280)throw new Error("marker was not found");if(!(J0>=65488&&J0<=65495))break;Ft+=2}return Ft-Ut}function ut($,L){const W=[],{blocksPerLine:ht,blocksPerColumn:pt}=L,kt=ht<<3,At=new Int32Array(64),xt=new Uint8Array(64);function wt(It,Et,Ut){const Ft=L.quantizationTable;let Dt,zt,Jt,oe,te,Mt,Vt,Zt,ae;const Kt=Ut;let xe;for(xe=0;xe<64;xe++)Kt[xe]=It[xe]*Ft[xe];for(xe=0;xe<8;++xe){const qt=8*xe;Kt[1+qt]!==0||Kt[2+qt]!==0||Kt[3+qt]!==0||Kt[4+qt]!==0||Kt[5+qt]!==0||Kt[6+qt]!==0||Kt[7+qt]!==0?(Dt=5793*Kt[0+qt]+128>>8,zt=5793*Kt[4+qt]+128>>8,Jt=Kt[2+qt],oe=Kt[6+qt],te=2896*(Kt[1+qt]-Kt[7+qt])+128>>8,Zt=2896*(Kt[1+qt]+Kt[7+qt])+128>>8,Mt=Kt[3+qt]<<4,Vt=Kt[5+qt]<<4,ae=Dt-zt+1>>1,Dt=Dt+zt+1>>1,zt=ae,ae=3784*Jt+1567*oe+128>>8,Jt=1567*Jt-3784*oe+128>>8,oe=ae,ae=te-Vt+1>>1,te=te+Vt+1>>1,Vt=ae,ae=Zt+Mt+1>>1,Mt=Zt-Mt+1>>1,Zt=ae,ae=Dt-oe+1>>1,Dt=Dt+oe+1>>1,oe=ae,ae=zt-Jt+1>>1,zt=zt+Jt+1>>1,Jt=ae,ae=2276*te+3406*Zt+2048>>12,te=3406*te-2276*Zt+2048>>12,Zt=ae,ae=799*Mt+4017*Vt+2048>>12,Mt=4017*Mt-799*Vt+2048>>12,Vt=ae,Kt[0+qt]=Dt+Zt,Kt[7+qt]=Dt-Zt,Kt[1+qt]=zt+Vt,Kt[6+qt]=zt-Vt,Kt[2+qt]=Jt+Mt,Kt[5+qt]=Jt-Mt,Kt[3+qt]=oe+te,Kt[4+qt]=oe-te):(ae=5793*Kt[0+qt]+512>>10,Kt[0+qt]=ae,Kt[1+qt]=ae,Kt[2+qt]=ae,Kt[3+qt]=ae,Kt[4+qt]=ae,Kt[5+qt]=ae,Kt[6+qt]=ae,Kt[7+qt]=ae)}for(xe=0;xe<8;++xe){const qt=xe;Kt[8+qt]!==0||Kt[16+qt]!==0||Kt[24+qt]!==0||Kt[32+qt]!==0||Kt[40+qt]!==0||Kt[48+qt]!==0||Kt[56+qt]!==0?(Dt=5793*Kt[0+qt]+2048>>12,zt=5793*Kt[32+qt]+2048>>12,Jt=Kt[16+qt],oe=Kt[48+qt],te=2896*(Kt[8+qt]-Kt[56+qt])+2048>>12,Zt=2896*(Kt[8+qt]+Kt[56+qt])+2048>>12,Mt=Kt[24+qt],Vt=Kt[40+qt],ae=Dt-zt+1>>1,Dt=Dt+zt+1>>1,zt=ae,ae=3784*Jt+1567*oe+2048>>12,Jt=1567*Jt-3784*oe+2048>>12,oe=ae,ae=te-Vt+1>>1,te=te+Vt+1>>1,Vt=ae,ae=Zt+Mt+1>>1,Mt=Zt-Mt+1>>1,Zt=ae,ae=Dt-oe+1>>1,Dt=Dt+oe+1>>1,oe=ae,ae=zt-Jt+1>>1,zt=zt+Jt+1>>1,Jt=ae,ae=2276*te+3406*Zt+2048>>12,te=3406*te-2276*Zt+2048>>12,Zt=ae,ae=799*Mt+4017*Vt+2048>>12,Mt=4017*Mt-799*Vt+2048>>12,Vt=ae,Kt[0+qt]=Dt+Zt,Kt[56+qt]=Dt-Zt,Kt[8+qt]=zt+Vt,Kt[48+qt]=zt-Vt,Kt[16+qt]=Jt+Mt,Kt[40+qt]=Jt-Mt,Kt[24+qt]=oe+te,Kt[32+qt]=oe-te):(ae=5793*Ut[xe+0]+8192>>14,Kt[0+qt]=ae,Kt[8+qt]=ae,Kt[16+qt]=ae,Kt[24+qt]=ae,Kt[32+qt]=ae,Kt[40+qt]=ae,Kt[48+qt]=ae,Kt[56+qt]=ae)}for(xe=0;xe<64;++xe){const qt=128+(Kt[xe]+8>>4);Et[xe]=qt<0?0:qt>255?255:qt}}for(let It=0;It<pt;It++){const Et=It<<3;for(let Ut=0;Ut<8;Ut++)W.push(new Uint8Array(kt));for(let Ut=0;Ut<ht;Ut++){wt(L.blocks[It][Ut],xt,At);let Ft=0;const Dt=Ut<<3;for(let zt=0;zt<8;zt++){const Jt=W[Et+zt];for(let oe=0;oe<8;oe++)Jt[Dt+oe]=xt[Ft++]}}}return W}class ft{constructor(){this.jfif=null,this.adobe=null,this.quantizationTables=[],this.huffmanTablesAC=[],this.huffmanTablesDC=[],this.resetFrames()}resetFrames(){this.frames=[]}parse(L){let W=0;function ht(){const xt=L[W]<<8|L[W+1];return W+=2,xt}function pt(){const xt=ht(),wt=L.subarray(W,W+xt-2);return W+=wt.length,wt}function kt(xt){let wt,It,Et=0,Ut=0;for(It in xt.components)xt.components.hasOwnProperty(It)&&(wt=xt.components[It],Et<wt.h&&(Et=wt.h),Ut<wt.v&&(Ut=wt.v));const Ft=Math.ceil(xt.samplesPerLine/8/Et),Dt=Math.ceil(xt.scanLines/8/Ut);for(It in xt.components)if(xt.components.hasOwnProperty(It)){wt=xt.components[It];const zt=Math.ceil(Math.ceil(xt.samplesPerLine/8)*wt.h/Et),Jt=Math.ceil(Math.ceil(xt.scanLines/8)*wt.v/Ut),oe=Ft*wt.h,te=Dt*wt.v,Mt=[];for(let Vt=0;Vt<te;Vt++){const Zt=[];for(let ae=0;ae<oe;ae++)Zt.push(new Int32Array(64));Mt.push(Zt)}wt.blocksPerLine=zt,wt.blocksPerColumn=Jt,wt.blocks=Mt}xt.maxH=Et,xt.maxV=Ut,xt.mcusPerLine=Ft,xt.mcusPerColumn=Dt}let At=ht();if(At!==65496)throw new Error("SOI not found");for(At=ht();At!==65497;){switch(At){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:{const xt=pt();At===65504&&xt[0]===74&&xt[1]===70&&xt[2]===73&&xt[3]===70&&xt[4]===0&&(this.jfif={version:{major:xt[5],minor:xt[6]},densityUnits:xt[7],xDensity:xt[8]<<8|xt[9],yDensity:xt[10]<<8|xt[11],thumbWidth:xt[12],thumbHeight:xt[13],thumbData:xt.subarray(14,14+3*xt[12]*xt[13])}),At===65518&&xt[0]===65&&xt[1]===100&&xt[2]===111&&xt[3]===98&&xt[4]===101&&xt[5]===0&&(this.adobe={version:xt[6],flags0:xt[7]<<8|xt[8],flags1:xt[9]<<8|xt[10],transformCode:xt[11]});break}case 65499:{const xt=ht()+W-2;for(;W<xt;){const wt=L[W++],It=new Int32Array(64);if(wt>>4){if(wt>>4!=1)throw new Error("DQT: invalid table spec");for(let Et=0;Et<64;Et++)It[J[Et]]=ht()}else for(let Et=0;Et<64;Et++)It[J[Et]]=L[W++];this.quantizationTables[15&wt]=It}break}case 65472:case 65473:case 65474:{ht();const xt={extended:At===65473,progressive:At===65474,precision:L[W++],scanLines:ht(),samplesPerLine:ht(),components:{},componentsOrder:[]},wt=L[W++];let It;for(let Et=0;Et<wt;Et++){It=L[W];const Ut=L[W+1]>>4,Ft=15&L[W+1],Dt=L[W+2];xt.componentsOrder.push(It),xt.components[It]={h:Ut,v:Ft,quantizationIdx:Dt},W+=3}kt(xt),this.frames.push(xt);break}case 65476:{const xt=ht();for(let wt=2;wt<xt;){const It=L[W++],Et=new Uint8Array(16);let Ut=0;for(let Dt=0;Dt<16;Dt++,W++)Et[Dt]=L[W],Ut+=Et[Dt];const Ft=new Uint8Array(Ut);for(let Dt=0;Dt<Ut;Dt++,W++)Ft[Dt]=L[W];wt+=17+Ut,It>>4?this.huffmanTablesAC[15&It]=lt(Et,Ft):this.huffmanTablesDC[15&It]=lt(Et,Ft)}break}case 65501:ht(),this.resetInterval=ht();break;case 65498:{ht();const xt=L[W++],wt=[],It=this.frames[0];for(let zt=0;zt<xt;zt++){const Jt=It.components[L[W++]],oe=L[W++];Jt.huffmanTableDC=this.huffmanTablesDC[oe>>4],Jt.huffmanTableAC=this.huffmanTablesAC[15&oe],wt.push(Jt)}const Et=L[W++],Ut=L[W++],Ft=L[W++],Dt=mt(L,W,It,wt,this.resetInterval,Et,Ut,Ft>>4,15&Ft);W+=Dt;break}case 65535:L[W]!==255&&W--;break;default:if(L[W-3]===255&&L[W-2]>=192&&L[W-2]<=254){W-=3;break}throw new Error("unknown JPEG marker "+At.toString(16))}At=ht()}}getResult(){const{frames:L}=this;if(this.frames.length===0)throw new Error("no frames were decoded");this.frames.length>1&&console.warn("more than one frame is not supported");for(let Et=0;Et<this.frames.length;Et++){const Ut=this.frames[Et].components;for(const Ft of Object.keys(Ut))Ut[Ft].quantizationTable=this.quantizationTables[Ut[Ft].quantizationIdx],delete Ut[Ft].quantizationIdx}const W=L[0],{components:ht,componentsOrder:pt}=W,kt=[],At=W.samplesPerLine,xt=W.scanLines;for(let Et=0;Et<pt.length;Et++){const Ut=ht[pt[Et]];kt.push({lines:ut(0,Ut),scaleX:Ut.h/W.maxH,scaleY:Ut.v/W.maxV})}const wt=new Uint8Array(At*xt*kt.length);let It=0;for(let Et=0;Et<xt;++Et)for(let Ut=0;Ut<At;++Ut)for(let Ft=0;Ft<kt.length;++Ft){const Dt=kt[Ft];wt[It]=Dt.lines[0|Et*Dt.scaleY][0|Ut*Dt.scaleX],++It}return wt}}class tt extends U{constructor(L){super(),this.reader=new ft,L.JPEGTables&&this.reader.parse(L.JPEGTables)}decodeBlock(L){return this.reader.resetFrames(),this.reader.parse(new Uint8Array(L)),this.reader.getResult().buffer}}var et=a(102);class St extends U{decodeBlock(L){return Object(et.inflate)(new Uint8Array(L)).buffer}}class _t extends U{decodeBlock(L){const W=new DataView(L),ht=[];for(let pt=0;pt<L.byteLength;++pt){let kt=W.getInt8(pt);if(kt<0){const At=W.getUint8(pt+1);kt=-kt;for(let xt=0;xt<=kt;++xt)ht.push(At);pt+=1}else{for(let At=0;At<=kt;++At)ht.push(W.getUint8(pt+At+1));pt+=kt+1}}return new Uint8Array(ht).buffer}}function Gt($){switch($.Compression){case void 0:case 1:return new N;case 5:return new B;case 6:throw new Error("old style JPEG compression is not supported.");case 7:return new tt($);case 8:case 32946:return new St;case 32773:return new _t;default:throw new Error("Unknown compression method identifier: "+$.Compression)}}function Wt($,L,W,ht=1){return new(Object.getPrototypeOf($)).constructor(L*W*ht)}function Lt($,L,W){return(1-W)*$+W*L}function Qt($,L,W,ht,pt,kt="nearest"){switch(kt.toLowerCase()){case"nearest":return function(At,xt,wt,It,Et){const Ut=xt/It,Ft=wt/Et;return At.map(Dt=>{const zt=Wt(Dt,It,Et);for(let Jt=0;Jt<Et;++Jt){const oe=Math.min(Math.round(Ft*Jt),wt-1);for(let te=0;te<It;++te){const Mt=Math.min(Math.round(Ut*te),xt-1),Vt=Dt[oe*xt+Mt];zt[Jt*It+te]=Vt}}return zt})}($,L,W,ht,pt);case"bilinear":case"linear":return function(At,xt,wt,It,Et){const Ut=xt/It,Ft=wt/Et;return At.map(Dt=>{const zt=Wt(Dt,It,Et);for(let Jt=0;Jt<Et;++Jt){const oe=Ft*Jt,te=Math.floor(oe),Mt=Math.min(Math.ceil(oe),wt-1);for(let Vt=0;Vt<It;++Vt){const Zt=Ut*Vt,ae=Zt%1,Kt=Math.floor(Zt),xe=Math.min(Math.ceil(Zt),xt-1),qt=Dt[te*xt+Kt],qe=Dt[te*xt+xe],bn=Dt[Mt*xt+Kt],Be=Dt[Mt*xt+xe],Wn=Lt(Lt(qt,qe,ae),Lt(bn,Be,ae),oe%1);zt[Jt*It+Vt]=Wn}}return zt})}($,L,W,ht,pt);default:throw new Error(`Unsupported resampling method: '${kt}'`)}}function he($,L,W,ht,pt,kt,At="nearest"){switch(At.toLowerCase()){case"nearest":return function(xt,wt,It,Et,Ut,Ft){const Dt=wt/Et,zt=It/Ut,Jt=Wt(xt,Et,Ut,Ft);for(let oe=0;oe<Ut;++oe){const te=Math.min(Math.round(zt*oe),It-1);for(let Mt=0;Mt<Et;++Mt){const Vt=Math.min(Math.round(Dt*Mt),wt-1);for(let Zt=0;Zt<Ft;++Zt){const ae=xt[te*wt*Ft+Vt*Ft+Zt];Jt[oe*Et*Ft+Mt*Ft+Zt]=ae}}}return Jt}($,L,W,ht,pt,kt);case"bilinear":case"linear":return function(xt,wt,It,Et,Ut,Ft){const Dt=wt/Et,zt=It/Ut,Jt=Wt(xt,Et,Ut,Ft);for(let oe=0;oe<Ut;++oe){const te=zt*oe,Mt=Math.floor(te),Vt=Math.min(Math.ceil(te),It-1);for(let Zt=0;Zt<Et;++Zt){const ae=Dt*Zt,Kt=ae%1,xe=Math.floor(ae),qt=Math.min(Math.ceil(ae),wt-1);for(let qe=0;qe<Ft;++qe){const bn=xt[Mt*wt*Ft+xe*Ft+qe],Be=xt[Mt*wt*Ft+qt*Ft+qe],Wn=xt[Vt*wt*Ft+xe*Ft+qe],os=xt[Vt*wt*Ft+qt*Ft+qe],Rs=Lt(Lt(bn,Be,Kt),Lt(Wn,os,Kt),te%1);Jt[oe*Et*Ft+Zt*Ft+qe]=Rs}}}return Jt}($,L,W,ht,pt,kt);default:throw new Error(`Unsupported resampling method: '${At}'`)}}function z($,L,W){let ht=0;for(let pt=L;pt<W;++pt)ht+=$[pt];return ht}function Y($,L,W){switch($){case 1:switch(L){case 8:return new Uint8Array(W);case 16:return new Uint16Array(W);case 32:return new Uint32Array(W)}break;case 2:switch(L){case 8:return new Int8Array(W);case 16:return new Int16Array(W);case 32:return new Int32Array(W)}break;case 3:switch(L){case 32:return new Float32Array(W);case 64:return new Float64Array(W)}}throw Error("Unsupported data format/bitsPerSample")}var at=class{constructor($,L,W,ht,pt,kt){this.fileDirectory=$,this.geoKeys=L,this.dataView=W,this.littleEndian=ht,this.tiles=pt?{}:null,this.isTiled=!$.StripOffsets;const At=$.PlanarConfiguration;if(this.planarConfiguration=At===void 0?1:At,this.planarConfiguration!==1&&this.planarConfiguration!==2)throw new Error("Invalid planar configuration.");this.source=kt}getFileDirectory(){return this.fileDirectory}getGeoKeys(){return this.geoKeys}getWidth(){return this.fileDirectory.ImageWidth}getHeight(){return this.fileDirectory.ImageLength}getSamplesPerPixel(){return this.fileDirectory.SamplesPerPixel}getTileWidth(){return this.isTiled?this.fileDirectory.TileWidth:this.getWidth()}getTileHeight(){return this.isTiled?this.fileDirectory.TileLength:this.fileDirectory.RowsPerStrip!==void 0?Math.min(this.fileDirectory.RowsPerStrip,this.getHeight()):this.getHeight()}getBytesPerPixel(){let $=0;for(let L=0;L<this.fileDirectory.BitsPerSample.length;++L){const W=this.fileDirectory.BitsPerSample[L];if(W%8!=0)throw new Error(`Sample bit-width of ${W} is not supported.`);if(W!==this.fileDirectory.BitsPerSample[0])throw new Error("Differing size of samples in a pixel are not supported.");$+=W}return $/8}getSampleByteSize($){if($>=this.fileDirectory.BitsPerSample.length)throw new RangeError(`Sample index ${$} is out of range.`);const L=this.fileDirectory.BitsPerSample[$];if(L%8!=0)throw new Error(`Sample bit-width of ${L} is not supported.`);return L/8}getReaderForSample($){const L=this.fileDirectory.SampleFormat?this.fileDirectory.SampleFormat[$]:1,W=this.fileDirectory.BitsPerSample[$];switch(L){case 1:switch(W){case 8:return DataView.prototype.getUint8;case 16:return DataView.prototype.getUint16;case 32:return DataView.prototype.getUint32}break;case 2:switch(W){case 8:return DataView.prototype.getInt8;case 16:return DataView.prototype.getInt16;case 32:return DataView.prototype.getInt32}break;case 3:switch(W){case 32:return DataView.prototype.getFloat32;case 64:return DataView.prototype.getFloat64}}throw Error("Unsupported data format/bitsPerSample")}getArrayForSample($,L){return Y(this.fileDirectory.SampleFormat?this.fileDirectory.SampleFormat[$]:1,this.fileDirectory.BitsPerSample[$],L)}async getTileOrStrip($,L,W,ht){const pt=Math.ceil(this.getWidth()/this.getTileWidth()),kt=Math.ceil(this.getHeight()/this.getTileHeight());let At;const{tiles:xt}=this;let wt,It;this.planarConfiguration===1?At=L*pt+$:this.planarConfiguration===2&&(At=W*pt*kt+L*pt+$),this.isTiled?(wt=this.fileDirectory.TileOffsets[At],It=this.fileDirectory.TileByteCounts[At]):(wt=this.fileDirectory.StripOffsets[At],It=this.fileDirectory.StripByteCounts[At]);const Et=await this.source.fetch(wt,It);let Ut;return xt===null?Ut=ht.decode(this.fileDirectory,Et):xt[At]||(Ut=ht.decode(this.fileDirectory,Et),xt[At]=Ut),{x:$,y:L,sample:W,data:await Ut}}async _readRaster($,L,W,ht,pt,kt,At,xt){const wt=this.getTileWidth(),It=this.getTileHeight(),Et=Math.max(Math.floor($[0]/wt),0),Ut=Math.min(Math.ceil($[2]/wt),Math.ceil(this.getWidth()/this.getTileWidth())),Ft=Math.max(Math.floor($[1]/It),0),Dt=Math.min(Math.ceil($[3]/It),Math.ceil(this.getHeight()/this.getTileHeight())),zt=$[2]-$[0];let Jt=this.getBytesPerPixel();const oe=[],te=[];for(let Zt=0;Zt<L.length;++Zt)this.planarConfiguration===1?oe.push(z(this.fileDirectory.BitsPerSample,0,L[Zt])/8):oe.push(0),te.push(this.getReaderForSample(L[Zt]));const Mt=[],{littleEndian:Vt}=this;for(let Zt=Ft;Zt<Dt;++Zt)for(let ae=Et;ae<Ut;++ae)for(let Kt=0;Kt<L.length;++Kt){const xe=Kt,qt=L[Kt];this.planarConfiguration===2&&(Jt=this.getSampleByteSize(qt));const qe=this.getTileOrStrip(ae,Zt,qt,pt);Mt.push(qe),qe.then(bn=>{const Be=bn.data,Wn=new DataView(Be),os=bn.y*It,Rs=bn.x*wt,J0=(bn.y+1)*It,hl=(bn.x+1)*wt,No=te[xe],tu=Math.min(It,It-(J0-$[3])),sn=Math.min(wt,wt-(hl-$[2]));for(let nn=Math.max(0,$[1]-os);nn<tu;++nn)for(let ln=Math.max(0,$[0]-Rs);ln<sn;++ln){const bi=(nn*wt+ln)*Jt,rr=No.call(Wn,bi+oe[xe],Vt);let Cr;ht?(Cr=(nn+os-$[1])*zt*L.length+(ln+Rs-$[0])*L.length+xe,W[Cr]=rr):(Cr=(nn+os-$[1])*zt+ln+Rs-$[0],W[xe][Cr]=rr)}})}if(await Promise.all(Mt),kt&&$[2]-$[0]!==kt||At&&$[3]-$[1]!==At){let Zt;return Zt=ht?he(W,$[2]-$[0],$[3]-$[1],kt,At,L.length,xt):Qt(W,$[2]-$[0],$[3]-$[1],kt,At,xt),Zt.width=kt,Zt.height=At,Zt}return W.width=kt||$[2]-$[0],W.height=At||$[3]-$[1],W}async readRasters({window:$,samples:L=[],interleave:W,pool:ht=null,width:pt,height:kt,resampleMethod:At,fillValue:xt}={}){const wt=$||[0,0,this.getWidth(),this.getHeight()];if(wt[0]>wt[2]||wt[1]>wt[3])throw new Error("Invalid subsets");const It=(wt[2]-wt[0])*(wt[3]-wt[1]);if(L&&L.length){for(let Ft=0;Ft<L.length;++Ft)if(L[Ft]>=this.fileDirectory.SamplesPerPixel)return Promise.reject(new RangeError(`Invalid sample index '${L[Ft]}'.`))}else for(let Ft=0;Ft<this.fileDirectory.SamplesPerPixel;++Ft)L.push(Ft);let Et;if(W)Et=Y(this.fileDirectory.SampleFormat?Math.max.apply(null,this.fileDirectory.SampleFormat):1,Math.max.apply(null,this.fileDirectory.BitsPerSample),It*L.length),xt&&Et.fill(xt);else{Et=[];for(let Ft=0;Ft<L.length;++Ft){const Dt=this.getArrayForSample(L[Ft],It);Array.isArray(xt)&&Ft<xt.length?Dt.fill(xt[Ft]):xt&&!Array.isArray(xt)&&Dt.fill(xt),Et.push(Dt)}}const Ut=ht||Gt(this.fileDirectory);return await this._readRaster(wt,L,Et,W,Ut,pt,kt,At)}async readRGB({window:$,pool:L=null,width:W,height:ht,resampleMethod:pt,enableAlpha:kt=!1}={}){const At=$||[0,0,this.getWidth(),this.getHeight()];if(At[0]>At[2]||At[1]>At[3])throw new Error("Invalid subsets");const xt=this.fileDirectory.PhotometricInterpretation;if(xt===A.RGB){let zt=[0,1,2];if(this.fileDirectory.ExtraSamples!==T.Unspecified&&kt){zt=[];for(let Jt=0;Jt<this.fileDirectory.BitsPerSample.length;Jt+=1)zt.push(Jt)}return this.readRasters({window:$,interleave:!0,samples:zt,pool:L,width:W,height:ht})}let wt;switch(xt){case A.WhiteIsZero:case A.BlackIsZero:case A.Palette:wt=[0];break;case A.CMYK:wt=[0,1,2,3];break;case A.YCbCr:case A.CIELab:wt=[0,1,2];break;default:throw new Error("Invalid or unsupported photometric interpretation.")}const It={window:At,interleave:!0,samples:wt,pool:L,width:W,height:ht,resampleMethod:pt},{fileDirectory:Et}=this,Ut=await this.readRasters(It),Ft=2**this.fileDirectory.BitsPerSample[0];let Dt;switch(xt){case A.WhiteIsZero:Dt=M(Ut,Ft);break;case A.BlackIsZero:Dt=F(Ut,Ft);break;case A.Palette:Dt=k(Ut,Et.ColorMap);break;case A.CMYK:Dt=O(Ut);break;case A.YCbCr:Dt=v(Ut);break;case A.CIELab:Dt=R(Ut);break;default:throw new Error("Unsupported photometric interpretation.")}return Dt.width=Ut.width,Dt.height=Ut.height,Dt}getTiePoints(){if(!this.fileDirectory.ModelTiepoint)return[];const $=[];for(let L=0;L<this.fileDirectory.ModelTiepoint.length;L+=6)$.push({i:this.fileDirectory.ModelTiepoint[L],j:this.fileDirectory.ModelTiepoint[L+1],k:this.fileDirectory.ModelTiepoint[L+2],x:this.fileDirectory.ModelTiepoint[L+3],y:this.fileDirectory.ModelTiepoint[L+4],z:this.fileDirectory.ModelTiepoint[L+5]});return $}getGDALMetadata($=null){const L={};if(!this.fileDirectory.GDAL_METADATA)return null;const W=this.fileDirectory.GDAL_METADATA,ht=f()(W.substring(0,W.length-1));if(!ht[0].tagName)throw new Error("Failed to parse GDAL metadata XML.");const pt=ht[0];if(pt.tagName!=="GDALMetadata")throw new Error("Unexpected GDAL metadata XML tag.");let kt=pt.children.filter(At=>At.tagName==="Item");$&&(kt=kt.filter(At=>Number(At.attributes.sample)===$));for(let At=0;At<kt.length;++At){const xt=kt[At];L[xt.attributes.name]=xt.children[0]}return L}getGDALNoData(){if(!this.fileDirectory.GDAL_NODATA)return null;const $=this.fileDirectory.GDAL_NODATA;return Number($.substring(0,$.length-1))}getOrigin(){const $=this.fileDirectory.ModelTiepoint,L=this.fileDirectory.ModelTransformation;if($&&$.length===6)return[$[3],$[4],$[5]];if(L)return[L[3],L[7],L[11]];throw new Error("The image does not have an affine transformation.")}getResolution($=null){const L=this.fileDirectory.ModelPixelScale,W=this.fileDirectory.ModelTransformation;if(L)return[L[0],-L[1],L[2]];if(W)return[W[0],W[5],W[10]];if($){const[ht,pt,kt]=$.getResolution();return[ht*$.getWidth()/this.getWidth(),pt*$.getHeight()/this.getHeight(),kt*$.getWidth()/this.getWidth()]}throw new Error("The image does not have an affine transformation.")}pixelIsArea(){return this.geoKeys.GTRasterTypeGeoKey===1}getBoundingBox(){const $=this.getOrigin(),L=this.getResolution(),W=$[0],ht=$[1],pt=W+L[0]*this.getWidth(),kt=ht+L[1]*this.getHeight();return[Math.min(W,pt),Math.min(ht,kt),Math.max(W,pt),Math.max(ht,kt)]}};class Tt{constructor(L){this._dataView=new DataView(L)}get buffer(){return this._dataView.buffer}getUint64(L,W){const ht=this.getUint32(L,W),pt=this.getUint32(L+4,W);let kt;if(W){if(kt=ht+2**32*pt,!Number.isSafeInteger(kt))throw new Error(kt+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return kt}if(kt=2**32*ht+pt,!Number.isSafeInteger(kt))throw new Error(kt+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return kt}getInt64(L,W){let ht=0;const pt=(128&this._dataView.getUint8(L+(W?7:0)))>0;let kt=!0;for(let At=0;At<8;At++){let xt=this._dataView.getUint8(L+(W?At:7-At));pt&&(kt?xt!==0&&(xt=255&~(xt-1),kt=!1):xt=255&~xt),ht+=xt*256**At}return pt&&(ht=-ht),ht}getUint8(L,W){return this._dataView.getUint8(L,W)}getInt8(L,W){return this._dataView.getInt8(L,W)}getUint16(L,W){return this._dataView.getUint16(L,W)}getInt16(L,W){return this._dataView.getInt16(L,W)}getUint32(L,W){return this._dataView.getUint32(L,W)}getInt32(L,W){return this._dataView.getInt32(L,W)}getFloat32(L,W){return this._dataView.getFloat32(L,W)}getFloat64(L,W){return this._dataView.getFloat64(L,W)}}class Ot{constructor(L,W,ht,pt){this._dataView=new DataView(L),this._sliceOffset=W,this._littleEndian=ht,this._bigTiff=pt}get sliceOffset(){return this._sliceOffset}get sliceTop(){return this._sliceOffset+this.buffer.byteLength}get littleEndian(){return this._littleEndian}get bigTiff(){return this._bigTiff}get buffer(){return this._dataView.buffer}covers(L,W){return this.sliceOffset<=L&&this.sliceTop>=L+W}readUint8(L){return this._dataView.getUint8(L-this._sliceOffset,this._littleEndian)}readInt8(L){return this._dataView.getInt8(L-this._sliceOffset,this._littleEndian)}readUint16(L){return this._dataView.getUint16(L-this._sliceOffset,this._littleEndian)}readInt16(L){return this._dataView.getInt16(L-this._sliceOffset,this._littleEndian)}readUint32(L){return this._dataView.getUint32(L-this._sliceOffset,this._littleEndian)}readInt32(L){return this._dataView.getInt32(L-this._sliceOffset,this._littleEndian)}readFloat32(L){return this._dataView.getFloat32(L-this._sliceOffset,this._littleEndian)}readFloat64(L){return this._dataView.getFloat64(L-this._sliceOffset,this._littleEndian)}readUint64(L){const W=this.readUint32(L),ht=this.readUint32(L+4);let pt;if(this._littleEndian){if(pt=W+2**32*ht,!Number.isSafeInteger(pt))throw new Error(pt+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return pt}if(pt=2**32*W+ht,!Number.isSafeInteger(pt))throw new Error(pt+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return pt}readInt64(L){let W=0;const ht=(128&this._dataView.getUint8(L+(this._littleEndian?7:0)))>0;let pt=!0;for(let kt=0;kt<8;kt++){let At=this._dataView.getUint8(L+(this._littleEndian?kt:7-kt));ht&&(pt?At!==0&&(At=255&~(At-1),pt=!1):At=255&~At),W+=At*256**kt}return ht&&(W=-W),W}readOffset(L){return this._bigTiff?this.readUint64(L):this.readUint32(L)}}var Pt=a(68),$t=a(7),me=a(25),$e=a(40),ue=a.n($e),Ht=a(106),Se=a.n(Ht),Qe=a(39),On=a.n(Qe);class je{constructor(L,{blockSize:W=65536}={}){this.retrievalFunction=L,this.blockSize=W,this.blockRequests=new Map,this.blocks=new Map,this.blockIdsAwaitingRequest=null}async fetch(L,W,ht=!1){const pt=L+W,kt=[],At=[],xt=[];for(let It=Math.floor(L/this.blockSize)*this.blockSize;It<pt;It+=this.blockSize){const Et=Math.floor(It/this.blockSize);this.blocks.has(Et)||this.blockRequests.has(Et)||At.push(Et),this.blockRequests.has(Et)&&xt.push(this.blockRequests.get(Et)),kt.push(Et)}if(this.blockIdsAwaitingRequest)for(let It=0;It<At.length;++It){const Et=At[It];this.blockIdsAwaitingRequest.add(Et)}else this.blockIdsAwaitingRequest=new Set(At);if(ht||await async function(It){return new Promise(Et=>setTimeout(Et,It))}(),this.blockIdsAwaitingRequest){const It=function(Et){if(Et.length===0)return[];const Ut=[];let Ft=[];Ut.push(Ft);for(let Dt=0;Dt<Et.length;++Dt)Dt===0||Et[Dt]===Et[Dt-1]+1?Ft.push(Et[Dt]):(Ft=[Et[Dt]],Ut.push(Ft));return Ut}(Array.from(this.blockIdsAwaitingRequest).sort());for(const Et of It){const Ut=this.requestData(Et[0]*this.blockSize,Et.length*this.blockSize);for(let Ft=0;Ft<Et.length;++Ft){const Dt=Et[Ft];this.blockRequests.set(Dt,(async()=>{const zt=await Ut,Jt=Ft*this.blockSize,oe=Math.min(Jt+this.blockSize,zt.data.byteLength),te=zt.data.slice(Jt,oe);this.blockRequests.delete(Dt),this.blocks.set(Dt,{data:te,offset:zt.offset+Jt,length:te.byteLength,top:zt.offset+oe})})())}}this.blockIdsAwaitingRequest=null}const wt=[];for(const It of At)this.blockRequests.has(It)&&wt.push(this.blockRequests.get(It));return await Promise.all(wt),await Promise.all(xt),function(It,Et,Ut){const Ft=Et+Ut,Dt=new ArrayBuffer(Ut),zt=new Uint8Array(Dt);for(const Jt of It){const oe=Jt.offset-Et,te=Jt.top-Ft;let Mt,Vt=0,Zt=0;oe<0?Vt=-oe:oe>0&&(Zt=oe),Mt=te<0?Jt.length-Vt:Ft-Jt.offset-Vt;const ae=new Uint8Array(Jt.data,Vt,Mt);zt.set(ae,Zt)}return Dt}(kt.map(It=>this.blocks.get(It)),L,W)}async requestData(L,W){const ht=await this.retrievalFunction(L,W);return ht.length?ht.length!==ht.data.byteLength&&(ht.data=ht.data.slice(0,ht.length)):ht.length=ht.data.byteLength,ht.top=ht.offset+ht.length,ht}}function fe($,L){const{forceXHR:W}=L;if(typeof fetch=="function"&&!W)return function(ht,{headers:pt={},blockSize:kt}={}){return new je(async(At,xt)=>{const wt=await fetch(ht,{headers:{...pt,Range:`bytes=${At}-${At+xt-1}`}});if(wt.ok){if(wt.status===206)return{data:wt.arrayBuffer?await wt.arrayBuffer():(await wt.buffer()).buffer,offset:At,length:xt};{const It=wt.arrayBuffer?await wt.arrayBuffer():(await wt.buffer()).buffer;return{data:It,offset:0,length:It.byteLength}}}throw new Error("Error fetching data.")},{blockSize:kt})}($,L);if(typeof XMLHttpRequest<"u")return function(ht,{headers:pt={},blockSize:kt}={}){return new je(async(At,xt)=>new Promise((wt,It)=>{const Et=new XMLHttpRequest;Et.open("GET",ht),Et.responseType="arraybuffer";const Ut={...pt,Range:`bytes=${At}-${At+xt-1}`};for(const[Ft,Dt]of Object.entries(Ut))Et.setRequestHeader(Ft,Dt);Et.onload=()=>{const Ft=Et.response;Et.status===206?wt({data:Ft,offset:At,length:xt}):wt({data:Ft,offset:0,length:Ft.byteLength})},Et.onerror=It,Et.send()}),{blockSize:kt})}($,L);if(ue.a.get)return function(ht,{headers:pt={},blockSize:kt}={}){return new je(async(At,xt)=>new Promise((wt,It)=>{const Et=On.a.parse(ht);(Et.protocol==="http:"?ue.a:Se.a).get({...Et,headers:{...pt,Range:`bytes=${At}-${At+xt-1}`}},Ut=>{const Ft=[];Ut.on("data",Dt=>{Ft.push(Dt)}),Ut.on("end",()=>{const Dt=$t.Buffer.concat(Ft).buffer;wt({data:Dt,offset:At,length:Dt.byteLength})})}).on("error",It)}),{blockSize:kt})}($,L);throw new Error("No remote source available")}function jn($){const L=function(W,ht,pt){return new Promise((kt,At)=>{Object(me.open)(W,ht,pt,(xt,wt)=>{xt?At(xt):kt(wt)})})}($,"r");return{async fetch(W,ht){const pt=await L,{buffer:kt}=await function(...At){return new Promise((xt,wt)=>{Object(me.read)(...At,(It,Et,Ut)=>{It?wt(It):xt({bytesRead:Et,buffer:Ut})})})}(pt,$t.Buffer.alloc(ht),0,ht,W);return kt.buffer},async close(){const W=await L;return await function(ht){return new Promise((pt,kt)=>{Object(me.close)(ht,At=>{At?kt(At):pt()})})}(W)}}}function Fn($,L){for(const W in L)L.hasOwnProperty(W)&&($[W]=L[W])}function Ye($,L){return $.length<L.length?!1:$.substr($.length-L.length)===L}function cn($){const L={};for(const W in $)$.hasOwnProperty(W)&&(L[$[W]]=W);return L}function Pe($,L){const W=[];for(let ht=0;ht<$;ht++)W.push(L(ht));return W}const Bn=cn(d),Lr=cn(E),dr={};Fn(dr,Bn),Fn(dr,Lr);const Nr=cn(w),mn={nextZero:($,L)=>{let W=L;for(;$[W]!==0;)W++;return W},readUshort:($,L)=>$[L]<<8|$[L+1],readShort:($,L)=>{const W=mn.ui8;return W[0]=$[L+1],W[1]=$[L+0],mn.i16[0]},readInt:($,L)=>{const W=mn.ui8;return W[0]=$[L+3],W[1]=$[L+2],W[2]=$[L+1],W[3]=$[L+0],mn.i32[0]},readUint:($,L)=>{const W=mn.ui8;return W[0]=$[L+3],W[1]=$[L+2],W[2]=$[L+1],W[3]=$[L+0],mn.ui32[0]},readASCII:($,L,W)=>W.map(ht=>String.fromCharCode($[L+ht])).join(""),readFloat:($,L)=>{const W=mn.ui8;return Pe(4,ht=>{W[ht]=$[L+3-ht]}),mn.fl32[0]},readDouble:($,L)=>{const W=mn.ui8;return Pe(8,ht=>{W[ht]=$[L+7-ht]}),mn.fl64[0]},writeUshort:($,L,W)=>{$[L]=W>>8&255,$[L+1]=255&W},writeUint:($,L,W)=>{$[L]=W>>24&255,$[L+1]=W>>16&255,$[L+2]=W>>8&255,$[L+3]=W>>0&255},writeASCII:($,L,W)=>{Pe(W.length,ht=>{$[L+ht]=W.charCodeAt(ht)})},ui8:new Uint8Array(8)};mn.fl64=new Float64Array(mn.ui8.buffer),mn.writeDouble=($,L,W)=>{mn.fl64[0]=W,Pe(8,ht=>{$[L+ht]=mn.ui8[7-ht]})};const Oi=$=>{const L=new Uint8Array(1e3);let W=4;const ht=mn;L[0]=77,L[1]=77,L[3]=42;let pt=8;if(ht.writeUint(L,W,pt),W+=4,$.forEach((At,xt)=>{const wt=((It,Et,Ut,Ft)=>{let Dt=Ut;const zt=Object.keys(Ft).filter(oe=>oe!=null&&oe!=="undefined");It.writeUshort(Et,Dt,zt.length),Dt+=2;let Jt=Dt+12*zt.length+4;for(const oe of zt){let te=null;typeof oe=="number"?te=oe:typeof oe=="string"&&(te=parseInt(oe,10));const Mt=g[te],Vt=Nr[Mt];if(Mt==null||Mt===void 0||Mt===void 0)throw new Error("unknown type of tag: "+te);let Zt=Ft[oe];if(Zt===void 0)throw new Error("failed to get value for key "+oe);Mt==="ASCII"&&typeof Zt=="string"&&Ye(Zt,"\0")===!1&&(Zt+="\0");const ae=Zt.length;It.writeUshort(Et,Dt,te),Dt+=2,It.writeUshort(Et,Dt,Vt),Dt+=2,It.writeUint(Et,Dt,ae),Dt+=4;let Kt=[-1,1,1,2,4,8,0,0,0,0,0,0,8][Vt]*ae,xe=Dt;Kt>4&&(It.writeUint(Et,Dt,Jt),xe=Jt),Mt==="ASCII"?It.writeASCII(Et,xe,Zt):Mt==="SHORT"?Pe(ae,qt=>{It.writeUshort(Et,xe+2*qt,Zt[qt])}):Mt==="LONG"?Pe(ae,qt=>{It.writeUint(Et,xe+4*qt,Zt[qt])}):Mt==="RATIONAL"?Pe(ae,qt=>{It.writeUint(Et,xe+8*qt,Math.round(1e4*Zt[qt])),It.writeUint(Et,xe+8*qt+4,1e4)}):Mt==="DOUBLE"&&Pe(ae,qt=>{It.writeDouble(Et,xe+8*qt,Zt[qt])}),Kt>4&&(Kt+=1&Kt,Jt+=Kt),Dt+=4}return[Dt,Jt]})(ht,L,pt,At);pt=wt[1],xt<$.length-1&&ht.writeUint(L,wt[0],pt)}),L.slice)return L.slice(0,pt).buffer;const kt=new Uint8Array(pt);for(let At=0;At<pt;At++)kt[At]=L[At];return kt.buffer},ei=[["Compression",1],["PlanarConfiguration",1],["XPosition",0],["YPosition",0],["ResolutionUnit",1],["ExtraSamples",0],["GeoAsciiParams","WGS 84\0"],["ModelTiepoint",[0,0,0,-180,90,0]],["GTModelTypeGeoKey",2],["GTRasterTypeGeoKey",1],["GeographicTypeGeoKey",4326],["GeogCitationGeoKey","WGS 84"]];function jr($,L){let W,ht,pt,kt;typeof $[0]=="number"?(W=L.height||L.ImageLength,pt=L.width||L.ImageWidth,ht=$.length/(W*pt),kt=$):(ht=$.length,W=$[0].length,pt=$[0][0].length,kt=[],Pe(W,wt=>{Pe(pt,It=>{Pe(ht,Et=>{kt.push($[Et][wt][It])})})})),L.ImageLength=W,delete L.height,L.ImageWidth=pt,delete L.width,L.BitsPerSample||(L.BitsPerSample=Pe(ht,()=>8)),ei.forEach(wt=>{const It=wt[0];if(!L[It]){const Et=wt[1];L[It]=Et}}),L.PhotometricInterpretation||(L.PhotometricInterpretation=L.BitsPerSample.length===3?2:1),L.SamplesPerPixel||(L.SamplesPerPixel=[ht]),L.StripByteCounts||(L.StripByteCounts=[ht*W*pt]),L.ModelPixelScale||(L.ModelPixelScale=[360/pt,180/W,0]),L.SampleFormat||(L.SampleFormat=Pe(ht,()=>1));const At=Object.keys(L).filter(wt=>Ye(wt,"GeoKey")).sort((wt,It)=>dr[wt]-dr[It]);if(!L.GeoKeyDirectory){const wt=[1,1,0,At.length];At.forEach(It=>{const Et=Number(dr[It]);let Ut,Ft,Dt;wt.push(Et),g[Et]==="SHORT"?(Ut=1,Ft=0,Dt=L[It]):It==="GeogCitationGeoKey"?(Ut=L.GeoAsciiParams.length,Ft=Number(dr.GeoAsciiParams),Dt=0):console.log("[geotiff.js] couldn't get TIFFTagLocation for "+It),wt.push(Ft),wt.push(Ut),wt.push(Dt)}),L.GeoKeyDirectory=wt}for(const wt in At)At.hasOwnProperty(wt)&&delete L[wt];["Compression","ExtraSamples","GeographicTypeGeoKey","GTModelTypeGeoKey","GTRasterTypeGeoKey","ImageLength","ImageWidth","PhotometricInterpretation","PlanarConfiguration","ResolutionUnit","SamplesPerPixel","XPosition","YPosition"].forEach(wt=>{var It;L[wt]&&(L[wt]=(It=L[wt],Array.isArray(It)?It:[It]))});const xt=(wt=>{const It={};for(const Et in wt)Et!=="StripOffsets"&&(dr[Et]||console.error(Et,"not in name2code:",Object.keys(dr)),It[dr[Et]]=wt[Et]);return It})(L);return((wt,It,Et,Ut)=>{if(Et==null)throw new Error("you passed into encodeImage a width of type "+Et);if(It==null)throw new Error("you passed into encodeImage a width of type "+It);const Ft={256:[It],257:[Et],273:[1e3],278:[Et],305:"geotiff.js"};if(Ut)for(const te in Ut)Ut.hasOwnProperty(te)&&(Ft[te]=Ut[te]);const Dt=new Uint8Array(Oi([Ft])),zt=new Uint8Array(wt),Jt=Ft[277],oe=new Uint8Array(1e3+It*Et*Jt);return Pe(Dt.length,te=>{oe[te]=Dt[te]}),function(te,Mt){const{length:Vt}=te;for(let Zt=0;Zt<Vt;Zt++)Mt(te[Zt],Zt)}(zt,(te,Mt)=>{oe[1e3+Mt]=te}),oe.buffer})(kt,pt,W,xt)}class xc{log(){}info(){}warn(){}error(){}time(){}timeEnd(){}}function yc($=new xc){}function Ia($){switch($){case _.BYTE:case _.ASCII:case _.SBYTE:case _.UNDEFINED:return 1;case _.SHORT:case _.SSHORT:return 2;case _.LONG:case _.SLONG:case _.FLOAT:case _.IFD:return 4;case _.RATIONAL:case _.SRATIONAL:case _.DOUBLE:case _.LONG8:case _.SLONG8:case _.IFD8:return 8;default:throw new RangeError("Invalid field type: "+$)}}function ss($,L,W,ht){let pt=null,kt=null;const At=Ia(L);switch(L){case _.BYTE:case _.ASCII:case _.UNDEFINED:pt=new Uint8Array(W),kt=$.readUint8;break;case _.SBYTE:pt=new Int8Array(W),kt=$.readInt8;break;case _.SHORT:pt=new Uint16Array(W),kt=$.readUint16;break;case _.SSHORT:pt=new Int16Array(W),kt=$.readInt16;break;case _.LONG:case _.IFD:pt=new Uint32Array(W),kt=$.readUint32;break;case _.SLONG:pt=new Int32Array(W),kt=$.readInt32;break;case _.LONG8:case _.IFD8:pt=new Array(W),kt=$.readUint64;break;case _.SLONG8:pt=new Array(W),kt=$.readInt64;break;case _.RATIONAL:pt=new Uint32Array(2*W),kt=$.readUint32;break;case _.SRATIONAL:pt=new Int32Array(2*W),kt=$.readInt32;break;case _.FLOAT:pt=new Float32Array(W),kt=$.readFloat32;break;case _.DOUBLE:pt=new Float64Array(W),kt=$.readFloat64;break;default:throw new RangeError("Invalid field type: "+L)}if(L!==_.RATIONAL&&L!==_.SRATIONAL)for(let xt=0;xt<W;++xt)pt[xt]=kt.call($,ht+xt*At);else for(let xt=0;xt<W;xt+=2)pt[xt]=kt.call($,ht+xt*At),pt[xt+1]=kt.call($,ht+(xt*At+4));return L===_.ASCII?String.fromCharCode.apply(null,pt):pt}class yn{constructor(L,W,ht){this.fileDirectory=L,this.geoKeyDirectory=W,this.nextIFDByteOffset=ht}}class en extends Error{constructor(L){super("No image at index "+L),this.index=L}}class Ds{async readRasters(L={}){const{window:W,width:ht,height:pt}=L;let{resX:kt,resY:At,bbox:xt}=L;const wt=await this.getImage();let It=wt;const Et=await this.getImageCount(),Ut=wt.getBoundingBox();if(W&&xt)throw new Error('Both "bbox" and "window" passed.');if(ht||pt){if(W){const[zt,Jt]=wt.getOrigin(),[oe,te]=wt.getResolution();xt=[zt+W[0]*oe,Jt+W[1]*te,zt+W[2]*oe,Jt+W[3]*te]}const Dt=xt||Ut;if(ht){if(kt)throw new Error("Both width and resX passed");kt=(Dt[2]-Dt[0])/ht}if(pt){if(At)throw new Error("Both width and resY passed");At=(Dt[3]-Dt[1])/pt}}if(kt||At){const Dt=[];for(let zt=0;zt<Et;++zt){const Jt=await this.getImage(zt),{SubfileType:oe,NewSubfileType:te}=Jt.fileDirectory;(zt===0||oe===2||1&te)&&Dt.push(Jt)}Dt.sort((zt,Jt)=>zt.getWidth()-Jt.getWidth());for(let zt=0;zt<Dt.length;++zt){const Jt=Dt[zt],oe=(Ut[2]-Ut[0])/Jt.getWidth(),te=(Ut[3]-Ut[1])/Jt.getHeight();if(It=Jt,kt&&kt>oe||At&&At>te)break}}let Ft=W;if(xt){const[Dt,zt]=wt.getOrigin(),[Jt,oe]=It.getResolution(wt);Ft=[Math.round((xt[0]-Dt)/Jt),Math.round((xt[1]-zt)/oe),Math.round((xt[2]-Dt)/Jt),Math.round((xt[3]-zt)/oe)],Ft=[Math.min(Ft[0],Ft[2]),Math.min(Ft[1],Ft[3]),Math.max(Ft[0],Ft[2]),Math.max(Ft[1],Ft[3])]}return It.readRasters({...L,window:Ft})}}class Na extends Ds{constructor(L,W,ht,pt,kt={}){super(),this.source=L,this.littleEndian=W,this.bigTiff=ht,this.firstIFDOffset=pt,this.cache=kt.cache||!1,this.ifdRequests=[],this.ghostValues=null}async getSlice(L,W){const ht=this.bigTiff?4048:1024;return new Ot(await this.source.fetch(L,W!==void 0?W:ht),L,this.littleEndian,this.bigTiff)}async parseFileDirectoryAt(L){const W=this.bigTiff?20:12,ht=this.bigTiff?8:2;let pt=await this.getSlice(L);const kt=this.bigTiff?pt.readUint64(L):pt.readUint16(L),At=kt*W+(this.bigTiff?16:6);pt.covers(L,At)||(pt=await this.getSlice(L,At));const xt={};let wt=L+(this.bigTiff?8:2);for(let Ut=0;Ut<kt;wt+=W,++Ut){const Ft=pt.readUint16(wt),Dt=pt.readUint16(wt+2),zt=this.bigTiff?pt.readUint64(wt+4):pt.readUint32(wt+4);let Jt,oe;const te=Ia(Dt),Mt=wt+(this.bigTiff?12:8);if(te*zt<=(this.bigTiff?8:4))Jt=ss(pt,Dt,zt,Mt);else{const Vt=pt.readOffset(Mt),Zt=Ia(Dt)*zt;pt.covers(Vt,Zt)?Jt=ss(pt,Dt,zt,Vt):Jt=ss(await this.getSlice(Vt,Zt),Dt,zt,Vt)}oe=zt===1&&x.indexOf(Ft)===-1&&Dt!==_.RATIONAL&&Dt!==_.SRATIONAL?Jt[0]:Jt,xt[d[Ft]]=oe}const It=function(Ut){const Ft=Ut.GeoKeyDirectory;if(!Ft)return null;const Dt={};for(let zt=4;zt<=4*Ft[3];zt+=4){const Jt=E[Ft[zt]],oe=Ft[zt+1]?d[Ft[zt+1]]:null,te=Ft[zt+2],Mt=Ft[zt+3];let Vt=null;if(oe){if(Vt=Ut[oe],Vt==null)throw new Error(`Could not get value of geoKey '${Jt}'.`);typeof Vt=="string"?Vt=Vt.substring(Mt,Mt+te-1):Vt.subarray&&(Vt=Vt.subarray(Mt,Mt+te),te===1&&(Vt=Vt[0]))}else Vt=Mt;Dt[Jt]=Vt}return Dt}(xt),Et=pt.readOffset(L+ht+W*kt);return new yn(xt,It,Et)}async requestIFD(L){if(this.ifdRequests[L])return this.ifdRequests[L];if(L===0)return this.ifdRequests[L]=this.parseFileDirectoryAt(this.firstIFDOffset),this.ifdRequests[L];if(!this.ifdRequests[L-1])try{this.ifdRequests[L-1]=this.requestIFD(L-1)}catch(W){throw W instanceof en?new en(L):W}return this.ifdRequests[L]=(async()=>{const W=await this.ifdRequests[L-1];if(W.nextIFDByteOffset===0)throw new en(L);return this.parseFileDirectoryAt(W.nextIFDByteOffset)})(),this.ifdRequests[L]}async getImage(L=0){const W=await this.requestIFD(L);return new at(W.fileDirectory,W.geoKeyDirectory,this.dataView,this.littleEndian,this.cache,this.source)}async getImageCount(){let L=0,W=!0;for(;W;)try{await this.requestIFD(L),++L}catch(ht){if(!(ht instanceof en))throw ht;W=!1}return L}async getGhostValues(){const L=this.bigTiff?16:8;if(this.ghostValues)return this.ghostValues;const W="GDAL_STRUCTURAL_METADATA_SIZE=",ht=W.length+100;let pt=await this.getSlice(L,ht);if(W===ss(pt,_.ASCII,W.length,L)){const kt=ss(pt,_.ASCII,ht,L).split(`
`)[0],At=Number(kt.split("=")[1].split(" ")[0])+kt.length;At>ht&&(pt=await this.getSlice(L,At));const xt=ss(pt,_.ASCII,At,L);this.ghostValues={},xt.split(`
`).filter(wt=>wt.length>0).map(wt=>wt.split("=")).forEach(([wt,It])=>{this.ghostValues[wt]=It})}return this.ghostValues}static async fromSource(L,W){const ht=await L.fetch(0,1024),pt=new Tt(ht),kt=pt.getUint16(0,0);let At;if(kt===18761)At=!0;else{if(kt!==19789)throw new TypeError("Invalid byte order value.");At=!1}const xt=pt.getUint16(2,At);let wt;if(xt===42)wt=!1;else{if(xt!==43)throw new TypeError("Invalid magic number.");if(wt=!0,pt.getUint16(4,At)!==8)throw new Error("Unsupported offset byte-size.")}const It=wt?pt.getUint64(8,At):pt.getUint32(4,At);return new Na(L,At,wt,It,W)}close(){return typeof this.source.close=="function"&&this.source.close()}}i.default=Na;class be extends Ds{constructor(L,W){super(),this.mainFile=L,this.overviewFiles=W,this.imageFiles=[L].concat(W),this.fileDirectoriesPerFile=null,this.fileDirectoriesPerFileParsing=null,this.imageCount=null}async parseFileDirectoriesPerFile(){const L=[this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)].concat(this.overviewFiles.map(W=>W.parseFileDirectoryAt(W.firstIFDOffset)));return this.fileDirectoriesPerFile=await Promise.all(L),this.fileDirectoriesPerFile}async getImage(L=0){await this.getImageCount(),await this.parseFileDirectoriesPerFile();let W=0,ht=0;for(let pt=0;pt<this.imageFiles.length;pt++){const kt=this.imageFiles[pt];for(let At=0;At<this.imageCounts[pt];At++){if(L===W){const xt=await kt.requestIFD(ht);return new at(xt.fileDirectory,kt.geoKeyDirectory,kt.dataView,kt.littleEndian,kt.cache,kt.source)}W++,ht++}ht=0}throw new RangeError("Invalid image index")}async getImageCount(){if(this.imageCount!==null)return this.imageCount;const L=[this.mainFile.getImageCount()].concat(this.overviewFiles.map(W=>W.getImageCount()));return this.imageCounts=await Promise.all(L),this.imageCount=this.imageCounts.reduce((W,ht)=>W+ht,0),this.imageCount}}async function dn($,L={}){return Na.fromSource(fe($,L))}async function q($){return Na.fromSource(function(L){return{fetch:async(W,ht)=>L.slice(W,W+ht)}}($))}async function nt($){return Na.fromSource(jn($))}async function ot($){return Na.fromSource((L=$,{fetch:async(W,ht)=>new Promise((pt,kt)=>{const At=L.slice(W,W+ht),xt=new FileReader;xt.onload=wt=>pt(wt.target.result),xt.onerror=kt,xt.readAsArrayBuffer(At)})}));var L}async function gt($,L=[],W={}){const ht=await Na.fromSource(fe($,W)),pt=await Promise.all(L.map(kt=>Na.fromSource(fe(kt,W))));return new be(ht,pt)}async function yt($,L){return jr($,L)}},function(e,i,a){function s(o,h){var f=(h=h||{}).pos||0,d=60,p=62,g=45,x=47,w=33,_=39,A=34;function T(){for(var R=[];o[f];)if(o.charCodeAt(f)==d){if(o.charCodeAt(f+1)===x)return(f=o.indexOf(">",f))+1&&(f+=1),R;if(o.charCodeAt(f+1)===w){if(o.charCodeAt(f+2)==g){for(;f!==-1&&(o.charCodeAt(f)!==p||o.charCodeAt(f-1)!=g||o.charCodeAt(f-2)!=g||f==-1);)f=o.indexOf(">",f+1);f===-1&&(f=o.length)}else for(f+=2;o.charCodeAt(f)!==p&&o[f];)f++;f++;continue}var G=F();R.push(G)}else{var j=E();j.trim().length>0&&R.push(j),f++}return R}function E(){var R=f;return(f=o.indexOf("<",f)-1)===-2&&(f=o.length),o.slice(R,f+1)}function P(){for(var R=f;`
	>/= `.indexOf(o[f])===-1&&o[f];)f++;return o.slice(R,f)}var M=h.noChildNodes||["img","br","input","meta","link"];function F(){f++;const R=P(),G={};let j=[];for(;o.charCodeAt(f)!==p&&o[f];){var U=o.charCodeAt(f);if(U>64&&U<91||U>96&&U<123){for(var N=P(),Z=o.charCodeAt(f);Z&&Z!==_&&Z!==A&&!(Z>64&&Z<91||Z>96&&Z<123)&&Z!==p;)f++,Z=o.charCodeAt(f);if(Z===_||Z===A){var V=k();if(f===-1)return{tagName:R,attributes:G,children:j}}else V=null,f--;G[N]=V}f++}if(o.charCodeAt(f-1)!==x)if(R=="script"){var B=f+1;f=o.indexOf("<\/script>",f),j=[o.slice(B,f-1)],f+=9}else R=="style"?(B=f+1,f=o.indexOf("</style>",f),j=[o.slice(B,f-1)],f+=8):M.indexOf(R)==-1&&(f++,j=T());else f++;return{tagName:R,attributes:G,children:j}}function k(){var R=o[f],G=++f;return f=o.indexOf(R,G),o.slice(G,f)}var O,v=null;if(h.attrValue!==void 0)for(h.attrName=h.attrName||"id",v=[];O=void 0,O=new RegExp("\\s"+h.attrName+`\\s*=['"]`+h.attrValue+`['"]`).exec(o),(f=O?O.index:-1)!==-1;)(f=o.lastIndexOf("<",f))!==-1&&v.push(F()),o=o.substr(f),f=0;else v=h.parseNode?F():T();return h.filter&&(v=s.filter(v,h.filter)),h.setPos&&(v.pos=f),v}s.simplify=function(o){var h={};if(!o.length)return"";if(o.length===1&&typeof o[0]=="string")return o[0];for(var f in o.forEach(function(d){if(typeof d=="object"){h[d.tagName]||(h[d.tagName]=[]);var p=s.simplify(d.children||[]);h[d.tagName].push(p),d.attributes&&(p._attributes=d.attributes)}}),h)h[f].length==1&&(h[f]=h[f][0]);return h},s.filter=function(o,h){var f=[];return o.forEach(function(d){if(typeof d=="object"&&h(d)&&f.push(d),d.children){var p=s.filter(d.children,h);f=f.concat(p)}}),f},s.stringify=function(o){var h="";function f(p){if(p)for(var g=0;g<p.length;g++)typeof p[g]=="string"?h+=p[g].trim():d(p[g])}function d(p){for(var g in h+="<"+p.tagName,p.attributes)p.attributes[g]===null?h+=" "+g:p.attributes[g].indexOf('"')===-1?h+=" "+g+'="'+p.attributes[g].trim()+'"':h+=" "+g+"='"+p.attributes[g].trim()+"'";h+=">",f(p.children),h+="</"+p.tagName+">"}return f(o),h},s.toContentString=function(o){if(Array.isArray(o)){var h="";return o.forEach(function(f){h=(h+=" "+s.toContentString(f)).trim()}),h}return typeof o=="object"?s.toContentString(o.children):" "+o},s.getElementById=function(o,h,f){var d=s(o,{attrValue:h});return f?s.simplify(d):d[0]},s.getElementsByClassName=function(o,h,f){const d=s(o,{attrName:"class",attrValue:"[a-zA-Z0-9-s ]*"+h+"[a-zA-Z0-9-s ]*"});return f?s.simplify(d):d},s.parseStream=function(o,h){if(typeof h=="string"&&(h=h.length+2),typeof o=="string"){var f=a(25);o=f.createReadStream(o,{start:h}),h=0}var d=h,p="";return o.on("data",function(g){p+=g;for(var x=0;;){if(!(d=p.indexOf("<",d)+1))return void(d=x);if(p[d+1]!=="/"){var w=s(p,{pos:d-1,parseNode:!0,setPos:!0});if((d=w.pos)>p.length-1||d<x)return p=p.slice(x),d=0,void(x=0);o.emit("xml",w),x=d}else d+=1,x=pos}}),o.on("end",function(){console.log("end")}),o},s.transformStream=function(o){const h=a(114);typeof o=="string"&&(o=o.length+2);var f=o||0,d="";return h({readableObjectMode:!0},function(p,g,x){d+=p;for(var w=0;;){if(!(f=d.indexOf("<",f)+1))return f=w,x();if(d[f+1]!=="/"){var _=s(d,{pos:f-1,parseNode:!0,setPos:!0});if((f=_.pos)>d.length-1||f<w)return d=d.slice(w),f=0,w=0,x();this.push(_),w=f}else f+=1,w=pos}x()})},e.exports=s,s.xml=s},function(e,i,a){var s=a(123),o=a(29),h=a(128),f=a(129),d=a(130),p=a(131),g=a(132),x=Object.prototype.toString;function w(A){if(!(this instanceof w))return new w(A);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},A||{});var T=this.options;T.raw&&T.windowBits>=0&&T.windowBits<16&&(T.windowBits=-T.windowBits,T.windowBits===0&&(T.windowBits=-15)),!(T.windowBits>=0&&T.windowBits<16)||A&&A.windowBits||(T.windowBits+=32),T.windowBits>15&&T.windowBits<48&&!(15&T.windowBits)&&(T.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new p,this.strm.avail_out=0;var E=s.inflateInit2(this.strm,T.windowBits);if(E!==f.Z_OK)throw new Error(d[E]);if(this.header=new g,s.inflateGetHeader(this.strm,this.header),T.dictionary&&(typeof T.dictionary=="string"?T.dictionary=h.string2buf(T.dictionary):x.call(T.dictionary)==="[object ArrayBuffer]"&&(T.dictionary=new Uint8Array(T.dictionary)),T.raw&&(E=s.inflateSetDictionary(this.strm,T.dictionary))!==f.Z_OK))throw new Error(d[E])}function _(A,T){var E=new w(T);if(E.push(A,!0),E.err)throw E.msg||d[E.err];return E.result}w.prototype.push=function(A,T){var E,P,M,F,k,O=this.strm,v=this.options.chunkSize,R=this.options.dictionary,G=!1;if(this.ended)return!1;P=T===~~T?T:T===!0?f.Z_FINISH:f.Z_NO_FLUSH,typeof A=="string"?O.input=h.binstring2buf(A):x.call(A)==="[object ArrayBuffer]"?O.input=new Uint8Array(A):O.input=A,O.next_in=0,O.avail_in=O.input.length;do{if(O.avail_out===0&&(O.output=new o.Buf8(v),O.next_out=0,O.avail_out=v),(E=s.inflate(O,f.Z_NO_FLUSH))===f.Z_NEED_DICT&&R&&(E=s.inflateSetDictionary(this.strm,R)),E===f.Z_BUF_ERROR&&G===!0&&(E=f.Z_OK,G=!1),E!==f.Z_STREAM_END&&E!==f.Z_OK)return this.onEnd(E),this.ended=!0,!1;O.next_out&&(O.avail_out!==0&&E!==f.Z_STREAM_END&&(O.avail_in!==0||P!==f.Z_FINISH&&P!==f.Z_SYNC_FLUSH)||(this.options.to==="string"?(M=h.utf8border(O.output,O.next_out),F=O.next_out-M,k=h.buf2string(O.output,M),O.next_out=F,O.avail_out=v-F,F&&o.arraySet(O.output,O.output,M,F,0),this.onData(k)):this.onData(o.shrinkBuf(O.output,O.next_out)))),O.avail_in===0&&O.avail_out===0&&(G=!0)}while((O.avail_in>0||O.avail_out===0)&&E!==f.Z_STREAM_END);return E===f.Z_STREAM_END&&(P=f.Z_FINISH),P===f.Z_FINISH?(E=s.inflateEnd(this.strm),this.onEnd(E),this.ended=!0,E===f.Z_OK):P!==f.Z_SYNC_FLUSH||(this.onEnd(f.Z_OK),O.avail_out=0,!0)},w.prototype.onData=function(A){this.chunks.push(A)},w.prototype.onEnd=function(A){A===f.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=A,this.msg=this.strm.msg},i.Inflate=w,i.inflate=_,i.inflateRaw=function(A,T){return(T=T||{}).raw=!0,_(A,T)},i.ungzip=_},function(e,i,a){var s=a(26);class o extends s.a{constructor(){super(f=>(this._observers.add(f),()=>this._observers.delete(f))),this._observers=new Set}next(f){for(const d of this._observers)d.next(f)}error(f){for(const d of this._observers)d.error(f)}complete(){for(const f of this._observers)f.complete()}}i.a=o},function(e,i,a){a.d(i,"a",function(){return o});const s=()=>{};function o(){let h,f=!1,d=s;return[new Promise(p=>{f?p(h):d=p}),p=>{f=!0,h=p,d(h)}]}},function(e,i,a){a.d(i,"a",function(){return o});var s=a(2);function o(h){return h&&typeof h=="object"&&h[s.d]}},function(e,i,a){var s=a(40),o=a(39),h=e.exports;for(var f in s)s.hasOwnProperty(f)&&(h[f]=s[f]);function d(p){if(typeof p=="string"&&(p=o.parse(p)),p.protocol||(p.protocol="https:"),p.protocol!=="https:")throw new Error('Protocol "'+p.protocol+'" not supported. Expected "https:"');return p}h.request=function(p,g){return p=d(p),s.request.call(this,p,g)},h.get=function(p,g){return p=d(p),s.get.call(this,p,g)}},function(e,i,a){(function(s){var o=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(P){return typeof P}:function(P){return P&&typeof Symbol=="function"&&P.constructor===Symbol&&P!==Symbol.prototype?"symbol":typeof P},h=function(){function P(M,F){for(var k=0;k<F.length;k++){var O=F[k];O.enumerable=O.enumerable||!1,O.configurable=!0,"value"in O&&(O.writable=!0),Object.defineProperty(M,O.key,O)}}return function(M,F,k){return F&&P(M.prototype,F),k&&P(M,k),M}}(),f=_(a(110)),d=_(a(111)),p=_(a(113)),g=a(99),x=a(100),w=_(a(197));function _(P){return P&&P.__esModule?P:{default:P}}function A(P,M){var F=M.left,k=M.top,O=M.right,v=M.bottom,R=M.width,G=M.height,j=M.resampleMethod;return P.readRasters({window:[F,k,O,v],width:R,height:G,resampleMethod:j||"bilinear"}).then(function(U){return U.map(function(N){return(0,g.unflatten)(N,{height:G,width:R})})})}var T=function(){function P(M,F,k){(function(O,v){if(!(O instanceof v))throw new TypeError("Cannot call a class as a function")})(this,P),k&&console.log("starting GeoRaster.constructor with",M,F),this._web_worker_is_available=typeof window<"u"&&window.Worker!==void 0,this._blob_is_available=typeof Blob<"u",this._url_is_available=typeof URL<"u",(M===void 0?"undefined":o(M))==="object"&&M.constructor&&M.constructor.name==="Buffer"&&s.isBuffer(M)===!1&&(M=new s(M)),typeof M=="string"?(k&&console.log("data is a url"),this._data=M,this._url=M,this.rasterType="geotiff",this.sourceType="url"):typeof Blob<"u"&&M instanceof Blob?(this._data=M,this.rasterType="geotiff",this.sourceType="Blob"):s!==void 0&&s.isBuffer(M)?(k&&console.log("data is a buffer"),this._data=M.buffer.slice(M.byteOffset,M.byteOffset+M.byteLength),this.rasterType="geotiff",this.sourceType="Buffer"):M instanceof ArrayBuffer?(this._data=M,this.rasterType="geotiff",this.sourceType="ArrayBuffer",this._metadata=F):Array.isArray(M)&&F&&(this._data=M,this.rasterType="object",this._metadata=F),k&&console.log("this after construction:",this)}return h(P,[{key:"preinitialize",value:function(M){var F=this;if(M&&console.log("starting preinitialize"),this._url){var k=this._url+".ovr";return function(O){try{return(0,f.default)(O,{method:"HEAD"}).then(function(v){return v.status===200}).catch(function(v){return!1})}catch{return Promise.resolve(!1)}}(k).then(function(O){return M&&console.log("overview exists:",O),O?(0,x.fromUrls)(F._url,[k],{cache:!0,forceXHR:!1}):(0,x.fromUrl)(F._url,{cache:!0,forceXHR:!1})})}return Promise.resolve()}},{key:"initialize",value:function(M){var F=this;return this.preinitialize(M).then(function(k){return new Promise(function(O,v){if(M&&console.log("starting GeoRaster.initialize"),M&&console.log("this",F),F.rasterType==="object"||F.rasterType==="geotiff"||F.rasterType==="tiff")if(F._web_worker_is_available){var R=new d.default;R.onmessage=function(G){M&&console.log("main thread received message:",G);var j=G.data;for(var U in j)F[U]=j[U];F._url&&(F._geotiff=k,F.getValues=function(N){return A(this._geotiff,N)}),F.toCanvas=function(N){return(0,w.default)(this,N)},O(F)},M&&console.log("about to postMessage"),F._data instanceof ArrayBuffer?R.postMessage({data:F._data,rasterType:F.rasterType,sourceType:F.sourceType,metadata:F._metadata},[F._data]):R.postMessage({data:F._data,rasterType:F.rasterType,sourceType:F.sourceType,metadata:F._metadata})}else M&&console.log("web worker is not available"),(0,p.default)({data:F._data,rasterType:F.rasterType,sourceType:F.sourceType,metadata:F._metadata},M).then(function(G){M&&console.log("result:",G),F._url&&(G._geotiff=k,G.getValues=function(j){return A(this._geotiff,j)}),G.toCanvas=function(j){return(0,w.default)(this,j)},O(G)}).catch(v);else v("couldn't find a way to parse")})})}}]),P}(),E=function(P,M,F){if(F&&console.log("starting parseGeoraster with ",P,M),P===void 0)throw Error("[Georaster.parseGeoraster] Error. You passed in undefined to parseGeoraster. We can't make a raster out of nothing!");return new T(P,M,F).initialize(F)};e.exports!==void 0&&(e.exports=E),typeof window<"u"?window.parseGeoraster=E:typeof self<"u"&&(self.parseGeoraster=E)}).call(this,a(7).Buffer)},function(e,i,a){i.byteLength=function(w){var _=g(w),A=_[0],T=_[1];return 3*(A+T)/4-T},i.toByteArray=function(w){var _,A,T=g(w),E=T[0],P=T[1],M=new h(function(O,v,R){return 3*(v+R)/4-R}(0,E,P)),F=0,k=P>0?E-4:E;for(A=0;A<k;A+=4)_=o[w.charCodeAt(A)]<<18|o[w.charCodeAt(A+1)]<<12|o[w.charCodeAt(A+2)]<<6|o[w.charCodeAt(A+3)],M[F++]=_>>16&255,M[F++]=_>>8&255,M[F++]=255&_;return P===2&&(_=o[w.charCodeAt(A)]<<2|o[w.charCodeAt(A+1)]>>4,M[F++]=255&_),P===1&&(_=o[w.charCodeAt(A)]<<10|o[w.charCodeAt(A+1)]<<4|o[w.charCodeAt(A+2)]>>2,M[F++]=_>>8&255,M[F++]=255&_),M},i.fromByteArray=function(w){for(var _,A=w.length,T=A%3,E=[],P=0,M=A-T;P<M;P+=16383)E.push(x(w,P,P+16383>M?M:P+16383));return T===1?(_=w[A-1],E.push(s[_>>2]+s[_<<4&63]+"==")):T===2&&(_=(w[A-2]<<8)+w[A-1],E.push(s[_>>10]+s[_>>4&63]+s[_<<2&63]+"=")),E.join("")};for(var s=[],o=[],h=typeof Uint8Array<"u"?Uint8Array:Array,f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",d=0,p=f.length;d<p;++d)s[d]=f[d],o[f.charCodeAt(d)]=d;function g(w){var _=w.length;if(_%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var A=w.indexOf("=");return A===-1&&(A=_),[A,A===_?0:4-A%4]}function x(w,_,A){for(var T,E,P=[],M=_;M<A;M+=3)T=(w[M]<<16&16711680)+(w[M+1]<<8&65280)+(255&w[M+2]),P.push(s[(E=T)>>18&63]+s[E>>12&63]+s[E>>6&63]+s[63&E]);return P.join("")}o[45]=62,o[95]=63},function(e,i){/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */i.read=function(a,s,o,h,f){var d,p,g=8*f-h-1,x=(1<<g)-1,w=x>>1,_=-7,A=o?f-1:0,T=o?-1:1,E=a[s+A];for(A+=T,d=E&(1<<-_)-1,E>>=-_,_+=g;_>0;d=256*d+a[s+A],A+=T,_-=8);for(p=d&(1<<-_)-1,d>>=-_,_+=h;_>0;p=256*p+a[s+A],A+=T,_-=8);if(d===0)d=1-w;else{if(d===x)return p?NaN:1/0*(E?-1:1);p+=Math.pow(2,h),d-=w}return(E?-1:1)*p*Math.pow(2,d-h)},i.write=function(a,s,o,h,f,d){var p,g,x,w=8*d-f-1,_=(1<<w)-1,A=_>>1,T=f===23?Math.pow(2,-24)-Math.pow(2,-77):0,E=h?0:d-1,P=h?1:-1,M=s<0||s===0&&1/s<0?1:0;for(s=Math.abs(s),isNaN(s)||s===1/0?(g=isNaN(s)?1:0,p=_):(p=Math.floor(Math.log(s)/Math.LN2),s*(x=Math.pow(2,-p))<1&&(p--,x*=2),(s+=p+A>=1?T/x:T*Math.pow(2,1-A))*x>=2&&(p++,x/=2),p+A>=_?(g=0,p=_):p+A>=1?(g=(s*x-1)*Math.pow(2,f),p+=A):(g=s*Math.pow(2,A-1)*Math.pow(2,f),p=0));f>=8;a[o+E]=255&g,E+=P,g/=256,f-=8);for(p=p<<f|g,w+=f;w>0;a[o+E]=255&p,E+=P,p/=256,w-=8);a[o+E-P]|=128*M}},function(e,i){var a=typeof self<"u"?self:this,s=function(){function h(){this.fetch=!1,this.DOMException=a.DOMException}return h.prototype=a,new h}();(function(h){(function(f){var d="URLSearchParams"in h,p="Symbol"in h&&"iterator"in Symbol,g="FileReader"in h&&"Blob"in h&&function(){try{return new Blob,!0}catch{return!1}}(),x="FormData"in h,w="ArrayBuffer"in h;if(w)var _=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],A=ArrayBuffer.isView||function(B){return B&&_.indexOf(Object.prototype.toString.call(B))>-1};function T(B){if(typeof B!="string"&&(B=String(B)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(B))throw new TypeError("Invalid character in header field name");return B.toLowerCase()}function E(B){return typeof B!="string"&&(B=String(B)),B}function P(B){var J={next:function(){var lt=B.shift();return{done:lt===void 0,value:lt}}};return p&&(J[Symbol.iterator]=function(){return J}),J}function M(B){this.map={},B instanceof M?B.forEach(function(J,lt){this.append(lt,J)},this):Array.isArray(B)?B.forEach(function(J){this.append(J[0],J[1])},this):B&&Object.getOwnPropertyNames(B).forEach(function(J){this.append(J,B[J])},this)}function F(B){if(B.bodyUsed)return Promise.reject(new TypeError("Already read"));B.bodyUsed=!0}function k(B){return new Promise(function(J,lt){B.onload=function(){J(B.result)},B.onerror=function(){lt(B.error)}})}function O(B){var J=new FileReader,lt=k(J);return J.readAsArrayBuffer(B),lt}function v(B){if(B.slice)return B.slice(0);var J=new Uint8Array(B.byteLength);return J.set(new Uint8Array(B)),J.buffer}function R(){return this.bodyUsed=!1,this._initBody=function(B){var J;this._bodyInit=B,B?typeof B=="string"?this._bodyText=B:g&&Blob.prototype.isPrototypeOf(B)?this._bodyBlob=B:x&&FormData.prototype.isPrototypeOf(B)?this._bodyFormData=B:d&&URLSearchParams.prototype.isPrototypeOf(B)?this._bodyText=B.toString():w&&g&&(J=B)&&DataView.prototype.isPrototypeOf(J)?(this._bodyArrayBuffer=v(B.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):w&&(ArrayBuffer.prototype.isPrototypeOf(B)||A(B))?this._bodyArrayBuffer=v(B):this._bodyText=B=Object.prototype.toString.call(B):this._bodyText="",this.headers.get("content-type")||(typeof B=="string"?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):d&&URLSearchParams.prototype.isPrototypeOf(B)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},g&&(this.blob=function(){var B=F(this);if(B)return B;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?F(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(O)}),this.text=function(){var B,J,lt,mt=F(this);if(mt)return mt;if(this._bodyBlob)return B=this._bodyBlob,J=new FileReader,lt=k(J),J.readAsText(B),lt;if(this._bodyArrayBuffer)return Promise.resolve(function(ut){for(var ft=new Uint8Array(ut),tt=new Array(ft.length),et=0;et<ft.length;et++)tt[et]=String.fromCharCode(ft[et]);return tt.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},x&&(this.formData=function(){return this.text().then(U)}),this.json=function(){return this.text().then(JSON.parse)},this}M.prototype.append=function(B,J){B=T(B),J=E(J);var lt=this.map[B];this.map[B]=lt?lt+", "+J:J},M.prototype.delete=function(B){delete this.map[T(B)]},M.prototype.get=function(B){return B=T(B),this.has(B)?this.map[B]:null},M.prototype.has=function(B){return this.map.hasOwnProperty(T(B))},M.prototype.set=function(B,J){this.map[T(B)]=E(J)},M.prototype.forEach=function(B,J){for(var lt in this.map)this.map.hasOwnProperty(lt)&&B.call(J,this.map[lt],lt,this)},M.prototype.keys=function(){var B=[];return this.forEach(function(J,lt){B.push(lt)}),P(B)},M.prototype.values=function(){var B=[];return this.forEach(function(J){B.push(J)}),P(B)},M.prototype.entries=function(){var B=[];return this.forEach(function(J,lt){B.push([lt,J])}),P(B)},p&&(M.prototype[Symbol.iterator]=M.prototype.entries);var G=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function j(B,J){var lt,mt,ut=(J=J||{}).body;if(B instanceof j){if(B.bodyUsed)throw new TypeError("Already read");this.url=B.url,this.credentials=B.credentials,J.headers||(this.headers=new M(B.headers)),this.method=B.method,this.mode=B.mode,this.signal=B.signal,ut||B._bodyInit==null||(ut=B._bodyInit,B.bodyUsed=!0)}else this.url=String(B);if(this.credentials=J.credentials||this.credentials||"same-origin",!J.headers&&this.headers||(this.headers=new M(J.headers)),this.method=(lt=J.method||this.method||"GET",mt=lt.toUpperCase(),G.indexOf(mt)>-1?mt:lt),this.mode=J.mode||this.mode||null,this.signal=J.signal||this.signal,this.referrer=null,(this.method==="GET"||this.method==="HEAD")&&ut)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(ut)}function U(B){var J=new FormData;return B.trim().split("&").forEach(function(lt){if(lt){var mt=lt.split("="),ut=mt.shift().replace(/\+/g," "),ft=mt.join("=").replace(/\+/g," ");J.append(decodeURIComponent(ut),decodeURIComponent(ft))}}),J}function N(B,J){J||(J={}),this.type="default",this.status=J.status===void 0?200:J.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in J?J.statusText:"OK",this.headers=new M(J.headers),this.url=J.url||"",this._initBody(B)}j.prototype.clone=function(){return new j(this,{body:this._bodyInit})},R.call(j.prototype),R.call(N.prototype),N.prototype.clone=function(){return new N(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new M(this.headers),url:this.url})},N.error=function(){var B=new N(null,{status:0,statusText:""});return B.type="error",B};var Z=[301,302,303,307,308];N.redirect=function(B,J){if(Z.indexOf(J)===-1)throw new RangeError("Invalid status code");return new N(null,{status:J,headers:{location:B}})},f.DOMException=h.DOMException;try{new f.DOMException}catch{f.DOMException=function(J,lt){this.message=J,this.name=lt;var mt=Error(J);this.stack=mt.stack},f.DOMException.prototype=Object.create(Error.prototype),f.DOMException.prototype.constructor=f.DOMException}function V(B,J){return new Promise(function(lt,mt){var ut=new j(B,J);if(ut.signal&&ut.signal.aborted)return mt(new f.DOMException("Aborted","AbortError"));var ft=new XMLHttpRequest;function tt(){ft.abort()}ft.onload=function(){var et,St,_t={status:ft.status,statusText:ft.statusText,headers:(et=ft.getAllResponseHeaders()||"",St=new M,et.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(Wt){var Lt=Wt.split(":"),Qt=Lt.shift().trim();if(Qt){var he=Lt.join(":").trim();St.append(Qt,he)}}),St)};_t.url="responseURL"in ft?ft.responseURL:_t.headers.get("X-Request-URL");var Gt="response"in ft?ft.response:ft.responseText;lt(new N(Gt,_t))},ft.onerror=function(){mt(new TypeError("Network request failed"))},ft.ontimeout=function(){mt(new TypeError("Network request failed"))},ft.onabort=function(){mt(new f.DOMException("Aborted","AbortError"))},ft.open(ut.method,ut.url,!0),ut.credentials==="include"?ft.withCredentials=!0:ut.credentials==="omit"&&(ft.withCredentials=!1),"responseType"in ft&&g&&(ft.responseType="blob"),ut.headers.forEach(function(et,St){ft.setRequestHeader(St,et)}),ut.signal&&(ut.signal.addEventListener("abort",tt),ft.onreadystatechange=function(){ft.readyState===4&&ut.signal.removeEventListener("abort",tt)}),ft.send(ut._bodyInit===void 0?null:ut._bodyInit)})}V.polyfill=!0,h.fetch||(h.fetch=V,h.Headers=M,h.Request=j,h.Response=N),f.Headers=M,f.Request=j,f.Response=N,f.fetch=V,Object.defineProperty(f,"__esModule",{value:!0})})({})})(s),s.fetch.ponyfill=!0,delete s.fetch.polyfill;var o=s;(i=o.fetch).default=o.fetch,i.fetch=o.fetch,i.Headers=o.Headers,i.Request=o.Request,i.Response=o.Response,e.exports=i},function(e,i,a){e.exports=function(){return a(112)('!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=106)}([function(t,e,r){"use strict";const n=r(73);t.exports=function(t){return"+"===t[0]&&(t=t.substring(1)),(t=(t=n(t)).replace(/^0+(?=\\d)/,"")).includes(".")&&(t=t.replace(/\\.?0+$/,"")),""===t&&(t="0"),"-0"===t&&(t="0"),t}},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(15),s=r(32);function a(t,e,r){t=i(t),e=i(e);const a="-"!==t[0],u="-"!==e[0],c=o(t),l=o(e);if(c||l)return a==u?"Infinity":"-Infinity";if("0"===e)throw new Error("[preciso] division by zero");if(""===t||"0"===t)return"0";const f=a!==u?"-":"";return a||(t=n(t)),u||(e=n(e)),f+s(t,e,r)}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";r.d(e,"a",(function(){return n})),r.d(e,"b",(function(){return i})),r.d(e,"c",(function(){return o})),r.d(e,"d",(function(){return s})),r.d(e,"e",(function(){return a}));const n=Symbol("thread.errors"),i=Symbol("thread.events"),o=Symbol("thread.terminate"),s=Symbol("thread.transferable"),a=Symbol("thread.worker")},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";const n=r(0);function i(t){return"-"===(t=n(t))[0]?t.substring(1):t}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";function n(t,e){const r=t.length,n=e.length,i=t.indexOf("."),o=e.indexOf("."),s=-1===i?r:i,a=-1===o?n:o,u=s-a;let c=u<0?-1*u:0,l=u<=0?0:u,f=Math.max(s,a)+1+Math.max(r-s,n-a)-1,h=0;for(;h<f;){const r=h-c,n=r===s?".":t[r]||"0",i=h-l,o=i===a?".":e[i]||"0";if(n!==o){if(n>o)return">";if(n<o)return"<"}h++}return"="}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const n=r(5),i=r(0),o=r(8),s=r(31),a=r(15);function u(t,e,{infinity_minus_infinity:r="NaN"}={}){t=i(t),e=i(e);const u="-"!==t[0],c="-"!==e[0],l=!u,f=!c,h=a(t),d=a(e);if(h&&d)return u&&c?"Infinity":l&f?"-Infinity":r;if(h)return u?"Infinity":"-Infinity";if(d)return c?"Infinity":"-Infinity";if(u&&c)return o(t,e);if(l&&f)return"-"+o(t.substring(1),e.substring(1));if(l&&c)switch(t=t.substring(1),n(t,e)){case"=":return"0";case"<":return s(e,t);case">":return"-"+s(t,e)}else if(u&&!c)switch(e=e.substring(1),n(t,e)){case"=":return"0";case"<":return"-"+s(e,t);case">":return s(t,e)}}t.exports=u,t.exports.default=u},function(t,e){var r,n,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(t){r=o}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var t=a(h);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new p(t,e)),1!==c.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){"use strict";const{MAX_SAFE_INTEGER_LENGTH:n}=r(30);function i(t,e){const r=t.length,i=e.length,o=t.indexOf("."),s=e.indexOf("."),a=-1===o?r:o,u=-1===s?i:s;if(-1===o&&-1===s&&r<n&&i<n)return(Number(t)+Number(e)).toFixed();const c=a-u;let l=Math.max(a,u),f=Math.max(r-a-1,i-u-1),h=c<0?-1*c:0,d=c<=0?0:c,p=l+1+f-1,y="",g=0,m=p;if(f>0){for(;m>p-f;){const r=t[m-h]||"0",n=e[m-d]||"0";let i=Number(r)+Number(n)+g;i>=10?(i-=10,g=1):g=0,""===y&&0===i||(y=i+y),m--}y&&(y="."+y),m--}if(l>0)for(;m>=0;){const r=t[m-h]||"0",n=e[m-d]||"0";let i=Number(r)+Number(n)+g;i>=10?(i-=10,g=1):g=0,y=i+y,m--}return 1===g&&(y=g+y),"."===y[0]&&(y="0"+y),y}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";(function(t){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\nvar n=r(108),i=r(109),o=r(61);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError(\'"value" argument must not be a number\');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("\'offset\' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("\'length\' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=h(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError(\'"encoding" must be a valid string encoding\');var n=0|p(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|d(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):h(t,e);if("Buffer"===e.type&&o(e.data))return h(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError(\'"size" argument must be a number\');if(t<0)throw new RangeError(\'"size" argument must not be negative\')}function f(t,e){if(l(e),t=a(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function h(t,e){var r=e.length<0?0:0|d(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return B(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return G(t).length;default:if(n)return B(t).length;e=(""+e).toLowerCase(),n=!0}}function y(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return O(this,e,r);case"utf8":case"utf-8":return k(this,e,r);case"ascii":return T(this,e,r);case"latin1":case"binary":return C(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function g(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function m(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var l=-1;for(o=r;o<a;o++)if(c(t,o)===c(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var f=!0,h=0;h<u;h++)if(c(t,o+h)!==c(e,h)){f=!1;break}if(f)return o}return-1}function v(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function w(t,e,r,n){return q(B(e,t.length-r),t,r,n)}function x(t,e,r,n){return q(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function _(t,e,r,n){return x(t,e,r,n)}function S(t,e,r,n){return q(G(e),t,r,n)}function A(t,e,r,n){return q(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function E(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function k(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=r)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(l=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=f}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return l(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError(\'"list" argument must be an Array of Buffers\');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(!u.isBuffer(s))throw new TypeError(\'"list" argument must be an Array of Buffers\');s.copy(n,i),i+=s.length}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):y.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(o,s),c=this.slice(n,i),l=t.slice(e,r),f=0;f<a;++f)if(c[f]!==l[f]){o=c[f],s=l[f];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return m(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return m(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return w(this,t,e,r);case"ascii":return x(this,t,e,r);case"latin1":case"binary":return _(this,t,e,r);case"base64":return S(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function C(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function O(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=U(t[o]);return i}function I(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function P(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function R(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError(\'"buffer" argument must be a Buffer instance\');if(e>i||e<o)throw new RangeError(\'"value" argument is out of bounds\');if(r+n>t.length)throw new RangeError("Index out of range")}function j(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function M(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function L(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function F(t,e,r,n,o){return o||L(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function N(t,e,r,n,o){return o||L(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUInt8=function(t,e){return e||P(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||P(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||P(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||P(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||P(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||P(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||P(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||P(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||P(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||P(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||R(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||R(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):M(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);R(this,t,e,r,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);R(this,t,e,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):M(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||R(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return F(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return F(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return N(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return N(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var s=u.isBuffer(t)?t:B(new u(t,n).toString()),a=s.length;for(o=0;o<r-e;++o)this[o+e]=s[o%a]}return this};var D=/[^+\\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function B(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function G(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\\s+|\\s+$/g,"")}(t).replace(D,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(3))},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},function(t,e,r){"use strict";function n(t){return/^[-+]?0(\\.0+)?(e[\\.\\d]+)?$/.test(t)}t.exports=n,t.exports.default=n},function(t,e,r){(function(n){e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(n++,"%c"===t&&(i=n))}),e.splice(i,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=r(129)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,r(7))},function(t,e,r){"use strict";r.d(e,"a",(function(){return o})),r.d(e,"b",(function(){return s}));const n={deserialize:t=>Object.assign(Error(t.message),{name:t.name,stack:t.stack}),serialize:t=>({__error_marker:"$$error",message:t.message,name:t.name,stack:t.stack})};let i={deserialize(t){return(e=t)&&"object"==typeof e&&"__error_marker"in e&&"$$error"===e.__error_marker?n.deserialize(t):t;var e},serialize:t=>t instanceof Error?n.serialize(t):t};function o(t){return i.deserialize(t)}function s(t){return i.serialize(t)}},function(t,e,r){"use strict";var n=r(28),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=f;var o=Object.create(r(21));o.inherits=r(10);var s=r(60),a=r(65);o.inherits(f,s);for(var u=i(a.prototype),c=0;c<u.length;c++){var l=u[c];f.prototype[l]||(f.prototype[l]=a.prototype[l])}function f(t){if(!(this instanceof f))return new f(t);s.call(this,t),a.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||n.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),f.prototype._destroy=function(t,e){this.push(null),this.end(),n.nextTick(e,t)}},function(t,e,r){"use strict";function n(t){return!!t.match(/^(|-|\\+)inf(inity)?$/i)}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const n=r(0),i=r(15);function o(t){return!i(t)&&(!(t=n(t)).includes(".")&&!t.includes("/"))}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(5),s=r(48),a=r(36);function u(t,{max_decimal_digits:e}={}){let r=i(t[0]),u=n(r),c="-"===r[0]?"-":"";const l=t.length;for(let e=1;e<l;e++){const a=i(t[e]),l="-"===a[0]?"-":"",f=n(a);c=c!==l?"-":"";u="<"===o(u,f)?s(f,u):s(u,f),r=c+u}return"number"==typeof e&&(r=a(r,{digits:e})),r}t.exports=u,t.exports.default=u},function(t,e,r){const n=r(179);t.exports=function(t){return"+"===t[0]&&(t=t.substring(1)),(t=(t=n(t)).replace(/^0+(?=\\d)/,"")).includes(".")&&(t=t.replace(/\\.?0+$/,"")),""===t&&(t="0"),t}},function(t,e,r){"use strict";let n;function i(){return n||(n=function(){try{throw new Error}catch(t){const e=(""+t.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);if(e)return(""+e[0]).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/,"$1")+"/"}return"/"}()),n}r.d(e,"a",(function(){return o})),r.d(e,"b",(function(){return c}));const o="undefined"!=typeof navigator&&navigator.hardwareConcurrency?navigator.hardwareConcurrency:4,s=t=>/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(t);function a(t){const e=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(e)}let u;function c(){return u||(u=function(){if("undefined"==typeof Worker)return class{constructor(){throw Error("No web worker implementation available. You might have tried to spawn a worker within a worker in a browser that doesn\'t support workers in workers.")}};class t extends Worker{constructor(t,e){var r,n;"string"==typeof t&&e&&e._baseURL?t=new URL(t,e._baseURL):"string"==typeof t&&!s(t)&&i().match(/^file:\\/\\//i)&&(t=new URL(t,i().replace(/\\/[^\\/]+$/,"/")),(null===(r=null==e?void 0:e.CORSWorkaround)||void 0===r||r)&&(t=a(`importScripts(${JSON.stringify(t)});`))),"string"==typeof t&&s(t)&&(null===(n=null==e?void 0:e.CORSWorkaround)||void 0===n||n)&&(t=a(`importScripts(${JSON.stringify(t)});`)),super(t,e)}}class e extends t{constructor(t,e){super(window.URL.createObjectURL(t),e)}static fromText(t,r){const n=new window.Blob([t],{type:"text/javascript"});return new e(n,r)}}return{blob:e,default:t}}()),u}},function(t,e,r){"use strict";var n,i;r.d(e,"a",(function(){return n})),r.d(e,"b",(function(){return i})),function(t){t.cancel="cancel",t.run="run"}(n||(n={})),function(t){t.error="error",t.init="init",t.result="result",t.running="running",t.uncaughtError="uncaughtError"}(i||(i={}))},function(t,e,r){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(9).Buffer.isBuffer},function(t,e,r){"use strict";const n=r(11),i=r(50);function o(t){return n(t)?"":i(t)}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(35);function i(t,e){return n(t,"2",e)}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";r.d(e,"a",(function(){return o}));var n=r(2);function i(t){throw Error(t)}const o={errors:t=>t[n.a]||i("Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise."),events:t=>t[n.b]||i("Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise."),terminate:t=>t[n.c]()}},function(t,e){},function(t,e,r){"use strict";const n=()=>"function"==typeof Symbol,i=t=>n()&&Boolean(Symbol[t]),o=t=>i(t)?Symbol[t]:"@@"+t;i("asyncIterator")||(Symbol.asyncIterator=Symbol.asyncIterator||Symbol.for("Symbol.asyncIterator"));const s=o("iterator"),a=o("observable"),u=o("species");function c(t,e){const r=t[e];if(null!=r){if("function"!=typeof r)throw new TypeError(r+" is not a function");return r}}function l(t){let e=t.constructor;return void 0!==e&&(e=e[u],null===e&&(e=void 0)),void 0!==e?e:v}function f(t){f.log?f.log(t):setTimeout(()=>{throw t},0)}function h(t){Promise.resolve().then(()=>{try{t()}catch(t){f(t)}})}function d(t){const e=t._cleanup;if(void 0!==e&&(t._cleanup=void 0,e))try{if("function"==typeof e)e();else{const t=c(e,"unsubscribe");t&&t.call(e)}}catch(t){f(t)}}function p(t){t._observer=void 0,t._queue=void 0,t._state="closed"}function y(t,e,r){t._state="running";const n=t._observer;try{const i=n?c(n,e):void 0;switch(e){case"next":i&&i.call(n,r);break;case"error":if(p(t),!i)throw r;i.call(n,r);break;case"complete":p(t),i&&i.call(n)}}catch(t){f(t)}"closed"===t._state?d(t):"running"===t._state&&(t._state="ready")}function g(t,e,r){if("closed"!==t._state)return"buffering"===t._state?(t._queue=t._queue||[],void t._queue.push({type:e,value:r})):"ready"!==t._state?(t._state="buffering",t._queue=[{type:e,value:r}],void h(()=>function(t){const e=t._queue;if(e){t._queue=void 0,t._state="ready";for(const r of e)if(y(t,r.type,r.value),"closed"===t._state)break}}(t))):void y(t,e,r)}class m{constructor(t,e){this._cleanup=void 0,this._observer=t,this._queue=void 0,this._state="initializing";const r=new b(this);try{this._cleanup=e.call(void 0,r)}catch(t){r.error(t)}"initializing"===this._state&&(this._state="ready")}get closed(){return"closed"===this._state}unsubscribe(){"closed"!==this._state&&(p(this),d(this))}}class b{constructor(t){this._subscription=t}get closed(){return"closed"===this._subscription._state}next(t){g(this._subscription,"next",t)}error(t){g(this._subscription,"error",t)}complete(){g(this._subscription,"complete")}}class v{constructor(t){if(!(this instanceof v))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof t)throw new TypeError("Observable initializer must be a function");this._subscriber=t}subscribe(t,e,r){return"object"==typeof t&&null!==t||(t={next:t,error:e,complete:r}),new m(t,this._subscriber)}pipe(t,...e){let r=this;for(const n of[t,...e])r=n(r);return r}tap(t,e,r){const n="object"!=typeof t||null===t?{next:t,error:e,complete:r}:t;return new v(t=>this.subscribe({next(e){n.next&&n.next(e),t.next(e)},error(e){n.error&&n.error(e),t.error(e)},complete(){n.complete&&n.complete(),t.complete()},start(t){n.start&&n.start(t)}}))}forEach(t){return new Promise((e,r)=>{if("function"!=typeof t)return void r(new TypeError(t+" is not a function"));function n(){i.unsubscribe(),e(void 0)}const i=this.subscribe({next(e){try{t(e,n)}catch(t){r(t),i.unsubscribe()}},error(t){r(t)},complete(){e(void 0)}})})}map(t){if("function"!=typeof t)throw new TypeError(t+" is not a function");return new(l(this))(e=>this.subscribe({next(r){let n=r;try{n=t(r)}catch(t){return e.error(t)}e.next(n)},error(t){e.error(t)},complete(){e.complete()}}))}filter(t){if("function"!=typeof t)throw new TypeError(t+" is not a function");return new(l(this))(e=>this.subscribe({next(r){try{if(!t(r))return}catch(t){return e.error(t)}e.next(r)},error(t){e.error(t)},complete(){e.complete()}}))}reduce(t,e){if("function"!=typeof t)throw new TypeError(t+" is not a function");const r=l(this),n=arguments.length>1;let i=!1,o=e;return new r(e=>this.subscribe({next(r){const s=!i;if(i=!0,!s||n)try{o=t(o,r)}catch(t){return e.error(t)}else o=r},error(t){e.error(t)},complete(){if(!i&&!n)return e.error(new TypeError("Cannot reduce an empty sequence"));e.next(o),e.complete()}}))}concat(...t){const e=l(this);return new e(r=>{let n,i=0;return function o(s){n=s.subscribe({next(t){r.next(t)},error(t){r.error(t)},complete(){i===t.length?(n=void 0,r.complete()):o(e.from(t[i++]))}})}(this),()=>{n&&(n.unsubscribe(),n=void 0)}})}flatMap(t){if("function"!=typeof t)throw new TypeError(t+" is not a function");const e=l(this);return new e(r=>{const n=[],i=this.subscribe({next(i){let s;if(t)try{s=t(i)}catch(t){return r.error(t)}else s=i;const a=e.from(s).subscribe({next(t){r.next(t)},error(t){r.error(t)},complete(){const t=n.indexOf(a);t>=0&&n.splice(t,1),o()}});n.push(a)},error(t){r.error(t)},complete(){o()}});function o(){i.closed&&0===n.length&&r.complete()}return()=>{n.forEach(t=>t.unsubscribe()),i.unsubscribe()}})}[(Symbol.observable,a)](){return this}static from(t){const e="function"==typeof this?this:v;if(null==t)throw new TypeError(t+" is not an object");const r=c(t,a);if(r){const n=r.call(t);if(Object(n)!==n)throw new TypeError(n+" is not an object");return function(t){return t instanceof v}(n)&&n.constructor===e?n:new e(t=>n.subscribe(t))}if(i("iterator")){const r=c(t,s);if(r)return new e(e=>{h(()=>{if(!e.closed){for(const n of r.call(t))if(e.next(n),e.closed)return;e.complete()}})})}if(Array.isArray(t))return new e(e=>{h(()=>{if(!e.closed){for(const r of t)if(e.next(r),e.closed)return;e.complete()}})});throw new TypeError(t+" is not observable")}static of(...t){return new("function"==typeof this?this:v)(e=>{h(()=>{if(!e.closed){for(const r of t)if(e.next(r),e.closed)return;e.complete()}})})}static get[u](){return this}}n()&&Object.defineProperty(v,Symbol("extensions"),{value:{symbol:a,hostReportError:f},configurable:!0});e.a=v},function(t,e,r){"use strict";var n;r.d(e,"a",(function(){return n})),function(t){t.internalError="internalError",t.message="message",t.termination="termination"}(n||(n={}))},function(t,e,r){"use strict";(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError(\'"callback" argument must be a function\');var o,s,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,r)}));case 3:return e.nextTick((function(){t.call(null,r,n)}));case 4:return e.nextTick((function(){t.call(null,r,n,i)}));default:for(o=new Array(a-1),s=0;s<o.length;)o[s++]=arguments[s];return e.nextTick((function(){t.apply(null,o)}))}}}:t.exports=e}).call(this,r(7))},function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)i(r,n)&&(t[n]=r[n])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var o={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,s;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(s=new Uint8Array(n),i=0,e=0,r=t.length;e<r;e++)o=t[e],s.set(o,i),i+=o.length;return s}},s={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,o)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,s))},e.setTyped(n)},function(t,e,r){"use strict";const{MAX_SAFE_INTEGER:n}=r(74),i=n.toString().length-1;t.exports={MAX_SAFE_INTEGER_LENGTH:i}},function(t,e,r){"use strict";const{MAX_SAFE_INTEGER_LENGTH:n}=r(30);function i(t,e){const r=t.length,i=e.length,o=t.indexOf("."),s=e.indexOf("."),a=-1===o?r:o,u=-1===s?i:s;if(-1===o&&-1===s&&r<n&&i<n)return(Number(t)-Number(e)).toFixed();const c=a-u;let l=Math.max(a,u),f=Math.max(r-a-1,i-u-1),h=c<0?-1*c:0,d=c<=0?0:c,p=l+1+f-1,y="",g=0,m=p;if(f>0){for(;m>p-f;){let r=t[m-h]||"0",n=e[m-d]||"0";r-=g,g=0;let i=r-n;if(i<0)for(;i<0;)g++,i+=10;else g&&g--;""===y&&0===i||(y=i+y),m--}""!==y&&(y="."+y),m--}if(l>0){for(;m>0;){let r=t[m-h]||"0",n=e[m-d]||"0";r-=g,g=0;let i=r-n;if(i<0)for(;i<0;)g++,i+=10;else g&&g--;y=i+y,m--}const r=t[0-h]||"0",n=e[0-d]||"0";let i=Number(r)-(g>0?1:0)-Number(n);0!==i&&(y=i+y),y=y.replace(/^0+/,"")}return"."===y[0]&&(y="0"+y),y}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(5),i=r(6),o=r(33),s=r(49);function a(t,e,{format:r="string",max_decimal_digits:a=100,ellipsis:u=!1}={}){"0"===t[0]&&(t=t.substring(1)),"0"===e[0]&&(e=e.substring(1));const c=t.indexOf("."),l=e.indexOf("."),f=-1===c?t.length:c,h=-1===l?0:e.length-1-l;let d=!1;t=t.replace(/\\./,""),e=e.replace(/\\./,"");const p=t.length;let y,g="",m="",b=-1*h,v=0;for(let r=0;r<p;r++){if(g+=t[r],y=n(g,e),">"===y){let t=1,r=i(e,e),s=e;for(;">"!==n(r,g);)t++,s=r,r=i(r,e);if(t=t.toString(),""!==m)for(let e=t.length;e<=v;e++)m+="0";m+=t,g=o(g,s),v=0}else{if("<"===y){""===m&&b++,v++;continue}if("="===y){if(""!==m)for(let t=0;t<v;t++)m+="0";m+="1",g="0",v=0}}}if(g.match(/^0+$/g))"<"===y&&(m+=g.substring(0,g.length-1));else{const t={},r=f-b-m.length+a+1;""===m&&(v=0);for(let s=0;s<r;s++){if(g+="0",u)if(g in t){if(t[g]++,t[g]>3){m+="...",d=!0;break}}else t[g]=1;const r=n(g,e);if(">"===r){let t=1,r=i(e,e),s=e;for(;">"!==n(r,g);)t++,s=r,r=i(r,e);t=t.toString();for(let e=t.length;e<=v;e++)m+="0";if(m+=t,g=o(g,s),"0"===g)break;v=0}else{if("<"===r){v++;continue}if("="===r){for(let t=0;t<v;t++)m+="0";m+="1",v=0;break}}}}const w=f-b,x=m.length;let _;if(w===x)_=0;else if(w<0)m="0."+"0".repeat(Math.abs(w))+m,_=x-w;else if(w>x){for(let t=x;t<w;t++)m+="0";_=0}else w<x?(m=m.substring(0,w)+"."+m.substring(w),_=x-w):0===w&&(m="0."+m,_=x);m=m.replace(/^0+/,""),m=m.replace(/\\.\\d+0+$/,"");const S=_-a;return d||S>0&&(m=s(m.substring(0,m.length-S+1))),"."===m[0]&&(m="0"+m),"object"===r?{quotient:m,extra_decimals:S}:m}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";const n=r(0),i=r(5),o=r(15),s=r(8),a=r(31);function u(t,e,{infinity_minus_infinity:r="NaN"}={}){t=n(t),e=n(e);const u=!("-"===t[0]),c=!("-"===e[0]),l=o(t),f=o(e);if(l&&f){if(u===c)return r;if(u)return"Infinity";if(c)return"-Infinity"}else{if(l)return t;if(f)return c?"-Infinity":"Infinity"}if(u){if(c){const r=i(t,e);return">"===r?a(t,e):"<"===r?"-"+a(e,t):"0"}return s(t,e.substring(1))}if(c)return"-"+s(t.substring(1),e);{t=t.substring(1),e=e.substring(1);const r=i(t,e);return">"===r?"-"+a(t,e):"<"===r?a(e,t):"0"}}t.exports=u,t.exports.default=u},function(t,e,r){"use strict";const n=r(0),i=r(5);function o(t,e){t=n(t),e=n(e);const r="-"!==t[0],o="-"!==e[0];return r?o?i(t,e):">":o?"<":i(e.substring(1),t.substring(1))}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(1),s=r(77),a=r(16),u=r(52),c=r(78),l=r(11),f=r(53),h=r(54),d=r(81),p=r(37),y=r(36),g=r(22),m=r(85);function b(t,e,{zero_to_the_power_of_zero:r="1",ellipsis:b=!1,imaginary:v=!0,max_decimal_digits:w=100,fraction:x=!1}={}){t=i(t),e=i(e);const _=v&&u(t);_&&(t=t.replace(/i$/,""));const S=l(t),A=l(e);if(S&&A)return r;if(A)return"1";const E=g(e);if(S){if("+"===E)return"0";if("-"===E)return"Infinity"}const k=a(e);if("+"===E&&k){let r=h(t,e);return"number"==typeof w&&(r=y(r,{digits:w})),_&&c(e)&&(r+="i"),r}if("-"===E&&k){const r="1",i=h(t,n(e));return o(r,i,{ellipsis:b,max_decimal_digits:w})}if(!k){e=n(e);let[r,i]=e.includes("/")?e.split("/"):s(e);[r,i]=m(r,i);let o=p(t,i,{imaginary:v}),a=f(r,o);return"number"==typeof w&&(a=y(a,{digits:w})),"-"===E&&(a=d(a,{fraction:x,max_decimal_digits:w})),a}}t.exports=b,t.exports.default=b},function(t,e,r){"use strict";const n=r(52),i=r(159);function o(t,{digits:e=0}={}){return n(t)?i(t.substring(0,t.length-1),{digits:e})+"i":i(t,{digits:e})}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(5),s=r(82),a=r(16),u=r(80),c=r(54),l=r(83);function f(t,e,{imaginary:r=!0,max_decimal_digits:f=100}={}){if(t=i(t),"1"===(e=i(e)))return t;if("1"===t)return"1";if(!a(e))throw new Error("[preciso] can\'t find fractional roots");if(u(e))throw new Error("[preciso] can\'t find root of negative indexes");const h=n(t),d=u(t),p=s(e),y=d&&p;if(y&&!r)throw new Error("[preciso] root has an imaginary number");const g=d&&!p?"-":"",m=l(h,e),b=["9","8","7","6","5","4","3","2","1","0"];let v="";for(let t=0;t<m;t++)for(let r=0;r<b.length;r++){const n=v+b[r];let i=n+"0".repeat(m-t-1);const s=c(i,e),a=o(s,h);if("="===a)return y&&(i+="i"),g+i;if("<"===a){v=n;break}}let w=v+".";for(let t=0;t<f;t++){let t=!1;for(let r=0;r<b.length;r++){let n=w+b[r];const i=c(n,e),s=o(i,h);if("="===s)return y&&(n+="i"),g+n;if("<"===s){w=n,t=!0;break}}if(!t)break}return y&&(w+="i"),g+w}t.exports=f,t.exports.default=f},function(t,e,r){r(18);function n(t,e){const r=t.length,n=e.length,i=t.indexOf("."),o=e.indexOf("."),s=-1===i?r:i,a=-1===o?n:o,u=s-a;let c=u<0?-1*u:0,l=u<=0?0:u,f=Math.max(s,a)+1+Math.max(r-s,n-a)-1,h=0;for(;h<f;){const r=h-c,n=r===s?".":t[r]||"0",i=h-l,o=i===a?".":e[i]||"0";if(n!==o){if(n>o)return">";if(n<o)return"<"}h++}return"="}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";var n=r(135);function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var o=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,a=/^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/,u=["{","}","|","\\\\","^","`"].concat(["<",">",\'"\',"`"," ","\\r","\\n","\\t"]),c=["\'"].concat(u),l=["%","/","?",";","#"].concat(c),f=["/","?","#"],h=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,p={javascript:!0,"javascript:":!0},y={javascript:!0,"javascript:":!0},g={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},m=r(137);function b(t,e,r){if(t&&"object"==typeof t&&t instanceof i)return t;var n=new i;return n.parse(t,e,r),n}i.prototype.parse=function(t,e,r){if("string"!=typeof t)throw new TypeError("Parameter \'url\' must be a string, not "+typeof t);var i=t.indexOf("?"),s=-1!==i&&i<t.indexOf("#")?"?":"#",u=t.split(s);u[0]=u[0].replace(/\\\\/g,"/");var b=t=u.join(s);if(b=b.trim(),!r&&1===t.split("#").length){var v=a.exec(b);if(v)return this.path=b,this.href=b,this.pathname=v[1],v[2]?(this.search=v[2],this.query=e?m.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=o.exec(b);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,b=b.substr(w.length)}if(r||w||b.match(/^\\/\\/[^@/]+@[^@/]+/)){var _="//"===b.substr(0,2);!_||w&&y[w]||(b=b.substr(2),this.slashes=!0)}if(!y[w]&&(_||w&&!g[w])){for(var S,A,E=-1,k=0;k<f.length;k++){-1!==(T=b.indexOf(f[k]))&&(-1===E||T<E)&&(E=T)}-1!==(A=-1===E?b.lastIndexOf("@"):b.lastIndexOf("@",E))&&(S=b.slice(0,A),b=b.slice(A+1),this.auth=decodeURIComponent(S)),E=-1;for(k=0;k<l.length;k++){var T;-1!==(T=b.indexOf(l[k]))&&(-1===E||T<E)&&(E=T)}-1===E&&(E=b.length),this.host=b.slice(0,E),b=b.slice(E),this.parseHost(),this.hostname=this.hostname||"";var C="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!C)for(var O=this.hostname.split(/\\./),I=(k=0,O.length);k<I;k++){var P=O[k];if(P&&!P.match(h)){for(var R="",j=0,M=P.length;j<M;j++)P.charCodeAt(j)>127?R+="x":R+=P[j];if(!R.match(h)){var L=O.slice(0,k),F=O.slice(k+1),N=P.match(d);N&&(L.push(N[1]),F.unshift(N[2])),F.length&&(b="/"+F.join(".")+b),this.hostname=L.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),C||(this.hostname=n.toASCII(this.hostname));var D=this.port?":"+this.port:"",U=this.hostname||"";this.host=U+D,this.href+=this.host,C&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!p[x])for(k=0,I=c.length;k<I;k++){var B=c[k];if(-1!==b.indexOf(B)){var G=encodeURIComponent(B);G===B&&(G=escape(B)),b=b.split(B).join(G)}}var q=b.indexOf("#");-1!==q&&(this.hash=b.substr(q),b=b.slice(0,q));var z=b.indexOf("?");if(-1!==z?(this.search=b.substr(z),this.query=b.substr(z+1),e&&(this.query=m.parse(this.query)),b=b.slice(0,z)):e&&(this.search="",this.query={}),b&&(this.pathname=b),g[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){D=this.pathname||"";var H=this.search||"";this.path=D+H}return this.href=this.format(),this},i.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",n=this.hash||"",i=!1,o="";this.host?i=t+this.host:this.hostname&&(i=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&"object"==typeof this.query&&Object.keys(this.query).length&&(o=m.stringify(this.query));var s=this.search||o&&"?"+o||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||g[e])&&!1!==i?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),n&&"#"!==n.charAt(0)&&(n="#"+n),s&&"?"!==s.charAt(0)&&(s="?"+s),e+i+(r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(s=s.replace("#","%23"))+n},i.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},i.prototype.resolveObject=function(t){if("string"==typeof t){var e=new i;e.parse(t,!1,!0),t=e}for(var r=new i,n=Object.keys(this),o=0;o<n.length;o++){var s=n[o];r[s]=this[s]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var a=Object.keys(t),u=0;u<a.length;u++){var c=a[u];"protocol"!==c&&(r[c]=t[c])}return g[r.protocol]&&r.hostname&&!r.pathname&&(r.pathname="/",r.path=r.pathname),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!g[t.protocol]){for(var l=Object.keys(t),f=0;f<l.length;f++){var h=l[f];r[h]=t[h]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||y[t.protocol])r.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),r.pathname=d.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var p=r.pathname||"",m=r.search||"";r.path=p+m}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var b=r.pathname&&"/"===r.pathname.charAt(0),v=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=v||b||r.host&&t.pathname,x=w,_=r.pathname&&r.pathname.split("/")||[],S=(d=t.pathname&&t.pathname.split("/")||[],r.protocol&&!g[r.protocol]);if(S&&(r.hostname="",r.port=null,r.host&&(""===_[0]?_[0]=r.host:_.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),w=w&&(""===d[0]||""===_[0])),v)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,_=d;else if(d.length)_||(_=[]),_.pop(),_=_.concat(d),r.search=t.search,r.query=t.query;else if(null!=t.search){if(S)r.host=_.shift(),r.hostname=r.host,(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.hostname=C.shift(),r.host=r.hostname);return r.search=t.search,r.query=t.query,null===r.pathname&&null===r.search||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!_.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var A=_.slice(-1)[0],E=(r.host||t.host||_.length>1)&&("."===A||".."===A)||""===A,k=0,T=_.length;T>=0;T--)"."===(A=_[T])?_.splice(T,1):".."===A?(_.splice(T,1),k++):k&&(_.splice(T,1),k--);if(!w&&!x)for(;k--;k)_.unshift("..");!w||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),E&&"/"!==_.join("/").substr(-1)&&_.push("");var C,O=""===_[0]||_[0]&&"/"===_[0].charAt(0);S&&(r.hostname=O?"":_.length?_.shift():"",r.host=r.hostname,(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.hostname=C.shift(),r.host=r.hostname));return(w=w||r.host&&_.length)&&!O&&_.unshift(""),_.length>0?r.pathname=_.join("/"):(r.pathname=null,r.path=null),null===r.pathname&&null===r.search||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},i.prototype.parseHost=function(){var t=this.host,e=s.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)},e.parse=b,e.resolve=function(t,e){return b(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?b(t,!1,!0).resolveObject(e):e},e.format=function(t){return"string"==typeof t&&(t=b(t)),t instanceof i?t.format():i.prototype.format.call(t)},e.Url=i},function(t,e,r){(function(t){var n=r(131),i=r(70),o=r(133),s=r(134),a=r(39),u=e;u.request=function(e,r){e="string"==typeof e?a.parse(e):o(e);var i=-1===t.location.protocol.search(/^https?:$/)?"http:":"",s=e.protocol||i,u=e.hostname||e.host,c=e.port,l=e.path||"/";u&&-1!==u.indexOf(":")&&(u="["+u+"]"),e.url=(u?s+"//"+u:"")+(c?":"+c:"")+l,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var f=new n(e);return r&&f.on("response",r),f},u.get=function(t,e){var r=u.request(t,e);return r.end(),r},u.ClientRequest=n,u.IncomingMessage=i.IncomingMessage,u.Agent=function(){},u.Agent.defaultMaxSockets=4,u.globalAgent=new u.Agent,u.STATUS_CODES=s,u.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]}).call(this,r(3))},,function(t,e,r){(e=t.exports=r(60)).Stream=e,e.Readable=e,e.Writable=r(65),e.Duplex=r(14),e.Transform=r(67),e.PassThrough=r(117)},function(t,e,r){var n=r(9),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=s),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e,r){"use strict";var n=SyntaxError,i=Function,o=TypeError,s=function(t){try{return i(\'"use strict"; return (\'+t+").constructor;")()}catch(t){}},a=Object.getOwnPropertyDescriptor;if(a)try{a({},"")}catch(t){a=null}var u=function(){throw new o},c=a?function(){try{return u}catch(t){try{return a(arguments,"callee").get}catch(t){return u}}}():u,l=r(140)(),f=r(142)(),h=Object.getPrototypeOf||(f?function(t){return t.__proto__}:null),d={},p="undefined"!=typeof Uint8Array&&h?h(Uint8Array):void 0,y={"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":l&&h?h([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":l&&h?h(h([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&l&&h?h((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&l&&h?h((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":l&&h?h(""[Symbol.iterator]()):void 0,"%Symbol%":l?Symbol:void 0,"%SyntaxError%":n,"%ThrowTypeError%":c,"%TypedArray%":p,"%TypeError%":o,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet};if(h)try{null.error}catch(t){var g=h(h(t));y["%Error.prototype%"]=g}var m={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},b=r(45),v=r(144),w=b.call(Function.call,Array.prototype.concat),x=b.call(Function.apply,Array.prototype.splice),_=b.call(Function.call,String.prototype.replace),S=b.call(Function.call,String.prototype.slice),A=b.call(Function.call,RegExp.prototype.exec),E=/[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g,k=/\\\\(\\\\)?/g,T=function(t){var e=S(t,0,1),r=S(t,-1);if("%"===e&&"%"!==r)throw new n("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new n("invalid intrinsic syntax, expected opening `%`");var i=[];return _(t,E,(function(t,e,r,n){i[i.length]=r?_(n,k,"$1"):e||t})),i},C=function(t,e){var r,i=t;if(v(m,i)&&(i="%"+(r=m[i])[0]+"%"),v(y,i)){var a=y[i];if(a===d&&(a=function t(e){var r;if("%AsyncFunction%"===e)r=s("async function () {}");else if("%GeneratorFunction%"===e)r=s("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=s("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var i=t("%AsyncGenerator%");i&&h&&(r=h(i.prototype))}return y[e]=r,r}(i)),void 0===a&&!e)throw new o("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:i,value:a}}throw new n("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new o("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new o(\'"allowMissing" argument must be a boolean\');if(null===A(/^%?[^%]*%?$/,t))throw new n("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=T(t),i=r.length>0?r[0]:"",s=C("%"+i+"%",e),u=s.name,c=s.value,l=!1,f=s.alias;f&&(i=f[0],x(r,w([0,1],f)));for(var h=1,d=!0;h<r.length;h+=1){var p=r[h],g=S(p,0,1),m=S(p,-1);if((\'"\'===g||"\'"===g||"`"===g||\'"\'===m||"\'"===m||"`"===m)&&g!==m)throw new n("property names with quotes must have matching quotes");if("constructor"!==p&&d||(l=!0),v(y,u="%"+(i+="."+p)+"%"))c=y[u];else if(null!=c){if(!(p in c)){if(!e)throw new o("base intrinsic for "+t+" exists, but the property is not available.");return}if(a&&h+1>=r.length){var b=a(c,p);c=(d=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:c[p]}else d=v(c,p),c=c[p];d&&!l&&(y[u]=c)}}return c}},function(t,e,r){"use strict";var n=r(143);t.exports=Function.prototype.bind||n},function(t,e,r){"use strict";var n=String.prototype.replace,i=/%20/g,o="RFC1738",s="RFC3986";t.exports={default:s,formatters:{RFC1738:function(t){return n.call(t,i,"+")},RFC3986:function(t){return String(t)}},RFC1738:o,RFC3986:s}},function(t,e,r){"use strict";const n=r(5),i=r(11),o=r(48),s=r(8);function a(t,e,r="1"){if(i(t))return"0";let a=t,u=t;for(;"<"===n(u,e);)u=s(u,r),a=o(a,u);return a}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";const{MAX_SAFE_INTEGER_LENGTH:n}=r(30);function i(t,e){if("0"===t||"0"===e)return"0";const r=t.indexOf("."),i=e.indexOf("."),o=(-1===r?t.length:r)+(-1===i?e.length:i),s=(-1===r?0:t.length-1-r)+(-1===i?0:e.length-1-i);if(0===s&&o<n)return(Number(t)*Number(e)).toFixed(0);const a=t.replace(".",""),u=e.replace(".",""),c=a.length,l=u.length,f=[];let h=c;for(;h>=0;){const t=h,e=h-=15,r=a.substring(e,t);f.push([Number(r),r.length])}const d=[],p=[];for(let t=0,e=l-1;e>=0;e--,t++){const r=u[e],n=Number(r);let i=0,o="";const s=f.length-1;f.forEach(([t,e],r)=>{let a=(i+n*t).toString();const u=a.length;if(u>e&&r!==s){const t=-1*e;o=a.slice(t)+o,i=Number(a.slice(0,t))}else{const t=e-u;for(let e=0;e<t;e++)a="0"+a;i=0,o=a+o}}),o+="0".repeat(t),d.push(o),p.push([Array.from(o).map(t=>Number(t)),o.length])}const y=d.length,g=p[p.length-1][1]+y;let m="",b=0;for(let t=0;t<g;t++){let e=b;const r=Math.min(t,y-1);for(let n=0;n<=r;n++){const[r,i]=p[n],o=i-1-t;o>=0&&(e+=r[o])}e>=10?(e=e.toString(),m=e[e.length-1]+m,b=Number(e.slice(0,-1))):(m=e+m,b=0)}if(0===s)m=m.replace(/^0+/,"");else{const t=m.length-s;m=m.substring(0,t)+"."+m.substring(t),m=m.replace(/^0+/,""),m=m.replace(/\\.?0+$/,""),"."===m[0]&&(m="0"+m)}return m}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(6),i=r(155),o=["5","6","7","8","9"];function s(t){if(t.match(/\\.9+$/))return n(i(t),"1");"+"===t[0]&&(t=t.substring(1));const e=t.length;let r="";const s=t[t.length-1];if(o.includes(s)){let n;for(n=e-2;n>=0;n--){const e=t[n];if("."===e||"-"===e)continue;const i=Number(e)+1;if(10!==i){r=i+r;break}r="0"+r}n>0&&(r=t.substring(0,n)+r)}else r=t.substring(0,e-1);return"."===r[r.length-1]&&(r=r.substring(0,r.length-1)),r.indexOf(".")>-1&&(r=r.replace(/0+$/,"")),r}t.exports=s,t.exports.default=s},function(t,e,r){"use strict";function n(t){return"-"===t[0]?"-":"+"}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const n=r(0);function i(t){const e=(t=n(t)).indexOf(".");return-1===e?"0":(t.length-e-1).toString()}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";function n(t){return t.includes("i")}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const n=r(79);function i(){const t=Array.from(arguments),e="object"==typeof t[t.length-1]?t[t.length-1]:void 0,r=Array.isArray(t[0])?t[0]:e?t.slice(0,t.length-1):t;return n(r,e)}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(17);function i(t,e){const r=Number(e);let i=t;for(let e=1;e<r;e++)i=n([i,t]);return i}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(6);function i(t){let e="0";for(let r of t)e=n(e,r);return e}t.exports=i,t.exports.default=i},function(t,e){const r=9007199254740991..toString().length-1;t.exports={MAX_SAFE_INTEGER:9007199254740991,MAX_SAFE_INTEGER_LENGTH:r}},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return m}));var n=r(12),i=r.n(n),o=r(26),s=r(13),a=r(103),u=r(2),c=r(27),l=r(59),f=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const h=i()("threads:master:messages"),d=i()("threads:master:spawn"),p=i()("threads:master:thread-utils"),y=void 0!==t&&t.env.THREADS_WORKER_INIT_TIMEOUT?Number.parseInt(t.env.THREADS_WORKER_INIT_TIMEOUT,10):1e4;function g(t,e,r,n){const i=r.filter(t=>t.type===c.a.internalError).map(t=>t.error);return Object.assign(t,{[u.a]:i,[u.b]:r,[u.c]:n,[u.e]:e})}function m(t,e){return f(this,void 0,void 0,(function*(){d("Initializing new thread");const r=e&&e.timeout?e.timeout:y,n=(yield function(t,e,r){return f(this,void 0,void 0,(function*(){let n;const i=new Promise((t,i)=>{n=setTimeout(()=>i(Error(r)),e)}),o=yield Promise.race([t,i]);return clearTimeout(n),o}))}(function(t){return new Promise((e,r)=>{const n=i=>{var o;h("Message from worker before finishing initialization:",i.data),(o=i.data)&&"init"===o.type?(t.removeEventListener("message",n),e(i.data)):(t=>t&&"uncaughtError"===t.type)(i.data)&&(t.removeEventListener("message",n),r(Object(s.a)(i.data.error)))};t.addEventListener("message",n)})}(t),r,`Timeout: Did not receive an init message from worker after ${r}ms. Make sure the worker calls expose().`)).exposed,{termination:i,terminate:u}=function(t){const[e,r]=Object(a.a)();return{terminate:()=>f(this,void 0,void 0,(function*(){p("Terminating worker"),yield t.terminate(),r()})),termination:e}}(t),m=function(t,e){return new o.a(r=>{const n=t=>{const e={type:c.a.message,data:t.data};r.next(e)},i=t=>{p("Unhandled promise rejection event in thread:",t);const e={type:c.a.internalError,error:Error(t.reason)};r.next(e)};t.addEventListener("message",n),t.addEventListener("unhandledrejection",i),e.then(()=>{const e={type:c.a.termination};t.removeEventListener("message",n),t.removeEventListener("unhandledrejection",i),r.next(e),r.complete()})})}(t,i);if("function"===n.type){return g(Object(l.a)(t),t,m,u)}if("module"===n.type){return g(Object(l.b)(t,n.methods),t,m,u)}{const t=n.type;throw Error("Worker init message states unexpected type of expose(): "+t)}}))}}).call(this,r(7))},function(t,e,r){"use strict";r.d(e,"a",(function(){return g}));var n=r(12),i=r.n(n),o=r(102),s=r(197),a=r(26);function u(t){return Promise.all(t.map(t=>{const e=t=>({status:"fulfilled",value:t}),r=t=>({status:"rejected",reason:t}),n=Promise.resolve(t);try{return n.then(e,r)}catch(t){return Promise.reject(t)}}))}var c,l=r(19);!function(t){t.initialized="initialized",t.taskCanceled="taskCanceled",t.taskCompleted="taskCompleted",t.taskFailed="taskFailed",t.taskQueued="taskQueued",t.taskQueueDrained="taskQueueDrained",t.taskStart="taskStart",t.terminated="terminated"}(c||(c={}));var f=r(24),h=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};let d=1;class p{constructor(t,e){this.eventSubject=new o.a,this.initErrors=[],this.isClosing=!1,this.nextTaskID=1,this.taskQueue=[];const r="number"==typeof e?{size:e}:e||{},{size:n=l.a}=r;this.debug=i()("threads:pool:"+(r.name||String(d++)).replace(/\\W/g," ").trim().replace(/\\s+/g,"-")),this.options=r,this.workers=function(t,e){return function(t){const e=[];for(let r=0;r<t;r++)e.push(r);return e}(e).map(()=>({init:t(),runningTasks:[]}))}(t,n),this.eventObservable=Object(s.a)(a.a.from(this.eventSubject)),Promise.all(this.workers.map(t=>t.init)).then(()=>this.eventSubject.next({type:c.initialized,size:this.workers.length}),t=>{this.debug("Error while initializing pool worker:",t),this.eventSubject.error(t),this.initErrors.push(t)})}findIdlingWorker(){const{concurrency:t=1}=this.options;return this.workers.find(e=>e.runningTasks.length<t)}runPoolTask(t,e){return h(this,void 0,void 0,(function*(){const r=this.workers.indexOf(t)+1;this.debug(`Running task #${e.id} on worker #${r}...`),this.eventSubject.next({type:c.taskStart,taskID:e.id,workerID:r});try{const n=yield e.run(yield t.init);this.debug(`Task #${e.id} completed successfully`),this.eventSubject.next({type:c.taskCompleted,returnValue:n,taskID:e.id,workerID:r})}catch(t){this.debug(`Task #${e.id} failed`),this.eventSubject.next({type:c.taskFailed,taskID:e.id,error:t,workerID:r})}}))}run(t,e){return h(this,void 0,void 0,(function*(){const r=(()=>h(this,void 0,void 0,(function*(){var n;yield(n=0,new Promise(t=>setTimeout(t,n)));try{yield this.runPoolTask(t,e)}finally{t.runningTasks=t.runningTasks.filter(t=>t!==r),this.isClosing||this.scheduleWork()}})))();t.runningTasks.push(r)}))}scheduleWork(){this.debug("Attempt de-queueing a task in order to run it...");const t=this.findIdlingWorker();if(!t)return;const e=this.taskQueue.shift();if(!e)return this.debug("Task queue is empty"),void this.eventSubject.next({type:c.taskQueueDrained});this.run(t,e)}taskCompletion(t){return new Promise((e,r)=>{const n=this.events().subscribe(i=>{i.type===c.taskCompleted&&i.taskID===t?(n.unsubscribe(),e(i.returnValue)):i.type===c.taskFailed&&i.taskID===t?(n.unsubscribe(),r(i.error)):i.type===c.terminated&&(n.unsubscribe(),r(Error("Pool has been terminated before task was run.")))})})}settled(t=!1){return h(this,void 0,void 0,(function*(){const e=()=>{return t=this.workers,e=t=>t.runningTasks,t.reduce((t,r)=>[...t,...e(r)],[]);var t,e},r=[],n=this.eventObservable.subscribe(t=>{t.type===c.taskFailed&&r.push(t.error)});return this.initErrors.length>0?Promise.reject(this.initErrors[0]):t&&0===this.taskQueue.length?(yield u(e()),r):(yield new Promise((t,e)=>{const r=this.eventObservable.subscribe({next(e){e.type===c.taskQueueDrained&&(r.unsubscribe(),t(void 0))},error:e})}),yield u(e()),n.unsubscribe(),r)}))}completed(t=!1){return h(this,void 0,void 0,(function*(){const e=this.settled(t),r=new Promise((t,r)=>{const n=this.eventObservable.subscribe({next(i){i.type===c.taskQueueDrained?(n.unsubscribe(),t(e)):i.type===c.taskFailed&&(n.unsubscribe(),r(i.error))},error:r})}),n=yield Promise.race([e,r]);if(n.length>0)throw n[0]}))}events(){return this.eventObservable}queue(t){const{maxQueuedJobs:e=1/0}=this.options;if(this.isClosing)throw Error("Cannot schedule pool tasks after terminate() has been called.");if(this.initErrors.length>0)throw this.initErrors[0];const r=this.nextTaskID++,n=this.taskCompletion(r);n.catch(t=>{this.debug(`Task #${r} errored:`,t)});const i={id:r,run:t,cancel:()=>{-1!==this.taskQueue.indexOf(i)&&(this.taskQueue=this.taskQueue.filter(t=>t!==i),this.eventSubject.next({type:c.taskCanceled,taskID:i.id}))},then:n.then.bind(n)};if(this.taskQueue.length>=e)throw Error("Maximum number of pool tasks queued. Refusing to queue another one.\\nThis usually happens for one of two reasons: We are either at peak workload right now or some tasks just won\'t finish, thus blocking the pool.");return this.debug(`Queueing task #${i.id}...`),this.taskQueue.push(i),this.eventSubject.next({type:c.taskQueued,taskID:i.id}),this.scheduleWork(),i}terminate(t){return h(this,void 0,void 0,(function*(){this.isClosing=!0,t||(yield this.completed(!0)),this.eventSubject.next({type:c.terminated,remainingQueue:[...this.taskQueue]}),this.eventSubject.complete(),yield Promise.all(this.workers.map(t=>h(this,void 0,void 0,(function*(){return f.a.terminate(yield t.init)}))))}))}}function y(t,e){return new p(t,e)}p.EventType=c,y.EventType=c;const g=y},function(t,e,r){"use strict";r.d(e,"a",(function(){return b})),r.d(e,"b",(function(){return v}));var n=r(12),i=r.n(n),o=r(26),s=r(197),a=r(13);const u=()=>{},c=t=>t,l=t=>Promise.resolve().then(t);function f(t){throw t}class h extends o.a{constructor(t){super(e=>{const r=this,n=Object.assign(Object.assign({},e),{complete(){e.complete(),r.onCompletion()},error(t){e.error(t),r.onError(t)},next(t){e.next(t),r.onNext(t)}});try{return this.initHasRun=!0,t(n)}catch(t){n.error(t)}}),this.initHasRun=!1,this.fulfillmentCallbacks=[],this.rejectionCallbacks=[],this.firstValueSet=!1,this.state="pending"}onNext(t){this.firstValueSet||(this.firstValue=t,this.firstValueSet=!0)}onError(t){this.state="rejected",this.rejection=t;for(const e of this.rejectionCallbacks)l(()=>e(t))}onCompletion(){this.state="fulfilled";for(const t of this.fulfillmentCallbacks)l(()=>t(this.firstValue))}then(t,e){const r=t||c,n=e||f;let i=!1;return new Promise((t,e)=>{const o=r=>{if(!i){i=!0;try{t(n(r))}catch(t){e(t)}}};return this.initHasRun||this.subscribe({error:o}),"fulfilled"===this.state?t(r(this.firstValue)):"rejected"===this.state?(i=!0,t(n(this.rejection))):(this.fulfillmentCallbacks.push(e=>{try{t(r(e))}catch(t){o(t)}}),void this.rejectionCallbacks.push(o))})}catch(t){return this.then(void 0,t)}finally(t){const e=t||u;return this.then(t=>(e(),t),()=>e())}static from(t){return function(t){return t&&"function"==typeof t.then}(t)?new h(e=>{t.then(t=>{e.next(t),e.complete()},t=>{e.error(t)})}):super.from(t)}}var d=r(104),p=r(20);const y=i()("threads:master:messages");let g=1;function m(t,e){return new o.a(r=>{let n;const i=o=>{var s;if(y("Message from worker:",o.data),o.data&&o.data.uid===e)if((s=o.data)&&s.type===p.b.running)n=o.data.resultType;else if((t=>t&&t.type===p.b.result)(o.data))"promise"===n?(void 0!==o.data.payload&&r.next(Object(a.a)(o.data.payload)),r.complete(),t.removeEventListener("message",i)):(o.data.payload&&r.next(Object(a.a)(o.data.payload)),o.data.complete&&(r.complete(),t.removeEventListener("message",i)));else if((t=>t&&t.type===p.b.error)(o.data)){const e=Object(a.a)(o.data.error);r.error(e),t.removeEventListener("message",i)}};return t.addEventListener("message",i),()=>{if("observable"===n||!n){const r={type:p.a.cancel,uid:e};t.postMessage(r)}t.removeEventListener("message",i)}})}function b(t,e){return(...r)=>{const n=g++,{args:i,transferables:o}=function(t){if(0===t.length)return{args:[],transferables:[]};const e=[],r=[];for(const n of t)Object(d.a)(n)?(e.push(Object(a.b)(n.send)),r.push(...n.transferables)):e.push(Object(a.b)(n));return{args:e,transferables:0===r.length?r:(n=r,Array.from(new Set(n)))};var n}(r),u={type:p.a.run,uid:n,method:e,args:i};y("Sending command to run function to worker:",u);try{t.postMessage(u,o)}catch(t){return h.from(Promise.reject(t))}return h.from(Object(s.a)(m(t,n)))}}function v(t,e){const r={};for(const n of e)r[n]=b(t,n);return r}},function(t,e,r){"use strict";(function(e,n){var i=r(28);t.exports=v;var o,s=r(61);v.ReadableState=b;r(62).EventEmitter;var a=function(t,e){return t.listeners(e).length},u=r(63),c=r(43).Buffer,l=(void 0!==e?e:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){};var f=Object.create(r(21));f.inherits=r(10);var h=r(110),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,y=r(111),g=r(64);f.inherits(v,u);var m=["error","close","destroy","pause","resume"];function b(t,e){t=t||{};var n=e instanceof(o=o||r(14));this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,s=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new y,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=r(66).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function v(t){if(o=o||r(14),!(this instanceof v))return new v(t);this._readableState=new b(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function w(t,e,r,n,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,S(t)}(t,s)):(i||(o=function(t,e){var r;n=e,c.isBuffer(n)||n instanceof l||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),n?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):x(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?x(t,s,e,!1):E(t,s)):x(t,s,e,!1))):n||(s.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function x(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&S(t)),E(t,e)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),v.prototype.destroy=g.destroy,v.prototype._undestroy=g.undestroy,v.prototype._destroy=function(t,e){this.push(null),e(t)},v.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=c.from(t,e),e=""),r=!0),w(this,t,e,!1,r)},v.prototype.unshift=function(t){return w(this,t,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(t){return p||(p=r(66).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};function _(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=8388608?t=8388608:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function S(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(A,t):A(t))}function A(t){d("emit readable"),t.emit("readable"),O(t)}function E(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(k,t,e))}function k(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function T(t){d("readable nexttick read 0"),t.read(0)}function C(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),O(t),e.flowing&&!e.reading&&t.read(0)}function O(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function I(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;t-=i.length;for(;r=r.next;){var o=r.data,s=t>o.length?o.length:t;if(s===o.length?i+=o:i+=o.slice(0,t),0===(t-=s)){s===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(s));break}++n}return e.length-=n,i}(t,e):function(t,e){var r=c.allocUnsafe(t),n=e.head,i=1;n.data.copy(r),t-=n.data.length;for(;n=n.next;){var o=n.data,s=t>o.length?o.length:t;if(o.copy(r,r.length-t,0,s),0===(t-=s)){s===o.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(s));break}++i}return e.length-=i,r}(t,e);return n}(t,e.buffer,e.decoder),r);var r}function P(t){var e=t._readableState;if(e.length>0)throw new Error(\'"endReadable()" called on non-empty stream\');e.endEmitted||(e.ended=!0,i.nextTick(R,e,t))}function R(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function j(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}v.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?P(this):S(this),null;if(0===(t=_(t,e))&&e.ended)return 0===e.length&&P(this),null;var n,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=_(r,e))),null===(n=t>0?I(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&P(this)),null!==n&&this.emit("data",n),n},v.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(t,e){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==n.stdout&&t!==n.stderr?l:v;function c(e,n){d("onunpipe"),e===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,d("cleanup"),t.removeListener("close",m),t.removeListener("finish",b),t.removeListener("drain",f),t.removeListener("error",g),t.removeListener("unpipe",c),r.removeListener("end",l),r.removeListener("end",v),r.removeListener("data",y),h=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}function l(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):r.once("end",u),t.on("unpipe",c);var f=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,O(t))}}(r);t.on("drain",f);var h=!1;var p=!1;function y(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==j(o.pipes,t))&&!h&&(d("false write response, pause",o.awaitDrain),o.awaitDrain++,p=!0),r.pause())}function g(e){d("onerror",e),v(),t.removeListener("error",g),0===a(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",b),v()}function b(){d("onfinish"),t.removeListener("close",m),v()}function v(){d("unpipe"),r.unpipe(t)}return r.on("data",y),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?s(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",g),t.once("close",m),t.once("finish",b),t.emit("pipe",r),o.flowing||(d("pipe resume"),r.resume()),t},v.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=j(e.pipes,t);return-1===s||(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},v.prototype.on=function(t,e){var r=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&S(this):i.nextTick(T,this))}return r},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(C,t,e))}(this,t)),this},v.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(d("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){(d("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<m.length;o++)t.on(m[o],this.emit.bind(this,m[o]));return this._read=function(e){d("wrapped _read",e),n&&(n=!1,t.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=I}).call(this,r(3),r(7))},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}t.exports=a,t.exports.once=function(t,e){return new Promise((function(r,n){function i(r){t.removeListener(e,o),n(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",i),r([].slice.call(arguments))}m(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&m(t,"error",e,r)}(t,i,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function c(t){if("function"!=typeof t)throw new TypeError(\'The "listener" argument must be of type Function. Received type \'+typeof t)}function l(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function f(t,e,r,n){var i,o,s,a;if(c(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),s=o[e]),void 0===s)s=o[e]=r,++t._eventsCount;else if("function"==typeof s?s=o[e]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=l(t))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return t}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function p(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):g(i,i.length)}function y(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}function m(t,e,r,n){if("function"==typeof t.on)n.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError(\'The "emitter" argument must be of type EventEmitter. Received type \'+typeof t);t.addEventListener(e,(function i(o){n.once&&t.removeEventListener(e,i),r(o)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError(\'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received \'+t+".");u=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError(\'The value of "n" is out of range. It must be a non-negative number. Received \'+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var c=u.length,l=g(u,c);for(r=0;r<c;++r)o(l[r],this,e)}return!0},a.prototype.addListener=function(t,e){return f(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return f(this,t,e,!0)},a.prototype.once=function(t,e){return c(e),this.on(t,d(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){return c(e),this.prependListener(t,d(this,t,e)),this},a.prototype.removeListener=function(t,e){var r,n,i,o,s;if(c(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,s||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},a.prototype.listeners=function(t){return p(this,t,!0)},a.prototype.rawListeners=function(t){return p(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):y.call(t,e)},a.prototype.listenerCount=y,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(t,e,r){t.exports=r(62).EventEmitter},function(t,e,r){"use strict";var n=r(28);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(i,this,t)):n.nextTick(i,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?r._writableState?r._writableState.errorEmitted||(r._writableState.errorEmitted=!0,n.nextTick(i,r,t)):n.nextTick(i,r,t):e&&e(t)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,r){"use strict";(function(e,n,i){var o=r(28);function s(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;t.entry=null;for(;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree.next=t}(e,t)}}t.exports=b;var a,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?n:o.nextTick;b.WritableState=m;var c=Object.create(r(21));c.inherits=r(10);var l={deprecate:r(115)},f=r(63),h=r(43).Buffer,d=(void 0!==i?i:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){};var p,y=r(64);function g(){}function m(t,e){a=a||r(14),t=t||{};var n=e instanceof a;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,c=t.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(c||0===c)?c:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===t.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(o.nextTick(i,n),o.nextTick(A,t,e),t._writableState.errorEmitted=!0,t.emit("error",n)):(i(n),t._writableState.errorEmitted=!0,t.emit("error",n),A(t,e))}(t,r,n,e,i);else{var s=_(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||x(t,r),n?u(w,t,r,s,i):w(t,r,s,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function b(t){if(a=a||r(14),!(p.call(b,this)||this instanceof a))return new b(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),f.call(this)}function v(t,e,r,n,i,o,s){e.writelen=n,e.writecb=s,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function w(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),A(t,e)}function x(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),o=e.corkedRequestsFree;o.entry=r;for(var a=0,u=!0;r;)i[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;i.allBuffers=u,v(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new s(e),e.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,f=r.callback;if(v(t,e,!1,e.objectMode?1:c.length,c,l,f),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function _(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function S(t,e){t._final((function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),A(t,e)}))}function A(t,e){var r=_(e);return r&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(S,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}c.inherits(b,f),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:l.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(b,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===b&&(t&&t._writableState instanceof m)}})):p=function(t){return t instanceof this},b.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},b.prototype.write=function(t,e,r){var n,i=this._writableState,s=!1,a=!i.objectMode&&(n=t,h.isBuffer(n)||n instanceof d);return a&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(r=e,e=null),a?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof r&&(r=g),i.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),o.nextTick(e,r)}(this,r):(a||function(t,e,r,n){var i=!0,s=!1;return null===r?s=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(t.emit("error",s),o.nextTick(n,s),i=!1),i}(this,i,t,r))&&(i.pendingcb++,s=function(t,e,r,n,i,o){if(!r){var s=function(t,e,r){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,r));return e}(e,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=e.objectMode?1:n.length;e.length+=a;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else v(t,e,!1,a,n,i,o);return u}(this,i,a,t,e,r)),s},b.prototype.cork=function(){this._writableState.corked++},b.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||x(this,t))},b.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(b.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),b.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},b.prototype._writev=null,b.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||function(t,e,r){e.ending=!0,A(t,e),r&&(e.finished?o.nextTick(r):t.once("finish",r));e.ended=!0,t.writable=!1}(this,n,r)},Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),b.prototype.destroy=y.destroy,b.prototype._undestroy=y.undestroy,b.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,r(7),r(113).setImmediate,r(3))},function(t,e,r){"use strict";var n=r(116).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=l,this.end=f,e=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:-1}function a(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�".repeat(r);if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�".repeat(r+1);if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�".repeat(r+2)}}(this,t,e);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function l(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�".repeat(this.lastTotal-this.lastNeed):e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=s(e[n]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--n<r)return 0;if((i=s(e[n]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--n<r)return 0;if((i=s(e[n]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,r){"use strict";t.exports=s;var n=r(14),i=Object.create(r(21));function o(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function s(t){if(!(this instanceof s))return new s(t);n.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",a)}function a(){var t=this;"function"==typeof this._flush?this._flush((function(e,r){u(t,e,r)})):u(this,null,null)}function u(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=r(10),i.inherits(s,n),s.prototype.push=function(t,e){return this._transformState.needTransform=!1,n.prototype.push.call(this,t,e)},s.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},s.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},s.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},s.prototype._destroy=function(t,e){var r=this;n.prototype._destroy.call(this,t,(function(t){e(t),r.emit("close")}))}},function(t,e,r){"use strict";(function(t){var n=r(194),i=r(58),o=r(57);const s="undefined"!=typeof navigator?navigator.hardwareConcurrency:null;e.a=class{constructor(e=s){const r=new n.a(t);this.pool=Object(i.a)(()=>Object(o.a)(r),e)}async decode(t,e){return new Promise((r,n)=>{this.pool.queue(async i=>{try{const n=await i(t,e);r(n)}catch(t){n(t)}})})}destroy(){this.pool.terminate(!0)}}}).call(this,r(128))},function(t,e,r){(function(t){e.fetch=a(t.fetch)&&a(t.ReadableStream),e.writableStream=a(t.WritableStream),e.abortController=a(t.AbortController),e.blobConstructor=!1;try{new Blob([new ArrayBuffer(1)]),e.blobConstructor=!0}catch(t){}var r;function n(){if(void 0!==r)return r;if(t.XMLHttpRequest){r=new t.XMLHttpRequest;try{r.open("GET",t.XDomainRequest?"/":"https://example.com")}catch(t){r=null}}else r=null;return r}function i(t){var e=n();if(!e)return!1;try{return e.responseType=t,e.responseType===t}catch(t){}return!1}var o=void 0!==t.ArrayBuffer,s=o&&a(t.ArrayBuffer.prototype.slice);function a(t){return"function"==typeof t}e.arraybuffer=e.fetch||o&&i("arraybuffer"),e.msstream=!e.fetch&&s&&i("ms-stream"),e.mozchunkedarraybuffer=!e.fetch&&o&&i("moz-chunked-arraybuffer"),e.overrideMimeType=e.fetch||!!n()&&a(n().overrideMimeType),e.vbArray=a(t.VBArray),r=null}).call(this,r(3))},function(t,e,r){(function(t,n,i){var o=r(69),s=r(10),a=r(42),u=e.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},c=e.IncomingMessage=function(e,r,s,u){var c=this;if(a.Readable.call(c),c._mode=s,c.headers={},c.rawHeaders=[],c.trailers={},c.rawTrailers=[],c.on("end",(function(){t.nextTick((function(){c.emit("close")}))})),"fetch"===s){if(c._fetchResponse=r,c.url=r.url,c.statusCode=r.status,c.statusMessage=r.statusText,r.headers.forEach((function(t,e){c.headers[e.toLowerCase()]=t,c.rawHeaders.push(e,t)})),o.writableStream){var l=new WritableStream({write:function(t){return new Promise((function(e,r){c._destroyed?r():c.push(new n(t))?e():c._resumeFetch=e}))},close:function(){i.clearTimeout(u),c._destroyed||c.push(null)},abort:function(t){c._destroyed||c.emit("error",t)}});try{return void r.body.pipeTo(l).catch((function(t){i.clearTimeout(u),c._destroyed||c.emit("error",t)}))}catch(t){}}var f=r.body.getReader();!function t(){f.read().then((function(e){if(!c._destroyed){if(e.done)return i.clearTimeout(u),void c.push(null);c.push(new n(e.value)),t()}})).catch((function(t){i.clearTimeout(u),c._destroyed||c.emit("error",t)}))}()}else{if(c._xhr=e,c._pos=0,c.url=e.responseURL,c.statusCode=e.status,c.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\\r?\\n/).forEach((function(t){var e=t.match(/^([^:]+):\\s*(.*)/);if(e){var r=e[1].toLowerCase();"set-cookie"===r?(void 0===c.headers[r]&&(c.headers[r]=[]),c.headers[r].push(e[2])):void 0!==c.headers[r]?c.headers[r]+=", "+e[2]:c.headers[r]=e[2],c.rawHeaders.push(e[1],e[2])}})),c._charset="x-user-defined",!o.overrideMimeType){var h=c.rawHeaders["mime-type"];if(h){var d=h.match(/;\\s*charset=([^;])(;|$)/);d&&(c._charset=d[1].toLowerCase())}c._charset||(c._charset="utf-8")}}};s(c,a.Readable),c.prototype._read=function(){var t=this._resumeFetch;t&&(this._resumeFetch=null,t())},c.prototype._onXHRProgress=function(){var t=this,e=t._xhr,r=null;switch(t._mode){case"text:vbarray":if(e.readyState!==u.DONE)break;try{r=new i.VBArray(e.responseBody).toArray()}catch(t){}if(null!==r){t.push(new n(r));break}case"text":try{r=e.responseText}catch(e){t._mode="text:vbarray";break}if(r.length>t._pos){var o=r.substr(t._pos);if("x-user-defined"===t._charset){for(var s=new n(o.length),a=0;a<o.length;a++)s[a]=255&o.charCodeAt(a);t.push(s)}else t.push(o,t._charset);t._pos=r.length}break;case"arraybuffer":if(e.readyState!==u.DONE||!e.response)break;r=e.response,t.push(new n(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=e.response,e.readyState!==u.LOADING||!r)break;t.push(new n(new Uint8Array(r)));break;case"ms-stream":if(r=e.response,e.readyState!==u.LOADING)break;var c=new i.MSStreamReader;c.onprogress=function(){c.result.byteLength>t._pos&&(t.push(new n(new Uint8Array(c.result.slice(t._pos)))),t._pos=c.result.byteLength)},c.onload=function(){t.push(null)},c.readAsArrayBuffer(r)}t._xhr.readyState===u.DONE&&"ms-stream"!==t._mode&&t.push(null)}}).call(this,r(7),r(9).Buffer,r(3))},function(t,e,r){"use strict";var n=r(46),i=Object.prototype.hasOwnProperty,o=Array.isArray,s=function(){for(var t=[],e=0;e<256;++e)t.push("%"+((e<16?"0":"")+e.toString(16)).toUpperCase());return t}(),a=function(t,e){for(var r=e&&e.plainObjects?Object.create(null):{},n=0;n<t.length;++n)void 0!==t[n]&&(r[n]=t[n]);return r};t.exports={arrayToObject:a,assign:function(t,e){return Object.keys(e).reduce((function(t,r){return t[r]=e[r],t}),t)},combine:function(t,e){return[].concat(t,e)},compact:function(t){for(var e=[{obj:{o:t},prop:"o"}],r=[],n=0;n<e.length;++n)for(var i=e[n],s=i.obj[i.prop],a=Object.keys(s),u=0;u<a.length;++u){var c=a[u],l=s[c];"object"==typeof l&&null!==l&&-1===r.indexOf(l)&&(e.push({obj:s,prop:c}),r.push(l))}return function(t){for(;t.length>1;){var e=t.pop(),r=e.obj[e.prop];if(o(r)){for(var n=[],i=0;i<r.length;++i)void 0!==r[i]&&n.push(r[i]);e.obj[e.prop]=n}}}(e),t},decode:function(t,e,r){var n=t.replace(/\\+/g," ");if("iso-8859-1"===r)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(t){return n}},encode:function(t,e,r,i,o){if(0===t.length)return t;var a=t;if("symbol"==typeof t?a=Symbol.prototype.toString.call(t):"string"!=typeof t&&(a=String(t)),"iso-8859-1"===r)return escape(a).replace(/%u[0-9a-f]{4}/gi,(function(t){return"%26%23"+parseInt(t.slice(2),16)+"%3B"}));for(var u="",c=0;c<a.length;++c){var l=a.charCodeAt(c);45===l||46===l||95===l||126===l||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122||o===n.RFC1738&&(40===l||41===l)?u+=a.charAt(c):l<128?u+=s[l]:l<2048?u+=s[192|l>>6]+s[128|63&l]:l<55296||l>=57344?u+=s[224|l>>12]+s[128|l>>6&63]+s[128|63&l]:(c+=1,l=65536+((1023&l)<<10|1023&a.charCodeAt(c)),u+=s[240|l>>18]+s[128|l>>12&63]+s[128|l>>6&63]+s[128|63&l])}return u},isBuffer:function(t){return!(!t||"object"!=typeof t)&&!!(t.constructor&&t.constructor.isBuffer&&t.constructor.isBuffer(t))},isRegExp:function(t){return"[object RegExp]"===Object.prototype.toString.call(t)},maybeMap:function(t,e){if(o(t)){for(var r=[],n=0;n<t.length;n+=1)r.push(e(t[n]));return r}return e(t)},merge:function t(e,r,n){if(!r)return e;if("object"!=typeof r){if(o(e))e.push(r);else{if(!e||"object"!=typeof e)return[e,r];(n&&(n.plainObjects||n.allowPrototypes)||!i.call(Object.prototype,r))&&(e[r]=!0)}return e}if(!e||"object"!=typeof e)return[e].concat(r);var s=e;return o(e)&&!o(r)&&(s=a(e,n)),o(e)&&o(r)?(r.forEach((function(r,o){if(i.call(e,o)){var s=e[o];s&&"object"==typeof s&&r&&"object"==typeof r?e[o]=t(s,r,n):e.push(r)}else e[o]=r})),e):Object.keys(r).reduce((function(e,o){var s=r[o];return i.call(e,o)?e[o]=t(e[o],s,n):e[o]=s,e}),s)}}},function(t,e,r){function n(t){try{t[Symbol.iterator]=function(){return this}}catch(t){}}function i(t){t["@@iterator"]=function(){return this}}function o(t){const e={next:t};return n(e),i(e),e}function s(t){try{return t.constructor.name.endsWith("Array")}catch{return!1}}function a(t){try{return"function"==typeof t.next}catch{return!1}}function u(t){try{return"@@iterator"in t}catch{return!1}}function c(t){try{return Symbol.iterator in t.constructor.prototype}catch{return!1}}function l(t){try{return Symbol.iterator in t&&"function"==typeof t.next&&!1===t.propertyIsEnumerable("next")}catch{return!1}}function f(t){const e=t["@@iterator"];return a(e)?e:"function"==typeof e?e():void 0}function h(t){let e=0,r=t.length;return o(()=>e++<r?{value:t[e],done:!1}:{done:!0})}function d(t){if(l(t))return t;if(c(t))return t[Symbol.iterator]();if(a(t))return o(t.next);if(u(t))return f(t);if("string"==typeof t||s(t))return h(t);throw"[iter-fun] unable to determine iterator"}t.exports={addSymbolIterator:n,addSymbolIteratorFallback:i,isIterator:l,isArray:s,hasNext:a,hasSymbolIterator:c,hasIterator:u,getIterator:f,createIterator:h,getOrCreateIterator:d,wrapNextFunction:o,zip:function(t){return t=t.map(d),o((function(){const e=t.map(t=>t.next());return e.every(({done:t})=>t)?{done:!0}:{done:!1,value:e.map(({value:t})=>t)}}))}}},function(t,e,r){"use strict";function n(t){"+"===t[0]&&(t=t.substring(1));const e="-"===t[0]?"-":"";"-"===e&&(t=t.substring(1));const r=t.indexOf("e");if(-1===r)return e+t;let n=t.indexOf(".");-1===n&&(n=r);const i=Number(t.substring(r+1)),o=t.substring(0,r).replace(".",""),s=n+i,a=o.length;if(s>=a){const t=s-a;let r=o;for(let e=0;e<t;e++)r+="0";return e+r}if(s<0){let t="0.";for(let e=0;e>s;e--)t+="0";return t+=o,e+t}return e+o.substring(0,s)+"."+o.substring(s)}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";t.exports={MAX_SAFE_INTEGER:9007199254740991}},function(t,e,r){"use strict";const n=r(47);function i(t){return"0"===t?"1":n("1",t)}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(8),s=r(22);function a(t){if(-1===(t=i(t)).indexOf("."))return t;const e=s(t);return t=n(t).split(".")[0],"+"===e?o(t,"1"):"-"===e?"0"===t||""===t?"0":"-"+t:void 0}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";const n=r(51);function i(t){const e=n(t);return[t.replace(/\\./g,"").replace(/^0/,""),1+"0".repeat(e)]}t.exports=i,t.exports.default=i},function(t,e,r){const n=r(0),i=r(16);function o(t){if(t=n(t),!i(t))throw new Error("can\'t call is_odd on decimal");return["1","3","5","7","9"].includes(t.charAt(t.length-1))}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(52),i=r(15),o=r(78),s=r(11),a=r(17),u=r(50);function c(t,{max_decimal_digits:e,infinity_times_zero:r="NaN"}={}){const c=t.some(t=>i(t)),l=t.some(t=>s(t));if(c&&l)return r;if(c){return t.filter(t=>"-"===u(t)).length%2==0?"Infinity":"-Infinity"}if(l)return"0";const f=o(t.filter(t=>n(t)).length.toString());let h=a(t.map(t=>t.replace(/i$/,"")),{max_decimal_digits:e});return f&&(h+="i"),h}t.exports=c,t.exports.default=c},function(t,e,r){"use strict";const n=r(0);function i(t){return"-"===(t=n(t))[0]}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(1),i=r(160),o=r(161);function s(t,{max_decimal_digits:e=100,fraction:r=!1}={}){if(i(t)){const[i,s]=o(t);return r?s+"/"+i:n(s,i,{max_decimal_digits:e})}return r?"1/"+t:n("1",t,{max_decimal_digits:e})}t.exports=s,t.exports.default=s},function(t,e,r){"use strict";const n=r(0),i=r(16);function o(t){if(t=n(t),!i(t))throw new Error("can\'t call is_even on decimal");return["0","2","4","6","8"].includes(t.charAt(t.length-1))}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(76),i=r(84),o=r(1);function s(t,e){const r=i(t);return"0"===r?"0":n(o(r,e,{max_decimal_digits:1}))}t.exports=s,t.exports.default=s},function(t,e,r){"use strict";const n=r(4),i=r(0);function o(t){const e=(t=n(i(t))).indexOf(".");return(-1===e?t.length:e).toString()}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(1),i=r(82),o=r(86),s=r(87);function a(t,e){const r=s("2",o(["1000",e,e]));for(;t.endsWith("0")&&e.endsWith("0");)t=t.substring(0,t.length-1),e=e.substring(0,e.length-1);for(;i(t)&&i(e);)t=n(t,"2"),e=n(e,"2");let a=!0;for(;a;){a=!1;for(let i=0;i<r.length;i++){const o=r[i],s=o.length+1,u=n(t,o,{ellipsis:!0,max_decimal_digits:s});if(-1===u.indexOf(".")){const r=n(e,o,{ellipsis:!0,max_decimal_digits:s});if(-1===r.indexOf(".")){t=u,e=r,a=!0;break}}}}return[t,e]}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";const n=r(0),i=r(34);function o(t){"string"==typeof t&&(t=Array.prototype.slice.call(arguments));let e=n(t[0]);const r=t.length;for(let n=1;n<r;n++){const r=t[n];"<"===i(r,e)&&(e=r)}return e}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(5),i=r(1),o=r(16),s=r(8);function a(t="0",e="100"){const r=["2","3","5","7","11"].filter(r=>"<"!==n(r,t)&&">"!==n(r,e));let a="13";for(;">"!==n(a,e);)/^\\d+5/.test(a)||/^(\\d)\\1+/.test(a)||["9","7","3"].every(t=>!o(i(a,t)))&&r.push(a),a=s(a,"2");return r}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";const n=r(6),i=r(1);function o({max_decimal_digits:t=100,steps:e=100}={}){let r="1",o="1";for(let s=1;s<e;s++)o=i(o,s.toString(),{max_decimal_digits:t}),r=n(r,o);return r}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(0),i=r(90),o=r(91),s=r(11),a=r(88),u=r(35);function c(t,{max_decimal_digits:e=100}={}){const r=a({max_decimal_digits:2*e});return i(t)?"0":o(t)?"Infinity":s(t)?"1":(t=n(t),u(r,t,{max_decimal_digits:e}))}t.exports=c,t.exports.default=c},function(t,e,r){"use strict";function n(t){return!!t.match(/^-inf(inity)?$/i)}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";function n(t){return!!t.match(/^\\+?inf(inity)?$/i)}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const n=r(37);function i(t,e){return n(t,"2",e)}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";function n(t){const e=t.indexOf(".");return-1===e?t:t.substring(0,e)}t.exports=n,t.exports.default=n},function(t,e,r){const n=r(95),i=r(180);function o(t,e,{precise:r=!1}={precise:!1}){return r?i(n(t.toString(),e.toString()),"2"):(t+e)/2}t.exports=o,t.exports.default=o},function(t,e,r){const n=r(38),i=r(18),o=r(96),s=r(97);function a(t,e){t=i(t),e=i(e);const r="-"!==t[0],a="-"!==e[0];if(r&&a)return o(t,e);if(!r&&!a)return"-"+o(t.substring(1),e.substring(1));if(!r&&a)switch(t=t.substring(1),n(t,e)){case"=":return"0";case"<":return s(e,t);case">":return"-"+s(t,e)}else if(r&&!a)switch(e=e.substring(1),n(t,e)){case"=":return"0";case"<":return"-"+s(e,t);case">":return s(t,e)}}t.exports=a,t.exports.default=a},function(t,e,r){const{MAX_SAFE_INTEGER_LENGTH:n}=r(56);t.exports=function(t,e){const r=t.length,i=e.length,o=t.indexOf("."),s=e.indexOf("."),a=-1===o?r:o,u=-1===s?i:s;if(-1===o&&-1===s&&r<n&&i<n)return(Number(t)+Number(e)).toFixed();const c=a-u;let l=Math.max(a,u),f=Math.max(r-a-1,i-u-1),h=c<0?-1*c:0,d=c<=0?0:c,p=l+1+f-1,y="",g=0,m=p;if(f>0){for(;m>p-f;){const r=t[m-h]||"0",n=e[m-d]||"0";let i=Number(r)+Number(n)+g;i>=10?(i-=10,g=1):g=0,""===y&&0===i||(y=i+y),m--}y&&(y="."+y),m--}if(l>0)for(;m>=0;){const r=t[m-h]||"0",n=e[m-d]||"0";let i=Number(r)+Number(n)+g;i>=10?(i-=10,g=1):g=0,y=i+y,m--}return 1===g&&(y=g+y),"."===y[0]&&(y="0"+y),y}},function(t,e,r){const{MAX_SAFE_INTEGER_LENGTH:n}=r(56);t.exports=function(t,e){const r=t.length,i=e.length,o=t.indexOf("."),s=e.indexOf("."),a=-1===o?r:o,u=-1===s?i:s;if(-1===o&&-1===s&&r<n&&i<n)return(Number(t)-Number(e)).toFixed();const c=a-u;let l=Math.max(a,u),f=Math.max(r-a-1,i-u-1),h=c<0?-1*c:0,d=c<=0?0:c,p=l+1+f-1,y="",g=0,m=p;if(f>0){for(;m>p-f;){let r=t[m-h]||"0",n=e[m-d]||"0";r-=g,g=0;let i=r-n;if(i<0)for(;i<0;)g++,i+=10;else g&&g--;""===y&&0===i||(y=i+y),m--}""!==y&&(y="."+y),m--}if(l>0){for(;m>0;){let r=t[m-h]||"0",n=e[m-d]||"0";r-=g,g=0;let i=r-n;if(i<0)for(;i<0;)g++,i+=10;else g&&g--;y=i+y,m--}const r=t[0-h]||"0",n=e[0-d]||"0";let i=Number(r)-(g>0?1:0)-Number(n);0!==i&&(y=i+y),y=y.replace(/^0+/,"")}return"."===y[0]&&(y="0"+y),y}},function(t,e,r){const n=r(18);function i(t){return"-"===(t=n(t))[0]?t.substring(1):t}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(i)throw o}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function(t,e){return new Promise((function(r,o){try{e&&console.log("starting parseData with",t),e&&console.log("\\tGeoTIFF:","undefined"==typeof GeoTIFF?"undefined":i(GeoTIFF));var u={},c=void 0,h=void 0;if("object"===t.rasterType)u.values=t.data,u.height=c=t.metadata.height||u.values[0].length,u.width=h=t.metadata.width||u.values[0][0].length,u.pixelHeight=t.metadata.pixelHeight,u.pixelWidth=t.metadata.pixelWidth,u.projection=t.metadata.projection,u.xmin=t.metadata.xmin,u.ymax=t.metadata.ymax,u.noDataValue=t.metadata.noDataValue,u.numberOfRasters=u.values.length,u.xmax=u.xmin+u.width*u.pixelWidth,u.ymin=u.ymax-u.height*u.pixelHeight,u._data=null,r(f(u));else if("geotiff"===t.rasterType){u._data=t.data;var d=s.fromArrayBuffer;"url"===t.sourceType?d=s.fromUrl:"Blob"===t.sourceType&&(d=s.fromBlob),e&&console.log("data.rasterType is geotiff"),r(d(t.data).then((function(r){return e&&console.log("geotiff:",r),r.getImage().then((function(r){try{e&&console.log("image:",r);var i=r.fileDirectory,s=r.getGeoKeys()||{},d=s.GeographicTypeGeoKey,p=s.ProjectedCSTypeGeoKey;u.projection=p||d||t.metadata.projection,e&&console.log("projection:",u.projection),u.height=c=r.getHeight(),e&&console.log("result.height:",u.height),u.width=h=r.getWidth(),e&&console.log("result.width:",u.width);var y=r.getResolution(),g=n(y,2),m=g[0],b=g[1];u.pixelHeight=Math.abs(b),u.pixelWidth=Math.abs(m);var v=r.getOrigin(),w=n(v,2),x=w[0],_=w[1];return u.xmin=x,u.xmax=u.xmin+h*u.pixelWidth,u.ymax=_,u.ymin=u.ymax-c*u.pixelHeight,u.noDataValue=i.GDAL_NODATA?parseFloat(i.GDAL_NODATA):null,u.numberOfRasters=i.SamplesPerPixel,i.ColorMap&&(u.palette=(0,a.getPalette)(r)),"url"!==t.sourceType?r.readRasters().then((function(t){return u.values=t.map((function(t){return(0,l.unflatten)(t,{height:c,width:h})})),f(u)})):u}catch(t){o(t),console.error("[georaster] error parsing georaster:",t)}}))})))}}catch(t){o(t),console.error("[georaster] error parsing georaster:",t)}}))};var o,s=r(193),a=r(150),u=r(151),c=(o=u)&&o.__esModule?o:{default:o},l=r(192);function f(t){var e=(0,c.default)(t.values,{height:t.height,layout:"[band][row][column]",noData:t.noDataValue,precise:!1,stats:["max","min","range"],width:t.width});return t.maxs=e.bands.map((function(t){return t.max})),t.mins=e.bands.map((function(t){return t.min})),t.ranges=e.bands.map((function(t){return t.range})),t}},function(t,e,r){function n(t,e){"use strict";var r=(e=e||{}).pos||0,i="<".charCodeAt(0),o=">".charCodeAt(0),s="-".charCodeAt(0),a="/".charCodeAt(0),u="!".charCodeAt(0),c="\'".charCodeAt(0),l=\'"\'.charCodeAt(0);function f(){for(var e=[];t[r];)if(t.charCodeAt(r)==i){if(t.charCodeAt(r+1)===a)return(r=t.indexOf(">",r))+1&&(r+=1),e;if(t.charCodeAt(r+1)===u){if(t.charCodeAt(r+2)==s){for(;-1!==r&&(t.charCodeAt(r)!==o||t.charCodeAt(r-1)!=s||t.charCodeAt(r-2)!=s||-1==r);)r=t.indexOf(">",r+1);-1===r&&(r=t.length)}else for(r+=2;t.charCodeAt(r)!==o&&t[r];)r++;r++;continue}var n=y();e.push(n)}else{var c=h();c.trim().length>0&&e.push(c),r++}return e}function h(){var e=r;return-2===(r=t.indexOf("<",r)-1)&&(r=t.length),t.slice(e,r+1)}function d(){for(var e=r;-1==="\\n\\t>/= ".indexOf(t[r])&&t[r];)r++;return t.slice(e,r)}var p=e.noChildNodes||["img","br","input","meta","link"];function y(){r++;const e=d(),n={};let i=[];for(;t.charCodeAt(r)!==o&&t[r];){var s=t.charCodeAt(r);if(s>64&&s<91||s>96&&s<123){for(var u=d(),h=t.charCodeAt(r);h&&h!==c&&h!==l&&!(h>64&&h<91||h>96&&h<123)&&h!==o;)r++,h=t.charCodeAt(r);if(h===c||h===l){var y=g();if(-1===r)return{tagName:e,attributes:n,children:i}}else y=null,r--;n[u]=y}r++}if(t.charCodeAt(r-1)!==a)if("script"==e){var m=r+1;r=t.indexOf("<\\/script>",r),i=[t.slice(m,r-1)],r+=9}else if("style"==e){m=r+1;r=t.indexOf("</style>",r),i=[t.slice(m,r-1)],r+=8}else-1==p.indexOf(e)&&(r++,i=f());else r++;return{tagName:e,attributes:n,children:i}}function g(){var e=t[r],n=++r;return r=t.indexOf(e,n),t.slice(n,r)}var m,b=null;if(void 0!==e.attrValue){e.attrName=e.attrName||"id";for(b=[];-1!==(m=void 0,m=new RegExp("\\\\s"+e.attrName+"\\\\s*=[\'\\"]"+e.attrValue+"[\'\\"]").exec(t),r=m?m.index:-1);)-1!==(r=t.lastIndexOf("<",r))&&b.push(y()),t=t.substr(r),r=0}else b=e.parseNode?y():f();return e.filter&&(b=n.filter(b,e.filter)),e.setPos&&(b.pos=r),b}n.simplify=function(t){var e={};if(!t.length)return"";if(1===t.length&&"string"==typeof t[0])return t[0];for(var r in t.forEach((function(t){if("object"==typeof t){e[t.tagName]||(e[t.tagName]=[]);var r=n.simplify(t.children||[]);e[t.tagName].push(r),t.attributes&&(r._attributes=t.attributes)}})),e)1==e[r].length&&(e[r]=e[r][0]);return e},n.filter=function(t,e){var r=[];return t.forEach((function(t){if("object"==typeof t&&e(t)&&r.push(t),t.children){var i=n.filter(t.children,e);r=r.concat(i)}})),r},n.stringify=function(t){var e="";function r(t){if(t)for(var r=0;r<t.length;r++)"string"==typeof t[r]?e+=t[r].trim():n(t[r])}function n(t){for(var n in e+="<"+t.tagName,t.attributes)null===t.attributes[n]?e+=" "+n:-1===t.attributes[n].indexOf(\'"\')?e+=" "+n+\'="\'+t.attributes[n].trim()+\'"\':e+=" "+n+"=\'"+t.attributes[n].trim()+"\'";e+=">",r(t.children),e+="</"+t.tagName+">"}return r(t),e},n.toContentString=function(t){if(Array.isArray(t)){var e="";return t.forEach((function(t){e=(e+=" "+n.toContentString(t)).trim()})),e}return"object"==typeof t?n.toContentString(t.children):" "+t},n.getElementById=function(t,e,r){var i=n(t,{attrValue:e});return r?n.simplify(i):i[0]},n.getElementsByClassName=function(t,e,r){const i=n(t,{attrName:"class",attrValue:"[a-zA-Z0-9-s ]*"+e+"[a-zA-Z0-9-s ]*"});return r?n.simplify(i):i},n.parseStream=function(t,e){if("string"==typeof e&&(e=e.length+2),"string"==typeof t){var i=r(25);t=i.createReadStream(t,{start:e}),e=0}var o=e,s="";return t.on("data",(function(e){s+=e;for(var r=0;;){if(!(o=s.indexOf("<",o)+1))return void(o=r);if("/"!==s[o+1]){var i=n(s,{pos:o-1,parseNode:!0,setPos:!0});if((o=i.pos)>s.length-1||o<r)return s=s.slice(r),o=0,void(r=0);t.emit("xml",i),r=o}else o+=1,r=pos}})),t.on("end",(function(){console.log("end")})),t},n.transformStream=function(t){const e=r(107);"string"==typeof t&&(t=t.length+2);var i=t||0,o="";return e({readableObjectMode:!0},(function(t,e,r){o+=t;for(var s=0;;){if(!(i=o.indexOf("<",i)+1))return i=s,r();if("/"!==o[i+1]){var a=n(o,{pos:i-1,parseNode:!0,setPos:!0});if((i=a.pos)>o.length-1||i<s)return o=o.slice(s),i=0,s=0,r();this.push(a),s=i}else i+=1,s=pos}r()}))},t.exports=n,n.xml=n},function(t,e,r){"use strict";var n=r(118),i=r(29),o=r(123),s=r(124),a=r(125),u=r(126),c=r(127),l=Object.prototype.toString;function f(t){if(!(this instanceof f))return new f(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==s.Z_OK)throw new Error(a[r]);if(this.header=new c,n.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=o.string2buf(e.dictionary):"[object ArrayBuffer]"===l.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=n.inflateSetDictionary(this.strm,e.dictionary))!==s.Z_OK))throw new Error(a[r])}function h(t,e){var r=new f(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}f.prototype.push=function(t,e){var r,a,u,c,f,h=this.strm,d=this.options.chunkSize,p=this.options.dictionary,y=!1;if(this.ended)return!1;a=e===~~e?e:!0===e?s.Z_FINISH:s.Z_NO_FLUSH,"string"==typeof t?h.input=o.binstring2buf(t):"[object ArrayBuffer]"===l.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new i.Buf8(d),h.next_out=0,h.avail_out=d),(r=n.inflate(h,s.Z_NO_FLUSH))===s.Z_NEED_DICT&&p&&(r=n.inflateSetDictionary(this.strm,p)),r===s.Z_BUF_ERROR&&!0===y&&(r=s.Z_OK,y=!1),r!==s.Z_STREAM_END&&r!==s.Z_OK)return this.onEnd(r),this.ended=!0,!1;h.next_out&&(0!==h.avail_out&&r!==s.Z_STREAM_END&&(0!==h.avail_in||a!==s.Z_FINISH&&a!==s.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(h.output,h.next_out),c=h.next_out-u,f=o.buf2string(h.output,u),h.next_out=c,h.avail_out=d-c,c&&i.arraySet(h.output,h.output,u,c,0),this.onData(f)):this.onData(i.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(y=!0)}while((h.avail_in>0||0===h.avail_out)&&r!==s.Z_STREAM_END);return r===s.Z_STREAM_END&&(a=s.Z_FINISH),a===s.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===s.Z_OK):a!==s.Z_SYNC_FLUSH||(this.onEnd(s.Z_OK),h.avail_out=0,!0)},f.prototype.onData=function(t){this.chunks.push(t)},f.prototype.onEnd=function(t){t===s.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=f,e.inflate=h,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,h(t,e)},e.ungzip=h},function(t,e,r){"use strict";var n=r(26);class i extends n.a{constructor(){super(t=>(this._observers.add(t),()=>this._observers.delete(t))),this._observers=new Set}next(t){for(const e of this._observers)e.next(t)}error(t){for(const e of this._observers)e.error(t)}complete(){for(const t of this._observers)t.complete()}}e.a=i},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));const n=()=>{};function i(){let t,e=!1,r=n;return[new Promise(n=>{e?n(t):r=n}),n=>{e=!0,t=n,r(t)}]}},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));var n=r(2);function i(t){return t&&"object"==typeof t&&t[n.d]}},function(t,e,r){var n=r(40),i=r(39),o=t.exports;for(var s in n)n.hasOwnProperty(s)&&(o[s]=n[s]);function a(t){if("string"==typeof t&&(t=i.parse(t)),t.protocol||(t.protocol="https:"),"https:"!==t.protocol)throw new Error(\'Protocol "\'+t.protocol+\'" not supported. Expected "https:"\');return t}o.request=function(t,e){return t=a(t),n.request.call(this,t,e)},o.get=function(t,e){return t=a(t),n.get.call(this,t,e)}},function(t,e,r){"use strict";r.r(e);var n=r(99),i=r.n(n);self;onmessage=t=>{const e=t.data;i()(e).then(t=>{const e=[];if(t.values){let r;t.values.forEach(t=>t.forEach(({buffer:t})=>{t instanceof ArrayBuffer&&t!==r&&(e.push(t),r=t)}))}t._data instanceof ArrayBuffer&&e.push(t._data),postMessage(t,e),close()})}},function(t,e,r){(function(e){var n=r(42).Transform,i=r(10);function o(t){n.call(this,t),this._destroyed=!1}function s(t,e,r){r(null,t)}function a(t){return function(e,r,n){return"function"==typeof e&&(n=r,r=e,e={}),"function"!=typeof r&&(r=s),"function"!=typeof n&&(n=null),t(e,r,n)}}i(o,n),o.prototype.destroy=function(t){if(!this._destroyed){this._destroyed=!0;var r=this;e.nextTick((function(){t&&r.emit("error",t),r.emit("close")}))}},t.exports=a((function(t,e,r){var n=new o(t);return n._transform=e,r&&(n._flush=r),n})),t.exports.ctor=a((function(t,e,r){function n(e){if(!(this instanceof n))return new n(e);this.options=Object.assign({},t,e),o.call(this,this.options)}return i(n,o),n.prototype._transform=e,r&&(n.prototype._flush=r),n})),t.exports.obj=a((function(t,e,r){var n=new o(Object.assign({objectMode:!0,highWaterMark:16},t));return n._transform=e,r&&(n._flush=r),n}))}).call(this,r(7))},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),s=n[0],a=n[1],u=new o(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),l=0,f=a>0?s-4:s;for(r=0;r<f;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[l++]=255&e);1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],s=0,a=r-i;s<a;s+=16383)o.push(l(t,s,s+16383>a?a:s+16383));1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],i[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,r){for(var i,o,s=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\ne.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,c=u>>1,l=-7,f=r?i-1:0,h=r?-1:1,d=t[e+f];for(f+=h,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+t[e+f],f+=h,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=n;l>0;s=256*s+t[e+f],f+=h,l-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=c}return(d?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,u,c=8*o-i-1,l=(1<<c)-1,f=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=l?(a=0,s=l):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[r+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[r+d]=255&s,d+=p,s/=256,c-=8);t[r+d-p]|=128*y}},function(t,e){},function(t,e,r){"use strict";var n=r(43).Buffer,i=r(112);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return n.alloc(0);for(var e,r,i,o=n.allocUnsafe(t>>>0),s=this.head,a=0;s;)e=s.data,r=o,i=a,e.copy(r,i),a+=s.data.length,s=s.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,r){(function(t){var n=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},r(114),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,r(3))},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,i,o,s,a,u=1,c={},l=!1,f=t.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(t);h=h&&h.setTimeout?h:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},n=function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,n=function(t){var e=f.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):n=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),n=function(e){t.postMessage(s+e,"*")}),h.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var i={callback:t,args:e};return c[u]=i,n(u),u++},h.clearImmediate=d}function d(t){delete c[t]}function p(t){if(l)setTimeout(p,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(void 0,r)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(3),r(7))},function(t,e,r){(function(e){function r(t){try{if(!e.localStorage)return!1}catch(t){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(this,r(3))},function(t,e,r){var n=r(9),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=s),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e,r){"use strict";t.exports=o;var n=r(67),i=Object.create(r(21));function o(t){if(!(this instanceof o))return new o(t);n.call(this,t)}i.inherits=r(10),i.inherits(o,n),o.prototype._transform=function(t,e,r){r(null,t)}},function(t,e,r){"use strict";var n=r(29),i=r(119),o=r(120),s=r(121),a=r(122);function u(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function c(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function l(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(852),e.distcode=e.distdyn=new n.Buf32(592),e.sane=1,e.back=-1,0):-2}function f(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,l(t)):-2}function h(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?-2:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,f(t))):-2}function d(t,e){var r,n;return t?(n=new c,t.state=n,n.window=null,0!==(r=h(t,e))&&(t.state=null),r):-2}var p,y,g=!0;function m(t){if(g){var e;for(p=new n.Buf32(512),y=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(a(1,t.lens,0,288,p,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;a(2,t.lens,0,32,y,0,t.work,{bits:5}),g=!1}t.lencode=p,t.lenbits=9,t.distcode=y,t.distbits=5}function b(t,e,r,i){var o,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new n.Buf8(s.wsize)),i>=s.wsize?(n.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):((o=s.wsize-s.wnext)>i&&(o=i),n.arraySet(s.window,e,r-i,o,s.wnext),(i-=o)?(n.arraySet(s.window,e,r-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=o,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=o))),0}e.inflateReset=f,e.inflateReset2=h,e.inflateResetKeep=l,e.inflateInit=function(t){return d(t,15)},e.inflateInit2=d,e.inflate=function(t,e){var r,c,l,f,h,d,p,y,g,v,w,x,_,S,A,E,k,T,C,O,I,P,R,j,M=0,L=new n.Buf8(4),F=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return-2;12===(r=t.state).mode&&(r.mode=13),h=t.next_out,l=t.output,p=t.avail_out,f=t.next_in,c=t.input,d=t.avail_in,y=r.hold,g=r.bits,v=d,w=p,P=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;g<16;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(2&r.wrap&&35615===y){r.check=0,L[0]=255&y,L[1]=y>>>8&255,r.check=o(r.check,L,2,0),y=0,g=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&y)<<8)+(y>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&y)){t.msg="unknown compression method",r.mode=30;break}if(g-=4,I=8+(15&(y>>>=4)),0===r.wbits)r.wbits=I;else if(I>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<I,t.adler=r.check=1,r.mode=512&y?10:12,y=0,g=0;break;case 2:for(;g<16;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(r.flags=y,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=y>>8&1),512&r.flags&&(L[0]=255&y,L[1]=y>>>8&255,r.check=o(r.check,L,2,0)),y=0,g=0,r.mode=3;case 3:for(;g<32;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}r.head&&(r.head.time=y),512&r.flags&&(L[0]=255&y,L[1]=y>>>8&255,L[2]=y>>>16&255,L[3]=y>>>24&255,r.check=o(r.check,L,4,0)),y=0,g=0,r.mode=4;case 4:for(;g<16;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}r.head&&(r.head.xflags=255&y,r.head.os=y>>8),512&r.flags&&(L[0]=255&y,L[1]=y>>>8&255,r.check=o(r.check,L,2,0)),y=0,g=0,r.mode=5;case 5:if(1024&r.flags){for(;g<16;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}r.length=y,r.head&&(r.head.extra_len=y),512&r.flags&&(L[0]=255&y,L[1]=y>>>8&255,r.check=o(r.check,L,2,0)),y=0,g=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((x=r.length)>d&&(x=d),x&&(r.head&&(I=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,c,f,x,I)),512&r.flags&&(r.check=o(r.check,c,x,f)),d-=x,f+=x,r.length-=x),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===d)break t;x=0;do{I=c[f+x++],r.head&&I&&r.length<65536&&(r.head.name+=String.fromCharCode(I))}while(I&&x<d);if(512&r.flags&&(r.check=o(r.check,c,x,f)),d-=x,f+=x,I)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===d)break t;x=0;do{I=c[f+x++],r.head&&I&&r.length<65536&&(r.head.comment+=String.fromCharCode(I))}while(I&&x<d);if(512&r.flags&&(r.check=o(r.check,c,x,f)),d-=x,f+=x,I)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;g<16;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(y!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}y=0,g=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;g<32;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}t.adler=r.check=u(y),y=0,g=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=h,t.avail_out=p,t.next_in=f,t.avail_in=d,r.hold=y,r.bits=g,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){y>>>=7&g,g-=7&g,r.mode=27;break}for(;g<3;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}switch(r.last=1&y,g-=1,3&(y>>>=1)){case 0:r.mode=14;break;case 1:if(m(r),r.mode=20,6===e){y>>>=2,g-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30}y>>>=2,g-=2;break;case 14:for(y>>>=7&g,g-=7&g;g<32;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if((65535&y)!=(y>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&y,y=0,g=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(x=r.length){if(x>d&&(x=d),x>p&&(x=p),0===x)break t;n.arraySet(l,c,f,x,h),d-=x,f+=x,p-=x,h+=x,r.length-=x;break}r.mode=12;break;case 17:for(;g<14;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(r.nlen=257+(31&y),y>>>=5,g-=5,r.ndist=1+(31&y),y>>>=5,g-=5,r.ncode=4+(15&y),y>>>=4,g-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;g<3;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}r.lens[F[r.have++]]=7&y,y>>>=3,g-=3}for(;r.have<19;)r.lens[F[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,R={bits:r.lenbits},P=a(0,r.lens,0,19,r.lencode,0,r.work,R),r.lenbits=R.bits,P){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;E=(M=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,k=65535&M,!((A=M>>>24)<=g);){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(k<16)y>>>=A,g-=A,r.lens[r.have++]=k;else{if(16===k){for(j=A+2;g<j;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(y>>>=A,g-=A,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}I=r.lens[r.have-1],x=3+(3&y),y>>>=2,g-=2}else if(17===k){for(j=A+3;g<j;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}g-=A,I=0,x=3+(7&(y>>>=A)),y>>>=3,g-=3}else{for(j=A+7;g<j;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}g-=A,I=0,x=11+(127&(y>>>=A)),y>>>=7,g-=7}if(r.have+x>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;x--;)r.lens[r.have++]=I}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,R={bits:r.lenbits},P=a(1,r.lens,0,r.nlen,r.lencode,0,r.work,R),r.lenbits=R.bits,P){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,R={bits:r.distbits},P=a(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,R),r.distbits=R.bits,P){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(d>=6&&p>=258){t.next_out=h,t.avail_out=p,t.next_in=f,t.avail_in=d,r.hold=y,r.bits=g,s(t,w),h=t.next_out,l=t.output,p=t.avail_out,f=t.next_in,c=t.input,d=t.avail_in,y=r.hold,g=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;E=(M=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,k=65535&M,!((A=M>>>24)<=g);){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(E&&0==(240&E)){for(T=A,C=E,O=k;E=(M=r.lencode[O+((y&(1<<T+C)-1)>>T)])>>>16&255,k=65535&M,!(T+(A=M>>>24)<=g);){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}y>>>=T,g-=T,r.back+=T}if(y>>>=A,g-=A,r.back+=A,r.length=k,0===E){r.mode=26;break}if(32&E){r.back=-1,r.mode=12;break}if(64&E){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&E,r.mode=22;case 22:if(r.extra){for(j=r.extra;g<j;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}r.length+=y&(1<<r.extra)-1,y>>>=r.extra,g-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;E=(M=r.distcode[y&(1<<r.distbits)-1])>>>16&255,k=65535&M,!((A=M>>>24)<=g);){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(0==(240&E)){for(T=A,C=E,O=k;E=(M=r.distcode[O+((y&(1<<T+C)-1)>>T)])>>>16&255,k=65535&M,!(T+(A=M>>>24)<=g);){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}y>>>=T,g-=T,r.back+=T}if(y>>>=A,g-=A,r.back+=A,64&E){t.msg="invalid distance code",r.mode=30;break}r.offset=k,r.extra=15&E,r.mode=24;case 24:if(r.extra){for(j=r.extra;g<j;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}r.offset+=y&(1<<r.extra)-1,y>>>=r.extra,g-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===p)break t;if(x=w-p,r.offset>x){if((x=r.offset-x)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}x>r.wnext?(x-=r.wnext,_=r.wsize-x):_=r.wnext-x,x>r.length&&(x=r.length),S=r.window}else S=l,_=h-r.offset,x=r.length;x>p&&(x=p),p-=x,r.length-=x;do{l[h++]=S[_++]}while(--x);0===r.length&&(r.mode=21);break;case 26:if(0===p)break t;l[h++]=r.length,p--,r.mode=21;break;case 27:if(r.wrap){for(;g<32;){if(0===d)break t;d--,y|=c[f++]<<g,g+=8}if(w-=p,t.total_out+=w,r.total+=w,w&&(t.adler=r.check=r.flags?o(r.check,l,w,h-w):i(r.check,l,w,h-w)),w=p,(r.flags?y:u(y))!==r.check){t.msg="incorrect data check",r.mode=30;break}y=0,g=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;g<32;){if(0===d)break t;d--,y+=c[f++]<<g,g+=8}if(y!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}y=0,g=0}r.mode=29;case 29:P=1;break t;case 30:P=-3;break t;case 31:return-4;case 32:default:return-2}return t.next_out=h,t.avail_out=p,t.next_in=f,t.avail_in=d,r.hold=y,r.bits=g,(r.wsize||w!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&b(t,t.output,t.next_out,w-t.avail_out)?(r.mode=31,-4):(v-=t.avail_in,w-=t.avail_out,t.total_in+=v,t.total_out+=w,r.total+=w,r.wrap&&w&&(t.adler=r.check=r.flags?o(r.check,l,w,t.next_out-w):i(r.check,l,w,t.next_out-w)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0===v&&0===w||4===e)&&0===P&&(P=-5),P)},e.inflateEnd=function(t){if(!t||!t.state)return-2;var e=t.state;return e.window&&(e.window=null),t.state=null,0},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?-2:(r.head=e,e.done=!1,0):-2},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?-2:11===r.mode&&i(1,e,n,0)!==r.check?-3:b(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,0):-2},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e,r){"use strict";t.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,s=0;0!==r;){r-=s=r>2e3?2e3:r;do{o=o+(i=i+e[n++]|0)|0}while(--s);i%=65521,o%=65521}return i|o<<16|0}},function(t,e,r){"use strict";var n=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,e,r,i){var o=n,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^o[255&(t^e[a])];return-1^t}},function(t,e,r){"use strict";t.exports=function(t,e){var r,n,i,o,s,a,u,c,l,f,h,d,p,y,g,m,b,v,w,x,_,S,A,E,k;r=t.state,n=t.next_in,E=t.input,i=n+(t.avail_in-5),o=t.next_out,k=t.output,s=o-(e-t.avail_out),a=o+(t.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,f=r.wnext,h=r.window,d=r.hold,p=r.bits,y=r.lencode,g=r.distcode,m=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(d+=E[n++]<<p,p+=8,d+=E[n++]<<p,p+=8),v=y[d&m];e:for(;;){if(d>>>=w=v>>>24,p-=w,0===(w=v>>>16&255))k[o++]=65535&v;else{if(!(16&w)){if(0==(64&w)){v=y[(65535&v)+(d&(1<<w)-1)];continue e}if(32&w){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}x=65535&v,(w&=15)&&(p<w&&(d+=E[n++]<<p,p+=8),x+=d&(1<<w)-1,d>>>=w,p-=w),p<15&&(d+=E[n++]<<p,p+=8,d+=E[n++]<<p,p+=8),v=g[d&b];r:for(;;){if(d>>>=w=v>>>24,p-=w,!(16&(w=v>>>16&255))){if(0==(64&w)){v=g[(65535&v)+(d&(1<<w)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(_=65535&v,p<(w&=15)&&(d+=E[n++]<<p,(p+=8)<w&&(d+=E[n++]<<p,p+=8)),(_+=d&(1<<w)-1)>u){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=w,p-=w,_>(w=o-s)){if((w=_-w)>l&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=0,A=h,0===f){if(S+=c-w,w<x){x-=w;do{k[o++]=h[S++]}while(--w);S=o-_,A=k}}else if(f<w){if(S+=c+f-w,(w-=f)<x){x-=w;do{k[o++]=h[S++]}while(--w);if(S=0,f<x){x-=w=f;do{k[o++]=h[S++]}while(--w);S=o-_,A=k}}}else if(S+=f-w,w<x){x-=w;do{k[o++]=h[S++]}while(--w);S=o-_,A=k}for(;x>2;)k[o++]=A[S++],k[o++]=A[S++],k[o++]=A[S++],x-=3;x&&(k[o++]=A[S++],x>1&&(k[o++]=A[S++]))}else{S=o-_;do{k[o++]=k[S++],k[o++]=k[S++],k[o++]=k[S++],x-=3}while(x>2);x&&(k[o++]=k[S++],x>1&&(k[o++]=k[S++]))}break}}break}}while(n<i&&o<a);n-=x=p>>3,d&=(1<<(p-=x<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<a?a-o+257:257-(o-a),r.hold=d,r.bits=p}},function(t,e,r){"use strict";var n=r(29),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],s=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,u,c,l,f,h){var d,p,y,g,m,b,v,w,x,_=h.bits,S=0,A=0,E=0,k=0,T=0,C=0,O=0,I=0,P=0,R=0,j=null,M=0,L=new n.Buf16(16),F=new n.Buf16(16),N=null,D=0;for(S=0;S<=15;S++)L[S]=0;for(A=0;A<u;A++)L[e[r+A]]++;for(T=_,k=15;k>=1&&0===L[k];k--);if(T>k&&(T=k),0===k)return c[l++]=20971520,c[l++]=20971520,h.bits=1,0;for(E=1;E<k&&0===L[E];E++);for(T<E&&(T=E),I=1,S=1;S<=15;S++)if(I<<=1,(I-=L[S])<0)return-1;if(I>0&&(0===t||1!==k))return-1;for(F[1]=0,S=1;S<15;S++)F[S+1]=F[S]+L[S];for(A=0;A<u;A++)0!==e[r+A]&&(f[F[e[r+A]]++]=A);if(0===t?(j=N=f,b=19):1===t?(j=i,M-=257,N=o,D-=257,b=256):(j=s,N=a,b=-1),R=0,A=0,S=E,m=l,C=T,O=0,y=-1,g=(P=1<<T)-1,1===t&&P>852||2===t&&P>592)return 1;for(;;){v=S-O,f[A]<b?(w=0,x=f[A]):f[A]>b?(w=N[D+f[A]],x=j[M+f[A]]):(w=96,x=0),d=1<<S-O,E=p=1<<C;do{c[m+(R>>O)+(p-=d)]=v<<24|w<<16|x|0}while(0!==p);for(d=1<<S-1;R&d;)d>>=1;if(0!==d?(R&=d-1,R+=d):R=0,A++,0==--L[S]){if(S===k)break;S=e[r+f[A]]}if(S>T&&(R&g)!==y){for(0===O&&(O=T),m+=E,I=1<<(C=S-O);C+O<k&&!((I-=L[C+O])<=0);)C++,I<<=1;if(P+=1<<C,1===t&&P>852||2===t&&P>592)return 1;c[y=R&g]=T<<24|C<<16|m-l|0}}return 0!==R&&(c[m+R]=S-O<<24|64<<16|0),h.bits=T,0}},function(t,e,r){"use strict";var n=r(29),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var s=new n.Buf8(256),a=0;a<256;a++)s[a]=a>=252?6:a>=248?5:a>=240?4:a>=224?3:a>=192?2:1;function u(t,e){if(e<65534&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",s=0;s<e;s++)r+=String.fromCharCode(t[s]);return r}s[254]=s[254]=1,e.string2buf=function(t){var e,r,i,o,s,a=t.length,u=0;for(o=0;o<a;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<a&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),s=0,o=0;s<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<a&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),r<128?e[s++]=r:r<2048?(e[s++]=192|r>>>6,e[s++]=128|63&r):r<65536?(e[s++]=224|r>>>12,e[s++]=128|r>>>6&63,e[s++]=128|63&r):(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63,e[s++]=128|r>>>6&63,e[s++]=128|63&r);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,n,i,o,a=e||t.length,c=new Array(2*a);for(n=0,r=0;r<a;)if((i=t[r++])<128)c[n++]=i;else if((o=s[i])>4)c[n++]=65533,r+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&r<a;)i=i<<6|63&t[r++],o--;o>1?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return u(c,n)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+s[t[r]]>e?r:e}},function(t,e,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},function(t,e,r){t.exports=r.p+"0.bce5ef15ddaa1e171e9d.worker.worker.js"},function(t,e,r){t.exports=function(t){function e(t){let r,i,o,s=null;function a(...t){if(!a.enabled)return;const n=a,i=Number(new Date),o=i-(r||i);n.diff=o,n.prev=r,n.curr=i,r=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(r,i)=>{if("%%"===r)return"%";s++;const o=e.formatters[i];if("function"==typeof o){const e=t[s];r=o.call(n,e),t.splice(s,1),s--}return r}),e.formatArgs.call(n,t);(n.log||e.log).apply(n,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=n,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==e.namespaces&&(i=e.namespaces,o=e.enabled(t)),o),set:t=>{s=t}}),"function"==typeof e.init&&e.init(a),a}function n(t,r){const n=e(this.namespace+(void 0===r?":":r)+t);return n.log=this.log,n}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map(t=>"-"+t)].join(",");return e.enable(""),t},e.enable=function(t){let r;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const n=("string"==typeof t?t:"").split(/[\\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(t=n[r].replace(/\\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.slice(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(130),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach(r=>{e[r]=t[r]}),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let r=0;for(let e=0;e<t.length;e++)r=(r<<5)-r+t.charCodeAt(e),r|=0;return e.colors[Math.abs(r)%e.colors.length]},e.enable(e.load()),e}},function(t,e){var r=1e3,n=6e4,i=60*n,o=24*i;function s(t,e,r,n){var i=e>=1.5*r;return Math.round(t/r)+" "+n+(i?"s":"")}t.exports=function(t,e){e=e||{};var a=typeof t;if("string"===a&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var s=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*o;case"hours":case"hour":case"hrs":case"hr":case"h":return s*i;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(t);if("number"===a&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return s(t,e,o,"day");if(e>=i)return s(t,e,i,"hour");if(e>=n)return s(t,e,n,"minute");if(e>=r)return s(t,e,r,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=n)return Math.round(t/n)+"m";if(e>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){(function(e,n,i){var o=r(69),s=r(10),a=r(70),u=r(42),c=r(132),l=a.IncomingMessage,f=a.readyStates;var h=t.exports=function(t){var r,n=this;u.Writable.call(n),n._opts=t,n._body=[],n._headers={},t.auth&&n.setHeader("Authorization","Basic "+new e(t.auth).toString("base64")),Object.keys(t.headers).forEach((function(e){n.setHeader(e,t.headers[e])}));var i=!0;if("disable-fetch"===t.mode||"requestTimeout"in t&&!o.abortController)i=!1,r=!0;else if("prefer-streaming"===t.mode)r=!1;else if("allow-wrong-content-type"===t.mode)r=!o.overrideMimeType;else{if(t.mode&&"default"!==t.mode&&"prefer-fast"!==t.mode)throw new Error("Invalid value for opts.mode");r=!0}n._mode=function(t,e){return o.fetch&&e?"fetch":o.mozchunkedarraybuffer?"moz-chunked-arraybuffer":o.msstream?"ms-stream":o.arraybuffer&&t?"arraybuffer":o.vbArray&&t?"text:vbarray":"text"}(r,i),n._fetchTimer=null,n.on("finish",(function(){n._onFinish()}))};s(h,u.Writable),h.prototype.setHeader=function(t,e){var r=t.toLowerCase();-1===d.indexOf(r)&&(this._headers[r]={name:t,value:e})},h.prototype.getHeader=function(t){var e=this._headers[t.toLowerCase()];return e?e.value:null},h.prototype.removeHeader=function(t){delete this._headers[t.toLowerCase()]},h.prototype._onFinish=function(){var t=this;if(!t._destroyed){var r=t._opts,s=t._headers,a=null;"GET"!==r.method&&"HEAD"!==r.method&&(a=o.arraybuffer?c(e.concat(t._body)):o.blobConstructor?new n.Blob(t._body.map((function(t){return c(t)})),{type:(s["content-type"]||{}).value||""}):e.concat(t._body).toString());var u=[];if(Object.keys(s).forEach((function(t){var e=s[t].name,r=s[t].value;Array.isArray(r)?r.forEach((function(t){u.push([e,t])})):u.push([e,r])})),"fetch"===t._mode){var l=null;if(o.abortController){var h=new AbortController;l=h.signal,t._fetchAbortController=h,"requestTimeout"in r&&0!==r.requestTimeout&&(t._fetchTimer=n.setTimeout((function(){t.emit("requestTimeout"),t._fetchAbortController&&t._fetchAbortController.abort()}),r.requestTimeout))}n.fetch(t._opts.url,{method:t._opts.method,headers:u,body:a||void 0,mode:"cors",credentials:r.withCredentials?"include":"same-origin",signal:l}).then((function(e){t._fetchResponse=e,t._connect()}),(function(e){n.clearTimeout(t._fetchTimer),t._destroyed||t.emit("error",e)}))}else{var d=t._xhr=new n.XMLHttpRequest;try{d.open(t._opts.method,t._opts.url,!0)}catch(e){return void i.nextTick((function(){t.emit("error",e)}))}"responseType"in d&&(d.responseType=t._mode.split(":")[0]),"withCredentials"in d&&(d.withCredentials=!!r.withCredentials),"text"===t._mode&&"overrideMimeType"in d&&d.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in r&&(d.timeout=r.requestTimeout,d.ontimeout=function(){t.emit("requestTimeout")}),u.forEach((function(t){d.setRequestHeader(t[0],t[1])})),t._response=null,d.onreadystatechange=function(){switch(d.readyState){case f.LOADING:case f.DONE:t._onXHRProgress()}},"moz-chunked-arraybuffer"===t._mode&&(d.onprogress=function(){t._onXHRProgress()}),d.onerror=function(){t._destroyed||t.emit("error",new Error("XHR error"))};try{d.send(a)}catch(e){return void i.nextTick((function(){t.emit("error",e)}))}}}},h.prototype._onXHRProgress=function(){(function(t){try{var e=t.status;return null!==e&&0!==e}catch(t){return!1}})(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},h.prototype._connect=function(){var t=this;t._destroyed||(t._response=new l(t._xhr,t._fetchResponse,t._mode,t._fetchTimer),t._response.on("error",(function(e){t.emit("error",e)})),t.emit("response",t._response))},h.prototype._write=function(t,e,r){this._body.push(t),r()},h.prototype.abort=h.prototype.destroy=function(){this._destroyed=!0,n.clearTimeout(this._fetchTimer),this._response&&(this._response._destroyed=!0),this._xhr?this._xhr.abort():this._fetchAbortController&&this._fetchAbortController.abort()},h.prototype.end=function(t,e,r){"function"==typeof t&&(r=t,t=void 0),u.Writable.prototype.end.call(this,t,e,r)},h.prototype.flushHeaders=function(){},h.prototype.setTimeout=function(){},h.prototype.setNoDelay=function(){},h.prototype.setSocketKeepAlive=function(){};var d=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]}).call(this,r(9).Buffer,r(3),r(7))},function(t,e,r){var n=r(9).Buffer;t.exports=function(t){if(t instanceof Uint8Array){if(0===t.byteOffset&&t.byteLength===t.buffer.byteLength)return t.buffer;if("function"==typeof t.buffer.slice)return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}if(n.isBuffer(t)){for(var e=new Uint8Array(t.length),r=t.length,i=0;i<r;i++)e[i]=t[i];return e.buffer}throw new Error("Argument must be a Buffer")}},function(t,e){t.exports=function(){for(var t={},e=0;e<arguments.length;e++){var n=arguments[e];for(var i in n)r.call(n,i)&&(t[i]=n[i])}return t};var r=Object.prototype.hasOwnProperty},function(t,e){t.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I\'m a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},function(t,e,r){(function(t,n){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof n&&n;s.global!==s&&s.window!==s&&s.self;var a,u=2147483647,c=/^xn--/,l=/[^\\x20-\\x7E]/,f=/[\\x2E\\u3002\\uFF0E\\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,p=String.fromCharCode;function y(t){throw new RangeError(h[t])}function g(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function m(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+g((t=t.replace(f,".")).split("."),e).join(".")}function b(t){for(var e,r,n=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(r=t.charCodeAt(i++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),i--):n.push(e);return n}function v(t){return g(t,(function(t){var e="";return t>65535&&(e+=p((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=p(t)})).join("")}function w(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function x(t,e,r){var n=0;for(t=r?d(t/700):t>>1,t+=d(t/e);t>455;n+=36)t=d(t/35);return d(n+36*t/(t+38))}function _(t){var e,r,n,i,o,s,a,c,l,f,h,p=[],g=t.length,m=0,b=128,w=72;for((r=t.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&y("not-basic"),p.push(t.charCodeAt(n));for(i=r>0?r+1:0;i<g;){for(o=m,s=1,a=36;i>=g&&y("invalid-input"),((c=(h=t.charCodeAt(i++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:36)>=36||c>d((u-m)/s))&&y("overflow"),m+=c*s,!(c<(l=a<=w?1:a>=w+26?26:a-w));a+=36)s>d(u/(f=36-l))&&y("overflow"),s*=f;w=x(m-o,e=p.length+1,0==o),d(m/e)>u-b&&y("overflow"),b+=d(m/e),m%=e,p.splice(m++,0,b)}return v(p)}function S(t){var e,r,n,i,o,s,a,c,l,f,h,g,m,v,_,S=[];for(g=(t=b(t)).length,e=128,r=0,o=72,s=0;s<g;++s)(h=t[s])<128&&S.push(p(h));for(n=i=S.length,i&&S.push("-");n<g;){for(a=u,s=0;s<g;++s)(h=t[s])>=e&&h<a&&(a=h);for(a-e>d((u-r)/(m=n+1))&&y("overflow"),r+=(a-e)*m,e=a,s=0;s<g;++s)if((h=t[s])<e&&++r>u&&y("overflow"),h==e){for(c=r,l=36;!(c<(f=l<=o?1:l>=o+26?26:l-o));l+=36)_=c-f,v=36-f,S.push(p(w(f+_%v,0))),c=d(_/v);S.push(p(w(c,0))),o=x(r,m,n==i),r=0,++n}++r,++e}return S.join("")}a={version:"1.4.1",ucs2:{decode:b,encode:v},decode:_,encode:S,toASCII:function(t){return m(t,(function(t){return l.test(t)?"xn--"+S(t):t}))},toUnicode:function(t){return m(t,(function(t){return c.test(t)?_(t.slice(4).toLowerCase()):t}))}},void 0===(i=function(){return a}.call(e,r,e,t))||(t.exports=i)}()}).call(this,r(136)(t),r(3))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){"use strict";var n=r(138),i=r(149),o=r(46);t.exports={formats:o,parse:i,stringify:n}},function(t,e,r){"use strict";var n=r(139),i=r(71),o=r(46),s=Object.prototype.hasOwnProperty,a={brackets:function(t){return t+"[]"},comma:"comma",indices:function(t,e){return t+"["+e+"]"},repeat:function(t){return t}},u=Array.isArray,c=Array.prototype.push,l=function(t,e){c.apply(t,u(e)?e:[e])},f=Date.prototype.toISOString,h=o.default,d={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:i.encode,encodeValuesOnly:!1,format:h,formatter:o.formatters[h],indices:!1,serializeDate:function(t){return f.call(t)},skipNulls:!1,strictNullHandling:!1},p={},y=function t(e,r,o,s,a,c,f,h,y,g,m,b,v,w,x,_){for(var S,A=e,E=_,k=0,T=!1;void 0!==(E=E.get(p))&&!T;){var C=E.get(e);if(k+=1,void 0!==C){if(C===k)throw new RangeError("Cyclic object value");T=!0}void 0===E.get(p)&&(k=0)}if("function"==typeof h?A=h(r,A):A instanceof Date?A=m(A):"comma"===o&&u(A)&&(A=i.maybeMap(A,(function(t){return t instanceof Date?m(t):t}))),null===A){if(a)return f&&!w?f(r,d.encoder,x,"key",b):r;A=""}if("string"==typeof(S=A)||"number"==typeof S||"boolean"==typeof S||"symbol"==typeof S||"bigint"==typeof S||i.isBuffer(A))return f?[v(w?r:f(r,d.encoder,x,"key",b))+"="+v(f(A,d.encoder,x,"value",b))]:[v(r)+"="+v(String(A))];var O,I=[];if(void 0===A)return I;if("comma"===o&&u(A))w&&f&&(A=i.maybeMap(A,f)),O=[{value:A.length>0?A.join(",")||null:void 0}];else if(u(h))O=h;else{var P=Object.keys(A);O=y?P.sort(y):P}for(var R=s&&u(A)&&1===A.length?r+"[]":r,j=0;j<O.length;++j){var M=O[j],L="object"==typeof M&&void 0!==M.value?M.value:A[M];if(!c||null!==L){var F=u(A)?"function"==typeof o?o(R,M):R:R+(g?"."+M:"["+M+"]");_.set(e,k);var N=n();N.set(p,_),l(I,t(L,F,o,s,a,c,"comma"===o&&w&&u(A)?null:f,h,y,g,m,b,v,w,x,N))}}return I};t.exports=function(t,e){var r,i=t,c=function(t){if(!t)return d;if(null!==t.encoder&&void 0!==t.encoder&&"function"!=typeof t.encoder)throw new TypeError("Encoder has to be a function.");var e=t.charset||d.charset;if(void 0!==t.charset&&"utf-8"!==t.charset&&"iso-8859-1"!==t.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=o.default;if(void 0!==t.format){if(!s.call(o.formatters,t.format))throw new TypeError("Unknown format option provided.");r=t.format}var n=o.formatters[r],i=d.filter;return("function"==typeof t.filter||u(t.filter))&&(i=t.filter),{addQueryPrefix:"boolean"==typeof t.addQueryPrefix?t.addQueryPrefix:d.addQueryPrefix,allowDots:void 0===t.allowDots?d.allowDots:!!t.allowDots,charset:e,charsetSentinel:"boolean"==typeof t.charsetSentinel?t.charsetSentinel:d.charsetSentinel,delimiter:void 0===t.delimiter?d.delimiter:t.delimiter,encode:"boolean"==typeof t.encode?t.encode:d.encode,encoder:"function"==typeof t.encoder?t.encoder:d.encoder,encodeValuesOnly:"boolean"==typeof t.encodeValuesOnly?t.encodeValuesOnly:d.encodeValuesOnly,filter:i,format:r,formatter:n,serializeDate:"function"==typeof t.serializeDate?t.serializeDate:d.serializeDate,skipNulls:"boolean"==typeof t.skipNulls?t.skipNulls:d.skipNulls,sort:"function"==typeof t.sort?t.sort:null,strictNullHandling:"boolean"==typeof t.strictNullHandling?t.strictNullHandling:d.strictNullHandling}}(e);"function"==typeof c.filter?i=(0,c.filter)("",i):u(c.filter)&&(r=c.filter);var f,h=[];if("object"!=typeof i||null===i)return"";f=e&&e.arrayFormat in a?e.arrayFormat:e&&"indices"in e?e.indices?"indices":"repeat":"indices";var p=a[f];if(e&&"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var g="comma"===p&&e&&e.commaRoundTrip;r||(r=Object.keys(i)),c.sort&&r.sort(c.sort);for(var m=n(),b=0;b<r.length;++b){var v=r[b];c.skipNulls&&null===i[v]||l(h,y(i[v],v,p,g,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.format,c.formatter,c.encodeValuesOnly,c.charset,m))}var w=h.join(c.delimiter),x=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?x+="utf8=%26%2310003%3B&":x+="utf8=%E2%9C%93&"),w.length>0?x+w:""}},function(t,e,r){"use strict";var n=r(44),i=r(145),o=r(147),s=n("%TypeError%"),a=n("%WeakMap%",!0),u=n("%Map%",!0),c=i("WeakMap.prototype.get",!0),l=i("WeakMap.prototype.set",!0),f=i("WeakMap.prototype.has",!0),h=i("Map.prototype.get",!0),d=i("Map.prototype.set",!0),p=i("Map.prototype.has",!0),y=function(t,e){for(var r,n=t;null!==(r=n.next);n=r)if(r.key===e)return n.next=r.next,r.next=t.next,t.next=r,r};t.exports=function(){var t,e,r,n={assert:function(t){if(!n.has(t))throw new s("Side channel does not contain "+o(t))},get:function(n){if(a&&n&&("object"==typeof n||"function"==typeof n)){if(t)return c(t,n)}else if(u){if(e)return h(e,n)}else if(r)return function(t,e){var r=y(t,e);return r&&r.value}(r,n)},has:function(n){if(a&&n&&("object"==typeof n||"function"==typeof n)){if(t)return f(t,n)}else if(u){if(e)return p(e,n)}else if(r)return function(t,e){return!!y(t,e)}(r,n);return!1},set:function(n,i){a&&n&&("object"==typeof n||"function"==typeof n)?(t||(t=new a),l(t,n,i)):u?(e||(e=new u),d(e,n,i)):(r||(r={key:{},next:null}),function(t,e,r){var n=y(t,e);n?n.value=r:t.next={key:e,next:t.next,value:r}}(r,n,i))}};return n}},function(t,e,r){"use strict";var n="undefined"!=typeof Symbol&&Symbol,i=r(141);t.exports=function(){return"function"==typeof n&&("function"==typeof Symbol&&("symbol"==typeof n("foo")&&("symbol"==typeof Symbol("bar")&&i())))}},function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},function(t,e,r){"use strict";var n={foo:{}},i=Object;t.exports=function(){return{__proto__:n}.foo===n.foo&&!({__proto__:null}instanceof i)}},function(t,e,r){"use strict";var n="Function.prototype.bind called on incompatible ",i=Array.prototype.slice,o=Object.prototype.toString;t.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==o.call(e))throw new TypeError(n+e);for(var r,s=i.call(arguments,1),a=function(){if(this instanceof r){var n=e.apply(this,s.concat(i.call(arguments)));return Object(n)===n?n:this}return e.apply(t,s.concat(i.call(arguments)))},u=Math.max(0,e.length-s.length),c=[],l=0;l<u;l++)c.push("$"+l);if(r=Function("binder","return function ("+c.join(",")+"){ return binder.apply(this,arguments); }")(a),e.prototype){var f=function(){};f.prototype=e.prototype,r.prototype=new f,f.prototype=null}return r}},function(t,e,r){"use strict";var n=r(45);t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},function(t,e,r){"use strict";var n=r(44),i=r(146),o=i(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&o(t,".prototype.")>-1?i(r):r}},function(t,e,r){"use strict";var n=r(45),i=r(44),o=i("%Function.prototype.apply%"),s=i("%Function.prototype.call%"),a=i("%Reflect.apply%",!0)||n.call(s,o),u=i("%Object.getOwnPropertyDescriptor%",!0),c=i("%Object.defineProperty%",!0),l=i("%Math.max%");if(c)try{c({},"a",{value:1})}catch(t){c=null}t.exports=function(t){var e=a(n,s,arguments);if(u&&c){var r=u(e,"length");r.configurable&&c(e,"length",{value:1+l(0,t.length-(arguments.length-1))})}return e};var f=function(){return a(n,o,arguments)};c?c(t.exports,"apply",{value:f}):t.exports.apply=f},function(t,e,r){var n="function"==typeof Map&&Map.prototype,i=Object.getOwnPropertyDescriptor&&n?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,o=n&&i&&"function"==typeof i.get?i.get:null,s=n&&Map.prototype.forEach,a="function"==typeof Set&&Set.prototype,u=Object.getOwnPropertyDescriptor&&a?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,c=a&&u&&"function"==typeof u.get?u.get:null,l=a&&Set.prototype.forEach,f="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,h="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,d="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,p=Boolean.prototype.valueOf,y=Object.prototype.toString,g=Function.prototype.toString,m=String.prototype.match,b=String.prototype.slice,v=String.prototype.replace,w=String.prototype.toUpperCase,x=String.prototype.toLowerCase,_=RegExp.prototype.test,S=Array.prototype.concat,A=Array.prototype.join,E=Array.prototype.slice,k=Math.floor,T="function"==typeof BigInt?BigInt.prototype.valueOf:null,C=Object.getOwnPropertySymbols,O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,I="function"==typeof Symbol&&"object"==typeof Symbol.iterator,P="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===I||"symbol")?Symbol.toStringTag:null,R=Object.prototype.propertyIsEnumerable,j=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(t){return t.__proto__}:null);function M(t,e){if(t===1/0||t===-1/0||t!=t||t&&t>-1e3&&t<1e3||_.call(/e/,e))return e;var r=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof t){var n=t<0?-k(-t):k(t);if(n!==t){var i=String(n),o=b.call(e,i.length+1);return v.call(i,r,"$&_")+"."+v.call(v.call(o,/([0-9]{3})/g,"$&_"),/_$/,"")}}return v.call(e,r,"$&_")}var L=r(148),F=L.custom,N=q(F)?F:null;function D(t,e,r){var n="double"===(r.quoteStyle||e)?\'"\':"\'";return n+t+n}function U(t){return v.call(String(t),/"/g,"&quot;")}function B(t){return!("[object Array]"!==W(t)||P&&"object"==typeof t&&P in t)}function G(t){return!("[object RegExp]"!==W(t)||P&&"object"==typeof t&&P in t)}function q(t){if(I)return t&&"object"==typeof t&&t instanceof Symbol;if("symbol"==typeof t)return!0;if(!t||"object"!=typeof t||!O)return!1;try{return O.call(t),!0}catch(t){}return!1}t.exports=function t(e,r,n,i){var a=r||{};if(H(a,"quoteStyle")&&"single"!==a.quoteStyle&&"double"!==a.quoteStyle)throw new TypeError(\'option "quoteStyle" must be "single" or "double"\');if(H(a,"maxStringLength")&&("number"==typeof a.maxStringLength?a.maxStringLength<0&&a.maxStringLength!==1/0:null!==a.maxStringLength))throw new TypeError(\'option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`\');var u=!H(a,"customInspect")||a.customInspect;if("boolean"!=typeof u&&"symbol"!==u)throw new TypeError("option \\"customInspect\\", if provided, must be `true`, `false`, or `\'symbol\'`");if(H(a,"indent")&&null!==a.indent&&"\\t"!==a.indent&&!(parseInt(a.indent,10)===a.indent&&a.indent>0))throw new TypeError(\'option "indent" must be "\\\\t", an integer > 0, or `null`\');if(H(a,"numericSeparator")&&"boolean"!=typeof a.numericSeparator)throw new TypeError(\'option "numericSeparator", if provided, must be `true` or `false`\');var y=a.numericSeparator;if(void 0===e)return"undefined";if(null===e)return"null";if("boolean"==typeof e)return e?"true":"false";if("string"==typeof e)return function t(e,r){if(e.length>r.maxStringLength){var n=e.length-r.maxStringLength,i="... "+n+" more character"+(n>1?"s":"");return t(b.call(e,0,r.maxStringLength),r)+i}return D(v.call(v.call(e,/([\'\\\\])/g,"\\\\$1"),/[\\x00-\\x1f]/g,K),"single",r)}(e,a);if("number"==typeof e){if(0===e)return 1/0/e>0?"0":"-0";var w=String(e);return y?M(e,w):w}if("bigint"==typeof e){var _=String(e)+"n";return y?M(e,_):_}var k=void 0===a.depth?5:a.depth;if(void 0===n&&(n=0),n>=k&&k>0&&"object"==typeof e)return B(e)?"[Array]":"[Object]";var C=function(t,e){var r;if("\\t"===t.indent)r="\\t";else{if(!("number"==typeof t.indent&&t.indent>0))return null;r=A.call(Array(t.indent+1)," ")}return{base:r,prev:A.call(Array(e+1),r)}}(a,n);if(void 0===i)i=[];else if(V(i,e)>=0)return"[Circular]";function F(e,r,o){if(r&&(i=E.call(i)).push(r),o){var s={depth:a.depth};return H(a,"quoteStyle")&&(s.quoteStyle=a.quoteStyle),t(e,s,n+1,i)}return t(e,a,n+1,i)}if("function"==typeof e&&!G(e)){var z=function(t){if(t.name)return t.name;var e=m.call(g.call(t),/^function\\s*([\\w$]+)/);if(e)return e[1];return null}(e),J=Q(e,F);return"[Function"+(z?": "+z:" (anonymous)")+"]"+(J.length>0?" { "+A.call(J,", ")+" }":"")}if(q(e)){var tt=I?v.call(String(e),/^(Symbol\\(.*\\))_[^)]*$/,"$1"):O.call(e);return"object"!=typeof e||I?tt:$(tt)}if(function(t){if(!t||"object"!=typeof t)return!1;if("undefined"!=typeof HTMLElement&&t instanceof HTMLElement)return!0;return"string"==typeof t.nodeName&&"function"==typeof t.getAttribute}(e)){for(var et="<"+x.call(String(e.nodeName)),rt=e.attributes||[],nt=0;nt<rt.length;nt++)et+=" "+rt[nt].name+"="+D(U(rt[nt].value),"double",a);return et+=">",e.childNodes&&e.childNodes.length&&(et+="..."),et+="</"+x.call(String(e.nodeName))+">"}if(B(e)){if(0===e.length)return"[]";var it=Q(e,F);return C&&!function(t){for(var e=0;e<t.length;e++)if(V(t[e],"\\n")>=0)return!1;return!0}(it)?"["+X(it,C)+"]":"[ "+A.call(it,", ")+" ]"}if(function(t){return!("[object Error]"!==W(t)||P&&"object"==typeof t&&P in t)}(e)){var ot=Q(e,F);return"cause"in Error.prototype||!("cause"in e)||R.call(e,"cause")?0===ot.length?"["+String(e)+"]":"{ ["+String(e)+"] "+A.call(ot,", ")+" }":"{ ["+String(e)+"] "+A.call(S.call("[cause]: "+F(e.cause),ot),", ")+" }"}if("object"==typeof e&&u){if(N&&"function"==typeof e[N]&&L)return L(e,{depth:k-n});if("symbol"!==u&&"function"==typeof e.inspect)return e.inspect()}if(function(t){if(!o||!t||"object"!=typeof t)return!1;try{o.call(t);try{c.call(t)}catch(t){return!0}return t instanceof Map}catch(t){}return!1}(e)){var st=[];return s&&s.call(e,(function(t,r){st.push(F(r,e,!0)+" => "+F(t,e))})),Z("Map",o.call(e),st,C)}if(function(t){if(!c||!t||"object"!=typeof t)return!1;try{c.call(t);try{o.call(t)}catch(t){return!0}return t instanceof Set}catch(t){}return!1}(e)){var at=[];return l&&l.call(e,(function(t){at.push(F(t,e))})),Z("Set",c.call(e),at,C)}if(function(t){if(!f||!t||"object"!=typeof t)return!1;try{f.call(t,f);try{h.call(t,h)}catch(t){return!0}return t instanceof WeakMap}catch(t){}return!1}(e))return Y("WeakMap");if(function(t){if(!h||!t||"object"!=typeof t)return!1;try{h.call(t,h);try{f.call(t,f)}catch(t){return!0}return t instanceof WeakSet}catch(t){}return!1}(e))return Y("WeakSet");if(function(t){if(!d||!t||"object"!=typeof t)return!1;try{return d.call(t),!0}catch(t){}return!1}(e))return Y("WeakRef");if(function(t){return!("[object Number]"!==W(t)||P&&"object"==typeof t&&P in t)}(e))return $(F(Number(e)));if(function(t){if(!t||"object"!=typeof t||!T)return!1;try{return T.call(t),!0}catch(t){}return!1}(e))return $(F(T.call(e)));if(function(t){return!("[object Boolean]"!==W(t)||P&&"object"==typeof t&&P in t)}(e))return $(p.call(e));if(function(t){return!("[object String]"!==W(t)||P&&"object"==typeof t&&P in t)}(e))return $(F(String(e)));if(!function(t){return!("[object Date]"!==W(t)||P&&"object"==typeof t&&P in t)}(e)&&!G(e)){var ut=Q(e,F),ct=j?j(e)===Object.prototype:e instanceof Object||e.constructor===Object,lt=e instanceof Object?"":"null prototype",ft=!ct&&P&&Object(e)===e&&P in e?b.call(W(e),8,-1):lt?"Object":"",ht=(ct||"function"!=typeof e.constructor?"":e.constructor.name?e.constructor.name+" ":"")+(ft||lt?"["+A.call(S.call([],ft||[],lt||[]),": ")+"] ":"");return 0===ut.length?ht+"{}":C?ht+"{"+X(ut,C)+"}":ht+"{ "+A.call(ut,", ")+" }"}return String(e)};var z=Object.prototype.hasOwnProperty||function(t){return t in this};function H(t,e){return z.call(t,e)}function W(t){return y.call(t)}function V(t,e){if(t.indexOf)return t.indexOf(e);for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}function K(t){var e=t.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return r?"\\\\"+r:"\\\\x"+(e<16?"0":"")+w.call(e.toString(16))}function $(t){return"Object("+t+")"}function Y(t){return t+" { ? }"}function Z(t,e,r,n){return t+" ("+e+") {"+(n?X(r,n):A.call(r,", "))+"}"}function X(t,e){if(0===t.length)return"";var r="\\n"+e.prev+e.base;return r+A.call(t,","+r)+"\\n"+e.prev}function Q(t,e){var r=B(t),n=[];if(r){n.length=t.length;for(var i=0;i<t.length;i++)n[i]=H(t,i)?e(t[i],t):""}var o,s="function"==typeof C?C(t):[];if(I){o={};for(var a=0;a<s.length;a++)o["$"+s[a]]=s[a]}for(var u in t)H(t,u)&&(r&&String(Number(u))===u&&u<t.length||I&&o["$"+u]instanceof Symbol||(_.call(/[^\\w$]/,u)?n.push(e(u,t)+": "+e(t[u],t)):n.push(u+": "+e(t[u],t))));if("function"==typeof C)for(var c=0;c<s.length;c++)R.call(t,s[c])&&n.push("["+e(s[c])+"]: "+e(t[s[c]],t));return n}},function(t,e){},function(t,e,r){"use strict";var n=r(71),i=Object.prototype.hasOwnProperty,o=Array.isArray,s={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(t){return t.replace(/&#(\\d+);/g,(function(t,e){return String.fromCharCode(parseInt(e,10))}))},u=function(t,e){return t&&"string"==typeof t&&e.comma&&t.indexOf(",")>-1?t.split(","):t},c=function(t,e,r,n){if(t){var o=r.allowDots?t.replace(/\\.([^.[]+)/g,"[$1]"):t,s=/(\\[[^[\\]]*])/g,a=r.depth>0&&/(\\[[^[\\]]*])/.exec(o),c=a?o.slice(0,a.index):o,l=[];if(c){if(!r.plainObjects&&i.call(Object.prototype,c)&&!r.allowPrototypes)return;l.push(c)}for(var f=0;r.depth>0&&null!==(a=s.exec(o))&&f<r.depth;){if(f+=1,!r.plainObjects&&i.call(Object.prototype,a[1].slice(1,-1))&&!r.allowPrototypes)return;l.push(a[1])}return a&&l.push("["+o.slice(a.index)+"]"),function(t,e,r,n){for(var i=n?e:u(e,r),o=t.length-1;o>=0;--o){var s,a=t[o];if("[]"===a&&r.parseArrays)s=[].concat(i);else{s=r.plainObjects?Object.create(null):{};var c="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,l=parseInt(c,10);r.parseArrays||""!==c?!isNaN(l)&&a!==c&&String(l)===c&&l>=0&&r.parseArrays&&l<=r.arrayLimit?(s=[])[l]=i:"__proto__"!==c&&(s[c]=i):s={0:i}}i=s}return i}(l,e,r,n)}};t.exports=function(t,e){var r=function(t){if(!t)return s;if(null!==t.decoder&&void 0!==t.decoder&&"function"!=typeof t.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==t.charset&&"utf-8"!==t.charset&&"iso-8859-1"!==t.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var e=void 0===t.charset?s.charset:t.charset;return{allowDots:void 0===t.allowDots?s.allowDots:!!t.allowDots,allowPrototypes:"boolean"==typeof t.allowPrototypes?t.allowPrototypes:s.allowPrototypes,allowSparse:"boolean"==typeof t.allowSparse?t.allowSparse:s.allowSparse,arrayLimit:"number"==typeof t.arrayLimit?t.arrayLimit:s.arrayLimit,charset:e,charsetSentinel:"boolean"==typeof t.charsetSentinel?t.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof t.comma?t.comma:s.comma,decoder:"function"==typeof t.decoder?t.decoder:s.decoder,delimiter:"string"==typeof t.delimiter||n.isRegExp(t.delimiter)?t.delimiter:s.delimiter,depth:"number"==typeof t.depth||!1===t.depth?+t.depth:s.depth,ignoreQueryPrefix:!0===t.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof t.interpretNumericEntities?t.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof t.parameterLimit?t.parameterLimit:s.parameterLimit,parseArrays:!1!==t.parseArrays,plainObjects:"boolean"==typeof t.plainObjects?t.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof t.strictNullHandling?t.strictNullHandling:s.strictNullHandling}}(e);if(""===t||null==t)return r.plainObjects?Object.create(null):{};for(var l="string"==typeof t?function(t,e){var r,c={__proto__:null},l=e.ignoreQueryPrefix?t.replace(/^\\?/,""):t,f=e.parameterLimit===1/0?void 0:e.parameterLimit,h=l.split(e.delimiter,f),d=-1,p=e.charset;if(e.charsetSentinel)for(r=0;r<h.length;++r)0===h[r].indexOf("utf8=")&&("utf8=%E2%9C%93"===h[r]?p="utf-8":"utf8=%26%2310003%3B"===h[r]&&(p="iso-8859-1"),d=r,r=h.length);for(r=0;r<h.length;++r)if(r!==d){var y,g,m=h[r],b=m.indexOf("]="),v=-1===b?m.indexOf("="):b+1;-1===v?(y=e.decoder(m,s.decoder,p,"key"),g=e.strictNullHandling?null:""):(y=e.decoder(m.slice(0,v),s.decoder,p,"key"),g=n.maybeMap(u(m.slice(v+1),e),(function(t){return e.decoder(t,s.decoder,p,"value")}))),g&&e.interpretNumericEntities&&"iso-8859-1"===p&&(g=a(g)),m.indexOf("[]=")>-1&&(g=o(g)?[g]:g),i.call(c,y)?c[y]=n.combine(c[y],g):c[y]=g}return c}(t,r):t,f=r.plainObjects?Object.create(null):{},h=Object.keys(l),d=0;d<h.length;++d){var p=h[d],y=c(p,l[p],r,"string"==typeof t);f=n.merge(f,y,r)}return!0===r.allowSparse?f:n.compact(f)}},function(t,e){t.exports={getPalette:(t,{debug:e=!1}={debug:!1})=>{e&&console.log("starting getPalette with image",t);const{fileDirectory:r}=t,{BitsPerSample:n,ColorMap:i,ImageLength:o,ImageWidth:s,PhotometricInterpretation:a,SampleFormat:u,SamplesPerPixel:c}=r;if(!i)throw new Error("[geotiff-palette]: the image does not contain a color map, so we can\'t make a palette.");const l=Math.pow(2,n);e&&console.log("[geotiff-palette]: count:",l);const f=i.length/3;if(e&&console.log("[geotiff-palette]: bandSize:",f),f!==l)throw new Error("[geotiff-palette]: can\'t handle situations where the color map has more or less values than the number of possible values in a raster");const h=f,d=h+f,p=[];for(let t=0;t<l;t++)p.push([Math.floor(i[t]/256),Math.floor(i[h+t]/256),Math.floor(i[d+t]/256),255]);return e&&console.log("[geotiff-palette]: result is ",p),p}}},function(t,e,r){var n,i=Object.defineProperty,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,u=(t,e,r)=>e in t?i(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,c=(t,e)=>i(t,"name",{value:e,configurable:!0});const l=r(152),f=r(187),h=r(189),d=c(t=>new Array(t).fill(0).map((t,e)=>e),"range");function p(t,e={}){var r=e,{bands:n,height:i,precise:c=!1,stats:p,width:y,layout:g}=r,m=((t,e)=>{var r={};for(var n in t)s.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&o)for(var n of o(t))e.indexOf(n)<0&&a.call(t,n)&&(r[n]=t[n]);return r})(r,["bands","height","precise","stats","width","layout"]);if("function"==typeof t.then)throw new Error("[calc-image-stats] you passed in a promise as the data values.  please resolve the promise first before calling calcImageStats");const b=f({bands:n,data:t,height:i,layout:g,width:y});null!=n||(n=b.bands),null!=i||(i=b.height),null!=g||(g=b.layout),null!=y||(y=b.width);const v=d(n).map(e=>{let r;const f=((t,e)=>{for(var r in e||(e={}))s.call(e,r)&&u(t,r,e[r]);if(o)for(var r of o(e))a.call(e,r)&&u(t,r,e[r]);return t})({precise:c,stats:p},m);if(["[band][row,column]","[band][column,row]"].includes(g))r=t[e];else if(["[band][row][column]","[band][column][row]"].includes(g))r=t[e],f.chunked=!0;else if(1===n&&["[band,row,column]","[row,column,band]","[column,band,row]","[column,row,band]"].includes(g))r=t;else{const o={band:[e,e]},s={band:n,column:y,row:i};r=h.iterClip({data:t,layout:g,rect:o,sizes:s})}return l(r,f)});return{depth:n,height:i,width:y,bands:v}}c(p,"calcImageStats"),void 0!==(n=function(){return p}.call(e,r,e,t))&&(t.exports=n),t.exports=p,t.exports.default=p,t.exports.calcImageStats=p,"object"==typeof self&&(self.calcImageStats=p),"object"==typeof window&&(self.calcImageStats=p)},function(t,e,r){var n;const{getOrCreateIterator:i}=r(72),{add:o,compare:s,divide:a,mean:u,multiply:c,pow:l,sort:f,subtract:h,sum:d}=r(153),p=r(176);function y(t,{async:e=!1,chunked:r=!1,noData:n,filter:d,calcCount:y=!0,calcHistogram:g=!0,calcInvalid:m=!0,calcMax:b=!0,calcMean:v=!0,calcMedian:w=!0,calcMin:x=!0,calcMode:_=!0,calcModes:S=!0,calcProduct:A=!0,calcRange:E=!0,calcStd:k=!0,calcSum:T=!0,calcValid:C=!0,calcVariance:O=!0,calcUniques:I=!0,precise:P=!1,precise_max_decimal_digits:R=100,stats:j}={debugLevel:0}){j&&(j.forEach(t=>{["count","histogram","invalid","max","mean","median","min","mode","modes","product","range","sum","std","valid","variance","uniques"].includes(t)||console.warn(`[calc-stats] skipping unknown stat "${t}"`)}),y=j.includes("count"),g=j.includes("histogram"),m=j.includes("invalid"),b=j.includes("max"),v=j.includes("mean"),w=j.includes("median"),x=j.includes("min"),_=j.includes("mode"),S=j.includes("modes"),A=j.includes("product"),E=j.includes("range"),k=j.includes("std"),T=j.includes("sum"),C=j.includes("valid"),O=j.includes("variance"),I=j.includes("uniques"));const M=i(t);let L,F,N,D=g||w||_||S||O||k||I,U=y||v||w||A||C||O||k||"function"==typeof d,B=y||m||"function"==typeof d,G=T||v||O||k,q=x||E,z=b||E,H=A,W=0,V=0,K=0,$=P?"0":0;const Y={};let Z,X;Z=P?t=>{t=t.toString(),U&&W++,!q||void 0!==L&&"<"!==s(t,L)||(L=t),!z||void 0!==F&&">"!==s(t,F)||(F=t),H&&(N=1===W?t:c(N,t)),G&&($=o($,t)),D&&(t in Y?Y[t].ct++:Y[t]={n:t.toString(),ct:1})}:t=>{U&&W++,q&&(void 0===L||t<L)&&(L=t),z&&(void 0===F||t>F)&&(F=t),H&&(N=1===W?t:N*t),G&&($+=t),D&&(t in Y?Y[t].ct++:Y[t]={n:t,ct:1})},X="number"==typeof n&&"function"==typeof d?t=>{K++,"number"!=typeof t||isNaN(t)||t===n||!0!==d({valid:W,index:K,value:t})?B&&V++:Z(t)}:"number"==typeof n?t=>{"number"!=typeof t||isNaN(t)||t===n?B&&V++:Z(t)}:"function"==typeof d?t=>{K++,"number"!=typeof t||isNaN(t)||!0!==d({valid:W,index:K,value:t})?B&&V++:Z(t)}:t=>{"number"!=typeof t||isNaN(t)?B&&V++:Z(t)};const Q=()=>{const t={};if(y&&(t.count=P?o(V.toString(),W.toString()):V+W),C&&(t.valid=P?W.toString():W),m&&(t.invalid=P?V.toString():V),w&&(t.median=p.calculate({counts:Y,precise:P,total:W})),x&&(t.min=L),b&&(t.max=F),A&&(t.product=N),T&&(t.sum=$),E&&(t.range=P?h(F.toString(),L.toString()):F-L),v||O||k){const e=P?a($,W.toString(),{max_decimal_digits:R}):$/W;if(v&&(t.mean=e),O||k){const r=(({count:t,histogram:e,mean_value:r,precise:n=!1})=>{if(n){r=r.toString();const n=Object.values(e).reduce((t,{n:e,ct:n})=>{const i=h(e.toString(),r);return o(t,c(n.toString(),l(i,"2")))},"0");return a(n,t.toString())}return Object.values(e).reduce((t,{n:e,ct:n})=>t+n*Math.pow(e-r,2),0)/t})({count:W,histogram:Y,mean_value:e,precise:P});O&&(t.variance=r),k&&(t.std=P?Math.sqrt(Number(r)).toString():Math.sqrt(r))}}if(g&&(P&&Object.values(Y).forEach(t=>{t.ct=t.ct.toString()}),t.histogram=Y),_||S){let e=0,r=[];for(let t in Y){const{n:n,ct:i}=Y[t];i===e?r.push(P?n.toString():n):i>e&&(e=i,r=[P?n.toString():n])}S&&(t.modes=r),_&&(t.mode=P?u(r):r.reduce((t,e)=>t+e,0)/r.length)}return I&&(t.uniques=P?f(Object.keys(Y)):Object.values(Y).map(({n:t})=>t).sort((t,e)=>t-e)),t};if(r){if(e)return(async()=>{for await(let t of M)for(let e of t)X(e);return Q()})();for(let t of M)for(let e of t)X(e);return Q()}if(e)return(async()=>{for await(let t of M)X(t);return Q()})();for(let t of M)X(t);return Q()}void 0===(n=function(){return y}.call(e,r,e,t))||(t.exports=n),t.exports=y,t.exports.default=y,t.exports.calcStats=y,"object"==typeof self&&(self.calcStats=y),"object"==typeof window&&(window.calcStats=y)},function(t,e,r){"use strict";var n;const i=r(4),o=r(6),s=r(154),a=r(76),u=r(0),c=r(34),l=r(5),f=r(156),h=r(158),d=r(51),p=r(84),y=r(162),g=r(163),m=r(1),b=r(88),v=r(89),w=r(73),x=r(75),_=r(164),S=r(165),A=r(77),E=r(166),k=r(167),T=r(15),C=r(16),O=r(90),I=r(91),P=r(11),R=r(8),j=r(32),M=r(48),L=r(31),F=r(168),N={absolute:i,add:o,binomial_coefficient:s,ceil:a,clean:u,compare:c,compare_positive:l,constants:f,cosine_radians:h,count_decimal_digits:d,count_integer_digits:p,cube:y,cube_root:g,divide:m,eulers_number:b,exp:v,expand:w,factorial:x,flip_sign:_,floor:S,fraction:A,hypotenuse:E,is_infinity:T,is_integer:C,is_factorial:k,is_negative_infinity:O,is_positive_infinity:I,is_zero:P,long_addition:R,long_division:j,long_multiplication:M,long_subtraction:L,mean:r(169),max:F,min:r(86),multiply:r(53),multiply_array:r(79),multiply_range:r(47),nilakantha:r(170),ols:r(171),pow:r(35),pow_positive:r(54),primes:r(87),reciprocal:r(81),remainder:r(172),root:r(37),root_integer_digits:r(83),round:r(36),round_last_decimal:r(49),sign:r(22),sign_nonzero:r(50),simplify_fraction:r(85),sine_radians:r(173),softmax:r(174),sort:r(175),square:r(23),square_root:r(92),subtract:r(33),sum:r(55),truncate:r(93)};void 0===(n=function(){return N}.call(e,r,e,t))||(t.exports=n),t.exports=N,t.exports.default=N,"object"==typeof window&&(window.preciso=N),"object"==typeof self&&(self.preciso=N)},function(t,e,r){"use strict";const n=r(0),i=r(5),o=r(75),s=r(8),a=r(31),u=r(32),c=r(47);function l(t,e){switch(t=n(t),e=n(e),i(t,e)){case"=":return"1";case">":{const r=a(t,e),n=c(s(e,"1"),t),i=o(r);return u(n,i)}case"<":throw new Error("[binominal_coefficient] unsupported")}}t.exports=l,t.exports.default=l},function(t,e,r){"use strict";function n(t){return t.substring(0,t.indexOf("."))}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const{MAX_SAFE_INTEGER:n}=r(74),{MAX_SAFE_INTEGER_LENGTH:i}=r(30),{PI:o}=r(157);t.exports={MAX_SAFE_INTEGER:n,MAX_SAFE_INTEGER_LENGTH:i,PI:o}},function(t,e){t.exports={PI_100:"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679"}},function(t,e,r){"use strict";const n=r(6),i=r(11),o=r(23),s=r(17),a=r(1);function u(t,{steps:e=100,max_decimal_digits:r=100}={}){if(i(t))return"0";let u,c="-",l="1",f=e,h=o(t),d="1",p="1",y="0";for(let t=0;t<f;t++){u=n(y,"1"),y=n(u,"1"),d=s([d,h],{max_decimal_digits:r}),p=s([p,u,y],{max_decimal_digits:r});const t=a(d,p,{max_decimal_digits:r});l=n(l,c+t),c="-"===c?"+":"-"}return l}t.exports=u,t.exports.default=u},function(t,e,r){"use strict";const n=r(0),i=r(51),o=r(4),s=r(80),a=r(49),u=["5","6","7","8","9"];function c(t,{digits:e=0}={digits:0}){const r=t=n(t),c=s(t)?"-":"",l=(t=o(t)).indexOf(".");if(-1===l)return r;if(i(t)<=e)return r;const f=t[l+e+1];if(u.includes(f)){const r=t.substring(0,l+e+2);return c+a(r)}if(0===e)return c+t.substring(0,l);return c+t.substring(0,l+e+1)}t.exports=c,t.exports.default=c},function(t,e,r){"use strict";function n(t){return t.includes("/")}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";function n(t){return t.split("/")}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const n=r(35);function i(t,e){return n(t,"3",e)}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(37);function i(t,e){return n(t,"3",e)}t.exports=i,t.exports.default=i},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(22);function s(t){t=i(t);const e=o(t);return""===e?t:"-"===e?n(t):"+"===e?"-"+t:sum}t.exports=s,t.exports.default=s},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(8),s=r(22);function a(t){if(-1===(t=i(t)).indexOf("."))return t;const e=s(t);return t=n(t).split(".")[0],"+"===e?t:"-"===e?"0"===t||""===t?"-1":"-"+o(t,"1"):void 0}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";const n=r(23),i=r(92),o=r(55);function s(){const t=Array.from(arguments),e="object"==typeof t[t.length-1]?t[t.length-1]:void 0,r=Array.isArray(t[0])?t[0]:e?t.slice(0,t.length-1):t,s=r.map(t=>n(t));return i(o(s),e)}t.exports=s,t.exports.default=s},function(t,e,r){"use strict";function n(t){return!!t.match(/^\\d+!$/i)}t.exports=n,t.exports.default=n},function(t,e,r){"use strict";const n=r(0),i=r(34);function o(t){"string"==typeof t&&(t=Array.prototype.slice.call(arguments));let e=n(t[0]);const r=t.length;for(let n=1;n<r;n++){const r=t[n];">"===i(r,e)&&(e=r)}return e}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(6),i=r(1);function o(t,e){let r=0,o="0";for(let e of t)r++,o=n(o,e);return i(o,r.toString(),e)}t.exports=o,t.exports.default=o},function(t,e,r){"use strict";const n=r(6),i=r(8),o=r(1),s=r(17);function a(t=100,{divide_options:e}={}){let r="+",a="3",u="2",c="3",l="4";for(let f=1;f<t;f++){const t=s([u,c,l]),f=r+o("4",t,e);a=n(a,f),r="-"===r?"+":"-",u=l,c=i(l,"1"),l=i(c,"1")}return a}t.exports=a,t.exports.default=a},function(t,e,r){"use strict";const n=r(6),i=r(1),o=r(17),s=r(36),a=r(33),u=r(23);function c(t,e){const r=t.length;let c="0",l="0",f="0",h="0";if(0===r)throw Error("[preciso] zero points passed to linear_regression");for(let e=0;e<r;e++){const[r,i]=t[e];c=n(c,r),l=n(l,u(r)),f=n(f,i),h=n(h,u(i))}const d=r.toString(),p=i(c,d),y=i(f,d);let g="0",m="0";for(let e=0;e<r;e++){const[r,i]=t[e],s=a(r,p),c=a(i,y),l=o([s,c]);g=n(g,l);const f=u(s);m=n(m,f)}let b=i(g,m),v=a(y,o(b,p));return e&&"number"==typeof e.max_decimal_digits&&(b=s(b,{digits:e.max_decimal_digits}),v=s(v,{digits:e.max_decimal_digits})),{m:b,b:v}}t.exports=c,t.exports.default=c},function(t,e,r){"use strict";const n=r(4),i=r(0),o=r(5),s=r(32),a=r(53),u=r(33),c=r(93);function l(t,e){t=i(t),e=i(e);const r="-"===t[0]?"-":"";t=n(t),e=n(e);const l=o(t,e);if("="===l)return"0";if("<"===l)return"."===t[0]&&(t="0"+t),r+t;const f=s(t,e,{max_decimal_places:0}),h=c(f),d=a(e,h);return r+u(t,d)}t.exports=l,t.exports.default=l},function(t,e,r){"use strict";const n=r(6),i=r(11),o=r(23),s=r(17),a=r(1);function u(t,{steps:e=100,max_decimal_digits:r=100}={}){if(i(t))return"0";let u,c="-",l=t,f=e,h=o(t),d=t,p="1",y="1";for(let t=0;t<f;t++){u=n(y,"1"),y=n(u,"1"),d=s([d,h],{max_decimal_digits:r}),p=s([p,u,y],{max_decimal_digits:r});const t=a(d,p,{max_decimal_digits:r});l=n(l,c+t),c="-"===c?"+":"-"}return l}t.exports=u,t.exports.default=u},function(t,e,r){"use strict";const n=r(1),i=r(89),o=r(55);function s(t,{max_decimal_digits:e}){t=t.map(t=>i(t,{max_decimal_digits:e}));const r=o(t);return t.map(t=>n(t,r,{max_decimal_digits:e,ellipsis:!1}))}t.exports=s,t.exports.default=s},function(t,e,r){"use strict";const n=r(34);function i(t,{direction:e="ascending"}={direction:"ascending"}){const r="desc"===e||"descending"===e?"<":">";return t.sort((t,e)=>n(t,e)===r?1:-1)}t.exports=i,t.exports.default=i},function(t,e,r){var n;const i=r(177),o=r(186);function s({counts:t,nums:e,no_data:r,precise:n,threshold:s=50,total:a}){return void 0!==t||void 0!==a||e.length>s?i({counts:t,no_data:r,nums:e,precise:n,total:a}):o({no_data:r,nums:e,precise:n})}const a={calculate:s};void 0===(n=function(){return a}.call(e,r,e,t))||(t.exports=n),t.exports=a,t.exports.default={calculate:s},"object"==typeof window&&(window.mediana=a),"object"==typeof self&&(self.mediana=a)},function(t,e,r){const n=r(178),i=r(94);function o({counts:t,nums:e,no_data:r,precise:o=!1,total:s}){void 0!==t&&void 0!==s||({counts:t,total:s}=n({nums:e,no_data:r}));const a=Object.values(t).sort((t,e)=>t.n-e.n),u=s/2,c=a.length;if(0!==c){if(1===c)return o?a[0].n.toString():a[0].n;{let t=0;if(s%2==0)for(let e=0;e<c;e++){const{n:r,ct:n}=a[e];if(t+=n,t>u)return t-n===u?i(a[e-1].n,r,{precise:o}):o?r.toString():r}else for(let e=0;e<c;e++){const{n:r,ct:n}=a[e];if(t+=n,t>u)return o?r.toString():r}}}}t.exports=o,t.exports.default=o},function(t,e){function r({nums:t,no_data:e}){let r=t.length;const n={};let i=0;if(void 0!==e)for(let o=0;o<r;o++){const r=t[o];r!==e&&(i++,r in n?n[r].ct++:n[r]={n:r,ct:1})}else for(let e=0;e<r;e++){const r=t[e];i++,r in n?n[r].ct++:n[r]={n:r,ct:1}}return{counts:n,total:i}}t.exports=r,t.exports.default=r},function(t,e){function r(t){"+"===t[0]&&(t=t.substring(1));const e="-"===t[0]?"-":"";"-"===e&&(t=t.substring(1));const r=t.indexOf("e");if(-1===r)return e+t;let n=t.indexOf(".");-1===n&&(n=r);const i=Number(t.substring(r+1)),o=t.substring(0,r).replace(".",""),s=n+i,a=o.length;if(s>=a){const t=s-a;let r=o;for(let e=0;e<t;e++)r+="0";return e+r}if(s<0){result="0.";for(let t=0;t>s;t--)result+="0";return result+=o,e+result}return e+o.substring(0,s)+"."+o.substring(s)}t.exports=r,t.exports.default=r},function(t,e,r){const n=r(98),i=r(18),o=r(181);function s(t,e,r){if(t=i(t),"0"===(e=i(e)))throw new Error("[preciso] division by zero");if(""===t||"0"===t)return"0";const s="-"!==t[0],a="-"!==e[0],u=s!==a?"-":"";return s||(t=n(t)),a||(e=n(e)),u+o(t,e,r)}t.exports=s,t.exports.default=s},function(t,e,r){const n=r(38),i=r(95),o=(r(182),r(184)),s=r(185);t.exports=function(t,e,{max_decimal_digits:r=100,ellipsis:a=!1}={}){"0"===t[0]&&(t=t.substring(1)),"0"===e[0]&&(e=e.substring(1));const u=t.indexOf("."),c=e.indexOf("."),l=-1===u?t.length:u,f=-1===c?0:e.length-1-c;let h=!1;t=t.replace(/\\./,""),e=e.replace(/\\./,"");const d=t.length;let p,y="",g="",m=-1*f,b=0;for(let r=0;r<d;r++){if(y+=t[r],p=n(y,e),">"===p){let t=1,r=i(e,e),s=e;for(;">"!==n(r,y);)t++,s=r,r=i(r,e);if(t=t.toString(),""!==g)for(let e=t.length;e<=b;e++)g+="0";g+=t,y=o(y,s),b=0}else{if("<"===p){""===g&&m++,b++;continue}if("="===p){if(""!==g)for(let t=0;t<b;t++)g+="0";g+="1",y="0",b=0}}}if(y.match(/^0+$/g))"<"===p&&(g+=y.substring(0,y.length-1));else{const t={},s=l-m-g.length+r+1;""===g&&(b=0);for(let r=0;r<s;r++){if(y+="0",a)if(y in t){if(t[y]++,t[y]>3){g+="...",h=!0;break}}else t[y]=1;const r=n(y,e);if(">"===r){let t=1,r=i(e,e),s=e;for(;">"!==n(r,y);)t++,s=r,r=i(r,e);t=t.toString();for(let e=t.length;e<=b;e++)g+="0";if(g+=t,y=o(y,s),"0"===y)break;b=0}else{if("<"===r){b++;continue}if("="===r){for(let t=0;t<b;t++)g+="0";g+="1",b=0;break}}}}const v=l-m,w=g.length;let x;if(v===w)x=0;else if(v<0)g="0."+"0".repeat(Math.abs(v))+g,x=w-v;else if(v>w){for(let t=w;t<v;t++)g+="0";x=0}else v<w?(g=g.substring(0,v)+"."+g.substring(v),x=w-v):0===v&&(g="0."+g,x=w);if(g=g.replace(/^0+/,""),g=g.replace(/\\.\\d+0+$/,""),!h){const t=x-r;t>0&&(g=s(g.substring(0,g.length-t+1)))}return"."===g[0]&&(g="0"+g),g}},function(t,e,r){const n=r(98),i=r(18),o=r(38),s=r(183);function a(t,e){t=i(t),e=i(e);const r="-"!==t[0]!==("-"!==e[0])?"-":"";t=n(t),e=n(e);if("<"===o(t,e)){const r=t;t=e,e=r}return r+s(t,e)}t.exports=a,t.exports.default=a},function(t,e,r){const{MAX_SAFE_INTEGER_LENGTH:n}=r(56);t.exports=function(t,e){if("0"===t||"0"===e)return"0";const r=t.indexOf("."),i=e.indexOf("."),o=(-1===r?t.length:r)+(-1===i?e.length:i),s=(-1===r?0:t.length-1-r)+(-1===i?0:e.length-1-i);if(0===s&&o<n)return(Number(t)*Number(e)).toFixed(0);const a=t.replace(".",""),u=e.replace(".",""),c=a.length,l=u.length,f=[];let h=c;for(;h>=0;){const t=h,e=h-=15,r=a.substring(e,t);f.push([Number(r),r.length])}const d=[],p=[];for(let t=0,e=l-1;e>=0;e--,t++){const r=u[e],n=Number(r);let i=0,o="";const s=f.length-1;f.forEach(([t,e],r)=>{let a=(i+n*t).toString();const u=a.length;if(u>e&&r!==s){const t=-1*e;o=a.slice(t)+o,i=Number(a.slice(0,t))}else{const t=e-u;for(let e=0;e<t;e++)a="0"+a;i=0,o=a+o}}),o+="0".repeat(t),d.push(o),p.push([Array.from(o).map(t=>Number(t)),o.length])}const y=d.length,g=p[p.length-1][1]+y;let m="",b=0;for(let t=0;t<g;t++){let e=b;const r=Math.min(t,y-1);for(let n=0;n<=r;n++){const[r,i]=p[n],o=i-1-t;o>=0&&(e+=r[o])}e>=10?(e=e.toString(),m=e[e.length-1]+m,b=Number(e.slice(0,-1))):(m=e+m,b=0)}if(0===s)m=m.replace(/^0+/,"");else{const t=m.length-s;m=m.substring(0,t)+"."+m.substring(t),m=m.replace(/^0+/,""),m=m.replace(/\\.?0+$/,""),"."===m[0]&&(m="0"+m)}return m}},function(t,e,r){const n=r(18),i=r(38),o=r(96),s=r(97);function a(t,e){t=n(t),e=n(e);const r="-"!==t[0],a="-"!==e[0];if(r){if(a){const r=i(t,e);return">"===r?s(t,e):"<"===r?"-"+s(e,t):"0"}return o(t,e.substring(1))}if(a)return"-"+o(t.substring(1),e);{t=t.substring(1),e=e.substring(1);const r=i(t,e);return">"===r?"-"+s(t,e):"<"===r?s(e,t):"0"}}t.exports=a,t.exports.default=a},function(t,e){const r=["5","6","7","8","9"];t.exports=function(t){"+"===t[0]&&(t=t.substring(1));const e=t.length;let n="";const i=t[t.length-1];if(r.includes(i)){let r;for(r=e-2;r>=0;r--){const e=t[r];if("."===e||"-"===e)continue;const i=Number(e)+1;if(10!==i){n=i+n;break}n="0"+n}r>0&&(n=t.substring(0,r)+n)}else n=t.substring(0,e-1);return"."===n[n.length-1]&&(n=n.substring(0,n.length-1)),n.indexOf(".")>-1&&(n=n.replace(/0+$/,"")),n}},function(t,e,r){const n=r(94);function i({nums:t,no_data:e,precise:r=!1}){switch((t=t.filter(t=>t!==e).sort((t,e)=>t-e)).length){case 0:return;case 1:return r?t[0].toString():t[0];default:const e=t.length/2;if(t.length%2==0)return n(t[e-1],t[e],{precise:r});{const n=Math.floor(e);return r?t[n].toString():t[n]}}}t.exports=i,t.exports.default=i},function(t,e,r){var n;const i=r(188);function o({bands:t,data:e,height:r,layout:n,width:o}){const s=i(e);if("[row,column,band]"===n||1===s)return{layout:"[row,column,band]",bands:t||(r&&o?e.length/(r*o):void 0),height:r||(t&&o?e.length/(t*o):void 0),width:o||(t&&r?e.length/(t*r):void 0)};if(2===s){if(!r||!o)return e.length<e[0].length?{bands:e.length,layout:"[band][row,column]",height:r||(o?e[0].length/o:void 0),width:o||(r?e[0].length/r:void 0)}:{bands:e[0].length,layout:"[row,column][band]",height:r||(o?e.length/o:void 0),width:o||(r?e.length/r:void 0)};if(e[0].length===r*o)return{layout:"[band][row,column]",bands:e.length,height:r,width:o};if(e.length===r*o)return{layout:"[row,column][band]",bands:e[0].length,height:r,width:o}}else if(3===s){const t=e.length,n=e[0].length,i=e[0][0].length;if(r&&o){if(t===r&&n===o)return{layout:"[row][column][band]",bands:i,height:r,width:o};if(n===r&&i===o)return{layout:"[band][row][column]",bands:t,height:r,width:o}}else{if(t<n&&t<i)return{layout:"[band][row][column]",bands:t,height:n,width:i};if(i<t&&i<n)return{layout:"[row][column][band]",bands:i,height:t,width:n}}}}void 0===(n=function(){return o}.call(e,r,e,t))||(t.exports=n),t.exports=o,t.exports.default=o,t.exports.guessImageLayout=o,"object"==typeof window&&(window.guessImageLayout=o),"object"==typeof self&&(self.guessImageLayout=o)},function(t,e){t.exports=function(t){const e=t=>Array.isArray(t)||t instanceof Int8Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array||t instanceof BigInt64Array||t instanceof BigUint64Array;let r=0,n=t;for(;e(n);)r++,n=n[0];return r}},function(t,e,r){const n={},{wrapNextFunction:i}=r(72),o=r(190),s=r(191),a={Array:Array,Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Float32Array:Float32Array,Float64Array:Float64Array};try{a.BigInt64Array=BigInt64Array,a.BigUint64Array=BigUint64Array}catch(t){}const u=t=>t.match(/\\[[^\\]]+\\]/g),c=t=>t.startsWith("[")&&t.endsWith("]")?t.substring(1,t.length-1):t,l=t=>t.startsWith("(")&&t.endsWith(")")?t.substring(1,t.length-1):t,f=t=>t.match(/(\\(.*?\\)|[^\\(,\\s]+)(?=\\s*,|\\s*$)/g),h=t=>{t=c(t),t=l(t);const e=f(t);return 1===e.length?{type:"Vector",dim:e[0]}:{type:"Matrix",parts:e.map(h)}};function d(t){const e=t.match(/[^ A-Za-z,\\[\\]]/g);if(e)throw new Error("The following invalid characters were used: "+e.map(t=>`"${t}"`).join(", "));return!0}function p(t,{useLayoutCache:e=!0}={useLayoutCache:!0}){if(e&&t in n)return n[t];d(t);const r=u(t).map(h),i={type:"Layout",summary:r.map(t=>"Matrix"===t.type?t.parts.length:1),dims:r};return e&&(n[t]=i),i}function y({useLayoutCache:t=!0,data:e,layout:r,sizes:n={}}){"string"==typeof r&&(r=p(r,{useLayoutCache:t}));const{dims:i}=r,o=i.length,a=m({useLayoutCache:t,layout:r,sizes:n}),u=o-1,c=r.summary.toString();if(c in s){const t={data:e};return r.dims.map((e,r)=>{"Vector"===e.type?t[`d${r}v0`]=e.dim:"Matrix"===e.type&&e.parts.forEach((e,n)=>{t[`d${r}v${n}`]=e.dim,t[`m${r}v${n}`]=a[e.dim]})}),s[c].bind(t)}return({point:t,value:r})=>{let n=e;for(let e=0;e<o;e++){const o=e===u,s=i[e];let c;c="Vector"===s.type?t[s.dim]:s.parts.reduce((e,{dim:r})=>e+a[r]*t[r],0),o?n[c]=r:n=n[c]}}}function g({rect:t={}}){if(t)for(let e in t){const r=t[e];if(2!==r.length)throw new Error("[xdim] uh oh. invalid hyper-rectangle");const[n,i]=r;if(n>i)throw new Error(`[xdim] uh oh. invalid range for "${e}".  Start of ${n} can\'t be greater than end of ${i}.`);if(n<0)throw new Error("[xdim] uh oh. invalid hyper-rectangle with start "+n)}}function m({useLayoutCache:t=!0,layout:e,sizes:r}){"string"==typeof e&&(e=p(e,{useLayoutCache:t}));const{dims:n}=e,i=n.length;let o={};for(let t=0;t<i;t++){const e=n[t];if("Vector"===e.type)o[e.dim]=1;else{const{parts:t}=e;let n=1;for(let e=t.length-1;e>=0;e--){const{dim:i}=t[e];o[i]=n,n*=r[t[e].dim]}}}return o}function b({useLayoutCache:t=!0,data:e,layout:r,point:n,sizes:i={}}){let o,s;"string"==typeof r&&(r=p(r,{useLayoutCache:t}));let a=e;const{dims:u}=r,c=u.length;for(let t=0;t<c;t++){const e=u[t];if("Vector"===e.type){const t=n[e.dim];o=a,s=t,a=a[t]}else{const{parts:t}=e;let r=0,u=1;for(let e=t.length-1;e>=0;e--){const o=t[e];if("Vector"===o.type){const{dim:t}=o;if(r+=u*n[t],e>0){if(!(t in i))throw new Error(`you cannot calculate the location without knowing the size of the "${t}" dimension.`);u*=i[t]}}}o=a,s=r,a=a[r]}}return{index:s,value:a,parent:o}}function v({arr:t,fill:e,lens:r,arrayTypes:n}){if(0===r.length)return t;const i=r[0];if(1===r.length){const r=n?n[n.length-1]:"Array";for(let n=0;n<t.length;n++)t[n]=new a[r](i).fill(e)}else for(let o=0;o<t.length;o++){const s=new Array(i).fill(e);t[o]=s,v({arr:s,fill:e,lens:r.slice(1),arrayTypes:n})}return t}function w({fill:t,shape:e,arrayTypes:r}){const n=e[0];if(1===e.length){if(Array.isArray(r)&&1!==r.length)throw new Error("[xdim] shape and arrayTypes have different lengths");const e=Array.isArray(r)?r[0]:"Array";return new a[e](n).fill(t)}return v({arr:new Array(n).fill(t),fill:t,lens:e.slice(1),arrayTypes:r})}function x({fill:t,layout:e,useLayoutCache:r=!0,sizes:n,arrayTypes:i}){"string"==typeof e&&(e=p(e,{useLayoutCache:r}));const o=e.dims.map(t=>"Vector"===t.type?n[t.dim]:"Matrix"===t.type?t.parts.reduce((t,e)=>{if(!(e.dim in n))throw new Error(`[xdim] could not find "${e.dim}" in sizes: { ${Object.keys(n).join(", ")} }`);return t*n[e.dim]},1):void 0);return{data:w({fill:t,shape:o,arrayTypes:i}),shape:o,arrayTypes:i}}function _({start:t=0,end:e=100}){let r=t-1;return e+=1,i((function(){return r++,r===e?{done:!0}:{done:!1,value:r}}))}function S({order:t,sizes:e,rect:r={}}){const n=Array.isArray(t)?t:Object.keys(e).sort((t,r)=>e[t]-e[r]),o=new Array(n.length),s={};for(let t=0;t<n.length-1;t++){const i=n[t],[a,u]=r[i]||[0,e[i]-1];o[t]=_({start:a+1,end:u}),s[i]=a}const a=n[n.length-1],[u,c]=r[a]||[0,e[a]-1];return o[o.length-1]=_({start:u,end:c}),s[a]=u-1,i((function(){for(let t=o.length-1;t>=0;t--){const{value:i,done:a}=o[t].next();if(!a){for(let i=t+1;i<o.length;i++){const t=n[i],[a,u]=r[t]||[0,e[t]-1];o[i]=_({start:a+1,end:u}),s[t]=a}return s[n[t]]=i,{value:s,done:!1}}if(0===t)return{done:!0}}}))}t.exports={addDims:v,checkValidity:d,createMatrix:w,iterClip:function({data:t,layout:e,order:r,rect:n={},sizes:o={},useLayoutCache:s=!0}){if(!t)throw new Error("[xdim] must specify data");if(!e)throw new Error("[xdim] must specify layout");const a=S({order:r,sizes:o,rect:n});return i((function(){const{value:r,done:n}=a.next();if(n)return{done:!0};{const{value:n}=b({data:t,layout:e,point:r,sizes:o,useLayoutCache:s});return{done:!1,value:n}}}))},iterRange:_,iterPoints:S,matchSequences:f,parse:p,parseDimensions:function(t){const e={},r=/[A-Za-z]+/g;let n;for(;null!==(n=r.exec(t));){const[t]=n;e[t]={name:t}}return e},parseSequences:h,parseVectors:u,prepareData:x,prepareSelect:function({useLayoutCache:t=!0,data:e,layout:r,sizes:n={}}){"string"==typeof r&&(r=p(r,{useLayoutCache:t}));const{dims:i}=r,s=i.length,a=m({useLayoutCache:t,layout:r,sizes:n}),u=s-1,c=r.summary.toString();if(c in o){const t={data:e};return r.dims.map((e,r)=>{"Vector"===e.type?t[`d${r}v0`]=e.dim:"Matrix"===e.type&&e.parts.forEach((e,n)=>{t[`d${r}v${n}`]=e.dim,t[`m${r}v${n}`]=a[e.dim]})}),o[c].bind(t)}return({point:t})=>{let r=e;for(let e=0;e<s;e++){const n=e===u,o=i[e];let s;if(s="Vector"===o.type?t[o.dim]:o.parts.reduce((e,{dim:r})=>e+a[r]*t[r],0),n)return{index:s,parent:r,value:r[s]};r=r[s]}}},prepareUpdate:y,removeBraces:c,removeParentheses:l,select:b,transform:function({data:t,fill:e,from:r,to:n,sizes:i,useLayoutCache:o=!0}){"string"==typeof r&&(r=p(r,{useLayoutCache:o})),"string"==typeof n&&(n=p(n,{useLayoutCache:o}));const{data:s}=x({fill:e,layout:n,sizes:i}),a=y({useLayoutCache:o,data:s,layout:n,sizes:i}),u=S({sizes:i});for(point of u){const{value:e}=b({data:t,layout:r,point:point,sizes:i});a({point:point,value:e})}return{data:s}},update:function({useLayoutCache:t=!0,data:e,layout:r,point:n,sizes:i={},value:o}){"string"==typeof r&&(r=p(r,{useLayoutCache:t}));const{dims:s}=r;for(let t=0;t<s.length;t++){const r=t===s.length-1,a=s[t];let u;if("Vector"===a.type)u=n[a.dim];else{const{parts:t}=a;u=0;let e=1;for(let r=t.length-1;r>=0;r--){const o=t[r],{dim:s}=o;if(u+=e*n[s],r>0){if(!(s in i))throw new Error(`you cannot calculate the location without knowing the size of the "${s}" dimension.`);e*=i[s]}}}r?e[u]=o:e=e[u]}},clip:function({useLayoutCache:t=!0,data:e,layout:r,rect:n,sizes:i={},flat:o=!1,validate:s=!0}){s&&g({rect:n}),"string"==typeof r&&(r=p(r,{useLayoutCache:t}));let a=[e];if(r.dims.forEach(t=>{let e=[];a.forEach(r=>{if("Vector"===t.type){const[i,o]=n[t.dim];e=e.concat(r.slice(i,o+1))}else{const{parts:o}=t;let s=[0],a=1;for(let t=o.length-1;t>=0;t--){const e=o[t],{dim:r}=e,[u,c]=n[r],l=[];for(let t=u;t<=c;t++)s.forEach(e=>{l.push(e+a*t)});s=l,a*=i[r]}s.forEach(t=>{e.push(r[t])})}}),a=e}),o)return{data:a};const u=Object.fromEntries(Object.entries(n).map(([t,[e,r]])=>[t,r-e+1])),{data:c}=x({layout:r,sizes:u}),l=r.dims.length,f=(t,e)=>{if(e===l)for(let e=0;e<t.length;e++)t[e]=a.shift();else t.forEach(t=>f(t,e+1))};return f(c,1),{data:c}},validateRect:g}},function(t,e){t.exports={1:function({point:t}){const e=this.data,r=t[this.d0v0];return{parent:e,index:r,value:e[r]}},2:function({point:t}){const e=this.data,r=this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1];return{parent:e,index:r,value:e[r]}},3:function({point:t}){const e=this.data,r=this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1]+this.m0v2*t[this.d0v2];return{parent:e,index:r,value:e[r]}},4:function({point:t}){const e=this.data,r=this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1]+this.m0v2*t[this.d0v2]+this.m0v3*t[this.d0v3];return{parent:e,index:r,value:e[r]}},5:function({point:t}){const e=this.data,r=this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1]+this.m0v2*t[this.d0v2]+this.m0v3*t[this.d0v3]+this.m0v4*t[this.d0v4];return{parent:e,index:r,value:e[r]}},"1,1":function({point:t}){const e=this.data[t[this.d0v0]],r=t[this.d1v0];return{parent:e,index:r,value:e[r]}},"1,2":function({point:t}){const e=this.data[t[this.d0v0]],r=this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1];return{parent:e,index:r,value:e[r]}},"1,3":function({point:t}){const e=this.data[t[this.d0v0]],r=this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1]+this.m1v2*t[this.d1v2];return{parent:e,index:r,value:e[r]}},"1,4":function({point:t}){const e=this.data[t[this.d0v0]],r=this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1]+this.m1v2*t[this.d1v2]+this.m1v3*t[this.d1v3];return{parent:e,index:r,value:e[r]}},"1,5":function({point:t}){const e=this.data[t[this.d0v0]],r=this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1]+this.m1v2*t[this.d1v2]+this.m1v3*t[this.d1v3]+this.m1v4*t[this.d1v4];return{parent:e,index:r,value:e[r]}},"1,1,1":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]],r=t[this.d2v0];return{parent:e,index:r,value:e[r]}},"1,1,2":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]],r=this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1];return{parent:e,index:r,value:e[r]}},"1,1,3":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]],r=this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1]+this.m2v2*t[this.d2v2];return{parent:e,index:r,value:e[r]}},"1,1,4":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]],r=this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1]+this.m2v2*t[this.d2v2]+this.m2v3*t[this.d2v3];return{parent:e,index:r,value:e[r]}},"1,1,5":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]],r=this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1]+this.m2v2*t[this.d2v2]+this.m2v3*t[this.d2v3]+this.m2v4*t[this.d2v4];return{parent:e,index:r,value:e[r]}},"1,1,1,1":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]],r=t[this.d3v0];return{parent:e,index:r,value:e[r]}},"1,1,1,2":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]],r=this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1];return{parent:e,index:r,value:e[r]}},"1,1,1,3":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]],r=this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1]+this.m3v2*t[this.d3v2];return{parent:e,index:r,value:e[r]}},"1,1,1,4":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]],r=this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1]+this.m3v2*t[this.d3v2]+this.m3v3*t[this.d3v3];return{parent:e,index:r,value:e[r]}},"1,1,1,5":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]],r=this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1]+this.m3v2*t[this.d3v2]+this.m3v3*t[this.d3v3]+this.m3v4*t[this.d3v4];return{parent:e,index:r,value:e[r]}},"1,1,1,1,1":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]],r=t[this.d4v0];return{parent:e,index:r,value:e[r]}},"1,1,1,1,2":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]],r=this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1];return{parent:e,index:r,value:e[r]}},"1,1,1,1,3":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]],r=this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1]+this.m4v2*t[this.d4v2];return{parent:e,index:r,value:e[r]}},"1,1,1,1,4":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]],r=this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1]+this.m4v2*t[this.d4v2]+this.m4v3*t[this.d4v3];return{parent:e,index:r,value:e[r]}},"1,1,1,1,5":function({point:t}){const e=this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]],r=this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1]+this.m4v2*t[this.d4v2]+this.m4v3*t[this.d4v3]+this.m4v4*t[this.d4v4];return{parent:e,index:r,value:e[r]}}}},function(t,e){t.exports={1:function({point:t,value:e}){this.data[t[this.d0v0]]=e},2:function({point:t,value:e}){this.data[this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1]]=e},3:function({point:t,value:e}){this.data[this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1]+this.m0v2*t[this.d0v2]]=e},4:function({point:t,value:e}){this.data[this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1]+this.m0v2*t[this.d0v2]+this.m0v3*t[this.d0v3]]=e},5:function({point:t,value:e}){this.data[this.m0v0*t[this.d0v0]+this.m0v1*t[this.d0v1]+this.m0v2*t[this.d0v2]+this.m0v3*t[this.d0v3]+this.m0v4*t[this.d0v4]]=e},"1,1":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]]=e},"1,2":function({point:t,value:e}){this.data[t[this.d0v0]][this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1]]=e},"1,3":function({point:t,value:e}){this.data[t[this.d0v0]][this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1]+this.m1v2*t[this.d1v2]]=e},"1,4":function({point:t,value:e}){this.data[t[this.d0v0]][this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1]+this.m1v2*t[this.d1v2]+this.m1v3*t[this.d1v3]]=e},"1,5":function({point:t,value:e}){this.data[t[this.d0v0]][this.m1v0*t[this.d1v0]+this.m1v1*t[this.d1v1]+this.m1v2*t[this.d1v2]+this.m1v3*t[this.d1v3]+this.m1v4*t[this.d1v4]]=e},"1,1,1":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]]=e},"1,1,2":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1]]=e},"1,1,3":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1]+this.m2v2*t[this.d2v2]]=e},"1,1,4":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1]+this.m2v2*t[this.d2v2]+this.m2v3*t[this.d2v3]]=e},"1,1,5":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][this.m2v0*t[this.d2v0]+this.m2v1*t[this.d2v1]+this.m2v2*t[this.d2v2]+this.m2v3*t[this.d2v3]+this.m2v4*t[this.d2v4]]=e},"1,1,1,1":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]]=e},"1,1,1,2":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1]]=e},"1,1,1,3":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1]+this.m3v2*t[this.d3v2]]=e},"1,1,1,4":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1]+this.m3v2*t[this.d3v2]+this.m3v3*t[this.d3v3]]=e},"1,1,1,5":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][this.m3v0*t[this.d3v0]+this.m3v1*t[this.d3v1]+this.m3v2*t[this.d3v2]+this.m3v3*t[this.d3v3]+this.m3v4*t[this.d3v4]]=e},"1,1,1,1,1":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]][t[this.d4v0]]=e},"1,1,1,1,2":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]][this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1]]=e},"1,1,1,1,3":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]][this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1]+this.m4v2*t[this.d4v2]]=e},"1,1,1,1,4":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]][this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1]+this.m4v2*t[this.d4v2]+this.m4v3*t[this.d4v3]]=e},"1,1,1,1,5":function({point:t,value:e}){this.data[t[this.d0v0]][t[this.d1v0]][t[this.d2v0]][t[this.d3v0]][this.m4v0*t[this.d4v0]+this.m4v1*t[this.d4v1]+this.m4v2*t[this.d4v2]+this.m4v3*t[this.d4v3]+this.m4v4*t[this.d4v4]]=e}}},function(t,e,r){"use strict";t.exports={countIn1D:function(t){return t.reduce((function(t,e){return void 0===t[e]?t[e]=1:t[e]++,t}),{})},countIn2D:function(t){return t.reduce((function(t,e){return e.forEach((function(e){void 0===t[e]?t[e]=1:t[e]++})),t}),{})},unflatten:function(t,e){for(var r=e.height,n=e.width,i=[],o=0;o<r;o++){var s=o*n,a=s+n;i.push(t.subarray(s,a))}return i}}},function(t,e,r){"use strict";r.r(e),r.d(e,"globals",(function(){return n})),r.d(e,"rgb",(function(){return i})),r.d(e,"getDecoder",(function(){return U})),r.d(e,"setLogger",(function(){return xt})),r.d(e,"GeoTIFF",(function(){return Tt})),r.d(e,"MultiGeoTIFF",(function(){return Ct})),r.d(e,"fromUrl",(function(){return Ot})),r.d(e,"fromArrayBuffer",(function(){return It})),r.d(e,"fromFile",(function(){return Pt})),r.d(e,"fromBlob",(function(){return Rt})),r.d(e,"fromUrls",(function(){return jt})),r.d(e,"writeArrayBuffer",(function(){return Mt})),r.d(e,"Pool",(function(){return Y.a}));var n={};r.r(n),r.d(n,"fieldTagNames",(function(){return a})),r.d(n,"fieldTags",(function(){return u})),r.d(n,"fieldTagTypes",(function(){return c})),r.d(n,"arrayFields",(function(){return l})),r.d(n,"fieldTypeNames",(function(){return f})),r.d(n,"fieldTypes",(function(){return h})),r.d(n,"photometricInterpretations",(function(){return d})),r.d(n,"ExtraSamplesValues",(function(){return p})),r.d(n,"geoKeyNames",(function(){return y})),r.d(n,"geoKeys",(function(){return g}));var i={};r.r(i),r.d(i,"fromWhiteIsZero",(function(){return m})),r.d(i,"fromBlackIsZero",(function(){return b})),r.d(i,"fromPalette",(function(){return v})),r.d(i,"fromCMYK",(function(){return w})),r.d(i,"fromYCbCr",(function(){return x})),r.d(i,"fromCIELab",(function(){return _}));var o=r(100),s=r.n(o);const a={315:"Artist",258:"BitsPerSample",265:"CellLength",264:"CellWidth",320:"ColorMap",259:"Compression",33432:"Copyright",306:"DateTime",338:"ExtraSamples",266:"FillOrder",289:"FreeByteCounts",288:"FreeOffsets",291:"GrayResponseCurve",290:"GrayResponseUnit",316:"HostComputer",270:"ImageDescription",257:"ImageLength",256:"ImageWidth",271:"Make",281:"MaxSampleValue",280:"MinSampleValue",272:"Model",254:"NewSubfileType",274:"Orientation",262:"PhotometricInterpretation",284:"PlanarConfiguration",296:"ResolutionUnit",278:"RowsPerStrip",277:"SamplesPerPixel",305:"Software",279:"StripByteCounts",273:"StripOffsets",255:"SubfileType",263:"Threshholding",282:"XResolution",283:"YResolution",326:"BadFaxLines",327:"CleanFaxData",343:"ClipPath",328:"ConsecutiveBadFaxLines",433:"Decode",434:"DefaultImageColor",269:"DocumentName",336:"DotRange",321:"HalftoneHints",346:"Indexed",347:"JPEGTables",285:"PageName",297:"PageNumber",317:"Predictor",319:"PrimaryChromaticities",532:"ReferenceBlackWhite",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",559:"StripRowCounts",330:"SubIFDs",292:"T4Options",293:"T6Options",325:"TileByteCounts",323:"TileLength",324:"TileOffsets",322:"TileWidth",301:"TransferFunction",318:"WhitePoint",344:"XClipPathUnits",286:"XPosition",529:"YCbCrCoefficients",531:"YCbCrPositioning",530:"YCbCrSubSampling",345:"YClipPathUnits",287:"YPosition",37378:"ApertureValue",40961:"ColorSpace",36868:"DateTimeDigitized",36867:"DateTimeOriginal",34665:"Exif IFD",36864:"ExifVersion",33434:"ExposureTime",41728:"FileSource",37385:"Flash",40960:"FlashpixVersion",33437:"FNumber",42016:"ImageUniqueID",37384:"LightSource",37500:"MakerNote",37377:"ShutterSpeedValue",37510:"UserComment",33723:"IPTC",34675:"ICC Profile",700:"XMP",42112:"GDAL_METADATA",42113:"GDAL_NODATA",34377:"Photoshop",33550:"ModelPixelScale",33922:"ModelTiepoint",34264:"ModelTransformation",34735:"GeoKeyDirectory",34736:"GeoDoubleParams",34737:"GeoAsciiParams"},u={};for(const t in a)a.hasOwnProperty(t)&&(u[a[t]]=parseInt(t,10));const c={256:"SHORT",257:"SHORT",258:"SHORT",259:"SHORT",262:"SHORT",273:"LONG",274:"SHORT",277:"SHORT",278:"LONG",279:"LONG",282:"RATIONAL",283:"RATIONAL",284:"SHORT",286:"SHORT",287:"RATIONAL",296:"SHORT",305:"ASCII",306:"ASCII",338:"SHORT",339:"SHORT",513:"LONG",514:"LONG",1024:"SHORT",1025:"SHORT",2048:"SHORT",2049:"ASCII",33550:"DOUBLE",33922:"DOUBLE",34665:"LONG",34735:"SHORT",34737:"ASCII",42113:"ASCII"},l=[u.BitsPerSample,u.ExtraSamples,u.SampleFormat,u.StripByteCounts,u.StripOffsets,u.StripRowCounts,u.TileByteCounts,u.TileOffsets],f={1:"BYTE",2:"ASCII",3:"SHORT",4:"LONG",5:"RATIONAL",6:"SBYTE",7:"UNDEFINED",8:"SSHORT",9:"SLONG",10:"SRATIONAL",11:"FLOAT",12:"DOUBLE",13:"IFD",16:"LONG8",17:"SLONG8",18:"IFD8"},h={};for(const t in f)f.hasOwnProperty(t)&&(h[f[t]]=parseInt(t,10));const d={WhiteIsZero:0,BlackIsZero:1,RGB:2,Palette:3,TransparencyMask:4,CMYK:5,YCbCr:6,CIELab:8,ICCLab:9},p={Unspecified:0,Assocalpha:1,Unassalpha:2},y={1024:"GTModelTypeGeoKey",1025:"GTRasterTypeGeoKey",1026:"GTCitationGeoKey",2048:"GeographicTypeGeoKey",2049:"GeogCitationGeoKey",2050:"GeogGeodeticDatumGeoKey",2051:"GeogPrimeMeridianGeoKey",2052:"GeogLinearUnitsGeoKey",2053:"GeogLinearUnitSizeGeoKey",2054:"GeogAngularUnitsGeoKey",2055:"GeogAngularUnitSizeGeoKey",2056:"GeogEllipsoidGeoKey",2057:"GeogSemiMajorAxisGeoKey",2058:"GeogSemiMinorAxisGeoKey",2059:"GeogInvFlatteningGeoKey",2060:"GeogAzimuthUnitsGeoKey",2061:"GeogPrimeMeridianLongGeoKey",2062:"GeogTOWGS84GeoKey",3072:"ProjectedCSTypeGeoKey",3073:"PCSCitationGeoKey",3074:"ProjectionGeoKey",3075:"ProjCoordTransGeoKey",3076:"ProjLinearUnitsGeoKey",3077:"ProjLinearUnitSizeGeoKey",3078:"ProjStdParallel1GeoKey",3079:"ProjStdParallel2GeoKey",3080:"ProjNatOriginLongGeoKey",3081:"ProjNatOriginLatGeoKey",3082:"ProjFalseEastingGeoKey",3083:"ProjFalseNorthingGeoKey",3084:"ProjFalseOriginLongGeoKey",3085:"ProjFalseOriginLatGeoKey",3086:"ProjFalseOriginEastingGeoKey",3087:"ProjFalseOriginNorthingGeoKey",3088:"ProjCenterLongGeoKey",3089:"ProjCenterLatGeoKey",3090:"ProjCenterEastingGeoKey",3091:"ProjCenterNorthingGeoKey",3092:"ProjScaleAtNatOriginGeoKey",3093:"ProjScaleAtCenterGeoKey",3094:"ProjAzimuthAngleGeoKey",3095:"ProjStraightVertPoleLongGeoKey",3096:"ProjRectifiedGridAngleGeoKey",4096:"VerticalCSTypeGeoKey",4097:"VerticalCitationGeoKey",4098:"VerticalDatumGeoKey",4099:"VerticalUnitsGeoKey"},g={};for(const t in y)y.hasOwnProperty(t)&&(g[y[t]]=parseInt(t,10));function m(t,e){const{width:r,height:n}=t,i=new Uint8Array(r*n*3);let o;for(let r=0,n=0;r<t.length;++r,n+=3)o=256-t[r]/e*256,i[n]=o,i[n+1]=o,i[n+2]=o;return i}function b(t,e){const{width:r,height:n}=t,i=new Uint8Array(r*n*3);let o;for(let r=0,n=0;r<t.length;++r,n+=3)o=t[r]/e*256,i[n]=o,i[n+1]=o,i[n+2]=o;return i}function v(t,e){const{width:r,height:n}=t,i=new Uint8Array(r*n*3),o=e.length/3,s=e.length/3*2;for(let r=0,n=0;r<t.length;++r,n+=3){const a=t[r];i[n]=e[a]/65536*256,i[n+1]=e[a+o]/65536*256,i[n+2]=e[a+s]/65536*256}return i}function w(t){const{width:e,height:r}=t,n=new Uint8Array(e*r*3);for(let e=0,r=0;e<t.length;e+=4,r+=3){const i=t[e],o=t[e+1],s=t[e+2],a=t[e+3];n[r]=(255-i)/256*255*((255-a)/256),n[r+1]=(255-o)/256*255*((255-a)/256),n[r+2]=(255-s)/256*255*((255-a)/256)}return n}function x(t){const{width:e,height:r}=t,n=new Uint8ClampedArray(e*r*3);for(let e=0,r=0;e<t.length;e+=3,r+=3){const i=t[e],o=t[e+1],s=t[e+2];n[r]=i+1.402*(s-128),n[r+1]=i-.34414*(o-128)-.71414*(s-128),n[r+2]=i+1.772*(o-128)}return n}function _(t){const{width:e,height:r}=t,n=new Uint8Array(e*r*3);for(let e=0,r=0;e<t.length;e+=3,r+=3){let i,o,s,a=(t[e+0]+16)/116,u=(t[e+1]<<24>>24)/500+a,c=a-(t[e+2]<<24>>24)/200;u=.95047*(u*u*u>.008856?u*u*u:(u-16/116)/7.787),a=1*(a*a*a>.008856?a*a*a:(a-16/116)/7.787),c=1.08883*(c*c*c>.008856?c*c*c:(c-16/116)/7.787),i=3.2406*u+-1.5372*a+-.4986*c,o=-.9689*u+1.8758*a+.0415*c,s=.0557*u+-.204*a+1.057*c,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,s=s>.0031308?1.055*s**(1/2.4)-.055:12.92*s,n[r]=255*Math.max(0,Math.min(1,i)),n[r+1]=255*Math.max(0,Math.min(1,o)),n[r+2]=255*Math.max(0,Math.min(1,s))}return n}function S(t,e){let r=t.length-e,n=0;do{for(let r=e;r>0;r--)t[n+e]+=t[n],n++;r-=e}while(r>0)}function A(t,e,r){let n=0,i=t.length;const o=i/r;for(;i>e;){for(let r=e;r>0;--r)t[n+e]+=t[n],++n;i-=e}const s=t.slice();for(let e=0;e<o;++e)for(let n=0;n<r;++n)t[r*e+n]=s[(r-n-1)*o+e]}class E{decode(t,e){const r=this.decodeBlock(e),n=t.Predictor||1;if(1!==n){const e=!t.StripOffsets;return function(t,e,r,n,i,o){if(!e||1===e)return t;for(let t=0;t<i.length;++t){if(i[t]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(i[t]!==i[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const s=i[0]/8,a=2===o?1:i.length;for(let o=0;o<n&&!(o*a*r*s>=t.byteLength);++o){let n;if(2===e){switch(i[0]){case 8:n=new Uint8Array(t,o*a*r*s,a*r*s);break;case 16:n=new Uint16Array(t,o*a*r*s,a*r*s/2);break;case 32:n=new Uint32Array(t,o*a*r*s,a*r*s/4);break;default:throw new Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}S(n,a)}else 3===e&&(n=new Uint8Array(t,o*a*r*s,a*r*s),A(n,a,s))}return t}(r,n,e?t.TileWidth:t.ImageWidth,e?t.TileLength:t.RowsPerStrip||t.ImageLength,t.BitsPerSample,t.PlanarConfiguration)}return r}}class k extends E{decodeBlock(t){return t}}function T(t,e){for(let r=e.length-1;r>=0;r--)t.push(e[r]);return t}function C(t){const e=new Uint16Array(4093),r=new Uint8Array(4093);for(let t=0;t<=257;t++)e[t]=4096,r[t]=t;let n=258,i=9,o=0;function s(){n=258,i=9}function a(t){const e=function(t,e,r){const n=e%8,i=Math.floor(e/8),o=8-n,s=e+r-8*(i+1);let a=8*(i+2)-(e+r);const u=8*(i+2)-e;if(a=Math.max(0,a),i>=t.length)return console.warn("ran off the end of the buffer before finding EOI_CODE (end on input code)"),257;let c=t[i]&2**(8-n)-1;c<<=r-o;let l=c;if(i+1<t.length){let e=t[i+1]>>>a;e<<=Math.max(0,r-u),l+=e}if(s>8&&i+2<t.length){const n=8*(i+3)-(e+r);l+=t[i+2]>>>n}return l}(t,o,i);return o+=i,e}function u(t,i){return r[n]=i,e[n]=t,n++,n-1}function c(t){const n=[];for(let i=t;4096!==i;i=e[i])n.push(r[i]);return n}const l=[];s();const f=new Uint8Array(t);let h,d=a(f);for(;257!==d;){if(256===d){for(s(),d=a(f);256===d;)d=a(f);if(257===d)break;if(d>256)throw new Error("corrupted code at scanline "+d);T(l,c(d)),h=d}else if(d<n){const t=c(d);T(l,t),u(h,t[t.length-1]),h=d}else{const t=c(h);if(!t)throw new Error(`Bogus entry. Not in dictionary, ${h} / ${n}, position: ${o}`);T(l,t),l.push(t[t.length-1]),u(h,t[t.length-1]),h=d}n+1>=2**i&&(12===i?h=void 0:i++),d=a(f)}return new Uint8Array(l)}class O extends E{decodeBlock(t){return C(t).buffer}}const I=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]);function P(t,e){let r=0;const n=[];let i=16;for(;i>0&&!t[i-1];)--i;n.push({children:[],index:0});let o,s=n[0];for(let a=0;a<i;a++){for(let i=0;i<t[a];i++){for(s=n.pop(),s.children[s.index]=e[r];s.index>0;)s=n.pop();for(s.index++,n.push(s);n.length<=a;)n.push(o={children:[],index:0}),s.children[s.index]=o.children,s=o;r++}a+1<i&&(n.push(o={children:[],index:0}),s.children[s.index]=o.children,s=o)}return n[0].children}function R(t,e,r,n,i,o,s,a,u){const{mcusPerLine:c,progressive:l}=r,f=e;let h=e,d=0,p=0;function y(){if(p>0)return p--,d>>p&1;if(d=t[h++],255===d){const e=t[h++];if(e)throw new Error("unexpected marker: "+(d<<8|e).toString(16))}return p=7,d>>>7}function g(t){let e,r=t;for(;null!==(e=y());){if(r=r[e],"number"==typeof r)return r;if("object"!=typeof r)throw new Error("invalid huffman sequence")}return null}function m(t){let e=t,r=0;for(;e>0;){const t=y();if(null===t)return;r=r<<1|t,--e}return r}function b(t){const e=m(t);return e>=1<<t-1?e:e+(-1<<t)+1}let v=0;let w,x=0;function _(t,e,r,n,i){const o=r%c,s=(r/c|0)*t.v+n,a=o*t.h+i;e(t,t.blocks[s][a])}function S(t,e,r){const n=r/t.blocksPerLine|0,i=r%t.blocksPerLine;e(t,t.blocks[n][i])}const A=n.length;let E,k,T,C,O,P;P=l?0===o?0===a?function(t,e){const r=g(t.huffmanTableDC),n=0===r?0:b(r)<<u;t.pred+=n,e[0]=t.pred}:function(t,e){e[0]|=y()<<u}:0===a?function(t,e){if(v>0)return void v--;let r=o;const n=s;for(;r<=n;){const n=g(t.huffmanTableAC),i=15&n,o=n>>4;if(0===i){if(o<15){v=m(o)+(1<<o)-1;break}r+=16}else{r+=o;e[I[r]]=b(i)*(1<<u),r++}}}:function(t,e){let r=o;const n=s;let i=0;for(;r<=n;){const n=I[r],o=e[n]<0?-1:1;switch(x){case 0:{const e=g(t.huffmanTableAC),r=15&e;if(i=e>>4,0===r)i<15?(v=m(i)+(1<<i),x=4):(i=16,x=1);else{if(1!==r)throw new Error("invalid ACn encoding");w=b(r),x=i?2:3}continue}case 1:case 2:e[n]?e[n]+=(y()<<u)*o:(i--,0===i&&(x=2===x?3:0));break;case 3:e[n]?e[n]+=(y()<<u)*o:(e[n]=w<<u,x=0);break;case 4:e[n]&&(e[n]+=(y()<<u)*o)}r++}4===x&&(v--,0===v&&(x=0))}:function(t,e){const r=g(t.huffmanTableDC),n=0===r?0:b(r);t.pred+=n,e[0]=t.pred;let i=1;for(;i<64;){const r=g(t.huffmanTableAC),n=15&r,o=r>>4;if(0===n){if(o<15)break;i+=16}else{i+=o;e[I[i]]=b(n),i++}}};let R,j,M=0;j=1===A?n[0].blocksPerLine*n[0].blocksPerColumn:c*r.mcusPerColumn;const L=i||j;for(;M<j;){for(k=0;k<A;k++)n[k].pred=0;if(v=0,1===A)for(E=n[0],O=0;O<L;O++)S(E,P,M),M++;else for(O=0;O<L;O++){for(k=0;k<A;k++){E=n[k];const{h:t,v:e}=E;for(T=0;T<e;T++)for(C=0;C<t;C++)_(E,P,M,T,C)}if(M++,M===j)break}if(p=0,R=t[h]<<8|t[h+1],R<65280)throw new Error("marker was not found");if(!(R>=65488&&R<=65495))break;h+=2}return h-f}function j(t,e){const r=[],{blocksPerLine:n,blocksPerColumn:i}=e,o=n<<3,s=new Int32Array(64),a=new Uint8Array(64);function u(t,r,n){const i=e.quantizationTable;let o,s,a,u,c,l,f,h,d;const p=n;let y;for(y=0;y<64;y++)p[y]=t[y]*i[y];for(y=0;y<8;++y){const t=8*y;0!==p[1+t]||0!==p[2+t]||0!==p[3+t]||0!==p[4+t]||0!==p[5+t]||0!==p[6+t]||0!==p[7+t]?(o=5793*p[0+t]+128>>8,s=5793*p[4+t]+128>>8,a=p[2+t],u=p[6+t],c=2896*(p[1+t]-p[7+t])+128>>8,h=2896*(p[1+t]+p[7+t])+128>>8,l=p[3+t]<<4,f=p[5+t]<<4,d=o-s+1>>1,o=o+s+1>>1,s=d,d=3784*a+1567*u+128>>8,a=1567*a-3784*u+128>>8,u=d,d=c-f+1>>1,c=c+f+1>>1,f=d,d=h+l+1>>1,l=h-l+1>>1,h=d,d=o-u+1>>1,o=o+u+1>>1,u=d,d=s-a+1>>1,s=s+a+1>>1,a=d,d=2276*c+3406*h+2048>>12,c=3406*c-2276*h+2048>>12,h=d,d=799*l+4017*f+2048>>12,l=4017*l-799*f+2048>>12,f=d,p[0+t]=o+h,p[7+t]=o-h,p[1+t]=s+f,p[6+t]=s-f,p[2+t]=a+l,p[5+t]=a-l,p[3+t]=u+c,p[4+t]=u-c):(d=5793*p[0+t]+512>>10,p[0+t]=d,p[1+t]=d,p[2+t]=d,p[3+t]=d,p[4+t]=d,p[5+t]=d,p[6+t]=d,p[7+t]=d)}for(y=0;y<8;++y){const t=y;0!==p[8+t]||0!==p[16+t]||0!==p[24+t]||0!==p[32+t]||0!==p[40+t]||0!==p[48+t]||0!==p[56+t]?(o=5793*p[0+t]+2048>>12,s=5793*p[32+t]+2048>>12,a=p[16+t],u=p[48+t],c=2896*(p[8+t]-p[56+t])+2048>>12,h=2896*(p[8+t]+p[56+t])+2048>>12,l=p[24+t],f=p[40+t],d=o-s+1>>1,o=o+s+1>>1,s=d,d=3784*a+1567*u+2048>>12,a=1567*a-3784*u+2048>>12,u=d,d=c-f+1>>1,c=c+f+1>>1,f=d,d=h+l+1>>1,l=h-l+1>>1,h=d,d=o-u+1>>1,o=o+u+1>>1,u=d,d=s-a+1>>1,s=s+a+1>>1,a=d,d=2276*c+3406*h+2048>>12,c=3406*c-2276*h+2048>>12,h=d,d=799*l+4017*f+2048>>12,l=4017*l-799*f+2048>>12,f=d,p[0+t]=o+h,p[56+t]=o-h,p[8+t]=s+f,p[48+t]=s-f,p[16+t]=a+l,p[40+t]=a-l,p[24+t]=u+c,p[32+t]=u-c):(d=5793*n[y+0]+8192>>14,p[0+t]=d,p[8+t]=d,p[16+t]=d,p[24+t]=d,p[32+t]=d,p[40+t]=d,p[48+t]=d,p[56+t]=d)}for(y=0;y<64;++y){const t=128+(p[y]+8>>4);r[y]=t<0?0:t>255?255:t}}for(let t=0;t<i;t++){const i=t<<3;for(let t=0;t<8;t++)r.push(new Uint8Array(o));for(let o=0;o<n;o++){u(e.blocks[t][o],a,s);let n=0;const c=o<<3;for(let t=0;t<8;t++){const e=r[i+t];for(let t=0;t<8;t++)e[c+t]=a[n++]}}}return r}class M{constructor(){this.jfif=null,this.adobe=null,this.quantizationTables=[],this.huffmanTablesAC=[],this.huffmanTablesDC=[],this.resetFrames()}resetFrames(){this.frames=[]}parse(t){let e=0;function r(){const r=t[e]<<8|t[e+1];return e+=2,r}function n(){const n=r(),i=t.subarray(e,e+n-2);return e+=i.length,i}function i(t){let e,r,n=0,i=0;for(r in t.components)t.components.hasOwnProperty(r)&&(e=t.components[r],n<e.h&&(n=e.h),i<e.v&&(i=e.v));const o=Math.ceil(t.samplesPerLine/8/n),s=Math.ceil(t.scanLines/8/i);for(r in t.components)if(t.components.hasOwnProperty(r)){e=t.components[r];const a=Math.ceil(Math.ceil(t.samplesPerLine/8)*e.h/n),u=Math.ceil(Math.ceil(t.scanLines/8)*e.v/i),c=o*e.h,l=s*e.v,f=[];for(let t=0;t<l;t++){const t=[];for(let e=0;e<c;e++)t.push(new Int32Array(64));f.push(t)}e.blocksPerLine=a,e.blocksPerColumn=u,e.blocks=f}t.maxH=n,t.maxV=i,t.mcusPerLine=o,t.mcusPerColumn=s}let o=r();if(65496!==o)throw new Error("SOI not found");for(o=r();65497!==o;){switch(o){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:{const t=n();65504===o&&74===t[0]&&70===t[1]&&73===t[2]&&70===t[3]&&0===t[4]&&(this.jfif={version:{major:t[5],minor:t[6]},densityUnits:t[7],xDensity:t[8]<<8|t[9],yDensity:t[10]<<8|t[11],thumbWidth:t[12],thumbHeight:t[13],thumbData:t.subarray(14,14+3*t[12]*t[13])}),65518===o&&65===t[0]&&100===t[1]&&111===t[2]&&98===t[3]&&101===t[4]&&0===t[5]&&(this.adobe={version:t[6],flags0:t[7]<<8|t[8],flags1:t[9]<<8|t[10],transformCode:t[11]});break}case 65499:{const n=r()+e-2;for(;e<n;){const n=t[e++],i=new Int32Array(64);if(n>>4==0)for(let r=0;r<64;r++){i[I[r]]=t[e++]}else{if(n>>4!=1)throw new Error("DQT: invalid table spec");for(let t=0;t<64;t++){i[I[t]]=r()}}this.quantizationTables[15&n]=i}break}case 65472:case 65473:case 65474:{r();const n={extended:65473===o,progressive:65474===o,precision:t[e++],scanLines:r(),samplesPerLine:r(),components:{},componentsOrder:[]},s=t[e++];let a;for(let r=0;r<s;r++){a=t[e];const r=t[e+1]>>4,i=15&t[e+1],o=t[e+2];n.componentsOrder.push(a),n.components[a]={h:r,v:i,quantizationIdx:o},e+=3}i(n),this.frames.push(n);break}case 65476:{const n=r();for(let r=2;r<n;){const n=t[e++],i=new Uint8Array(16);let o=0;for(let r=0;r<16;r++,e++)i[r]=t[e],o+=i[r];const s=new Uint8Array(o);for(let r=0;r<o;r++,e++)s[r]=t[e];r+=17+o,n>>4==0?this.huffmanTablesDC[15&n]=P(i,s):this.huffmanTablesAC[15&n]=P(i,s)}break}case 65501:r(),this.resetInterval=r();break;case 65498:{r();const n=t[e++],i=[],o=this.frames[0];for(let r=0;r<n;r++){const r=o.components[t[e++]],n=t[e++];r.huffmanTableDC=this.huffmanTablesDC[n>>4],r.huffmanTableAC=this.huffmanTablesAC[15&n],i.push(r)}const s=t[e++],a=t[e++],u=t[e++],c=R(t,e,o,i,this.resetInterval,s,a,u>>4,15&u);e+=c;break}case 65535:255!==t[e]&&e--;break;default:if(255===t[e-3]&&t[e-2]>=192&&t[e-2]<=254){e-=3;break}throw new Error("unknown JPEG marker "+o.toString(16))}o=r()}}getResult(){const{frames:t}=this;if(0===this.frames.length)throw new Error("no frames were decoded");this.frames.length>1&&console.warn("more than one frame is not supported");for(let t=0;t<this.frames.length;t++){const e=this.frames[t].components;for(const t of Object.keys(e))e[t].quantizationTable=this.quantizationTables[e[t].quantizationIdx],delete e[t].quantizationIdx}const e=t[0],{components:r,componentsOrder:n}=e,i=[],o=e.samplesPerLine,s=e.scanLines;for(let t=0;t<n.length;t++){const o=r[n[t]];i.push({lines:j(0,o),scaleX:o.h/e.maxH,scaleY:o.v/e.maxV})}const a=new Uint8Array(o*s*i.length);let u=0;for(let t=0;t<s;++t)for(let e=0;e<o;++e)for(let r=0;r<i.length;++r){const n=i[r];a[u]=n.lines[0|t*n.scaleY][0|e*n.scaleX],++u}return a}}class L extends E{constructor(t){super(),this.reader=new M,t.JPEGTables&&this.reader.parse(t.JPEGTables)}decodeBlock(t){return this.reader.resetFrames(),this.reader.parse(new Uint8Array(t)),this.reader.getResult().buffer}}var F=r(101);class N extends E{decodeBlock(t){return Object(F.inflate)(new Uint8Array(t)).buffer}}class D extends E{decodeBlock(t){const e=new DataView(t),r=[];for(let n=0;n<t.byteLength;++n){let t=e.getInt8(n);if(t<0){const i=e.getUint8(n+1);t=-t;for(let e=0;e<=t;++e)r.push(i);n+=1}else{for(let i=0;i<=t;++i)r.push(e.getUint8(n+i+1));n+=t+1}}return new Uint8Array(r).buffer}}function U(t){switch(t.Compression){case void 0:case 1:return new k;case 5:return new O;case 6:throw new Error("old style JPEG compression is not supported.");case 7:return new L(t);case 8:case 32946:return new N;case 32773:return new D;default:throw new Error("Unknown compression method identifier: "+t.Compression)}}function B(t,e,r,n=1){return new(Object.getPrototypeOf(t).constructor)(e*r*n)}function G(t,e,r){return(1-r)*t+r*e}function q(t,e,r,n,i,o="nearest"){switch(o.toLowerCase()){case"nearest":return function(t,e,r,n,i){const o=e/n,s=r/i;return t.map(t=>{const a=B(t,n,i);for(let u=0;u<i;++u){const i=Math.min(Math.round(s*u),r-1);for(let r=0;r<n;++r){const s=Math.min(Math.round(o*r),e-1),c=t[i*e+s];a[u*n+r]=c}}return a})}(t,e,r,n,i);case"bilinear":case"linear":return function(t,e,r,n,i){const o=e/n,s=r/i;return t.map(t=>{const a=B(t,n,i);for(let u=0;u<i;++u){const i=s*u,c=Math.floor(i),l=Math.min(Math.ceil(i),r-1);for(let r=0;r<n;++r){const s=o*r,f=s%1,h=Math.floor(s),d=Math.min(Math.ceil(s),e-1),p=t[c*e+h],y=t[c*e+d],g=t[l*e+h],m=t[l*e+d],b=G(G(p,y,f),G(g,m,f),i%1);a[u*n+r]=b}}return a})}(t,e,r,n,i);default:throw new Error(`Unsupported resampling method: \'${o}\'`)}}function z(t,e,r,n,i,o,s="nearest"){switch(s.toLowerCase()){case"nearest":return function(t,e,r,n,i,o){const s=e/n,a=r/i,u=B(t,n,i,o);for(let c=0;c<i;++c){const i=Math.min(Math.round(a*c),r-1);for(let r=0;r<n;++r){const a=Math.min(Math.round(s*r),e-1);for(let s=0;s<o;++s){const l=t[i*e*o+a*o+s];u[c*n*o+r*o+s]=l}}}return u}(t,e,r,n,i,o);case"bilinear":case"linear":return function(t,e,r,n,i,o){const s=e/n,a=r/i,u=B(t,n,i,o);for(let c=0;c<i;++c){const i=a*c,l=Math.floor(i),f=Math.min(Math.ceil(i),r-1);for(let r=0;r<n;++r){const a=s*r,h=a%1,d=Math.floor(a),p=Math.min(Math.ceil(a),e-1);for(let s=0;s<o;++s){const a=t[l*e*o+d*o+s],y=t[l*e*o+p*o+s],g=t[f*e*o+d*o+s],m=t[f*e*o+p*o+s],b=G(G(a,y,h),G(g,m,h),i%1);u[c*n*o+r*o+s]=b}}}return u}(t,e,r,n,i,o);default:throw new Error(`Unsupported resampling method: \'${s}\'`)}}function H(t,e,r){let n=0;for(let i=e;i<r;++i)n+=t[i];return n}function W(t,e,r){switch(t){case 1:switch(e){case 8:return new Uint8Array(r);case 16:return new Uint16Array(r);case 32:return new Uint32Array(r)}break;case 2:switch(e){case 8:return new Int8Array(r);case 16:return new Int16Array(r);case 32:return new Int32Array(r)}break;case 3:switch(e){case 32:return new Float32Array(r);case 64:return new Float64Array(r)}}throw Error("Unsupported data format/bitsPerSample")}var V=class{constructor(t,e,r,n,i,o){this.fileDirectory=t,this.geoKeys=e,this.dataView=r,this.littleEndian=n,this.tiles=i?{}:null,this.isTiled=!t.StripOffsets;const s=t.PlanarConfiguration;if(this.planarConfiguration=void 0===s?1:s,1!==this.planarConfiguration&&2!==this.planarConfiguration)throw new Error("Invalid planar configuration.");this.source=o}getFileDirectory(){return this.fileDirectory}getGeoKeys(){return this.geoKeys}getWidth(){return this.fileDirectory.ImageWidth}getHeight(){return this.fileDirectory.ImageLength}getSamplesPerPixel(){return this.fileDirectory.SamplesPerPixel}getTileWidth(){return this.isTiled?this.fileDirectory.TileWidth:this.getWidth()}getTileHeight(){return this.isTiled?this.fileDirectory.TileLength:void 0!==this.fileDirectory.RowsPerStrip?Math.min(this.fileDirectory.RowsPerStrip,this.getHeight()):this.getHeight()}getBytesPerPixel(){let t=0;for(let e=0;e<this.fileDirectory.BitsPerSample.length;++e){const r=this.fileDirectory.BitsPerSample[e];if(r%8!=0)throw new Error(`Sample bit-width of ${r} is not supported.`);if(r!==this.fileDirectory.BitsPerSample[0])throw new Error("Differing size of samples in a pixel are not supported.");t+=r}return t/8}getSampleByteSize(t){if(t>=this.fileDirectory.BitsPerSample.length)throw new RangeError(`Sample index ${t} is out of range.`);const e=this.fileDirectory.BitsPerSample[t];if(e%8!=0)throw new Error(`Sample bit-width of ${e} is not supported.`);return e/8}getReaderForSample(t){const e=this.fileDirectory.SampleFormat?this.fileDirectory.SampleFormat[t]:1,r=this.fileDirectory.BitsPerSample[t];switch(e){case 1:switch(r){case 8:return DataView.prototype.getUint8;case 16:return DataView.prototype.getUint16;case 32:return DataView.prototype.getUint32}break;case 2:switch(r){case 8:return DataView.prototype.getInt8;case 16:return DataView.prototype.getInt16;case 32:return DataView.prototype.getInt32}break;case 3:switch(r){case 32:return DataView.prototype.getFloat32;case 64:return DataView.prototype.getFloat64}}throw Error("Unsupported data format/bitsPerSample")}getArrayForSample(t,e){return W(this.fileDirectory.SampleFormat?this.fileDirectory.SampleFormat[t]:1,this.fileDirectory.BitsPerSample[t],e)}async getTileOrStrip(t,e,r,n){const i=Math.ceil(this.getWidth()/this.getTileWidth()),o=Math.ceil(this.getHeight()/this.getTileHeight());let s;const{tiles:a}=this;let u,c;1===this.planarConfiguration?s=e*i+t:2===this.planarConfiguration&&(s=r*i*o+e*i+t),this.isTiled?(u=this.fileDirectory.TileOffsets[s],c=this.fileDirectory.TileByteCounts[s]):(u=this.fileDirectory.StripOffsets[s],c=this.fileDirectory.StripByteCounts[s]);const l=await this.source.fetch(u,c);let f;return null===a?f=n.decode(this.fileDirectory,l):a[s]||(f=n.decode(this.fileDirectory,l),a[s]=f),{x:t,y:e,sample:r,data:await f}}async _readRaster(t,e,r,n,i,o,s,a){const u=this.getTileWidth(),c=this.getTileHeight(),l=Math.max(Math.floor(t[0]/u),0),f=Math.min(Math.ceil(t[2]/u),Math.ceil(this.getWidth()/this.getTileWidth())),h=Math.max(Math.floor(t[1]/c),0),d=Math.min(Math.ceil(t[3]/c),Math.ceil(this.getHeight()/this.getTileHeight())),p=t[2]-t[0];let y=this.getBytesPerPixel();const g=[],m=[];for(let t=0;t<e.length;++t)1===this.planarConfiguration?g.push(H(this.fileDirectory.BitsPerSample,0,e[t])/8):g.push(0),m.push(this.getReaderForSample(e[t]));const b=[],{littleEndian:v}=this;for(let o=h;o<d;++o)for(let s=l;s<f;++s)for(let a=0;a<e.length;++a){const l=a,f=e[a];2===this.planarConfiguration&&(y=this.getSampleByteSize(f));const h=this.getTileOrStrip(s,o,f,i);b.push(h),h.then(i=>{const o=i.data,s=new DataView(o),a=i.y*c,f=i.x*u,h=(i.y+1)*c,d=(i.x+1)*u,b=m[l],w=Math.min(c,c-(h-t[3])),x=Math.min(u,u-(d-t[2]));for(let i=Math.max(0,t[1]-a);i<w;++i)for(let o=Math.max(0,t[0]-f);o<x;++o){const c=(i*u+o)*y,h=b.call(s,c+g[l],v);let d;n?(d=(i+a-t[1])*p*e.length+(o+f-t[0])*e.length+l,r[d]=h):(d=(i+a-t[1])*p+o+f-t[0],r[l][d]=h)}})}if(await Promise.all(b),o&&t[2]-t[0]!==o||s&&t[3]-t[1]!==s){let i;return i=n?z(r,t[2]-t[0],t[3]-t[1],o,s,e.length,a):q(r,t[2]-t[0],t[3]-t[1],o,s,a),i.width=o,i.height=s,i}return r.width=o||t[2]-t[0],r.height=s||t[3]-t[1],r}async readRasters({window:t,samples:e=[],interleave:r,pool:n=null,width:i,height:o,resampleMethod:s,fillValue:a}={}){const u=t||[0,0,this.getWidth(),this.getHeight()];if(u[0]>u[2]||u[1]>u[3])throw new Error("Invalid subsets");const c=(u[2]-u[0])*(u[3]-u[1]);if(e&&e.length){for(let t=0;t<e.length;++t)if(e[t]>=this.fileDirectory.SamplesPerPixel)return Promise.reject(new RangeError(`Invalid sample index \'${e[t]}\'.`))}else for(let t=0;t<this.fileDirectory.SamplesPerPixel;++t)e.push(t);let l;if(r){l=W(this.fileDirectory.SampleFormat?Math.max.apply(null,this.fileDirectory.SampleFormat):1,Math.max.apply(null,this.fileDirectory.BitsPerSample),c*e.length),a&&l.fill(a)}else{l=[];for(let t=0;t<e.length;++t){const r=this.getArrayForSample(e[t],c);Array.isArray(a)&&t<a.length?r.fill(a[t]):a&&!Array.isArray(a)&&r.fill(a),l.push(r)}}const f=n||U(this.fileDirectory);return await this._readRaster(u,e,l,r,f,i,o,s)}async readRGB({window:t,pool:e=null,width:r,height:n,resampleMethod:i,enableAlpha:o=!1}={}){const s=t||[0,0,this.getWidth(),this.getHeight()];if(s[0]>s[2]||s[1]>s[3])throw new Error("Invalid subsets");const a=this.fileDirectory.PhotometricInterpretation;if(a===d.RGB){let i=[0,1,2];if(this.fileDirectory.ExtraSamples!==p.Unspecified&&o){i=[];for(let t=0;t<this.fileDirectory.BitsPerSample.length;t+=1)i.push(t)}return this.readRasters({window:t,interleave:!0,samples:i,pool:e,width:r,height:n})}let u;switch(a){case d.WhiteIsZero:case d.BlackIsZero:case d.Palette:u=[0];break;case d.CMYK:u=[0,1,2,3];break;case d.YCbCr:case d.CIELab:u=[0,1,2];break;default:throw new Error("Invalid or unsupported photometric interpretation.")}const c={window:s,interleave:!0,samples:u,pool:e,width:r,height:n,resampleMethod:i},{fileDirectory:l}=this,f=await this.readRasters(c),h=2**this.fileDirectory.BitsPerSample[0];let y;switch(a){case d.WhiteIsZero:y=m(f,h);break;case d.BlackIsZero:y=b(f,h);break;case d.Palette:y=v(f,l.ColorMap);break;case d.CMYK:y=w(f);break;case d.YCbCr:y=x(f);break;case d.CIELab:y=_(f);break;default:throw new Error("Unsupported photometric interpretation.")}return y.width=f.width,y.height=f.height,y}getTiePoints(){if(!this.fileDirectory.ModelTiepoint)return[];const t=[];for(let e=0;e<this.fileDirectory.ModelTiepoint.length;e+=6)t.push({i:this.fileDirectory.ModelTiepoint[e],j:this.fileDirectory.ModelTiepoint[e+1],k:this.fileDirectory.ModelTiepoint[e+2],x:this.fileDirectory.ModelTiepoint[e+3],y:this.fileDirectory.ModelTiepoint[e+4],z:this.fileDirectory.ModelTiepoint[e+5]});return t}getGDALMetadata(t=null){const e={};if(!this.fileDirectory.GDAL_METADATA)return null;const r=this.fileDirectory.GDAL_METADATA,n=s()(r.substring(0,r.length-1));if(!n[0].tagName)throw new Error("Failed to parse GDAL metadata XML.");const i=n[0];if("GDALMetadata"!==i.tagName)throw new Error("Unexpected GDAL metadata XML tag.");let o=i.children.filter(t=>"Item"===t.tagName);t&&(o=o.filter(e=>Number(e.attributes.sample)===t));for(let t=0;t<o.length;++t){const r=o[t];e[r.attributes.name]=r.children[0]}return e}getGDALNoData(){if(!this.fileDirectory.GDAL_NODATA)return null;const t=this.fileDirectory.GDAL_NODATA;return Number(t.substring(0,t.length-1))}getOrigin(){const t=this.fileDirectory.ModelTiepoint,e=this.fileDirectory.ModelTransformation;if(t&&6===t.length)return[t[3],t[4],t[5]];if(e)return[e[3],e[7],e[11]];throw new Error("The image does not have an affine transformation.")}getResolution(t=null){const e=this.fileDirectory.ModelPixelScale,r=this.fileDirectory.ModelTransformation;if(e)return[e[0],-e[1],e[2]];if(r)return[r[0],r[5],r[10]];if(t){const[e,r,n]=t.getResolution();return[e*t.getWidth()/this.getWidth(),r*t.getHeight()/this.getHeight(),n*t.getWidth()/this.getWidth()]}throw new Error("The image does not have an affine transformation.")}pixelIsArea(){return 1===this.geoKeys.GTRasterTypeGeoKey}getBoundingBox(){const t=this.getOrigin(),e=this.getResolution(),r=t[0],n=t[1],i=r+e[0]*this.getWidth(),o=n+e[1]*this.getHeight();return[Math.min(r,i),Math.min(n,o),Math.max(r,i),Math.max(n,o)]}};class K{constructor(t){this._dataView=new DataView(t)}get buffer(){return this._dataView.buffer}getUint64(t,e){const r=this.getUint32(t,e),n=this.getUint32(t+4,e);let i;if(e){if(i=r+2**32*n,!Number.isSafeInteger(i))throw new Error(i+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return i}if(i=2**32*r+n,!Number.isSafeInteger(i))throw new Error(i+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return i}getInt64(t,e){let r=0;const n=(128&this._dataView.getUint8(t+(e?7:0)))>0;let i=!0;for(let o=0;o<8;o++){let s=this._dataView.getUint8(t+(e?o:7-o));n&&(i?0!==s&&(s=255&~(s-1),i=!1):s=255&~s),r+=s*256**o}return n&&(r=-r),r}getUint8(t,e){return this._dataView.getUint8(t,e)}getInt8(t,e){return this._dataView.getInt8(t,e)}getUint16(t,e){return this._dataView.getUint16(t,e)}getInt16(t,e){return this._dataView.getInt16(t,e)}getUint32(t,e){return this._dataView.getUint32(t,e)}getInt32(t,e){return this._dataView.getInt32(t,e)}getFloat32(t,e){return this._dataView.getFloat32(t,e)}getFloat64(t,e){return this._dataView.getFloat64(t,e)}}class ${constructor(t,e,r,n){this._dataView=new DataView(t),this._sliceOffset=e,this._littleEndian=r,this._bigTiff=n}get sliceOffset(){return this._sliceOffset}get sliceTop(){return this._sliceOffset+this.buffer.byteLength}get littleEndian(){return this._littleEndian}get bigTiff(){return this._bigTiff}get buffer(){return this._dataView.buffer}covers(t,e){return this.sliceOffset<=t&&this.sliceTop>=t+e}readUint8(t){return this._dataView.getUint8(t-this._sliceOffset,this._littleEndian)}readInt8(t){return this._dataView.getInt8(t-this._sliceOffset,this._littleEndian)}readUint16(t){return this._dataView.getUint16(t-this._sliceOffset,this._littleEndian)}readInt16(t){return this._dataView.getInt16(t-this._sliceOffset,this._littleEndian)}readUint32(t){return this._dataView.getUint32(t-this._sliceOffset,this._littleEndian)}readInt32(t){return this._dataView.getInt32(t-this._sliceOffset,this._littleEndian)}readFloat32(t){return this._dataView.getFloat32(t-this._sliceOffset,this._littleEndian)}readFloat64(t){return this._dataView.getFloat64(t-this._sliceOffset,this._littleEndian)}readUint64(t){const e=this.readUint32(t),r=this.readUint32(t+4);let n;if(this._littleEndian){if(n=e+2**32*r,!Number.isSafeInteger(n))throw new Error(n+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return n}if(n=2**32*e+r,!Number.isSafeInteger(n))throw new Error(n+" exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues");return n}readInt64(t){let e=0;const r=(128&this._dataView.getUint8(t+(this._littleEndian?7:0)))>0;let n=!0;for(let i=0;i<8;i++){let o=this._dataView.getUint8(t+(this._littleEndian?i:7-i));r&&(n?0!==o&&(o=255&~(o-1),n=!1):o=255&~o),e+=o*256**i}return r&&(e=-e),e}readOffset(t){return this._bigTiff?this.readUint64(t):this.readUint32(t)}}var Y=r(68),Z=r(9),X=r(25),Q=r(40),J=r.n(Q),tt=r(105),et=r.n(tt),rt=r(39),nt=r.n(rt);class it{constructor(t,{blockSize:e=65536}={}){this.retrievalFunction=t,this.blockSize=e,this.blockRequests=new Map,this.blocks=new Map,this.blockIdsAwaitingRequest=null}async fetch(t,e,r=!1){const n=t+e,i=[],o=[],s=[];for(let e=Math.floor(t/this.blockSize)*this.blockSize;e<n;e+=this.blockSize){const t=Math.floor(e/this.blockSize);this.blocks.has(t)||this.blockRequests.has(t)||o.push(t),this.blockRequests.has(t)&&s.push(this.blockRequests.get(t)),i.push(t)}if(this.blockIdsAwaitingRequest)for(let t=0;t<o.length;++t){const e=o[t];this.blockIdsAwaitingRequest.add(e)}else this.blockIdsAwaitingRequest=new Set(o);if(r||await async function(t){return new Promise(e=>setTimeout(e,t))}(),this.blockIdsAwaitingRequest){const t=function(t){if(0===t.length)return[];const e=[];let r=[];e.push(r);for(let n=0;n<t.length;++n)0===n||t[n]===t[n-1]+1?r.push(t[n]):(r=[t[n]],e.push(r));return e}(Array.from(this.blockIdsAwaitingRequest).sort());for(const e of t){const t=this.requestData(e[0]*this.blockSize,e.length*this.blockSize);for(let r=0;r<e.length;++r){const n=e[r];this.blockRequests.set(n,(async()=>{const e=await t,i=r*this.blockSize,o=Math.min(i+this.blockSize,e.data.byteLength),s=e.data.slice(i,o);this.blockRequests.delete(n),this.blocks.set(n,{data:s,offset:e.offset+i,length:s.byteLength,top:e.offset+o})})())}}this.blockIdsAwaitingRequest=null}const a=[];for(const t of o)this.blockRequests.has(t)&&a.push(this.blockRequests.get(t));await Promise.all(a),await Promise.all(s);return function(t,e,r){const n=e+r,i=new ArrayBuffer(r),o=new Uint8Array(i);for(const r of t){const t=r.offset-e,i=r.top-n;let s,a=0,u=0;t<0?a=-t:t>0&&(u=t),s=i<0?r.length-a:n-r.offset-a;const c=new Uint8Array(r.data,a,s);o.set(c,u)}return i}(i.map(t=>this.blocks.get(t)),t,e)}async requestData(t,e){const r=await this.retrievalFunction(t,e);return r.length?r.length!==r.data.byteLength&&(r.data=r.data.slice(0,r.length)):r.length=r.data.byteLength,r.top=r.offset+r.length,r}}function ot(t,e){const{forceXHR:r}=e;if("function"==typeof fetch&&!r)return function(t,{headers:e={},blockSize:r}={}){return new it(async(r,n)=>{const i=await fetch(t,{headers:{...e,Range:`bytes=${r}-${r+n-1}`}});if(i.ok){if(206===i.status){return{data:i.arrayBuffer?await i.arrayBuffer():(await i.buffer()).buffer,offset:r,length:n}}{const t=i.arrayBuffer?await i.arrayBuffer():(await i.buffer()).buffer;return{data:t,offset:0,length:t.byteLength}}}throw new Error("Error fetching data.")},{blockSize:r})}(t,e);if("undefined"!=typeof XMLHttpRequest)return function(t,{headers:e={},blockSize:r}={}){return new it(async(r,n)=>new Promise((i,o)=>{const s=new XMLHttpRequest;s.open("GET",t),s.responseType="arraybuffer";const a={...e,Range:`bytes=${r}-${r+n-1}`};for(const[t,e]of Object.entries(a))s.setRequestHeader(t,e);s.onload=()=>{const t=s.response;206===s.status?i({data:t,offset:r,length:n}):i({data:t,offset:0,length:t.byteLength})},s.onerror=o,s.send()}),{blockSize:r})}(t,e);if(J.a.get)return function(t,{headers:e={},blockSize:r}={}){return new it(async(r,n)=>new Promise((i,o)=>{const s=nt.a.parse(t);("http:"===s.protocol?J.a:et.a).get({...s,headers:{...e,Range:`bytes=${r}-${r+n-1}`}},t=>{const e=[];t.on("data",t=>{e.push(t)}),t.on("end",()=>{const t=Z.Buffer.concat(e).buffer;i({data:t,offset:r,length:t.byteLength})})}).on("error",o)}),{blockSize:r})}(t,e);throw new Error("No remote source available")}function st(t){const e=function(t,e,r){return new Promise((n,i)=>{Object(X.open)(t,e,r,(t,e)=>{t?i(t):n(e)})})}(t,"r");return{async fetch(t,r){const n=await e,{buffer:i}=await function(...t){return new Promise((e,r)=>{Object(X.read)(...t,(t,n,i)=>{t?r(t):e({bytesRead:n,buffer:i})})})}(n,Z.Buffer.alloc(r),0,r,t);return i.buffer},async close(){const t=await e;return await function(t){return new Promise((e,r)=>{Object(X.close)(t,t=>{t?r(t):e()})})}(t)}}}function at(t,e){for(const r in e)e.hasOwnProperty(r)&&(t[r]=e[r])}function ut(t,e){if(t.length<e.length)return!1;return t.substr(t.length-e.length)===e}function ct(t){const e={};for(const r in t)if(t.hasOwnProperty(r)){e[t[r]]=r}return e}function lt(t,e){const r=[];for(let n=0;n<t;n++)r.push(e(n));return r}const ft=ct(a),ht=ct(y),dt={};at(dt,ft),at(dt,ht);const pt=ct(f),yt={nextZero:(t,e)=>{let r=e;for(;0!==t[r];)r++;return r},readUshort:(t,e)=>t[e]<<8|t[e+1],readShort:(t,e)=>{const r=yt.ui8;return r[0]=t[e+1],r[1]=t[e+0],yt.i16[0]},readInt:(t,e)=>{const r=yt.ui8;return r[0]=t[e+3],r[1]=t[e+2],r[2]=t[e+1],r[3]=t[e+0],yt.i32[0]},readUint:(t,e)=>{const r=yt.ui8;return r[0]=t[e+3],r[1]=t[e+2],r[2]=t[e+1],r[3]=t[e+0],yt.ui32[0]},readASCII:(t,e,r)=>r.map(r=>String.fromCharCode(t[e+r])).join(""),readFloat:(t,e)=>{const r=yt.ui8;return lt(4,n=>{r[n]=t[e+3-n]}),yt.fl32[0]},readDouble:(t,e)=>{const r=yt.ui8;return lt(8,n=>{r[n]=t[e+7-n]}),yt.fl64[0]},writeUshort:(t,e,r)=>{t[e]=r>>8&255,t[e+1]=255&r},writeUint:(t,e,r)=>{t[e]=r>>24&255,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=r>>0&255},writeASCII:(t,e,r)=>{lt(r.length,n=>{t[e+n]=r.charCodeAt(n)})},ui8:new Uint8Array(8)};yt.fl64=new Float64Array(yt.ui8.buffer),yt.writeDouble=(t,e,r)=>{yt.fl64[0]=r,lt(8,r=>{t[e+r]=yt.ui8[7-r]})};const gt=t=>{const e=new Uint8Array(1e3);let r=4;const n=yt;e[0]=77,e[1]=77,e[3]=42;let i=8;if(n.writeUint(e,r,i),r+=4,t.forEach((r,o)=>{const s=((t,e,r,n)=>{let i=r;const o=Object.keys(n).filter(t=>null!=t&&"undefined"!==t);t.writeUshort(e,i,o.length),i+=2;let s=i+12*o.length+4;for(const r of o){let o=null;"number"==typeof r?o=r:"string"==typeof r&&(o=parseInt(r,10));const a=c[o],u=pt[a];if(null==a||void 0===a||void 0===a)throw new Error("unknown type of tag: "+o);let l=n[r];if(void 0===l)throw new Error("failed to get value for key "+r);"ASCII"===a&&"string"==typeof l&&!1===ut(l,"\\0")&&(l+="\\0");const f=l.length;t.writeUshort(e,i,o),i+=2,t.writeUshort(e,i,u),i+=2,t.writeUint(e,i,f),i+=4;let h=[-1,1,1,2,4,8,0,0,0,0,0,0,8][u]*f,d=i;h>4&&(t.writeUint(e,i,s),d=s),"ASCII"===a?t.writeASCII(e,d,l):"SHORT"===a?lt(f,r=>{t.writeUshort(e,d+2*r,l[r])}):"LONG"===a?lt(f,r=>{t.writeUint(e,d+4*r,l[r])}):"RATIONAL"===a?lt(f,r=>{t.writeUint(e,d+8*r,Math.round(1e4*l[r])),t.writeUint(e,d+8*r+4,1e4)}):"DOUBLE"===a&&lt(f,r=>{t.writeDouble(e,d+8*r,l[r])}),h>4&&(h+=1&h,s+=h),i+=4}return[i,s]})(n,e,i,r);i=s[1],o<t.length-1&&n.writeUint(e,s[0],i)}),e.slice)return e.slice(0,i).buffer;const o=new Uint8Array(i);for(let t=0;t<i;t++)o[t]=e[t];return o.buffer},mt=[["Compression",1],["PlanarConfiguration",1],["XPosition",0],["YPosition",0],["ResolutionUnit",1],["ExtraSamples",0],["GeoAsciiParams","WGS 84\\0"],["ModelTiepoint",[0,0,0,-180,90,0]],["GTModelTypeGeoKey",2],["GTRasterTypeGeoKey",1],["GeographicTypeGeoKey",4326],["GeogCitationGeoKey","WGS 84"]];function bt(t,e){let r,n,i,o;"number"==typeof t[0]?(r=e.height||e.ImageLength,i=e.width||e.ImageWidth,n=t.length/(r*i),o=t):(n=t.length,r=t[0].length,i=t[0][0].length,o=[],lt(r,e=>{lt(i,r=>{lt(n,n=>{o.push(t[n][e][r])})})})),e.ImageLength=r,delete e.height,e.ImageWidth=i,delete e.width,e.BitsPerSample||(e.BitsPerSample=lt(n,()=>8)),mt.forEach(t=>{const r=t[0];if(!e[r]){const n=t[1];e[r]=n}}),e.PhotometricInterpretation||(e.PhotometricInterpretation=3===e.BitsPerSample.length?2:1),e.SamplesPerPixel||(e.SamplesPerPixel=[n]),e.StripByteCounts||(e.StripByteCounts=[n*r*i]),e.ModelPixelScale||(e.ModelPixelScale=[360/i,180/r,0]),e.SampleFormat||(e.SampleFormat=lt(n,()=>1));const s=Object.keys(e).filter(t=>ut(t,"GeoKey")).sort((t,e)=>dt[t]-dt[e]);if(!e.GeoKeyDirectory){const t=[1,1,0,s.length];s.forEach(r=>{const n=Number(dt[r]);let i,o,s;t.push(n),"SHORT"===c[n]?(i=1,o=0,s=e[r]):"GeogCitationGeoKey"===r?(i=e.GeoAsciiParams.length,o=Number(dt.GeoAsciiParams),s=0):console.log("[geotiff.js] couldn\'t get TIFFTagLocation for "+r),t.push(o),t.push(i),t.push(s)}),e.GeoKeyDirectory=t}for(const t in s)s.hasOwnProperty(t)&&delete e[t];["Compression","ExtraSamples","GeographicTypeGeoKey","GTModelTypeGeoKey","GTRasterTypeGeoKey","ImageLength","ImageWidth","PhotometricInterpretation","PlanarConfiguration","ResolutionUnit","SamplesPerPixel","XPosition","YPosition"].forEach(t=>{var r;e[t]&&(e[t]=(r=e[t],Array.isArray(r)?r:[r]))});const a=(t=>{const e={};for(const r in t)"StripOffsets"!==r&&(dt[r]||console.error(r,"not in name2code:",Object.keys(dt)),e[dt[r]]=t[r]);return e})(e);return((t,e,r,n)=>{if(null==r)throw new Error("you passed into encodeImage a width of type "+r);if(null==e)throw new Error("you passed into encodeImage a width of type "+e);const i={256:[e],257:[r],273:[1e3],278:[r],305:"geotiff.js"};if(n)for(const t in n)n.hasOwnProperty(t)&&(i[t]=n[t]);const o=new Uint8Array(gt([i])),s=new Uint8Array(t),a=i[277],u=new Uint8Array(1e3+e*r*a);return lt(o.length,t=>{u[t]=o[t]}),function(t,e){const{length:r}=t;for(let n=0;n<r;n++)e(t[n],n)}(s,(t,e)=>{u[1e3+e]=t}),u.buffer})(o,i,r,a)}class vt{log(){}info(){}warn(){}error(){}time(){}timeEnd(){}}let wt=new vt;function xt(t=new vt){wt=t}function _t(t){switch(t){case h.BYTE:case h.ASCII:case h.SBYTE:case h.UNDEFINED:return 1;case h.SHORT:case h.SSHORT:return 2;case h.LONG:case h.SLONG:case h.FLOAT:case h.IFD:return 4;case h.RATIONAL:case h.SRATIONAL:case h.DOUBLE:case h.LONG8:case h.SLONG8:case h.IFD8:return 8;default:throw new RangeError("Invalid field type: "+t)}}function St(t,e,r,n){let i=null,o=null;const s=_t(e);switch(e){case h.BYTE:case h.ASCII:case h.UNDEFINED:i=new Uint8Array(r),o=t.readUint8;break;case h.SBYTE:i=new Int8Array(r),o=t.readInt8;break;case h.SHORT:i=new Uint16Array(r),o=t.readUint16;break;case h.SSHORT:i=new Int16Array(r),o=t.readInt16;break;case h.LONG:case h.IFD:i=new Uint32Array(r),o=t.readUint32;break;case h.SLONG:i=new Int32Array(r),o=t.readInt32;break;case h.LONG8:case h.IFD8:i=new Array(r),o=t.readUint64;break;case h.SLONG8:i=new Array(r),o=t.readInt64;break;case h.RATIONAL:i=new Uint32Array(2*r),o=t.readUint32;break;case h.SRATIONAL:i=new Int32Array(2*r),o=t.readInt32;break;case h.FLOAT:i=new Float32Array(r),o=t.readFloat32;break;case h.DOUBLE:i=new Float64Array(r),o=t.readFloat64;break;default:throw new RangeError("Invalid field type: "+e)}if(e!==h.RATIONAL&&e!==h.SRATIONAL)for(let e=0;e<r;++e)i[e]=o.call(t,n+e*s);else for(let e=0;e<r;e+=2)i[e]=o.call(t,n+e*s),i[e+1]=o.call(t,n+(e*s+4));return e===h.ASCII?String.fromCharCode.apply(null,i):i}class At{constructor(t,e,r){this.fileDirectory=t,this.geoKeyDirectory=e,this.nextIFDByteOffset=r}}class Et extends Error{constructor(t){super("No image at index "+t),this.index=t}}class kt{async readRasters(t={}){const{window:e,width:r,height:n}=t;let{resX:i,resY:o,bbox:s}=t;const a=await this.getImage();let u=a;const c=await this.getImageCount(),l=a.getBoundingBox();if(e&&s)throw new Error(\'Both "bbox" and "window" passed.\');if(r||n){if(e){const[t,r]=a.getOrigin(),[n,i]=a.getResolution();s=[t+e[0]*n,r+e[1]*i,t+e[2]*n,r+e[3]*i]}const t=s||l;if(r){if(i)throw new Error("Both width and resX passed");i=(t[2]-t[0])/r}if(n){if(o)throw new Error("Both width and resY passed");o=(t[3]-t[1])/n}}if(i||o){const t=[];for(let e=0;e<c;++e){const r=await this.getImage(e),{SubfileType:n,NewSubfileType:i}=r.fileDirectory;(0===e||2===n||1&i)&&t.push(r)}t.sort((t,e)=>t.getWidth()-e.getWidth());for(let e=0;e<t.length;++e){const r=t[e],n=(l[2]-l[0])/r.getWidth(),s=(l[3]-l[1])/r.getHeight();if(u=r,i&&i>n||o&&o>s)break}}let f=e;if(s){const[t,e]=a.getOrigin(),[r,n]=u.getResolution(a);f=[Math.round((s[0]-t)/r),Math.round((s[1]-e)/n),Math.round((s[2]-t)/r),Math.round((s[3]-e)/n)],f=[Math.min(f[0],f[2]),Math.min(f[1],f[3]),Math.max(f[0],f[2]),Math.max(f[1],f[3])]}return u.readRasters({...t,window:f})}}class Tt extends kt{constructor(t,e,r,n,i={}){super(),this.source=t,this.littleEndian=e,this.bigTiff=r,this.firstIFDOffset=n,this.cache=i.cache||!1,this.ifdRequests=[],this.ghostValues=null}async getSlice(t,e){const r=this.bigTiff?4048:1024;return new $(await this.source.fetch(t,void 0!==e?e:r),t,this.littleEndian,this.bigTiff)}async parseFileDirectoryAt(t){const e=this.bigTiff?20:12,r=this.bigTiff?8:2;let n=await this.getSlice(t);const i=this.bigTiff?n.readUint64(t):n.readUint16(t),o=i*e+(this.bigTiff?16:6);n.covers(t,o)||(n=await this.getSlice(t,o));const s={};let u=t+(this.bigTiff?8:2);for(let t=0;t<i;u+=e,++t){const t=n.readUint16(u),e=n.readUint16(u+2),r=this.bigTiff?n.readUint64(u+4):n.readUint32(u+4);let i,o;const c=_t(e),f=u+(this.bigTiff?12:8);if(c*r<=(this.bigTiff?8:4))i=St(n,e,r,f);else{const t=n.readOffset(f),o=_t(e)*r;if(n.covers(t,o))i=St(n,e,r,t);else{i=St(await this.getSlice(t,o),e,r,t)}}o=1===r&&-1===l.indexOf(t)&&e!==h.RATIONAL&&e!==h.SRATIONAL?i[0]:i,s[a[t]]=o}const c=function(t){const e=t.GeoKeyDirectory;if(!e)return null;const r={};for(let n=4;n<=4*e[3];n+=4){const i=y[e[n]],o=e[n+1]?a[e[n+1]]:null,s=e[n+2],u=e[n+3];let c=null;if(o){if(c=t[o],null==c)throw new Error(`Could not get value of geoKey \'${i}\'.`);"string"==typeof c?c=c.substring(u,u+s-1):c.subarray&&(c=c.subarray(u,u+s),1===s&&(c=c[0]))}else c=u;r[i]=c}return r}(s),f=n.readOffset(t+r+e*i);return new At(s,c,f)}async requestIFD(t){if(this.ifdRequests[t])return this.ifdRequests[t];if(0===t)return this.ifdRequests[t]=this.parseFileDirectoryAt(this.firstIFDOffset),this.ifdRequests[t];if(!this.ifdRequests[t-1])try{this.ifdRequests[t-1]=this.requestIFD(t-1)}catch(e){if(e instanceof Et)throw new Et(t);throw e}return this.ifdRequests[t]=(async()=>{const e=await this.ifdRequests[t-1];if(0===e.nextIFDByteOffset)throw new Et(t);return this.parseFileDirectoryAt(e.nextIFDByteOffset)})(),this.ifdRequests[t]}async getImage(t=0){const e=await this.requestIFD(t);return new V(e.fileDirectory,e.geoKeyDirectory,this.dataView,this.littleEndian,this.cache,this.source)}async getImageCount(){let t=0,e=!0;for(;e;)try{await this.requestIFD(t),++t}catch(t){if(!(t instanceof Et))throw t;e=!1}return t}async getGhostValues(){const t=this.bigTiff?16:8;if(this.ghostValues)return this.ghostValues;const e="GDAL_STRUCTURAL_METADATA_SIZE=",r=e.length+100;let n=await this.getSlice(t,r);if(e===St(n,h.ASCII,e.length,t)){const e=St(n,h.ASCII,r,t).split("\\n")[0],i=Number(e.split("=")[1].split(" ")[0])+e.length;i>r&&(n=await this.getSlice(t,i));const o=St(n,h.ASCII,i,t);this.ghostValues={},o.split("\\n").filter(t=>t.length>0).map(t=>t.split("=")).forEach(([t,e])=>{this.ghostValues[t]=e})}return this.ghostValues}static async fromSource(t,e){const r=await t.fetch(0,1024),n=new K(r),i=n.getUint16(0,0);let o;if(18761===i)o=!0;else{if(19789!==i)throw new TypeError("Invalid byte order value.");o=!1}const s=n.getUint16(2,o);let a;if(42===s)a=!1;else{if(43!==s)throw new TypeError("Invalid magic number.");a=!0;if(8!==n.getUint16(4,o))throw new Error("Unsupported offset byte-size.")}const u=a?n.getUint64(8,o):n.getUint32(4,o);return new Tt(t,o,a,u,e)}close(){return"function"==typeof this.source.close&&this.source.close()}}e.default=Tt;class Ct extends kt{constructor(t,e){super(),this.mainFile=t,this.overviewFiles=e,this.imageFiles=[t].concat(e),this.fileDirectoriesPerFile=null,this.fileDirectoriesPerFileParsing=null,this.imageCount=null}async parseFileDirectoriesPerFile(){const t=[this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)].concat(this.overviewFiles.map(t=>t.parseFileDirectoryAt(t.firstIFDOffset)));return this.fileDirectoriesPerFile=await Promise.all(t),this.fileDirectoriesPerFile}async getImage(t=0){await this.getImageCount(),await this.parseFileDirectoriesPerFile();let e=0,r=0;for(let n=0;n<this.imageFiles.length;n++){const i=this.imageFiles[n];for(let o=0;o<this.imageCounts[n];o++){if(t===e){const t=await i.requestIFD(r);return new V(t.fileDirectory,i.geoKeyDirectory,i.dataView,i.littleEndian,i.cache,i.source)}e++,r++}r=0}throw new RangeError("Invalid image index")}async getImageCount(){if(null!==this.imageCount)return this.imageCount;const t=[this.mainFile.getImageCount()].concat(this.overviewFiles.map(t=>t.getImageCount()));return this.imageCounts=await Promise.all(t),this.imageCount=this.imageCounts.reduce((t,e)=>t+e,0),this.imageCount}}async function Ot(t,e={}){return Tt.fromSource(ot(t,e))}async function It(t){return Tt.fromSource(function(t){return{fetch:async(e,r)=>t.slice(e,e+r)}}(t))}async function Pt(t){return Tt.fromSource(st(t))}async function Rt(t){return Tt.fromSource((e=t,{fetch:async(t,r)=>new Promise((n,i)=>{const o=e.slice(t,t+r),s=new FileReader;s.onload=t=>n(t.target.result),s.onerror=i,s.readAsArrayBuffer(o)})}));var e}async function jt(t,e=[],r={}){const n=await Tt.fromSource(ot(t,r)),i=await Promise.all(e.map(t=>Tt.fromSource(ot(t,r))));return new Ct(n,i)}async function Mt(t,e){return bt(t,e)}},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));var n=r(19);Object(n.b)().blob;const i=Object(n.b)().default},,,function(t,e,r){"use strict";var n=r(26),i=r(102);var o=function(t){"function"==typeof t?t():t&&"function"==typeof t.unsubscribe&&t.unsubscribe()};e.a=function(t){const e=new i.a;let r,s=0;return new n.a(n=>{r||(r=t.subscribe(e));const i=e.subscribe(n);return s++,()=>{s--,i.unsubscribe(),0===s&&(o(r),r=void 0)}})}}]);',null)}},function(e,i,a){var s=window.URL||window.webkitURL;e.exports=function(o,h){try{try{var f;try{(f=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder)).append(o),f=f.getBlob()}catch{f=new Blob([o])}return new Worker(s.createObjectURL(f))}catch{return new Worker("data:application/javascript,"+encodeURIComponent(o))}}catch{if(!h)throw Error("Inline worker is not supported");return new Worker(h)}}},function(e,i,a){Object.defineProperty(i,"__esModule",{value:!0});var s=function(_,A){if(Array.isArray(_))return _;if(Symbol.iterator in Object(_))return function(T,E){var P=[],M=!0,F=!1,k=void 0;try{for(var O,v=T[Symbol.iterator]();!(M=(O=v.next()).done)&&(P.push(O.value),!E||P.length!==E);M=!0);}catch(R){F=!0,k=R}finally{try{!M&&v.return&&v.return()}finally{if(F)throw k}}return P}(_,A);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(_){return typeof _}:function(_){return _&&typeof Symbol=="function"&&_.constructor===Symbol&&_!==Symbol.prototype?"symbol":typeof _};i.default=function(_,A){return new Promise(function(T,E){try{A&&console.log("starting parseData with",_),A&&console.log("	GeoTIFF:",typeof GeoTIFF>"u"?"undefined":o(GeoTIFF));var P={},M=void 0,F=void 0;if(_.rasterType==="object")P.values=_.data,P.height=M=_.metadata.height||P.values[0].length,P.width=F=_.metadata.width||P.values[0][0].length,P.pixelHeight=_.metadata.pixelHeight,P.pixelWidth=_.metadata.pixelWidth,P.projection=_.metadata.projection,P.xmin=_.metadata.xmin,P.ymax=_.metadata.ymax,P.noDataValue=_.metadata.noDataValue,P.numberOfRasters=P.values.length,P.xmax=P.xmin+P.width*P.pixelWidth,P.ymin=P.ymax-P.height*P.pixelHeight,P._data=null,T(w(P));else if(_.rasterType==="geotiff"){P._data=_.data;var k=f.fromArrayBuffer;_.sourceType==="url"?k=f.fromUrl:_.sourceType==="Blob"&&(k=f.fromBlob),A&&console.log("data.rasterType is geotiff"),T(k(_.data).then(function(O){return A&&console.log("geotiff:",O),O.getImage().then(function(v){try{A&&console.log("image:",v);var R=v.fileDirectory,G=v.getGeoKeys()||{},j=G.GeographicTypeGeoKey,U=G.ProjectedCSTypeGeoKey;P.projection=U||j||_.metadata.projection,A&&console.log("projection:",P.projection),P.height=M=v.getHeight(),A&&console.log("result.height:",P.height),P.width=F=v.getWidth(),A&&console.log("result.width:",P.width);var N=v.getResolution(),Z=s(N,2),V=Z[0],B=Z[1];P.pixelHeight=Math.abs(B),P.pixelWidth=Math.abs(V);var J=v.getOrigin(),lt=s(J,2),mt=lt[0],ut=lt[1];return P.xmin=mt,P.xmax=P.xmin+F*P.pixelWidth,P.ymax=ut,P.ymin=P.ymax-M*P.pixelHeight,P.noDataValue=R.GDAL_NODATA?parseFloat(R.GDAL_NODATA):null,P.numberOfRasters=R.SamplesPerPixel,R.ColorMap&&(P.palette=(0,d.getPalette)(v)),_.sourceType!=="url"?v.readRasters().then(function(ft){return P.values=ft.map(function(tt){return(0,x.unflatten)(tt,{height:M,width:F})}),w(P)}):P}catch(ft){E(ft),console.error("[georaster] error parsing georaster:",ft)}})}))}}catch(O){E(O),console.error("[georaster] error parsing georaster:",O)}})};var h,f=a(100),d=a(155),p=a(156),g=(h=p)&&h.__esModule?h:{default:h},x=a(99);function w(_){var A=(0,g.default)(_.values,{height:_.height,layout:"[band][row][column]",noData:_.noDataValue,precise:!1,stats:["max","min","range"],width:_.width});return _.maxs=A.bands.map(function(T){return T.max}),_.mins=A.bands.map(function(T){return T.min}),_.ranges=A.bands.map(function(T){return T.range}),_}},function(e,i,a){(function(s){var o=a(42).Transform,h=a(10);function f(g){o.call(this,g),this._destroyed=!1}function d(g,x,w){w(null,g)}function p(g){return function(x,w,_){return typeof x=="function"&&(_=w,w=x,x={}),typeof w!="function"&&(w=d),typeof _!="function"&&(_=null),g(x,w,_)}}h(f,o),f.prototype.destroy=function(g){if(!this._destroyed){this._destroyed=!0;var x=this;s.nextTick(function(){g&&x.emit("error",g),x.emit("close")})}},e.exports=p(function(g,x,w){var _=new f(g);return _._transform=x,w&&(_._flush=w),_}),e.exports.ctor=p(function(g,x,w){function _(A){if(!(this instanceof _))return new _(A);this.options=Object.assign({},g,A),f.call(this,this.options)}return h(_,f),_.prototype._transform=x,w&&(_.prototype._flush=w),_}),e.exports.obj=p(function(g,x,w){var _=new f(Object.assign({objectMode:!0,highWaterMark:16},g));return _._transform=x,w&&(_._flush=w),_})}).call(this,a(8))},function(e,i){},function(e,i,a){var s=a(43).Buffer,o=a(117);e.exports=function(){function h(){(function(f,d){if(!(f instanceof d))throw new TypeError("Cannot call a class as a function")})(this,h),this.head=null,this.tail=null,this.length=0}return h.prototype.push=function(f){var d={data:f,next:null};this.length>0?this.tail.next=d:this.head=d,this.tail=d,++this.length},h.prototype.unshift=function(f){var d={data:f,next:this.head};this.length===0&&(this.tail=d),this.head=d,++this.length},h.prototype.shift=function(){if(this.length!==0){var f=this.head.data;return this.length===1?this.head=this.tail=null:this.head=this.head.next,--this.length,f}},h.prototype.clear=function(){this.head=this.tail=null,this.length=0},h.prototype.join=function(f){if(this.length===0)return"";for(var d=this.head,p=""+d.data;d=d.next;)p+=f+d.data;return p},h.prototype.concat=function(f){if(this.length===0)return s.alloc(0);for(var d,p,g,x=s.allocUnsafe(f>>>0),w=this.head,_=0;w;)d=w.data,p=x,g=_,d.copy(p,g),_+=w.data.length,w=w.next;return x},h}(),o&&o.inspect&&o.inspect.custom&&(e.exports.prototype[o.inspect.custom]=function(){var h=o.inspect({length:this.length});return this.constructor.name+" "+h})},function(e,i){},function(e,i,a){(function(s){var o=s!==void 0&&s||typeof self<"u"&&self||window,h=Function.prototype.apply;function f(d,p){this._id=d,this._clearFn=p}i.setTimeout=function(){return new f(h.call(setTimeout,o,arguments),clearTimeout)},i.setInterval=function(){return new f(h.call(setInterval,o,arguments),clearInterval)},i.clearTimeout=i.clearInterval=function(d){d&&d.close()},f.prototype.unref=f.prototype.ref=function(){},f.prototype.close=function(){this._clearFn.call(o,this._id)},i.enroll=function(d,p){clearTimeout(d._idleTimeoutId),d._idleTimeout=p},i.unenroll=function(d){clearTimeout(d._idleTimeoutId),d._idleTimeout=-1},i._unrefActive=i.active=function(d){clearTimeout(d._idleTimeoutId);var p=d._idleTimeout;p>=0&&(d._idleTimeoutId=setTimeout(function(){d._onTimeout&&d._onTimeout()},p))},a(119),i.setImmediate=typeof self<"u"&&self.setImmediate||s!==void 0&&s.setImmediate||this&&this.setImmediate,i.clearImmediate=typeof self<"u"&&self.clearImmediate||s!==void 0&&s.clearImmediate||this&&this.clearImmediate}).call(this,a(3))},function(e,i,a){(function(s,o){(function(h,f){if(!h.setImmediate){var d,p,g,x,w,_=1,A={},T=!1,E=h.document,P=Object.getPrototypeOf&&Object.getPrototypeOf(h);P=P&&P.setTimeout?P:h,{}.toString.call(h.process)==="[object process]"?d=function(k){o.nextTick(function(){F(k)})}:function(){if(h.postMessage&&!h.importScripts){var k=!0,O=h.onmessage;return h.onmessage=function(){k=!1},h.postMessage("","*"),h.onmessage=O,k}}()?(x="setImmediate$"+Math.random()+"$",w=function(k){k.source===h&&typeof k.data=="string"&&k.data.indexOf(x)===0&&F(+k.data.slice(x.length))},h.addEventListener?h.addEventListener("message",w,!1):h.attachEvent("onmessage",w),d=function(k){h.postMessage(x+k,"*")}):h.MessageChannel?((g=new MessageChannel).port1.onmessage=function(k){F(k.data)},d=function(k){g.port2.postMessage(k)}):E&&"onreadystatechange"in E.createElement("script")?(p=E.documentElement,d=function(k){var O=E.createElement("script");O.onreadystatechange=function(){F(k),O.onreadystatechange=null,p.removeChild(O),O=null},p.appendChild(O)}):d=function(k){setTimeout(F,0,k)},P.setImmediate=function(k){typeof k!="function"&&(k=new Function(""+k));for(var O=new Array(arguments.length-1),v=0;v<O.length;v++)O[v]=arguments[v+1];var R={callback:k,args:O};return A[_]=R,d(_),_++},P.clearImmediate=M}function M(k){delete A[k]}function F(k){if(T)setTimeout(F,0,k);else{var O=A[k];if(O){T=!0;try{(function(v){var R=v.callback,G=v.args;switch(G.length){case 0:R();break;case 1:R(G[0]);break;case 2:R(G[0],G[1]);break;case 3:R(G[0],G[1],G[2]);break;default:R.apply(void 0,G)}})(O)}finally{M(k),T=!1}}}}})(typeof self>"u"?s===void 0?this:s:self)}).call(this,a(3),a(8))},function(e,i,a){(function(s){function o(h){try{if(!s.localStorage)return!1}catch{return!1}var f=s.localStorage[h];return f!=null&&String(f).toLowerCase()==="true"}e.exports=function(h,f){if(o("noDeprecation"))return h;var d=!1;return function(){if(!d){if(o("throwDeprecation"))throw new Error(f);o("traceDeprecation")?console.trace(f):console.warn(f),d=!0}return h.apply(this,arguments)}}}).call(this,a(3))},function(e,i,a){var s=a(7),o=s.Buffer;function h(d,p){for(var g in d)p[g]=d[g]}function f(d,p,g){return o(d,p,g)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?e.exports=s:(h(s,i),i.Buffer=f),h(o,f),f.from=function(d,p,g){if(typeof d=="number")throw new TypeError("Argument must not be a number");return o(d,p,g)},f.alloc=function(d,p,g){if(typeof d!="number")throw new TypeError("Argument must be a number");var x=o(d);return p!==void 0?typeof g=="string"?x.fill(p,g):x.fill(p):x.fill(0),x},f.allocUnsafe=function(d){if(typeof d!="number")throw new TypeError("Argument must be a number");return o(d)},f.allocUnsafeSlow=function(d){if(typeof d!="number")throw new TypeError("Argument must be a number");return s.SlowBuffer(d)}},function(e,i,a){e.exports=h;var s=a(67),o=Object.create(a(21));function h(f){if(!(this instanceof h))return new h(f);s.call(this,f)}o.inherits=a(10),o.inherits(h,s),h.prototype._transform=function(f,d,p){p(null,f)}},function(e,i,a){var s=a(29),o=a(124),h=a(125),f=a(126),d=a(127);function p(k){return(k>>>24&255)+(k>>>8&65280)+((65280&k)<<8)+((255&k)<<24)}function g(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new s.Buf16(320),this.work=new s.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function x(k){var O;return k&&k.state?(O=k.state,k.total_in=k.total_out=O.total=0,k.msg="",O.wrap&&(k.adler=1&O.wrap),O.mode=1,O.last=0,O.havedict=0,O.dmax=32768,O.head=null,O.hold=0,O.bits=0,O.lencode=O.lendyn=new s.Buf32(852),O.distcode=O.distdyn=new s.Buf32(592),O.sane=1,O.back=-1,0):-2}function w(k){var O;return k&&k.state?((O=k.state).wsize=0,O.whave=0,O.wnext=0,x(k)):-2}function _(k,O){var v,R;return k&&k.state?(R=k.state,O<0?(v=0,O=-O):(v=1+(O>>4),O<48&&(O&=15)),O&&(O<8||O>15)?-2:(R.window!==null&&R.wbits!==O&&(R.window=null),R.wrap=v,R.wbits=O,w(k))):-2}function A(k,O){var v,R;return k?(R=new g,k.state=R,R.window=null,(v=_(k,O))!==0&&(k.state=null),v):-2}var T,E,P=!0;function M(k){if(P){var O;for(T=new s.Buf32(512),E=new s.Buf32(32),O=0;O<144;)k.lens[O++]=8;for(;O<256;)k.lens[O++]=9;for(;O<280;)k.lens[O++]=7;for(;O<288;)k.lens[O++]=8;for(d(1,k.lens,0,288,T,0,k.work,{bits:9}),O=0;O<32;)k.lens[O++]=5;d(2,k.lens,0,32,E,0,k.work,{bits:5}),P=!1}k.lencode=T,k.lenbits=9,k.distcode=E,k.distbits=5}function F(k,O,v,R){var G,j=k.state;return j.window===null&&(j.wsize=1<<j.wbits,j.wnext=0,j.whave=0,j.window=new s.Buf8(j.wsize)),R>=j.wsize?(s.arraySet(j.window,O,v-j.wsize,j.wsize,0),j.wnext=0,j.whave=j.wsize):((G=j.wsize-j.wnext)>R&&(G=R),s.arraySet(j.window,O,v-R,G,j.wnext),(R-=G)?(s.arraySet(j.window,O,v-R,R,0),j.wnext=R,j.whave=j.wsize):(j.wnext+=G,j.wnext===j.wsize&&(j.wnext=0),j.whave<j.wsize&&(j.whave+=G))),0}i.inflateReset=w,i.inflateReset2=_,i.inflateResetKeep=x,i.inflateInit=function(k){return A(k,15)},i.inflateInit2=A,i.inflate=function(k,O){var v,R,G,j,U,N,Z,V,B,J,lt,mt,ut,ft,tt,et,St,_t,Gt,Wt,Lt,Qt,he,z,Y=0,at=new s.Buf8(4),Tt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!k||!k.state||!k.output||!k.input&&k.avail_in!==0)return-2;(v=k.state).mode===12&&(v.mode=13),U=k.next_out,G=k.output,Z=k.avail_out,j=k.next_in,R=k.input,N=k.avail_in,V=v.hold,B=v.bits,J=N,lt=Z,Qt=0;t:for(;;)switch(v.mode){case 1:if(v.wrap===0){v.mode=13;break}for(;B<16;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(2&v.wrap&&V===35615){v.check=0,at[0]=255&V,at[1]=V>>>8&255,v.check=h(v.check,at,2,0),V=0,B=0,v.mode=2;break}if(v.flags=0,v.head&&(v.head.done=!1),!(1&v.wrap)||(((255&V)<<8)+(V>>8))%31){k.msg="incorrect header check",v.mode=30;break}if((15&V)!=8){k.msg="unknown compression method",v.mode=30;break}if(B-=4,Lt=8+(15&(V>>>=4)),v.wbits===0)v.wbits=Lt;else if(Lt>v.wbits){k.msg="invalid window size",v.mode=30;break}v.dmax=1<<Lt,k.adler=v.check=1,v.mode=512&V?10:12,V=0,B=0;break;case 2:for(;B<16;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(v.flags=V,(255&v.flags)!=8){k.msg="unknown compression method",v.mode=30;break}if(57344&v.flags){k.msg="unknown header flags set",v.mode=30;break}v.head&&(v.head.text=V>>8&1),512&v.flags&&(at[0]=255&V,at[1]=V>>>8&255,v.check=h(v.check,at,2,0)),V=0,B=0,v.mode=3;case 3:for(;B<32;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}v.head&&(v.head.time=V),512&v.flags&&(at[0]=255&V,at[1]=V>>>8&255,at[2]=V>>>16&255,at[3]=V>>>24&255,v.check=h(v.check,at,4,0)),V=0,B=0,v.mode=4;case 4:for(;B<16;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}v.head&&(v.head.xflags=255&V,v.head.os=V>>8),512&v.flags&&(at[0]=255&V,at[1]=V>>>8&255,v.check=h(v.check,at,2,0)),V=0,B=0,v.mode=5;case 5:if(1024&v.flags){for(;B<16;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}v.length=V,v.head&&(v.head.extra_len=V),512&v.flags&&(at[0]=255&V,at[1]=V>>>8&255,v.check=h(v.check,at,2,0)),V=0,B=0}else v.head&&(v.head.extra=null);v.mode=6;case 6:if(1024&v.flags&&((mt=v.length)>N&&(mt=N),mt&&(v.head&&(Lt=v.head.extra_len-v.length,v.head.extra||(v.head.extra=new Array(v.head.extra_len)),s.arraySet(v.head.extra,R,j,mt,Lt)),512&v.flags&&(v.check=h(v.check,R,mt,j)),N-=mt,j+=mt,v.length-=mt),v.length))break t;v.length=0,v.mode=7;case 7:if(2048&v.flags){if(N===0)break t;mt=0;do Lt=R[j+mt++],v.head&&Lt&&v.length<65536&&(v.head.name+=String.fromCharCode(Lt));while(Lt&&mt<N);if(512&v.flags&&(v.check=h(v.check,R,mt,j)),N-=mt,j+=mt,Lt)break t}else v.head&&(v.head.name=null);v.length=0,v.mode=8;case 8:if(4096&v.flags){if(N===0)break t;mt=0;do Lt=R[j+mt++],v.head&&Lt&&v.length<65536&&(v.head.comment+=String.fromCharCode(Lt));while(Lt&&mt<N);if(512&v.flags&&(v.check=h(v.check,R,mt,j)),N-=mt,j+=mt,Lt)break t}else v.head&&(v.head.comment=null);v.mode=9;case 9:if(512&v.flags){for(;B<16;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(V!==(65535&v.check)){k.msg="header crc mismatch",v.mode=30;break}V=0,B=0}v.head&&(v.head.hcrc=v.flags>>9&1,v.head.done=!0),k.adler=v.check=0,v.mode=12;break;case 10:for(;B<32;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}k.adler=v.check=p(V),V=0,B=0,v.mode=11;case 11:if(v.havedict===0)return k.next_out=U,k.avail_out=Z,k.next_in=j,k.avail_in=N,v.hold=V,v.bits=B,2;k.adler=v.check=1,v.mode=12;case 12:if(O===5||O===6)break t;case 13:if(v.last){V>>>=7&B,B-=7&B,v.mode=27;break}for(;B<3;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}switch(v.last=1&V,B-=1,3&(V>>>=1)){case 0:v.mode=14;break;case 1:if(M(v),v.mode=20,O===6){V>>>=2,B-=2;break t}break;case 2:v.mode=17;break;case 3:k.msg="invalid block type",v.mode=30}V>>>=2,B-=2;break;case 14:for(V>>>=7&B,B-=7&B;B<32;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if((65535&V)!=(V>>>16^65535)){k.msg="invalid stored block lengths",v.mode=30;break}if(v.length=65535&V,V=0,B=0,v.mode=15,O===6)break t;case 15:v.mode=16;case 16:if(mt=v.length){if(mt>N&&(mt=N),mt>Z&&(mt=Z),mt===0)break t;s.arraySet(G,R,j,mt,U),N-=mt,j+=mt,Z-=mt,U+=mt,v.length-=mt;break}v.mode=12;break;case 17:for(;B<14;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(v.nlen=257+(31&V),V>>>=5,B-=5,v.ndist=1+(31&V),V>>>=5,B-=5,v.ncode=4+(15&V),V>>>=4,B-=4,v.nlen>286||v.ndist>30){k.msg="too many length or distance symbols",v.mode=30;break}v.have=0,v.mode=18;case 18:for(;v.have<v.ncode;){for(;B<3;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}v.lens[Tt[v.have++]]=7&V,V>>>=3,B-=3}for(;v.have<19;)v.lens[Tt[v.have++]]=0;if(v.lencode=v.lendyn,v.lenbits=7,he={bits:v.lenbits},Qt=d(0,v.lens,0,19,v.lencode,0,v.work,he),v.lenbits=he.bits,Qt){k.msg="invalid code lengths set",v.mode=30;break}v.have=0,v.mode=19;case 19:for(;v.have<v.nlen+v.ndist;){for(;et=(Y=v.lencode[V&(1<<v.lenbits)-1])>>>16&255,St=65535&Y,!((tt=Y>>>24)<=B);){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(St<16)V>>>=tt,B-=tt,v.lens[v.have++]=St;else{if(St===16){for(z=tt+2;B<z;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(V>>>=tt,B-=tt,v.have===0){k.msg="invalid bit length repeat",v.mode=30;break}Lt=v.lens[v.have-1],mt=3+(3&V),V>>>=2,B-=2}else if(St===17){for(z=tt+3;B<z;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}B-=tt,Lt=0,mt=3+(7&(V>>>=tt)),V>>>=3,B-=3}else{for(z=tt+7;B<z;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}B-=tt,Lt=0,mt=11+(127&(V>>>=tt)),V>>>=7,B-=7}if(v.have+mt>v.nlen+v.ndist){k.msg="invalid bit length repeat",v.mode=30;break}for(;mt--;)v.lens[v.have++]=Lt}}if(v.mode===30)break;if(v.lens[256]===0){k.msg="invalid code -- missing end-of-block",v.mode=30;break}if(v.lenbits=9,he={bits:v.lenbits},Qt=d(1,v.lens,0,v.nlen,v.lencode,0,v.work,he),v.lenbits=he.bits,Qt){k.msg="invalid literal/lengths set",v.mode=30;break}if(v.distbits=6,v.distcode=v.distdyn,he={bits:v.distbits},Qt=d(2,v.lens,v.nlen,v.ndist,v.distcode,0,v.work,he),v.distbits=he.bits,Qt){k.msg="invalid distances set",v.mode=30;break}if(v.mode=20,O===6)break t;case 20:v.mode=21;case 21:if(N>=6&&Z>=258){k.next_out=U,k.avail_out=Z,k.next_in=j,k.avail_in=N,v.hold=V,v.bits=B,f(k,lt),U=k.next_out,G=k.output,Z=k.avail_out,j=k.next_in,R=k.input,N=k.avail_in,V=v.hold,B=v.bits,v.mode===12&&(v.back=-1);break}for(v.back=0;et=(Y=v.lencode[V&(1<<v.lenbits)-1])>>>16&255,St=65535&Y,!((tt=Y>>>24)<=B);){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(et&&!(240&et)){for(_t=tt,Gt=et,Wt=St;et=(Y=v.lencode[Wt+((V&(1<<_t+Gt)-1)>>_t)])>>>16&255,St=65535&Y,!(_t+(tt=Y>>>24)<=B);){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}V>>>=_t,B-=_t,v.back+=_t}if(V>>>=tt,B-=tt,v.back+=tt,v.length=St,et===0){v.mode=26;break}if(32&et){v.back=-1,v.mode=12;break}if(64&et){k.msg="invalid literal/length code",v.mode=30;break}v.extra=15&et,v.mode=22;case 22:if(v.extra){for(z=v.extra;B<z;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}v.length+=V&(1<<v.extra)-1,V>>>=v.extra,B-=v.extra,v.back+=v.extra}v.was=v.length,v.mode=23;case 23:for(;et=(Y=v.distcode[V&(1<<v.distbits)-1])>>>16&255,St=65535&Y,!((tt=Y>>>24)<=B);){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(!(240&et)){for(_t=tt,Gt=et,Wt=St;et=(Y=v.distcode[Wt+((V&(1<<_t+Gt)-1)>>_t)])>>>16&255,St=65535&Y,!(_t+(tt=Y>>>24)<=B);){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}V>>>=_t,B-=_t,v.back+=_t}if(V>>>=tt,B-=tt,v.back+=tt,64&et){k.msg="invalid distance code",v.mode=30;break}v.offset=St,v.extra=15&et,v.mode=24;case 24:if(v.extra){for(z=v.extra;B<z;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}v.offset+=V&(1<<v.extra)-1,V>>>=v.extra,B-=v.extra,v.back+=v.extra}if(v.offset>v.dmax){k.msg="invalid distance too far back",v.mode=30;break}v.mode=25;case 25:if(Z===0)break t;if(mt=lt-Z,v.offset>mt){if((mt=v.offset-mt)>v.whave&&v.sane){k.msg="invalid distance too far back",v.mode=30;break}mt>v.wnext?(mt-=v.wnext,ut=v.wsize-mt):ut=v.wnext-mt,mt>v.length&&(mt=v.length),ft=v.window}else ft=G,ut=U-v.offset,mt=v.length;mt>Z&&(mt=Z),Z-=mt,v.length-=mt;do G[U++]=ft[ut++];while(--mt);v.length===0&&(v.mode=21);break;case 26:if(Z===0)break t;G[U++]=v.length,Z--,v.mode=21;break;case 27:if(v.wrap){for(;B<32;){if(N===0)break t;N--,V|=R[j++]<<B,B+=8}if(lt-=Z,k.total_out+=lt,v.total+=lt,lt&&(k.adler=v.check=v.flags?h(v.check,G,lt,U-lt):o(v.check,G,lt,U-lt)),lt=Z,(v.flags?V:p(V))!==v.check){k.msg="incorrect data check",v.mode=30;break}V=0,B=0}v.mode=28;case 28:if(v.wrap&&v.flags){for(;B<32;){if(N===0)break t;N--,V+=R[j++]<<B,B+=8}if(V!==(4294967295&v.total)){k.msg="incorrect length check",v.mode=30;break}V=0,B=0}v.mode=29;case 29:Qt=1;break t;case 30:Qt=-3;break t;case 31:return-4;case 32:default:return-2}return k.next_out=U,k.avail_out=Z,k.next_in=j,k.avail_in=N,v.hold=V,v.bits=B,(v.wsize||lt!==k.avail_out&&v.mode<30&&(v.mode<27||O!==4))&&F(k,k.output,k.next_out,lt-k.avail_out)?(v.mode=31,-4):(J-=k.avail_in,lt-=k.avail_out,k.total_in+=J,k.total_out+=lt,v.total+=lt,v.wrap&&lt&&(k.adler=v.check=v.flags?h(v.check,G,lt,k.next_out-lt):o(v.check,G,lt,k.next_out-lt)),k.data_type=v.bits+(v.last?64:0)+(v.mode===12?128:0)+(v.mode===20||v.mode===15?256:0),(J===0&&lt===0||O===4)&&Qt===0&&(Qt=-5),Qt)},i.inflateEnd=function(k){if(!k||!k.state)return-2;var O=k.state;return O.window&&(O.window=null),k.state=null,0},i.inflateGetHeader=function(k,O){var v;return k&&k.state&&2&(v=k.state).wrap?(v.head=O,O.done=!1,0):-2},i.inflateSetDictionary=function(k,O){var v,R=O.length;return k&&k.state?(v=k.state).wrap!==0&&v.mode!==11?-2:v.mode===11&&o(1,O,R,0)!==v.check?-3:F(k,O,R,R)?(v.mode=31,-4):(v.havedict=1,0):-2},i.inflateInfo="pako inflate (from Nodeca project)"},function(e,i,a){e.exports=function(s,o,h,f){for(var d=65535&s|0,p=s>>>16&65535|0,g=0;h!==0;){h-=g=h>2e3?2e3:h;do p=p+(d=d+o[f++]|0)|0;while(--g);d%=65521,p%=65521}return d|p<<16|0}},function(e,i,a){var s=function(){for(var o,h=[],f=0;f<256;f++){o=f;for(var d=0;d<8;d++)o=1&o?3988292384^o>>>1:o>>>1;h[f]=o}return h}();e.exports=function(o,h,f,d){var p=s,g=d+f;o^=-1;for(var x=d;x<g;x++)o=o>>>8^p[255&(o^h[x])];return-1^o}},function(e,i,a){e.exports=function(s,o){var h,f,d,p,g,x,w,_,A,T,E,P,M,F,k,O,v,R,G,j,U,N,Z,V,B;h=s.state,f=s.next_in,V=s.input,d=f+(s.avail_in-5),p=s.next_out,B=s.output,g=p-(o-s.avail_out),x=p+(s.avail_out-257),w=h.dmax,_=h.wsize,A=h.whave,T=h.wnext,E=h.window,P=h.hold,M=h.bits,F=h.lencode,k=h.distcode,O=(1<<h.lenbits)-1,v=(1<<h.distbits)-1;t:do{M<15&&(P+=V[f++]<<M,M+=8,P+=V[f++]<<M,M+=8),R=F[P&O];e:for(;;){if(P>>>=G=R>>>24,M-=G,(G=R>>>16&255)===0)B[p++]=65535&R;else{if(!(16&G)){if(!(64&G)){R=F[(65535&R)+(P&(1<<G)-1)];continue e}if(32&G){h.mode=12;break t}s.msg="invalid literal/length code",h.mode=30;break t}j=65535&R,(G&=15)&&(M<G&&(P+=V[f++]<<M,M+=8),j+=P&(1<<G)-1,P>>>=G,M-=G),M<15&&(P+=V[f++]<<M,M+=8,P+=V[f++]<<M,M+=8),R=k[P&v];n:for(;;){if(P>>>=G=R>>>24,M-=G,!(16&(G=R>>>16&255))){if(!(64&G)){R=k[(65535&R)+(P&(1<<G)-1)];continue n}s.msg="invalid distance code",h.mode=30;break t}if(U=65535&R,M<(G&=15)&&(P+=V[f++]<<M,(M+=8)<G&&(P+=V[f++]<<M,M+=8)),(U+=P&(1<<G)-1)>w){s.msg="invalid distance too far back",h.mode=30;break t}if(P>>>=G,M-=G,U>(G=p-g)){if((G=U-G)>A&&h.sane){s.msg="invalid distance too far back",h.mode=30;break t}if(N=0,Z=E,T===0){if(N+=_-G,G<j){j-=G;do B[p++]=E[N++];while(--G);N=p-U,Z=B}}else if(T<G){if(N+=_+T-G,(G-=T)<j){j-=G;do B[p++]=E[N++];while(--G);if(N=0,T<j){j-=G=T;do B[p++]=E[N++];while(--G);N=p-U,Z=B}}}else if(N+=T-G,G<j){j-=G;do B[p++]=E[N++];while(--G);N=p-U,Z=B}for(;j>2;)B[p++]=Z[N++],B[p++]=Z[N++],B[p++]=Z[N++],j-=3;j&&(B[p++]=Z[N++],j>1&&(B[p++]=Z[N++]))}else{N=p-U;do B[p++]=B[N++],B[p++]=B[N++],B[p++]=B[N++],j-=3;while(j>2);j&&(B[p++]=B[N++],j>1&&(B[p++]=B[N++]))}break}}break}}while(f<d&&p<x);f-=j=M>>3,P&=(1<<(M-=j<<3))-1,s.next_in=f,s.next_out=p,s.avail_in=f<d?d-f+5:5-(f-d),s.avail_out=p<x?x-p+257:257-(p-x),h.hold=P,h.bits=M}},function(e,i,a){var s=a(29),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],h=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],f=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],d=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(p,g,x,w,_,A,T,E){var P,M,F,k,O,v,R,G,j,U=E.bits,N=0,Z=0,V=0,B=0,J=0,lt=0,mt=0,ut=0,ft=0,tt=0,et=null,St=0,_t=new s.Buf16(16),Gt=new s.Buf16(16),Wt=null,Lt=0;for(N=0;N<=15;N++)_t[N]=0;for(Z=0;Z<w;Z++)_t[g[x+Z]]++;for(J=U,B=15;B>=1&&_t[B]===0;B--);if(J>B&&(J=B),B===0)return _[A++]=20971520,_[A++]=20971520,E.bits=1,0;for(V=1;V<B&&_t[V]===0;V++);for(J<V&&(J=V),ut=1,N=1;N<=15;N++)if(ut<<=1,(ut-=_t[N])<0)return-1;if(ut>0&&(p===0||B!==1))return-1;for(Gt[1]=0,N=1;N<15;N++)Gt[N+1]=Gt[N]+_t[N];for(Z=0;Z<w;Z++)g[x+Z]!==0&&(T[Gt[g[x+Z]]++]=Z);if(p===0?(et=Wt=T,v=19):p===1?(et=o,St-=257,Wt=h,Lt-=257,v=256):(et=f,Wt=d,v=-1),tt=0,Z=0,N=V,O=A,lt=J,mt=0,F=-1,k=(ft=1<<J)-1,p===1&&ft>852||p===2&&ft>592)return 1;for(;;){R=N-mt,T[Z]<v?(G=0,j=T[Z]):T[Z]>v?(G=Wt[Lt+T[Z]],j=et[St+T[Z]]):(G=96,j=0),P=1<<N-mt,V=M=1<<lt;do _[O+(tt>>mt)+(M-=P)]=R<<24|G<<16|j|0;while(M!==0);for(P=1<<N-1;tt&P;)P>>=1;if(P!==0?(tt&=P-1,tt+=P):tt=0,Z++,--_t[N]==0){if(N===B)break;N=g[x+T[Z]]}if(N>J&&(tt&k)!==F){for(mt===0&&(mt=J),O+=V,ut=1<<(lt=N-mt);lt+mt<B&&!((ut-=_t[lt+mt])<=0);)lt++,ut<<=1;if(ft+=1<<lt,p===1&&ft>852||p===2&&ft>592)return 1;_[F=tt&k]=J<<24|lt<<16|O-A|0}}return tt!==0&&(_[O+tt]=N-mt<<24|64<<16|0),E.bits=J,0}},function(e,i,a){var s=a(29),o=!0,h=!0;try{String.fromCharCode.apply(null,[0])}catch{o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{h=!1}for(var f=new s.Buf8(256),d=0;d<256;d++)f[d]=d>=252?6:d>=248?5:d>=240?4:d>=224?3:d>=192?2:1;function p(g,x){if(x<65534&&(g.subarray&&h||!g.subarray&&o))return String.fromCharCode.apply(null,s.shrinkBuf(g,x));for(var w="",_=0;_<x;_++)w+=String.fromCharCode(g[_]);return w}f[254]=f[254]=1,i.string2buf=function(g){var x,w,_,A,T,E=g.length,P=0;for(A=0;A<E;A++)(64512&(w=g.charCodeAt(A)))==55296&&A+1<E&&(64512&(_=g.charCodeAt(A+1)))==56320&&(w=65536+(w-55296<<10)+(_-56320),A++),P+=w<128?1:w<2048?2:w<65536?3:4;for(x=new s.Buf8(P),T=0,A=0;T<P;A++)(64512&(w=g.charCodeAt(A)))==55296&&A+1<E&&(64512&(_=g.charCodeAt(A+1)))==56320&&(w=65536+(w-55296<<10)+(_-56320),A++),w<128?x[T++]=w:w<2048?(x[T++]=192|w>>>6,x[T++]=128|63&w):w<65536?(x[T++]=224|w>>>12,x[T++]=128|w>>>6&63,x[T++]=128|63&w):(x[T++]=240|w>>>18,x[T++]=128|w>>>12&63,x[T++]=128|w>>>6&63,x[T++]=128|63&w);return x},i.buf2binstring=function(g){return p(g,g.length)},i.binstring2buf=function(g){for(var x=new s.Buf8(g.length),w=0,_=x.length;w<_;w++)x[w]=g.charCodeAt(w);return x},i.buf2string=function(g,x){var w,_,A,T,E=x||g.length,P=new Array(2*E);for(_=0,w=0;w<E;)if((A=g[w++])<128)P[_++]=A;else if((T=f[A])>4)P[_++]=65533,w+=T-1;else{for(A&=T===2?31:T===3?15:7;T>1&&w<E;)A=A<<6|63&g[w++],T--;T>1?P[_++]=65533:A<65536?P[_++]=A:(A-=65536,P[_++]=55296|A>>10&1023,P[_++]=56320|1023&A)}return p(P,_)},i.utf8border=function(g,x){var w;for((x=x||g.length)>g.length&&(x=g.length),w=x-1;w>=0&&(192&g[w])==128;)w--;return w<0||w===0?x:w+f[g[w]]>x?w:x}},function(e,i,a){e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(e,i,a){e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(e,i,a){e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(e,i,a){e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},function(e,i,a){e.exports=a.p+"0.georaster.browser.bundle.min.worker.js"},function(e,i,a){e.exports=function(s){function o(d){let p,g,x,w=null;function _(...A){if(!_.enabled)return;const T=_,E=Number(new Date),P=E-(p||E);T.diff=P,T.prev=p,T.curr=E,p=E,A[0]=o.coerce(A[0]),typeof A[0]!="string"&&A.unshift("%O");let M=0;A[0]=A[0].replace(/%([a-zA-Z%])/g,(F,k)=>{if(F==="%%")return"%";M++;const O=o.formatters[k];if(typeof O=="function"){const v=A[M];F=O.call(T,v),A.splice(M,1),M--}return F}),o.formatArgs.call(T,A),(T.log||o.log).apply(T,A)}return _.namespace=d,_.useColors=o.useColors(),_.color=o.selectColor(d),_.extend=h,_.destroy=o.destroy,Object.defineProperty(_,"enabled",{enumerable:!0,configurable:!1,get:()=>w!==null?w:(g!==o.namespaces&&(g=o.namespaces,x=o.enabled(d)),x),set:A=>{w=A}}),typeof o.init=="function"&&o.init(_),_}function h(d,p){const g=o(this.namespace+(p===void 0?":":p)+d);return g.log=this.log,g}function f(d){return d.toString().substring(2,d.toString().length-2).replace(/\.\*\?$/,"*")}return o.debug=o,o.default=o,o.coerce=function(d){return d instanceof Error?d.stack||d.message:d},o.disable=function(){const d=[...o.names.map(f),...o.skips.map(f).map(p=>"-"+p)].join(",");return o.enable(""),d},o.enable=function(d){let p;o.save(d),o.namespaces=d,o.names=[],o.skips=[];const g=(typeof d=="string"?d:"").split(/[\s,]+/),x=g.length;for(p=0;p<x;p++)g[p]&&((d=g[p].replace(/\*/g,".*?"))[0]==="-"?o.skips.push(new RegExp("^"+d.slice(1)+"$")):o.names.push(new RegExp("^"+d+"$")))},o.enabled=function(d){if(d[d.length-1]==="*")return!0;let p,g;for(p=0,g=o.skips.length;p<g;p++)if(o.skips[p].test(d))return!1;for(p=0,g=o.names.length;p<g;p++)if(o.names[p].test(d))return!0;return!1},o.humanize=a(135),o.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(s).forEach(d=>{o[d]=s[d]}),o.names=[],o.skips=[],o.formatters={},o.selectColor=function(d){let p=0;for(let g=0;g<d.length;g++)p=(p<<5)-p+d.charCodeAt(g),p|=0;return o.colors[Math.abs(p)%o.colors.length]},o.enable(o.load()),o}},function(e,i){var a=1e3,s=6e4,o=60*s,h=24*o;function f(d,p,g,x){var w=p>=1.5*g;return Math.round(d/g)+" "+x+(w?"s":"")}e.exports=function(d,p){p=p||{};var g=typeof d;if(g==="string"&&d.length>0)return function(x){if(!((x=String(x)).length>100)){var w=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(x);if(w){var _=parseFloat(w[1]);switch((w[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*_;case"weeks":case"week":case"w":return 6048e5*_;case"days":case"day":case"d":return _*h;case"hours":case"hour":case"hrs":case"hr":case"h":return _*o;case"minutes":case"minute":case"mins":case"min":case"m":return _*s;case"seconds":case"second":case"secs":case"sec":case"s":return _*a;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return _;default:return}}}}(d);if(g==="number"&&isFinite(d))return p.long?function(x){var w=Math.abs(x);return w>=h?f(x,w,h,"day"):w>=o?f(x,w,o,"hour"):w>=s?f(x,w,s,"minute"):w>=a?f(x,w,a,"second"):x+" ms"}(d):function(x){var w=Math.abs(x);return w>=h?Math.round(x/h)+"d":w>=o?Math.round(x/o)+"h":w>=s?Math.round(x/s)+"m":w>=a?Math.round(x/a)+"s":x+"ms"}(d);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(d))}},function(e,i,a){(function(s,o,h){var f=a(69),d=a(10),p=a(70),g=a(42),x=a(137),w=p.IncomingMessage,_=p.readyStates,A=e.exports=function(E){var P,M=this;g.Writable.call(M),M._opts=E,M._body=[],M._headers={},E.auth&&M.setHeader("Authorization","Basic "+new s(E.auth).toString("base64")),Object.keys(E.headers).forEach(function(k){M.setHeader(k,E.headers[k])});var F=!0;if(E.mode==="disable-fetch"||"requestTimeout"in E&&!f.abortController)F=!1,P=!0;else if(E.mode==="prefer-streaming")P=!1;else if(E.mode==="allow-wrong-content-type")P=!f.overrideMimeType;else{if(E.mode&&E.mode!=="default"&&E.mode!=="prefer-fast")throw new Error("Invalid value for opts.mode");P=!0}M._mode=function(k,O){return f.fetch&&O?"fetch":f.mozchunkedarraybuffer?"moz-chunked-arraybuffer":f.msstream?"ms-stream":f.arraybuffer&&k?"arraybuffer":f.vbArray&&k?"text:vbarray":"text"}(P,F),M._fetchTimer=null,M.on("finish",function(){M._onFinish()})};d(A,g.Writable),A.prototype.setHeader=function(E,P){var M=E.toLowerCase();T.indexOf(M)===-1&&(this._headers[M]={name:E,value:P})},A.prototype.getHeader=function(E){var P=this._headers[E.toLowerCase()];return P?P.value:null},A.prototype.removeHeader=function(E){delete this._headers[E.toLowerCase()]},A.prototype._onFinish=function(){var E=this;if(!E._destroyed){var P=E._opts,M=E._headers,F=null;P.method!=="GET"&&P.method!=="HEAD"&&(F=f.arraybuffer?x(s.concat(E._body)):f.blobConstructor?new o.Blob(E._body.map(function(G){return x(G)}),{type:(M["content-type"]||{}).value||""}):s.concat(E._body).toString());var k=[];if(Object.keys(M).forEach(function(G){var j=M[G].name,U=M[G].value;Array.isArray(U)?U.forEach(function(N){k.push([j,N])}):k.push([j,U])}),E._mode==="fetch"){var O=null;if(f.abortController){var v=new AbortController;O=v.signal,E._fetchAbortController=v,"requestTimeout"in P&&P.requestTimeout!==0&&(E._fetchTimer=o.setTimeout(function(){E.emit("requestTimeout"),E._fetchAbortController&&E._fetchAbortController.abort()},P.requestTimeout))}o.fetch(E._opts.url,{method:E._opts.method,headers:k,body:F||void 0,mode:"cors",credentials:P.withCredentials?"include":"same-origin",signal:O}).then(function(G){E._fetchResponse=G,E._connect()},function(G){o.clearTimeout(E._fetchTimer),E._destroyed||E.emit("error",G)})}else{var R=E._xhr=new o.XMLHttpRequest;try{R.open(E._opts.method,E._opts.url,!0)}catch(G){return void h.nextTick(function(){E.emit("error",G)})}"responseType"in R&&(R.responseType=E._mode.split(":")[0]),"withCredentials"in R&&(R.withCredentials=!!P.withCredentials),E._mode==="text"&&"overrideMimeType"in R&&R.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in P&&(R.timeout=P.requestTimeout,R.ontimeout=function(){E.emit("requestTimeout")}),k.forEach(function(G){R.setRequestHeader(G[0],G[1])}),E._response=null,R.onreadystatechange=function(){switch(R.readyState){case _.LOADING:case _.DONE:E._onXHRProgress()}},E._mode==="moz-chunked-arraybuffer"&&(R.onprogress=function(){E._onXHRProgress()}),R.onerror=function(){E._destroyed||E.emit("error",new Error("XHR error"))};try{R.send(F)}catch(G){return void h.nextTick(function(){E.emit("error",G)})}}}},A.prototype._onXHRProgress=function(){(function(E){try{var P=E.status;return P!==null&&P!==0}catch{return!1}})(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},A.prototype._connect=function(){var E=this;E._destroyed||(E._response=new w(E._xhr,E._fetchResponse,E._mode,E._fetchTimer),E._response.on("error",function(P){E.emit("error",P)}),E.emit("response",E._response))},A.prototype._write=function(E,P,M){this._body.push(E),M()},A.prototype.abort=A.prototype.destroy=function(){this._destroyed=!0,o.clearTimeout(this._fetchTimer),this._response&&(this._response._destroyed=!0),this._xhr?this._xhr.abort():this._fetchAbortController&&this._fetchAbortController.abort()},A.prototype.end=function(E,P,M){typeof E=="function"&&(M=E,E=void 0),g.Writable.prototype.end.call(this,E,P,M)},A.prototype.flushHeaders=function(){},A.prototype.setTimeout=function(){},A.prototype.setNoDelay=function(){},A.prototype.setSocketKeepAlive=function(){};var T=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]}).call(this,a(7).Buffer,a(3),a(8))},function(e,i,a){var s=a(7).Buffer;e.exports=function(o){if(o instanceof Uint8Array){if(o.byteOffset===0&&o.byteLength===o.buffer.byteLength)return o.buffer;if(typeof o.buffer.slice=="function")return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}if(s.isBuffer(o)){for(var h=new Uint8Array(o.length),f=o.length,d=0;d<f;d++)h[d]=o[d];return h.buffer}throw new Error("Argument must be a Buffer")}},function(e,i){e.exports=function(){for(var s={},o=0;o<arguments.length;o++){var h=arguments[o];for(var f in h)a.call(h,f)&&(s[f]=h[f])}return s};var a=Object.prototype.hasOwnProperty},function(e,i){e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},function(e,i,a){(function(s,o){var h;/*! https://mths.be/punycode v1.4.1 by @mathias */(function(f){i&&i.nodeType,s&&s.nodeType;var d=typeof o=="object"&&o;d.global!==d&&d.window!==d&&d.self;var p,g=2147483647,x=/^xn--/,w=/[^\x20-\x7E]/,_=/[\x2E\u3002\uFF0E\uFF61]/g,A={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},T=Math.floor,E=String.fromCharCode;function P(U){throw new RangeError(A[U])}function M(U,N){for(var Z=U.length,V=[];Z--;)V[Z]=N(U[Z]);return V}function F(U,N){var Z=U.split("@"),V="";return Z.length>1&&(V=Z[0]+"@",U=Z[1]),V+M((U=U.replace(_,".")).split("."),N).join(".")}function k(U){for(var N,Z,V=[],B=0,J=U.length;B<J;)(N=U.charCodeAt(B++))>=55296&&N<=56319&&B<J?(64512&(Z=U.charCodeAt(B++)))==56320?V.push(((1023&N)<<10)+(1023&Z)+65536):(V.push(N),B--):V.push(N);return V}function O(U){return M(U,function(N){var Z="";return N>65535&&(Z+=E((N-=65536)>>>10&1023|55296),N=56320|1023&N),Z+=E(N)}).join("")}function v(U,N){return U+22+75*(U<26)-((N!=0)<<5)}function R(U,N,Z){var V=0;for(U=Z?T(U/700):U>>1,U+=T(U/N);U>455;V+=36)U=T(U/35);return T(V+36*U/(U+38))}function G(U){var N,Z,V,B,J,lt,mt,ut,ft,tt,et,St=[],_t=U.length,Gt=0,Wt=128,Lt=72;for((Z=U.lastIndexOf("-"))<0&&(Z=0),V=0;V<Z;++V)U.charCodeAt(V)>=128&&P("not-basic"),St.push(U.charCodeAt(V));for(B=Z>0?Z+1:0;B<_t;){for(J=Gt,lt=1,mt=36;B>=_t&&P("invalid-input"),((ut=(et=U.charCodeAt(B++))-48<10?et-22:et-65<26?et-65:et-97<26?et-97:36)>=36||ut>T((g-Gt)/lt))&&P("overflow"),Gt+=ut*lt,!(ut<(ft=mt<=Lt?1:mt>=Lt+26?26:mt-Lt));mt+=36)lt>T(g/(tt=36-ft))&&P("overflow"),lt*=tt;Lt=R(Gt-J,N=St.length+1,J==0),T(Gt/N)>g-Wt&&P("overflow"),Wt+=T(Gt/N),Gt%=N,St.splice(Gt++,0,Wt)}return O(St)}function j(U){var N,Z,V,B,J,lt,mt,ut,ft,tt,et,St,_t,Gt,Wt,Lt=[];for(St=(U=k(U)).length,N=128,Z=0,J=72,lt=0;lt<St;++lt)(et=U[lt])<128&&Lt.push(E(et));for(V=B=Lt.length,B&&Lt.push("-");V<St;){for(mt=g,lt=0;lt<St;++lt)(et=U[lt])>=N&&et<mt&&(mt=et);for(mt-N>T((g-Z)/(_t=V+1))&&P("overflow"),Z+=(mt-N)*_t,N=mt,lt=0;lt<St;++lt)if((et=U[lt])<N&&++Z>g&&P("overflow"),et==N){for(ut=Z,ft=36;!(ut<(tt=ft<=J?1:ft>=J+26?26:ft-J));ft+=36)Wt=ut-tt,Gt=36-tt,Lt.push(E(v(tt+Wt%Gt,0))),ut=T(Wt/Gt);Lt.push(E(v(ut,0))),J=R(Z,_t,V==B),Z=0,++V}++Z,++N}return Lt.join("")}p={version:"1.4.1",ucs2:{decode:k,encode:O},decode:G,encode:j,toASCII:function(U){return F(U,function(N){return w.test(N)?"xn--"+j(N):N})},toUnicode:function(U){return F(U,function(N){return x.test(N)?G(N.slice(4).toLowerCase()):N})}},(h=(function(){return p}).call(i,a,i,s))===void 0||(s.exports=h)})()}).call(this,a(141)(e),a(3))},function(e,i){e.exports=function(a){return a.webpackPolyfill||(a.deprecate=function(){},a.paths=[],a.children||(a.children=[]),Object.defineProperty(a,"loaded",{enumerable:!0,get:function(){return a.l}}),Object.defineProperty(a,"id",{enumerable:!0,get:function(){return a.i}}),a.webpackPolyfill=1),a}},function(e,i,a){var s=a(143),o=a(154),h=a(46);e.exports={formats:h,parse:o,stringify:s}},function(e,i,a){var s=a(144),o=a(71),h=a(46),f=Object.prototype.hasOwnProperty,d={brackets:function(P){return P+"[]"},comma:"comma",indices:function(P,M){return P+"["+M+"]"},repeat:function(P){return P}},p=Array.isArray,g=Array.prototype.push,x=function(P,M){g.apply(P,p(M)?M:[M])},w=Date.prototype.toISOString,_=h.default,A={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:_,formatter:h.formatters[_],indices:!1,serializeDate:function(P){return w.call(P)},skipNulls:!1,strictNullHandling:!1},T={},E=function P(M,F,k,O,v,R,G,j,U,N,Z,V,B,J,lt,mt){for(var ut,ft=M,tt=mt,et=0,St=!1;(tt=tt.get(T))!==void 0&&!St;){var _t=tt.get(M);if(et+=1,_t!==void 0){if(_t===et)throw new RangeError("Cyclic object value");St=!0}tt.get(T)===void 0&&(et=0)}if(typeof j=="function"?ft=j(F,ft):ft instanceof Date?ft=Z(ft):k==="comma"&&p(ft)&&(ft=o.maybeMap(ft,function(Ot){return Ot instanceof Date?Z(Ot):Ot})),ft===null){if(v)return G&&!J?G(F,A.encoder,lt,"key",V):F;ft=""}if(typeof(ut=ft)=="string"||typeof ut=="number"||typeof ut=="boolean"||typeof ut=="symbol"||typeof ut=="bigint"||o.isBuffer(ft))return G?[B(J?F:G(F,A.encoder,lt,"key",V))+"="+B(G(ft,A.encoder,lt,"value",V))]:[B(F)+"="+B(String(ft))];var Gt,Wt=[];if(ft===void 0)return Wt;if(k==="comma"&&p(ft))J&&G&&(ft=o.maybeMap(ft,G)),Gt=[{value:ft.length>0?ft.join(",")||null:void 0}];else if(p(j))Gt=j;else{var Lt=Object.keys(ft);Gt=U?Lt.sort(U):Lt}for(var Qt=O&&p(ft)&&ft.length===1?F+"[]":F,he=0;he<Gt.length;++he){var z=Gt[he],Y=typeof z=="object"&&z.value!==void 0?z.value:ft[z];if(!R||Y!==null){var at=p(ft)?typeof k=="function"?k(Qt,z):Qt:Qt+(N?"."+z:"["+z+"]");mt.set(M,et);var Tt=s();Tt.set(T,mt),x(Wt,P(Y,at,k,O,v,R,k==="comma"&&J&&p(ft)?null:G,j,U,N,Z,V,B,J,lt,Tt))}}return Wt};e.exports=function(P,M){var F,k=P,O=function(J){if(!J)return A;if(J.encoder!==null&&J.encoder!==void 0&&typeof J.encoder!="function")throw new TypeError("Encoder has to be a function.");var lt=J.charset||A.charset;if(J.charset!==void 0&&J.charset!=="utf-8"&&J.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var mt=h.default;if(J.format!==void 0){if(!f.call(h.formatters,J.format))throw new TypeError("Unknown format option provided.");mt=J.format}var ut=h.formatters[mt],ft=A.filter;return(typeof J.filter=="function"||p(J.filter))&&(ft=J.filter),{addQueryPrefix:typeof J.addQueryPrefix=="boolean"?J.addQueryPrefix:A.addQueryPrefix,allowDots:J.allowDots===void 0?A.allowDots:!!J.allowDots,charset:lt,charsetSentinel:typeof J.charsetSentinel=="boolean"?J.charsetSentinel:A.charsetSentinel,delimiter:J.delimiter===void 0?A.delimiter:J.delimiter,encode:typeof J.encode=="boolean"?J.encode:A.encode,encoder:typeof J.encoder=="function"?J.encoder:A.encoder,encodeValuesOnly:typeof J.encodeValuesOnly=="boolean"?J.encodeValuesOnly:A.encodeValuesOnly,filter:ft,format:mt,formatter:ut,serializeDate:typeof J.serializeDate=="function"?J.serializeDate:A.serializeDate,skipNulls:typeof J.skipNulls=="boolean"?J.skipNulls:A.skipNulls,sort:typeof J.sort=="function"?J.sort:null,strictNullHandling:typeof J.strictNullHandling=="boolean"?J.strictNullHandling:A.strictNullHandling}}(M);typeof O.filter=="function"?k=(0,O.filter)("",k):p(O.filter)&&(F=O.filter);var v,R=[];if(typeof k!="object"||k===null)return"";v=M&&M.arrayFormat in d?M.arrayFormat:M&&"indices"in M?M.indices?"indices":"repeat":"indices";var G=d[v];if(M&&"commaRoundTrip"in M&&typeof M.commaRoundTrip!="boolean")throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var j=G==="comma"&&M&&M.commaRoundTrip;F||(F=Object.keys(k)),O.sort&&F.sort(O.sort);for(var U=s(),N=0;N<F.length;++N){var Z=F[N];O.skipNulls&&k[Z]===null||x(R,E(k[Z],Z,G,j,O.strictNullHandling,O.skipNulls,O.encode?O.encoder:null,O.filter,O.sort,O.allowDots,O.serializeDate,O.format,O.formatter,O.encodeValuesOnly,O.charset,U))}var V=R.join(O.delimiter),B=O.addQueryPrefix===!0?"?":"";return O.charsetSentinel&&(O.charset==="iso-8859-1"?B+="utf8=%26%2310003%3B&":B+="utf8=%E2%9C%93&"),V.length>0?B+V:""}},function(e,i,a){var s=a(44),o=a(150),h=a(152),f=s("%TypeError%"),d=s("%WeakMap%",!0),p=s("%Map%",!0),g=o("WeakMap.prototype.get",!0),x=o("WeakMap.prototype.set",!0),w=o("WeakMap.prototype.has",!0),_=o("Map.prototype.get",!0),A=o("Map.prototype.set",!0),T=o("Map.prototype.has",!0),E=function(P,M){for(var F,k=P;(F=k.next)!==null;k=F)if(F.key===M)return k.next=F.next,F.next=P.next,P.next=F,F};e.exports=function(){var P,M,F,k={assert:function(O){if(!k.has(O))throw new f("Side channel does not contain "+h(O))},get:function(O){if(d&&O&&(typeof O=="object"||typeof O=="function")){if(P)return g(P,O)}else if(p){if(M)return _(M,O)}else if(F)return function(v,R){var G=E(v,R);return G&&G.value}(F,O)},has:function(O){if(d&&O&&(typeof O=="object"||typeof O=="function")){if(P)return w(P,O)}else if(p){if(M)return T(M,O)}else if(F)return function(v,R){return!!E(v,R)}(F,O);return!1},set:function(O,v){d&&O&&(typeof O=="object"||typeof O=="function")?(P||(P=new d),x(P,O,v)):p?(M||(M=new p),A(M,O,v)):(F||(F={key:{},next:null}),function(R,G,j){var U=E(R,G);U?U.value=j:R.next={key:G,next:R.next,value:j}}(F,O,v))}};return k}},function(e,i,a){var s=typeof Symbol<"u"&&Symbol,o=a(146);e.exports=function(){return typeof s=="function"&&typeof Symbol=="function"&&typeof s("foo")=="symbol"&&typeof Symbol("bar")=="symbol"&&o()}},function(e,i,a){e.exports=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var s={},o=Symbol("test"),h=Object(o);if(typeof o=="string"||Object.prototype.toString.call(o)!=="[object Symbol]"||Object.prototype.toString.call(h)!=="[object Symbol]")return!1;for(o in s[o]=42,s)return!1;if(typeof Object.keys=="function"&&Object.keys(s).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(s).length!==0)return!1;var f=Object.getOwnPropertySymbols(s);if(f.length!==1||f[0]!==o||!Object.prototype.propertyIsEnumerable.call(s,o))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var d=Object.getOwnPropertyDescriptor(s,o);if(d.value!==42||d.enumerable!==!0)return!1}return!0}},function(e,i,a){var s={foo:{}},o=Object;e.exports=function(){return{__proto__:s}.foo===s.foo&&!({__proto__:null}instanceof o)}},function(e,i,a){var s="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,h=Object.prototype.toString;e.exports=function(f){var d=this;if(typeof d!="function"||h.call(d)!=="[object Function]")throw new TypeError(s+d);for(var p,g=o.call(arguments,1),x=function(){if(this instanceof p){var E=d.apply(this,g.concat(o.call(arguments)));return Object(E)===E?E:this}return d.apply(f,g.concat(o.call(arguments)))},w=Math.max(0,d.length-g.length),_=[],A=0;A<w;A++)_.push("$"+A);if(p=Function("binder","return function ("+_.join(",")+"){ return binder.apply(this,arguments); }")(x),d.prototype){var T=function(){};T.prototype=d.prototype,p.prototype=new T,T.prototype=null}return p}},function(e,i,a){var s=a(45);e.exports=s.call(Function.call,Object.prototype.hasOwnProperty)},function(e,i,a){var s=a(44),o=a(151),h=o(s("String.prototype.indexOf"));e.exports=function(f,d){var p=s(f,!!d);return typeof p=="function"&&h(f,".prototype.")>-1?o(p):p}},function(e,i,a){var s=a(45),o=a(44),h=o("%Function.prototype.apply%"),f=o("%Function.prototype.call%"),d=o("%Reflect.apply%",!0)||s.call(f,h),p=o("%Object.getOwnPropertyDescriptor%",!0),g=o("%Object.defineProperty%",!0),x=o("%Math.max%");if(g)try{g({},"a",{value:1})}catch{g=null}e.exports=function(_){var A=d(s,f,arguments);if(p&&g){var T=p(A,"length");T.configurable&&g(A,"length",{value:1+x(0,_.length-(arguments.length-1))})}return A};var w=function(){return d(s,h,arguments)};g?g(e.exports,"apply",{value:w}):e.exports.apply=w},function(e,i,a){var s=typeof Map=="function"&&Map.prototype,o=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,h=s&&o&&typeof o.get=="function"?o.get:null,f=s&&Map.prototype.forEach,d=typeof Set=="function"&&Set.prototype,p=Object.getOwnPropertyDescriptor&&d?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,g=d&&p&&typeof p.get=="function"?p.get:null,x=d&&Set.prototype.forEach,w=typeof WeakMap=="function"&&WeakMap.prototype?WeakMap.prototype.has:null,_=typeof WeakSet=="function"&&WeakSet.prototype?WeakSet.prototype.has:null,A=typeof WeakRef=="function"&&WeakRef.prototype?WeakRef.prototype.deref:null,T=Boolean.prototype.valueOf,E=Object.prototype.toString,P=Function.prototype.toString,M=String.prototype.match,F=String.prototype.slice,k=String.prototype.replace,O=String.prototype.toUpperCase,v=String.prototype.toLowerCase,R=RegExp.prototype.test,G=Array.prototype.concat,j=Array.prototype.join,U=Array.prototype.slice,N=Math.floor,Z=typeof BigInt=="function"?BigInt.prototype.valueOf:null,V=Object.getOwnPropertySymbols,B=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Symbol.prototype.toString:null,J=typeof Symbol=="function"&&typeof Symbol.iterator=="object",lt=typeof Symbol=="function"&&Symbol.toStringTag&&(typeof Symbol.toStringTag===J||!0)?Symbol.toStringTag:null,mt=Object.prototype.propertyIsEnumerable,ut=(typeof Reflect=="function"?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(ue){return ue.__proto__}:null);function ft(ue,Ht){if(ue===1/0||ue===-1/0||ue!=ue||ue&&ue>-1e3&&ue<1e3||R.call(/e/,Ht))return Ht;var Se=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if(typeof ue=="number"){var Qe=ue<0?-N(-ue):N(ue);if(Qe!==ue){var On=String(Qe),je=F.call(Ht,On.length+1);return k.call(On,Se,"$&_")+"."+k.call(k.call(je,/([0-9]{3})/g,"$&_"),/_$/,"")}}return k.call(Ht,Se,"$&_")}var tt=a(153),et=tt.custom,St=Qt(et)?et:null;function _t(ue,Ht,Se){var Qe=(Se.quoteStyle||Ht)==="double"?'"':"'";return Qe+ue+Qe}function Gt(ue){return k.call(String(ue),/"/g,"&quot;")}function Wt(ue){return!(Y(ue)!=="[object Array]"||lt&&typeof ue=="object"&&lt in ue)}function Lt(ue){return!(Y(ue)!=="[object RegExp]"||lt&&typeof ue=="object"&&lt in ue)}function Qt(ue){if(J)return ue&&typeof ue=="object"&&ue instanceof Symbol;if(typeof ue=="symbol")return!0;if(!ue||typeof ue!="object"||!B)return!1;try{return B.call(ue),!0}catch{}return!1}e.exports=function ue(Ht,Se,Qe,On){var je=Se||{};if(z(je,"quoteStyle")&&je.quoteStyle!=="single"&&je.quoteStyle!=="double")throw new TypeError('option "quoteStyle" must be "single" or "double"');if(z(je,"maxStringLength")&&(typeof je.maxStringLength=="number"?je.maxStringLength<0&&je.maxStringLength!==1/0:je.maxStringLength!==null))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var fe=!z(je,"customInspect")||je.customInspect;if(typeof fe!="boolean"&&fe!=="symbol")throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(z(je,"indent")&&je.indent!==null&&je.indent!=="	"&&!(parseInt(je.indent,10)===je.indent&&je.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(z(je,"numericSeparator")&&typeof je.numericSeparator!="boolean")throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var jn=je.numericSeparator;if(Ht===void 0)return"undefined";if(Ht===null)return"null";if(typeof Ht=="boolean")return Ht?"true":"false";if(typeof Ht=="string")return function be(dn,q){if(dn.length>q.maxStringLength){var nt=dn.length-q.maxStringLength,ot="... "+nt+" more character"+(nt>1?"s":"");return be(F.call(dn,0,q.maxStringLength),q)+ot}return _t(k.call(k.call(dn,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,Tt),"single",q)}(Ht,je);if(typeof Ht=="number"){if(Ht===0)return 1/0/Ht>0?"0":"-0";var Fn=String(Ht);return jn?ft(Ht,Fn):Fn}if(typeof Ht=="bigint"){var Ye=String(Ht)+"n";return jn?ft(Ht,Ye):Ye}var cn=je.depth===void 0?5:je.depth;if(Qe===void 0&&(Qe=0),Qe>=cn&&cn>0&&typeof Ht=="object")return Wt(Ht)?"[Array]":"[Object]";var Pe=function(be,dn){var q;if(be.indent==="	")q="	";else{if(!(typeof be.indent=="number"&&be.indent>0))return null;q=j.call(Array(be.indent+1)," ")}return{base:q,prev:j.call(Array(dn+1),q)}}(je,Qe);if(On===void 0)On=[];else if(at(On,Ht)>=0)return"[Circular]";function Bn(be,dn,q){if(dn&&(On=U.call(On)).push(dn),q){var nt={depth:je.depth};return z(je,"quoteStyle")&&(nt.quoteStyle=je.quoteStyle),ue(be,nt,Qe+1,On)}return ue(be,je,Qe+1,On)}if(typeof Ht=="function"&&!Lt(Ht)){var Lr=function(be){if(be.name)return be.name;var dn=M.call(P.call(be),/^function\s*([\w$]+)/);return dn?dn[1]:null}(Ht),dr=$e(Ht,Bn);return"[Function"+(Lr?": "+Lr:" (anonymous)")+"]"+(dr.length>0?" { "+j.call(dr,", ")+" }":"")}if(Qt(Ht)){var Nr=J?k.call(String(Ht),/^(Symbol\(.*\))_[^)]*$/,"$1"):B.call(Ht);return typeof Ht!="object"||J?Nr:Ot(Nr)}if(function(be){return!be||typeof be!="object"?!1:typeof HTMLElement<"u"&&be instanceof HTMLElement?!0:typeof be.nodeName=="string"&&typeof be.getAttribute=="function"}(Ht)){for(var mn="<"+v.call(String(Ht.nodeName)),Oi=Ht.attributes||[],ei=0;ei<Oi.length;ei++)mn+=" "+Oi[ei].name+"="+_t(Gt(Oi[ei].value),"double",je);return mn+=">",Ht.childNodes&&Ht.childNodes.length&&(mn+="..."),mn+="</"+v.call(String(Ht.nodeName))+">"}if(Wt(Ht)){if(Ht.length===0)return"[]";var jr=$e(Ht,Bn);return Pe&&!function(be){for(var dn=0;dn<be.length;dn++)if(at(be[dn],`
`)>=0)return!1;return!0}(jr)?"["+me(jr,Pe)+"]":"[ "+j.call(jr,", ")+" ]"}if(function(be){return!(Y(be)!=="[object Error]"||lt&&typeof be=="object"&&lt in be)}(Ht)){var xc=$e(Ht,Bn);return"cause"in Error.prototype||!("cause"in Ht)||mt.call(Ht,"cause")?xc.length===0?"["+String(Ht)+"]":"{ ["+String(Ht)+"] "+j.call(xc,", ")+" }":"{ ["+String(Ht)+"] "+j.call(G.call("[cause]: "+Bn(Ht.cause),xc),", ")+" }"}if(typeof Ht=="object"&&fe){if(St&&typeof Ht[St]=="function"&&tt)return tt(Ht,{depth:cn-Qe});if(fe!=="symbol"&&typeof Ht.inspect=="function")return Ht.inspect()}if(function(be){if(!h||!be||typeof be!="object")return!1;try{h.call(be);try{g.call(be)}catch{return!0}return be instanceof Map}catch{}return!1}(Ht)){var yc=[];return f&&f.call(Ht,function(be,dn){yc.push(Bn(dn,Ht,!0)+" => "+Bn(be,Ht))}),$t("Map",h.call(Ht),yc,Pe)}if(function(be){if(!g||!be||typeof be!="object")return!1;try{g.call(be);try{h.call(be)}catch{return!0}return be instanceof Set}catch{}return!1}(Ht)){var Ia=[];return x&&x.call(Ht,function(be){Ia.push(Bn(be,Ht))}),$t("Set",g.call(Ht),Ia,Pe)}if(function(be){if(!w||!be||typeof be!="object")return!1;try{w.call(be,w);try{_.call(be,_)}catch{return!0}return be instanceof WeakMap}catch{}return!1}(Ht))return Pt("WeakMap");if(function(be){if(!_||!be||typeof be!="object")return!1;try{_.call(be,_);try{w.call(be,w)}catch{return!0}return be instanceof WeakSet}catch{}return!1}(Ht))return Pt("WeakSet");if(function(be){if(!A||!be||typeof be!="object")return!1;try{return A.call(be),!0}catch{}return!1}(Ht))return Pt("WeakRef");if(function(be){return!(Y(be)!=="[object Number]"||lt&&typeof be=="object"&&lt in be)}(Ht))return Ot(Bn(Number(Ht)));if(function(be){if(!be||typeof be!="object"||!Z)return!1;try{return Z.call(be),!0}catch{}return!1}(Ht))return Ot(Bn(Z.call(Ht)));if(function(be){return!(Y(be)!=="[object Boolean]"||lt&&typeof be=="object"&&lt in be)}(Ht))return Ot(T.call(Ht));if(function(be){return!(Y(be)!=="[object String]"||lt&&typeof be=="object"&&lt in be)}(Ht))return Ot(Bn(String(Ht)));if(!function(be){return!(Y(be)!=="[object Date]"||lt&&typeof be=="object"&&lt in be)}(Ht)&&!Lt(Ht)){var ss=$e(Ht,Bn),yn=ut?ut(Ht)===Object.prototype:Ht instanceof Object||Ht.constructor===Object,en=Ht instanceof Object?"":"null prototype",Ds=!yn&&lt&&Object(Ht)===Ht&&lt in Ht?F.call(Y(Ht),8,-1):en?"Object":"",Na=(yn||typeof Ht.constructor!="function"?"":Ht.constructor.name?Ht.constructor.name+" ":"")+(Ds||en?"["+j.call(G.call([],Ds||[],en||[]),": ")+"] ":"");return ss.length===0?Na+"{}":Pe?Na+"{"+me(ss,Pe)+"}":Na+"{ "+j.call(ss,", ")+" }"}return String(Ht)};var he=Object.prototype.hasOwnProperty||function(ue){return ue in this};function z(ue,Ht){return he.call(ue,Ht)}function Y(ue){return E.call(ue)}function at(ue,Ht){if(ue.indexOf)return ue.indexOf(Ht);for(var Se=0,Qe=ue.length;Se<Qe;Se++)if(ue[Se]===Ht)return Se;return-1}function Tt(ue){var Ht=ue.charCodeAt(0),Se={8:"b",9:"t",10:"n",12:"f",13:"r"}[Ht];return Se?"\\"+Se:"\\x"+(Ht<16?"0":"")+O.call(Ht.toString(16))}function Ot(ue){return"Object("+ue+")"}function Pt(ue){return ue+" { ? }"}function $t(ue,Ht,Se,Qe){return ue+" ("+Ht+") {"+(Qe?me(Se,Qe):j.call(Se,", "))+"}"}function me(ue,Ht){if(ue.length===0)return"";var Se=`
`+Ht.prev+Ht.base;return Se+j.call(ue,","+Se)+`
`+Ht.prev}function $e(ue,Ht){var Se=Wt(ue),Qe=[];if(Se){Qe.length=ue.length;for(var On=0;On<ue.length;On++)Qe[On]=z(ue,On)?Ht(ue[On],ue):""}var je,fe=typeof V=="function"?V(ue):[];if(J){je={};for(var jn=0;jn<fe.length;jn++)je["$"+fe[jn]]=fe[jn]}for(var Fn in ue)z(ue,Fn)&&(Se&&String(Number(Fn))===Fn&&Fn<ue.length||J&&je["$"+Fn]instanceof Symbol||(R.call(/[^\w$]/,Fn)?Qe.push(Ht(Fn,ue)+": "+Ht(ue[Fn],ue)):Qe.push(Fn+": "+Ht(ue[Fn],ue))));if(typeof V=="function")for(var Ye=0;Ye<fe.length;Ye++)mt.call(ue,fe[Ye])&&Qe.push("["+Ht(fe[Ye])+"]: "+Ht(ue[fe[Ye]],ue));return Qe}},function(e,i){},function(e,i,a){var s=a(71),o=Object.prototype.hasOwnProperty,h=Array.isArray,f={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:s.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},d=function(x){return x.replace(/&#(\d+);/g,function(w,_){return String.fromCharCode(parseInt(_,10))})},p=function(x,w){return x&&typeof x=="string"&&w.comma&&x.indexOf(",")>-1?x.split(","):x},g=function(x,w,_,A){if(x){var T=_.allowDots?x.replace(/\.([^.[]+)/g,"[$1]"):x,E=/(\[[^[\]]*])/g,P=_.depth>0&&/(\[[^[\]]*])/.exec(T),M=P?T.slice(0,P.index):T,F=[];if(M){if(!_.plainObjects&&o.call(Object.prototype,M)&&!_.allowPrototypes)return;F.push(M)}for(var k=0;_.depth>0&&(P=E.exec(T))!==null&&k<_.depth;){if(k+=1,!_.plainObjects&&o.call(Object.prototype,P[1].slice(1,-1))&&!_.allowPrototypes)return;F.push(P[1])}return P&&F.push("["+T.slice(P.index)+"]"),function(O,v,R,G){for(var j=G?v:p(v,R),U=O.length-1;U>=0;--U){var N,Z=O[U];if(Z==="[]"&&R.parseArrays)N=[].concat(j);else{N=R.plainObjects?Object.create(null):{};var V=Z.charAt(0)==="["&&Z.charAt(Z.length-1)==="]"?Z.slice(1,-1):Z,B=parseInt(V,10);R.parseArrays||V!==""?!isNaN(B)&&Z!==V&&String(B)===V&&B>=0&&R.parseArrays&&B<=R.arrayLimit?(N=[])[B]=j:V!=="__proto__"&&(N[V]=j):N={0:j}}j=N}return j}(F,w,_,A)}};e.exports=function(x,w){var _=function(k){if(!k)return f;if(k.decoder!==null&&k.decoder!==void 0&&typeof k.decoder!="function")throw new TypeError("Decoder has to be a function.");if(k.charset!==void 0&&k.charset!=="utf-8"&&k.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var O=k.charset===void 0?f.charset:k.charset;return{allowDots:k.allowDots===void 0?f.allowDots:!!k.allowDots,allowPrototypes:typeof k.allowPrototypes=="boolean"?k.allowPrototypes:f.allowPrototypes,allowSparse:typeof k.allowSparse=="boolean"?k.allowSparse:f.allowSparse,arrayLimit:typeof k.arrayLimit=="number"?k.arrayLimit:f.arrayLimit,charset:O,charsetSentinel:typeof k.charsetSentinel=="boolean"?k.charsetSentinel:f.charsetSentinel,comma:typeof k.comma=="boolean"?k.comma:f.comma,decoder:typeof k.decoder=="function"?k.decoder:f.decoder,delimiter:typeof k.delimiter=="string"||s.isRegExp(k.delimiter)?k.delimiter:f.delimiter,depth:typeof k.depth=="number"||k.depth===!1?+k.depth:f.depth,ignoreQueryPrefix:k.ignoreQueryPrefix===!0,interpretNumericEntities:typeof k.interpretNumericEntities=="boolean"?k.interpretNumericEntities:f.interpretNumericEntities,parameterLimit:typeof k.parameterLimit=="number"?k.parameterLimit:f.parameterLimit,parseArrays:k.parseArrays!==!1,plainObjects:typeof k.plainObjects=="boolean"?k.plainObjects:f.plainObjects,strictNullHandling:typeof k.strictNullHandling=="boolean"?k.strictNullHandling:f.strictNullHandling}}(w);if(x===""||x==null)return _.plainObjects?Object.create(null):{};for(var A=typeof x=="string"?function(k,O){var v,R={__proto__:null},G=O.ignoreQueryPrefix?k.replace(/^\?/,""):k,j=O.parameterLimit===1/0?void 0:O.parameterLimit,U=G.split(O.delimiter,j),N=-1,Z=O.charset;if(O.charsetSentinel)for(v=0;v<U.length;++v)U[v].indexOf("utf8=")===0&&(U[v]==="utf8=%E2%9C%93"?Z="utf-8":U[v]==="utf8=%26%2310003%3B"&&(Z="iso-8859-1"),N=v,v=U.length);for(v=0;v<U.length;++v)if(v!==N){var V,B,J=U[v],lt=J.indexOf("]="),mt=lt===-1?J.indexOf("="):lt+1;mt===-1?(V=O.decoder(J,f.decoder,Z,"key"),B=O.strictNullHandling?null:""):(V=O.decoder(J.slice(0,mt),f.decoder,Z,"key"),B=s.maybeMap(p(J.slice(mt+1),O),function(ut){return O.decoder(ut,f.decoder,Z,"value")})),B&&O.interpretNumericEntities&&Z==="iso-8859-1"&&(B=d(B)),J.indexOf("[]=")>-1&&(B=h(B)?[B]:B),o.call(R,V)?R[V]=s.combine(R[V],B):R[V]=B}return R}(x,_):x,T=_.plainObjects?Object.create(null):{},E=Object.keys(A),P=0;P<E.length;++P){var M=E[P],F=g(M,A[M],_,typeof x=="string");T=s.merge(T,F,_)}return _.allowSparse===!0?T:s.compact(T)}},function(e,i){e.exports={getPalette:(a,{debug:s=!1}={debug:!1})=>{s&&console.log("starting getPalette with image",a);const{fileDirectory:o}=a,{BitsPerSample:h,ColorMap:f,ImageLength:d,ImageWidth:p,PhotometricInterpretation:g,SampleFormat:x,SamplesPerPixel:w}=o;if(!f)throw new Error("[geotiff-palette]: the image does not contain a color map, so we can't make a palette.");const _=Math.pow(2,h);s&&console.log("[geotiff-palette]: count:",_);const A=f.length/3;if(s&&console.log("[geotiff-palette]: bandSize:",A),A!==_)throw new Error("[geotiff-palette]: can't handle situations where the color map has more or less values than the number of possible values in a raster");const T=A,E=T+A,P=[];for(let M=0;M<_;M++)P.push([Math.floor(f[M]/256),Math.floor(f[T+M]/256),Math.floor(f[E+M]/256),255]);return s&&console.log("[geotiff-palette]: result is ",P),P}}},function(e,i,a){var s,o=Object.defineProperty,h=Object.getOwnPropertySymbols,f=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,p=(E,P,M)=>P in E?o(E,P,{enumerable:!0,configurable:!0,writable:!0,value:M}):E[P]=M,g=(E,P)=>o(E,"name",{value:P,configurable:!0});const x=a(157),w=a(192),_=a(194),A=g(E=>new Array(E).fill(0).map((P,M)=>M),"range");function T(E,P={}){var M=P,{bands:F,height:k,precise:O=!1,stats:v,width:R,layout:G}=M,j=((Z,V)=>{var B={};for(var J in Z)f.call(Z,J)&&V.indexOf(J)<0&&(B[J]=Z[J]);if(Z!=null&&h)for(var J of h(Z))V.indexOf(J)<0&&d.call(Z,J)&&(B[J]=Z[J]);return B})(M,["bands","height","precise","stats","width","layout"]);if(typeof E.then=="function")throw new Error("[calc-image-stats] you passed in a promise as the data values.  please resolve the promise first before calling calcImageStats");const U=w({bands:F,data:E,height:k,layout:G,width:R});F!=null||(F=U.bands),k!=null||(k=U.height),G!=null||(G=U.layout),R!=null||(R=U.width);const N=A(F).map(Z=>{let V;const B=((J,lt)=>{for(var mt in lt||(lt={}))f.call(lt,mt)&&p(J,mt,lt[mt]);if(h)for(var mt of h(lt))d.call(lt,mt)&&p(J,mt,lt[mt]);return J})({precise:O,stats:v},j);if(["[band][row,column]","[band][column,row]"].includes(G))V=E[Z];else if(["[band][row][column]","[band][column][row]"].includes(G))V=E[Z],B.chunked=!0;else if(F===1&&["[band,row,column]","[row,column,band]","[column,band,row]","[column,row,band]"].includes(G))V=E;else{const J={band:[Z,Z]},lt={band:F,column:R,row:k};V=_.iterClip({data:E,layout:G,rect:J,sizes:lt})}return x(V,B)});return{depth:F,height:k,width:R,bands:N}}g(T,"calcImageStats"),(s=(function(){return T}).call(i,a,i,e))!==void 0&&(e.exports=s),e.exports=T,e.exports.default=T,e.exports.calcImageStats=T,typeof self=="object"&&(self.calcImageStats=T),typeof window=="object"&&(self.calcImageStats=T)},function(e,i,a){var s;const{getOrCreateIterator:o}=a(72),{add:h,compare:f,divide:d,mean:p,multiply:g,pow:x,sort:w,subtract:_,sum:A}=a(158),T=a(181);function E(P,{async:M=!1,chunked:F=!1,noData:k,filter:O,calcCount:v=!0,calcHistogram:R=!0,calcInvalid:G=!0,calcMax:j=!0,calcMean:U=!0,calcMedian:N=!0,calcMin:Z=!0,calcMode:V=!0,calcModes:B=!0,calcProduct:J=!0,calcRange:lt=!0,calcStd:mt=!0,calcSum:ut=!0,calcValid:ft=!0,calcVariance:tt=!0,calcUniques:et=!0,precise:St=!1,precise_max_decimal_digits:_t=100,stats:Gt}={debugLevel:0}){Gt&&(Gt.forEach(fe=>{["count","histogram","invalid","max","mean","median","min","mode","modes","product","range","sum","std","valid","variance","uniques"].includes(fe)||console.warn(`[calc-stats] skipping unknown stat "${fe}"`)}),v=Gt.includes("count"),R=Gt.includes("histogram"),G=Gt.includes("invalid"),j=Gt.includes("max"),U=Gt.includes("mean"),N=Gt.includes("median"),Z=Gt.includes("min"),V=Gt.includes("mode"),B=Gt.includes("modes"),J=Gt.includes("product"),lt=Gt.includes("range"),mt=Gt.includes("std"),ut=Gt.includes("sum"),ft=Gt.includes("valid"),tt=Gt.includes("variance"),et=Gt.includes("uniques"));const Wt=o(P);let Lt,Qt,he,z=R||N||V||B||tt||mt||et,Y=v||U||N||J||ft||tt||mt||typeof O=="function",at=v||G||typeof O=="function",Tt=ut||U||tt||mt,Ot=Z||lt,Pt=j||lt,$t=J,me=0,$e=0,ue=0,Ht=St?"0":0;const Se={};let Qe,On;Qe=St?fe=>{fe=fe.toString(),Y&&me++,!Ot||Lt!==void 0&&f(fe,Lt)!=="<"||(Lt=fe),!Pt||Qt!==void 0&&f(fe,Qt)!==">"||(Qt=fe),$t&&(he=me===1?fe:g(he,fe)),Tt&&(Ht=h(Ht,fe)),z&&(fe in Se?Se[fe].ct++:Se[fe]={n:fe.toString(),ct:1})}:fe=>{Y&&me++,Ot&&(Lt===void 0||fe<Lt)&&(Lt=fe),Pt&&(Qt===void 0||fe>Qt)&&(Qt=fe),$t&&(he=me===1?fe:he*fe),Tt&&(Ht+=fe),z&&(fe in Se?Se[fe].ct++:Se[fe]={n:fe,ct:1})},On=typeof k=="number"&&typeof O=="function"?fe=>{ue++,typeof fe!="number"||isNaN(fe)||fe===k||O({valid:me,index:ue,value:fe})!==!0?at&&$e++:Qe(fe)}:typeof k=="number"?fe=>{typeof fe!="number"||isNaN(fe)||fe===k?at&&$e++:Qe(fe)}:typeof O=="function"?fe=>{ue++,typeof fe!="number"||isNaN(fe)||O({valid:me,index:ue,value:fe})!==!0?at&&$e++:Qe(fe)}:fe=>{typeof fe!="number"||isNaN(fe)?at&&$e++:Qe(fe)};const je=()=>{const fe={};if(v&&(fe.count=St?h($e.toString(),me.toString()):$e+me),ft&&(fe.valid=St?me.toString():me),G&&(fe.invalid=St?$e.toString():$e),N&&(fe.median=T.calculate({counts:Se,precise:St,total:me})),Z&&(fe.min=Lt),j&&(fe.max=Qt),J&&(fe.product=he),ut&&(fe.sum=Ht),lt&&(fe.range=St?_(Qt.toString(),Lt.toString()):Qt-Lt),U||tt||mt){const jn=St?d(Ht,me.toString(),{max_decimal_digits:_t}):Ht/me;if(U&&(fe.mean=jn),tt||mt){const Fn=(({count:Ye,histogram:cn,mean_value:Pe,precise:Bn=!1})=>{if(Bn){Pe=Pe.toString();const Lr=Object.values(cn).reduce((dr,{n:Nr,ct:mn})=>{const Oi=_(Nr.toString(),Pe);return h(dr,g(mn.toString(),x(Oi,"2")))},"0");return d(Lr,Ye.toString())}return Object.values(cn).reduce((Lr,{n:dr,ct:Nr})=>Lr+Nr*Math.pow(dr-Pe,2),0)/Ye})({count:me,histogram:Se,mean_value:jn,precise:St});tt&&(fe.variance=Fn),mt&&(fe.std=St?Math.sqrt(Number(Fn)).toString():Math.sqrt(Fn))}}if(R&&(St&&Object.values(Se).forEach(jn=>{jn.ct=jn.ct.toString()}),fe.histogram=Se),V||B){let jn=0,Fn=[];for(let Ye in Se){const{n:cn,ct:Pe}=Se[Ye];Pe===jn?Fn.push(St?cn.toString():cn):Pe>jn&&(jn=Pe,Fn=[St?cn.toString():cn])}B&&(fe.modes=Fn),V&&(fe.mode=St?p(Fn):Fn.reduce((Ye,cn)=>Ye+cn,0)/Fn.length)}return et&&(fe.uniques=St?w(Object.keys(Se)):Object.values(Se).map(({n:jn})=>jn).sort((jn,Fn)=>jn-Fn)),fe};if(F){if(M)return(async()=>{for await(let fe of Wt)for(let jn of fe)On(jn);return je()})();for(let fe of Wt)for(let jn of fe)On(jn);return je()}if(M)return(async()=>{for await(let fe of Wt)On(fe);return je()})();for(let fe of Wt)On(fe);return je()}(s=(function(){return E}).call(i,a,i,e))===void 0||(e.exports=s),e.exports=E,e.exports.default=E,e.exports.calcStats=E,typeof self=="object"&&(self.calcStats=E),typeof window=="object"&&(window.calcStats=E)},function(e,i,a){var s;const o=a(4),h=a(6),f=a(159),d=a(76),p=a(0),g=a(34),x=a(5),w=a(161),_=a(163),A=a(51),T=a(84),E=a(167),P=a(168),M=a(1),F=a(88),k=a(89),O=a(73),v=a(75),R=a(169),G=a(170),j=a(77),U=a(171),N=a(172),Z=a(15),V=a(16),B=a(90),J=a(91),lt=a(11),mt=a(9),ut=a(32),ft=a(48),tt=a(31),et=a(173),St={absolute:o,add:h,binomial_coefficient:f,ceil:d,clean:p,compare:g,compare_positive:x,constants:w,cosine_radians:_,count_decimal_digits:A,count_integer_digits:T,cube:E,cube_root:P,divide:M,eulers_number:F,exp:k,expand:O,factorial:v,flip_sign:R,floor:G,fraction:j,hypotenuse:U,is_infinity:Z,is_integer:V,is_factorial:N,is_negative_infinity:B,is_positive_infinity:J,is_zero:lt,long_addition:mt,long_division:ut,long_multiplication:ft,long_subtraction:tt,mean:a(174),max:et,min:a(86),multiply:a(53),multiply_array:a(79),multiply_range:a(47),nilakantha:a(175),ols:a(176),pow:a(35),pow_positive:a(54),primes:a(87),reciprocal:a(81),remainder:a(177),root:a(37),root_integer_digits:a(83),round:a(36),round_last_decimal:a(49),sign:a(22),sign_nonzero:a(50),simplify_fraction:a(85),sine_radians:a(178),softmax:a(179),sort:a(180),square:a(23),square_root:a(92),subtract:a(33),sum:a(55),truncate:a(93)};(s=(function(){return St}).call(i,a,i,e))===void 0||(e.exports=s),e.exports=St,e.exports.default=St,typeof window=="object"&&(window.preciso=St),typeof self=="object"&&(self.preciso=St)},function(e,i,a){const s=a(0),o=a(5),h=a(75),f=a(9),d=a(31),p=a(32),g=a(47);function x(w,_){switch(w=s(w),_=s(_),o(w,_)){case"=":return"1";case">":{const A=d(w,_),T=g(f(_,"1"),w),E=h(A);return p(T,E)}case"<":throw new Error("[binominal_coefficient] unsupported")}}e.exports=x,e.exports.default=x},function(e,i,a){function s(o){return o.substring(0,o.indexOf("."))}e.exports=s,e.exports.default=s},function(e,i,a){const{MAX_SAFE_INTEGER:s}=a(74),{MAX_SAFE_INTEGER_LENGTH:o}=a(30),{PI:h}=a(162);e.exports={MAX_SAFE_INTEGER:s,MAX_SAFE_INTEGER_LENGTH:o,PI:h}},function(e,i){e.exports={PI_100:"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679"}},function(e,i,a){const s=a(6),o=a(11),h=a(23),f=a(17),d=a(1);function p(g,{steps:x=100,max_decimal_digits:w=100}={}){if(o(g))return"0";let _,A="-",T="1",E=x,P=h(g),M="1",F="1",k="0";for(let O=0;O<E;O++){_=s(k,"1"),k=s(_,"1"),M=f([M,P],{max_decimal_digits:w}),F=f([F,_,k],{max_decimal_digits:w});const v=d(M,F,{max_decimal_digits:w});T=s(T,A+v),A=A==="-"?"+":"-"}return T}e.exports=p,e.exports.default=p},function(e,i,a){const s=a(0),o=a(51),h=a(4),f=a(80),d=a(49),p=["5","6","7","8","9"];function g(x,{digits:w=0}={digits:0}){const _=x=s(x),A=f(x)?"-":"",T=(x=h(x)).indexOf(".");if(T===-1||o(x)<=w)return _;const E=x[T+w+1];if(p.includes(E)){const P=x.substring(0,T+w+2);return A+d(P)}return w===0?A+x.substring(0,T):A+x.substring(0,T+w+1)}e.exports=g,e.exports.default=g},function(e,i,a){function s(o){return o.includes("/")}e.exports=s,e.exports.default=s},function(e,i,a){function s(o){return o.split("/")}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(35);function o(h,f){return s(h,"3",f)}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(37);function o(h,f){return s(h,"3",f)}e.exports=o,e.exports.default=o},function(e,i,a){const s=a(4),o=a(0),h=a(22);function f(d){d=o(d);const p=h(d);return p===""?d:p==="-"?s(d):p==="+"?"-"+d:sum}e.exports=f,e.exports.default=f},function(e,i,a){const s=a(4),o=a(0),h=a(9),f=a(22);function d(p){if((p=o(p)).indexOf(".")===-1)return p;const g=f(p);return p=s(p).split(".")[0],g==="+"?p:g==="-"?p==="0"||p===""?"-1":"-"+h(p,"1"):void 0}e.exports=d,e.exports.default=d},function(e,i,a){const s=a(23),o=a(92),h=a(55);function f(){const d=Array.from(arguments),p=typeof d[d.length-1]=="object"?d[d.length-1]:void 0,g=Array.isArray(d[0])?d[0]:p?d.slice(0,d.length-1):d,x=g.map(w=>s(w));return o(h(x),p)}e.exports=f,e.exports.default=f},function(e,i,a){function s(o){return!!o.match(/^\d+!$/i)}e.exports=s,e.exports.default=s},function(e,i,a){const s=a(0),o=a(34);function h(f){typeof f=="string"&&(f=Array.prototype.slice.call(arguments));let d=s(f[0]);const p=f.length;for(let g=1;g<p;g++){const x=f[g];o(x,d)===">"&&(d=x)}return d}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(6),o=a(1);function h(f,d){let p=0,g="0";for(let x of f)p++,g=s(g,x);return o(g,p.toString(),d)}e.exports=h,e.exports.default=h},function(e,i,a){const s=a(6),o=a(9),h=a(1),f=a(17);function d(p=100,{divide_options:g}={}){let x="+",w="3",_="2",A="3",T="4";for(let E=1;E<p;E++){const P=f([_,A,T]),M=x+h("4",P,g);w=s(w,M),x=x==="-"?"+":"-",_=T,A=o(T,"1"),T=o(A,"1")}return w}e.exports=d,e.exports.default=d},function(e,i,a){const s=a(6),o=a(1),h=a(17),f=a(36),d=a(33),p=a(23);function g(x,w){const _=x.length;let A="0",T="0",E="0",P="0";if(_===0)throw Error("[preciso] zero points passed to linear_regression");for(let j=0;j<_;j++){const[U,N]=x[j];A=s(A,U),T=s(T,p(U)),E=s(E,N),P=s(P,p(N))}const M=_.toString(),F=o(A,M),k=o(E,M);let O="0",v="0";for(let j=0;j<_;j++){const[U,N]=x[j],Z=d(U,F),V=d(N,k),B=h([Z,V]);O=s(O,B);const J=p(Z);v=s(v,J)}let R=o(O,v),G=d(k,h(R,F));return w&&typeof w.max_decimal_digits=="number"&&(R=f(R,{digits:w.max_decimal_digits}),G=f(G,{digits:w.max_decimal_digits})),{m:R,b:G}}e.exports=g,e.exports.default=g},function(e,i,a){const s=a(4),o=a(0),h=a(5),f=a(32),d=a(53),p=a(33),g=a(93);function x(w,_){w=o(w),_=o(_);const A=w[0]==="-"?"-":"";w=s(w),_=s(_);const T=h(w,_);if(T==="=")return"0";if(T==="<")return w[0]==="."&&(w="0"+w),A+w;const E=f(w,_,{max_decimal_places:0}),P=g(E),M=d(_,P);return A+p(w,M)}e.exports=x,e.exports.default=x},function(e,i,a){const s=a(6),o=a(11),h=a(23),f=a(17),d=a(1);function p(g,{steps:x=100,max_decimal_digits:w=100}={}){if(o(g))return"0";let _,A="-",T=g,E=x,P=h(g),M=g,F="1",k="1";for(let O=0;O<E;O++){_=s(k,"1"),k=s(_,"1"),M=f([M,P],{max_decimal_digits:w}),F=f([F,_,k],{max_decimal_digits:w});const v=d(M,F,{max_decimal_digits:w});T=s(T,A+v),A=A==="-"?"+":"-"}return T}e.exports=p,e.exports.default=p},function(e,i,a){const s=a(1),o=a(89),h=a(55);function f(d,{max_decimal_digits:p}){d=d.map(x=>o(x,{max_decimal_digits:p}));const g=h(d);return d.map(x=>s(x,g,{max_decimal_digits:p,ellipsis:!1}))}e.exports=f,e.exports.default=f},function(e,i,a){const s=a(34);function o(h,{direction:f="ascending"}={direction:"ascending"}){const d=f==="desc"||f==="descending"?"<":">";return h.sort((p,g)=>s(p,g)===d?1:-1)}e.exports=o,e.exports.default=o},function(e,i,a){var s;const o=a(182),h=a(191);function f({counts:p,nums:g,no_data:x,precise:w,threshold:_=50,total:A}){return p!==void 0||A!==void 0||g.length>_?o({counts:p,no_data:x,nums:g,precise:w,total:A}):h({no_data:x,nums:g,precise:w})}const d={calculate:f};(s=(function(){return d}).call(i,a,i,e))===void 0||(e.exports=s),e.exports=d,e.exports.default={calculate:f},typeof window=="object"&&(window.mediana=d),typeof self=="object"&&(self.mediana=d)},function(e,i,a){const s=a(183),o=a(94);function h({counts:f,nums:d,no_data:p,precise:g=!1,total:x}){f!==void 0&&x!==void 0||({counts:f,total:x}=s({nums:d,no_data:p}));const w=Object.values(f).sort((T,E)=>T.n-E.n),_=x/2,A=w.length;if(A!==0){if(A===1)return g?w[0].n.toString():w[0].n;{let T=0;if(x%2==0)for(let E=0;E<A;E++){const{n:P,ct:M}=w[E];if(T+=M,T>_)return T-M===_?o(w[E-1].n,P,{precise:g}):g?P.toString():P}else for(let E=0;E<A;E++){const{n:P,ct:M}=w[E];if(T+=M,T>_)return g?P.toString():P}}}}e.exports=h,e.exports.default=h},function(e,i){function a({nums:s,no_data:o}){let h=s.length;const f={};let d=0;if(o!==void 0)for(let p=0;p<h;p++){const g=s[p];g!==o&&(d++,g in f?f[g].ct++:f[g]={n:g,ct:1})}else for(let p=0;p<h;p++){const g=s[p];d++,g in f?f[g].ct++:f[g]={n:g,ct:1}}return{counts:f,total:d}}e.exports=a,e.exports.default=a},function(e,i){function a(s){s[0]==="+"&&(s=s.substring(1));const o=s[0]==="-"?"-":"";o==="-"&&(s=s.substring(1));const h=s.indexOf("e");if(h===-1)return o+s;let f=s.indexOf(".");f===-1&&(f=h);const d=Number(s.substring(h+1)),p=s.substring(0,h).replace(".",""),g=f+d,x=p.length;if(g>=x){const w=g-x;let _=p;for(let A=0;A<w;A++)_+="0";return o+_}if(g<0){result="0.";for(let w=0;w>g;w--)result+="0";return result+=p,o+result}return o+p.substring(0,g)+"."+p.substring(g)}e.exports=a,e.exports.default=a},function(e,i,a){const s=a(98),o=a(18),h=a(186);function f(d,p,g){if(d=o(d),(p=o(p))==="0")throw new Error("[preciso] division by zero");if(d===""||d==="0")return"0";const x=d[0]!=="-",w=p[0]!=="-",_=x!==w?"-":"";return x||(d=s(d)),w||(p=s(p)),_+h(d,p,g)}e.exports=f,e.exports.default=f},function(e,i,a){const s=a(38),o=a(95),h=(a(187),a(189)),f=a(190);e.exports=function(d,p,{max_decimal_digits:g=100,ellipsis:x=!1}={}){d[0]==="0"&&(d=d.substring(1)),p[0]==="0"&&(p=p.substring(1));const w=d.indexOf("."),_=p.indexOf("."),A=w===-1?d.length:w,T=_===-1?0:p.length-1-_;let E=!1;d=d.replace(/\./,""),p=p.replace(/\./,"");const P=d.length;let M,F="",k="",O=-1*T,v=0;for(let U=0;U<P;U++)if(F+=d[U],M=s(F,p),M===">"){let N=1,Z=o(p,p),V=p;for(;s(Z,F)!==">";)N++,V=Z,Z=o(Z,p);if(N=N.toString(),k!=="")for(let B=N.length;B<=v;B++)k+="0";k+=N,F=h(F,V),v=0}else{if(M==="<"){k===""&&O++,v++;continue}if(M==="="){if(k!=="")for(let N=0;N<v;N++)k+="0";k+="1",F="0",v=0}}if(F.match(/^0+$/g))M==="<"&&(k+=F.substring(0,F.length-1));else{const U={},N=A-O-k.length+g+1;k===""&&(v=0);for(let Z=0;Z<N;Z++){if(F+="0",x)if(F in U){if(U[F]++,U[F]>3){k+="...",E=!0;break}}else U[F]=1;const V=s(F,p);if(V===">"){let B=1,J=o(p,p),lt=p;for(;s(J,F)!==">";)B++,lt=J,J=o(J,p);B=B.toString();for(let mt=B.length;mt<=v;mt++)k+="0";if(k+=B,F=h(F,lt),F==="0")break;v=0}else{if(V==="<"){v++;continue}if(V==="="){for(let B=0;B<v;B++)k+="0";k+="1",v=0;break}}}}const R=A-O,G=k.length;let j;if(R===G)j=0;else if(R<0)k="0."+"0".repeat(Math.abs(R))+k,j=G-R;else if(R>G){for(let U=G;U<R;U++)k+="0";j=0}else R<G?(k=k.substring(0,R)+"."+k.substring(R),j=G-R):R===0&&(k="0."+k,j=G);if(k=k.replace(/^0+/,""),k=k.replace(/\.\d+0+$/,""),!E){const U=j-g;U>0&&(k=f(k.substring(0,k.length-U+1)))}return k[0]==="."&&(k="0"+k),k}},function(e,i,a){const s=a(98),o=a(18),h=a(38),f=a(188);function d(p,g){p=o(p),g=o(g);const x=p[0]!=="-"!=(g[0]!=="-")?"-":"";if(p=s(p),g=s(g),h(p,g)==="<"){const w=p;p=g,g=w}return x+f(p,g)}e.exports=d,e.exports.default=d},function(e,i,a){const{MAX_SAFE_INTEGER_LENGTH:s}=a(56);e.exports=function(o,h){if(o==="0"||h==="0")return"0";const f=o.indexOf("."),d=h.indexOf("."),p=(f===-1?o.length:f)+(d===-1?h.length:d),g=(f===-1?0:o.length-1-f)+(d===-1?0:h.length-1-d);if(g===0&&p<s)return(Number(o)*Number(h)).toFixed(0);const x=o.replace(".",""),w=h.replace(".",""),_=x.length,A=w.length,T=[];let E=_;for(;E>=0;){const R=E,G=E-=15,j=x.substring(G,R);T.push([Number(j),j.length])}const P=[],M=[];for(let R=0,G=A-1;G>=0;G--,R++){const j=w[G],U=Number(j);let N=0,Z="";const V=T.length-1;T.forEach(([B,J],lt)=>{let mt=(N+U*B).toString();const ut=mt.length;if(ut>J&&lt!==V){const ft=-1*J;Z=mt.slice(ft)+Z,N=Number(mt.slice(0,ft))}else{const ft=J-ut;for(let tt=0;tt<ft;tt++)mt="0"+mt;N=0,Z=mt+Z}}),Z+="0".repeat(R),P.push(Z),M.push([Array.from(Z).map(B=>Number(B)),Z.length])}const F=P.length,k=M[M.length-1][1]+F;let O="",v=0;for(let R=0;R<k;R++){let G=v;const j=Math.min(R,F-1);for(let U=0;U<=j;U++){const[N,Z]=M[U],V=Z-1-R;V>=0&&(G+=N[V])}G>=10?(G=G.toString(),O=G[G.length-1]+O,v=Number(G.slice(0,-1))):(O=G+O,v=0)}if(g===0)O=O.replace(/^0+/,"");else{const R=O.length-g;O=O.substring(0,R)+"."+O.substring(R),O=O.replace(/^0+/,""),O=O.replace(/\.?0+$/,""),O[0]==="."&&(O="0"+O)}return O}},function(e,i,a){const s=a(18),o=a(38),h=a(96),f=a(97);function d(p,g){p=s(p),g=s(g);const x=p[0]!=="-",w=g[0]!=="-";if(x){if(w){const _=o(p,g);return _===">"?f(p,g):_==="<"?"-"+f(g,p):"0"}return h(p,g.substring(1))}if(w)return"-"+h(p.substring(1),g);{p=p.substring(1),g=g.substring(1);const _=o(p,g);return _===">"?"-"+f(p,g):_==="<"?f(g,p):"0"}}e.exports=d,e.exports.default=d},function(e,i){const a=["5","6","7","8","9"];e.exports=function(s){s[0]==="+"&&(s=s.substring(1));const o=s.length;let h="";const f=s[s.length-1];if(a.includes(f)){let d;for(d=o-2;d>=0;d--){const p=s[d];if(p==="."||p==="-")continue;const g=Number(p)+1;if(g!==10){h=g+h;break}h="0"+h}d>0&&(h=s.substring(0,d)+h)}else h=s.substring(0,o-1);return h[h.length-1]==="."&&(h=h.substring(0,h.length-1)),h.indexOf(".")>-1&&(h=h.replace(/0+$/,"")),h}},function(e,i,a){const s=a(94);function o({nums:h,no_data:f,precise:d=!1}){switch((h=h.filter(p=>p!==f).sort((p,g)=>p-g)).length){case 0:return;case 1:return d?h[0].toString():h[0];default:const p=h.length/2;if(h.length%2==0)return s(h[p-1],h[p],{precise:d});{const g=Math.floor(p);return d?h[g].toString():h[g]}}}e.exports=o,e.exports.default=o},function(e,i,a){var s;const o=a(193);function h({bands:f,data:d,height:p,layout:g,width:x}){const w=o(d);if(g==="[row,column,band]"||w===1)return{layout:"[row,column,band]",bands:f||(p&&x?d.length/(p*x):void 0),height:p||(f&&x?d.length/(f*x):void 0),width:x||(f&&p?d.length/(f*p):void 0)};if(w===2){if(!p||!x)return d.length<d[0].length?{bands:d.length,layout:"[band][row,column]",height:p||(x?d[0].length/x:void 0),width:x||(p?d[0].length/p:void 0)}:{bands:d[0].length,layout:"[row,column][band]",height:p||(x?d.length/x:void 0),width:x||(p?d.length/p:void 0)};if(d[0].length===p*x)return{layout:"[band][row,column]",bands:d.length,height:p,width:x};if(d.length===p*x)return{layout:"[row,column][band]",bands:d[0].length,height:p,width:x}}else if(w===3){const _=d.length,A=d[0].length,T=d[0][0].length;if(p&&x){if(_===p&&A===x)return{layout:"[row][column][band]",bands:T,height:p,width:x};if(A===p&&T===x)return{layout:"[band][row][column]",bands:_,height:p,width:x}}else{if(_<A&&_<T)return{layout:"[band][row][column]",bands:_,height:A,width:T};if(T<_&&T<A)return{layout:"[row][column][band]",bands:T,height:_,width:A}}}}(s=(function(){return h}).call(i,a,i,e))===void 0||(e.exports=s),e.exports=h,e.exports.default=h,e.exports.guessImageLayout=h,typeof window=="object"&&(window.guessImageLayout=h),typeof self=="object"&&(self.guessImageLayout=h)},function(e,i){e.exports=function(a){const s=f=>Array.isArray(f)||f instanceof Int8Array||f instanceof Uint8Array||f instanceof Uint8ClampedArray||f instanceof Int16Array||f instanceof Uint16Array||f instanceof Int32Array||f instanceof Uint32Array||f instanceof Float32Array||f instanceof Float64Array||f instanceof BigInt64Array||f instanceof BigUint64Array;let o=0,h=a;for(;s(h);)o++,h=h[0];return o}},function(e,i,a){const s={},{wrapNextFunction:o}=a(72),h=a(195),f=a(196),d={Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Float32Array,Float64Array};try{d.BigInt64Array=BigInt64Array,d.BigUint64Array=BigUint64Array}catch{}const p=j=>j.match(/\[[^\]]+\]/g),g=j=>j.startsWith("[")&&j.endsWith("]")?j.substring(1,j.length-1):j,x=j=>j.startsWith("(")&&j.endsWith(")")?j.substring(1,j.length-1):j,w=j=>j.match(/(\(.*?\)|[^\(,\s]+)(?=\s*,|\s*$)/g),_=j=>{j=g(j),j=x(j);const U=w(j);return U.length===1?{type:"Vector",dim:U[0]}:{type:"Matrix",parts:U.map(_)}};function A(j){const U=j.match(/[^ A-Za-z,\[\]]/g);if(U)throw new Error("The following invalid characters were used: "+U.map(N=>`"${N}"`).join(", "));return!0}function T(j,{useLayoutCache:U=!0}={useLayoutCache:!0}){if(U&&j in s)return s[j];A(j);const N=p(j).map(_),Z={type:"Layout",summary:N.map(V=>V.type==="Matrix"?V.parts.length:1),dims:N};return U&&(s[j]=Z),Z}function E({useLayoutCache:j=!0,data:U,layout:N,sizes:Z={}}){typeof N=="string"&&(N=T(N,{useLayoutCache:j}));const{dims:V}=N,B=V.length,J=M({useLayoutCache:j,layout:N,sizes:Z}),lt=B-1,mt=N.summary.toString();if(mt in f){const ut={data:U};return N.dims.map((ft,tt)=>{ft.type==="Vector"?ut[`d${tt}v0`]=ft.dim:ft.type==="Matrix"&&ft.parts.forEach((et,St)=>{ut[`d${tt}v${St}`]=et.dim,ut[`m${tt}v${St}`]=J[et.dim]})}),f[mt].bind(ut)}return({point:ut,value:ft})=>{let tt=U;for(let et=0;et<B;et++){const St=et===lt,_t=V[et];let Gt;Gt=_t.type==="Vector"?ut[_t.dim]:_t.parts.reduce((Wt,{dim:Lt})=>Wt+J[Lt]*ut[Lt],0),St?tt[Gt]=ft:tt=tt[Gt]}}}function P({rect:j={}}){if(j)for(let U in j){const N=j[U];if(N.length!==2)throw new Error("[xdim] uh oh. invalid hyper-rectangle");const[Z,V]=N;if(Z>V)throw new Error(`[xdim] uh oh. invalid range for "${U}".  Start of ${Z} can't be greater than end of ${V}.`);if(Z<0)throw new Error("[xdim] uh oh. invalid hyper-rectangle with start "+Z)}}function M({useLayoutCache:j=!0,layout:U,sizes:N}){typeof U=="string"&&(U=T(U,{useLayoutCache:j}));const{dims:Z}=U,V=Z.length;let B={};for(let J=0;J<V;J++){const lt=Z[J];if(lt.type==="Vector")B[lt.dim]=1;else{const{parts:mt}=lt;let ut=1;for(let ft=mt.length-1;ft>=0;ft--){const{dim:tt}=mt[ft];B[tt]=ut,ut*=N[mt[ft].dim]}}}return B}function F({useLayoutCache:j=!0,data:U,layout:N,point:Z,sizes:V={}}){let B,J;typeof N=="string"&&(N=T(N,{useLayoutCache:j}));let lt=U;const{dims:mt}=N,ut=mt.length;for(let ft=0;ft<ut;ft++){const tt=mt[ft];if(tt.type==="Vector"){const et=Z[tt.dim];B=lt,J=et,lt=lt[et]}else{const{parts:et}=tt;let St=0,_t=1;for(let Gt=et.length-1;Gt>=0;Gt--){const Wt=et[Gt];if(Wt.type==="Vector"){const{dim:Lt}=Wt;if(St+=_t*Z[Lt],Gt>0){if(!(Lt in V))throw new Error(`you cannot calculate the location without knowing the size of the "${Lt}" dimension.`);_t*=V[Lt]}}}B=lt,J=St,lt=lt[St]}}return{index:J,value:lt,parent:B}}function k({arr:j,fill:U,lens:N,arrayTypes:Z}){if(N.length===0)return j;const V=N[0];if(N.length===1){const B=Z?Z[Z.length-1]:"Array";for(let J=0;J<j.length;J++)j[J]=new d[B](V).fill(U)}else for(let B=0;B<j.length;B++){const J=new Array(V).fill(U);j[B]=J,k({arr:J,fill:U,lens:N.slice(1),arrayTypes:Z})}return j}function O({fill:j,shape:U,arrayTypes:N}){const Z=U[0];if(U.length===1){if(Array.isArray(N)&&N.length!==1)throw new Error("[xdim] shape and arrayTypes have different lengths");const V=Array.isArray(N)?N[0]:"Array";return new d[V](Z).fill(j)}return k({arr:new Array(Z).fill(j),fill:j,lens:U.slice(1),arrayTypes:N})}function v({fill:j,layout:U,useLayoutCache:N=!0,sizes:Z,arrayTypes:V}){typeof U=="string"&&(U=T(U,{useLayoutCache:N}));const B=U.dims.map(J=>J.type==="Vector"?Z[J.dim]:J.type==="Matrix"?J.parts.reduce((lt,mt)=>{if(!(mt.dim in Z))throw new Error(`[xdim] could not find "${mt.dim}" in sizes: { ${Object.keys(Z).join(", ")} }`);return lt*Z[mt.dim]},1):void 0);return{data:O({fill:j,shape:B,arrayTypes:V}),shape:B,arrayTypes:V}}function R({start:j=0,end:U=100}){let N=j-1;return U+=1,o(function(){return N++,N===U?{done:!0}:{done:!1,value:N}})}function G({order:j,sizes:U,rect:N={}}){const Z=Array.isArray(j)?j:Object.keys(U).sort((ut,ft)=>U[ut]-U[ft]),V=new Array(Z.length),B={};for(let ut=0;ut<Z.length-1;ut++){const ft=Z[ut],[tt,et]=N[ft]||[0,U[ft]-1];V[ut]=R({start:tt+1,end:et}),B[ft]=tt}const J=Z[Z.length-1],[lt,mt]=N[J]||[0,U[J]-1];return V[V.length-1]=R({start:lt,end:mt}),B[J]=lt-1,o(function(){for(let ut=V.length-1;ut>=0;ut--){const{value:ft,done:tt}=V[ut].next();if(!tt){for(let et=ut+1;et<V.length;et++){const St=Z[et],[_t,Gt]=N[St]||[0,U[St]-1];V[et]=R({start:_t+1,end:Gt}),B[St]=_t}return B[Z[ut]]=ft,{value:B,done:!1}}if(ut===0)return{done:!0}}})}e.exports={addDims:k,checkValidity:A,createMatrix:O,iterClip:function({data:j,layout:U,order:N,rect:Z={},sizes:V={},useLayoutCache:B=!0}){if(!j)throw new Error("[xdim] must specify data");if(!U)throw new Error("[xdim] must specify layout");const J=G({order:N,sizes:V,rect:Z});return o(function(){const{value:lt,done:mt}=J.next();if(mt)return{done:!0};{const{value:ut}=F({data:j,layout:U,point:lt,sizes:V,useLayoutCache:B});return{done:!1,value:ut}}})},iterRange:R,iterPoints:G,matchSequences:w,parse:T,parseDimensions:function(j){const U={},N=/[A-Za-z]+/g;let Z;for(;(Z=N.exec(j))!==null;){const[V]=Z;U[V]={name:V}}return U},parseSequences:_,parseVectors:p,prepareData:v,prepareSelect:function({useLayoutCache:j=!0,data:U,layout:N,sizes:Z={}}){typeof N=="string"&&(N=T(N,{useLayoutCache:j}));const{dims:V}=N,B=V.length,J=M({useLayoutCache:j,layout:N,sizes:Z}),lt=B-1,mt=N.summary.toString();if(mt in h){const ut={data:U};return N.dims.map((ft,tt)=>{ft.type==="Vector"?ut[`d${tt}v0`]=ft.dim:ft.type==="Matrix"&&ft.parts.forEach((et,St)=>{ut[`d${tt}v${St}`]=et.dim,ut[`m${tt}v${St}`]=J[et.dim]})}),h[mt].bind(ut)}return({point:ut})=>{let ft=U;for(let tt=0;tt<B;tt++){const et=tt===lt,St=V[tt];let _t;if(_t=St.type==="Vector"?ut[St.dim]:St.parts.reduce((Gt,{dim:Wt})=>Gt+J[Wt]*ut[Wt],0),et)return{index:_t,parent:ft,value:ft[_t]};ft=ft[_t]}}},prepareUpdate:E,removeBraces:g,removeParentheses:x,select:F,transform:function({data:j,fill:U,from:N,to:Z,sizes:V,useLayoutCache:B=!0}){typeof N=="string"&&(N=T(N,{useLayoutCache:B})),typeof Z=="string"&&(Z=T(Z,{useLayoutCache:B}));const{data:J}=v({fill:U,layout:Z,sizes:V}),lt=E({useLayoutCache:B,data:J,layout:Z,sizes:V}),mt=G({sizes:V});for(point of mt){const{value:ut}=F({data:j,layout:N,point,sizes:V});lt({point,value:ut})}return{data:J}},update:function({useLayoutCache:j=!0,data:U,layout:N,point:Z,sizes:V={},value:B}){typeof N=="string"&&(N=T(N,{useLayoutCache:j}));const{dims:J}=N;for(let lt=0;lt<J.length;lt++){const mt=lt===J.length-1,ut=J[lt];let ft;if(ut.type==="Vector")ft=Z[ut.dim];else{const{parts:tt}=ut;ft=0;let et=1;for(let St=tt.length-1;St>=0;St--){const _t=tt[St],{dim:Gt}=_t;if(ft+=et*Z[Gt],St>0){if(!(Gt in V))throw new Error(`you cannot calculate the location without knowing the size of the "${Gt}" dimension.`);et*=V[Gt]}}}mt?U[ft]=B:U=U[ft]}},clip:function({useLayoutCache:j=!0,data:U,layout:N,rect:Z,sizes:V={},flat:B=!1,validate:J=!0}){J&&P({rect:Z}),typeof N=="string"&&(N=T(N,{useLayoutCache:j}));let lt=[U];if(N.dims.forEach(et=>{let St=[];lt.forEach(_t=>{if(et.type==="Vector"){const[Gt,Wt]=Z[et.dim];St=St.concat(_t.slice(Gt,Wt+1))}else{const{parts:Gt}=et;let Wt=[0],Lt=1;for(let Qt=Gt.length-1;Qt>=0;Qt--){const he=Gt[Qt],{dim:z}=he,[Y,at]=Z[z],Tt=[];for(let Ot=Y;Ot<=at;Ot++)Wt.forEach(Pt=>{Tt.push(Pt+Lt*Ot)});Wt=Tt,Lt*=V[z]}Wt.forEach(Qt=>{St.push(_t[Qt])})}}),lt=St}),B)return{data:lt};const mt=Object.fromEntries(Object.entries(Z).map(([et,[St,_t]])=>[et,_t-St+1])),{data:ut}=v({layout:N,sizes:mt}),ft=N.dims.length,tt=(et,St)=>{if(St===ft)for(let _t=0;_t<et.length;_t++)et[_t]=lt.shift();else et.forEach(_t=>tt(_t,St+1))};return tt(ut,1),{data:ut}},validateRect:P}},function(e,i){e.exports={1:function({point:a}){const s=this.data,o=a[this.d0v0];return{parent:s,index:o,value:s[o]}},2:function({point:a}){const s=this.data,o=this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1];return{parent:s,index:o,value:s[o]}},3:function({point:a}){const s=this.data,o=this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1]+this.m0v2*a[this.d0v2];return{parent:s,index:o,value:s[o]}},4:function({point:a}){const s=this.data,o=this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1]+this.m0v2*a[this.d0v2]+this.m0v3*a[this.d0v3];return{parent:s,index:o,value:s[o]}},5:function({point:a}){const s=this.data,o=this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1]+this.m0v2*a[this.d0v2]+this.m0v3*a[this.d0v3]+this.m0v4*a[this.d0v4];return{parent:s,index:o,value:s[o]}},"1,1":function({point:a}){const s=this.data[a[this.d0v0]],o=a[this.d1v0];return{parent:s,index:o,value:s[o]}},"1,2":function({point:a}){const s=this.data[a[this.d0v0]],o=this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1];return{parent:s,index:o,value:s[o]}},"1,3":function({point:a}){const s=this.data[a[this.d0v0]],o=this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1]+this.m1v2*a[this.d1v2];return{parent:s,index:o,value:s[o]}},"1,4":function({point:a}){const s=this.data[a[this.d0v0]],o=this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1]+this.m1v2*a[this.d1v2]+this.m1v3*a[this.d1v3];return{parent:s,index:o,value:s[o]}},"1,5":function({point:a}){const s=this.data[a[this.d0v0]],o=this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1]+this.m1v2*a[this.d1v2]+this.m1v3*a[this.d1v3]+this.m1v4*a[this.d1v4];return{parent:s,index:o,value:s[o]}},"1,1,1":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]],o=a[this.d2v0];return{parent:s,index:o,value:s[o]}},"1,1,2":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]],o=this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1];return{parent:s,index:o,value:s[o]}},"1,1,3":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]],o=this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1]+this.m2v2*a[this.d2v2];return{parent:s,index:o,value:s[o]}},"1,1,4":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]],o=this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1]+this.m2v2*a[this.d2v2]+this.m2v3*a[this.d2v3];return{parent:s,index:o,value:s[o]}},"1,1,5":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]],o=this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1]+this.m2v2*a[this.d2v2]+this.m2v3*a[this.d2v3]+this.m2v4*a[this.d2v4];return{parent:s,index:o,value:s[o]}},"1,1,1,1":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]],o=a[this.d3v0];return{parent:s,index:o,value:s[o]}},"1,1,1,2":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]],o=this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1];return{parent:s,index:o,value:s[o]}},"1,1,1,3":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]],o=this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1]+this.m3v2*a[this.d3v2];return{parent:s,index:o,value:s[o]}},"1,1,1,4":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]],o=this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1]+this.m3v2*a[this.d3v2]+this.m3v3*a[this.d3v3];return{parent:s,index:o,value:s[o]}},"1,1,1,5":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]],o=this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1]+this.m3v2*a[this.d3v2]+this.m3v3*a[this.d3v3]+this.m3v4*a[this.d3v4];return{parent:s,index:o,value:s[o]}},"1,1,1,1,1":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]],o=a[this.d4v0];return{parent:s,index:o,value:s[o]}},"1,1,1,1,2":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]],o=this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1];return{parent:s,index:o,value:s[o]}},"1,1,1,1,3":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]],o=this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1]+this.m4v2*a[this.d4v2];return{parent:s,index:o,value:s[o]}},"1,1,1,1,4":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]],o=this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1]+this.m4v2*a[this.d4v2]+this.m4v3*a[this.d4v3];return{parent:s,index:o,value:s[o]}},"1,1,1,1,5":function({point:a}){const s=this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]],o=this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1]+this.m4v2*a[this.d4v2]+this.m4v3*a[this.d4v3]+this.m4v4*a[this.d4v4];return{parent:s,index:o,value:s[o]}}}},function(e,i){e.exports={1:function({point:a,value:s}){this.data[a[this.d0v0]]=s},2:function({point:a,value:s}){this.data[this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1]]=s},3:function({point:a,value:s}){this.data[this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1]+this.m0v2*a[this.d0v2]]=s},4:function({point:a,value:s}){this.data[this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1]+this.m0v2*a[this.d0v2]+this.m0v3*a[this.d0v3]]=s},5:function({point:a,value:s}){this.data[this.m0v0*a[this.d0v0]+this.m0v1*a[this.d0v1]+this.m0v2*a[this.d0v2]+this.m0v3*a[this.d0v3]+this.m0v4*a[this.d0v4]]=s},"1,1":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]]=s},"1,2":function({point:a,value:s}){this.data[a[this.d0v0]][this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1]]=s},"1,3":function({point:a,value:s}){this.data[a[this.d0v0]][this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1]+this.m1v2*a[this.d1v2]]=s},"1,4":function({point:a,value:s}){this.data[a[this.d0v0]][this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1]+this.m1v2*a[this.d1v2]+this.m1v3*a[this.d1v3]]=s},"1,5":function({point:a,value:s}){this.data[a[this.d0v0]][this.m1v0*a[this.d1v0]+this.m1v1*a[this.d1v1]+this.m1v2*a[this.d1v2]+this.m1v3*a[this.d1v3]+this.m1v4*a[this.d1v4]]=s},"1,1,1":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]]=s},"1,1,2":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1]]=s},"1,1,3":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1]+this.m2v2*a[this.d2v2]]=s},"1,1,4":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1]+this.m2v2*a[this.d2v2]+this.m2v3*a[this.d2v3]]=s},"1,1,5":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][this.m2v0*a[this.d2v0]+this.m2v1*a[this.d2v1]+this.m2v2*a[this.d2v2]+this.m2v3*a[this.d2v3]+this.m2v4*a[this.d2v4]]=s},"1,1,1,1":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]]=s},"1,1,1,2":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1]]=s},"1,1,1,3":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1]+this.m3v2*a[this.d3v2]]=s},"1,1,1,4":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1]+this.m3v2*a[this.d3v2]+this.m3v3*a[this.d3v3]]=s},"1,1,1,5":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][this.m3v0*a[this.d3v0]+this.m3v1*a[this.d3v1]+this.m3v2*a[this.d3v2]+this.m3v3*a[this.d3v3]+this.m3v4*a[this.d3v4]]=s},"1,1,1,1,1":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]][a[this.d4v0]]=s},"1,1,1,1,2":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]][this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1]]=s},"1,1,1,1,3":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]][this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1]+this.m4v2*a[this.d4v2]]=s},"1,1,1,1,4":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]][this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1]+this.m4v2*a[this.d4v2]+this.m4v3*a[this.d4v3]]=s},"1,1,1,1,5":function({point:a,value:s}){this.data[a[this.d0v0]][a[this.d1v0]][a[this.d2v0]][a[this.d3v0]][this.m4v0*a[this.d4v0]+this.m4v1*a[this.d4v1]+this.m4v2*a[this.d4v2]+this.m4v3*a[this.d4v3]+this.m4v4*a[this.d4v4]]=s}}},function(e,i,a){function s(o,h){if(typeof ImageData>"u")throw"toCanvas is not supported in your environment";{const f=document.createElement("CANVAS"),d=h&&h.height?Math.min(o.height,h.height):Math.min(o.height,100),p=h&&h.width?Math.min(o.width,h.width):Math.min(o.width,100);f.height=d,f.width=p,f.style.minHeight="200px",f.style.minWidth="400px",f.style.maxWidth="100%";const g=f.getContext("2d"),x=function(w,_,A){if(w.values){const{noDataValue:T,mins:E,ranges:P,values:M}=w,F=M.length,k=w.width/_,O=w.height/A,v=new Uint8ClampedArray(_*A*4);for(let R=0;R<A;R++)for(let G=0;G<_;G++){const j=Math.round(R*O),U=Math.round(G*k),N=M.map(Z=>{try{return Z[j][U]}catch(V){console.error(V)}});if(N.every(Z=>Z!==void 0&&Z!==T)){const Z=R*(4*_)+4*G;if(F===1){const V=Math.round(N[0]),B=Math.round((V-E[0])/P[0]*255);v[Z]=B,v[Z+1]=B,v[Z+2]=B,v[Z+3]=255}else if(F===3)try{const[V,B,J]=N;v[Z]=V,v[Z+1]=B,v[Z+2]=J,v[Z+3]=255}catch(V){console.error(V)}else if(F===4)try{const[V,B,J,lt]=N;v[Z]=V,v[Z+1]=B,v[Z+2]=J,v[Z+3]=lt}catch(V){console.error(V)}}}return new ImageData(v,_,A)}}(o,p,d);return g.putImageData(x,0,0),f}}a.r(i),a.d(i,"default",function(){return s})},function(e,i,a){a.d(i,"a",function(){return o});var s=a(19);Object(s.b)().blob;const o=Object(s.b)().default},,,function(e,i,a){var s=a(26),o=a(103),h=function(f){typeof f=="function"?f():f&&typeof f.unsubscribe=="function"&&f.unsubscribe()};i.a=function(f){const d=new o.a;let p,g=0;return new s.a(x=>{p||(p=f.subscribe(d));const w=d.subscribe(x);return g++,()=>{g--,w.unsubscribe(),g===0&&(h(p),p=void 0)}})}}])})})(CP);var UR=CP.exports;const GR=ul(UR);var HR={exports:{}};(function(S){var n=function(e){var i=Object.prototype,a=i.hasOwnProperty,s=Object.defineProperty||function(ut,ft,tt){ut[ft]=tt.value},o,h=typeof Symbol=="function"?Symbol:{},f=h.iterator||"@@iterator",d=h.asyncIterator||"@@asyncIterator",p=h.toStringTag||"@@toStringTag";function g(ut,ft,tt){return Object.defineProperty(ut,ft,{value:tt,enumerable:!0,configurable:!0,writable:!0}),ut[ft]}try{g({},"")}catch{g=function(ft,tt,et){return ft[tt]=et}}function x(ut,ft,tt,et){var St=ft&&ft.prototype instanceof M?ft:M,_t=Object.create(St.prototype),Gt=new J(et||[]);return s(_t,"_invoke",{value:N(ut,tt,Gt)}),_t}e.wrap=x;function w(ut,ft,tt){try{return{type:"normal",arg:ut.call(ft,tt)}}catch(et){return{type:"throw",arg:et}}}var _="suspendedStart",A="suspendedYield",T="executing",E="completed",P={};function M(){}function F(){}function k(){}var O={};g(O,f,function(){return this});var v=Object.getPrototypeOf,R=v&&v(v(lt([])));R&&R!==i&&a.call(R,f)&&(O=R);var G=k.prototype=M.prototype=Object.create(O);F.prototype=k,s(G,"constructor",{value:k,configurable:!0}),s(k,"constructor",{value:F,configurable:!0}),F.displayName=g(k,p,"GeneratorFunction");function j(ut){["next","throw","return"].forEach(function(ft){g(ut,ft,function(tt){return this._invoke(ft,tt)})})}e.isGeneratorFunction=function(ut){var ft=typeof ut=="function"&&ut.constructor;return ft?ft===F||(ft.displayName||ft.name)==="GeneratorFunction":!1},e.mark=function(ut){return Object.setPrototypeOf?Object.setPrototypeOf(ut,k):(ut.__proto__=k,g(ut,p,"GeneratorFunction")),ut.prototype=Object.create(G),ut},e.awrap=function(ut){return{__await:ut}};function U(ut,ft){function tt(_t,Gt,Wt,Lt){var Qt=w(ut[_t],ut,Gt);if(Qt.type==="throw")Lt(Qt.arg);else{var he=Qt.arg,z=he.value;return z&&typeof z=="object"&&a.call(z,"__await")?ft.resolve(z.__await).then(function(Y){tt("next",Y,Wt,Lt)},function(Y){tt("throw",Y,Wt,Lt)}):ft.resolve(z).then(function(Y){he.value=Y,Wt(he)},function(Y){return tt("throw",Y,Wt,Lt)})}}var et;function St(_t,Gt){function Wt(){return new ft(function(Lt,Qt){tt(_t,Gt,Lt,Qt)})}return et=et?et.then(Wt,Wt):Wt()}s(this,"_invoke",{value:St})}j(U.prototype),g(U.prototype,d,function(){return this}),e.AsyncIterator=U,e.async=function(ut,ft,tt,et,St){St===void 0&&(St=Promise);var _t=new U(x(ut,ft,tt,et),St);return e.isGeneratorFunction(ft)?_t:_t.next().then(function(Gt){return Gt.done?Gt.value:_t.next()})};function N(ut,ft,tt){var et=_;return function(_t,Gt){if(et===T)throw new Error("Generator is already running");if(et===E){if(_t==="throw")throw Gt;return mt()}for(tt.method=_t,tt.arg=Gt;;){var Wt=tt.delegate;if(Wt){var Lt=Z(Wt,tt);if(Lt){if(Lt===P)continue;return Lt}}if(tt.method==="next")tt.sent=tt._sent=tt.arg;else if(tt.method==="throw"){if(et===_)throw et=E,tt.arg;tt.dispatchException(tt.arg)}else tt.method==="return"&&tt.abrupt("return",tt.arg);et=T;var Qt=w(ut,ft,tt);if(Qt.type==="normal"){if(et=tt.done?E:A,Qt.arg===P)continue;return{value:Qt.arg,done:tt.done}}else Qt.type==="throw"&&(et=E,tt.method="throw",tt.arg=Qt.arg)}}}function Z(ut,ft){var tt=ft.method,et=ut.iterator[tt];if(et===o)return ft.delegate=null,tt==="throw"&&ut.iterator.return&&(ft.method="return",ft.arg=o,Z(ut,ft),ft.method==="throw")||tt!=="return"&&(ft.method="throw",ft.arg=new TypeError("The iterator does not provide a '"+tt+"' method")),P;var St=w(et,ut.iterator,ft.arg);if(St.type==="throw")return ft.method="throw",ft.arg=St.arg,ft.delegate=null,P;var _t=St.arg;if(!_t)return ft.method="throw",ft.arg=new TypeError("iterator result is not an object"),ft.delegate=null,P;if(_t.done)ft[ut.resultName]=_t.value,ft.next=ut.nextLoc,ft.method!=="return"&&(ft.method="next",ft.arg=o);else return _t;return ft.delegate=null,P}j(G),g(G,p,"Generator"),g(G,f,function(){return this}),g(G,"toString",function(){return"[object Generator]"});function V(ut){var ft={tryLoc:ut[0]};1 in ut&&(ft.catchLoc=ut[1]),2 in ut&&(ft.finallyLoc=ut[2],ft.afterLoc=ut[3]),this.tryEntries.push(ft)}function B(ut){var ft=ut.completion||{};ft.type="normal",delete ft.arg,ut.completion=ft}function J(ut){this.tryEntries=[{tryLoc:"root"}],ut.forEach(V,this),this.reset(!0)}e.keys=function(ut){var ft=Object(ut),tt=[];for(var et in ft)tt.push(et);return tt.reverse(),function St(){for(;tt.length;){var _t=tt.pop();if(_t in ft)return St.value=_t,St.done=!1,St}return St.done=!0,St}};function lt(ut){if(ut){var ft=ut[f];if(ft)return ft.call(ut);if(typeof ut.next=="function")return ut;if(!isNaN(ut.length)){var tt=-1,et=function St(){for(;++tt<ut.length;)if(a.call(ut,tt))return St.value=ut[tt],St.done=!1,St;return St.value=o,St.done=!0,St};return et.next=et}}return{next:mt}}e.values=lt;function mt(){return{value:o,done:!0}}return J.prototype={constructor:J,reset:function(ut){if(this.prev=0,this.next=0,this.sent=this._sent=o,this.done=!1,this.delegate=null,this.method="next",this.arg=o,this.tryEntries.forEach(B),!ut)for(var ft in this)ft.charAt(0)==="t"&&a.call(this,ft)&&!isNaN(+ft.slice(1))&&(this[ft]=o)},stop:function(){this.done=!0;var ut=this.tryEntries[0],ft=ut.completion;if(ft.type==="throw")throw ft.arg;return this.rval},dispatchException:function(ut){if(this.done)throw ut;var ft=this;function tt(Lt,Qt){return _t.type="throw",_t.arg=ut,ft.next=Lt,Qt&&(ft.method="next",ft.arg=o),!!Qt}for(var et=this.tryEntries.length-1;et>=0;--et){var St=this.tryEntries[et],_t=St.completion;if(St.tryLoc==="root")return tt("end");if(St.tryLoc<=this.prev){var Gt=a.call(St,"catchLoc"),Wt=a.call(St,"finallyLoc");if(Gt&&Wt){if(this.prev<St.catchLoc)return tt(St.catchLoc,!0);if(this.prev<St.finallyLoc)return tt(St.finallyLoc)}else if(Gt){if(this.prev<St.catchLoc)return tt(St.catchLoc,!0)}else if(Wt){if(this.prev<St.finallyLoc)return tt(St.finallyLoc)}else throw new Error("try statement without catch or finally")}}},abrupt:function(ut,ft){for(var tt=this.tryEntries.length-1;tt>=0;--tt){var et=this.tryEntries[tt];if(et.tryLoc<=this.prev&&a.call(et,"finallyLoc")&&this.prev<et.finallyLoc){var St=et;break}}St&&(ut==="break"||ut==="continue")&&St.tryLoc<=ft&&ft<=St.finallyLoc&&(St=null);var _t=St?St.completion:{};return _t.type=ut,_t.arg=ft,St?(this.method="next",this.next=St.finallyLoc,P):this.complete(_t)},complete:function(ut,ft){if(ut.type==="throw")throw ut.arg;return ut.type==="break"||ut.type==="continue"?this.next=ut.arg:ut.type==="return"?(this.rval=this.arg=ut.arg,this.method="return",this.next="end"):ut.type==="normal"&&ft&&(this.next=ft),P},finish:function(ut){for(var ft=this.tryEntries.length-1;ft>=0;--ft){var tt=this.tryEntries[ft];if(tt.finallyLoc===ut)return this.complete(tt.completion,tt.afterLoc),B(tt),P}},catch:function(ut){for(var ft=this.tryEntries.length-1;ft>=0;--ft){var tt=this.tryEntries[ft];if(tt.tryLoc===ut){var et=tt.completion;if(et.type==="throw"){var St=et.arg;B(tt)}return St}}throw new Error("illegal catch attempt")},delegateYield:function(ut,ft,tt){return this.delegate={iterator:lt(ut),resultName:ft,nextLoc:tt},this.method==="next"&&(this.arg=o),P}},e}(S.exports);try{regeneratorRuntime=n}catch{typeof globalThis=="object"?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}})(HR);var $k={exports:{}};(function(S,n){/**
 * @license
 *
 * chroma.js - JavaScript library for color conversions
 * 
 * Copyright (c) 2011-2017, Gregor Aisch
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */(function(){var e,i,a,s,o,h,f,d,p,g,x,w,_,A,T,E,P,M,F,k,O,v,R,G,j,U,N,Z,V,B,J,lt,mt,ut,ft,tt,et,St,_t,Gt,Wt,Lt,Qt,he,z,Y,at,Tt,Ot,Pt,$t,me,$e,ue,Ht,Se,Qe,On,je,fe,jn,Fn,Ye,cn,Pe,Bn,Lr,dr,Nr,mn,Oi,ei,jr,xc,yc,Ia,ss,yn,en,Ds,Na,be,dn=[].slice;yn=function(){var q,nt,ot,gt,yt;for(q={},yt="Boolean Number String Function Array Date RegExp Undefined Null".split(" "),gt=0,nt=yt.length;gt<nt;gt++)ot=yt[gt],q["[object "+ot+"]"]=ot.toLowerCase();return function($){var L;return L=Object.prototype.toString.call($),q[L]||"object"}}(),at=function(q,nt,ot){return nt==null&&(nt=0),ot==null&&(ot=1),q<nt&&(q=nt),q>ot&&(q=ot),q},en=function(q){return q.length>=3?Array.prototype.slice.call(q):q[0]},O=function(q){var nt,ot;for(q._clipped=!1,q._unclipped=q.slice(0),nt=ot=0;ot<3;nt=++ot)nt<3?((q[nt]<0||q[nt]>255)&&(q._clipped=!0),q[nt]<0&&(q[nt]=0),q[nt]>255&&(q[nt]=255)):nt===3&&(q[nt]<0&&(q[nt]=0),q[nt]>1&&(q[nt]=1));return q._clipped||delete q._unclipped,q},s=Math.PI,jr=Math.round,R=Math.cos,Z=Math.floor,Se=Math.pow,Tt=Math.log,yc=Math.sin,Ia=Math.sqrt,A=Math.atan2,$t=Math.max,_=Math.abs,f=s*2,o=s/3,i=s/180,h=180/s,k=function(){return arguments[0]instanceof e?arguments[0]:function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,arguments,function(){})},k.default=k,w=[],S!==null&&S.exports!=null&&(S.exports=k),ei=n!==null?n:this,ei.chroma=k,k.version="1.4.1",x={},p=[],g=!1,e=function(){function q(){var nt,ot,gt,yt,$,L,W,ht,pt;for(L=this,ot=[],ht=0,yt=arguments.length;ht<yt;ht++)nt=arguments[ht],nt!=null&&ot.push(nt);if(ot.length>1&&(W=ot[ot.length-1]),x[W]!=null)L._rgb=O(x[W](en(ot.slice(0,-1))));else{for(g||(p=p.sort(function(kt,At){return At.p-kt.p}),g=!0),pt=0,$=p.length;pt<$&&(gt=p[pt],W=gt.test.apply(gt,ot),!W);pt++);W&&(L._rgb=O(x[W].apply(x,ot)))}L._rgb==null&&console.warn("unknown format: "+ot),L._rgb==null&&(L._rgb=[0,0,0]),L._rgb.length===3&&L._rgb.push(1)}return q.prototype.toString=function(){return this.hex()},q}(),k._input=x;/**
	ColorBrewer colors for chroma.js

	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
	Pennsylvania State University.

	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at	
	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software distributed
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
	CONDITIONS OF ANY KIND, either express or implied. See the License for the
	specific language governing permissions and limitations under the License.

    @preserve
 */k.brewer=M={OrRd:["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"],PuBu:["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"],BuPu:["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"],Oranges:["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"],BuGn:["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"],YlOrBr:["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"],YlGn:["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"],Reds:["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"],RdPu:["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"],Greens:["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"],YlGnBu:["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"],Purples:["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"],GnBu:["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"],Greys:["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"],YlOrRd:["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"],PuRd:["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"],Blues:["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"],PuBuGn:["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"],Viridis:["#440154","#482777","#3f4a8a","#31678e","#26838f","#1f9d8a","#6cce5a","#b6de2b","#fee825"],Spectral:["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],RdYlGn:["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],RdBu:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],PiYG:["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],PRGn:["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],RdYlBu:["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],BrBG:["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],RdGy:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],PuOr:["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],Set2:["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"],Accent:["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"],Set1:["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"],Set3:["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"],Dark2:["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],Paired:["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"],Pastel2:["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"],Pastel1:["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]},function(){var q,nt;nt=[];for(q in M)nt.push(M[q.toLowerCase()]=M[q]);return nt}(),Ds={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower:"#6495ed",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",laserlemon:"#ffff54",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrod:"#fafad2",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",maroon2:"#7f0000",maroon3:"#b03060",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",purple2:"#7f007f",purple3:"#a020f0",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},k.colors=Ds,Lt=function(){var q,nt,ot,gt,yt,$,L,W,ht;return nt=en(arguments),yt=nt[0],q=nt[1],ot=nt[2],W=(yt+16)/116,L=isNaN(q)?W:W+q/500,ht=isNaN(ot)?W:W-ot/200,W=a.Yn*Qt(W),L=a.Xn*Qt(L),ht=a.Zn*Qt(ht),$=be(3.2404542*L-1.5371385*W-.4985314*ht),gt=be(-.969266*L+1.8760108*W+.041556*ht),ot=be(.0556434*L-.2040259*W+1.0572252*ht),[$,gt,ot,nt.length>3?nt[3]:1]},be=function(q){return 255*(q<=.00304?12.92*q:1.055*Se(q,1/2.4)-.055)},Qt=function(q){return q>a.t1?q*q*q:a.t2*(q-a.t0)},a={Kn:18,Xn:.95047,Yn:1,Zn:1.08883,t0:.137931034,t1:.206896552,t2:.12841855,t3:.008856452},cn=function(){var q,nt,ot,gt,yt,$,L,W;return gt=en(arguments),ot=gt[0],nt=gt[1],q=gt[2],yt=Nr(ot,nt,q),$=yt[0],L=yt[1],W=yt[2],[116*L-16,500*($-L),200*(L-W)]},mn=function(q){return(q/=255)<=.04045?q/12.92:Se((q+.055)/1.055,2.4)},Na=function(q){return q>a.t3?Se(q,1/3):q/a.t2+a.t0},Nr=function(){var q,nt,ot,gt,yt,$,L;return gt=en(arguments),ot=gt[0],nt=gt[1],q=gt[2],ot=mn(ot),nt=mn(nt),q=mn(q),yt=Na((.4124564*ot+.3575761*nt+.1804375*q)/a.Xn),$=Na((.2126729*ot+.7151522*nt+.072175*q)/a.Yn),L=Na((.0193339*ot+.119192*nt+.9503041*q)/a.Zn),[yt,$,L]},k.lab=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["lab"]),function(){})},x.lab=Lt,e.prototype.lab=function(){return cn(this._rgb)},T=function(q){var nt,ot,gt,yt,$,L,W,ht,pt,kt,At;return q=function(){var xt,wt,It;for(It=[],wt=0,xt=q.length;wt<xt;wt++)yt=q[wt],It.push(k(yt));return It}(),q.length===2?(pt=function(){var xt,wt,It;for(It=[],wt=0,xt=q.length;wt<xt;wt++)yt=q[wt],It.push(yt.lab());return It}(),$=pt[0],L=pt[1],nt=function(xt){var wt,It;return It=function(){var Et,Ut;for(Ut=[],wt=Et=0;Et<=2;wt=++Et)Ut.push($[wt]+xt*(L[wt]-$[wt]));return Ut}(),k.lab.apply(k,It)}):q.length===3?(kt=function(){var xt,wt,It;for(It=[],wt=0,xt=q.length;wt<xt;wt++)yt=q[wt],It.push(yt.lab());return It}(),$=kt[0],L=kt[1],W=kt[2],nt=function(xt){var wt,It;return It=function(){var Et,Ut;for(Ut=[],wt=Et=0;Et<=2;wt=++Et)Ut.push((1-xt)*(1-xt)*$[wt]+2*(1-xt)*xt*L[wt]+xt*xt*W[wt]);return Ut}(),k.lab.apply(k,It)}):q.length===4?(At=function(){var xt,wt,It;for(It=[],wt=0,xt=q.length;wt<xt;wt++)yt=q[wt],It.push(yt.lab());return It}(),$=At[0],L=At[1],W=At[2],ht=At[3],nt=function(xt){var wt,It;return It=function(){var Et,Ut;for(Ut=[],wt=Et=0;Et<=2;wt=++Et)Ut.push((1-xt)*(1-xt)*(1-xt)*$[wt]+3*(1-xt)*(1-xt)*xt*L[wt]+3*(1-xt)*xt*xt*W[wt]+xt*xt*xt*ht[wt]);return Ut}(),k.lab.apply(k,It)}):q.length===5&&(ot=T(q.slice(0,3)),gt=T(q.slice(2,5)),nt=function(xt){return xt<.5?ot(xt*2):gt((xt-.5)*2)}),nt},k.bezier=function(q){var nt;return nt=T(q),nt.scale=function(){return k.scale(nt)},nt},k.cubehelix=function(q,nt,ot,gt,yt){var $,L,W;return q==null&&(q=300),nt==null&&(nt=-1.5),ot==null&&(ot=1),gt==null&&(gt=1),yt==null&&(yt=[0,1]),$=0,yn(yt)==="array"?L=yt[1]-yt[0]:(L=0,yt=[yt,yt]),W=function(ht){var pt,kt,At,xt,wt,It,Et,Ut,Ft;return pt=f*((q+120)/360+nt*ht),Et=Se(yt[0]+L*ht,gt),It=$!==0?ot[0]+ht*$:ot,kt=It*Et*(1-Et)/2,xt=R(pt),Ft=yc(pt),Ut=Et+kt*(-.14861*xt+1.78277*Ft),wt=Et+kt*(-.29227*xt-.90649*Ft),At=Et+kt*(1.97294*xt),k(O([Ut*255,wt*255,At*255,1]))},W.start=function(ht){return ht==null?q:(q=ht,W)},W.rotations=function(ht){return ht==null?nt:(nt=ht,W)},W.gamma=function(ht){return ht==null?gt:(gt=ht,W)},W.hue=function(ht){return ht==null?ot:(ot=ht,yn(ot)==="array"?($=ot[1]-ot[0],$===0&&(ot=ot[1])):$=0,W)},W.lightness=function(ht){return ht==null?yt:(yn(ht)==="array"?(yt=ht,L=ht[1]-ht[0]):(yt=[ht,ht],L=0),W)},W.scale=function(){return k.scale(W)},W.hue(ot),W},k.random=function(){var q,nt,ot;for(nt="0123456789abcdef",q="#",ot=0;ot<6;++ot)q+=nt.charAt(Z(Math.random()*16));return new e(q)},w=[],ft=function(q,nt,ot,gt){var yt,$,L,W;for(ot==null&&(ot=.5),gt==null&&(gt="rgb"),yn(q)!=="object"&&(q=k(q)),yn(nt)!=="object"&&(nt=k(nt)),L=0,$=w.length;L<$;L++)if(yt=w[L],gt===yt[0]){W=yt[1](q,nt,ot,gt);break}if(W==null)throw"color mode "+gt+" is not supported";return W.alpha(q.alpha()+ot*(nt.alpha()-q.alpha()))},k.interpolate=ft,e.prototype.interpolate=function(q,nt,ot){return ft(this,q,nt,ot)},k.mix=ft,e.prototype.mix=e.prototype.interpolate,x.rgb=function(){var q,nt,ot,gt;nt=en(arguments),ot=[];for(q in nt)gt=nt[q],ot.push(gt);return ot},k.rgb=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["rgb"]),function(){})},e.prototype.rgb=function(q){return q==null&&(q=!0),q?this._rgb.map(Math.round).slice(0,3):this._rgb.slice(0,3)},e.prototype.rgba=function(q){return q==null&&(q=!0),q?[Math.round(this._rgb[0]),Math.round(this._rgb[1]),Math.round(this._rgb[2]),this._rgb[3]]:this._rgb.slice(0)},p.push({p:3,test:function(q){var nt;if(nt=en(arguments),yn(nt)==="array"&&nt.length===3||nt.length===4&&yn(nt[3])==="number"&&nt[3]>=0&&nt[3]<=1)return"rgb"}}),x.lrgb=x.rgb,St=function(q,nt,ot,gt){var yt,$;return yt=q._rgb,$=nt._rgb,new e(Ia(Se(yt[0],2)*(1-ot)+Se($[0],2)*ot),Ia(Se(yt[1],2)*(1-ot)+Se($[1],2)*ot),Ia(Se(yt[2],2)*(1-ot)+Se($[2],2)*ot),gt)},d=function(q){var nt,ot,gt,yt,$,L;for(ot=1/q.length,L=[0,0,0,0],yt=0,gt=q.length;yt<gt;yt++)nt=q[yt],$=nt._rgb,L[0]+=Se($[0],2)*ot,L[1]+=Se($[1],2)*ot,L[2]+=Se($[2],2)*ot,L[3]+=$[3]*ot;return L[0]=Ia(L[0]),L[1]=Ia(L[1]),L[2]=Ia(L[2]),L[3]>1&&(L[3]=1),new e(O(L))},w.push(["lrgb",St]),k.average=function(q,nt){var ot,gt,yt,$,L,W,ht,pt,kt,At,xt,wt,It;if(nt==null&&(nt="rgb"),kt=q.length,q=q.map(function(Et){return k(Et)}),ht=q.splice(0,1)[0],nt==="lrgb")return d(q);wt=ht.get(nt),$=[],L=0,W=0;for(pt in wt)wt[pt]=wt[pt]||0,$.push(isNaN(wt[pt])?0:1),nt.charAt(pt)==="h"&&!isNaN(wt[pt])&&(ot=wt[pt]/180*s,L+=R(ot),W+=yc(ot));for(gt=ht.alpha(),xt=0,At=q.length;xt<At;xt++){yt=q[xt],It=yt.get(nt),gt+=yt.alpha();for(pt in wt)isNaN(It[pt])||($[pt]+=1,nt.charAt(pt)==="h"?(ot=It[pt]/180*s,L+=R(ot),W+=yc(ot)):wt[pt]+=It[pt])}for(pt in wt)if(nt.charAt(pt)==="h"){for(ot=A(W/$[pt],L/$[pt])/s*180;ot<0;)ot+=360;for(;ot>=360;)ot-=360;wt[pt]=ot}else wt[pt]=wt[pt]/$[pt];return k(wt,nt).alpha(gt/kt)},B=function(q){var nt,ot,gt,yt,$,L;if(q.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/))return(q.length===4||q.length===7)&&(q=q.substr(1)),q.length===3&&(q=q.split(""),q=q[0]+q[0]+q[1]+q[1]+q[2]+q[2]),L=parseInt(q,16),yt=L>>16,gt=L>>8&255,ot=L&255,[yt,gt,ot,1];if(q.match(/^#?([A-Fa-f0-9]{8})$/))return q.length===9&&(q=q.substr(1)),L=parseInt(q,16),yt=L>>24&255,gt=L>>16&255,ot=L>>8&255,nt=jr((L&255)/255*100)/100,[yt,gt,ot,nt];if(x.css!=null&&($=x.css(q)))return $;throw"unknown color: "+q},fe=function(q,nt){var ot,gt,yt,$,L,W,ht;return nt==null&&(nt="auto"),L=q[0],yt=q[1],gt=q[2],ot=q[3],nt==="auto"&&(nt=ot<1?"rgba":"rgb"),L=Math.round(L),yt=Math.round(yt),gt=Math.round(gt),ht=L<<16|yt<<8|gt,W="000000"+ht.toString(16),W=W.substr(W.length-6),$="0"+jr(ot*255).toString(16),$=$.substr($.length-2),"#"+function(){switch(nt.toLowerCase()){case"rgba":return W+$;case"argb":return $+W;default:return W}}()},x.hex=function(q){return B(q)},k.hex=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["hex"]),function(){})},e.prototype.hex=function(q){return q==null&&(q="auto"),fe(this._rgb,q)},p.push({p:4,test:function(q){if(arguments.length===1&&yn(q)==="string")return"hex"}}),mt=function(){var q,nt,ot,gt,yt,$,L,W,ht,pt,kt,At,xt,wt;if(q=en(arguments),yt=q[0],kt=q[1],L=q[2],kt===0)ht=gt=nt=L*255;else{for(wt=[0,0,0],ot=[0,0,0],xt=L<.5?L*(1+kt):L+kt-L*kt,At=2*L-xt,yt/=360,wt[0]=yt+1/3,wt[1]=yt,wt[2]=yt-1/3,$=W=0;W<=2;$=++W)wt[$]<0&&(wt[$]+=1),wt[$]>1&&(wt[$]-=1),6*wt[$]<1?ot[$]=At+(xt-At)*6*wt[$]:2*wt[$]<1?ot[$]=xt:3*wt[$]<2?ot[$]=At+(xt-At)*(2/3-wt[$])*6:ot[$]=At;pt=[jr(ot[0]*255),jr(ot[1]*255),jr(ot[2]*255)],ht=pt[0],gt=pt[1],nt=pt[2]}return q.length>3?[ht,gt,nt,q[3]]:[ht,gt,nt]},Fn=function(q,nt,ot){var gt,yt,$,L,W;return q!==void 0&&q.length>=3&&(L=q,q=L[0],nt=L[1],ot=L[2]),q/=255,nt/=255,ot/=255,$=Math.min(q,nt,ot),$t=Math.max(q,nt,ot),yt=($t+$)/2,$t===$?(W=0,gt=Number.NaN):W=yt<.5?($t-$)/($t+$):($t-$)/(2-$t-$),q===$t?gt=(nt-ot)/($t-$):nt===$t?gt=2+(ot-q)/($t-$):ot===$t&&(gt=4+(q-nt)/($t-$)),gt*=60,gt<0&&(gt+=360),[gt,W,yt]},k.hsl=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["hsl"]),function(){})},x.hsl=mt,e.prototype.hsl=function(){return Fn(this._rgb)},ut=function(){var q,nt,ot,gt,yt,$,L,W,ht,pt,kt,At,xt,wt,It,Et,Ut,Ft;if(q=en(arguments),yt=q[0],Et=q[1],Ft=q[2],Ft*=255,Et===0)ht=gt=nt=Ft;else switch(yt===360&&(yt=0),yt>360&&(yt-=360),yt<0&&(yt+=360),yt/=60,$=Z(yt),ot=yt-$,L=Ft*(1-Et),W=Ft*(1-Et*ot),Ut=Ft*(1-Et*(1-ot)),$){case 0:pt=[Ft,Ut,L],ht=pt[0],gt=pt[1],nt=pt[2];break;case 1:kt=[W,Ft,L],ht=kt[0],gt=kt[1],nt=kt[2];break;case 2:At=[L,Ft,Ut],ht=At[0],gt=At[1],nt=At[2];break;case 3:xt=[L,W,Ft],ht=xt[0],gt=xt[1],nt=xt[2];break;case 4:wt=[Ut,L,Ft],ht=wt[0],gt=wt[1],nt=wt[2];break;case 5:It=[Ft,L,W],ht=It[0],gt=It[1],nt=It[2]}return[ht,gt,nt,q.length>3?q[3]:1]},Ye=function(){var q,nt,ot,gt,yt,$,L,W,ht;return L=en(arguments),$=L[0],ot=L[1],q=L[2],yt=Math.min($,ot,q),$t=Math.max($,ot,q),nt=$t-yt,ht=$t/255,$t===0?(gt=Number.NaN,W=0):(W=nt/$t,$===$t&&(gt=(ot-q)/nt),ot===$t&&(gt=2+(q-$)/nt),q===$t&&(gt=4+($-ot)/nt),gt*=60,gt<0&&(gt+=360)),[gt,W,ht]},k.hsv=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["hsv"]),function(){})},x.hsv=ut,e.prototype.hsv=function(){return Ye(this._rgb)},ue=function(q){var nt,ot,gt;return yn(q)==="number"&&q>=0&&q<=16777215?(gt=q>>16,ot=q>>8&255,nt=q&255,[gt,ot,nt,1]):(console.warn("unknown num color: "+q),[0,0,0,1])},Lr=function(){var q,nt,ot,gt;return gt=en(arguments),ot=gt[0],nt=gt[1],q=gt[2],(ot<<16)+(nt<<8)+q},k.num=function(q){return new e(q,"num")},e.prototype.num=function(q){return q==null&&(q="rgb"),Lr(this._rgb,q)},x.num=ue,p.push({p:1,test:function(q){if(arguments.length===1&&yn(q)==="number"&&q>=0&&q<=16777215)return"num"}}),V=function(){var q,nt,ot,gt,yt,$,L,W,ht,pt,kt,At,xt,wt,It,Et,Ut,Ft,Dt,zt;if(ot=en(arguments),W=ot[0],yt=ot[1],nt=ot[2],yt=yt/100,L=L/100*255,q=yt*255,yt===0)At=L=gt=nt;else switch(W===360&&(W=0),W>360&&(W-=360),W<0&&(W+=360),W/=60,ht=Z(W),$=W-ht,pt=nt*(1-yt),kt=pt+q*(1-$),Dt=pt+q*$,zt=pt+q,ht){case 0:xt=[zt,Dt,pt],At=xt[0],L=xt[1],gt=xt[2];break;case 1:wt=[kt,zt,pt],At=wt[0],L=wt[1],gt=wt[2];break;case 2:It=[pt,zt,Dt],At=It[0],L=It[1],gt=It[2];break;case 3:Et=[pt,kt,zt],At=Et[0],L=Et[1],gt=Et[2];break;case 4:Ut=[Dt,pt,zt],At=Ut[0],L=Ut[1],gt=Ut[2];break;case 5:Ft=[zt,pt,kt],At=Ft[0],L=Ft[1],gt=Ft[2]}return[At,L,gt,ot.length>3?ot[3]:1]},je=function(){var q,nt,ot,gt,yt,$,L,W,ht;return ht=en(arguments),W=ht[0],yt=ht[1],nt=ht[2],L=Math.min(W,yt,nt),$t=Math.max(W,yt,nt),gt=$t-L,ot=gt*100/255,q=L/(255-gt)*100,gt===0?$=Number.NaN:(W===$t&&($=(yt-nt)/gt),yt===$t&&($=2+(nt-W)/gt),nt===$t&&($=4+(W-yt)/gt),$*=60,$<0&&($+=360)),[$,ot,q]},k.hcg=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["hcg"]),function(){})},x.hcg=V,e.prototype.hcg=function(){return je(this._rgb)},G=function(q){var nt,ot,gt,yt,$,L,W,ht;if(q=q.toLowerCase(),k.colors!=null&&k.colors[q])return B(k.colors[q]);if($=q.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)){for(W=$.slice(1,4),yt=L=0;L<=2;yt=++L)W[yt]=+W[yt];W[3]=1}else if($=q.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/))for(W=$.slice(1,5),yt=ht=0;ht<=3;yt=++ht)W[yt]=+W[yt];else if($=q.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)){for(W=$.slice(1,4),yt=nt=0;nt<=2;yt=++nt)W[yt]=jr(W[yt]*2.55);W[3]=1}else if($=q.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)){for(W=$.slice(1,5),yt=ot=0;ot<=2;yt=++ot)W[yt]=jr(W[yt]*2.55);W[3]=+W[3]}else($=q.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/))?(gt=$.slice(1,4),gt[1]*=.01,gt[2]*=.01,W=mt(gt),W[3]=1):($=q.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/))&&(gt=$.slice(1,4),gt[1]*=.01,gt[2]*=.01,W=mt(gt),W[3]=+$[4]);return W},On=function(q){var nt;if(nt=q[3]<1?"rgba":"rgb",nt==="rgb")return nt+"("+q.slice(0,3).map(jr).join(",")+")";if(nt==="rgba")return nt+"("+q.slice(0,3).map(jr).join(",")+","+q[3]+")"},Oi=function(q){return jr(q*100)/100},lt=function(q,nt){var ot;return ot=nt<1?"hsla":"hsl",q[0]=Oi(q[0]||0),q[1]=Oi(q[1]*100)+"%",q[2]=Oi(q[2]*100)+"%",ot==="hsla"&&(q[3]=nt),ot+"("+q.join(",")+")"},x.css=function(q){return G(q)},k.css=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["css"]),function(){})},e.prototype.css=function(q){if(q==null&&(q="rgb"),q.slice(0,3)==="rgb")return On(this._rgb);if(q.slice(0,3)==="hsl")return lt(this.hsl(),this.alpha())},x.named=function(q){return B(Ds[q])},p.push({p:5,test:function(q){if(arguments.length===1&&Ds[q]!=null)return"named"}}),e.prototype.name=function(q){var nt,ot;arguments.length&&(Ds[q]&&(this._rgb=B(Ds[q])),this._rgb[3]=1),nt=this.hex("rgb");for(ot in Ds)if(nt===Ds[ot])return ot;return nt},he=function(){var q,nt,ot,gt;return gt=en(arguments),ot=gt[0],q=gt[1],nt=gt[2],nt=nt*i,[ot,R(nt)*q,yc(nt)*q]},z=function(){var q,nt,ot,gt,yt,$,L,W,ht,pt,kt;return ot=en(arguments),W=ot[0],yt=ot[1],L=ot[2],pt=he(W,yt,L),q=pt[0],nt=pt[1],gt=pt[2],kt=Lt(q,nt,gt),ht=kt[0],$=kt[1],gt=kt[2],[ht,$,gt,ot.length>3?ot[3]:1]},Wt=function(){var q,nt,ot,gt,yt,$;return $=en(arguments),yt=$[0],q=$[1],nt=$[2],ot=Ia(q*q+nt*nt),gt=(A(nt,q)*h+360)%360,jr(ot*1e4)===0&&(gt=Number.NaN),[yt,ot,gt]},Pe=function(){var q,nt,ot,gt,yt,$,L;return $=en(arguments),yt=$[0],ot=$[1],nt=$[2],L=cn(yt,ot,nt),gt=L[0],q=L[1],nt=L[2],Wt(gt,q,nt)},k.lch=function(){var q;return q=en(arguments),new e(q,"lch")},k.hcl=function(){var q;return q=en(arguments),new e(q,"hcl")},x.lch=z,x.hcl=function(){var q,nt,ot,gt;return gt=en(arguments),nt=gt[0],q=gt[1],ot=gt[2],z([ot,q,nt])},e.prototype.lch=function(){return Pe(this._rgb)},e.prototype.hcl=function(){return Pe(this._rgb).reverse()},Qe=function(q){var nt,ot,gt,yt,$,L,W,ht,pt;return q==null&&(q="rgb"),ht=en(arguments),W=ht[0],yt=ht[1],nt=ht[2],W=W/255,yt=yt/255,nt=nt/255,$=1-Math.max(W,Math.max(yt,nt)),gt=$<1?1/(1-$):0,ot=(1-W-$)*gt,L=(1-yt-$)*gt,pt=(1-nt-$)*gt,[ot,L,pt,$]},v=function(){var q,nt,ot,gt,yt,$,L,W,ht;return nt=en(arguments),gt=nt[0],L=nt[1],ht=nt[2],$=nt[3],q=nt.length>4?nt[4]:1,$===1?[0,0,0,q]:(W=gt>=1?0:255*(1-gt)*(1-$),yt=L>=1?0:255*(1-L)*(1-$),ot=ht>=1?0:255*(1-ht)*(1-$),[W,yt,ot,q])},x.cmyk=function(){return v(en(arguments))},k.cmyk=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["cmyk"]),function(){})},e.prototype.cmyk=function(){return Qe(this._rgb)},x.gl=function(){var q,nt,ot,gt,yt;for(gt=(function(){var $,L;$=en(arguments),L=[];for(nt in $)yt=$[nt],L.push(yt);return L}).apply(this,arguments),q=ot=0;ot<=2;q=++ot)gt[q]*=255;return gt},k.gl=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["gl"]),function(){})},e.prototype.gl=function(){var q;return q=this._rgb,[q[0]/255,q[1]/255,q[2]/255,q[3]]},Bn=function(q,nt,ot){var gt;return gt=en(arguments),q=gt[0],nt=gt[1],ot=gt[2],q=Ot(q),nt=Ot(nt),ot=Ot(ot),.2126*q+.7152*nt+.0722*ot},Ot=function(q){return q/=255,q<=.03928?q/12.92:Se((q+.055)/1.055,2.4)},Gt=function(q,nt,ot,gt){var yt,$;return yt=q._rgb,$=nt._rgb,new e(yt[0]+ot*($[0]-yt[0]),yt[1]+ot*($[1]-yt[1]),yt[2]+ot*($[2]-yt[2]),gt)},w.push(["rgb",Gt]),e.prototype.luminance=function(q,nt){var ot,gt,yt,$,L;return nt==null&&(nt="rgb"),arguments.length?($=this._rgb,q===0?$=[0,0,0,this._rgb[3]]:q===1?$=[255,255,255,this[3]]:(ot=Bn(this._rgb),gt=1e-7,yt=20,L=function(W,ht){var pt,kt;return kt=W.interpolate(ht,.5,nt),pt=kt.luminance(),Math.abs(q-pt)<gt||!yt--?kt:pt>q?L(W,kt):L(kt,ht)},ot>q?$=L(k("black"),this).rgba():$=L(this,k("white")).rgba()),k($).alpha(this.alpha())):Bn(this._rgb)},ss=function(q){var nt,ot,gt,yt;return yt=q/100,yt<66?(gt=255,ot=-155.25485562709179-.44596950469579133*(ot=yt-2)+104.49216199393888*Tt(ot),nt=yt<20?0:-254.76935184120902+.8274096064007395*(nt=yt-10)+115.67994401066147*Tt(nt)):(gt=351.97690566805693+.114206453784165*(gt=yt-55)-40.25366309332127*Tt(gt),ot=325.4494125711974+.07943456536662342*(ot=yt-50)-28.0852963507957*Tt(ot),nt=255),[gt,ot,nt]},dr=function(){var q,nt,ot,gt,yt,$,L,W;for($=en(arguments),yt=$[0],$[1],q=$[2],gt=1e3,ot=4e4,nt=.4;ot-gt>nt;)W=(ot+gt)*.5,L=ss(W),L[2]/L[0]>=q/yt?ot=W:gt=W;return jr(W)},k.temperature=k.kelvin=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["temperature"]),function(){})},x.temperature=x.kelvin=x.K=ss,e.prototype.temperature=function(){return dr(this._rgb)},e.prototype.kelvin=e.prototype.temperature,k.contrast=function(q,nt){var ot,gt,yt,$;return((yt=yn(q))==="string"||yt==="number")&&(q=new e(q)),(($=yn(nt))==="string"||$==="number")&&(nt=new e(nt)),ot=q.luminance(),gt=nt.luminance(),ot>gt?(ot+.05)/(gt+.05):(gt+.05)/(ot+.05)},k.distance=function(q,nt,ot){var gt,yt,$,L,W,ht,pt;ot==null&&(ot="lab"),((W=yn(q))==="string"||W==="number")&&(q=new e(q)),((ht=yn(nt))==="string"||ht==="number")&&(nt=new e(nt)),$=q.get(ot),L=nt.get(ot),pt=0;for(yt in $)gt=($[yt]||0)-(L[yt]||0),pt+=gt*gt;return Math.sqrt(pt)},k.deltaE=function(q,nt,ot,gt){var yt,$,L,W,ht,pt,kt,At,xt,wt,It,Et,Ut,Ft,Dt,zt,Jt,oe,te,Mt,Vt,Zt,ae,Kt,xe,qt,qe;for(ot==null&&(ot=1),gt==null&&(gt=1),((Jt=yn(q))==="string"||Jt==="number")&&(q=new e(q)),((oe=yn(nt))==="string"||oe==="number")&&(nt=new e(nt)),te=q.lab(),yt=te[0],L=te[1],ht=te[2],Mt=nt.lab(),$=Mt[0],W=Mt[1],pt=Mt[2],kt=Ia(L*L+ht*ht),At=Ia(W*W+pt*pt),ae=yt<16?.511:.040975*yt/(1+.01765*yt),Vt=.0638*kt/(1+.0131*kt)+.638,zt=kt<1e-6?0:A(ht,L)*180/s;zt<0;)zt+=360;for(;zt>=360;)zt-=360;return Kt=zt>=164&&zt<=345?.56+_(.2*R(s*(zt+168)/180)):.36+_(.4*R(s*(zt+35)/180)),xt=kt*kt*kt*kt,Dt=Ia(xt/(xt+1900)),Zt=Vt*(Dt*Kt+1-Dt),Ft=yt-$,Ut=kt-At,It=L-W,Et=ht-pt,wt=It*It+Et*Et-Ut*Ut,xe=Ft/(ot*ae),qt=Ut/(gt*Vt),qe=Zt,Ia(xe*xe+qt*qt+wt/(qe*qe))},e.prototype.get=function(q){var nt,ot,gt,yt,$,L;return gt=this,$=q.split("."),yt=$[0],nt=$[1],L=gt[yt](),nt?(ot=yt.indexOf(nt),ot>-1?L[ot]:console.warn("unknown channel "+nt+" in mode "+yt)):L},e.prototype.set=function(q,nt){var ot,gt,yt,$,L,W;if(yt=this,L=q.split("."),$=L[0],ot=L[1],ot)if(W=yt[$](),gt=$.indexOf(ot),gt>-1)if(yn(nt)==="string")switch(nt.charAt(0)){case"+":W[gt]+=+nt;break;case"-":W[gt]+=+nt;break;case"*":W[gt]*=+nt.substr(1);break;case"/":W[gt]/=+nt.substr(1);break;default:W[gt]=+nt}else W[gt]=nt;else console.warn("unknown channel "+ot+" in mode "+$);else W=nt;return k(W,$).alpha(yt.alpha())},e.prototype.clipped=function(){return this._rgb._clipped||!1},e.prototype.alpha=function(q){return arguments.length?k.rgb([this._rgb[0],this._rgb[1],this._rgb[2],q]):this._rgb[3]},e.prototype.darken=function(q){var nt,ot;return q==null&&(q=1),ot=this,nt=ot.lab(),nt[0]-=a.Kn*q,k.lab(nt).alpha(ot.alpha())},e.prototype.brighten=function(q){return q==null&&(q=1),this.darken(-q)},e.prototype.darker=e.prototype.darken,e.prototype.brighter=e.prototype.brighten,e.prototype.saturate=function(q){var nt,ot;return q==null&&(q=1),ot=this,nt=ot.lch(),nt[1]+=q*a.Kn,nt[1]<0&&(nt[1]=0),k.lch(nt).alpha(ot.alpha())},e.prototype.desaturate=function(q){return q==null&&(q=1),this.saturate(-q)},e.prototype.premultiply=function(){var q,nt;return nt=this.rgb(),q=this.alpha(),k(nt[0]*q,nt[1]*q,nt[2]*q,q)},E=function(q,nt,ot){if(!E[ot])throw"unknown blend mode "+ot;return E[ot](q,nt)},P=function(q){return function(nt,ot){var gt,yt;return gt=k(ot).rgb(),yt=k(nt).rgb(),k(q(gt,yt),"rgb")}},N=function(q){return function(nt,ot){var gt,yt,$;for($=[],gt=yt=0;yt<=3;gt=++yt)$[gt]=q(nt[gt],ot[gt]);return $}},$e=function(q,nt){return q},me=function(q,nt){return q*nt/255},j=function(q,nt){return q>nt?nt:q},Y=function(q,nt){return q>nt?q:nt},xc=function(q,nt){return 255*(1-(1-q/255)*(1-nt/255))},Ht=function(q,nt){return nt<128?2*q*nt/255:255*(1-2*(1-q/255)*(1-nt/255))},F=function(q,nt){return 255*(1-(1-nt/255)/(q/255))},U=function(q,nt){return q===255||(q=255*(nt/255)/(1-q/255),q>255)?255:q},E.normal=P(N($e)),E.multiply=P(N(me)),E.screen=P(N(xc)),E.overlay=P(N(Ht)),E.darken=P(N(j)),E.lighten=P(N(Y)),E.dodge=P(N(U)),E.burn=P(N(F)),k.blend=E,k.analyze=function(q){var nt,ot,gt,yt;for(gt={min:Number.MAX_VALUE,max:Number.MAX_VALUE*-1,sum:0,values:[],count:0},ot=0,nt=q.length;ot<nt;ot++)yt=q[ot],yt!=null&&!isNaN(yt)&&(gt.values.push(yt),gt.sum+=yt,yt<gt.min&&(gt.min=yt),yt>gt.max&&(gt.max=yt),gt.count+=1);return gt.domain=[gt.min,gt.max],gt.limits=function($,L){return k.limits(gt,$,L)},gt},k.scale=function(q,nt){var ot,gt,yt,$,L,W,ht,pt,kt,At,xt,wt,It,Et,Ut,Ft,Dt,zt,Jt,oe,te;return kt="rgb",At=k("#ccc"),Et=0,L=[0,1],It=[],wt=[0,0],ot=!1,yt=[],xt=!1,pt=0,ht=1,$=!1,gt={},Ut=!0,W=1,oe=function(Mt){var Vt,Zt,ae,Kt,xe,qt;if(Mt==null&&(Mt=["#fff","#000"]),Mt!=null&&yn(Mt)==="string"&&k.brewer!=null&&(Mt=k.brewer[Mt]||k.brewer[Mt.toLowerCase()]||Mt),yn(Mt)==="array"){for(Mt.length===1&&(Mt=[Mt[0],Mt[0]]),Mt=Mt.slice(0),Vt=ae=0,Kt=Mt.length-1;0<=Kt?ae<=Kt:ae>=Kt;Vt=0<=Kt?++ae:--ae)Zt=Mt[Vt],yn(Zt)==="string"&&(Mt[Vt]=k(Zt));for(It.length=0,Vt=qt=0,xe=Mt.length-1;0<=xe?qt<=xe:qt>=xe;Vt=0<=xe?++qt:--qt)It.push(Vt/(Mt.length-1))}return Jt(),yt=Mt},Dt=function(Mt){var Vt,Zt;if(ot!=null){for(Zt=ot.length-1,Vt=0;Vt<Zt&&Mt>=ot[Vt];)Vt++;return Vt-1}return 0},te=function(Mt){return Mt},zt=function(Mt,Vt){var Zt,ae,Kt,xe,qt,qe,bn,Be;if(Vt==null&&(Vt=!1),isNaN(Mt)||Mt===null)return At;if(Vt?Be=Mt:ot&&ot.length>2?(Zt=Dt(Mt),Be=Zt/(ot.length-2)):ht!==pt?Be=(Mt-pt)/(ht-pt):Be=1,Vt||(Be=te(Be)),W!==1&&(Be=Se(Be,W)),Be=wt[0]+Be*(1-wt[0]-wt[1]),Be=Math.min(1,Math.max(0,Be)),xe=Math.floor(Be*1e4),Ut&&gt[xe])ae=gt[xe];else{if(yn(yt)==="array")for(Kt=qt=0,bn=It.length-1;0<=bn?qt<=bn:qt>=bn;Kt=0<=bn?++qt:--qt){if(qe=It[Kt],Be<=qe){ae=yt[Kt];break}if(Be>=qe&&Kt===It.length-1){ae=yt[Kt];break}if(Be>qe&&Be<It[Kt+1]){Be=(Be-qe)/(It[Kt+1]-qe),ae=k.interpolate(yt[Kt],yt[Kt+1],Be,kt);break}}else yn(yt)==="function"&&(ae=yt(Be));Ut&&(gt[xe]=ae)}return ae},Jt=function(){return gt={}},oe(q),Ft=function(Mt){var Vt;return Vt=k(zt(Mt)),xt&&Vt[xt]?Vt[xt]():Vt},Ft.classes=function(Mt){var Vt;return Mt!=null?(yn(Mt)==="array"?(ot=Mt,L=[Mt[0],Mt[Mt.length-1]]):(Vt=k.analyze(L),Mt===0?ot=[Vt.min,Vt.max]:ot=k.limits(Vt,"e",Mt)),Ft):ot},Ft.domain=function(Mt){var Vt,Zt,ae,Kt,xe,qt,qe;if(!arguments.length)return L;if(pt=Mt[0],ht=Mt[Mt.length-1],It=[],ae=yt.length,Mt.length===ae&&pt!==ht)for(xe=0,Kt=Mt.length;xe<Kt;xe++)Zt=Mt[xe],It.push((Zt-pt)/(ht-pt));else for(Vt=qe=0,qt=ae-1;0<=qt?qe<=qt:qe>=qt;Vt=0<=qt?++qe:--qe)It.push(Vt/(ae-1));return L=[pt,ht],Ft},Ft.mode=function(Mt){return arguments.length?(kt=Mt,Jt(),Ft):kt},Ft.range=function(Mt,Vt){return oe(Mt,Vt),Ft},Ft.out=function(Mt){return xt=Mt,Ft},Ft.spread=function(Mt){return arguments.length?(Et=Mt,Ft):Et},Ft.correctLightness=function(Mt){return Mt==null&&(Mt=!0),$=Mt,Jt(),$?te=function(Vt){var Zt,ae,Kt,xe,qt,qe,bn,Be,Wn;for(Zt=zt(0,!0).lab()[0],ae=zt(1,!0).lab()[0],bn=Zt>ae,Kt=zt(Vt,!0).lab()[0],qt=Zt+(ae-Zt)*Vt,xe=Kt-qt,Be=0,Wn=1,qe=20;Math.abs(xe)>.01&&qe-- >0;)(function(){return bn&&(xe*=-1),xe<0?(Be=Vt,Vt+=(Wn-Vt)*.5):(Wn=Vt,Vt+=(Be-Vt)*.5),Kt=zt(Vt,!0).lab()[0],xe=Kt-qt})();return Vt}:te=function(Vt){return Vt},Ft},Ft.padding=function(Mt){return Mt!=null?(yn(Mt)==="number"&&(Mt=[Mt,Mt]),wt=Mt,Ft):wt},Ft.colors=function(Mt,Vt){var Zt,ae,Kt,xe,qt,qe,bn,Be;if(arguments.length<2&&(Vt="hex"),qt=[],arguments.length===0)qt=yt.slice(0);else if(Mt===1)qt=[Ft(.5)];else if(Mt>1)ae=L[0],Zt=L[1]-ae,qt=(function(){qe=[];for(var Wn=0;0<=Mt?Wn<Mt:Wn>Mt;0<=Mt?Wn++:Wn--)qe.push(Wn);return qe}).apply(this).map(function(Wn){return Ft(ae+Wn/(Mt-1)*Zt)});else{if(q=[],bn=[],ot&&ot.length>2)for(Kt=Be=1,xe=ot.length;1<=xe?Be<xe:Be>xe;Kt=1<=xe?++Be:--Be)bn.push((ot[Kt-1]+ot[Kt])*.5);else bn=L;qt=bn.map(function(Wn){return Ft(Wn)})}return k[Vt]&&(qt=qt.map(function(Wn){return Wn[Vt]()})),qt},Ft.cache=function(Mt){return Mt!=null?(Ut=Mt,Ft):Ut},Ft.gamma=function(Mt){return Mt!=null?(W=Mt,Ft):W},Ft.nodata=function(Mt){return Mt!=null?(At=k(Mt),Ft):At},Ft},k.scales==null&&(k.scales={}),k.scales.cool=function(){return k.scale([k.hsl(180,1,.9),k.hsl(250,.7,.4)])},k.scales.hot=function(){return k.scale(["#000","#f00","#ff0","#fff"],[0,.25,.75,1]).mode("rgb")},k.analyze=function(q,nt,ot){var gt,yt,$,L,W,ht,pt;if(W={min:Number.MAX_VALUE,max:Number.MAX_VALUE*-1,sum:0,values:[],count:0},ot==null&&(ot=function(){return!0}),gt=function(kt){kt!=null&&!isNaN(kt)&&(W.values.push(kt),W.sum+=kt,kt<W.min&&(W.min=kt),kt>W.max&&(W.max=kt),W.count+=1)},pt=function(kt,At){if(ot(kt,At))return nt!=null&&yn(nt)==="function"?gt(nt(kt)):nt!=null&&yn(nt)==="string"||yn(nt)==="number"?gt(kt[nt]):gt(kt)},yn(q)==="array")for(L=0,$=q.length;L<$;L++)ht=q[L],pt(ht);else for(yt in q)ht=q[yt],pt(ht,yt);return W.domain=[W.min,W.max],W.limits=function(kt,At){return k.limits(W,kt,At)},W},k.limits=function(q,nt,ot){var gt,yt,$,L,W,ht,pt,kt,At,xt,wt,It,Et,Ut,Ft,Dt,zt,Jt,oe,te,Mt,Vt,Zt,ae,Kt,xe,qt,qe,bn,Be,Wn,os,Rs,J0,hl,No,tu,sn,nn,ln,bi,rr,Cr,xi,wc,wh,i3,s3,o3,c3,k1,j5,q_,eu,l3;if(nt==null&&(nt="equal"),ot==null&&(ot=7),yn(q)==="array"&&(q=k.analyze(q)),Kt=q.min,$t=q.max,q.sum,eu=q.values.sort(function(Jv,tS){return Jv-tS}),ot===1)return[Kt,$t];if(Zt=[],nt.substr(0,1)==="c"&&(Zt.push(Kt),Zt.push($t)),nt.substr(0,1)==="e"){for(Zt.push(Kt),te=Wn=1,hl=ot-1;1<=hl?Wn<=hl:Wn>=hl;te=1<=hl?++Wn:--Wn)Zt.push(Kt+te/ot*($t-Kt));Zt.push($t)}else if(nt.substr(0,1)==="l"){if(Kt<=0)throw"Logarithmic scales are only possible for values > 0";for(xe=Math.LOG10E*Tt(Kt),ae=Math.LOG10E*Tt($t),Zt.push(Kt),te=l3=1,No=ot-1;1<=No?l3<=No:l3>=No;te=1<=No?++l3:--l3)Zt.push(Se(10,xe+te/ot*(ae-xe)));Zt.push($t)}else if(nt.substr(0,1)==="q"){for(Zt.push(Kt),te=gt=1,rr=ot-1;1<=rr?gt<=rr:gt>=rr;te=1<=rr?++gt:--gt)os=(eu.length-1)*te/ot,Rs=Z(os),Rs===os?Zt.push(eu[Rs]):(J0=os-Rs,Zt.push(eu[Rs]*(1-J0)+eu[Rs+1]*J0));Zt.push($t)}else if(nt.substr(0,1)==="k"){for(qe=eu.length,Ut=new Array(qe),Jt=new Array(ot),c3=!0,bn=0,Dt=null,Dt=[],Dt.push(Kt),te=yt=1,Cr=ot-1;1<=Cr?yt<=Cr:yt>=Cr;te=1<=Cr?++yt:--yt)Dt.push(Kt+te/ot*($t-Kt));for(Dt.push($t);c3;){for(Mt=$=0,xi=ot-1;0<=xi?$<=xi:$>=xi;Mt=0<=xi?++$:--$)Jt[Mt]=0;for(te=L=0,wc=qe-1;0<=wc?L<=wc:L>=wc;te=0<=wc?++L:--L){for(q_=eu[te],qt=Number.MAX_VALUE,Mt=W=0,wh=ot-1;0<=wh?W<=wh:W>=wh;Mt=0<=wh?++W:--W)oe=_(Dt[Mt]-q_),oe<qt&&(qt=oe,Ft=Mt);Jt[Ft]++,Ut[te]=Ft}for(Be=new Array(ot),Mt=ht=0,i3=ot-1;0<=i3?ht<=i3:ht>=i3;Mt=0<=i3?++ht:--ht)Be[Mt]=null;for(te=pt=0,s3=qe-1;0<=s3?pt<=s3:pt>=s3;te=0<=s3?++pt:--pt)zt=Ut[te],Be[zt]===null?Be[zt]=eu[te]:Be[zt]+=eu[te];for(Mt=kt=0,o3=ot-1;0<=o3?kt<=o3:kt>=o3;Mt=0<=o3?++kt:--kt)Be[Mt]*=1/Jt[Mt];for(c3=!1,Mt=At=0,tu=ot-1;0<=tu?At<=tu:At>=tu;Mt=0<=tu?++At:--At)if(Be[Mt]!==Dt[te]){c3=!0;break}Dt=Be,bn++,bn>200&&(c3=!1)}for(Vt={},Mt=xt=0,sn=ot-1;0<=sn?xt<=sn:xt>=sn;Mt=0<=sn?++xt:--xt)Vt[Mt]=[];for(te=wt=0,nn=qe-1;0<=nn?wt<=nn:wt>=nn;te=0<=nn?++wt:--wt)zt=Ut[te],Vt[zt].push(eu[te]);for(k1=[],Mt=It=0,ln=ot-1;0<=ln?It<=ln:It>=ln;Mt=0<=ln?++It:--It)k1.push(Vt[Mt][0]),k1.push(Vt[Mt][Vt[Mt].length-1]);for(k1=k1.sort(function(Jv,tS){return Jv-tS}),Zt.push(k1[0]),te=Et=1,bi=k1.length-1;Et<=bi;te=Et+=2)j5=k1[te],!isNaN(j5)&&Zt.indexOf(j5)===-1&&Zt.push(j5)}return Zt},J=function(q,nt,ot){var gt,yt,$,L;return gt=en(arguments),q=gt[0],nt=gt[1],ot=gt[2],isNaN(q)&&(q=0),q/=360,q<1/3?(yt=(1-nt)/3,L=(1+nt*R(f*q)/R(o-f*q))/3,$=1-(yt+L)):q<2/3?(q-=1/3,L=(1-nt)/3,$=(1+nt*R(f*q)/R(o-f*q))/3,yt=1-(L+$)):(q-=2/3,$=(1-nt)/3,yt=(1+nt*R(f*q)/R(o-f*q))/3,L=1-($+yt)),L=at(ot*L*3),$=at(ot*$*3),yt=at(ot*yt*3),[L*255,$*255,yt*255,gt.length>3?gt[3]:1]},jn=function(){var q,nt,ot,gt,yt,$,L,W;return L=en(arguments),$=L[0],nt=L[1],q=L[2],f=Math.PI*2,$/=255,nt/=255,q/=255,yt=Math.min($,nt,q),gt=($+nt+q)/3,W=1-yt/gt,W===0?ot=0:(ot=($-nt+($-q))/2,ot/=Math.sqrt(($-nt)*($-nt)+($-q)*(nt-q)),ot=Math.acos(ot),q>nt&&(ot=f-ot),ot/=f),[ot*360,W,gt]},k.hsi=function(){return function(q,nt,ot){ot.prototype=q.prototype;var gt=new ot,yt=q.apply(gt,nt);return Object(yt)===yt?yt:gt}(e,dn.call(arguments).concat(["hsi"]),function(){})},x.hsi=J,e.prototype.hsi=function(){return jn(this._rgb)},tt=function(q,nt,ot,gt){var yt,$,L,W,ht,pt,kt,At,xt,wt,It,Et;return gt==="hsl"?(It=q.hsl(),Et=nt.hsl()):gt==="hsv"?(It=q.hsv(),Et=nt.hsv()):gt==="hcg"?(It=q.hcg(),Et=nt.hcg()):gt==="hsi"?(It=q.hsi(),Et=nt.hsi()):(gt==="lch"||gt==="hcl")&&(gt="hcl",It=q.hcl(),Et=nt.hcl()),gt.substr(0,1)==="h"&&(L=It[0],xt=It[1],pt=It[2],W=Et[0],wt=Et[1],kt=Et[2]),!isNaN(L)&&!isNaN(W)?(W>L&&W-L>180?yt=W-(L+360):W<L&&L-W>180?yt=W+360-L:yt=W-L,$=L+ot*yt):isNaN(L)?isNaN(W)?$=Number.NaN:($=W,(pt===1||pt===0)&&gt!=="hsv"&&(At=wt)):($=L,(kt===1||kt===0)&&gt!=="hsv"&&(At=xt)),At==null&&(At=xt+ot*(wt-xt)),ht=pt+ot*(kt-pt),k[gt]($,At,ht)},w=w.concat(function(){var q,nt,ot,gt;for(ot=["hsv","hsl","hsi","hcl","lch","hcg"],gt=[],nt=0,q=ot.length;nt<q;nt++)Pt=ot[nt],gt.push([Pt,tt]);return gt}()),_t=function(q,nt,ot,gt){var yt,$;return yt=q.num(),$=nt.num(),k.num(yt+($-yt)*ot,"num")},w.push(["num",_t]),et=function(q,nt,ot,gt){var yt,$;return yt=q.lab(),$=nt.lab(),new e(yt[0]+ot*($[0]-yt[0]),yt[1]+ot*($[1]-yt[1]),yt[2]+ot*($[2]-yt[2]),gt)},w.push(["lab",et])}).call(h_)})($k,$k.exports);var zR=$k.exports;const K_=ul(zR);var IP={exports:{}},TP={exports:{}},EP={exports:{}},OP={exports:{}},FP=function(n){try{let e,i,a;const s=n.length,o=n[0];if(s===1)e=!0,i=o.xmin,a=o.xmax;else{const h=n[s-1];e=o.direction===h.direction,i=Math.min(o.xmin,h.xmin),a=Math.max(o.xmax,h.xmax)}if(i===void 0||a===void 0||e===void 0||isNaN(i)||isNaN(a))throw Error("categorizeIntersection failed with xmin",i,"and xmax",a);return{xmin:i,xmax:a,through:e}}catch(e){throw console.error("[categorizeIntersection] segments:",n),console.error("[categorizeIntersection]",e),e}},PP=function(n,e,i){return n<e?e:n>i?i:n},MP=function(n,e){try{const i=n.length,a=[];let s=[];for(let o=0;o<i;o++){const h=n[o];s.push(h),e(h)&&(a.push(s),s=[])}return s.length>0&&a.push(s),a}catch(i){console.error("[cluster]:",i)}};const XR=MP;var DP=function(n,e,i=!1){try{const a=XR(n,o=>o.endsOffLine);if(a.length>=2){const o=a[0],h=o[0],f=a[a.length-1],d=f[f.length-1];d.index===e-1&&h.index===0&&d.endsOnLine&&(a[0]=a.pop().concat(o))}return a}catch(a){console.error("[clusterLineSegments]",a)}},RP=function(n,e){const[i,a]=n,[s,o]=e,h=o-a,f=i-s,d=h*i+f*a;return{a:h,b:f,c:d}},LP=function(n){const e=[],i=n.length;for(let a=0;a<i;a+=2)e.push([n[a],n[a+1]]);return e},NP=function(n,e){n.forEach(i=>{for(let a=1;a<i.length;a++){const s=i[a-1],o=i[a],h=a-1;e([s,o],h)}})};const WR=NP;var $R=function(n){const e=[];return WR(n,i=>e.push(i)),e},jP=function(n,e){const i=n.a*e.b-e.a*n.b;if(i){const a=(e.b*n.c-n.b*e.c)/i,s=(n.a*e.c-e.a*n.c)/i;return{x:a,y:s}}},qR=function(n){const e=s=>Array.isArray(s)||s instanceof Int8Array||s instanceof Uint8Array||s instanceof Uint8ClampedArray||s instanceof Int16Array||s instanceof Uint16Array||s instanceof Int32Array||s instanceof Uint32Array||s instanceof Float32Array||s instanceof Float64Array||s instanceof BigInt64Array||s instanceof BigUint64Array;let i=0,a=n;for(;e(a);)i++,a=a[0];return i};const VR=qR;var BP=function S(n,e){if(n.type==="FeatureCollection")n.features.forEach(i=>S(i,e));else if(n.type==="Feature")S(n.geometry,e);else if(n.type==="Polygon")S(n.coordinates,e);else if(n.type==="MultiPolygon")n.coordinates.forEach(i=>{e(i)});else if(Array.isArray(n)){const i=VR(n);i===4?n.forEach(a=>{e(a)}):i===3&&e(n)}};const KR=BP;var UP=function(n){const e=[];return KR(n,i=>e.push(i)),e},GP=function(n){const e=n.length;if(e>0){const i=n[0];let a=i[1];const s=[i];for(let o=1;o<e;o++){const h=n[o],[f,d]=h;f<=a?s[s.length-1][1]=d:s.push(h),a=d}return s}},HP=function(n,e){const i=[],a=[],s=n.length;for(let o=0;o<s;o++){const h=n[o];e(h)?i.push(h):a.push(h)}return[i,a]},zP=function(n){return-1*Math.round(-1*n)};const YR=zP;var XP=function(n,e){return([i,a])=>(i=YR((i-n)/e),i===-0&&(i=0),a=Math.round((a-n)/e),a===-0&&(a=0),[i,a])},WP=function(n){const e=new Array(n);for(let i=0;i<n;i++)e[i]=i;return e};const Y_=RP,ZR=FP,Z_=PP,QR=LP,JR=DP,tL=$R,eL=jP,nL=UP,rL=GP,aL=HP,iL=XP,sL=WP;var $P=function({debug_level:n=0,raster_bbox:e,raster_height:i,raster_width:a,pixel_height:s,pixel_width:o,geometry:h,per_pixel:f,per_row_segment:d}){const[p,g,x,w]=e,_=[];if(i===0)return;for(let E=0;E<i;E++){const P=w-s*E-s/2,M=[p,P],F=[p+1,P],k=Y_(M,F);_.push(k)}n>=2&&console.log("[dufour-peyton-intersection] imageLines:",_),nL(h).map(tL).forEach(E=>{const P=sL(i).map(()=>[]),M=E.length;for(let O=0;O<M;O++){const v=E[O],[R,G]=v,[j,U]=R,[N,Z]=G,V=Math.sign(Z-U),B=U===Z,J=j===N,lt=U,mt=Y_(R,G),ut=Math.min(U,Z),ft=Math.max(U,Z);let tt,et,St,_t;if(j<N?([tt,et]=R,[_t,St]=G):([tt,et]=G,[_t,St]=R),tt===void 0)throw Error("startLng is "+tt);const Gt=Math.round((e[3]-.5*s-et)/s),Wt=Math.round((e[3]-.5*s-St)/s);let Lt,Qt;Gt<Wt?(Lt=Gt,Qt=Wt):(Lt=Wt,Qt=Gt),Lt=Z_(Lt,0,i-1),Qt=Z_(Qt,0,i-1);for(let he=Lt;he<Qt+1;he++){const z=_[he];if(z===void 0)throw console.error("j:",he),console.error("imageLines:",_),Error("imageLines");const Y=-1*z.c,at=U===Y,Tt=Z===Y,Ot=!Tt;let Pt,$t;if(B)if(lt===Y)Pt=tt,$t=_t;else continue;else if(J)Y>=ut&&Y<=ft&&(Pt=tt,$t=_t);else if(at)Pt=$t=j;else if(Tt)Pt=$t=N;else try{Pt=$t=eL(mt,z).x}catch(me){throw me}Pt!==void 0&&$t!==void 0&&(B||Pt>=tt&&$t<=_t&&Y<=ft&&Y>=ut)&&P[he].push({direction:V,index:O,edge:v,endsOnLine:Tt,endsOffLine:Ot,horizontal:B,startsOnLine:at,vertical:J,xmin:Pt,xmax:$t,imageLineY:Y})}}const F=o/2,k=iL(p,o);P.forEach((O,v)=>{if(O.length>0){const G=JR(O,M).map(ZR),[j,U]=aL(G,V=>V.through);if(j.length%2===1)throw n>=1&&console.error("throughs:",JSON.stringify(j)),Error("throughs.length for "+v+" is odd with "+j.length);let N=U.map(V=>[V.xmin,V.xmax]);j.sort((V,B)=>V.xmin-B.xmin);const Z=QR(j).map(V=>{const[B,J]=V;return[B.xmin,J.xmax]});N=N.concat(Z),N=rL(N),N.forEach(V=>{const[B,J]=V;if(J-B<F)return;const[lt,mt]=k(V);if(lt===mt||lt>a||mt<=0)return;const ut=Math.max(lt,0),ft=Math.min(mt-1,a-1);if(d&&d({row:v,columns:[ut,ft]}),f)for(let tt=ut;tt<=ft;tt++)f({row:v,column:tt})})}})})},oL=function(n){n.forEach((e,i)=>{for(let a=0;a<e.length;a++){const s=e[a],[o,h]=s;o>h&&console.warn("[dufour-peyton-intersection] uh oh, encountered invalid range",s,"at row index",i,"with ranges",e);for(let f=a+1;f<e.length;f++)f[0]<=h&&console.warn("[dufour-peyton-intersection] encountered range problem on row index",i,":",e)}})},cL=function(n){const e=n.length;if(e>0){const i=n[0];let a=i[1];const s=[i];for(let o=1;o<e;o++){const h=n[o],[f,d]=h;f<=a+1?s[s.length-1][1]=d:s.push(h),a=d}return s}};const lL=$P,uL=oL,hL=cL;var fL=function({debug:n=!1,raster_bbox:e,raster_height:i,raster_width:a,pixel_height:s,pixel_width:o,geometry:h,per_pixel:f,per_row_segment:d}){const[p,g,x,w]=e;s==null&&(s=(w-g)/i),o==null&&(o=(x-p)/a);const _=new Array(i);lL({raster_bbox:e,raster_height:i,raster_width:a,pixel_height:s,pixel_width:o,geometry:h,per_pixel:f,per_row_segment:({row:A,columns:T})=>{_[A]||(_[A]=[]),_[A].push(T),d&&d({row:A,columns:T})}});for(let A=0;A<_.length;A++){const T=_[A];T&&(T.sort((E,P)=>E===P?E[1]-P[1]:E[0]-P[0]),_[A]=hL(T))}return n&&uL(insides),{rows:_}};const dL=BP;var pL=function(n){let e,i,a,s;return dL(n,o=>{const h=o[0],f=h.length-1;let d;for(e===void 0?(e=a=h[0][0],i=s=h[0][1],d=1):d=0;d<=f;d++){const[p,g]=h[d];p<e?e=p:p>a&&(a=p),g<i?i=g:g>s&&(s=g)}}),[e,i,a,s]};(function(S){const P={calculate:fL,calculateCore:$P,categorizeIntersection:FP,clamp:PP,cluster:MP,clusterLineSegments:DP,couple:LP,eachEdge:NP,getBoundingBox:pL,getIntersectionOfTwoLines:jP,getLineFromPoints:RP,getPolygons:UP,mergeRanges:GP,partition:HP,prepareSnap:XP,range:WP,roundDown:zP};S.exports=P,typeof self=="object"&&(self.dufour_peyton_intersection=P),typeof window=="object"&&(window.dufour_peyton_intersection=P)})(OP);var gL=OP.exports,mL=function(n){n[0]==="+"&&(n=n.substring(1));const e=n[0]==="-"?"-":"";e==="-"&&(n=n.substring(1));const i=n.indexOf("e");if(i===-1)return e+n;let a=n.indexOf(".");a===-1&&(a=i);const s=Number(n.substring(i+1)),o=n.substring(0,i).replace(".",""),h=a+s,f=o.length;if(h>=f){const d=h-f;let p=o;for(let g=0;g<d;g++)p+="0";return e+p}else if(h<0){result="0.";for(let d=0;d>h;d--)result+="0";return result+=o,e+result}else return e+o.substring(0,h)+"."+o.substring(h)};const bL=mL;var Wv=function(n){return n[0]==="+"&&(n=n.substring(1)),n=bL(n),n=n.replace(/^0+(?=\d)/,""),n},f_=function(n,e){const i=n.length,a=e.length,s=n.indexOf("."),o=e.indexOf("."),h=s===-1?i:s,f=o===-1?a:o,d=h-f;let p=Math.max(h,f),g=Math.max(i-h,a-f),x=d<0?-1*d:0,w=d<=0?0:d,_=p+1+g-1,A=0;for(;A<_;){const T=n[A-x]||"0",E=e[A-w]||"0";if(T!==E){if(T>E)return">";if(T<E)return"<"}A++}return"="},qP=function(n,e){const i=n.length,a=e.length,s=n.indexOf("."),o=e.indexOf("."),h=s===-1?i:s,f=o===-1?a:o,d=h-f;let p=Math.max(h,f),g=Math.max(i-h-1,a-f-1),x=d<0?-1*d:0,w=d<=0?0:d,_=p+1+g-1,A="",T=0,E=_;if(g>0){for(;E>_-g;){const P=n[E-x]||"0",M=e[E-w]||"0";let F=Number(P)+Number(M)+T;F>=10?(F-=10,T=1):T=0,(A!==""||F!==0)&&(A=F+A),E--}A&&(A="."+A),E--}if(p>0)for(;E>=0;){const P=n[E-x]||"0",M=e[E-w]||"0";let F=Number(P)+Number(M)+T;F>=10?(F-=10,T=1):T=0,A=F+A,E--}return T===1&&(A=T+A),A},VP=function(n,e){const i=n.length,a=e.length,s=n.indexOf("."),o=e.indexOf("."),h=s===-1?i:s,f=o===-1?a:o,d=h-f;let p=Math.max(h,f),g=Math.max(i-h-1,a-f-1),x=d<0?-1*d:0,w=d<=0?0:d,_=p+1+g-1,A="",T=0,E=_;if(g>0){for(;E>_-g;){let P=n[E-x]||"0",M=e[E-w]||"0";P-=T,T=0;let F=P-M;if(F<0)for(;F<0;)T++,F+=10;else T&&T--;(A!==""||F!==0)&&(A=F+A),E--}A!==""&&(A="."+A),E--}if(p>0){for(;E>0;){let k=n[E-x]||"0",O=e[E-w]||"0";k-=T,T=0;let v=k-O;if(v<0)for(;v<0;)T++,v+=10;else T&&T--;A=v+A,E--}const P=n[0-x]||"0",M=e[0-w]||"0";let F=Number(P)-(T>0?1:0)-Number(M);F!==0&&(A=F+A),A=A.replace(/^0+/,"")}return A[0]==="."&&(A="0"+A),A};const Q_=Wv,J_=f_,tC=qP,B5=VP;var KP=function(n,e){n=Q_(n),e=Q_(e);const i=n[0]!=="-",a=e[0]!=="-";if(i)if(a){const s=J_(n,e);return s===">"?B5(n,e):s==="<"?"-"+B5(e,n):"0"}else return tC(n,e.substring(1));else{if(a)return"-"+tC(n.substring(1),e);{n=n.substring(1),e=e.substring(1);const s=J_(n,e);return s===">"?"-"+B5(n,e):s==="<"?B5(e,n):"0"}}};const xL=Wv;var yL=function(n){return n=xL(n),n[0]==="-"?n.substring(1):n};const eC=f_,nC=Wv,rC=qP,U5=VP;var wL=function(n,e){n=nC(n),e=nC(e);const i=n[0]!=="-",a=e[0]!=="-";if(i&&a)return rC(n,e);if(!i&&!a)return"-"+rC(n.substring(1),e.substring(1));if(!i&&a)switch(n=n.substring(1),eC(n,e)){case"=":return"0";case"<":return U5(e,n);case">":return"-"+U5(n,e)}else if(i&&!a)switch(e=e.substring(1),eC(n,e)){case"=":return"0";case"<":return"-"+U5(e,n);case">":return U5(n,e)}};const vL=["5","6","7","8","9"];var SL=function(n){n[0]==="+"&&(n=n.substring(1));const e=n.length;let i="";const a=n[n.length-1];if(vL.includes(a)){let s;for(s=e-2;s>=0;s--){const o=n[s];if(o==="."||o==="-")continue;const h=Number(o)+1;if(h===10)i="0"+i;else{i=h+i;break}}s>0&&(i=n.substring(0,s)+i)}else i=n.substring(0,e-1);return i[i.length-1]==="."&&(i=i.substring(0,i.length-1)),i.indexOf(".")>-1&&(i=i.replace(/0+$/,"")),i};const G5=f_,H5=wL,aC=KP,kL=SL;var AL=function(n,e,{max_decimal_digits:i=100,ellipsis:a=!1}={}){n[0]==="0"&&(n=n.substring(1)),e[0]==="0"&&(e=e.substring(1));const s=n.indexOf("."),o=e.indexOf("."),h=s===-1?n.length:s,f=o===-1?0:e.length-1-o;let d=!1;n=n.replace(/\./,""),e=e.replace(/\./,"");const p=n.length;let g="",x="",w,_=-1*f,A=0;for(let M=0;M<p;M++){const F=n[M];if(g+=F,w=G5(g,e),w===">"){let k=1,O=H5(e,e),v=e;for(;G5(O,g)!==">";)k++,v=O,O=H5(O,e);if(k=k.toString(),x!=="")for(let R=k.length;R<=A;R++)x+="0";x+=k,g=aC(g,v),A=0}else if(w==="<"){x===""&&_++,A++;continue}else if(w==="="){if(x!=="")for(let k=0;k<A;k++)x+="0";x+="1",g="0",A=0}}if(g.match(/^0+$/g))w==="<"&&(x+=g.substring(0,g.length-1));else{const M={},F=h-_,k=x.length,O=F-k+i+1;x===""&&(A=0);for(let v=0;v<O;v++){if(g+="0",a)if(g in M){if(M[g]++,M[g]>3){x+="...",d=!0;break}}else M[g]=1;const R=G5(g,e);if(R===">"){let G=1,j=H5(e,e),U=e;for(;G5(j,g)!==">";)G++,U=j,j=H5(j,e);G=G.toString();for(let N=G.length;N<=A;N++)x+="0";if(x+=G,g=aC(g,U),g==="0")break;A=0}else if(R==="<"){A++;continue}else if(R==="="){for(let G=0;G<A;G++)x+="0";x+="1",A=0;break}}}const T=h-_,E=x.length;let P;if(T===E)P=0;else if(T<0)x="0."+"0".repeat(Math.abs(T))+x,P=E-T;else if(T>E){for(let M=E;M<T;M++)x+="0";P=0}else T<E?(x=x.substring(0,T)+"."+x.substring(T),P=E-T):T===0&&(x="0."+x,P=E);if(x=x.replace(/^0+/,""),x=x.replace(/\.\d+0+$/,""),!d){const M=P-i;M>0&&(x=kL(x.substring(0,x.length-M+1)))}return x[0]==="."&&(x="0"+x),x};const iC=yL,sC=Wv,_L=AL;var CL=function(S,n,e){S=sC(S),n=sC(n);const i=S[0]!=="-",a=n[0]!=="-",s=i!==a?"-":"";return i||(S=iC(S)),a||(n=iC(n)),s+_L(S,n,e)},YP={exports:{}};(function(S){const n=i=>JSON.parse(JSON.stringify(i));function e(i,{in_place:a=!1,reproject:s}){if(typeof s!="function")throw new Error("[reproject-geojson] you must specify a reproject function");return a!==!0&&(i=n(i)),i.type==="FeatureCollection"?i.features=i.features.map(o=>e(o,{in_place:a,reproject:s})):i.type==="Feature"?i.geometry=e(i.geometry,{in_place:a,reproject:s}):i.type==="LineString"?i.coordinates=i.coordinates.map(o=>s(o)):i.type==="MultiLineString"?i.coordinates=i.coordinates.map(o=>o.map(h=>s(h))):i.type==="MultiPoint"?i.coordinates=i.coordinates.map(o=>s(o)):i.type==="MultiPolygon"?i.coordinates=i.coordinates.map(o=>o.map(h=>h.map(f=>s(f)))):i.type==="Point"?i.coordinates=s(i.coordinates):i.type==="Polygon"&&(i.coordinates=i.coordinates.map(o=>o.map(h=>s(h)))),i}S.exports=e,typeof window=="object"&&(window.reprojectGeoJSONPluggable=e),typeof self=="object"&&(self.reprojectGeoJSONPluggable=e)})(YP);var ZP=YP.exports,QP={exports:{}};(function(S){function n({segments:e,min:i=-1/0,max:a=1/0,debug:s=!1}){if(s&&console.log("[segflip] segs:",e),e==null||Array.isArray(e)&&e.length===0)return s&&console.log("[segflip] segments are empty so return the whole row flipped"),[[i,a]];const o=e.map(([f,d])=>[f-1,d+1]).flat();o.unshift(i),o.push(a),s&&console.log("flattened nums:",o);const h=[];for(let f=1;f<o.length;f+=2){const d=o[f-1],p=o[f];d>p||h.push([d,p])}return h}S.exports=n,typeof window=="object"&&(window.segflip=n),typeof self=="object"&&(self.segflip=n)})(QP);var IL=QP.exports;(function(S){const n=gL,e=KP,i=CL,a=ZP,s=IL;function o({rows:p}){p.forEach((g,x)=>{g&&g.forEach(([w,_],A)=>{if(w>_)throw Error(`uh oh: invalid segment at row ${x}, segment ${A}`)})})}function h({debug:p=!1,raster_bbox:g,raster_height:x,raster_width:w,pixel_height:_,pixel_width:A,mask:T,reproject:E}){typeof E=="function"&&(T=a(T,{in_place:!1,reproject:E})),_===void 0&&(_=Number(i(e(g[3].toString(),g[1].toString()),x.toString()))),A===void 0&&(A=Number(i(e(g[2].toString(),g[0].toString()),w.toString())));const{rows:P}=n.calculate({raster_bbox:g,raster_height:x,raster_width:w,pixel_height:_,pixel_width:A,geometry:T});return p&&o({rows:P}),{rows:P}}function f({debug:p=!1,raster_bbox:g,raster_height:x,raster_width:w,pixel_height:_,pixel_width:A,mask:T,reproject:E}){typeof E=="function"&&(T=a(T,{in_place:!1,reproject:E})),_===void 0&&(_=Number(i(e(g[3].toString(),g[1].toString()),x.toString()))),A===void 0&&(A=Number(i(e(g[2].toString(),g[0].toString()),w.toString())));const{rows:P}=h({debug:p,raster_bbox:g,raster_height:x,raster_width:w,pixel_height:_,pixel_width:A,mask:T});p&&o({rows:P});const M=w-1,F=[];for(let k=0;k<P.length;k++){const O=P[k];!Array.isArray(O)||O.length===0?F.push([[0,M]]):F.push(s({segments:O,min:0,max:M,debug:!1}))}return p&&o({rows:F}),{rows:F}}const d={inside:h,outside:f};S.exports=d})(EP);var TL=EP.exports,JP={exports:{}};const t=" +no_defs",m=" +towgs84=0,0,0,0,0,0,0",c=" +ellps=GRS80",u="+proj=tmerc",r=" +units=m",Nt=" +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12",jt=" +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22",C="+proj=lcc",I="+proj=utm",D=" +units=us-ft",Q="+proj=longlat",y=" +lat_0=0",H=" +ellps=krass",l=" +y_0=0",X=" +x_0=500000",ne=" +towgs84=0,0,4.5,0,0,0.554,0.2263",re=" +towgs84=0,0,1.9,0,0,0.814,-0.38",ct=" +ellps=intl",vt=" +datum=WGS84",Ct=" +ellps=WGS72",Ce=" +towgs84=15.8,-154.4,-82.3,0,0,0,0",dt=" +k=0.9999",Pn=" +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",Rt=" +datum=NAD27",Xt=" +ellps=bessel",ke=" +x_0=609601.2192024384",Bt=" +x_0=600000",qr=" +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84",ie=" +ellps=clrk80",Ie=" +b=6356755.288157528",Ne=" +x_0=152400.3048006096",Je=" +lat_0=36.66666666666666",Vr=" +towgs84=-146.414,507.337,680.507,0,0,0,0",ee=" +x_0=200000",ge=" +ellps=clrk66",de=" +ellps=WGS84",tn=" +x_0=500000.001016002",ce=" +x_0=240000",Yt=" +lat_0=-90",$n=" +towgs84=-87,-98,-121,0,0,0,0",st=" +south",wn=" +lat_0=41.66666666666666",le=" +y_0=36000",vc=" +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29",bt=" +x_0=0",se=" +units=ft",ye=" +x_0=400000",so=" +towgs84=-115.854,-99.0583,-152.462,0,0,0,0",oo=" +towgs84=-208.406,-109.878,-2.5764,0,0,0,0",He=" +ellps=aust_SA",Ir=" +lat_0=39.33333333333334",o0=" +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232",Br=" +lat_0=37.66666666666666",Ur=" +lat_0=36.33333333333334",fl=" +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7",pr=" +y_0=500000.0001016001",gr=" +x_0=200000.0001016002",mr=" +x_0=500000.0001016001",Yn=" +x_0=500000.00001016",Fe=" +y_0=1000000",ve=" +x_0=300000",ze=" +lon_0=-120.5",ma=" +lat_0=43.66666666666666",ba=" +lat_0=43.83333333333334",ja=" +lat_1=-68.66666666666667",Ba=" +lat_2=-71.33333333333333",rn=" +k=0.999966667",pe=" +k=0.9996",Ua=" +lat_0=38.33333333333334",Ga=" +lat_1=73.66666666666667",Ha=" +lat_2=70.33333333333333",za=" +lat_0=72.02500919444445",Ue=" +a=6378249.2",Ge=" +x_0=1500000",yi=" +lat_ts=-80.23861111111111",Ls=" +towgs84=-288,175,-376,0,0,0,0",ni=" +lat_1=41.78333333333333",wi=" +lat_2=-75.33333333333333",nu=" +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21",De=" +x_0=304800",aa=" +x_0=2000000.0001016",Ze=" +k=0.9999375",Le=" +y_0=500000",Em=" +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547",Fi=" +lon_0=-100.3333333333333",Pi=" +lat_1=-72.66666666666667",Mi=" +lat_1=-76.66666666666667",Di=" +lat_2=-79.33333333333333",un=" +y_0=10000000",cs=" +towgs84=-57,1,-41,0,0,0,0",An=" +k=0.999941177",ri=" +x_0=800000.0000101599",ai=" +y_0=99999.99998983997",Ri=" +lat_1=38.43333333333333",Li=" +lat_0=24.33333333333333",co=" +towgs84=26,-121,-78,0,0,0,0",Te=" +a=6378140",Om=" +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496",Ta=" +x_0=399999.99998984",Ns=" +towgs84=-24,-15,5,0,0,0,0",jo=" +towgs84=682,-203,480,0,0,0,0",Sc=" +towgs84=-136,-108,-292,0,0,0,0",xa=" +b=6356075.41314024",ls=" +lat_1=37.96666666666667",us=" +lat_0=38.83333333333334",hs=" +lat_0=40.16666666666666",fs=" +lat_0=34.33333333333334",ds=" +lat_0=42.83333333333334",js=" +lon_0=-84.36666666666666",Ni=" +x_0=300000.0000000001",Un=" +k=0.999933333",Bs=" +lat_1=48.73333333333333",In=" +lon_0=-111.5",ji=" +k=0.9999473679999999",ru=" +towgs84=-67.35,3.88,-38.22,0,0,0,0",lo=" +lat_2=73.66666666666667",uo=" +lat_0=75.36440330555556",Xe=" +b=6356515",vh=" +towgs84=25,-141,-78.5,-0,0.35,0.736,0",vn="+proj=stere",Bo=" +lat_1=-64.66666666666667",Uo=" +lat_2=-67.33333333333333",Bi=" +b=6356514.966398753",dl=" +towgs84=295,736,257,0,0,0,0",hn=" +x_0=100000",kc=" +towgs84=-11,851,5,0,0,0,0",Fm=" +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0",Tx=" +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06",Go=" +lat_0=39.66666666666666",Tn=" +x_0=1000000",Zn=" +lon_0=-105.5",Ex=" +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15",Tr=" +a=6378249.145",Ln=" +x_0=2000000",Ac=" +lat_0=45.66666666666666",_c=" +lat_1=80.33333333333333",Cc=" +lat_0=78.70733752777778",ps=" +b=6356774.50408554",pl=" +lon_0=-91.33333333333333",gl=" +lon_0=-123.3333333333333",au=" +towgs84=-168,-60,320,0,0,0,0",We=" +lat_0=31",u3=" +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093",En=" +x_0=150000",Qn=" +x_0=3500000",A1=" +towgs84=213.11,9.37,-74.95,0,0,0,0",ml=" +lat_1=43.66666666666666",bl=" +lat_0=40.33333333333334",iu=" +towgs84=-148,136,90,0,0,0,0",su=" +towgs84=616,97,-251,0,0,0,0",pn=" +lon_0=-90",Mn=" +x_0=250000",Ic=" +x_0=914401.8288036576",c0=" +lon_0=-90.33333333333333",ya=" +a=6377276.345",Ho=" +b=6356103.038993155",Gn=" +lat_0=40.5",Sh=" +towgs84=-134,-48,149,0,0,0,0",Pm=" +towgs84=25,-141,-78.5,0,0.35,0.736,0",l0=" +lat_1=27.83333333333333",u0=" +lat_2=26.16666666666667",h0=" +lat_2=40.71666666666667",f0=" +lat_2=39.01666666666667",d0=" +lat_2=37.21666666666667",p0=" +lat_1=70.33333333333333",g0=" +lat_0=68.68747555555557",h3=" +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68",xl=" +y_0=304800.6096012192",yl=" +x_0=699999.9998983998",wl=" +y_0=999999.9998983998",qn=" +y_0=800000",Sn=" +k=0.99995",Er=" +lat_0=34.75",_n=" +lon_0=-81",Jn=" +lon_0=-100",Tc=" +b=6356098.145120132",Gr="+proj=omerc",Hr=" +lon_0=-98.5",Ox=" +towgs84=-103.746,-9.614,-255.95,0,0,0,0",ar=" +x_0=800000",ou=" +lat_0=37.83333333333334",cu=" +lat_2=44.33333333333334",lu=" +lat_2=42.33333333333334",uu=" +lat_0=29.66666666666667",hu=" +lat_0=25.66666666666667",fu=" +lat_0=35.83333333333334",du=" +lat_1=83.66666666666667",pu=" +lat_2=80.33333333333333",gu=" +lat_0=82.05842488888888",fn=" +lat_0=38",Kr=" +x_0=2500000",_1=" +towgs84=-377,681,-50,0,0,0,0",br="+proj=cass",ia=" +y_0=2000000",C1=" +towgs84=-143,-236,7,0,0,0,0",kh=" +lon_0=-110.1666666666667",Ah=" +lon_0=-111.9166666666667",_h=" +lon_0=-75.41666666666667",Ch=" +lon_0=-82.16666666666667",Ih=" +lon_0=-84.16666666666667",Th=" +lon_0=-112.1666666666667",Eh=" +lon_0=-88.83333333333333",Oh=" +lon_0=-104.3333333333333",Fh=" +lon_0=-107.8333333333333",Ph=" +lon_0=-76.58333333333333",Mh=" +lon_0=-78.58333333333333",Dh=" +lon_0=-120.8333333333333",Rh=" +lon_0=-88.33333333333333",Lh=" +lon_0=-90.16666666666667",Nh=" +lon_0=-85.66666666666667",jh=" +lon_0=-87.08333333333333",Bh=" +lon_0=-70.16666666666667",Uh=" +lon_0=-93.09999999999999",Gh=" +lon_0=-115.5833333333333",Hh=" +lon_0=-116.6666666666667",zh=" +lon_0=-118.5833333333333",Xh=" +lon_0=-71.66666666666667",Wh=" +lon_0=-105.1666666666667",$h=" +lon_0=-107.3333333333333",qh=" +lon_0=-110.0833333333333",Or=" +lat_0=37.5",Fr=" +y_0=700000",Fx=" +towgs84=-242.2,-144.9,370.3,0,0,0,0",wa=" +x_0=4500000",va=" +y_0=1500000",vl=" +x_0=599999.9999976",z5=" +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1",tr="+proj=aea",ii=" +y_0=-2500000",Vh=" +lat_2=38.96666666666667",Kh=" +lat_1=41.66666666666666",Yh=" +lat_1=39.83333333333334",Zh=" +lat_2=38.33333333333334",Qh=" +lat_2=37.06666666666667",Jh=" +lat_0=35.33333333333334",tf=" +lat_1=35.46666666666667",ef=" +lat_2=34.03333333333333",nf=" +lat_1=33.88333333333333",rf=" +lat_2=32.78333333333333",af=" +lat_0=32.16666666666666",sf=" +lat_2=37.23333333333333",of=" +lat_1=41.86666666666667",cf=" +lat_0=40.83333333333334",lf=" +lat_2=29.58333333333333",uf=" +lat_2=41.71666666666667",hf=" +lat_1=41.03333333333333",ff=" +lat_2=40.66666666666666",df=" +lat_1=36.76666666666667",pf=" +lat_0=33.33333333333334",gf=" +lat_1=40.96666666666667",mf=" +lat_2=39.93333333333333",bf=" +lat_0=31.83333333333333",xf=" +lat_0=31.66666666666667",yf=" +lat_0=27.83333333333333",wf=" +lat_2=36.76666666666667",vf=" +lat_0=45.33333333333334",Sf=" +lat_0=45.16666666666666",kf=" +lat_1=36.23333333333333",Af=" +lat_2=34.93333333333333",_f=" +lat_1=34.76666666666667",Cf=" +lat_0=32.66666666666666",If=" +lat_1=43.26666666666667",Tf=" +lat_2=42.06666666666667",Ef=" +lat_2=40.61666666666667",Of=" +lat_1=39.78333333333333",Ff=" +lat_2=38.71666666666667",Pf=" +lat_1=38.56666666666667",Mf=" +lat_2=37.26666666666667",Df=" +lat_0=41.08333333333334",Rf=" +lat_0=42.33333333333334",zr=" +y_0=100000",m0=" +b=6356173.508712696",Ea=" +y_0=5500000",ir=" +lon_0=105",vi=" +y_0=-5000000",mu=" +k=0.9995000000000001",bu=" +k=0.9999749999999999",Mm=" +towgs84=-160,-6,-302,0,0,0,0",Dm=" +towgs84=307,304,-318,0,0,0,0",Xa=" +lon_0=-82.5",f3=" +towgs84=70.995,-335.916,262.898,0,0,0,0",d3=" +towgs84=-304.046,-60.576,103.64,0,0,0,0",sa=" +x_0=700000",oa=" +x_0=213360",Ui=" +lon_0=-85.75",Gi=" +lon_0=-100.5",Hi=" +lon_0=-77.75",Lf=" +x_0=999999.9999898402",p3=" +towgs84=-151.99,287.04,-147.45,0,0,0,0",xr=" +lon_0=129",xu=" +a=6378293.645208759",yu=" +b=6356617.987679838",si=" +x_0=5500000",I1=" +lat_1=40.78333333333333",T1=" +lat_2=39.71666666666667",E1=" +lat_1=37.93333333333333",O1=" +lat_2=36.73333333333333",F1=" +lat_1=42.68333333333333",P1=" +lat_1=41.48333333333333",M1=" +lat_2=41.28333333333333",D1=" +lat_1=47.08333333333334",R1=" +lat_2=45.48333333333333",L1=" +lat_0=44.78333333333333",N1=" +lat_2=44.18333333333333",j1=" +lat_0=43.31666666666667",B1=" +lat_1=36.16666666666666",U1=" +lat_2=34.33333333333334",G1=" +lat_2=47.43333333333333",H1=" +lat_1=47.48333333333333",z1=" +lat_2=46.18333333333333",X1=" +lat_2=35.56666666666667",W1=" +lat_1=35.23333333333333",$1=" +lat_2=33.93333333333333",q1=" +lat_2=40.88333333333333",V1=" +lat_1=34.83333333333334",K1=" +lat_1=36.41666666666666",Y1=" +lat_1=36.18333333333333",Z1=" +lat_1=33.96666666666667",Q1=" +lat_2=32.13333333333333",J1=" +lat_1=31.88333333333333",tp=" +lat_2=30.11666666666667",ep=" +lat_1=30.28333333333333",np=" +lat_2=28.38333333333333",rp=" +lat_2=38.03333333333333",ap=" +lat_1=47.33333333333334",ip=" +lat_2=45.83333333333334",sp=" +lat_1=46.76666666666667",op=" +lat_2=45.56666666666667",cp=" +lat_1=44.06666666666667",lp=" +lat_2=42.73333333333333",up=" +lat_1=32.66666666666666",hp=" +lat_2=31.16666666666667",fp=" +lat_1=48.63333333333333",dp=" +lat_2=47.03333333333333",pp=" +lat_2=45.61666666666667",gp=" +lat_1=45.21666666666667",mp=" +lat_2=43.78333333333333",bp=" +lat_0=39.83333333333334",xp=" +lat_2=40.43333333333333",yp=" +lat_1=40.03333333333333",wp=" +lat_2=38.73333333333333",vp=" +lat_1=45.68333333333333",Sp=" +lat_2=44.41666666666666",kp=" +lat_2=42.83333333333334",Ap=" +lat_1=38.88333333333333",_p=" +lat_2=37.48333333333333",Cp=" +lat_1=37.08333333333334",Ip=" +lat_2=38.66666666666666",Nn=" +lat_0=58",Pr=" +lon_0=-98",Mr=" +lon_0=117",Dr=" +lon_0=135",Oa=" +lat_0=41.5",Fa=" +lat_0=42.5",Si=" +y_0=3000000",Xr=" +lon_0=123",Vn=" +lat_0=40",Kn=" +lat_0=54",nS=" +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188",rS=" +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725",Sl=" +x_0=914401.8289",kl=" +y_0=304800.6096",Yr=" +lon_0=111",Ec=" +k_0=0.99878641",Rm=" +lon_0=-66.43333333333334",Px=" +towgs84=61,-285,-181,0,0,0,0",Mx=" +towgs84=-133,-77,-51,0,0,0,0",Dx=" +towgs84=-679,669,-48,0,0,0,0",zi=" +lon_0=-71.5",Xi=" +lon_0=-78.5",Wi=" +lon_0=-93.5",$i=" +lat_0=41.75",Tp=" +y_0=249999.9998983998",Ep=" +y_0=999999.9999898402",Op=" +to_meter=1.0000135965",zo=" +a=6377304.063",sr=" +lat_0=36",g3=" +towgs84=-79.9,-158,-168.9,0,0,0,0",m3=" +towgs84=-50.9,-347.6,-231,0,0,0,0",aS=" +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747",Rx=" +towgs84=283,682,231,0,0,0,0",Lx=" +towgs84=-206,172,-6,0,0,0,0",Nx=" +towgs84=-92,-93,122,0,0,0,0",jx=" +to_meter=0.9143985307444408",ho="+proj=sterea",Lm=" +lat_0=21.16666666666667",Nm=" +lat_1=18.43333333333333",jm=" +lat_2=18.03333333333333",Bm=" +lat_0=17.83333333333333",Um=" +gamma=323.1301023611111",gs=" +lon_0=-79.5",ms=" +y_0=4500000",fo=" +x_0=31500000",Nf=" +x_0=500000.0001504",jf=" +b=6356514.96582849",b3=" +towgs84=674.4,15.1,405.3,0,0,0,0",iS=" +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101",Bx=" +towgs84=589,76,480,0,0,0,0",Ux=" +towgs84=-263,6,431,0,0,0,0",yr=" +lon_0=15",wr=" +axis=wsu",vr=" +lon_0=21",Sr=" +lat_0=30",Oc=" +ellps=helmert",Fc=" +a=6377299.151",Us=" +lon_0=-74.5",Fp=" +b=6356750.304921594",Pp=" +y_0=2000000.0001016",Mp=" +x_0=3500000.0001016",Dp=" +y_0=399999.99998984",Rp=" +x_0=200000.00001016",Lp=" +b=6356098.359005156",Xo=" +x_0=14500000",Wo=" +x_0=29500000",x3=" +towgs84=-117,-132,-164,0,0,0,0",Dn=" +zone=20",qi=" +lon_0=-122",b0=" +ellps=bess_nam",Gx=" +lon_0=-86.15000000000001",y3=" +towgs84=-189,-242,-91,0,0,0,0",w3=" +towgs84=-265,120,-358,0,0,0,0",sS=" +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586",X5=" +towgs84=-17.51,-108.32,-62.39,0,0,0,0",W5=" +towgs84=-10.18,-350.43,291.37,0,0,0,0",$5=" +towgs84=-190.421,8.532,238.69,0,0,0,0",po=" +lon_0=-68.5",Np=" +a=6377299.36559538",jp=" +x_0=79999.99999968",Bp=" +x_0=50000.00001504",Hn=" +lon_0=0",Zr=" +lon_0=27",Qr=" +lon_0=75",Jr=" +lon_0=81",ta=" +lon_0=93",ea=" +lon_0=99",bs=" +x_0=900000",Pc=" +x_0=13500000",Mc=" +x_0=20500000",Dc=" +x_0=22500000",v3=" +towgs84=-166,-15,204,0,0,0,0",S3=" +towgs84=-130,110,-13,0,0,0,0",q5=" +towgs84=-587.8,519.75,145.76,0,0,0,0",Hx=" +lat_2=83.66666666666667",zx=" +lat_0=85.43711833333333",V5=" +towgs84=-273.5,110.6,-357.9,0,0,0,0",ca=" +lon_0=87",Gs="+proj=laea",k3=" +towgs84=-403,684,41,0,0,0,0",$o=" +lon_0=-92.5",qo=" +y_0=6000000",er=" +zone=19",Hs=" +lat_0=29.5",zs=" +y_0=300000",Xs=" +lat_2=45.5",x0=" +k=0.999909091",y0=" +a=6377492.018",Gm=" +b=6356751.689189189",Hm=" +b=6356100.230165384",Sa=" +lon_0=90",ka=" +lat_0=90",Al=" +x_0=18500000",_l=" +x_0=19500000",Cl=" +x_0=15500000",Il=" +x_0=16500000",Tl=" +x_0=21500000",El=" +x_0=23500000",Ol=" +x_0=25500000",Fl=" +x_0=26500000",Pl=" +x_0=27500000",Ml=" +x_0=28500000",or=" +zone=18",cr=" +zone=21",K5=" +towgs84=-124.76,53,466.79,0,0,0,0",Vi=" +lon_0=-92",Pa=" +lon_0=33",Ma=" +lon_0=12",Da=" +lon_0=24",Ra=" +lat_2=77",go=" +y_0=200000",Rc=" +lon_0=-70.5",Lc=" +x_0=7500000",Nc=" +y_0=3500000",A3=" +towgs84=31,146,47,0,0,0,0",Wa=" +lat_0=45",$a=" +lat_0=26",xs=" +a=6378160",w0=" +lon_0=-109.5",v0=" +x_0=30500000",S0=" +x_0=32500000",_3=" +lon_0=-85.83333333333333",C3=" +lon_0=-118.3333333333333",I3=" +y_0=0.003048006096012192",Vo=" +lat_0=30.5",oi=" +lat_0=44",ci=" +lon_0=30",li=" +lat_0=47",ui=" +lat_1=77",T3=" +lat_0=36.16666666666666",E3=" +lat_0=4.596200416666666",O3=" +gamma=53.13010236111111",F3=" +lon_0=13.33333333333333",P3=" +lat_0=81.31722600000001",M3=" +lat_0=73.15574086111111",D3=" +lat_0=65.10127088888888",Wr=" +zone=17",Ws=" +lon_0=132",$s=" +lon_0=114",Y5=" +towgs84=-143,-90,-294,0,0,0,0",na=" +zone=22",ki=" +lat_0=41",jc=" +lat_0=46.5",Bc=" +lon_0=-118",Uc=" +y_0=400000",wu=" +x_0=17500000",vu=" +x_0=33500000",Bf=" +lon_0=-113.75",Uf=" +lon_0=-116.25",Gf=" +lon_0=-115.75",Hf=" +lon_0=-106.25",zf=" +k=0.999916667",Xf=" +k=0.999964286",Wf=" +lon_0=-108.75",Z5=" +towgs84=-73,-247,227,0,0,0,0",oS=" +towgs84=265.025,384.929,-194.046,0,0,0,0",mo=" +k=0.99998",k0=" +lat_1=40.65",A0=" +lat_1=38.35",_0=" +y_0=2500000",C0=" +y_0=6500000",Xx=" +x_0=39999.99999984",cS=" +towgs84=-61.702,284.488,472.052,0,0,0,0",lS=" +towgs84=-223.237,110.193,36.649,0,0,0,0",la=" +zone=39",ua=" +zone=32",Q5=" +towgs84=-125,53,467,0,0,0,0",J5=" +towgs84=198,881,317,0,0,0,0",tw=" +towgs84=214,804,268,0,0,0,0",ew=" +towgs84=217,823,299,0,0,0,0",Ki=" +lon_0=45",Yi=" +lat_1=43",Dl="+proj=merc",R3=" +x_0=99999.99998983997",L3=" +x_0=99999.99999960001",N3=" +x_0=2743195.592233322",j3=" +y_0=914398.5307444407",Aa=" +zone=38",_a=" +zone=28",Rl=" +lon_0=-114",Ll=" +lat_1=45.5",nw=" +towgs84=-73,46,-86,0,0,0,0",rw=" +towgs84=11,72,-101,0,0,0,0",uS=" +towgs84=287.58,177.78,-135.41,0,0,0,0",oC=" +towgs84=-162.619,-276.959,-161.764,0.067753,-2.24365,-1.15883,-1.09425",Ko=" +lon_0=-87",Yo=" +lon_0=-99",Zo=" +lon_0=102",Qo=" +lon_0=126",Jo=" +k=0.99999",tc=" +x_0=50000",ys=" +lat_2=40",$f=" +lon_0=-84.25",qf=" +x_0=11500000",Vf=" +lon_0=-72.75",Kf=" +lon_0=-101.5",Yf=" +lon_0=-94.25",Su=" +x_0=6500000",ku=" +y_0=5000000",Au=" +x_0=1700000",hS=" +towgs84=31.95,300.99,419.19,0,0,0,0",cC=" +towgs84=-189.681,18.3463,-42.7695,-0.33746,-3.09264,2.53861,0.4598",lC=" +towgs84=-119.425,-303.659,-11.0006,1.1643,0.174458,1.09626,3.65706",uC=" +towgs84=982.609,552.753,-540.873,6.68163,-31.6115,-19.8482,16.805",qa=" +zone=29",Va=" +lon_0=9",Ka=" +zone=33",Ya=" +zone=37",Za=" +no_uoff",Gc=" +lon_0=120",Hc=" +lon_0=177",I0=" +lon_0=-177",T0=" +lon_0=-158",E0=" +y_0=250000",O0=" +lon_0=-111",B3=" +x_0=2500000.0001424",U3=" +x_0=1500000.0001464",aw=" +lon_0=-71.60561777777777",iw=" +lon_0=-156.6666666666667",sw=" +lon_0=-160.1666666666667",ow=" +lat_0=0.1166666666666667",cw=" +towgs84=0,0,0,-0,-0,-0,0",lw=" +lon_0=-117.8333333333333",uw=" +lon_0=-123.1666666666667",hw=" +lon_0=-122.3333333333333",fw=" +lon_0=-119.1666666666667",dw=" +lon_0=-123.0833333333333",pw=" +lon_0=-85.84999999999999",gw=" +lon_0=-87.09999999999999",mw=" +lon_0=-86.90000000000001",bw=" +lon_0=-89.24166666666667",xw=" +lon_0=-92.63333333333334",hC=" +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074",fC=" +towgs84=8.846,-4.394,-1.122,-0.00237,-0.146528,0.130428,0.783926",dC=" +towgs84=-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7",pC=" +towgs84=-0.293,766.95,87.713,0.195704,1.69507,3.47302,-0.039338",gC=" +towgs84=221.525,152.948,176.768,-2.3847,-1.3896,-0.877,11.4741",mC=" +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773",hi=" +zone=35",yw=" +lat_0=46.95240555555556",ww=" +alpha=30.28813972222222",vw=" +lat_1=10.16666666666667",Sw=" +lat_0=10.16666666666667",kw=" +lat_0=18.83333333333333",Aw=" +lat_0=20.33333333333333",_w=" +lat_0=21.83333333333333",Cw=" +lat_0=21.66666666666667",Iw=" +lat_0=45.30916666666666",Tw=" +lat_1=49.83333333333334",Ew=" +lat_2=51.16666666666666",Ow=" +lonc=-133.6666666666667",Fw=" +alpha=323.1301023611111",Pw=" +lat_1=53.83333333333334",Mw=" +lat_2=51.83333333333334",Dw=" +lat_1=44.66666666666666",Rw=" +lat_0=44.66666666666666",Lw=" +lat_1=45.66666666666666",Nw=" +lat_0=45.91666666666666",jw=" +lat_0=45.08333333333334",Bw=" +lat_0=44.33333333333334",Uw=" +lat_0=44.08333333333334",Gw=" +lat_1=48.33333333333334",Hw=" +lat_0=48.33333333333334",zw=" +lat_0=31.73409694444445",Xw=" +lon_0=35.21208055555556",Ww=" +lat_0=44.03611111111111",$w=" +lat_0=4.599047222222222",qw=" +lat_0=40.66666666666666",bo=" +lat_1=49",xo=" +lon_0=39",Zf=" +lat_1=37.25",Qf=" +lat_1=39.75",Jf=" +lat_2=38.45",td=" +lat_1=30.75",ed=" +lon_0=-84.5",nd=" +lat_0=33.75",rd=" +x_0=4000000",ad=" +y_0=4000000",id=" +lon_0=-72.5",sd=" +x_0=5000000",Up=" +x_0=10500000",Gp=" +x_0=12500000",Hp=" +x_0=24500000",zp=" +k=0.99999375",G3=" +x_0=399999.9999984",Nl=" +lon_0=-77",jl=" +lon_0=108",Bl=" +lon_0=171",bC=" +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925",_u=" +lon_0=-171",Cu=" +lat_0=32.5",Iu=" +lon_0=-117",Tu=" +k=1.000015",Eu=" +k=1.000034",Ou=" +k=1.000031",Fu=" +k=1.000026",zm=" +ellps=evrstSS",Xm=" +a=6377301.243",xC=" +towgs84=410.721,55.049,80.746,2.5779,2.3514,0.6664,17.3311",yC=" +towgs84=72.438,345.918,79.486,1.6045,0.8823,0.5565,1.3746",ec=" +pm=ferro",nc=" +lon_0=78",rc=" +lon_0=10",ac=" +pm=paris",wC=" +towgs84=0.055,-0.541,-0.185,0.0183,-0.0003,-0.007,-0.014",vC=" +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489",SC=" +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081",kC=" +towgs84=572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378",Zi=" +zone=58",Qi=" +zone=23",Vw=" +x_0=304800.6096012192",Kw=" +y_0=152400.3048006096",Yw=" +x_0=800000.0001016001",Zw=" +x_0=399999.9998983998",Qw=" +x_0=7999999.999968001",Jw=" +x_0=5999999.999976001",t8=" +x_0=830000.0001016001",e8=" +x_0=249999.9998983998",n8=" +x_0=350000.0001016001",r8=" +to_meter=0.3047972654",a8=" +x_0=99999.99989839978",i8=" +y_0=8000000.000010163",s8=" +x_0=699999.9999898402",F0=" +lon_0=-69",P0=" +lon_0=-86",fS=" +towgs84=-3.2,-5.7,2.8,0,0,0,0",Xp=" +x_0=8500000",Wp=" +x_0=9500000",$p=" +lat_1=39.45",qp=" +lat_0=44.25",Vp=" +lat_1=41.95",Kp=" +lat_2=35.25",Yp=" +lat_2=34.65",Zp=" +lat_2=44.25",Qp=" +lat_1=47.05",Jp=" +lat_1=40.25",tg=" +k_0=1.00012",eg=" +lat_0=40.25",ws=" +zone=40",vs=" +zone=36",Ss=" +zone=51",ks=" +zone=48",As=" +zone=49",zc=" +lon_0=96",od=" +y_0=750000",cd=" +lat_0=36.5",ld=" +lon_0=-119",ud=" +lat_0=33.5",hd=" +lat_2=41.2",fd=" +k=0.999995",dd=" +lat_2=33.3",pd=" +lat_0=38.5",gd=" +lon_0=-154",md=" +lon_0=-120",Wm=" +x_0=34500000",$m=" +x_0=35500000",qm=" +x_0=36500000",Vm=" +x_0=37500000",Km=" +x_0=38500000",Ym=" +x_0=39500000",Zm=" +x_0=40500000",Qm=" +x_0=41500000",Jm=" +x_0=43500000",tb=" +x_0=45500000",o8=" +y_0=3999999.99998984",c8=" +y_0=2000000.00001016",dS=" +towgs84=164,138,-189,0,0,0,0",pS=" +towgs84=-186,230,110,0,0,0,0",gS=" +towgs84=-199,32,322,0,0,0,0",mS=" +to_meter=0.3047997101815088",bS=" +towgs84=-76,-138,67,0,0,0,0",xS=" +towgs84=-43,-163,45,0,0,0,0",yS=" +towgs84=-346,-1,224,0,0,0,0",wS=" +towgs84=210,814,289,0,0,0,0",vS=" +towgs84=-74,-130,42,0,0,0,0",qs=" +zone=15",Vs=" +zone=16",Ks=" +zone=34",Ys=" +zone=50",Zs=" +zone=52",Pu=" +lon_0=-62",Mu=" +lon_0=-84",Du=" +lon_0=-79",Ru=" +lon_0=131",Lu=" +lon_0=153",Nu=" +lon_0=165",ju=" +lon_0=-94",Bu=" +lon_0=-54",Wx=" +a=6378300.789",$x=" +b=6356566.435",l8=" +y_0=3999999.9998984",u8=" +y_0=5000000.0001016",h8=" +x_0=150000.00001464",Ul=" +lat_2=46",Gl=" +lon_0=84",Hl=" +lat_0=43",H3=" +k_0=0.999625769",SS=" +towgs84=51,391,-36,0,0,0,0",kS=" +towgs84=-83,37,124,0,0,0,0",AS=" +towgs84=-355,21,72,0,0,0,0",_S=" +towgs84=-23,259,-9,0,0,0,0",AC=" +towgs84=174.05,-25.49,112.57,-0,-0,0.554,0.2263",yo=" +zone=59",wo=" +zone=25",vo=" +zone=11",So=" +zone=12",ko=" +zone=13",Ao=" +zone=54",_o=" +zone=14",Co=" +zone=24",Io=" +zone=47",ng=" +lat_2=38.3",rg=" +lat_1=45.7",ag=" +lat_2=42.1",ig=" +x_0=165000",sg=" +lat_2=32.5",og=" +x_0=609600",cg=" +lat_1=39.2",lg=" +lat_2=47.5",ug=" +lat_1=30.7",hg=" +lat_2=29.3",fg=" +lat_0=28.5",dg=" +lat_1=41.7",pg=" +lat_1=44.4",gg=" +lat_1=27.5",mg=" +lon_0=-150",bg=" +lat_0=44.5",xg=" +k=1.000027",yg=" +k=1.000038",wg=" +k=1.000036",eb=" +lon_0=-87.5",f8=" +x_0=3999999.999984",d8=" +x_0=199999.9999992",CS=" +towgs84=16,196,93,0,0,0,0",IS=" +towgs84=-88,4,101,0,0,0,0",M0=" +lat_0=18",D0=" +lat_2=67",bd=" +lon_0=-96",xd=" +x_0=80000",yd=" +lon_0=-82",wd=" +lon_0=-74",vd=" +lon_0=147",Sd=" +lon_0=150",kd=" +x_0=40000",Ad=" +k=1.00002",qx=" +x_0=42500000",Vx=" +x_0=44500000",Kx=" +lon_0=-85.05",z3=" +ellps=mod_airy",TS=" +lat_0=0.1333333333333333",ES=" +lat_1=-60.66666666666666",OS=" +lat_2=-63.33333333333334",FS=" +lon_0=-91.91666666666667",PS=" +y_0=0.003352806705613411",ic=" +zone=30",sc=" +lon_0=3",oc=" +zone=26",cc=" +zone=53",MS=" +lat_0=31.73439361111111",DS=" +lon_0=35.20451694444445",RS=" +lon_0=7.439583333333333",LS=" +lon_0=132.1666666666667",NS=" +lon_0=134.3333333333333",jS=" +lon_0=137.1666666666667",BS=" +lon_0=139.8333333333333",US=" +lon_0=140.8333333333333",GS=" +lon_0=3.192280555555556",HS=" +lat_1=49.50000000000001",zS=" +lat_0=49.50000000000001",XS=" +alpha=53.31582047222222",WS=" +lon_0=10.33333333333333",$S=" +lon_0=16.33333333333333",_C=" +towgs84=-502.862,-247.438,312.724,0,0,0,0",CC=" +towgs84=-381.788,-57.501,-256.673,0,0,0,0",IC=" +towgs84=-43.685,-179.785,-267.721,0,0,0,0",Xc=" +zone=60",Wc=" +zone=55",Uu=" +lon_0=36",Gu=" +lon_0=42",Hu=" +lat_1=46",zu=" +lat_1=44",Xu=" +lat_0=42",Wu=" +lon_0=51",$u=" +lat_0=33",qu=" +lat_0=52",nb=" +ellps=airy",rb=" +pm=jakarta",X3=" +x_0=2743195.5",p8=" +y_0=-4354009.816",qS=" +k_0=0.9987864078000001",TC=" +towgs84=-106.226,166.366,-37.893,0,0,0,0",EC=" +towgs84=508.088,-191.042,565.223,0,0,0,0",vg=" +k=0.99996",Sg=" +a=6378135",kg=" +lon_0=-66",Ag=" +lon_0=141",_g=" +lon_0=159",Cg=" +k=0.99984",Ig=" +lat_0=-22",Yx=" +lon_0=127.5",Zx=" +x_0=6000000",Qx=" +x_0=3900000",Jx=" +y_0=1300000",t2=" +lat_0=44.75",e2=" +lat_0=37.75",n2=" +lat_0=40.55",r2=" +lon_0=-87.3",a2=" +lon_0=-86.5",OC=" +towgs84=195.671,332.517,274.607,0,0,0,0",FC=" +towgs84=-204.619,140.176,55.226,0,0,0,0",W3="+proj=somerc",VS=" +y_0=30480.06096012192",KS=" +y_0=999999.9999960001",YS=" +x_0=182880.3657607315",PC=" +towgs84=674.374,15.056,405.346,0,0,0,0",MC=" +towgs84=-133.63,-157.5,-158.62,0,0,0,0",DC=" +towgs84=-0.465,372.095,171.736,0,0,0,0",RC=" +towgs84=-56.263,16.136,-22.856,0,0,0,0",LC=" +towgs84=-241.54,-163.64,396.06,0,0,0,0",zl=" +zone=31",Xl=" +zone=10",Wl=" +zone=46",g8=" +x_0=304800.6096",m8=" +y_0=152400.3048",b8=" +alpha=337.25556",x8=" +x_0=2546731.496",y8=" +gamma=337.25556",w8=" +k_0=0.999625544",NC=" +towgs84=335.47,222.58,-230.94,0,0,0,0",jC=" +towgs84=217.037,86.959,23.956,0,0,0,0",BC=" +towgs84=-128.16,-282.42,21.93,0,0,0,0",UC=" +towgs84=103.25,-100.4,-307.19,0,0,0,0",_d=" +lon_0=31",Cd=" +lon_0=18",Id=" +lat_2=36",Td=" +lat_0=29",Ed=" +lat_0=35",Od=" +lat_0=34",Fd=" +lon_0=63",Pd=" +lat_0=37",Md=" +lat_2=65",$3=" +y_0=-4000000",q3=" +y_0=914398.5",GC=" +towgs84=-199.87,74.79,246.62,0,0,0,0",HC=" +towgs84=-11.64,-348.6,291.98,0,0,0,0",zC=" +towgs84=-254.1,-5.36,-100.29,0,0,0,0",XC=" +towgs84=-206.1,-174.7,-87.7,0,0,0,0",WC=" +towgs84=-770.1,158.4,-498.2,0,0,0,0",$C=" +towgs84=-146.21,112.63,4.05,0,0,0,0",qC=" +towgs84=-294.7,-200.1,525.5,0,0,0,0",R0=" +lat_0=4",ab=" +a=6378300",ib=" +lon_0=-63",sb=" +lon_0=162",ob=" +lat_ts=90",i2=" +y_0=600000",s2=" +x_0=350000",o2=" +y_0=900000",c2=" +lat_1=32.5",l2=" +lon_0=-147",u2=" +k=1.000043",h2=" +lat_0=48.5",f2=" +lat_0=40.9",d2=" +k=1.000028",p2=" +k=1.000025",v8=" +x_0=170251.555",ZS=" +b=6356657.142669561",QS=" +b=6356094.667915204",JS=" +b=6355862.933255573",tk=" +a=6378249.144808011",ek=" +b=6356514.966204134",VC=" +towgs84=-70.9,-151.8,-41.4,0,0,0,0",KC=" +towgs84=52.17,-71.82,-14.9,0,0,0,0",YC=" +towgs84=283.7,735.9,261.1,0,0,0,0",To=" +zone=5",Eo=" +zone=7",Tg=" +lon_0=19",Eg=" +lon_0=25",Og=" +lat_2=45",Fg=" +lon_0=57",Pg=" +lon_0=69",Mg=" +lat_2=39",Dg=" +lat_2=35",Rg=" +lon_0=28",V3=" +lon_0=-61.5",K3=" +lon_0=-64.5",Y3=" +lon_0=-90.5",Z3=" +lon_0=-94.5",Q3=" +y_0=2800000",J3=" +x_0=4321000",t6=" +y_0=3210000",e6=" +y_0=14743.5",nk=" +y_0=1999999.999992",rk=" +y_0=2999999.999988",ak=" +y_0=50000.00001504",Vu=" +zone=41",Ku=" +zone=42",Yu=" +k=0.994",Zu=" +zone=56",S8=" +lon_0=-67.875",k8=" +lon_0=-70.375",A8=" +x_0=609601.22",_8=" +b=6356889.449",C8=" +lon_0=-69.125",I8=" +lon_0=-121.75",T8=" +lon_0=-121.25",E8=" +lon_0=-119.75",O8=" +lon_0=-122.75",lc=" +zone=6",F8="+proj=krovak",ZC=" +towgs84=-637,-549,-203,0,0,0,0",QC=" +towgs84=-20.8,11.3,2.4,0,0,0,0",g2=" +lon_0=-93",m2=" +lon_0=127",b2=" +lon_0=125",x2=" +k=0.99975",y2=" +lon_0=136",w2=" +lon_0=138",v2=" +lon_0=180",S2=" +y_0=50000",k2=" +lon_0=-85",A2=" +k=1.00016",_2=" +lon_0=2.7",JC=" +towgs84=27.5,14,186.4,0,0,0,0",tI=" +towgs84=-499,-249,314,0,0,0,0",eI=" +towgs84=-467,-16,-300,0,0,0,0",nI=" +towgs84=-382,-59,-262,0,0,0,0",rI=" +towgs84=253,-132,-127,0,0,0,0",aI=" +towgs84=-963,510,-359,0,0,0,0",iI=" +towgs84=94,-948,-1262,0,0,0,0",$c=" +zone=1",Dd=" +zone=27",Rd=" +zone=57",Ld=" +pm=oslo",Nd=" +zone=43",cb=" +lon_0=23",lb=" +lon_0=48",ub=" +lon_0=54",n6=" +lat_0=49.5",r6=" +k=0.999912",a6=" +lon_0=-174",i6=" +lon_0=-168",s6=" +lon_0=-170",o6=" +lon_0=-165",c6=" +lat_2=40.5",l6=" +lon_0=-115",u6=" +lat_1=29.5",h6=" +k=1.000045",f6=" +lat_1=39.5",d6=" +lat_1=33.3",p6=" +lat_0=33.3",P8=" +lon_0=-155.5",M8=" +lon_0=-159.5",D8=" +y_0=-4480000",R8=" +lon_0=-176.5",L8=" +lon_0=-89.75",N8=" +k_0=1.000008",j8=" +lonc=-124.05",B8=" +k_0=1.000002",U8=" +lon_0=-122.5",G8=" +lon_0=-98.25",H8=" +lon_0=-112.5",z8=" +lon_0=-84.95",X8=" +lon_0=-86.95",W8=" +lon_0=-85.45",$8=" +lon_0=-87.45",q8=" +lon_0=-87.55",sI=" +towgs84=-149,128,296,0,0,0,0",oI=" +towgs84=-425,-169,81,0,0,0,0",cI=" +towgs84=-104,167,-38,0,0,0,0",lI=" +towgs84=-106,-87,188,0,0,0,0",uI=" +towgs84=-289,-124,60,0,0,0,0",hI=" +towgs84=137,248,-430,0,0,0,0",fI=" +towgs84=-13,-348,292,0,0,0,0",dI=" +towgs84=-115,118,426,0,0,0,0",pI=" +towgs84=0,-0.15,0.68,0,0,0,0",gI=" +towgs84=145,-187,103,0,0,0,0",mI=" +towgs84=-134,229,-29,0,0,0,0",bI=" +towgs84=70,207,389.5,0,0,0,0",xI=" +towgs84=-148,51,-291,0,0,0,0",yI=" +towgs84=-255,-15,71,0,0,0,0",wI=" +towgs84=725,685,536,0,0,0,0",vI=" +towgs84=72,213.7,93,0,0,0,0",SI=" +towgs84=174,359,365,0,0,0,0",kI=" +towgs84=-173,253,27,0,0,0,0",AI=" +towgs84=-203,141,53,0,0,0,0",_I=" +towgs84=186,482,151,0,0,0,0",CI=" +towgs84=162,117,154,0,0,0,0",II=" +towgs84=-73,213,296,0,0,0,0",TI=" +towgs84=-130,29,364,0,0,0,0",EI=" +towgs84=-10,375,165,0,0,0,0",OI=" +towgs84=175,-38,113,0,0,0,0",FI=" +to_meter=0.9143984146160287",$l=" +zone=2",ql=" +zone=8",Vl=" +zone=9",Kl=" +zone=4",PI=" +towgs84=30,430,368,0,0,0,0",MI=" +towgs84=185,165,42,0,0,0,0",DI=" +towgs84=-97,787,86,0,0,0,0",RI=" +towgs84=639,405,60,0,0,0,0",Lg=" +zone=44",Ng=" +zone=45",V8=" +lon_0=-58.5",K8=" +lon_0=-67.5",Y8=" +lon_0=-73.5",Z8=" +lon_0=-76.5",Q8=" +y_0=1200000",J8=" +lon_0=133.5",t4=" +x_0=8000000",e4=" +y_0=8000000",n4=" +k=0.9998335",r4=" +lon_0=-85.5",a4=" +x_0=7000000",i4=" +lat_0=43.75",s4=" +lat_0=43.25",o4=" +lat_0=45.25",c4=" +lon_0=-86.3",l4=" +lat_0=38.15",u4=" +lat_0=39.15",h4=" +lat_0=41.25",f4=" +lat_0=40.65",d4=" +lat_0=39.25",p4=" +lat_0=40.35",g4=" +lon_0=-85.8",LI=" +towgs84=9,183,236,0,0,0,0",NI=" +towgs84=-48,55,52,0,0,0,0",jI=" +towgs84=84,274,65,0,0,0,0",C2=" +lon_0=17",I2=" +lat_1=60",T2=" +k=0.9998",E2=" +lon_0=66",O2=" +lon_0=20",F2=" +lon_0=26",P2=" +lat_0=51",M2=" +lat_1=87",D2=" +lat_1=26",g6=" +lon_0=144",m6=" +lon_0=168",b6=" +lon_0=174",x6=" +lon_0=-72",y6=" +lon_0=-75",w6=" +lon_0=-60",v6=" +lon_0=-39",m4="+proj=poly",ik=" +x_0=219529.584",sk=" +a=6378306.3696",BI=" +lon_0=-61.33333333333334",UI=" +lon_0=-91.86666666666666",GI=" +lon_0=-8.131906111111112",HI=" +lon_0=-83.66666666666667",zI=" +lon_0=-108.4166666666667",XI=" +lon_0=-108.3333333333333",WI=" +lon_0=-85.40000000000001",$I=" +lon_0=-86.65000000000001",qI=" +lon_0=-86.40000000000001",VI=" +lon_0=-85.59999999999999",KI=" +lon_0=-87.15000000000001",YI=" +lon_0=-86.59999999999999",ZI=" +lon_0=-84.90000000000001",QI=" +lon_0=-85.65000000000001",JI=" +lon_0=-87.65000000000001",tT=" +lon_0=-85.34999999999999",eT=" +lon_0=-87.40000000000001",nT=" +lon_0=-87.34999999999999",rT=" +lon_0=-85.90000000000001",aT=" +lon_0=-90.62222222222222",iT=" +lon_0=-91.84999999999999",sT=" +lon_0=-91.15277777777779",oT=" +lon_0=-91.79722222222222",cT=" +lon_0=-92.45777777777778",lT=" +lon_0=-91.29444444444444",uT=" +lon_0=-90.70833333333334",hT=" +lon_0=-89.39444444444445",fT=" +lon_0=-89.42222222222223",dT=" +lon_0=-88.77500000000001",pT=" +lon_0=-87.27222222222223",gT=" +lon_0=-91.89444444444445",mT=" +lon_0=-91.28888888888889",bT=" +lon_0=-88.14166666666668",xT=" +lon_0=-88.63333333333334",yT=" +lon_0=-89.83888888888889",wT=" +lon_0=-90.16111111111111",vT=" +lon_0=-90.25555555555556",ST=" +lon_0=-90.84429651944444",kT=" +lon_0=-87.89444444444445",AT=" +lon_0=-91.31666666666666",_T=" +lon_0=-89.03333333333333",CT=" +lon_0=-89.73333333333333",IT=" +lon_0=-87.71111111111111",TT=" +lon_0=-88.41666666666667",ET=" +lon_0=-90.64166666666668",OT=" +lon_0=-87.90833333333335",FT=" +lon_0=-89.54444444444444",PT=" +lon_0=-92.22777777777777",MT=" +lon_0=-90.48888888888889",DT=" +lon_0=-90.43055555555556",RT=" +lon_0=-89.07222222222222",LT=" +lon_0=-91.06666666666666",NT=" +lon_0=-89.90000000000001",jT=" +lon_0=-91.11666666666666",BT=" +lon_0=-88.60555555555555",UT=" +lon_0=-90.48333333333333",GT=" +lon_0=-91.36666666666666",HT=" +lon_0=-90.78333333333333",zT=" +lon_0=-89.48888888888889",XT=" +lon_0=-88.54166666666667",WT=" +lon_0=-91.78333333333333",$T=" +lon_0=-88.06388888888888",qT=" +lon_0=-88.22499999999999",VT=" +lon_0=-88.81666666666666",KT=" +y_0=0.004876809753619507",YT=" +y_0=0.008534417068834137",ZT=" +y_0=0.003962407924815849",QT=" +y_0=0.005791211582423164",JT=" +lon_0=-55.68333333333333",tE=" +to_meter=0.201166195164",eE=" +lat_0=4.666666666666667",nE=" +lat_0=6.666666666666667",rE=" +lon_0=6.166666666666667",aE=" +lat_0=10.44166666666667",iE=" +lat_0=22.31213333333334",sE=" +lon_0=114.1785555555556",oE=" +lon_0=51.21666666666667",cE=" +lon_0=11.30827777777778",lE=" +lon_0=13.55827777777778",uE=" +lon_0=15.80827777777778",hE=" +lon_0=18.05827777777778",fE=" +lon_0=20.30827777777778",dE=" +lon_0=22.55827777777778",pE=" +lat_1=27.41666666666667",gE=" +lat_2=34.91666666666666",mE=" +lat_0=31.16666666666667",bE=" +lat_1=59.33333333333334",xE=" +lat_0=57.51755393055556",yE=" +lon_0=4.359215833333333",wE=" +lat_1=61.66666666666666",vE=" +lat_0=29.02626833333333",SE=" +lat_1=48.66666666666666",kE=" +lat_2=53.66666666666666",AE=" +lon_0=127.0028902777778",_E=" +lon_0=89.84999999999999",CE=" +lon_0=91.56666666666666",IE=" +lon_0=24.83333333333333",TE=" +lat_2=63.66666666666666",EE=" +lat_0=65.35103930555555",OE=" +lat_1=63.66666666666666",FE=" +lat_2=60.33333333333334",PE=" +lat_0=62.01530688888889",ME=" +lat_1=45.78333333333333",DE=" +lat_0=45.78333333333333",RE=" +lat_0=42.66666666666666",LE=" +lat_0=43.36666666666667",NE=" +lat_0=45.70611111111111",jE=" +lat_0=45.13333333333333",BE=" +lat_1=46.66964837722222",UE=" +lat_0=46.66964837722222",GE=" +lat_0=43.48138888888889",HE=" +lat_1=45.89871486583333",zE=" +lat_0=45.89871486583333",XE=" +lat_0=42.71944444444445",WE=" +lat_1=44.97785689861112",$E=" +lat_0=44.97785689861112",qE=" +lat_1=43.46254664583333",VE=" +lat_0=43.46254664583333",KE=" +lon_0=-90.9388888888889",YE=" +lat_0=41.47222222222222",ZE=" +lat_0=45.88333333333333",QE=" +lat_0=44.40833333333333",JE=" +lat_1=44.87228112638889",tO=" +lat_0=44.87228112638889",eO=" +lat_0=45.43888888888888",nO=" +lat_0=44.00555555555555",rO=" +lat_0=41.41111111111111",aO=" +lat_1=42.63756227694444",iO=" +lat_0=42.63756227694444",sO=" +lat_1=43.80700011777778",oO=" +lat_0=43.80700011777778",cO=" +lat_0=42.53888888888888",lO=" +lat_0=45.43333333333333",uO=" +lat_0=44.25333512777778",hO=" +lat_0=42.21666666666667",fO=" +lat_0=43.26666666666667",dO=" +lat_0=43.45111111111111",pO=" +lat_1=45.15423710527778",gO=" +lat_0=45.15423710527778",mO=" +lat_0=44.84444444444445",bO=" +lat_1=44.90090442361111",xO=" +lat_0=44.90090442361111",yO=" +lat_0=44.69166666666666",wO=" +lat_0=44.71666666666667",vO=" +lat_1=44.00007392861111",SO=" +lat_0=44.00007392861111",kO=" +lat_0=44.39722222222222",AO=" +lat_1=45.70422377027778",_O=" +lat_0=45.70422377027778",CO=" +lat_1=44.63614887194444",IO=" +lat_0=44.63614887194444",TO=" +lat_0=44.66111111111111",EO=" +lat_1=44.41682397527777",OO=" +lat_0=44.41682397527777",FO=" +lat_0=44.55555555555555",PO=" +lat_0=41.94444444444444",MO=" +lat_0=43.91944444444444",DO=" +lat_0=42.81944444444445",RO=" +lat_1=45.90009913138888",LO=" +lat_0=45.90009913138888",NO=" +lat_1=45.17782208583333",jO=" +lat_0=45.17782208583333",BO=" +lat_0=43.16111111111111",UO=" +lat_1=43.57503293972223",GO=" +lat_0=43.57503293972223",HO=" +lat_1=46.07784409055556",zO=" +lat_0=46.07784409055556",XO=" +lat_1=42.66946209694444",WO=" +lat_0=42.66946209694444",$O=" +lat_1=45.96121983333334",qO=" +lat_0=45.96121983333334",VO=" +lat_0=42.91805555555555",KO=" +lat_0=42.56944444444445",YO=" +lat_0=43.42027777777778",ZO=" +lat_1=44.11394404583334",QO=" +lat_0=44.11394404583334",JO=" +lat_1=44.36259546944444",tF=" +lat_0=44.36259546944444",eF=" +lat_1=44.10000000000001",nF=" +lat_0=44.10000000000001",rF=" +lat_1=42.16500000000001",aF=" +lat_0=42.16500000000001",iF=" +lat_0=52.15616055555555",sF=" +lat_2=48.73333333333333",Qu=" +zone=3",b4=" +lat_0=53.5",x4=" +k=0.999923",y4=" +x_0=850000",w4=" +x_0=830000",v4=" +lon_0=16.5",S4=" +x_0=520000",k4=" +lat_2=31.5",A4=" +lon_0=10.5",_4=" +lat_1=44.5",C4=" +lon_0=-153",I4=" +lon_0=-135",T4=" +x_0=750000",E4=" +lat_0=43.5",O4=" +lon_0=-142",F4=" +lon_0=-146",P4=" +lon_0=-162",M4=" +lon_0=-166",D4=" +lon_0=-176",R4=" +lat_2=39.5",L4=" +lon_0=-129",N4=" +k_0=1.0002",j4=" +k=1.000023",B4=" +lon_0=-121",U4=" +k=1.000175",G4=" +lat_0=45.5",H4=" +k=1.000155",z4=" +lat_2=37.5",X4=" +lat_1=48.5",W4=" +k=1.000029",$4=" +lat_0=39.6",q4=" +k=1.000013",V4=" +k=1.000022",K4=" +lat_0=40.7",Y4=" +lat_0=39.3",Z4=" +lat_0=37.8",Q4=" +lat_0=38.9",J4=" +lon_0=-5.4",ok=" +y_0=626907.39",ck=" +b=6356571.996",lk=" +a=6377295.664",oF=" +lon_0=5.38763888888889",cF=" +y_0=-4600000.00001208",lF=" +y_0=1889763.779527559",uF=" +y_0=99999.99999960001",hF=" +x_0=120091.4401828804",S6=" +lon_0=72",k6=" +lat_0=50",A6=" +lat_1=50",_6=" +lat_1=35",C6=" +lon_0=22",I6=" +lat_1=34",T6=" +lonc=115",E6=" +lat_0=-9",O6=" +lat_0=23",F6=" +lat_1=85",P6=" +lat_2=69",M6=" +lat_1=69",D6=" +lat_2=61",R6=" +lon_0=34",uk=" +lon_0=140.25",hk=" +lon_0=142.25",fk=" +lon_0=144.25",dk=" +x_0=47500000",pk=" +y_0=-3000000",fF=" +pm=2.337208333333333",dF=" +x_0=7000000.00000248",R2=" +lon_0=6",L2=" +k=0.997",t7=" +lon_0=106",e7=" +lon_0=154",n7=" +lon_0=156",r7=" +lat_2=-36",a7=" +lon_0=119",i7=" +lon_0=121",s7=" +lon_0=166",o7=" +a=6371228",c7=" +b=6371228",l7=" +a=6378273",u7=" +lat_0=-44",h7=" +pm=lisbon",f7=" +lon_0=-57",d7=" +lon_0=-56",p7=" +k=1.00007",g7=" +lonc=-123",m7=" +alpha=295",b7=" +gamma=295",x7=" +k=1.00011",y7=" +k=1.00005",w7=" +k=1.00013",v7=" +x_0=30000",S7=" +k=1.00001",k7=" +k=1.00003",pF=" +y_0=130000.00001472",gF=" +x_0=119999.99999952",mF=" +y_0=-2999999.999988",bF=" +x_0=-299999.9999988",xF=" +lat_1=43.0695160375",yF=" +lat_0=43.0695160375",wF=" +lat_1=43.3223129275",vF=" +lat_0=43.3223129275",gk=" +k=1.0000067",mk=" +a=6378298.3",bk=" +lon_0=-66.5",xk=" +lon_0=129.5",yk=" +lon_0=138.5",wk=" +x_0=2300000",vk=" +x_0=3300000",Sk=" +x_0=4300000",kk=" +y_0=7500000",Ak=" +lonc=102.25",_k=" +y_0=1166200",Ck=" +x_0=3000000",Ik=" +lat_1=46.25",Tk=" +ellps=WGS66",Ek=" +ellps=GRS67",Ok=" +lat_1=34.65",SF=" +y_0=59999.99999976",kF=" +y_0=30000.00001512",AF=" +x_0=59999.99999976",_F=" +x_0=30000.00001512",CF=" +lat_1=43.200055605",IF=" +lat_0=43.200055605",TF=" +y_0=65379.0134283",EF=" +alpha=323.0257905",OF=" +alpha=53.31580995",FF=" +x_0=10000.0000152";var tM=[2e3,u+y+Pu+mu+ye+l+ie+r+t,1,u+y+Pu+mu+ye+l+ie+yI+r+t,1,u+y+Pu+mu+ye+l+ie+wI+r+t,1,u+y+Pu+mu+ye+l+ie+vI+r+t,1,u+y+Pu+mu+ye+l+ie+SI+r+t,1,u+y+Pu+mu+ye+l+ie+LI+r+t,1,u+y+Pu+mu+ye+l+ie+sI+r+t,1,u+y+Pu+mu+ye+l+ie+OC+r+t,2,u+y+V8+dt+De+l+ge+r+t,1,u+y+V3+dt+De+l+ge+r+t,1,u+y+K3+dt+De+l+ge+r+t,1,u+y+K8+dt+De+l+ge+r+t,1,u+y+Rc+dt+De+l+ge+r+t,1,u+y+Y8+dt+De+l+ge+r+t,1,u+y+Z8+dt+De+l+ge+r+t,1,u+y+gs+dt+De+l+ge+r+t,1,u+y+Y8+dt+De+l+ge+r+t,1,u+y+Z8+dt+De+l+ge+r+t,1,u+y+gs+dt+De+l+ge+r+t,1,u+y+Xa+dt+De+l+ge+r+t,1,u+y+_n+dt+De+l+ge+r+t,1,u+y+Mu+dt+De+l+ge+r+t,1,u+y+Ko+dt+De+l+ge+r+t,1,u+y+pn+dt+De+l+ge+r+t,1,u+y+g2+dt+De+l+ge+r+t,1,u+y+bd+dt+De+l+ge+r+t,1,I+qs+ge+r+t,1,I+Vs+ge+r+t,1,I+Wr+ge+r+t,1,I+or+ge+r+t,1,I+Wr+ge+r+t,1,I+or+ge+r+t,1,I+er+ge+r+t,1,I+Dn+ge+r+t,1,I+cr+ge+r+t,4,u+MS+DS+gk+ik+ok+c+NI+r+t,1,I+ic+ie+Q5+r+t,1,I+ic+ie+K5+r+t,1,I+qa+ie+Q5+r+t,1,I+qa+ie+K5+r+t,1,u+y+ir+" +k=1"+Al+l+H+X5+r+t,1,u+y+Yr+" +k=1"+_l+l+H+X5+r+t,1,u+y+yr+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+C2+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+Tg+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+vr+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+cb+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+Eg+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+Zr+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+" +lon_0=29 +k=1"+bt+l+wr+de+m+r+t,1,u+y+_d+" +k=1"+bt+l+wr+de+m+r+t,1,u+y+Pa+" +k=1"+bt+l+wr+de+m+r+t,1,W3+yw+RS+" +k_0=1 +x_0=2600000"+Q8+Xt+PC+r+t,1,Gr+" +lat_0=27.51882880555555 +lonc=52.60353916666667 +alpha=0.5716611944444444 +k=0.999895934 +x_0=658377.437 +y_0=3044969.194 +gamma=0.5716611944444444"+ct+MC+r+t,1,I+Aa+ct+x3+r+t,1,I+la+ct+x3+r+t,1,I+ws+ct+x3+r+t,1,I+Vu+ct+x3+r+t,1,C+" +lat_1=40"+Vn+Hn+" +k_0=0.9988085293"+Bt+i2+mk+ZS+" +pm=madrid"+r+t,3,F8+n6+" +lon_0=42.5"+ww+dt+bt+l+Xt+Bx+ec+r+t,1,br+" +lat_0=11.25217861111111 +lon_0=-60.68600888888889 +x_0=37718.66159325 +y_0=36209.91512952"+xu+yu+tE+t,1,I+Dn+ct+DC+r+t,1,u+y+Va+dt+ee+l+ct+so+r+t,1,u+y+" +lon_0=11"+dt+ee+l+ct+so+r+t,1,u+y+" +lon_0=13"+dt+ee+l+ct+so+r+t,1,u+y+yr+dt+ee+l+ct+so+r+t,1,u+y+C2+dt+ee+l+ct+so+r+t,1,u+y+Tg+dt+ee+l+ct+so+r+t,1,u+y+vr+dt+ee+l+ct+so+r+t,1,u+y+cb+dt+ee+l+ct+so+r+t,1,u+y+Eg+dt+ee+l+ct+so+r+t,1,I+ua+ct+so+r+t,1,I+Ka+ct+so+r+t,1,I+Ks+ct+so+r+t,1,I+hi+ct+so+r+t,1,u+Yt+F0+" +k=1"+Kr+l+ct+r+t,1,u+Yt+F0+" +k=1"+Kr+l+ct+JC+r+t,1,u+Yt+F0+" +k=1"+Kr+l+ct+CS+r+t,1,I+er+st+ct+CS+r+t,3,u+y+Ma+pe+X+l+ct+so+r+t,1,u+y+" +lon_0=11"+pe+X+l+Ue+Xe+Ux+r+t,1,I+Aa+de+m+r+t,1,I+la+de+m+r+t,3,u+y+t7+" +k=1"+X+l+H+X5+r+t,1,u+y+t7+pe+X+l+Ct+re+r+t,1,I+_a+ct+kI+r+t,1,u+fn+xr+" +k=1"+ee+Le+Xt+r+t,1,u+fn+m2+" +k=1"+ee+Le+Xt+r+t,1,u+fn+b2+" +k=1"+ee+Le+Xt+r+t,1,br+" +lat_0=25.38236111111111 +lon_0=50.76138888888889"+hn+zr+Oc+r+t,1,u+y+Da+pe+X+l+c+GC+r+t,1,C+vw+Sw+aw+" +k_0=1"+bt+" +y_0=-52684.972"+ct+r+t,1,C+vw+Sw+aw+" +k_0=1"+ee+" +y_0=147315.028"+ct+r+t,1,C+vw+Sw+aw+" +k_0=1"+X+" +y_0=447315.028"+ct+r+t,1,C+vw+Sw+aw+" +k_0=1 +x_0=-17044 +y_0=-23139.97"+ct+r+t,1,u+" +lat_0=-36.87972222222222 +lon_0=174.7641666666667"+dt+ye+qn+c+m+r+t,1,u+" +lat_0=-37.76111111111111 +lon_0=176.4661111111111 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-38.62444444444444 +lon_0=177.8855555555556 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-39.65083333333333 +lon_0=176.6736111111111 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-39.13555555555556 +lon_0=174.2277777777778 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-39.51222222222222 +lon_0=175.64 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-40.24194444444444 +lon_0=175.4880555555555 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-40.92527777777777 +lon_0=175.6472222222222 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-41.3011111111111 +lon_0=174.7763888888889 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-40.71472222222223 +lon_0=172.6719444444444 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-41.27444444444444 +lon_0=173.2991666666667 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-41.28972222222222 +lon_0=172.1088888888889 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-41.81055555555555 +lon_0=171.5811111111111 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-42.33361111111111 +lon_0=171.5497222222222 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-42.68888888888888 +lon_0=173.01 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-41.54444444444444 +lon_0=173.8019444444444 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-42.88611111111111 +lon_0=170.9797222222222 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-43.11 +lon_0=170.2608333333333 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-43.97777777777778 +lon_0=168.6061111111111 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-43.59055555555556 +lon_0=172.7269444444445 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-43.74861111111111 +lon_0=171.3605555555555 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-44.40194444444445 +lon_0=171.0572222222222 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-44.735 +lon_0=169.4675 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-45.13277777777778 +lon_0=168.3986111111111 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-45.56361111111111 +lon_0=167.7386111111111 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-45.81611111111111 +lon_0=170.6283333333333 +k=1"+ye+qn+c+m+r+t,1,u+" +lat_0=-45.86138888888889 +lon_0=170.2825"+vg+ye+qn+c+m+r+t,1,u+" +lat_0=-46.6 +lon_0=168.3427777777778 +k=1"+ye+qn+c+m+r+t,1,I+Zi+st+c+m+r+t,1,I+yo+st+c+m+r+t,1,I+Xc+st+c+m+r+t,1,u+eE+" +lon_0=-1"+x2+" +x_0=274319.7391633579"+l+ab+Gm+gS+mS+t,1,u+y+" +lon_0=-1"+pe+X+l+ab+Gm+gS+r+t,1,C+I2+Ul+oi+po+bt+l+ge+r+t,16,C+bo+" +lat_2=44"+jc+sc+sa+" +y_0=6600000"+c+m+r+t,3,u+b4+" +lon_0=-8 +k=0.99982"+Bt+od+c+m+r+t,1,I+qa+c+m+r+t,1,u+nE+" +lon_0=-12 +k=1 +x_0=152399.8550907544"+l+ab+Gm+mS+t,1,u+nE+" +lon_0=-12 +k=1 +x_0=243839.7681452071 +y_0=182879.8261089053"+ab+Gm+mS+t,1,I+_a+ie+IS+r+t,1,I+qa+ie+IS+r+t,1,Gs+Wa+Jn+bt+l+" +a=6370997 +b=6370997"+r+t,1,u+y+" +lon_0=-5"+pe+X+l+ie+Q5+r+t,1,u+y+" +lon_0=-5"+pe+X+l+ie+K5+r+t,4,u+" +lat_0=49.83333333333334"+rE+" +k=1"+xd+zr+ct+cC+r+t,3,ho+" +lat_0=53.00194444444445 +lon_0=21.50277777777778"+T2+" +x_0=4603000 +y_0=5806000"+H+qr+r+t,1,ho+" +lat_0=53.58333333333334 +lon_0=17.00833333333333"+T2+" +x_0=3501000 +y_0=5999000"+H+qr+r+t,1,ho+" +lat_0=51.67083333333333 +lon_0=16.67222222222222"+T2+" +x_0=3703000 +y_0=5627000"+H+qr+r+t,1,u+y+" +lon_0=18.95833333333333 +k=0.999983 +x_0=237000 +y_0=-4700000"+H+qr+r+t,1,u+y+yr+x4+si+l+c+m+r+t,1,u+y+Cd+x4+Su+l+c+m+r+t,1,u+y+vr+x4+Lc+l+c+m+r+t,1,u+y+Da+x4+Xp+l+c+m+r+t,1,u+y+Tg+" +k=0.9993"+X+" +y_0=-5300000"+c+m+r+t,8,I+wo+ct+oI+r+t,1,I+oc+ct+cI+r+t,1,I+oc+ct+AI+r+t,3,u+y+" +lon_0=173"+pe+" +x_0=1600000"+un+c+m+r+t,2,I+$l+st+c+m+r+t,1,u+y+" +lon_0=9.5"+Sn+ee+l+c+m+r+t,1,u+y+Ma+Sn+X+l+c+m+r+t,1,u+y+yr+" +k=1"+bs+l+c+m+r+t,2,ho+jc+bk+r6+ve+qn+Sg+Fp+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,I+Dn+c+m+r+t,1,C+" +lat_1=35.25 +lat_2=36.41666666666666 +lat_0=34.66666666666666"+P0+ke+VS+Rt+D+t,1,C+ls+Vh+Or+$f+X+l+c+m+r+t,1,u+y+Zr+" +k=1"+Wp+l+ct+$n+r+t,1,u+y+ci+" +k=1"+Up+l+ct+$n+r+t,1,u+y+Pa+" +k=1"+qf+l+ct+$n+r+t,1,u+y+Uu+" +k=1"+Gp+l+ct+$n+r+t,1,u+y+xo+" +k=1"+Pc+l+ct+$n+r+t,1,u+y+Gu+" +k=1"+Xo+l+ct+$n+r+t,1,u+y+Ki+" +k=1"+Cl+l+ct+$n+r+t,1,u+y+ci+pe+X+l+c+m+r+t,2,I+ua+Ue+Xe+VC+r+t,1,I+na+ct+dS+r+t,1,I+Qi+ct+dS+r+t,2,I+er+Sg+Fp+r+t,1,I+Dn+Sg+Fp+r+t,2,u+We+kh+dt+oa+l+c+m+se+t,1,u+We+Ah+dt+oa+l+c+m+se+t,1,u+We+Bf+Un+oa+l+c+m+se+t,1,C+Kh+ys+Ir+qi+aa+pr+c+m+D+t,1,C+Yh+Zh+Br+qi+aa+pr+c+m+D+t,1,C+Ri+Qh+cd+ze+aa+pr+c+m+D+t,1,C+Zf+Id+Jh+ld+aa+pr+c+m+D+t,1,C+tf+ef+ud+Bc+aa+pr+c+m+D+t,1,C+nf+rf+af+Uf+aa+pr+c+m+D+t,1,C+I1+T1+Ir+Zn+Ic+xl+c+m+D+t,1,C+Qf+Jf+ou+Zn+Ic+xl+c+m+D+t,1,C+Ri+sf+Je+Zn+Ic+xl+c+m+D+t,1,C+of+hd+cf+Vf+Vw+Kw+c+m+D+t,1,u+fn+_h+fd+gr+l+c+m+D+t,1,u+Li+_n+An+gr+l+c+m+D+t,1,u+Li+yd+An+gr+l+c+m+D+t,1,C+td+lf+Td+ed+Bt+l+c+m+D+t,1,u+Sr+Ch+dt+gr+l+c+m+D+t,1,u+Sr+Ih+dt+yl+l+c+m+D+t,1,u+wn+Th+ji+gr+l+c+m+D+t,1,u+wn+Rl+ji+mr+l+c+m+D+t,1,u+wn+Gf+Un+Yw+l+c+m+D+t,3,C+ls+Vh+Or+$f+mr+l+c+m+D+t,1,C+E1+O1+Ur+Ui+mr+pr+c+m+D+t,1,C+$p+ng+Br+Nl+Zw+l+c+m+D+t,1,C+F1+uf+ki+zi+gr+od+c+m+D+t,1,C+P1+M1+ki+Rc+mr+l+c+m+D+t,1,C+D1+R1+L1+Ko+Qw+l+c+m+se+t,1,C+rg+N1+j1+js+Jw+l+c+m+se+t,1,C+ml+ag+Oa+js+f8+l+c+m+se+t,1,u+Hs+Eh+Sn+Ni+l+c+m+D+t,1,u+Hs+c0+Sn+yl+l+c+m+D+t,1,C+bo+Og+qp+w0+vl+l+c+m+se+t,1,u+We+Oh+x0+ig+l+c+m+D+t,1,u+We+Hf+dt+mr+l+c+m+D+t,1,u+We+Fh+zf+t8+l+c+m+D+t,1,u+us+Us+dt+En+l+c+m+D+t,1,u+Vn+Ph+Ze+e8+l+c+m+D+t,1,u+Vn+Mh+Ze+n8+l+c+m+D+t,1,C+hf+ff+hs+wd+Ni+l+c+m+D+t,1,C+B1+U1+nd+Du+ke+l+c+m+D+t,1,C+Bs+G1+li+Gi+vl+l+c+m+se+t,1,C+H1+z1+Ac+Gi+vl+l+c+m+se+t,1,C+df+X1+Ed+Pr+Bt+l+c+m+D+t,1,C+W1+$1+pf+Pr+Bt+l+c+m+D+t,1,C+Hu+cu+ma+ze+B3+l+c+m+se+t,1,C+zu+lu+wn+ze+U3+l+c+m+se+t,1,C+Vp+q1+hs+Hi+Bt+l+c+m+D+t,1,C+gf+mf+Ir+Hi+Bt+l+c+m+D+t,1,C+V1+sg+bf+_n+og+l+c+m+se+t,1,C+K1+Kp+fs+P0+Bt+l+c+m+D+t,1,C+Y1+Yp+Od+Kf+gr+wl+c+m+D+t,1,C+Z1+Q1+xf+Hr+Bt+Pp+c+m+D+t,1,C+J1+tp+uu+Fi+yl+Si+c+m+D+t,1,C+ep+np+yf+Yo+Bt+l8+c+m+D+t,1,C+l0+u0+hu+Hr+Ni+u8+c+m+D+t,1,C+ni+h0+bl+In+Nf+KS+c+m+se+t,1,C+k0+f0+Ua+In+Nf+nk+c+m+se+t,1,C+A0+d0+Je+In+Nf+rk+c+m+se+t,1,C+cg+rp+Br+Xi+Mp+Pp+c+m+D+t,1,C+ls+wf+Ur+Xi+Mp+wl+c+m+D+t,1,C+Bs+lg+li+Dh+mr+l+c+m+D+t,1,C+ap+ip+vf+ze+mr+l+c+m+D+t,1,C+sp+op+Sf+pn+Bt+l+c+m+D+t,1,C+Ll+Zp+ba+pn+Bt+l+c+m+D+t,1,C+cp+lp+Xu+pn+Bt+l+c+m+D+t,1,ho+" +lat_0=47.25"+ib+r6+sa+Uc+Sg+Fp+r+t,4,u+y+V3+dt+wa+l+Sg+Fp+r+t,1,u+y+K3+dt+si+l+Sg+Fp+r+t,13,u+y+" +lon_0=109"+pe+X+un+Xt+_1+r+t,1,u+y+" +lon_0=116"+pe+X+un+vt+r+t,1,u+y+Ws+pe+X+un+vt+r+t,1,u+y+R2+pe+X+l+vt+r+t,1,I+Ka+ie+r+t,1,I+Ka+ie+r+t,1,br+aE+BI+" +x_0=86501.46392052001"+TF+xu+yu+cS+r8+t,1,I+er+st+ct+iu+r+t,1,I+Dn+st+ct+iu+r+t,1,C+" +lat_1=9 +lat_2=3 +lat_0=6"+kg+Tn+Fe+ct+Ls+r+t,1,C+" +lat_1=17 +lat_2=33 +lat_0=25.08951"+lb+bt+l+ct+C1+r+t,1,u+y+Zr+" +k=1"+X+l+ct+$n+r+t,1,u+y+ci+" +k=1"+X+l+ct+$n+r+t,1,u+y+Pa+" +k=1"+X+l+ct+$n+r+t,1,u+y+Uu+" +k=1"+X+l+ct+$n+r+t,1,u+y+xo+" +k=1"+X+l+ct+$n+r+t,1,u+y+Gu+" +k=1"+X+l+ct+$n+r+t,1,u+y+Ki+" +k=1"+X+l+ct+$n+r+t,1,u+iE+sE+" +k=1 +x_0=836694.05 +y_0=819069.8"+ct+oC+r+t,1,u+y+Qr+" +k=1"+Pc+l+Te+Ie+r+t,1,u+y+Jr+" +k=1"+Xo+l+Te+Ie+r+t,1,u+y+ca+" +k=1"+Cl+l+Te+Ie+r+t,1,u+y+ta+" +k=1"+Il+l+Te+Ie+r+t,1,u+y+ea+" +k=1"+wu+l+Te+Ie+r+t,1,u+y+ir+" +k=1"+Al+l+Te+Ie+r+t,1,u+y+Yr+" +k=1"+_l+l+Te+Ie+r+t,1,u+y+Mr+" +k=1"+Mc+l+Te+Ie+r+t,1,u+y+Xr+" +k=1"+Tl+l+Te+Ie+r+t,1,u+y+xr+" +k=1"+Dc+l+Te+Ie+r+t,1,u+y+Dr+" +k=1"+El+l+Te+Ie+r+t,1,u+y+Qr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Jr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ca+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ta+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ea+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ir+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Yr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Mr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Xr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+xr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Dr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Qr+" +k=1"+Ol+l+Te+Ie+r+t,1,u+y+nc+" +k=1"+Fl+l+Te+Ie+r+t,1,u+y+Jr+" +k=1"+Pl+l+Te+Ie+r+t,1,u+y+Gl+" +k=1"+Ml+l+Te+Ie+r+t,1,u+y+ca+" +k=1"+Wo+l+Te+Ie+r+t,1,u+y+Sa+" +k=1"+v0+l+Te+Ie+r+t,1,u+y+ta+" +k=1"+fo+l+Te+Ie+r+t,1,u+y+zc+" +k=1"+S0+l+Te+Ie+r+t,1,u+y+ea+" +k=1"+vu+l+Te+Ie+r+t,1,u+y+Zo+" +k=1"+Wm+l+Te+Ie+r+t,1,u+y+ir+" +k=1"+$m+l+Te+Ie+r+t,1,u+y+jl+" +k=1"+qm+l+Te+Ie+r+t,1,u+y+Yr+" +k=1"+Vm+l+Te+Ie+r+t,1,u+y+$s+" +k=1"+Km+l+Te+Ie+r+t,1,u+y+Mr+" +k=1"+Ym+l+Te+Ie+r+t,1,u+y+Gc+" +k=1"+Zm+l+Te+Ie+r+t,1,u+y+Xr+" +k=1"+Qm+l+Te+Ie+r+t,1,u+y+Qo+" +k=1"+qx+l+Te+Ie+r+t,1,u+y+xr+" +k=1"+Jm+l+Te+Ie+r+t,1,u+y+Ws+" +k=1"+Vx+l+Te+Ie+r+t,1,u+y+Dr+" +k=1"+tb+l+Te+Ie+r+t,1,u+y+Qr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+nc+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Jr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Gl+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ca+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Sa+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ta+" +k=1"+X+l+Te+Ie+r+t,1,u+y+zc+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ea+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Zo+" +k=1"+X+l+Te+Ie+r+t,1,u+y+ir+" +k=1"+X+l+Te+Ie+r+t,1,u+y+jl+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Yr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+$s+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Mr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Gc+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Xr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Qo+" +k=1"+X+l+Te+Ie+r+t,1,u+y+xr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Ws+" +k=1"+X+l+Te+Ie+r+t,1,u+y+Dr+" +k=1"+X+l+Te+Ie+r+t,1,u+y+vr+" +k=1"+Ge+l+ct+Om+r+t,1,u+y+Da+" +k=1"+Kr+l+ct+Om+r+t,1,u+y+Zr+" +k=1"+Qn+l+ct+Om+r+t,1,u+y+ci+" +k=1"+wa+l+ct+Om+r+t,1,u+y+Ki+" +k=1"+Xp+l+H+bS+r+t,1,u+y+Wu+" +k=1"+Wp+l+H+bS+r+t,1,u+y+Va+" +k=1"+Qn+l+H+co+r+t,1,u+y+Ma+" +k=1"+wa+l+H+co+r+t,1,u+y+yr+" +k=1"+si+l+H+co+r+t,2,u+y+Qr+" +k=1"+Ol+l+H+Ce+r+t,1,u+y+nc+" +k=1"+Fl+l+H+Ce+r+t,1,u+y+Jr+" +k=1"+Pl+l+H+Ce+r+t,1,u+y+Gl+" +k=1"+Ml+l+H+Ce+r+t,1,u+y+ca+" +k=1"+Wo+l+H+Ce+r+t,1,u+y+Sa+" +k=1"+v0+l+H+Ce+r+t,1,u+y+ta+" +k=1"+fo+l+H+Ce+r+t,1,u+y+zc+" +k=1"+S0+l+H+Ce+r+t,1,u+y+ea+" +k=1"+vu+l+H+Ce+r+t,1,u+y+Zo+" +k=1"+Wm+l+H+Ce+r+t,1,u+y+ir+" +k=1"+$m+l+H+Ce+r+t,1,u+y+jl+" +k=1"+qm+l+H+Ce+r+t,1,u+y+Yr+" +k=1"+Vm+l+H+Ce+r+t,1,u+y+$s+" +k=1"+Km+l+H+Ce+r+t,1,u+y+Mr+" +k=1"+Ym+l+H+Ce+r+t,1,u+y+Gc+" +k=1"+Zm+l+H+Ce+r+t,1,u+y+Xr+" +k=1"+Qm+l+H+Ce+r+t,1,u+y+Qo+" +k=1"+qx+l+H+Ce+r+t,1,u+y+xr+" +k=1"+Jm+l+H+Ce+r+t,1,u+y+Ws+" +k=1"+Vx+l+H+Ce+r+t,1,u+y+Dr+" +k=1"+tb+l+H+Ce+r+t,1,u+y+Qr+" +k=1"+X+l+H+Ce+r+t,1,u+y+nc+" +k=1"+X+l+H+Ce+r+t,1,u+y+Jr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Gl+" +k=1"+X+l+H+Ce+r+t,1,u+y+ca+" +k=1"+X+l+H+Ce+r+t,1,u+y+Sa+" +k=1"+X+l+H+Ce+r+t,1,u+y+ta+" +k=1"+X+l+H+Ce+r+t,1,u+y+zc+" +k=1"+X+l+H+Ce+r+t,1,u+y+ea+" +k=1"+X+l+H+Ce+r+t,1,u+y+Zo+" +k=1"+X+l+H+Ce+r+t,1,u+y+ir+" +k=1"+X+l+H+Ce+r+t,1,u+y+jl+" +k=1"+X+l+H+Ce+r+t,1,u+y+Yr+" +k=1"+X+l+H+Ce+r+t,1,u+y+$s+" +k=1"+X+l+H+Ce+r+t,1,u+y+Mr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Gc+" +k=1"+X+l+H+Ce+r+t,1,u+y+Xr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Qo+" +k=1"+X+l+H+Ce+r+t,1,u+y+xr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Ws+" +k=1"+X+l+H+Ce+r+t,1,u+y+Dr+" +k=1"+X+l+H+Ce+r+t,1,u+$u+xk+dt+bt+l+c+m+r+t,1,u+$u+Ru+dt+bt+l+c+m+r+t,1,u+sr+LS+dt+bt+l+c+m+r+t,1,u+$u+J8+dt+bt+l+c+m+r+t,1,u+sr+NS+dt+bt+l+c+m+r+t,1,u+sr+y2+dt+bt+l+c+m+r+t,1,u+sr+jS+dt+bt+l+c+m+r+t,1,u+sr+yk+dt+bt+l+c+m+r+t,1,u+sr+BS+dt+bt+l+c+m+r+t,1,u+Vn+US+dt+bt+l+c+m+r+t,1,u+oi+uk+dt+bt+l+c+m+r+t,1,u+oi+hk+dt+bt+l+c+m+r+t,1,u+oi+fk+dt+bt+l+c+m+r+t,1,u+$a+" +lon_0=142"+dt+bt+l+c+m+r+t,1,u+$a+Yx+dt+bt+l+c+m+r+t,1,u+$a+" +lon_0=124"+dt+bt+l+c+m+r+t,1,u+$a+Ru+dt+bt+l+c+m+r+t,1,u+" +lat_0=20"+y2+dt+bt+l+c+m+r+t,1,u+$a+e7+dt+bt+l+c+m+r+t,1,u+y+vr+" +k=1"+wa+l+H+r+t,1,u+y+vr+" +k=1"+X+l+H+jt+r+t,1,u+y+Zr+" +k=1"+X+l+H+jt+r+t,1,u+y+Pa+" +k=1"+X+l+H+jt+r+t,1,u+y+xo+" +k=1"+X+l+H+jt+r+t,1,u+y+Ki+" +k=1"+X+l+H+jt+r+t,1,u+y+Wu+" +k=1"+X+l+H+jt+r+t,1,u+y+Fg+" +k=1"+X+l+H+jt+r+t,1,u+y+Fd+" +k=1"+X+l+H+jt+r+t,1,u+y+Pg+" +k=1"+X+l+H+jt+r+t,1,u+y+Qr+" +k=1"+X+l+H+jt+r+t,1,u+y+Jr+" +k=1"+X+l+H+jt+r+t,1,u+y+ca+" +k=1"+X+l+H+jt+r+t,1,u+y+ta+" +k=1"+X+l+H+jt+r+t,1,u+y+ea+" +k=1"+X+l+H+jt+r+t,1,u+y+ir+" +k=1"+X+l+H+jt+r+t,1,u+y+Yr+" +k=1"+X+l+H+jt+r+t,1,u+y+Mr+" +k=1"+X+l+H+jt+r+t,1,u+y+Xr+" +k=1"+X+l+H+jt+r+t,1,u+y+xr+" +k=1"+X+l+H+jt+r+t,1,u+y+Dr+" +k=1"+X+l+H+jt+r+t,1,u+y+Ag+" +k=1"+X+l+H+jt+r+t,1,u+y+vd+" +k=1"+X+l+H+jt+r+t,1,u+y+Lu+" +k=1"+X+l+H+jt+r+t,1,u+y+_g+" +k=1"+X+l+H+jt+r+t,1,u+y+Nu+" +k=1"+X+l+H+jt+r+t,1,u+y+Bl+" +k=1"+X+l+H+jt+r+t,1,u+y+Hc+" +k=1"+X+l+H+jt+r+t,1,u+y+I0+" +k=1"+X+l+H+jt+r+t,1,u+y+_u+" +k=1"+X+l+H+jt+r+t,3,u+y+vr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Zr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Pa+" +k=1"+X+l+H+Nt+r+t,1,u+y+xo+" +k=1"+X+l+H+Nt+r+t,1,u+y+Ki+" +k=1"+X+l+H+Nt+r+t,1,u+y+Wu+" +k=1"+X+l+H+Nt+r+t,1,u+y+Fg+" +k=1"+X+l+H+Nt+r+t,1,u+y+Fd+" +k=1"+X+l+H+Nt+r+t,1,u+y+Pg+" +k=1"+X+l+H+Nt+r+t,1,u+y+Qr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Jr+" +k=1"+X+l+H+Nt+r+t,1,u+y+ca+" +k=1"+X+l+H+Nt+r+t,1,u+y+ta+" +k=1"+X+l+H+Nt+r+t,1,u+y+ea+" +k=1"+X+l+H+Nt+r+t,1,u+y+ir+" +k=1"+X+l+H+Nt+r+t,1,u+y+Yr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Mr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Xr+" +k=1"+X+l+H+Nt+r+t,1,u+y+xr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Dr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Ag+" +k=1"+X+l+H+Nt+r+t,1,u+y+vd+" +k=1"+X+l+H+Nt+r+t,1,u+y+Lu+" +k=1"+X+l+H+Nt+r+t,1,u+y+_g+" +k=1"+X+l+H+Nt+r+t,1,u+y+Nu+" +k=1"+X+l+H+Nt+r+t,1,u+y+Bl+" +k=1"+X+l+H+Nt+r+t,1,u+y+Hc+" +k=1"+X+l+H+Nt+r+t,1,u+y+I0+" +k=1"+X+l+H+Nt+r+t,1,u+y+_u+" +k=1"+X+l+H+Nt+r+t,1,u+y+vr+" +k=1"+Lc+l+H+Nt+r+t,1,u+y+Da+" +k=1"+Xp+l+H+Nt+r+t,1,u+y+Zr+" +k=1"+Wp+l+H+Nt+r+t,1,u+y+ci+" +k=1"+Up+l+H+Nt+r+t,1,u+y+Pa+" +k=1"+qf+l+H+Nt+r+t,1,u+y+Uu+" +k=1"+Gp+l+H+Nt+r+t,1,u+y+xo+" +k=1"+Pc+l+H+Nt+r+t,1,u+y+Gu+" +k=1"+Xo+l+H+Nt+r+t,1,u+y+Ki+" +k=1"+Cl+l+H+Nt+r+t,1,u+y+lb+" +k=1"+Il+l+H+Nt+r+t,1,u+y+Wu+" +k=1"+wu+l+H+Nt+r+t,1,u+y+ub+" +k=1"+Al+l+H+Nt+r+t,1,u+y+Fg+" +k=1"+_l+l+H+Nt+r+t,1,u+y+" +lon_0=60 +k=1"+Mc+l+H+Nt+r+t,1,u+y+Fd+" +k=1"+Tl+l+H+Nt+r+t,1,u+y+E2+" +k=1"+Dc+l+H+Nt+r+t,1,u+y+Pg+" +k=1"+El+l+H+Nt+r+t,1,u+y+S6+" +k=1"+Hp+l+H+Nt+r+t,1,u+y+Qr+" +k=1"+Ol+l+H+Nt+r+t,1,u+y+nc+" +k=1"+Fl+l+H+Nt+r+t,1,u+y+Jr+" +k=1"+Pl+l+H+Nt+r+t,1,u+y+Gl+" +k=1"+Ml+l+H+Nt+r+t,1,u+y+ca+" +k=1"+Wo+l+H+Nt+r+t,1,u+y+Sa+" +k=1"+v0+l+H+Nt+r+t,1,u+y+ta+" +k=1"+fo+l+H+Nt+r+t,1,u+y+zc+" +k=1"+S0+l+H+Nt+r+t,1,u+y+ea+" +k=1"+vu+l+H+Nt+r+t,2,u+y+Zo+" +k=1"+Wm+l+H+Nt+r+t,1,u+y+ir+" +k=1"+$m+l+H+Nt+r+t,1,u+y+jl+" +k=1"+qm+l+H+Nt+r+t,1,u+y+Yr+" +k=1"+Vm+l+H+Nt+r+t,1,u+y+$s+" +k=1"+Km+l+H+Nt+r+t,1,u+y+Mr+" +k=1"+Ym+l+H+Nt+r+t,1,u+y+Gc+" +k=1"+Zm+l+H+Nt+r+t,1,u+y+Xr+" +k=1"+Qm+l+H+Nt+r+t,1,u+y+Qo+" +k=1"+qx+l+H+Nt+r+t,1,u+y+xr+" +k=1"+Jm+l+H+Nt+r+t,1,u+y+Ws+" +k=1"+Vx+l+H+Nt+r+t,1,u+y+Dr+" +k=1"+tb+l+H+Nt+r+t,1,u+y+w2+" +k=1 +x_0=46500000"+l+H+Nt+r+t,1,u+y+Ag+" +k=1"+dk+l+H+Nt+r+t,1,u+y+g6+" +k=1 +x_0=48500000"+l+H+Nt+r+t,1,u+y+vd+" +k=1 +x_0=49500000"+l+H+Nt+r+t,1,u+y+Sd+" +k=1 +x_0=50500000"+l+H+Nt+r+t,1,u+y+Lu+" +k=1 +x_0=51500000"+l+H+Nt+r+t,1,u+y+n7+" +k=1 +x_0=52500000"+l+H+Nt+r+t,1,u+y+_g+" +k=1 +x_0=53500000"+l+H+Nt+r+t,1,u+y+sb+" +k=1 +x_0=54500000"+l+H+Nt+r+t,1,u+y+Nu+" +k=1 +x_0=55500000"+l+H+Nt+r+t,1,u+y+m6+" +k=1 +x_0=56500000"+l+H+Nt+r+t,1,u+y+Bl+" +k=1 +x_0=57500000"+l+H+Nt+r+t,1,u+y+b6+" +k=1 +x_0=58500000"+l+H+Nt+r+t,1,u+y+Hc+" +k=1 +x_0=59500000"+l+H+Nt+r+t,2,u+y+I0+" +k=1 +x_0=61500000"+l+H+Nt+r+t,1,u+y+a6+" +k=1 +x_0=62500000"+l+H+Nt+r+t,1,u+y+_u+" +k=1 +x_0=63500000"+l+H+Nt+r+t,1,u+y+i6+" +k=1 +x_0=64500000"+l+H+Nt+r+t,1,u+y+vr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Da+" +k=1"+X+l+H+Nt+r+t,1,u+y+Zr+" +k=1"+X+l+H+Nt+r+t,1,u+y+ci+" +k=1"+X+l+H+Nt+r+t,1,u+y+Pa+" +k=1"+X+l+H+Nt+r+t,1,u+y+Uu+" +k=1"+X+l+H+Nt+r+t,1,u+y+xo+" +k=1"+X+l+H+Nt+r+t,1,u+y+Gu+" +k=1"+X+l+H+Nt+r+t,1,u+y+Ki+" +k=1"+X+l+H+Nt+r+t,1,u+y+lb+" +k=1"+X+l+H+Nt+r+t,1,u+y+Wu+" +k=1"+X+l+H+Nt+r+t,1,u+y+ub+" +k=1"+X+l+H+Nt+r+t,1,u+y+Fg+" +k=1"+X+l+H+Nt+r+t,1,u+y+" +lon_0=60 +k=1"+X+l+H+Nt+r+t,1,u+y+Fd+" +k=1"+X+l+H+Nt+r+t,1,u+y+E2+" +k=1"+X+l+H+Nt+r+t,1,u+y+Pg+" +k=1"+X+l+H+Nt+r+t,1,u+y+S6+" +k=1"+X+l+H+Nt+r+t,2,u+y+Qr+" +k=1"+X+l+H+Nt+r+t,1,u+y+nc+" +k=1"+X+l+H+Nt+r+t,1,u+y+Jr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Gl+" +k=1"+X+l+H+Nt+r+t,1,u+y+ca+" +k=1"+X+l+H+Nt+r+t,1,u+y+Sa+" +k=1"+X+l+H+Nt+r+t,1,u+y+ta+" +k=1"+X+l+H+Nt+r+t,1,u+y+zc+" +k=1"+X+l+H+Nt+r+t,1,u+y+ea+" +k=1"+X+l+H+Nt+r+t,1,u+y+Zo+" +k=1"+X+l+H+Nt+r+t,1,u+y+ir+" +k=1"+X+l+H+Nt+r+t,1,u+y+jl+" +k=1"+X+l+H+Nt+r+t,1,u+y+Yr+" +k=1"+X+l+H+Nt+r+t,1,u+y+$s+" +k=1"+X+l+H+Nt+r+t,1,u+y+Mr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Gc+" +k=1"+X+l+H+Nt+r+t,1,u+y+Xr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Qo+" +k=1"+X+l+H+Nt+r+t,1,u+y+xr+" +k=1"+X+l+H+Nt+r+t,1,u+y+Ws+" +k=1"+X+l+H+Nt+r+t,1,u+y+Dr+" +k=1"+X+l+H+Nt+r+t,1,u+y+w2+" +k=1"+X+l+H+Nt+r+t,1,u+y+Ag+" +k=1"+X+l+H+Nt+r+t,1,u+y+g6+" +k=1"+X+l+H+Nt+r+t,1,u+y+vd+" +k=1"+X+l+H+Nt+r+t,1,u+y+Sd+" +k=1"+X+l+H+Nt+r+t,1,u+y+Lu+" +k=1"+X+l+H+Nt+r+t,1,u+y+n7+" +k=1"+X+l+H+Nt+r+t,1,u+y+_g+" +k=1"+X+l+H+Nt+r+t,1,u+y+sb+" +k=1"+X+l+H+Nt+r+t,1,u+y+Nu+" +k=1"+X+l+H+Nt+r+t,1,u+y+m6+" +k=1"+X+l+H+Nt+r+t,1,u+y+Bl+" +k=1"+X+l+H+Nt+r+t,1,u+y+b6+" +k=1"+X+l+H+Nt+r+t,1,u+y+Hc+" +k=1"+X+l+H+Nt+r+t,1,u+y+v2+" +k=1"+X+l+H+Nt+r+t,1,u+y+I0+" +k=1"+X+l+H+Nt+r+t,1,u+y+a6+" +k=1"+X+l+H+Nt+r+t,1,u+y+_u+" +k=1"+X+l+H+Nt+r+t,1,u+y+i6+" +k=1"+X+l+H+Nt+r+t,1,u+y+vr+" +k=1"+Lc+l+H+jt+r+t,1,u+y+Da+" +k=1"+Xp+l+H+jt+r+t,1,u+y+Zr+" +k=1"+Wp+l+H+jt+r+t,1,u+y+ci+" +k=1"+Up+l+H+jt+r+t,1,u+y+Pa+" +k=1"+qf+l+H+jt+r+t,1,u+y+Uu+" +k=1"+Gp+l+H+jt+r+t,1,u+y+xo+" +k=1"+Pc+l+H+jt+r+t,1,u+y+Gu+" +k=1"+Xo+l+H+jt+r+t,1,u+y+Ki+" +k=1"+Cl+l+H+jt+r+t,1,u+y+lb+" +k=1"+Il+l+H+jt+r+t,1,u+y+Wu+" +k=1"+wu+l+H+jt+r+t,1,u+y+ub+" +k=1"+Al+l+H+jt+r+t,1,u+y+Fg+" +k=1"+_l+l+H+jt+r+t,1,u+y+" +lon_0=60 +k=1"+Mc+l+H+jt+r+t,1,u+y+Fd+" +k=1"+Tl+l+H+jt+r+t,1,u+y+E2+" +k=1"+Dc+l+H+jt+r+t,1,u+y+Pg+" +k=1"+El+l+H+jt+r+t,1,u+y+S6+" +k=1"+Hp+l+H+jt+r+t,1,u+y+Qr+" +k=1"+Ol+l+H+jt+r+t,1,u+y+nc+" +k=1"+Fl+l+H+jt+r+t,1,u+y+Jr+" +k=1"+Pl+l+H+jt+r+t,1,u+y+Gl+" +k=1"+Ml+l+H+jt+r+t,1,u+y+ca+" +k=1"+Wo+l+H+jt+r+t,1,u+y+Sa+" +k=1"+v0+l+H+jt+r+t,1,u+y+ta+" +k=1"+fo+l+H+jt+r+t,1,u+y+zc+" +k=1"+S0+l+H+jt+r+t,1,u+y+ea+" +k=1"+vu+l+H+jt+r+t,1,u+y+Zo+" +k=1"+Wm+l+H+jt+r+t,1,u+y+ir+" +k=1"+$m+l+H+jt+r+t,1,u+y+jl+" +k=1"+qm+l+H+jt+r+t,1,u+y+Yr+" +k=1"+Vm+l+H+jt+r+t,1,u+y+$s+" +k=1"+Km+l+H+jt+r+t,1,u+y+Mr+" +k=1"+Ym+l+H+jt+r+t,1,u+y+Gc+" +k=1"+Zm+l+H+jt+r+t,1,u+y+Xr+" +k=1"+Qm+l+H+jt+r+t,1,u+y+Qo+" +k=1"+qx+l+H+jt+r+t,1,u+y+xr+" +k=1"+Jm+l+H+jt+r+t,1,u+y+Ws+" +k=1"+Vx+l+H+jt+r+t,1,u+y+Dr+" +k=1"+tb+l+H+jt+r+t,1,u+y+w2+" +k=1 +x_0=46500000"+l+H+jt+r+t,1,u+y+Ag+" +k=1"+dk+l+H+jt+r+t,1,u+y+g6+" +k=1 +x_0=48500000"+l+H+jt+r+t,1,u+y+vd+" +k=1 +x_0=49500000"+l+H+jt+r+t,1,u+y+Sd+" +k=1 +x_0=50500000"+l+H+jt+r+t,1,u+y+Lu+" +k=1 +x_0=51500000"+l+H+jt+r+t,1,u+y+n7+" +k=1 +x_0=52500000"+l+H+jt+r+t,1,u+y+_g+" +k=1 +x_0=53500000"+l+H+jt+r+t,1,u+y+sb+" +k=1 +x_0=54500000"+l+H+jt+r+t,1,u+y+Nu+" +k=1 +x_0=55500000"+l+H+jt+r+t,1,u+y+m6+" +k=1 +x_0=56500000"+l+H+jt+r+t,1,u+y+Bl+" +k=1 +x_0=57500000"+l+H+jt+r+t,1,u+y+b6+" +k=1 +x_0=58500000"+l+H+jt+r+t,1,u+y+Hc+" +k=1 +x_0=59500000"+l+H+jt+r+t,2,u+y+I0+" +k=1 +x_0=61500000"+l+H+jt+r+t,1,u+y+a6+" +k=1 +x_0=62500000"+l+H+jt+r+t,1,u+y+_u+" +k=1 +x_0=63500000"+l+H+jt+r+t,1,u+y+i6+" +k=1 +x_0=64500000"+l+H+jt+r+t,1,u+y+vr+" +k=1"+X+l+H+jt+r+t,1,u+y+Da+" +k=1"+X+l+H+jt+r+t,1,u+y+Zr+" +k=1"+X+l+H+jt+r+t,1,u+y+ci+" +k=1"+X+l+H+jt+r+t,1,u+y+Pa+" +k=1"+X+l+H+jt+r+t,1,u+y+Uu+" +k=1"+X+l+H+jt+r+t,1,u+y+xo+" +k=1"+X+l+H+jt+r+t,1,u+y+Gu+" +k=1"+X+l+H+jt+r+t,1,u+y+Ki+" +k=1"+X+l+H+jt+r+t,1,u+y+lb+" +k=1"+X+l+H+jt+r+t,1,u+y+Wu+" +k=1"+X+l+H+jt+r+t,1,u+y+ub+" +k=1"+X+l+H+jt+r+t,1,u+y+Fg+" +k=1"+X+l+H+jt+r+t,1,u+y+" +lon_0=60 +k=1"+X+l+H+jt+r+t,1,u+y+Fd+" +k=1"+X+l+H+jt+r+t,1,u+y+E2+" +k=1"+X+l+H+jt+r+t,1,u+y+Pg+" +k=1"+X+l+H+jt+r+t,1,u+y+S6+" +k=1"+X+l+H+jt+r+t,1,u+y+Qr+" +k=1"+X+l+H+jt+r+t,1,u+y+nc+" +k=1"+X+l+H+jt+r+t,1,u+y+Jr+" +k=1"+X+l+H+jt+r+t,1,u+y+Gl+" +k=1"+X+l+H+jt+r+t,1,u+y+ca+" +k=1"+X+l+H+jt+r+t,1,u+y+Sa+" +k=1"+X+l+H+jt+r+t,1,u+y+ta+" +k=1"+X+l+H+jt+r+t,1,u+y+zc+" +k=1"+X+l+H+jt+r+t,1,u+y+ea+" +k=1"+X+l+H+jt+r+t,1,u+y+Zo+" +k=1"+X+l+H+jt+r+t,1,u+y+ir+" +k=1"+X+l+H+jt+r+t,1,u+y+jl+" +k=1"+X+l+H+jt+r+t,1,u+y+Yr+" +k=1"+X+l+H+jt+r+t,1,u+y+$s+" +k=1"+X+l+H+jt+r+t,1,u+y+Mr+" +k=1"+X+l+H+jt+r+t,1,u+y+Gc+" +k=1"+X+l+H+jt+r+t,1,u+y+Xr+" +k=1"+X+l+H+jt+r+t,1,u+y+Qo+" +k=1"+X+l+H+jt+r+t,1,u+y+xr+" +k=1"+X+l+H+jt+r+t,1,I+vs+st+ge+sS+r+t,1,I+Ya+st+ge+sS+r+t,1,u+y+Ws+" +k=1"+X+l+H+jt+r+t,1,u+y+Dr+" +k=1"+X+l+H+jt+r+t,1,u+y+w2+" +k=1"+X+l+H+jt+r+t,1,u+y+Ag+" +k=1"+X+l+H+jt+r+t,1,u+y+g6+" +k=1"+X+l+H+jt+r+t,1,u+y+vd+" +k=1"+X+l+H+jt+r+t,1,u+y+Sd+" +k=1"+X+l+H+jt+r+t,1,u+y+Lu+" +k=1"+X+l+H+jt+r+t,1,u+y+n7+" +k=1"+X+l+H+jt+r+t,1,u+y+_g+" +k=1"+X+l+H+jt+r+t,1,u+y+sb+" +k=1"+X+l+H+jt+r+t,1,u+y+Nu+" +k=1"+X+l+H+jt+r+t,1,u+y+m6+" +k=1"+X+l+H+jt+r+t,1,u+y+Bl+" +k=1"+X+l+H+jt+r+t,1,u+y+b6+" +k=1"+X+l+H+jt+r+t,1,u+y+Hc+" +k=1"+X+l+H+jt+r+t,1,u+y+v2+" +k=1"+X+l+H+jt+r+t,1,u+y+I0+" +k=1"+X+l+H+jt+r+t,1,u+y+a6+" +k=1"+X+l+H+jt+r+t,1,u+y+_u+" +k=1"+X+l+H+jt+r+t,1,u+y+i6+" +k=1"+X+l+H+jt+r+t,1,u+Vo+_3+vg+ee+l+c+m+r+t,1,u+Sr+eb+Un+Bt+l+c+m+r+t,1,u+We+kh+dt+oa+l+c+m+r+t,1,u+We+Ah+dt+oa+l+c+m+r+t,1,u+We+Bf+Un+oa+l+c+m+r+t,1,C+kf+Af+fs+Vi+ye+l+c+m+r+t,1,C+_f+dd+Cf+Vi+ye+Uc+c+m+r+t,1,C+Kh+ys+Ir+qi+Ln+Le+c+m+r+t,1,C+Yh+Zh+Br+qi+Ln+Le+c+m+r+t,1,C+Ri+Qh+cd+ze+Ln+Le+c+m+r+t,1,C+Zf+Id+Jh+ld+Ln+Le+c+m+r+t,1,C+tf+ef+ud+Bc+Ln+Le+c+m+r+t,1,C+nf+rf+af+Uf+Ln+Le+c+m+r+t,1,C+I1+T1+Ir+Zn+Sl+kl+c+m+r+t,1,C+Qf+Jf+ou+Zn+Sl+kl+c+m+r+t,1,C+Ri+sf+Je+Zn+Sl+kl+c+m+r+t,1,C+of+hd+cf+Vf+g8+m8+c+m+r+t,1,u+fn+_h+fd+ee+l+c+m+r+t,1,u+Li+_n+An+ee+l+c+m+r+t,1,u+Li+yd+An+ee+l+c+m+r+t,1,C+td+lf+Td+ed+Bt+l+c+m+r+t,1,u+Sr+Ch+dt+ee+l+c+m+r+t,1,u+Sr+Ih+dt+sa+l+c+m+r+t,1,u+kw+P8+rn+X+l+c+m+r+t,1,u+Aw+iw+rn+X+l+c+m+r+t,1,u+Lm+T0+Jo+X+l+c+m+r+t,1,u+_w+M8+Jo+X+l+c+m+r+t,1,u+Cw+sw+" +k=1"+X+l+c+m+r+t,1,u+wn+Th+ji+ee+l+c+m+r+t,1,u+wn+Rl+ji+X+l+c+m+r+t,1,u+wn+Gf+Un+ar+l+c+m+r+t,1,u+Je+Rh+bu+ve+l+c+m+r+t,1,u+Je+Lh+An+sa+l+c+m+r+t,1,u+Or+Nh+rn+hn+E0+c+m+r+t,1,u+Or+jh+rn+bs+E0+c+m+r+t,1,C+If+Tf+Oa+Wi+Ge+Fe+c+m+r+t,1,C+ni+Ef+Vn+Wi+X+l+c+m+r+t,1,C+Of+Ff+Ua+Pr+ye+l+c+m+r+t,1,C+Pf+Mf+Je+Hr+ye+Uc+c+m+r+t,1,C+ls+Vh+Or+$f+X+l+c+m+r+t,1,C+E1+O1+Ur+Ui+X+Le+c+m+r+t,1,C+up+hp+Vo+$o+Tn+l+c+m+r+t,1,C+ug+hg+fg+pl+Tn+l+c+m+r+t,1,u+ma+po+dt+ve+l+c+m+r+t,1,u+ds+Bh+rn+bs+l+c+m+r+t,1,C+$p+ng+Br+Nl+ye+l+c+m+r+t,1,C+F1+uf+ki+zi+ee+od+c+m+r+t,1,C+P1+M1+ki+Rc+X+l+c+m+r+t,1,C+D1+R1+L1+Ko+t4+l+c+m+r+t,1,C+rg+N1+j1+js+Zx+l+c+m+r+t,1,C+ml+ag+Oa+js+rd+l+c+m+r+t,1,C+fp+dp+jc+Uh+ar+zr+c+m+r+t,1,C+Qp+pp+Wa+Yf+ar+zr+c+m+r+t,1,C+gp+mp+Hl+ju+ar+zr+c+m+r+t,1,u+Hs+Eh+Sn+ve+l+c+m+r+t,1,u+Hs+c0+Sn+sa+l+c+m+r+t,1,u+fu+Y3+Un+Mn+l+c+m+r+t,1,u+fu+$o+Un+X+l+c+m+r+t,1,u+T3+Z3+An+y4+l+c+m+r+t,1,C+bo+Og+qp+w0+Bt+l+c+m+r+t,1,C+Yi+ys+bp+Jn+X+l+c+m+r+t,1,u+Er+Gh+dt+ee+e4+c+m+r+t,1,u+Er+Hh+dt+X+qo+c+m+r+t,1,u+Er+zh+dt+ar+ad+c+m+r+t,1,u+Fa+Xh+rn+ve+l+c+m+r+t,1,u+us+Us+dt+En+l+c+m+r+t,1,u+We+Oh+x0+ig+l+c+m+r+t,1,u+We+Hf+dt+X+l+c+m+r+t,1,u+We+Fh+zf+w4+l+c+m+r+t,1,u+us+Us+dt+En+l+c+m+r+t,1,u+Vn+Ph+Ze+Mn+l+c+m+r+t,1,u+Vn+Mh+Ze+s2+l+c+m+r+t,1,C+hf+ff+hs+wd+ve+l+c+m+r+t,1,C+Bs+G1+li+Gi+Bt+l+c+m+r+t,1,C+H1+z1+Ac+Gi+Bt+l+c+m+r+t,1,C+dg+xp+Go+Xa+Bt+l+c+m+r+t,1,C+yp+wp+fn+Xa+Bt+l+c+m+r+t,1,C+df+X1+Ed+Pr+Bt+l+c+m+r+t,1,C+W1+$1+pf+Pr+Bt+l+c+m+r+t,1,C+Hu+cu+ma+ze+Kr+l+c+m+r+t,1,C+zu+lu+wn+ze+Ge+l+c+m+r+t,1,u+Df+zi+zp+hn+l+c+m+r+t,1,C+vp+Sp+ba+Jn+Bt+l+c+m+r+t,1,C+pg+kp+Rf+Fi+Bt+l+c+m+r+t,1,C+K1+Kp+fs+P0+Bt+l+c+m+r+t,1,C+Y1+Yp+Od+Kf+ee+Fe+c+m+r+t,1,C+Z1+Q1+xf+Hr+Bt+ia+c+m+r+t,1,C+J1+tp+uu+Fi+sa+Si+c+m+r+t,1,C+ep+np+yf+Yo+Bt+ad+c+m+r+t,1,C+l0+u0+hu+Hr+ve+ku+c+m+r+t,1,C+ni+h0+bl+In+X+Fe+c+m+r+t,1,C+k0+f0+Ua+In+X+ia+c+m+r+t,1,C+A0+d0+Je+In+X+Si+c+m+r+t,1,u+Fa+id+Xf+X+l+c+m+r+t,1,C+cg+rp+Br+Xi+Qn+ia+c+m+r+t,1,C+ls+wf+Ur+Xi+Qn+Fe+c+m+r+t,1,C+Bs+lg+li+Dh+X+l+c+m+r+t,1,C+ap+ip+vf+ze+X+l+c+m+r+t,1,C+Jp+Mg+pd+gs+Bt+l+c+m+r+t,1,C+Ap+_p+Pd+_n+Bt+l+c+m+r+t,1,C+sp+op+Sf+pn+Bt+l+c+m+r+t,1,C+Ll+Zp+ba+pn+Bt+l+c+m+r+t,1,C+cp+lp+Xu+pn+Bt+l+c+m+r+t,1,u+Gn+Wh+Ze+ee+l+c+m+r+t,1,u+Gn+$h+Ze+ye+zr+c+m+r+t,1,u+Gn+Wf+Ze+Bt+l+c+m+r+t,1,u+Gn+qh+Ze+ar+zr+c+m+r+t,1,C+Nm+jm+Bm+Rm+ee+go+c+m+r+t,1,u+We+kh+dt+oa+l+c+m+se+t,1,u+We+Ah+dt+oa+l+c+m+se+t,1,u+We+Bf+Un+oa+l+c+m+se+t,1,C+Kh+ys+Ir+qi+aa+pr+c+m+D+t,1,C+Yh+Zh+Br+qi+aa+pr+c+m+D+t,1,C+Ri+Qh+cd+ze+aa+pr+c+m+D+t,1,C+Zf+Id+Jh+ld+aa+pr+c+m+D+t,1,C+tf+ef+ud+Bc+aa+pr+c+m+D+t,1,C+nf+rf+af+Uf+aa+pr+c+m+D+t,1,C+I1+T1+Ir+Zn+Ic+xl+c+m+D+t,1,C+Qf+Jf+ou+Zn+Ic+xl+c+m+D+t,1,C+Ri+sf+Je+Zn+Ic+xl+c+m+D+t,1,C+of+hd+cf+Vf+Vw+Kw+c+m+D+t,1,u+fn+_h+fd+gr+l+c+m+D+t,1,u+Li+_n+An+gr+l+c+m+D+t,1,u+Li+yd+An+gr+l+c+m+D+t,1,C+td+lf+Td+ed+Bt+l+c+m+D+t,1,u+Sr+Ch+dt+gr+l+c+m+D+t,1,u+Sr+Ih+dt+yl+l+c+m+D+t,1,u+wn+Th+ji+gr+l+c+m+D+t,1,u+wn+Rl+ji+mr+l+c+m+D+t,1,u+wn+Gf+Un+Yw+l+c+m+D+t,3,C+ls+Vh+Or+$f+mr+l+c+m+D+t,1,C+E1+O1+Ur+Ui+mr+pr+c+m+D+t,1,C+$p+ng+Br+Nl+Zw+l+c+m+D+t,1,C+F1+uf+ki+zi+gr+od+c+m+D+t,1,C+P1+M1+ki+Rc+mr+l+c+m+D+t,1,C+D1+R1+L1+Ko+Qw+l+c+m+se+t,1,C+rg+N1+j1+js+Jw+l+c+m+se+t,1,C+ml+ag+Oa+js+f8+l+c+m+se+t,1,u+Hs+Eh+Sn+Ni+l+c+m+D+t,1,u+Hs+c0+Sn+yl+l+c+m+D+t,1,C+bo+Og+qp+w0+vl+l+c+m+se+t,1,u+We+Oh+x0+ig+l+c+m+D+t,1,u+We+Hf+dt+mr+l+c+m+D+t,1,u+We+Fh+zf+t8+l+c+m+D+t,1,u+us+Us+dt+En+l+c+m+D+t,1,u+Vn+Ph+Ze+e8+l+c+m+D+t,1,u+Vn+Mh+Ze+n8+l+c+m+D+t,1,C+hf+ff+hs+wd+Ni+l+c+m+D+t,1,C+Bs+G1+li+Gi+vl+l+c+m+se+t,1,C+H1+z1+Ac+Gi+vl+l+c+m+se+t,1,C+df+X1+Ed+Pr+Bt+l+c+m+D+t,1,C+W1+$1+pf+Pr+Bt+l+c+m+D+t,1,C+Hu+cu+ma+ze+B3+l+c+m+se+t,1,C+zu+lu+wn+ze+U3+l+c+m+se+t,1,C+K1+Kp+fs+P0+Bt+l+c+m+D+t,1,C+Y1+Yp+Od+Kf+gr+wl+c+m+D+t,1,C+Z1+Q1+xf+Hr+Bt+Pp+c+m+D+t,1,C+J1+tp+uu+Fi+yl+Si+c+m+D+t,1,C+ep+np+yf+Yo+Bt+l8+c+m+D+t,1,C+l0+u0+hu+Hr+Ni+u8+c+m+D+t,1,C+ni+h0+bl+In+Nf+KS+c+m+se+t,1,C+k0+f0+Ua+In+Nf+nk+c+m+se+t,1,C+A0+d0+Je+In+Nf+rk+c+m+se+t,1,C+cg+rp+Br+Xi+Mp+Pp+c+m+D+t,1,C+ls+wf+Ur+Xi+Mp+wl+c+m+D+t,1,C+Bs+lg+li+Dh+mr+l+c+m+D+t,1,C+ap+ip+vf+ze+mr+l+c+m+D+t,1,C+sp+op+Sf+pn+Bt+l+c+m+D+t,1,C+Ll+Zp+ba+pn+Bt+l+c+m+D+t,1,C+cp+lp+Xu+pn+Bt+l+c+m+D+t,1,u+y+" +lon_0=13"+pe+X+l+Ue+Xe+lI+r+t,1,u+" +lat_0=24.45"+oE+Jo+ee+zs+ct+lC+r+t,1,I+Ys+st+Xt+k3+r+t,2,u+ow+" +lon_0=41.53333333333333 +k=1 +x_0=1300000"+l+H+Nt+r+t,1,u+ow+" +lon_0=44.53333333333333 +k=1"+wk+l+H+Nt+r+t,1,u+ow+" +lon_0=47.53333333333333 +k=1"+vk+l+H+Nt+r+t,1,u+ow+" +lon_0=50.53333333333333 +k=1"+Sk+l+H+Nt+r+t,1,u+TS+" +lon_0=50.76666666666667 +k=1"+wk+l+H+Nt+r+t,1,u+TS+" +lon_0=53.76666666666667 +k=1"+vk+l+H+Nt+r+t,1,u+TS+" +lon_0=56.76666666666667 +k=1"+Sk+l+H+Nt+r+t,1,I+_a+ct+tI+r+t,1,I+_a+ct+uI+r+t,2,u+y+V8+dt+De+l+c+m+r+t,1,u+y+V3+dt+De+l+c+m+r+t,1,u+y+K3+dt+De+l+c+m+r+t,1,u+y+K8+dt+De+l+c+m+r+t,1,u+y+Rc+dt+De+l+c+m+r+t,1,u+y+Y8+dt+De+l+c+m+r+t,1,u+y+Z8+dt+De+l+c+m+r+t,1,u+y+gs+dt+De+l+c+m+r+t,1,ho+jc+bk+r6+Kr+kk+c+m+r+t,1,ho+" +lat_0=47.25"+ib+r6+ye+qn+c+m+r+t,1,I+vo+c+m+r+t,1,I+So+c+m+r+t,1,I+ko+c+m+r+t,1,I+Wr+c+m+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,I+Dn+c+m+r+t,1,I+cr+c+m+r+t,2,tr+" +lat_1=55"+Md+k6+gd+bt+l+Rt+D+t,1,u+Or+Nh+rn+a8+Tp+c+m+D+t,1,u+Or+jh+rn+bs+Tp+c+m+D+t,1,u+Or+Nh+rn+a8+Tp+c+m+D+t,1,u+Or+jh+rn+bs+Tp+c+m+D+t,1,I+Dn+ct+hI+r+t,1,I+Dn+ct+eI+r+t,1,I+na+ct+pS+r+t,1,I+na+c+m+r+t,1,I+Dn+ct+_I+r+t,2,I+ws+st+c+m+r+t,1,I+lc+st+ct+CI+r+t,1,I+To+st+ct+yC+r+t,1,I+Eo+st+ct+jI+r+t,2,I+Aa+st+ct+nI+r+t,1,I+Zi+st+ct+NC+r+t,6,I+cr+ge+PI+r+t,1,I+$c+st+ct+rI+r+t,3,C+Yi+Xs+$i+ze+ye+l+c+m+r+t,1,C+Yi+Xs+$i+ze+G3+l+c+m+se+t,1,C+Yi+Xs+$i+ze+ye+l+c+m+r+t,1,C+Yi+Xs+$i+ze+G3+l+c+m+se+t,1,I+Zi+st+ct+uS+r+t,1,I+Zi+st+ct+fI+r+t,1,I+Zi+st+ct+dC+r+t,1,I+Zi+st+ct+W5+r+t,1,I+Aa+st+ct+aI+r+t,1,Dl+" +lon_0=110"+L2+Qx+o2+Xt+k3+r+t,1,Dl+" +lon_0=110"+L2+Qx+o2+Xt+_1+r+t,1,Dl+" +lon_0=110"+L2+Qx+o2+Xt+q5+r+t,1,u+y+Va+pe+Ge+l+ct+h3+r+t,1,u+y+yr+pe+" +x_0=2520000"+l+ct+h3+r+t,1,tr+A6+" +lat_2=58.5"+Wa+" +lon_0=-126"+Tn+l+c+m+r+t,1,I+Ka+c+m+r+t,1,u+y+Ma+" +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=13.5 +k=1"+En+l+c+m+r+t,1,u+y+yr+" +k=1"+En+l+c+m+r+t,1,u+y+v4+" +k=1"+En+l+c+m+r+t,1,u+y+Cd+" +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=14.25 +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=15.75 +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=17.25 +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=18.75 +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=20.25 +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=21.75 +k=1"+En+l+c+m+r+t,1,u+y+" +lon_0=23.25 +k=1"+En+l+c+m+r+t,1,u+y+cE+" +k=1"+Ge+l+Xt+Fm+r+t,1,u+y+lE+" +k=1"+Ge+l+Xt+Fm+r+t,1,u+y+uE+" +k=1"+Ge+l+Xt+Fm+r+t,1,u+y+hE+" +k=1"+Ge+l+Xt+Fm+r+t,1,u+y+fE+" +k=1"+Ge+l+Xt+Fm+r+t,1,u+y+dE+" +k=1"+Ge+l+Xt+Fm+r+t,1,u+y+cE+" +k=1"+Ge+l+Xt+r+t,1,u+y+lE+" +k=1"+Ge+l+Xt+r+t,1,u+y+uE+" +k=1"+Ge+l+Xt+r+t,1,u+y+hE+" +k=1"+Ge+l+Xt+r+t,1,u+y+fE+" +k=1"+Ge+l+Xt+r+t,1,u+y+dE+" +k=1"+Ge+l+Xt+r+t,1,vn+Yt+" +lat_ts=-71"+Hn+" +k=1"+bt+l+vt+r+t,1,vn+Yt+" +lat_ts=-71 +lon_0=70 +k=1"+Zx+qo+vt+r+t,1,C+" +lat_1=-68.5 +lat_2=-74.5 +lat_0=-50 +lon_0=70"+Zx+qo+vt+r+t,1,C+_6+Md+qu+rc+rd+Q3+c+m+r+t,1,Gs+qu+rc+J3+t6+c+m+r+t,1,I+vs+st+de+cw+r+t,1,I+Ya+st+de+cw+r+t,3,I+_a+c+m+r+t,1,I+qa+c+m+r+t,1,I+ic+c+m+r+t,1,I+zl+c+m+r+t,1,I+ua+c+m+r+t,1,I+Ka+c+m+r+t,1,I+Ks+c+m+r+t,1,I+hi+c+m+r+t,1,I+vs+c+m+r+t,1,I+Ya+c+m+r+t,5,I+oc+ct+nw+r+t,1,I+Dd+ct+nw+r+t,1,I+_a+ct+nw+r+t,1,C+" +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19"+X+Le+c+m+r+t,1,u+y+" +lon_0=-8.5 +k=1"+tc+" +y_0=-7800000"+ct+uC+r+t,1,u+y+Da+pe+X+" +y_0=-6000000"+c+m+r+t,1,I+Zi+st+ct+HC+r+t,1,I+_a+ct+_C+r+t,1,I+oc+ct+FC+r+t,1,I+oc+ct+TC+r+t,1,I+ua+de+m+r+t,1,I+Ka+de+m+r+t,1,u+y+" +lon_0=37"+T2+X+pk+ct+$n+r+t,1,I+hi+c+m+r+t,1,br+" +lat_0=52.41864827777778 +lon_0=13.62720366666667"+kd+" +y_0=10000"+Xt+fl+r+t,1,u+y+pn+pe+X+" +y_0=-4500000"+Rt+r+t,1,u+y+pn+pe+S4+D8+c+m+r+t,1,u+y+pn+pe+S4+D8+c+m+r+t,1,u+ba+S8+mo+sa+l+c+m+r+t,2,u+ds+k8+mo+ve+l+c+m+r+t,1,u+ba+S8+mo+sa+l+c+m+r+t,2,u+ds+k8+mo+ve+l+c+m+r+t,1,Gr+Iw+" +lonc=-86"+b8+pe+x8+p8+Za+y8+c+m+r+t,1,Gr+Iw+" +lonc=-86"+b8+pe+x8+p8+Za+y8+c+m+r+t,1,C+pE+gE+mE+Jn+" +x_0=914400 +y_0=914400"+Rt+se+t,1,C+pE+gE+mE+Jn+Tn+Fe+c+m+r+t,1,C+gg+Dg+M0+Jn+Ge+ku+c+m+r+t,1,tr+gg+Dg+M0+Jn+Ge+qo+c+m+r+t,1,C+gg+Dg+M0+Jn+Ge+ku+c+m+r+t,1,tr+gg+Dg+M0+Jn+Ge+qo+c+m+r+t,1,tr+" +lat_1=24"+k4+" +lat_0=24"+Mu+ye+l+c+m+r+t,1,tr+" +lat_1=24"+k4+" +lat_0=24"+Mu+ye+l+c+m+r+t,1,C+Cp+Ip+Ur+Ui+Ge+Fe+c+m+r+t,1,C+Cp+Ip+Ur+Ui+Ge+wl+c+m+D+t,1,C+Cp+Ip+Ur+Ui+Ge+Fe+c+m+r+t,1,C+Cp+Ip+Ur+Ui+Ge+wl+c+m+D+t,1,I+Ss+Xt+Vr+r+t,1,I+Zs+Xt+Vr+r+t,1,I+cc+Xt+Vr+r+t,1,I+Ao+Xt+Vr+r+t,1,I+Wc+Xt+Vr+r+t,1,I+Ss+c+m+r+t,1,I+Zs+c+m+r+t,1,I+cc+c+m+r+t,1,I+Ao+c+m+r+t,1,I+Wc+c+m+r+t,1,C+" +lat_1=-14.26666666666667 +lat_0=-14.26666666666667"+s6+" +k_0=1"+Ne+" +y_0=95169.31165862332"+ge+dI+D+t,4,u+y+Sa+pe+X+l+ya+xa+YC+r+t,1,C+" +lat_1=-28"+r7+" +lat_0=-32"+Dr+Tn+ia+c+m+r+t,1,u+n6+" +lon_0=-2.416666666666667 +k=0.999997 +x_0=47000"+S2+c+m+r+t,1,u+" +lat_0=49.225 +lon_0=-2.135 +k=0.9999999000000001"+kd+" +y_0=70000"+c+m+r+t,1,C+" +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145"+Kr+ms+He+vc+r+t,1,C+" +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145"+Kr+_0+c+m+r+t,1,C+" +lat_1=-18"+r7+y+" +lon_0=134"+bt+l+c+m+r+t,1,u+" +lat_0=-28"+Lu+Jo+tc+zr+c+m+r+t,1,u+E3+" +lon_0=-80.07750791666666 +k=1"+Tn+Fe+c+m+r+t,1,u+E3+" +lon_0=-77.07750791666666 +k=1"+Tn+Fe+c+m+r+t,1,u+E3+" +lon_0=-74.07750791666666 +k=1"+Tn+Fe+c+m+r+t,1,u+E3+" +lon_0=-71.07750791666666 +k=1"+Tn+Fe+c+m+r+t,1,u+E3+" +lon_0=-68.07750791666666 +k=1"+Tn+Fe+c+m+r+t,1,u+y+A4+" +k=0.999"+Tn+Fe+ct+XC+r+t,1,ho+" +lat_0=50.625 +lon_0=21.08333333333333"+T2+" +x_0=4637000 +y_0=5467000"+H+qr+r+t,1,u+y+Mr+Sn+X+l+ge+Tx+r+t,1,u+y+a7+Sn+X+l+ge+Tx+r+t,1,u+y+i7+Sn+X+l+ge+Tx+r+t,1,u+y+Xr+Sn+X+l+ge+Tx+r+t,1,u+y+b2+Sn+X+l+ge+Tx+r+t,1,u+y+Tg+" +k=1"+X+l+c+m+r+t,1,u+y+O2+" +k=1"+X+l+c+m+r+t,1,u+y+vr+" +k=1"+X+l+c+m+r+t,1,u+y+C6+" +k=1"+X+l+c+m+r+t,1,u+y+cb+" +k=1"+X+l+c+m+r+t,1,u+y+Da+" +k=1"+X+l+c+m+r+t,1,u+y+Eg+" +k=1"+X+l+c+m+r+t,1,u+y+F2+" +k=1"+X+l+c+m+r+t,1,u+y+Zr+" +k=1"+X+l+c+m+r+t,1,u+y+Rg+" +k=1"+X+l+c+m+r+t,1,u+y+" +lon_0=29 +k=1"+X+l+c+m+r+t,1,u+y+ci+" +k=1"+X+l+c+m+r+t,1,u+y+_d+" +k=1"+X+l+c+m+r+t,2,br+" +lat_0=-18 +lon_0=178 +x_0=109435.392 +y_0=141622.272"+sk+ck+SS+" +to_meter=0.201168"+t,1,I+Xc+st+ct+oS+r+t,1,I+$c+st+ct+oS+r+t,6,I+ks+ya+xa+J5+r+t,1,I+As+ya+xa+J5+r+t,3,u+y+" +lon_0=18.05779 +k=0.99999425 +x_0=100178.1808 +y_0=-6500614.7836"+c+m+r+t,1,tr+A6+" +lat_2=58.5"+Wa+" +lon_0=-126"+Tn+l+c+m+r+t,1,I+Eo+c+m+r+t,1,I+ql+c+m+r+t,1,I+Vl+c+m+r+t,1,I+Xl+c+m+r+t,1,I+_o+c+m+r+t,1,I+qs+c+m+r+t,1,I+Vs+c+m+r+t,1,C+_4+" +lat_2=53.5"+y+k2+" +x_0=930000 +y_0=6430000"+c+m+r+t,1,C+_4+" +lat_2=53.5"+y+k2+" +x_0=930000 +y_0=6430000"+c+m+r+t,1,C+" +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5"+s7+ye+zs+c+m+r+t,1,I+Zi+st+de+RC+r+t,1,C+" +lat_1=-22.24469175 +lat_2=-22.29469175 +lat_0=-22.26969175 +lon_0=166.44242575 +x_0=0.66 +y_0=1.02"+ct+W5+r+t,1,C+" +lat_1=-22.24472222222222 +lat_2=-22.29472222222222 +lat_0=-22.26972222222222 +lon_0=166.4425 +x_0=8.313000000000001 +y_0=-2.354"+ct+W5+r+t,1,Gr+R0+Ak+EF+Cg+kd+l+Za+Um+lk+QS+" +to_meter=20.116756"+t,1,Gr+R0+Ak+EF+Cg+" +x_0=804670.24"+l+Za+Um+lk+QS+r+t,1,I+Rd+st+c+m+r+t,1,I+Zi+st+c+m+r+t,1,I+yo+st+c+m+r+t,1,I+yo+st+ct+uS+r+t,2,tr+" +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-84.455955"+Tn+Fe+c+m+r+t,1,tr+" +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627"+Tn+Fe+c+m+r+t,1,u+y+t7+pe+X+l+ya+xa+J5+r+t,1,u+y+C2+" +k=0.9965000000000001"+Tn+l+ct+oo+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,I+Dn+c+m+r+t,1,I+cr+c+m+r+t,1,I+na+c+m+r+t,1,I+Qi+c+m+r+t,1,I+Co+c+m+r+t,1,I+wo+c+m+r+t,1,I+oc+c+m+r+t,1,I+Dd+c+m+r+t,1,I+_a+c+m+r+t,1,I+qa+c+m+r+t,1,u+y+Va+Sn+ee+l+ct+oo+r+t,1,u+y+" +lon_0=11"+Sn+ee+l+ct+oo+r+t,1,u+y+" +lon_0=13"+Sn+ee+l+ct+oo+r+t,1,u+y+yr+Sn+ee+l+ct+oo+r+t,1,u+y+C2+Sn+ee+l+ct+oo+r+t,1,u+y+Tg+Sn+ee+l+ct+oo+r+t,1,u+y+vr+Sn+ee+l+ct+oo+r+t,1,u+y+cb+Sn+ee+l+ct+oo+r+t,1,u+y+Eg+Sn+ee+l+ct+oo+r+t,1,I+ua+ct+oo+r+t,1,C+c2+Cu+Ki+qS+Ge+_k+ie+LC+r+t,1,I+Ka+ct+oo+r+t,1,I+Ks+ct+oo+r+t,1,I+hi+ct+oo+r+t,1,C+ES+OS+Yt+kg+bt+l+vt+r+t,1,C+ES+OS+Yt+Bu+bt+l+vt+r+t,1,C+ES+OS+Yt+" +lon_0=-42"+bt+l+vt+r+t,1,C+Bo+Uo+Yt+a6+bt+l+vt+r+t,1,C+Bo+Uo+Yt+kg+bt+l+vt+r+t,1,C+Bo+Uo+Yt+Bu+bt+l+vt+r+t,1,C+Bo+Uo+Yt+Gu+bt+l+vt+r+t,1,C+Bo+Uo+Yt+ub+bt+l+vt+r+t,1,C+Bo+Uo+Yt+E2+bt+l+vt+r+t,1,C+Bo+Uo+Yt+nc+bt+l+vt+r+t,1,C+Bo+Uo+Yt+Sa+bt+l+vt+r+t,1,C+Bo+Uo+Yt+Zo+bt+l+vt+r+t,1,C+Bo+Uo+Yt+$s+bt+l+vt+r+t,1,C+Bo+Uo+Yt+Qo+bt+l+vt+r+t,1,C+Bo+Uo+Yt+w2+bt+l+vt+r+t,1,C+Bo+Uo+Yt+Sd+bt+l+vt+r+t,1,C+Bo+Uo+Yt+sb+bt+l+vt+r+t,1,C+ja+Ba+Yt+" +lon_0=-102"+bt+l+vt+r+t,1,C+ja+Ba+Yt+pn+bt+l+vt+r+t,1,C+ja+Ba+Yt+" +lon_0=-78"+bt+l+vt+r+t,1,C+ja+Ba+Yt+kg+bt+l+vt+r+t,1,C+ja+Ba+Yt+" +lon_0=-18"+bt+l+vt+r+t,1,C+ja+Ba+Yt+" +lon_0=-6"+bt+l+vt+r+t,1,C+ja+Ba+Yt+R2+bt+l+vt+r+t,1,C+ja+Ba+Yt+Cd+bt+l+vt+r+t,1,C+ja+Ba+Yt+ci+bt+l+vt+r+t,1,C+ja+Ba+Yt+Gu+bt+l+vt+r+t,1,C+ja+Ba+Yt+ub+bt+l+vt+r+t,1,C+ja+Ba+Yt+E2+bt+l+vt+r+t,1,C+ja+Ba+Yt+nc+bt+l+vt+r+t,1,C+ja+Ba+Yt+Sa+bt+l+vt+r+t,1,C+ja+Ba+Yt+Zo+bt+l+vt+r+t,1,C+ja+Ba+Yt+$s+bt+l+vt+r+t,1,C+ja+Ba+Yt+Qo+bt+l+vt+r+t,1,C+ja+Ba+Yt+w2+bt+l+vt+r+t,1,C+ja+Ba+Yt+Sd+bt+l+vt+r+t,1,C+ja+Ba+Yt+sb+bt+l+vt+r+t,1,C+ja+Ba+Yt+b6+bt+l+vt+r+t,1,C+Pi+wi+Yt+C4+bt+l+vt+r+t,1,C+Pi+wi+Yt+I4+bt+l+vt+r+t,1,C+Pi+wi+Yt+Iu+bt+l+vt+r+t,1,C+Pi+wi+Yt+Yo+bt+l+vt+r+t,1,C+Pi+wi+Yt+_n+bt+l+vt+r+t,1,C+Pi+wi+Yt+ib+bt+l+vt+r+t,1,C+Pi+wi+Yt+" +lon_0=-27"+bt+l+vt+r+t,1,C+Pi+wi+Yt+" +lon_0=-9"+bt+l+vt+r+t,1,C+Pi+wi+Yt+Va+bt+l+vt+r+t,1,C+Pi+wi+Yt+Zr+bt+l+vt+r+t,1,C+Pi+wi+Yt+Ki+bt+l+vt+r+t,1,C+Pi+wi+Yt+Fd+bt+l+vt+r+t,1,C+Pi+wi+Yt+Jr+bt+l+vt+r+t,1,C+Pi+wi+Yt+ea+bt+l+vt+r+t,1,C+Pi+wi+Yt+Mr+bt+l+vt+r+t,1,C+Pi+wi+Yt+Dr+bt+l+vt+r+t,1,C+Pi+wi+Yt+Lu+bt+l+vt+r+t,1,C+Pi+wi+Yt+Bl+bt+l+vt+r+t,1,C+Mi+Di+Yt+i6+bt+l+vt+r+t,1,C+Mi+Di+Yt+" +lon_0=-144"+bt+l+vt+r+t,1,C+Mi+Di+Yt+md+bt+l+vt+r+t,1,C+Mi+Di+Yt+bd+bt+l+vt+r+t,1,C+Mi+Di+Yt+x6+bt+l+vt+r+t,1,C+Mi+Di+Yt+" +lon_0=-48"+bt+l+vt+r+t,1,C+Mi+Di+Yt+" +lon_0=-24"+bt+l+vt+r+t,1,C+Mi+Di+Yt+Hn+bt+l+vt+r+t,1,C+Mi+Di+Yt+Da+bt+l+vt+r+t,1,C+Mi+Di+Yt+lb+bt+l+vt+r+t,1,C+Mi+Di+Yt+S6+bt+l+vt+r+t,1,C+Mi+Di+Yt+zc+bt+l+vt+r+t,1,C+Mi+Di+Yt+Gc+bt+l+vt+r+t,1,C+Mi+Di+Yt+g6+bt+l+vt+r+t,1,C+Mi+Di+Yt+m6+bt+l+vt+r+t,1,vn+Yt+yi+o6+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+I4+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+" +lon_0=-105 +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+y6+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+" +lon_0=-45 +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+" +lon_0=-15 +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+yr+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+Ki+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+Qr+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+ir+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+Dr+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+Nu+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+mg+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+pn+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+" +lon_0=-30 +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+ci+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+Sa+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+Sd+" +k=1"+bt+l+vt+r+t,1,vn+Yt+yi+Hn+" +k=1"+bt+l+vt+r+t,1,C+Mi+Di+" +lat_0=-78"+sb+bt+l+vt+r+t,2,I+To+st+c+u3+r+t,1,I+lc+st+c+u3+r+t,1,I+Eo+st+c+u3+r+t,1,I+ql+st+c+u3+r+t,1,C+bE+" +lat_2=58"+xE+Da+X+" +y_0=6375000"+c+wC+r+t,1,C+bE+" +lat_2=58"+xE+Da+X+" +y_0=6375000"+c+m+r+t,1,I+Eo+st+ct+xC+r+t,1,I+Eo+st+ct+hC+r+t,1,I+lc+st+ct+gC+r+t,1,I+lc+st+ct+mC+r+t,1,I+To+st+ct+jC+r+t,1,I+la+de+pI+r+t,1,C+" +lat_1=-30.75 +lat_2=-35.75 +lat_0=-33.25"+vd+" +x_0=9300000"+ms+c+m+r+t,1,tr+I6+c6+y+md+bt+$3+Rt+r+t,1,tr+I6+c6+y+md+bt+$3+c+m+r+t,1,tr+I6+c6+y+md+bt+$3+c+m+r+t,1,I+cr+ct+pS+r+t,1,I+cr+c+m+r+t,3,u+y+C6+dt+X+un+ie+r+t,1,u+y+Da+dt+X+un+ie+r+t,1,u+y+Ma+dt+X+un+ie+r+t,1,u+y+" +lon_0=14"+dt+X+un+ie+r+t,1,u+y+" +lon_0=16"+dt+X+un+ie+r+t,1,u+y+Cd+dt+X+un+ie+r+t,1,u+y+O2+dt+X+un+ie+r+t,1,u+y+C6+dt+X+un+ie+r+t,1,u+y+Da+dt+X+un+ie+r+t,1,u+y+F2+dt+X+un+ie+r+t,1,u+y+Rg+dt+X+un+ie+r+t,1,u+y+ci+dt+X+un+ie+r+t,1,ho+" +lat_0=52.16666666666666 +lon_0=19.16666666666667 +k=0.999714"+X+Le+H+qr+r+t,1,u+y+yr+" +k=1"+si+l+H+qr+r+t,1,u+y+Cd+" +k=1"+Su+l+H+qr+r+t,1,u+y+vr+" +k=1"+Lc+l+H+qr+r+t,1,u+y+Da+" +k=1"+Xp+l+H+qr+r+t,1,u+y+yr+" +k=1"+Qn+l+H+qr+r+t,1,u+y+vr+" +k=1"+wa+l+H+qr+r+t,1,u+y+Zr+" +k=1"+si+l+H+qr+r+t,1,I+Ku+st+ct+gI+r+t,1,C+" +lat_1=-20.19506944444445 +lat_0=-20.19506944444445 +lon_0=57.52182777777778 +k_0=1"+Tn+Fe+ie+WC+r+t,1,tr+" +lat_1=55"+Md+k6+gd+bt+l+c+m+r+t,1,u+y+Ma+dt+X+un+ie+g3+r+t,1,u+y+" +lon_0=14"+dt+X+un+ie+g3+r+t,1,u+y+" +lon_0=16"+dt+X+un+ie+g3+r+t,1,I+Ka+st+ie+g3+r+t,1,I+_a+c+m+r+t,1,I+qa+c+m+r+t,1,I+ic+c+m+r+t,1,u+y+Da+T2+X+l+c+m+r+t,1,C+bo+Ra+" +lat_0=63.390675"+UI+" +x_0=6200000"+Si+c+m+r+t,1,C+bo+Ra+" +lat_0=63.390675"+UI+" +x_0=6200000"+Si+c+m+r+t,2,u+" +lat_0=0.1 +lon_0=21.95 +k=1"+Mn+l+H+Nt+r+t,1,u+" +lat_0=0.1 +lon_0=24.95 +k=1 +x_0=1250000"+l+H+Nt+r+t,1,u+" +lat_0=0.1 +lon_0=27.95 +k=1 +x_0=2250000"+l+H+Nt+r+t,1,I+ua+st+ct+r+t,1,I+ua+st+ct+r+t,1,u+Sr+_d+" +k=1 +x_0=615000 +y_0=810000"+Oc+$C+r+t,3,C+B1+U1+nd+Du+A8+l+c+m+r+t,2,C+V1+sg+bf+_n+og+l+c+m+r+t,1,C+V1+sg+bf+_n+og+l+c+m+se+t,1,C+Vp+q1+hs+Hi+Bt+l+c+m+r+t,1,C+Vp+q1+hs+Hi+Bt+l+c+m+D+t,1,C+gf+mf+Ir+Hi+Bt+l+c+m+r+t,1,C+gf+mf+Ir+Hi+Bt+l+c+m+D+t,2,I+_a+ie+r+t,1,I+qa+ie+r+t,1,I+ic+ie+r+t,1,I+yo+Rt+r+t,1,I+Xc+Rt+r+t,1,I+yo+c+m+r+t,1,I+Xc+c+m+r+t,1,I+qa+ct+r+t,1,Gr+R0+Ak+" +alpha=323.0257964666666"+Cg+" +x_0=804671"+l+Za+Um+c+r+t,1,Gr+R0+T6+OF+Cg+bt+l+Za+O3+c+r+t,1,br+" +lat_0=2.121679744444445 +lon_0=103.4279362361111 +x_0=-14810.562 +y_0=8758.32"+c+r+t,1,br+" +lat_0=2.682347636111111 +lon_0=101.9749050416667 +x_0=3673.785 +y_0=-4240.573"+c+r+t,1,br+" +lat_0=3.769388088888889 +lon_0=102.3682989833333 +x_0=-7368.228 +y_0=6485.858"+c+r+t,1,br+" +lat_0=3.68464905 +lon_0=101.3891079138889 +x_0=-34836.161 +y_0=56464.049"+c+r+t,1,br+" +lat_0=4.9762852 +lon_0=103.070275625 +x_0=19594.245 +y_0=3371.895"+c+r+t,1,br+" +lat_0=5.421517541666667 +lon_0=100.3443769638889 +x_0=-23.414 +y_0=62.283"+c+r+t,1,br+" +lat_0=5.964672713888889 +lon_0=100.6363711111111"+bt+l+c+r+t,1,br+" +lat_0=4.859063022222222 +lon_0=100.8154105861111 +x_0=-1.769 +y_0=133454.779"+c+r+t,1,br+" +lat_0=5.972543658333334 +lon_0=102.2952416694444 +x_0=13227.851 +y_0=8739.894"+c+r+t,1,u+y+Cd+" +k=1"+X+l+ct+Om+r+t,1,u+y+Pa+" +k=1"+si+l+ct+Om+r+t,1,Dl+Wu+" +lat_ts=42"+bt+l+H+Nt+r+t,1,u+y+v2+" +k=1 +x_0=60500000"+l+H+Nt+r+t,1,u+y+v2+" +k=1 +x_0=60500000"+l+H+jt+r+t,1,I+Ya+ie+f3+r+t,1,I+Aa+ie+f3+r+t,1,I+la+ie+f3+r+t,1,C+c2+Cu+Ki+qS+Ge+_k+ie+r+t,1,Dl+Hn+" +k=1"+bt+l+vt+r+t,1,u+y+Va+" +k=1"+Qn+l+Xt+r+t,1,u+y+Ma+" +k=1"+wa+l+Xt+r+t,1,u+y+Ma+" +k=1"+wa+l+Xt+r+t,1,u+y+yr+" +k=1"+si+l+Xt+r+t,1,u+y+l6+" +k=0.9992"+X+l+c+m+r+t,1,u+y+l6+" +k=0.9992"+bt+l+c+m+r+t,1,u+y+l6+" +k=0.9992"+X+l+c+m+r+t,1,u+y+l6+" +k=0.9992"+bt+l+c+m+r+t,1,C+B1+U1+nd+Du+ke+l+c+m+D+t,1,I+ks+de+nS+r+t,1,I+As+de+nS+r+t,1,br+iE+sE+" +x_0=40243.57775604237 +y_0=19069.93351512578"+xu+yu+r8+t,1,Gs+ka+Hn+bt+l+o7+c7+r+t,1,Gs+Yt+Hn+bt+l+o7+c7+r+t,1,"+proj=cea"+Hn+" +lat_ts=30"+bt+l+o7+c7+r+t,1,vn+ka+" +lat_ts=70 +lon_0=-45 +k=1"+bt+l+l7+_8+r+t,1,vn+Yt+" +lat_ts=-70"+Hn+" +k=1"+bt+l+l7+_8+r+t,1,vn+ka+" +lat_ts=70 +lon_0=-45 +k=1"+bt+l+vt+r+t,1,u+" +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572"+de+r+t,1,C+" +lat_1=18 +lat_2=24 +lat_0=21"+$s+X+Le+Ct+re+r+t,1,C+bo+Ul+" +lat_0=47.5"+F3+ye+Uc+c+m+r+t,1,C+If+Tf+Oa+Wi+Ge+Ep+c+m+D+t,1,C+ni+Ef+Vn+Wi+Yn+l+c+m+D+t,1,C+Of+Ff+Ua+Pr+Ta+l+c+m+D+t,1,C+Pf+Mf+Je+Hr+Ta+Dp+c+m+D+t,1,u+Er+Gh+dt+Rp+i8+c+m+D+t,1,u+Er+Hh+dt+Yn+qo+c+m+D+t,1,u+Er+zh+dt+ri+o8+c+m+D+t,1,u+us+Us+dt+En+l+c+m+D+t,1,C+If+Tf+Oa+Wi+Ge+Ep+c+m+D+t,1,C+ni+Ef+Vn+Wi+Yn+l+c+m+D+t,1,C+Of+Ff+Ua+Pr+Ta+l+c+m+D+t,1,C+Pf+Mf+Je+Hr+Ta+Dp+c+m+D+t,1,u+Er+Gh+dt+Rp+i8+c+m+D+t,1,u+Er+Hh+dt+Yn+qo+c+m+D+t,1,u+Er+zh+dt+ri+o8+c+m+D+t,1,u+us+Us+dt+En+l+c+m+D+t,1,C+kf+Af+fs+Vi+Ta+l+c+m+D+t,1,C+_f+dd+Cf+Vi+Ta+Dp+c+m+D+t,1,u+Je+Rh+bu+Ni+l+c+m+D+t,1,u+Je+Lh+An+s8+l+c+m+D+t,1,u+Fa+Xh+rn+Ni+l+c+m+D+t,1,u+Df+zi+zp+R3+l+c+m+D+t,1,I+la+ie+iS+r+t,1,I+ws+ie+iS+r+t,1,C+kf+Af+fs+Vi+Ta+l+c+m+D+t,1,C+_f+dd+Cf+Vi+Ta+Dp+c+m+D+t,1,u+Je+Rh+bu+Ni+l+c+m+D+t,1,u+Je+Lh+An+s8+l+c+m+D+t,1,u+Fa+Xh+rn+Ni+l+c+m+D+t,1,u+Df+zi+zp+R3+l+c+m+D+t,1,C+Tw+Ew+" +lat_0=50.797815"+yE+" +x_0=150328 +y_0=166262"+c+m+r+t,1,C+" +lat_1=18"+M0+Nl+" +k_0=1"+T4+" +y_0=650000"+de+m+r+t,1,I+Wr+de+m+r+t,1,I+or+de+m+r+t,1,C+up+hp+Vo+$o+Lf+l+c+m+D+t,1,C+ug+hg+fg+pl+Lf+l+c+m+D+t,1,C+l0+u0+" +lat_0=25.5"+pl+Lf+l+c+m+D+t,2,C+pg+kp+Rf+Fi+Bt+l+c+m+D+t,1,C+up+hp+Vo+$o+Lf+l+c+m+D+t,1,C+ug+hg+fg+pl+Lf+l+c+m+D+t,1,C+vp+Sp+ba+Jn+Bt+l+c+m+D+t,1,C+pg+kp+Rf+Fi+Bt+l+c+m+D+t,1,u+" +lat_0=-17 +lon_0=178.75 +k=0.99985"+Ln+ad+Ct+ne+r+t,1,I+_a+Ue+Xe+kS+r+t,1,I+qa+Ue+Xe+kS+r+t,1,u+E4+C8+mo+X+l+c+m+r+t,1,u+E4+C8+mo+X+l+c+m+r+t,1,u+Vo+_3+vg+ee+l+c+m+r+t,1,u+Sr+eb+Un+Bt+l+c+m+r+t,1,tr+" +lat_1=55"+Md+k6+gd+bt+l+c+m+r+t,1,Gr+" +lat_0=57"+Ow+Fw+dt+sd+vi+Za+Um+c+m+r+t,1,u+Kn+O4+dt+X+l+c+m+r+t,1,u+Kn+F4+dt+X+l+c+m+r+t,1,u+Kn+mg+dt+X+l+c+m+r+t,1,u+Kn+gd+dt+X+l+c+m+r+t,1,u+Kn+T0+dt+X+l+c+m+r+t,1,u+Kn+P4+dt+X+l+c+m+r+t,1,u+Kn+M4+dt+X+l+c+m+r+t,1,u+Kn+s6+dt+X+l+c+m+r+t,1,C+Pw+Mw+P2+D4+Tn+l+c+m+r+t,1,u+We+Ah+dt+oa+l+c+m+r+t,1,u+We+Ah+dt+oa+l+c+m+se+t,1,u+We+kh+dt+oa+l+c+m+r+t,1,u+We+kh+dt+oa+l+c+m+se+t,1,u+We+Bf+Un+oa+l+c+m+r+t,1,u+We+Bf+Un+oa+l+c+m+se+t,1,C+kf+Af+fs+Vi+ye+l+c+m+r+t,1,C+kf+Af+fs+Vi+Ta+l+c+m+D+t,1,C+_f+dd+Cf+Vi+ye+Uc+c+m+r+t,1,C+_f+dd+Cf+Vi+Ta+Dp+c+m+D+t,1,tr+I6+c6+y+md+bt+$3+c+m+r+t,1,C+Kh+ys+Ir+qi+Ln+Le+c+m+r+t,1,C+Kh+ys+Ir+qi+aa+pr+c+m+D+t,1,C+Yh+Zh+Br+qi+Ln+Le+c+m+r+t,1,C+Yh+Zh+Br+qi+aa+pr+c+m+D+t,1,C+Ri+Qh+cd+ze+Ln+Le+c+m+r+t,1,C+Ri+Qh+cd+ze+aa+pr+c+m+D+t,1,C+Zf+Id+Jh+ld+Ln+Le+c+m+r+t,1,C+Zf+Id+Jh+ld+aa+pr+c+m+D+t,1,C+tf+ef+ud+Bc+Ln+Le+c+m+r+t,1,C+tf+ef+ud+Bc+aa+pr+c+m+D+t,1,C+nf+rf+af+Uf+Ln+Le+c+m+r+t,1,C+nf+rf+af+Uf+aa+pr+c+m+D+t,1,C+Qf+Jf+ou+Zn+Sl+kl+c+m+r+t,1,C+Qf+Jf+ou+Zn+Ic+xl+c+m+D+t,1,C+I1+T1+Ir+Zn+Sl+kl+c+m+r+t,1,C+I1+T1+Ir+Zn+Ic+xl+c+m+D+t,1,C+Ri+sf+Je+Zn+Sl+kl+c+m+r+t,1,C+Ri+sf+Je+Zn+Ic+xl+c+m+D+t,1,C+of+hd+cf+Vf+g8+m8+c+m+r+t,1,C+of+hd+cf+Vf+Vw+Kw+c+m+D+t,1,u+fn+_h+fd+ee+l+c+m+r+t,1,u+fn+_h+fd+gr+l+c+m+D+t,1,u+Li+_n+An+ee+l+c+m+r+t,1,u+Li+_n+An+gr+l+c+m+D+t,1,tr+" +lat_1=24"+k4+" +lat_0=24"+Mu+ye+l+c+m+r+t,1,C+td+lf+Td+ed+Bt+l+c+m+r+t,1,C+td+lf+Td+ed+Bt+l+c+m+D+t,1,u+Li+yd+An+ee+l+c+m+r+t,1,u+Li+yd+An+gr+l+c+m+D+t,1,u+Sr+Ch+dt+ee+l+c+m+r+t,1,u+Sr+Ch+dt+gr+l+c+m+D+t,1,u+Sr+Ih+dt+sa+l+c+m+r+t,1,u+Sr+Ih+dt+yl+l+c+m+D+t,1,u+wn+Rl+ji+X+l+c+m+r+t,1,u+wn+Rl+ji+mr+l+c+m+D+t,1,u+wn+Th+ji+ee+l+c+m+r+t,1,u+wn+Th+ji+gr+l+c+m+D+t,1,u+wn+Gf+Un+ar+l+c+m+r+t,1,u+wn+Gf+Un+Yw+l+c+m+D+t,1,u+Je+Rh+bu+ve+l+c+m+r+t,1,u+Je+Rh+bu+Ni+l+c+m+D+t,1,u+Je+Lh+An+sa+l+c+m+r+t,1,u+Je+Lh+An+s8+l+c+m+D+t,1,u+Or+Nh+rn+hn+E0+c+m+r+t,1,u+Or+Nh+rn+a8+Tp+c+m+D+t,1,u+Or+jh+rn+bs+E0+c+m+r+t,1,u+Or+jh+rn+bs+Tp+c+m+D+t,1,C+If+Tf+Oa+Wi+Ge+Fe+c+m+r+t,1,C+If+Tf+Oa+Wi+Ge+Ep+c+m+D+t,1,C+ni+Ef+Vn+Wi+X+l+c+m+r+t,1,C+ni+Ef+Vn+Wi+Yn+l+c+m+D+t,1,C+Of+Ff+Ua+Pr+ye+l+c+m+r+t,1,C+Of+Ff+Ua+Pr+Ta+l+c+m+D+t,1,C+Pf+Mf+Je+Hr+ye+Uc+c+m+r+t,1,C+Pf+Mf+Je+Hr+Ta+Dp+c+m+D+t,1,C+ls+Vh+Or+$f+X+l+c+m+r+t,1,C+ls+Vh+Or+$f+mr+l+c+m+D+t,1,C+Cp+Ip+Ur+Ui+Ge+Fe+c+m+r+t,1,C+Cp+Ip+Ur+Ui+Ge+wl+c+m+D+t,1,C+E1+O1+Ur+Ui+X+Le+c+m+r+t,1,C+E1+O1+Ur+Ui+mr+pr+c+m+D+t,1,C+up+hp+Vo+$o+Tn+l+c+m+r+t,1,C+up+hp+Vo+$o+Lf+l+c+m+D+t,1,C+ug+hg+fg+pl+Tn+l+c+m+r+t,1,C+ug+hg+fg+pl+Lf+l+c+m+D+t,1,u+E4+C8+mo+X+l+c+m+r+t,1,u+ba+S8+mo+sa+l+c+m+r+t,1,u+ds+k8+mo+ve+l+c+m+r+t,1,u+ma+po+dt+ve+l+c+m+r+t,1,u+ds+Bh+rn+bs+l+c+m+r+t,1,C+$p+ng+Br+Nl+ye+l+c+m+r+t,1,C+ni+h0+bl+In+Yn+Ep+c+m+D+t,1,u+kw+P8+rn+Ne+l+ge+Px+D+t,1,u+Aw+iw+rn+Ne+l+ge+Px+D+t,1,u+Lm+T0+Jo+Ne+l+ge+Px+D+t,1,u+_w+M8+Jo+Ne+l+ge+Px+D+t,1,u+Cw+sw+" +k=1"+Ne+l+ge+Px+D+t,1,C+k0+f0+Ua+In+Yn+c8+c+m+D+t,1,C+A0+d0+Je+In+Yn+Si+c+m+D+t,1,C+ni+h0+bl+In+Yn+Ep+c+m+D+t,1,C+k0+f0+Ua+In+Yn+c8+c+m+D+t,1,C+A0+d0+Je+In+Yn+Si+c+m+D+t,1,Gs+ka+v2+bt+l+vt+r+t,1,Gs+ka+mg+bt+l+vt+r+t,1,Gs+ka+Jn+bt+l+vt+r+t,1,Gs+ka+" +lon_0=-40"+bt+l+vt+r+t,1,Gs+ka+rc+bt+l+vt+r+t,1,Gs+ka+Sa+bt+l+vt+r+t,1,tr+" +lat_1=-18"+r7+y+Ws+bt+l+c+m+r+t,1,tr+wE+" +lat_2=68 +lat_0=59 +lon_0=-132.5"+X+Le+c+m+r+t,1,tr+wE+" +lat_2=68 +lat_0=59 +lon_0=-132.5"+X+Le+c+m+r+t,1,C+" +lat_1=62 +lat_2=70"+y+" +lon_0=-112"+bt+l+c+m+r+t,1,C+" +lat_1=62 +lat_2=70"+y+" +lon_0=-112"+bt+l+c+m+r+t,1,C+$p+ng+Br+Nl+Zw+l+c+m+D+t,1,C+P1+M1+ki+Rc+X+l+c+m+r+t,1,C+P1+M1+ki+Rc+mr+l+c+m+D+t,1,C+F1+uf+ki+zi+ee+od+c+m+r+t,1,C+F1+uf+ki+zi+gr+od+c+m+D+t,1,C+rg+N1+j1+js+Zx+l+c+m+r+t,1,C+rg+N1+j1+js+Jw+l+c+m+se+t,1,C+D1+R1+L1+Ko+t4+l+c+m+r+t,1,C+D1+R1+L1+Ko+Qw+l+c+m+se+t,1,Gr+Iw+" +lonc=-86"+b8+pe+x8+p8+Za+y8+c+m+r+t,1,C+ml+ag+Oa+js+rd+l+c+m+r+t,1,C+ml+ag+Oa+js+f8+l+c+m+se+t,1,C+Qp+pp+Wa+Yf+ar+zr+c+m+r+t,1,C+fp+dp+jc+Uh+ar+zr+c+m+r+t,1,C+gp+mp+Hl+ju+ar+zr+c+m+r+t,1,u+Hs+Eh+Sn+ve+l+c+m+r+t,1,u+Hs+Eh+Sn+Ni+l+c+m+D+t,1,u+Hs+c0+Sn+sa+l+c+m+r+t,1,u+Hs+c0+Sn+yl+l+c+m+D+t,1,u+fu+$o+Un+X+l+c+m+r+t,1,u+fu+Y3+Un+Mn+l+c+m+r+t,1,u+T3+Z3+An+y4+l+c+m+r+t,1,C+bo+Og+qp+w0+Bt+l+c+m+r+t,1,C+bo+Og+qp+w0+vl+l+c+m+se+t,1,C+Yi+ys+bp+Jn+X+l+c+m+r+t,1,u+Er+Hh+dt+X+qo+c+m+r+t,1,u+Er+Hh+dt+Yn+qo+c+m+D+t,1,u+Er+Gh+dt+ee+e4+c+m+r+t,1,u+Er+Gh+dt+Rp+i8+c+m+D+t,1,u+Er+zh+dt+ar+ad+c+m+r+t,1,u+Er+zh+dt+ri+o8+c+m+D+t,1,u+Fa+Xh+rn+ve+l+c+m+r+t,1,u+Fa+Xh+rn+Ni+l+c+m+D+t,1,u+us+Us+dt+En+l+c+m+r+t,1,u+us+Us+dt+En+l+c+m+D+t,1,u+We+Hf+dt+X+l+c+m+r+t,1,u+We+Hf+dt+mr+l+c+m+D+t,1,u+We+Oh+x0+ig+l+c+m+r+t,1,u+We+Oh+x0+ig+l+c+m+D+t,1,u+We+Fh+zf+w4+l+c+m+r+t,1,u+We+Fh+zf+t8+l+c+m+D+t,1,u+Vn+Ph+Ze+Mn+l+c+m+r+t,1,u+Vn+Ph+Ze+e8+l+c+m+D+t,1,u+us+Us+dt+En+l+c+m+r+t,1,u+us+Us+dt+En+l+c+m+D+t,1,C+hf+ff+hs+wd+ve+l+c+m+r+t,1,C+hf+ff+hs+wd+Ni+l+c+m+D+t,1,u+Vn+Mh+Ze+s2+l+c+m+r+t,1,u+Vn+Mh+Ze+n8+l+c+m+D+t,1,C+B1+U1+nd+Du+A8+l+c+m+r+t,1,C+B1+U1+nd+Du+ke+l+c+m+D+t,1,C+Bs+G1+li+Gi+Bt+l+c+m+r+t,1,C+Bs+G1+li+Gi+vl+l+c+m+se+t,1,C+H1+z1+Ac+Gi+Bt+l+c+m+r+t,1,C+H1+z1+Ac+Gi+vl+l+c+m+se+t,1,C+dg+xp+Go+Xa+Bt+l+c+m+r+t,1,C+yp+wp+fn+Xa+Bt+l+c+m+r+t,1,C+df+X1+Ed+Pr+Bt+l+c+m+r+t,1,C+df+X1+Ed+Pr+Bt+l+c+m+D+t,1,C+W1+$1+pf+Pr+Bt+l+c+m+r+t,1,C+W1+$1+pf+Pr+Bt+l+c+m+D+t,1,C+Yi+Xs+$i+ze+ye+l+c+m+r+t,1,C+Yi+Xs+$i+ze+G3+l+c+m+se+t,1,C+Hu+cu+ma+ze+Kr+l+c+m+r+t,1,C+Hu+cu+ma+ze+B3+l+c+m+se+t,1,C+zu+lu+wn+ze+Ge+l+c+m+r+t,1,C+zu+lu+wn+ze+U3+l+c+m+se+t,1,C+Vp+q1+hs+Hi+Bt+l+c+m+r+t,1,C+Vp+q1+hs+Hi+Bt+l+c+m+D+t,1,C+gf+mf+Ir+Hi+Bt+l+c+m+r+t,1,C+gf+mf+Ir+Hi+Bt+l+c+m+D+t,1,u+Df+zi+zp+hn+l+c+m+r+t,1,u+Df+zi+zp+R3+l+c+m+D+t,1,C+V1+sg+bf+_n+og+l+c+m+r+t,1,C+V1+sg+bf+_n+og+l+c+m+se+t,1,C+vp+Sp+ba+Jn+Bt+l+c+m+r+t,1,C+vp+Sp+ba+Jn+Bt+l+c+m+D+t,1,C+pg+kp+Rf+Fi+Bt+l+c+m+r+t,1,C+pg+kp+Rf+Fi+Bt+l+c+m+D+t,1,C+K1+Kp+fs+P0+Bt+l+c+m+r+t,1,C+K1+Kp+fs+P0+Bt+l+c+m+D+t,1,C+J1+tp+uu+Fi+sa+Si+c+m+r+t,1,C+J1+tp+uu+Fi+yl+Si+c+m+D+t,1,tr+gg+Dg+M0+Jn+Ge+qo+c+m+r+t,1,C+gg+Dg+M0+Jn+Ge+ku+c+m+r+t,1,C+Y1+Yp+Od+Kf+ee+Fe+c+m+r+t,1,C+Y1+Yp+Od+Kf+gr+wl+c+m+D+t,1,C+Z1+Q1+xf+Hr+Bt+ia+c+m+r+t,1,C+Z1+Q1+xf+Hr+Bt+Pp+c+m+D+t,1,C+l0+u0+hu+Hr+ve+ku+c+m+r+t,1,C+l0+u0+hu+Hr+Ni+u8+c+m+D+t,1,C+ep+np+yf+Yo+Bt+ad+c+m+r+t,1,C+ep+np+yf+Yo+Bt+l8+c+m+D+t,1,C+k0+f0+Ua+In+X+ia+c+m+r+t,1,C+k0+f0+Ua+In+Nf+nk+c+m+se+t,1,C+k0+f0+Ua+In+Yn+c8+c+m+D+t,1,C+ni+h0+bl+In+X+Fe+c+m+r+t,1,C+ni+h0+bl+In+Nf+KS+c+m+se+t,1,C+ni+h0+bl+In+Yn+Ep+c+m+D+t,1,C+A0+d0+Je+In+X+Si+c+m+r+t,1,C+A0+d0+Je+In+Nf+rk+c+m+se+t,1,C+A0+d0+Je+In+Yn+Si+c+m+D+t,1,u+Fa+id+Xf+X+l+c+m+r+t,1,C+cg+rp+Br+Xi+Qn+ia+c+m+r+t,1,C+cg+rp+Br+Xi+Mp+Pp+c+m+D+t,1,C+ls+wf+Ur+Xi+Qn+Fe+c+m+r+t,1,C+ls+wf+Ur+Xi+Mp+wl+c+m+D+t,1,C+Bs+lg+li+Dh+X+l+c+m+r+t,1,C+Bs+lg+li+Dh+mr+l+c+m+D+t,1,C+ap+ip+vf+ze+X+l+c+m+r+t,1,C+ap+ip+vf+ze+mr+l+c+m+D+t,1,C+Jp+Mg+pd+gs+Bt+l+c+m+r+t,1,C+Ap+_p+Pd+_n+Bt+l+c+m+r+t,1,C+Ll+Zp+ba+pn+Bt+l+c+m+r+t,1,C+Ll+Zp+ba+pn+Bt+l+c+m+D+t,1,C+sp+op+Sf+pn+Bt+l+c+m+r+t,1,C+sp+op+Sf+pn+Bt+l+c+m+D+t,1,C+cp+lp+Xu+pn+Bt+l+c+m+r+t,1,C+cp+lp+Xu+pn+Bt+l+c+m+D+t,1,u+y+pn+pe+S4+D8+c+m+r+t,1,u+Gn+Wh+Ze+ee+l+c+m+r+t,1,u+Gn+$h+Ze+ye+zr+c+m+r+t,1,u+Gn+Wf+Ze+Bt+l+c+m+r+t,1,u+Gn+qh+Ze+ar+zr+c+m+r+t,1,I+yo+c+m+r+t,1,I+Xc+c+m+r+t,1,I+$c+c+m+r+t,1,I+$l+c+m+r+t,1,I+Qu+c+m+r+t,1,I+Kl+c+m+r+t,1,I+To+c+m+r+t,1,I+lc+c+m+r+t,1,I+Eo+c+m+r+t,1,I+ql+c+m+r+t,1,I+Vl+c+m+r+t,1,I+Xl+c+m+r+t,1,I+vo+c+m+r+t,1,I+So+c+m+r+t,1,I+ko+c+m+r+t,1,I+_o+c+m+r+t,1,I+qs+c+m+r+t,1,I+Vs+c+m+r+t,1,I+Wr+c+m+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,u+" +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=160000"+S2+ct+iI+r+t,1,C+dg+xp+Go+Xa+Bt+l+c+m+D+t,1,C+yp+wp+fn+Xa+Bt+l+c+m+D+t,1,u+Gn+Wh+Ze+Rp+l+c+m+D+t,1,u+Gn+$h+Ze+Ta+ai+c+m+D+t,1,u+Gn+Wf+Ze+Bt+l+c+m+D+t,1,u+Gn+qh+Ze+ri+ai+c+m+D+t,1,C+dg+xp+Go+Xa+Bt+l+c+m+D+t,1,C+yp+wp+fn+Xa+Bt+l+c+m+D+t,1,u+Gn+Wh+Ze+Rp+l+c+m+D+t,1,u+Gn+$h+Ze+Ta+ai+c+m+D+t,1,u+Gn+Wf+Ze+Bt+l+c+m+D+t,1,u+Gn+qh+Ze+ri+ai+c+m+D+t,1,I+Xl+c+m+r+t,1,I+vo+c+m+r+t,1,I+So+c+m+r+t,1,I+ko+c+m+r+t,1,I+_o+c+m+r+t,1,I+qs+c+m+r+t,1,I+Vs+c+m+r+t,1,I+Wr+c+m+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,I+Kl+c+m+r+t,1,I+To+c+m+r+t,2,C+dg+xp+Go+Xa+Bt+l+c+m+D+t,1,C+yp+wp+fn+Xa+Bt+l+c+m+D+t,1,u+Gn+Wh+Ze+Rp+l+c+m+D+t,1,u+Gn+$h+Ze+Ta+ai+c+m+D+t,1,u+Gn+Wf+Ze+Bt+l+c+m+D+t,1,u+Gn+qh+Ze+ri+ai+c+m+D+t,1,u+Lm+T0+Jo+Yn+l+c+m+D+t,1,u+Lm+T0+Jo+Yn+l+c+m+D+t,1,I+na+c+m+r+t,1,C+" +lat_1=-54 +lat_2=-54.75 +lat_0=-55 +lon_0=-37"+bt+l+vt+r+t,1,u+" +lat_0=39.66825833333333 +lon_0=-8.133108333333334 +k=1"+bt+l+c+m+r+t,1,u+u7+R8+" +k=1"+ye+qn+c+m+r+t,1,u+y+v4+dt+X+l+c+m+r+t,1,C+" +lat_1=45.91666666666666 +lat_2=43.08333333333334"+y+v4+bt+l+c+m+r+t,1,I+Ka+c+m+r+t,1,I+Ks+c+m+r+t,1,I+Dn+ge+II+r+t,1,u+" +lat_0=32 +lon_0=-64.75 +k=1 +x_0=550000"+zr+de+m+r+t,1,u+y+O0+dt+bt+l+Rt+r+t,1,u+y+Rl+dt+bt+l+Rt+r+t,1,u+y+Iu+dt+bt+l+Rt+r+t,2,u+y+O0+dt+bt+l+c+m+r+t,1,u+y+Rl+dt+bt+l+c+m+r+t,1,u+y+Iu+dt+bt+l+c+m+r+t,2,u+y+O0+dt+bt+l+c+m+r+t,1,u+y+Rl+dt+bt+l+c+m+r+t,1,u+y+Iu+dt+bt+l+c+m+r+t,2,u+" +lat_0=-25.06855261111111 +lon_0=-130.1129671111111 +k=1 +x_0=14200 +y_0=15500"+de+m+r+t,1,I+Vl+st+ct+MI+r+t,4,u+y+s7+" +k=1"+Qn+un+c+m+r+t,1,u+y+" +lon_0=169 +k=1"+Qn+un+c+m+r+t,1,u+y+" +lon_0=179 +k=1"+Qn+un+c+m+r+t,1,u+y+" +lon_0=-178 +k=1"+Qn+un+c+m+r+t,2,u+y+R8+" +k=1"+Qn+un+c+m+r+t,1,u+y+yr+dt+X+vi+c+m+r+t,1,C+" +lat_1=23 +lat_2=21.7 +lat_0=22.35"+_n+X+" +y_0=280296.016"+Rt+r+t,1,C+" +lat_1=21.3 +lat_2=20.13333333333333 +lat_0=20.71666666666667 +lon_0=-76.83333333333333"+X+" +y_0=229126.939"+Rt+r+t,1,C+A6+Ul+oi+" +lon_0=-70"+ar+l+Rt+r+t,1,C+A6+Ul+oi+" +lon_0=-70"+ar+l+c+m+r+t,1,C+A6+Ul+oi+" +lon_0=-70"+ar+l+c+m+r+t,1,u+y+md+dt+bt+l+Rt+r+t,1,u+y+md+dt+bt+l+c+m+r+t,1,u+y+md+dt+bt+l+c+m+r+t,10,C+Tw+Ew+" +lat_0=50.797815"+yE+" +x_0=649328 +y_0=665262"+c+m+r+t,2,u+Cu+L8+n4+X+Jx+c+m+r+t,1,u+Cu+L8+n4+X+Jx+c+m+r+t,1,u+Cu+L8+n4+X+Jx+c+m+r+t,3,Q+Xt+" +towgs84=595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408"+t,2,Q+He+t,3,Q+c+m+t,1,u+y+a7+dt+Mn+l+c+m+r+t,1,u+y+i7+dt+Mn+l+c+m+r+t,1,u+y+a7+dt+Mn+l+He+r+t,1,u+y+i7+dt+Mn+l+He+r+t,1,I+Ss+ct+ZC+r+t,3,Dl+Sd+" +k=1"+bt+l+vt+r+t,1,u+y+Va+" +k=1"+Kr+l+H+qr+r+t,1,u+y+Va+" +k=1"+Kr+l+H+co+r+t,1,u+y+yr+" +k=1"+Qn+l+H+co+r+t,1,u+y+vr+" +k=1"+wa+l+H+co+r+t,1,u+y+Va+" +k=1"+Qn+l+H+qr+r+t,1,u+y+Ma+" +k=1"+wa+l+H+qr+r+t,1,u+y+Zr+" +k=1"+Wp+l+H+qr+r+t,1,u+y+ci+" +k=1"+Up+l+H+qr+r+t,1,u+y+Cd+" +k=1"+Su+l+H+co+r+t,3,ho+" +lat_0=46"+Eg+x2+X+Le+H+qr+r+t,1,u+y+" +lon_0=11.30625 +k=1.000006 +x_0=1500025.141 +y_0=-667.282"+c+m+r+t,1,u+y+" +lon_0=13.55626666666667 +k=1.0000058 +x_0=1500044.695 +y_0=-667.13"+c+m+r+t,1,u+y+" +lon_0=15.80628452944445 +k=1.00000561024 +x_0=1500064.274 +y_0=-667.711"+c+m+r+t,1,u+y+" +lon_0=18.0563 +k=1.0000054 +x_0=1500083.521 +y_0=-668.8440000000001"+c+m+r+t,1,u+y+" +lon_0=20.30631666666667 +k=1.0000052 +x_0=1500102.765 +y_0=-670.706"+c+m+r+t,1,u+y+" +lon_0=22.55633333333333 +k=1.0000049 +x_0=1500121.846 +y_0=-672.557"+c+m+r+t,1,C+" +lat_1=-37.5 +lat_2=-44.5 +lat_0=-41 +lon_0=173"+Ck+" +y_0=7000000"+c+m+r+t,1,C+Mi+Di+Yt+" +lon_0=157"+X+l+c+m+r+t,2,u+y+" +lon_0=18.05787 +k=0.99999506 +x_0=100182.7406 +y_0=-6500620.1207"+c+m+r+t,3,Dl+" +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0"+l+" +k=1.0"+r+" +nadgrids=@null +wktext "+t,16,u+y+Tg+" +k=1"+_l+l+c+m+r+t,1,u+y+O2+" +k=1"+Mc+l+c+m+r+t,1,u+y+vr+" +k=1"+Tl+l+c+m+r+t,1,u+y+C6+" +k=1"+Dc+l+c+m+r+t,1,u+y+cb+" +k=1"+El+l+c+m+r+t,1,u+y+Da+" +k=1"+Hp+l+c+m+r+t,1,u+y+Eg+" +k=1"+Ol+l+c+m+r+t,1,u+y+F2+" +k=1"+Fl+l+c+m+r+t,1,u+y+Zr+" +k=1"+Pl+l+c+m+r+t,1,u+y+Rg+" +k=1"+Ml+l+c+m+r+t,1,u+y+" +lon_0=29 +k=1"+Wo+l+c+m+r+t,1,u+y+ci+" +k=1"+v0+l+c+m+r+t,1,u+y+_d+" +k=1"+fo+l+c+m+r+t,4,Q+c+m+t,1,I+Ya+c+m+r+t,1,I+Aa+c+m+r+t,1,I+la+c+m+r+t,1,u+vE+" +lon_0=46.5 +k=0.9994"+ar+l+ct+$n+r+t,13,Q+Xt+jo+t,6,u+y+yr+dt+X+vi+Xt+jo+r+t,8,I+Dn+ge+rw+r+t,22,C+" +lat_1=41.25 +lat_2=42.75"+Xu+sc+Au+Q8+c+m+r+t,1,C+" +lat_1=42.25 +lat_2=43.75"+Hl+sc+Au+" +y_0=2200000"+c+m+r+t,1,C+" +lat_1=43.25 +lat_2=44.75"+oi+sc+Au+" +y_0=3200000"+c+m+r+t,1,C+" +lat_1=44.25 +lat_2=45.75"+Wa+sc+Au+" +y_0=4200000"+c+m+r+t,1,C+" +lat_1=45.25 +lat_2=46.75 +lat_0=46"+sc+Au+" +y_0=5200000"+c+m+r+t,1,C+Ik+" +lat_2=47.75"+li+sc+Au+" +y_0=6200000"+c+m+r+t,1,C+" +lat_1=47.25 +lat_2=48.75 +lat_0=48"+sc+Au+" +y_0=7200000"+c+m+r+t,1,C+" +lat_1=48.25 +lat_2=49.75 +lat_0=49"+sc+Au+" +y_0=8200000"+c+m+r+t,1,C+" +lat_1=49.25 +lat_2=50.75"+k6+sc+Au+" +y_0=9200000"+c+m+r+t,18,C+" +lat_1=37"+R4+sr+gs+bt+l+c+m+r+t,1,C+" +lat_1=37"+R4+sr+gs+bt+l+c+m+r+t,1,C+" +lat_1=37"+R4+sr+gs+bt+l+c+m+r+t,6,vn+Yt+" +lat_ts=-70"+Hn+" +k=1"+bt+l+vt+r+t,2,C+bo+Ra+" +lat_0=49 +lon_0=-95"+bt+l+c+m+r+t,1,C+bo+Ra+" +lat_0=49 +lon_0=-95"+bt+l+c+m+r+t,7,u+E6+ci+" +k=1"+ee+Le+ge+Ox+r+t,1,u+E6+Rg+" +k=1"+ee+Le+ge+Ox+r+t,1,u+E6+F2+" +k=1"+ee+Le+ge+Ox+r+t,1,u+E6+Da+" +k=1"+ee+Le+ge+Ox+r+t,2,C+Nm+jm+Bm+Rm+Ne+l+ge+rw+D+t,1,C+Nm+jm+Bm+Rm+Ne+VS+ge+rw+D+t,2,Dl+" +lon_0=100 +lat_ts=-41"+bt+l+vt+r+t,1,vn+ka+" +lat_ts=71"+Hn+" +k=1"+bt+l+vt+r+t,1,vn+ka+" +lat_ts=75"+Hn+" +k=1"+bt+l+vt+r+t,1,u+y+" +lon_0=55.33333333333334 +k=1"+X+l+vt+r+t,4,Q+nb+t,1,Q+z3+t,1,Q+He+t,1,Q+Xt+t,1,Q+y0+m0+t,1,Q+b0+t,1,Q+xu+yu+t,1,Q+ge+t,2,Q+Wx+$x+t,1,Q+Ue+Xe+t,1,Q+ie+t,1,Q+Tr+Bi+t,1,Q+Ue+" +b=6356514.996941779"+t,1,Q+ya+xa+t,1,Q+zm+t,2,Q+zo+Ho+t,1,Q+c+t,1,Q+Oc+t,1,Q+xs+ps+t,1,Q+ct+t,1,Q+c+m+t,0,Q+c+m+t,1,Q+H+t,1,Q+Tk+t,1,u+y+" +lon_0=28.4 +k=0.9999400000000001"+ee+vi+c+m+r+t,1,Q+" +a=6376523"+JS+t,1,Q+mk+ZS+t,1,Q+ab+Gm+t,1,Q+de+t,1,Q+de+t,1,Q+" +a=6378136.2 +b=6356751.516927429"+t,1,Q+" +a=6378136.3 +b=6356751.616592146"+t,1,Q+tk+ek+t,2,Q+Ek+t,1,I+hi+vt+r+t,1,I+vs+vt+r+t,3,Q+Sg+Fp+t,1,Q+Np+Lp+t,1,Q+Ct+t,1,Q+Xm+Hm+t,1,Q+Fc+Tc+t,1,Q+c+m+t,1,Q+" +a=6371007 +b=6371007"+t,1,u+y+Ma+dt+X+un+c+m+r+t,1,u+y+" +lon_0=14"+dt+X+un+c+m+r+t,1,u+y+" +lon_0=16"+dt+X+un+c+m+r+t,1,u+y+Cd+dt+X+un+c+m+r+t,1,Q+" +a=6370997 +b=6370997"+t,1,Q+o7+c7+t,1,Q+l7+_8+t,2,u+y+O2+dt+X+un+c+m+r+t,1,u+y+C6+dt+X+un+c+m+r+t,1,u+y+Da+dt+X+un+c+m+r+t,1,u+y+F2+dt+X+un+c+m+r+t,1,u+y+Rg+dt+X+un+c+m+r+t,1,I+Ka+st+c+m+r+t,1,I+Ks+st+c+m+r+t,1,I+hi+st+c+m+r+t,8,I+Qi+st+ct+mI+r+t,4,Q+c+m+t,6,Q+c+m+t,1,I+Dd+c+m+r+t,1,I+_a+c+m+r+t,4,"+proj=eqc +lat_ts=0"+y+Hn+bt+l+vt+r+t,1,"+proj=eqc +lat_ts=0"+y+Hn+bt+l+" +a=6371007 +b=6371007"+r+t,5,u+y+Va+mo+ee+vi+c+m+r+t,1,u+y+rc+mo+ye+vi+c+m+r+t,1,u+y+" +lon_0=11.75"+mo+Bt+vi+c+m+r+t,1,u+y+yr+" +k=1"+ar+vi+c+m+r+t,24,Q+Xt+t,1,Q+c+GC+t,1,Q+Sg+Fp+t,1,Q+ct+Om+t,1,Q+Xt+Fm+t,3,Q+ge+sS+t,1,Q+ge+t,1,Q+ge+t,1,Q+de+cw+t,1,Q+ya+xa+J5+t,1,Q+ie+LC+t,1,Q+c+wC+t,1,Q+ie+iS+t,1,Q+ge+Px+t,1,Q+ge+t,1,Q+ge+t,1,Q+ge+t,1,Q+ge+rw+t,2,Q+c+NI+t,1,Q+ie+Q5+t,1,Q+ie+K5+t,1,Q+ya+xa+tw+t,1,Q+Xm+Hm+Rx+t,1,Q+Fc+Tc+dl+t,1,Q+H+X5+t,1,Q+de+m+t,1,Q+Xt+b3+t,1,Q+Xt+PC+t,1,Q+c+m+t,1,Q+c+m+t,1,Q+ct+MC+t,1,Q+ct+x3+t,1,Q+Ue+Xe+kS+t,1,Q+Xt+Bx+t,1,Q+xu+yu+t,1,Q+ct+DC+t,1,Q+ct+so+t,1,Q+ct+t,1,Q+ct+JC+t,1,Q+Xt+t,1,Q+de+m+t,1,Q+H+bS+t,1,Q+ct+kI+t,1,Q+de+m+t,1,Q+c+m+t,1,Q+ab+Gm+gS+t,1,Q+ge+dI+t,1,Q+c+m+t,1,Q+c+m+t,2,Q+c+m+t,1,Q+ab+Gm+t,1,Q+ie+IS+t,1,Q+c+m+t,2,Q+H+co+t,1,Q+H+qr+t,1,Q+c+m+t,1,Q+ct+cC+t,1,Q+ct+oI+t,1,Q+ct+cI+t,1,Q+ct+AI+t,4,Q+nb+Ex+t,1,Q+c+m+t,1,Q+c+m+t,1,Q+H+t,1,Q+ct+XC+t,1,Q+Ue+Xe+VC+t,1,Q+ct+dS+t,1,Q+ct+" +towgs84=105,326,-102.5,0,0,0.814,-0.6"+t,1,Q+ct+" +towgs84=-45,417,-3.5,0,0,0.814,-0.6"+t,1,Q+ie+t,1,Q+ie+t,1,Q+ct+t,1,Q+H+jt+t,1,Q+ie+v3+t,1,Q+He+vc+t,1,Q+He+Sh+t,1,Q+ct+C1+t,1,Q+H+xS+t,1,Q+Ue+Xe+t,1,Q+ct+d3+t,1,Q+ct+p3+t,1,Q+Tr+Bi+Y5+t,1,Q+ie+Mm+t,1,Q+Xt+_1+t,1,Q+ie+hS+t,1,Q+Ue+Xe+lI+t,1,Q+H+Ce+t,1,Q+ct+t,1,Q+ge+II+t,1,u+y+Bl+pe+tn+l+c+m+D+t,0,u+y+Bl+pe+tn+l+c+m+D+t,1,Q+ct+Dm+t,1,Q+Xt+" +towgs84=-384,664,-48,0,0,0,0"+t,1,Q+ie+m3+t,1,Q+ct+iu+t,1,Q+Tr+Bi+Sc+t,1,Q+Ue+Xe+Ux+t,1,Q+ct+mI+t,1,Q+ct+Lx+t,2,Q+Ue+Xe+$5+t,2,Q+Oc+S3+t,1,Q+ct+$n+t,1,Q+ct+" +towgs84=-83.11,-97.38,-117.22,0.00569291,-0.0446976,0.0442851,0.1218"+t,1,Q+ie+yS+t,4,Q+ct+ZC+t,1,Q+Ek+KC+t,1,Q+xs+ps+Ns+t,1,Q+ya+xa+ew+t,1,Q+ya+xa+wS+t,1,Q+tk+ek+t,1,Q+ge+bI+t,1,Q+Np+Lp+t,1,Q+ya+xa+DI+t,1,Q+zo+Ho+kc+t,1,Q+ie+qC+t,1,Q+ct+V5+t,1,Q+ct+Ls+t,1,Q+ct+t,1,Q+ie+TI+t,1,Q+ie+" +towgs84=-90,40,88,0,0,0,0"+t,1,Q+Ue+Xe+t,1,Q+ge+Mx+t,1,Q+ct+CS+t,1,Q+ct+" +towgs84=-333,-222,114,0,0,0,0"+t,1,Q+ie+" +towgs84=41,-220,-134,0,0,0,0"+t,1,Q+Xt+q5+t,1,Q+c+m+t,1,Q+ct+zC+t,2,Q+Ue+Xe+A3+t,1,Q+Xt+RI+t,1,Q+ie+Nx+t,2,Q+ct+h3+t,1,Q+Ue+Xe+vS+t,1,Q+Rt+t,2,Q+c+m+t,1,Q+ie+Fx+t,1,Q+ct+EI+t,1,Q+ct+Pn+t,1,Q+y0+m0+nu+t,1,Q+ct+lS+t,1,Q+Ue+Xe+au+t,1,Q+Tk+t,1,Q+nb+vC+t,1,Q+nb+t,1,Q+nb+t,1,Q+Xt+t,1,Q+Wx+$x+z5+t,1,Q+Ue+Xe+xI+t,1,Q+c+m+t,1,Q+H+Nt+t,1,Q+ct+BC+t,1,Q+Oc+t,2,Q+ct+t,1,Q+Xt+rS+t,3,Q+ct+AS+t,1,Q+b0+su+t,2,Q+Xt+t,2,Q+ct+y3+t,1,Q+zm+Dx+t,1,Q+z3+Ex+t,1,Q+z3+Ex+t,1,Q+Xt+Vr+t,1,Q+xu+yu+cS+t,1,Q+Oc+t,1,Q+Ue+Xe+Z5+t,2,Q+Xt+t,1,Q+ie+Em+t,1,Q+Xt+t,1,Q+ct+" +towgs84=-155,171,37,0,0,0,0"+t,1,Q+Ue+Xe+t,1,Q+ct+w3+t,1,Q+Xt+o0+t,1,Q+ct+aS+t,1,Q+Xt+fl+t,1,Q+Ue+Xe+_S+t,1,Q+ct+UC+t,2,Q+de+fS+t,1,Q+c+QC+t,3,Q+Ct+ne+t,2,Q+Ct+re+t,2,Q+vt+t,64,br+" +lat_0=2.042583333333333 +lon_0=103.5627583333333"+bt+l+zo+Ho+kc+r+t,1,br+" +lat_0=2.712283333333334 +lon_0=101.9411666666667 +x_0=-242.005 +y_0=-948.547"+zo+Ho+kc+r+t,1,br+" +lat_0=3.710972222222222 +lon_0=102.4361777777778"+bt+l+zo+Ho+kc+r+t,1,br+" +lat_0=3.680344444444444 +lon_0=101.5082444444444 +x_0=-21759.438 +y_0=55960.906"+zo+Ho+kc+r+t,1,br+" +lat_0=4.946141666666667 +lon_0=102.8952083333333"+bt+l+zo+Ho+kc+r+t,1,br+" +lat_0=5.421325 +lon_0=100.3458694444444"+bt+l+zo+Ho+kc+r+t,1,br+" +lat_0=5.965147222222223 +lon_0=100.6375944444444"+bt+l+zo+Ho+kc+r+t,1,br+" +lat_0=4.859380555555555 +lon_0=100.8167666666667"+bt+" +y_0=133453.669"+zo+Ho+kc+r+t,1,br+" +lat_0=5.893922222222222 +lon_0=102.1772916666667"+bt+l+zo+Ho+kc+r+t,1,u+y+Bl+pe+tn+l+Rt+D+t,1,u+y+Hc+pe+tn+l+Rt+D+t,1,u+y+I0+pe+tn+l+Rt+D+t,1,u+y+_u+pe+tn+l+Rt+D+t,1,u+y+o6+pe+tn+l+Rt+D+t,1,u+y+" +lon_0=-159"+pe+tn+l+Rt+D+t,0,u+y+" +lon_0=-159"+pe+tn+l+Rt+D+t,1,u+y+C4+pe+tn+l+Rt+D+t,1,u+y+l2+pe+tn+l+Rt+D+t,1,u+y+" +lon_0=-141"+pe+tn+l+Rt+D+t,1,u+y+I4+pe+tn+l+Rt+D+t,1,u+y+L4+pe+tn+l+Rt+D+t,1,u+y+" +lon_0=-123"+pe+tn+l+Rt+D+t,1,u+y+Iu+pe+tn+l+Rt+D+t,1,u+y+O0+pe+tn+l+Rt+D+t,1,u+y+" +lon_0=-105"+pe+tn+l+Rt+D+t,1,u+" +lat_0=13.5 +lon_0=144.75 +k=1"+hn+go+c+m+r+t,1,C+" +lat_1=-6.5 +lat_2=-11.5"+E6+F2+X+Le+ge+Ox+r+t,2,u+y+vr+" +k=1"+Lc+l+H+co+r+t,1,u+y+y6+pe+tn+l+Rt+D+t,1,u+y+F0+pe+tn+l+Rt+D+t,1,u+y+Hc+pe+tn+l+c+m+D+t,1,u+y+I0+pe+tn+l+c+m+D+t,1,u+y+_u+pe+tn+l+c+m+D+t,1,u+y+o6+pe+tn+l+c+m+D+t,1,u+y+" +lon_0=-159"+pe+tn+l+c+m+D+t,1,u+y+C4+pe+tn+l+c+m+D+t,1,u+y+l2+pe+tn+l+c+m+D+t,1,u+y+" +lon_0=-141"+pe+tn+l+c+m+D+t,1,u+y+I4+pe+tn+l+c+m+D+t,1,u+y+L4+pe+tn+l+c+m+D+t,1,u+y+" +lon_0=-123"+pe+tn+l+c+m+D+t,1,u+y+Iu+pe+tn+l+c+m+D+t,1,u+y+O0+pe+tn+l+c+m+D+t,1,u+y+" +lon_0=-105"+pe+tn+l+c+m+D+t,1,u+y+Da+" +k=1"+Xp+l+H+co+r+t,3,C+Nm+jm+Bm+Rm+ee+go+c+m+r+t,1,u+y+y6+pe+tn+l+c+m+D+t,1,u+y+F0+pe+tn+l+c+m+D+t,16,C+gf+mf+Ir+Hi+ke+l+Rt+D+t,1,C+hf+ff+Gn+wd+ke+VS+Rt+D+t,1,C+vp+Sp+ba+Jn+Bt+l+c+m+D+t,5,C+" +lat_1=-18"+r7+" +lat_0=-27"+Ws+bt+l+vt+r+t,1,Q+c+m+t,4,I+cr+c+m+r+t,3,Q+c+m+t,1,I+Aa+st+c+m+r+t,4,Q+ct+CC+t,8,Q+c+m+t,1,I+vo+c+m+r+t,1,I+So+c+m+r+t,1,I+ko+c+m+r+t,1,I+_o+c+m+r+t,1,I+qs+c+m+r+t,1,I+Vs+c+m+r+t,1,Q+c+t,1,u+y+Qr+" +k=1"+Pc+l+c+r+t,1,u+y+Jr+" +k=1"+Xo+l+c+r+t,1,u+y+ca+" +k=1"+Cl+l+c+r+t,1,u+y+ta+" +k=1"+Il+l+c+r+t,1,u+y+ea+" +k=1"+wu+l+c+r+t,1,u+y+ir+" +k=1"+Al+l+c+r+t,1,u+y+Yr+" +k=1"+_l+l+c+r+t,1,u+y+Mr+" +k=1"+Mc+l+c+r+t,1,u+y+Xr+" +k=1"+Tl+l+c+r+t,1,u+y+xr+" +k=1"+Dc+l+c+r+t,1,u+y+Dr+" +k=1"+El+l+c+r+t,1,u+y+Qr+" +k=1"+X+l+c+r+t,1,u+y+Jr+" +k=1"+X+l+c+r+t,1,u+y+ca+" +k=1"+X+l+c+r+t,1,u+y+ta+" +k=1"+X+l+c+r+t,1,u+y+ea+" +k=1"+X+l+c+r+t,1,u+y+ir+" +k=1"+X+l+c+r+t,1,u+y+Yr+" +k=1"+X+l+c+r+t,1,u+y+Mr+" +k=1"+X+l+c+r+t,1,u+y+Xr+" +k=1"+X+l+c+r+t,1,u+y+xr+" +k=1"+X+l+c+r+t,1,u+y+Dr+" +k=1"+X+l+c+r+t,1,u+y+Qr+" +k=1"+Ol+l+c+r+t,1,u+y+nc+" +k=1"+Fl+l+c+r+t,1,u+y+Jr+" +k=1"+Pl+l+c+r+t,1,u+y+Gl+" +k=1"+Ml+l+c+r+t,1,u+y+ca+" +k=1"+Wo+l+c+r+t,1,u+y+Sa+" +k=1"+v0+l+c+r+t,1,u+y+ta+" +k=1"+fo+l+c+r+t,1,u+y+zc+" +k=1"+S0+l+c+r+t,1,u+y+ea+" +k=1"+vu+l+c+r+t,1,u+y+Zo+" +k=1"+Wm+l+c+r+t,1,u+y+ir+" +k=1"+$m+l+c+r+t,1,u+y+jl+" +k=1"+qm+l+c+r+t,1,u+y+Yr+" +k=1"+Vm+l+c+r+t,1,u+y+$s+" +k=1"+Km+l+c+r+t,1,u+y+Mr+" +k=1"+Ym+l+c+r+t,1,u+y+Gc+" +k=1"+Zm+l+c+r+t,1,u+y+Xr+" +k=1"+Qm+l+c+r+t,1,u+y+Qo+" +k=1"+qx+l+c+r+t,1,u+y+xr+" +k=1"+Jm+l+c+r+t,1,u+y+Ws+" +k=1"+Vx+l+c+r+t,1,u+y+Dr+" +k=1"+tb+l+c+r+t,1,u+y+Qr+" +k=1"+X+l+c+r+t,1,u+y+nc+" +k=1"+X+l+c+r+t,1,u+y+Jr+" +k=1"+X+l+c+r+t,1,u+y+Gl+" +k=1"+X+l+c+r+t,1,u+y+ca+" +k=1"+X+l+c+r+t,1,u+y+Sa+" +k=1"+X+l+c+r+t,1,u+y+ta+" +k=1"+X+l+c+r+t,1,u+y+zc+" +k=1"+X+l+c+r+t,1,u+y+ea+" +k=1"+X+l+c+r+t,1,u+y+Zo+" +k=1"+X+l+c+r+t,1,u+y+ir+" +k=1"+X+l+c+r+t,1,u+y+jl+" +k=1"+X+l+c+r+t,1,u+y+Yr+" +k=1"+X+l+c+r+t,1,u+y+$s+" +k=1"+X+l+c+r+t,1,u+y+Mr+" +k=1"+X+l+c+r+t,1,u+y+Gc+" +k=1"+X+l+c+r+t,1,u+y+Xr+" +k=1"+X+l+c+r+t,1,u+y+Qo+" +k=1"+X+l+c+r+t,1,u+y+xr+" +k=1"+X+l+c+r+t,1,u+y+Ws+" +k=1"+X+l+c+r+t,1,u+y+Dr+" +k=1"+X+l+c+r+t,1,Q+H+t,3,Q+c+m+t,1,I+Dn+c+m+r+t,9,u+y+Qr+" +k=1"+Pc+l+H+r+t,1,u+y+Jr+" +k=1"+Xo+l+H+r+t,1,u+y+ca+" +k=1"+Cl+l+H+r+t,1,u+y+ta+" +k=1"+Il+l+H+r+t,1,u+y+ea+" +k=1"+wu+l+H+r+t,1,u+y+ir+" +k=1"+Al+l+H+r+t,1,u+y+Yr+" +k=1"+_l+l+H+r+t,1,u+y+Mr+" +k=1"+Mc+l+H+r+t,1,u+y+Xr+" +k=1"+Tl+l+H+r+t,1,u+y+xr+" +k=1"+Dc+l+H+r+t,1,u+y+Dr+" +k=1"+El+l+H+r+t,1,u+y+Qr+" +k=1"+X+l+H+r+t,1,u+y+Jr+" +k=1"+X+l+H+r+t,1,u+y+ca+" +k=1"+X+l+H+r+t,1,u+y+ta+" +k=1"+X+l+H+r+t,1,u+y+ea+" +k=1"+X+l+H+r+t,1,u+y+ir+" +k=1"+X+l+H+r+t,1,u+y+Yr+" +k=1"+X+l+H+r+t,1,u+y+Mr+" +k=1"+X+l+H+r+t,1,u+y+Xr+" +k=1"+X+l+H+r+t,1,u+y+xr+" +k=1"+X+l+H+r+t,1,u+y+Dr+" +k=1"+X+l+H+r+t,11,Q+ie+t,1,Q+ie+yI+t,1,Q+ie+wI+t,1,Q+ie+vI+t,1,Q+ie+SI+t,1,Q+ie+LI+t,1,Q+ie+sI+t,1,Q+ie+OC+t,1,Q+ge+t,1,Q+ge+t,1,Q+Te+Ie+t,1,Q+ct+oC+t,1,Q+c+m+t,1,Q+Xt+k3+t,1,Q+ct+lC+t,1,Q+ct+tI+t,1,Q+ct+uI+t,1,Q+c+m+t,1,Q+He+cs+t,1,Q+c+m+t,1,Q+ie+" +towgs84=-106,-129,165,0,0,0,0"+t,1,Q+ct+hI+t,1,Q+ct+eI+t,1,Q+ct+pS+t,1,Q+c+m+t,1,Q+ct+_I+t,1,Q+ct+iI+t,1,Q+c+m+t,1,Q+ct+CI+t,1,Q+ct+yC+t,1,Q+ct+jI+t,2,Q+ct+nI+t,1,Q+ct+NC+t,3,Q+ct+" +towgs84=365,194,166,0,0,0,0"+t,1,Q+ct+" +towgs84=325,154,172,0,0,0,0"+t,1,Q+ge+PI+t,1,Q+ct+rI+t,2,Q+ct+uS+t,1,Q+ct+fI+t,1,Q+ct+dC+t,1,Q+ct+W5+t,2,Q+ct+aI+t,1,u+y+Va+pe+S0+l+c+m+r+t,5,u+y+Qr+" +k=1"+Ol+l+H+r+t,1,u+y+nc+" +k=1"+Fl+l+H+r+t,1,u+y+Jr+" +k=1"+Pl+l+H+r+t,1,u+y+Gl+" +k=1"+Ml+l+H+r+t,1,u+y+ca+" +k=1"+Wo+l+H+r+t,1,Q+" +a=6377019.27 +b=6355762.5391 +towgs84=-28,199,5,0,0,0,0"+t,1,Q+ct+nw+t,1,Q+c+m+t,1,Q+ct+uC+t,1,Q+c+m+t,1,Q+ct+HC+t,1,Q+ct+_C+t,1,Q+ct+FC+t,1,Q+ct+TC+t,1,Q+Xt+EC+t,1,Q+de+m+t,1,Q+ct+" +towgs84=-86,-98,-119,0,0,0,0"+t,1,Q+c+m+t,1,Q+de+m+t,1,Q+Ue+Xe+t,1,Q+ct+OI+t,1,Q+ct+AC+t,1,Q+c+m+t,1,Q+ge+" +towgs84=-100,-248,259,0,0,0,0"+t,1,Q+H+t,1,Q+H+t,1,Q+H+" +towgs84=44.585,-131.212,-39.544,0,0,0,0"+t,1,Q+ie+" +towgs84=-80.01,253.26,291.19,0,0,0,0"+t,1,Q+ie+" +towgs84=124.5,-63.5,-281,0,0,0,0"+t,2,Q+ya+xa+YC+t,1,Q+ge+Tx+t,1,Q+ct+" +towgs84=-133,-321,50,0,0,0,0"+t,2,Q+c+m+t,1,Q+c+u3+t,1,Q+ct+hC+t,1,Q+ct+xC+t,1,Q+ct+gC+t,1,Q+ct+mC+t,1,Q+ct+jC+t,1,Q+de+pI+t,1,Q+de+m+t,1,Q+ge+Ox+t,1,Q+ie+t,1,Q+ie+t,1,Q+ct+gI+t,1,Q+ie+WC+t,1,Q+ie+t,1,Q+ie+g3+t,1,Q+c+m+t,1,Q+ie+t,1,Q+ct+t,1,Q+ct+t,1,Q+Oc+$C+t,1,Q+ct+" +towgs84=114,-116,-333,0,0,0,0"+t,1,Q+He+" +towgs84=-491,-22,435,0,0,0,0"+t,1,Q+ct+" +towgs84=145,75,-272,0,0,0,0"+t,1,Q+ct+" +towgs84=-320,550,-494,0,0,0,0"+t,1,Q+ct+" +towgs84=124,-234,-25,0,0,0,0"+t,1,Q+ct+" +towgs84=-205,107,53,0,0,0,0"+t,1,Q+ie+" +towgs84=-79,-129,145,0,0,0,0"+t,1,Q+ct+" +towgs84=-127,-769,472,0,0,0,0"+t,1,Q+ct+" +towgs84=-104,-129,239,0,0,0,0"+t,1,Q+ct+" +towgs84=298,-304,-375,0,0,0,0"+t,1,Q+ge+" +towgs84=-2,151,181,0,0,0,0"+t,1,Q+ct+" +towgs84=230,-199,-752,0,0,0,0"+t,1,Q+ct+" +towgs84=211,147,111,0,0,0,0"+t,1,Q+Ct+ne+t,1,Q+ct+oS+t,1,Q+ct+" +towgs84=-794,119,-298,0,0,0,0"+t,1,Q+ge+bC+t,1,Q+ct+" +towgs84=208,-435,-229,0,0,0,0"+t,1,Q+ct+" +towgs84=189,-79,-202,0,0,0,0"+t,1,Q+ge+SC+t,1,Q+ct+" +towgs84=403,-81,277,0,0,0,0"+t,1,Q+ct+" +towgs84=-307,-92,127,0,0,0,0"+t,1,Q+ct+MI+t,1,Q+ct+" +towgs84=170,42,84,0,0,0,0"+t,2,Q+" +a=6378270 +b=6356794.343434343 +towgs84=102,52,-38,0,0,0,0"+t,1,Q+ct+" +towgs84=276,-57,149,0,0,0,0"+t,1,Q+ct+" +towgs84=-632,438,-609,0,0,0,0"+t,1,Q+ct+" +towgs84=647,1777,-1124,0,0,0,0"+t,1,Q+ie+" +towgs84=260,12,-147,0,0,0,0"+t,1,Q+c+m+t,1,Q+xu+yu+t,1,Q+ct+" +towgs84=-156,-271,-189,0,0,0,0"+t,1,Q+" +a=6378136 +b=6356751.361745712 +towgs84=0,0,1.5,-0,-0,0.076,0"+t,1,Q+ct+t,1,Q+c+t,1,Q+ie+f3+t,1,Q+ie+t,1,Q+Xt+t,1,Q+Xt+t,1,Q+c+m+t,1,Q+sk+ck+SS+t,1,Q+c+m+t,1,Q+de+RC+t,1,Q+lk+QS+t,1,Q+sk+ck+SS+t,1,Q+ct+t,1,Q+ct+oo+t,1,Q+de+m+t,1,Q+de+nS+t,1,Q+de+t,1,Q+de+m+t,1,Q+c+m+t,1,Q+Tk+t,1,Q+c+m+t,1,Q+de+m+t,1,Q+de+m+t,1,Q+c+m+t,1,Q+c+m+t,1,u+y+Sa+" +k=1"+v0+l+H+r+t,1,u+y+ta+" +k=1"+fo+l+H+r+t,1,u+y+zc+" +k=1"+S0+l+H+r+t,1,u+y+ea+" +k=1"+vu+l+H+r+t,1,u+y+Zo+" +k=1"+Wm+l+H+r+t,1,u+y+ir+" +k=1"+$m+l+H+r+t,1,u+y+jl+" +k=1"+qm+l+H+r+t,1,u+y+Yr+" +k=1"+Vm+l+H+r+t,1,u+y+$s+" +k=1"+Km+l+H+r+t,1,u+y+Mr+" +k=1"+Ym+l+H+r+t,1,u+y+Gc+" +k=1"+Zm+l+H+r+t,1,u+y+Xr+" +k=1"+Qm+l+H+r+t,1,u+y+Qo+" +k=1"+qx+l+H+r+t,1,u+y+xr+" +k=1"+Jm+l+H+r+t,1,u+y+Ws+" +k=1"+Vx+l+H+r+t,1,u+y+Dr+" +k=1"+tb+l+H+r+t,1,u+y+Qr+" +k=1"+X+l+H+r+t,1,u+y+nc+" +k=1"+X+l+H+r+t,1,u+y+Jr+" +k=1"+X+l+H+r+t,1,u+y+Gl+" +k=1"+X+l+H+r+t,1,u+y+ca+" +k=1"+X+l+H+r+t,1,u+y+Sa+" +k=1"+X+l+H+r+t,1,u+y+ta+" +k=1"+X+l+H+r+t,1,u+y+zc+" +k=1"+X+l+H+r+t,1,u+y+ea+" +k=1"+X+l+H+r+t,1,u+y+Zo+" +k=1"+X+l+H+r+t,1,u+y+ir+" +k=1"+X+l+H+r+t,1,u+y+jl+" +k=1"+X+l+H+r+t,1,u+y+Yr+" +k=1"+X+l+H+r+t,1,u+y+$s+" +k=1"+X+l+H+r+t,1,u+y+Mr+" +k=1"+X+l+H+r+t,1,u+y+Gc+" +k=1"+X+l+H+r+t,1,u+y+Xr+" +k=1"+X+l+H+r+t,1,u+y+Qo+" +k=1"+X+l+H+r+t,1,u+y+xr+" +k=1"+X+l+H+r+t,1,Q+Xt+b3+" +pm=bern"+t,1,Q+ct+Dm+" +pm=bogota"+t,1,Q+ct+d3+h7+t,1,Q+Xt+q5+rb+t,1,Q+Xt+jo+ec+t,1,Q+ct+h3+" +pm=rome"+t,1,Q+Ue+Xe+au+ac+t,1,Q+Xt+rb+t,1,Q+ct+" +pm=brussels"+t,1,Q+ct+y3+ac+t,1,Q+Ue+Xe+Z5+ac+t,1,u+y+Ws+" +k=1"+X+l+H+r+t,0,u+y+Ws+" +k=1"+X+l+H+r+t,1,Q+Xt+_1+rb+t,1,Q+Xt+" +pm=stockholm"+t,1,Q+Xt+" +pm=athens"+t,1,Q+Ue+Xe+Ux+ac+t,1,Q+y0+m0+nu+Ld+t,1,Q+Xt+Bx+ec+t,2,Q+Xt+k3+rb+t,1,Q+Ue+Xe+ac+t,1,u+y+Dr+" +k=1"+X+l+H+r+t,1,Q+ct+t,1,Q+ct+t,2,C+" +lat_1=15 +lat_2=16.66666666666667 +lat_0=15.83333333333333 +lon_0=-24 +x_0=161587.83 +y_0=128511.202"+vt+r+t,13,C+SE+kE+P2+A4+bt+l+c+m+r+t,62,Q+" +a=6376523"+JS+fF+t,2,Q+mk+ZS+" +pm=madrid"+t,1,Q+Xt+EC+h7+t,109,Q+c+m+t,1,I+wo+c+m+r+t,1,I+oc+c+m+r+t,1,I+_a+c+m+r+t,2,u+Go+GI+" +k=1"+bt+l+ct+d3+r+t,23,vn+ka+ob+Hn+Yu+Ln+ia+vt+r+t,1,vn+Yt+" +lat_ts=-90"+Hn+Yu+Ln+ia+vt+r+t,6,I+hi+c+m+r+t,21,tr+u6+Xs+O6+bd+bt+l+Rt+r+t,1,tr+u6+Xs+O6+bd+bt+l+c+m+r+t,1,tr+u6+Xs+O6+bd+bt+l+c+m+r+t,1,tr+u6+Xs+O6+bd+bt+l+c+m+r+t,33,u+Nn+" +lon_0=5.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=6.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=7.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=8.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=9.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+A4+" +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=11.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=12.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=13.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=14.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=15.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+v4+" +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=17.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=18.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=19.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=20.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=21.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=22.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=23.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=24.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=25.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=26.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=27.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=28.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=29.5 +k=1"+hn+Fe+c+m+r+t,1,u+Nn+" +lon_0=30.5 +k=1"+hn+Fe+c+m+r+t,2,Q+Xt+t,35,u+fn+Ru+" +k=1"+ee+Le+Xt+r+t,1,u+fn+m2+" +k=1"+ee+" +y_0=550000"+Xt+r+t,1,u+fn+b2+" +k=1"+ee+Le+Xt+r+t,1,u+fn+m2+" +k=1"+ee+Le+Xt+r+t,1,u+fn+xr+" +k=1"+ee+Le+Xt+r+t,1,u+fn+Ru+" +k=1"+ee+Le+Xt+r+t,1,u+fn+" +lon_0=125.0028902777778 +k=1"+ee+Le+Xt+r+t,1,u+fn+AE+" +k=1"+ee+Le+Xt+r+t,1,u+fn+AE+" +k=1"+ee+" +y_0=550000"+Xt+r+t,1,u+fn+" +lon_0=129.0028902777778 +k=1"+ee+Le+Xt+r+t,1,u+fn+" +lon_0=131.0028902777778 +k=1"+ee+Le+Xt+r+t,1,u+fn+Yx+pe+Tn+ia+Xt+r+t,1,u+fn+Yx+pe+Tn+ia+c+m+r+t,1,u+fn+b2+" +k=1"+ee+Le+c+m+r+t,1,u+fn+m2+" +k=1"+ee+Le+c+m+r+t,1,u+fn+m2+" +k=1"+ee+" +y_0=550000"+c+m+r+t,1,u+fn+xr+" +k=1"+ee+Le+c+m+r+t,1,u+fn+Ru+" +k=1"+ee+Le+c+m+r+t,1,u+fn+b2+" +k=1"+ee+i2+c+m+r+t,1,u+fn+m2+" +k=1"+ee+i2+c+m+r+t,1,u+fn+xr+" +k=1"+ee+i2+c+m+r+t,1,u+fn+Ru+" +k=1"+ee+i2+c+m+r+t,33,F8+n6+" +lon_0=42.5"+ww+dt+bt+l+Xt+Bx+ec+r+t,2,u+y+Ma+pe+X+Le+vt+r+t,5,Q+Xt+kC+t,1,Q+Xt+kC+ec+t,4,Q+ya+xa+pC+t,1,u+" +lat_0=7.000480277777778 +lon_0=80.77171111111112 +k=0.9999238418"+ee+go+ya+xa+DI+r+t,1,u+" +lat_0=7.000471527777778 +lon_0=80.77171308333334 +k=0.9999238418"+X+Le+ya+xa+pC+r+t,8,C+SE+kE+P2+A4+bt+l+c+m+r+t,3,Q+c+t,1,Gr+R0+T6+OF+Cg+bt+l+Za+O3+c+r+t,5,Q+c+m+t,1,u+y+Zr+" +k=1"+X+l+c+m+r+t,1,u+y+ci+" +k=1"+X+l+c+m+r+t,1,u+y+Pa+" +k=1"+X+l+c+m+r+t,1,u+y+Uu+" +k=1"+X+l+c+m+r+t,1,u+y+xo+" +k=1"+X+l+c+m+r+t,1,u+y+Gu+" +k=1"+X+l+c+m+r+t,1,u+y+Ki+" +k=1"+X+l+c+m+r+t,5,Q+c+m+t,2,u+y+Sa+" +k=1"+Mn+l+c+m+r+t,3,u+y+Zr+" +k=1"+Wp+l+c+m+r+t,1,u+y+ci+" +k=1"+Up+l+c+m+r+t,1,u+y+Pa+" +k=1"+qf+l+c+m+r+t,1,u+y+Uu+" +k=1"+Gp+l+c+m+r+t,1,u+y+xo+" +k=1"+Pc+l+c+m+r+t,1,u+y+Gu+" +k=1"+Xo+l+c+m+r+t,1,u+y+Ki+" +k=1"+Cl+l+c+m+r+t,17,u+y+" +lon_0=90.73333333333333 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=89.55 +k=1"+Mn+ii+c+m+r+t,1,u+y+_E+" +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=90.03333333333333 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=90.15000000000001 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=91.13333333333334 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=91.23333333333333 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=89.34999999999999 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=91.34999999999999 +k=1"+Mn+ii+c+m+r+t,1,u+y+_E+" +k=1"+Mn+ii+c+m+r+t,1,u+y+CE+" +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=89.06666666666666 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=90.26666666666667 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=89.55 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=91.75 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=90.5 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=90.16666666666667 +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=90.11666666666666 +k=1"+Mn+ii+c+m+r+t,1,u+y+CE+" +k=1"+Mn+ii+c+m+r+t,1,u+y+" +lon_0=90.86666666666666 +k=1"+Mn+ii+c+m+r+t,5,u+y+" +lon_0=-7 +k=0.999997"+ee+" +y_0=-6000000"+c+m+r+t,4,C+_4+" +lat_2=54.5"+y+Mu+Tn+l+c+m+r+t,1,C+_4+" +lat_2=54.5"+y+Mu+Tn+l+c+m+r+t,3,Q+c+m+t,1,C+" +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19"+Au+zs+c+m+r+t,4,Dl+GS+L2+Qx+o2+Xt+k3+rb+r+t,1,Dl+GS+L2+Qx+o2+Xt+_1+rb+r+t,1,Dl+GS+L2+Qx+o2+Xt+q5+rb+r+t,6,I+wo+st+ct+p3+r+t,3,Q+c+m+t,3,u+Yt+x6+" +k=1"+Ge+l+c+m+r+t,1,u+Yt+F0+" +k=1"+Kr+l+c+m+r+t,1,u+Yt+kg+" +k=1"+Qn+l+c+m+r+t,1,u+Yt+ib+" +k=1"+wa+l+c+m+r+t,1,u+Yt+w6+" +k=1"+si+l+c+m+r+t,1,u+Yt+f7+" +k=1"+Su+l+c+m+r+t,1,u+Yt+Bu+" +k=1"+Lc+l+c+m+r+t,5,Q+c+m+t,1,I+Dn+st+c+m+r+t,1,I+er+st+c+m+r+t,1,I+cr+st+c+m+r+t,3,Q+c+m+t,1,I+er+st+c+m+r+t,1,I+or+st+c+m+r+t,3,Q+de+m+t,2,u+y+Mu+dt+X+l+de+m+r+t,4,Q+c+m+t,2,Q+c+m+t,8,Q+de+m+t,1,I+cr+st+de+m+r+t,1,I+na+st+de+m+r+t,4,I+or+st+c+m+r+t,2,I+er+st+c+m+r+t,4,Q+c+m+t,3,I+oc+st+c+m+r+t,55,Q+ge+A1+t,5,C+" +lat_1=10.46666666666667 +lat_0=10.46666666666667 +lon_0=-84.33333333333333 +k_0=0.99995696"+X+" +y_0=271820.522"+ge+A1+r+t,1,C+" +lat_1=9 +lat_0=9"+HI+" +k_0=0.99995696"+X+" +y_0=327987.436"+ge+A1+r+t,2,C+" +lat_1=14.9 +lat_0=14.9"+c0+" +k_0=0.99989906"+X+" +y_0=325992.681"+ge+A1+r+t,1,C+" +lat_1=13.78333333333333 +lat_0=13.78333333333333 +lon_0=-89 +k_0=0.99996704"+X+" +y_0=295809.184"+ge+A1+r+t,1,C+" +lat_1=13.86666666666667 +lat_0=13.86666666666667"+r4+" +k_0=0.99990314"+X+" +y_0=359891.816"+ge+A1+r+t,1,C+" +lat_1=11.73333333333333 +lat_0=11.73333333333333"+r4+" +k_0=0.9999222800000001"+X+" +y_0=288876.327"+ge+A1+r+t,1,I+Wr+He+cs+r+t,1,Q+xu+yu+t,3,Q+ge+t,2,C+" +lat_1=8.416666666666666 +lat_0=8.416666666666666 +lon_0=-80 +k_0=0.99989909"+X+" +y_0=294865.303"+ge+r+t,3,m4+" +lat_0=8.25"+_n+" +x_0=914391.7962 +y_0=999404.7217154861"+ge+" +to_meter=0.9143917962"+t,7,C+Mi+Di+" +lat_0=-78 +lon_0=163"+a4+ku+c+m+r+t,1,C+" +lat_1=-73.66666666666667"+wi+" +lat_0=-74.5"+Nu+sd+Si+c+m+r+t,1,C+" +lat_1=-70.66666666666667 +lat_2=-72.33333333333333 +lat_0=-71.5"+s7+Ck+Fe+c+m+r+t,1,vn+Yt+" +lat_ts=-90"+v2+Yu+sd+Fe+c+m+r+t,7,Q+c+m+t,1,I+Dn+c+m+r+t,23,F8+n6+IE+ww+dt+bt+l+Xt+Bx+r+t,1,F8+n6+IE+ww+dt+bt+l+Xt+Bx+r+t,4,u+u7+R8+" +k=1"+s2+" +y_0=650000"+ct+OI+r+t,1,u+u7+R8+" +k=1"+s2+" +y_0=650000"+ct+AC+r+t,1,u+y+sc+" +k=1"+Ge+l+Xt+fl+r+t,3,u+y+" +lon_0=11.5"+pe+Ge+Ea+vt+r+t,1,Q+ct+t,3,Q+He+ru+t,3,m4+y+Bu+sd+un+He+ru+r+t,1,I+cr+st+He+ru+r+t,2,I+Qi+st+He+ru+r+t,1,I+Co+st+He+ru+r+t,1,I+wo+st+He+ru+r+t,1,I+cr+st+ct+r+t,1,I+na+st+ct+r+t,1,I+Qi+st+ct+r+t,1,I+Co+st+ct+r+t,7,Q+c+m+t,4,I+Ao+st+c+m+r+t,1,I+Wc+st+c+m+r+t,1,I+Zu+st+c+m+r+t,7,C+" +lat_1=16.81666666666667 +lat_0=16.81666666666667"+c0+" +k_0=0.99992226"+X+" +y_0=292209.579"+ge+A1+r+t,2,Q+H+vh+t,1,u+y+vr+" +k=1"+wa+l+H+vh+r+t,1,u+y+Zr+" +k=1"+si+l+H+vh+r+t,1,u+y+Pa+" +k=1"+Su+l+H+vh+r+t,1,u+y+xo+" +k=1"+Lc+l+H+vh+r+t,1,u+y+vr+" +k=1"+X+l+H+vh+r+t,1,u+y+Zr+" +k=1"+X+l+H+vh+r+t,1,u+y+Pa+" +k=1"+X+l+H+vh+r+t,1,u+y+xo+" +k=1"+X+l+H+vh+r+t,19,ho+jc+bk+r6+De+" +y_0=304800"+Rt+se+t,1,u+" +lat_0=17.06124194444444 +lon_0=-88.6318575 +k=1 +x_0=66220.02833082761 +y_0=135779.5099885299"+xu+yu+r8+t,4,Q+c+m+t,3,u+y+" +lon_0=11.33333333333333 +k=1"+Tn+l+c+m+r+t,27,u+Oa+HI+" +k=0.999942857"+Ne+l+Rt+D+t,1,u+Oa+Ui+x0+Ne+l+Rt+D+t,1,u+Oa+" +lon_0=-88.75"+x0+Ne+l+Rt+D+t,2,u+y+R2+pe+X+l+ct+$n+r+t,2,I+Aa+st+de+cw+r+t,2,u+y+Va+" +k=1"+Kr+l+H+qr+r+t,1,C+_6+Md+qu+rc+rd+Q3+c+m+r+t,1,Gs+qu+rc+J3+t6+c+m+r+t,1,C+_6+Md+qu+rc+rd+Q3+c+m+r+t,1,Gs+qu+rc+J3+t6+c+m+r+t,1,Gs+qu+rc+J3+t6+c+m+r+t,1,C+_6+Md+qu+rc+rd+Q3+c+m+r+t,1,Gs+qu+rc+J3+t6+c+m+r+t,1,C+_6+Md+qu+rc+rd+Q3+c+m+r+t,2,Dl+" +lon_0=-43 +lat_ts=-2"+sd+un+c+m+r+t,2,C+" +lat_1=52.66666666666666 +lat_2=54.33333333333334 +lat_0=48"+rc+" +x_0=815000"+l+ct+$n+r+t,1,I+la+st+c+m+r+t,2,u+Fa+id+Xf+Yn+l+c+m+D+t,3,u+y+sc+pe+fo+l+c+m+r+t,1,u+y+yr+pe+vu+l+c+m+r+t,1,u+y+sc+pe+fo+l+c+m+r+t,1,u+y+Va+pe+S0+l+c+m+r+t,1,u+y+yr+pe+vu+l+c+m+r+t,1,u+Fa+id+Xf+Yn+l+c+m+D+t,1,u+Fa+id+Xf+Yn+l+c+m+D+t,4,u+y+Va+pe+" +x_0=500053 +y_0=-3999820"+ct+h3+r+t,4,u+y+yr+" +k=1"+Qn+l+H+qr+r+t,1,u+y+Va+" +k=1"+Kr+l+H+co+r+t,1,u+y+yr+" +k=1"+Qn+l+H+co+r+t,1,u+y+Va+" +k=1"+Qn+l+Xt+r+t,1,u+y+Ma+" +k=1"+wa+l+Xt+r+t,1,u+y+Ma+" +k=1"+wa+l+Xt+r+t,1,u+y+yr+" +k=1"+si+l+Xt+r+t,1,u+y+Va+" +k=1"+Qn+l+H+qr+r+t,1,u+y+Ma+" +k=1"+wa+l+H+qr+r+t,1,u+y+yr+" +k=1"+si+l+H+qr+r+t,1,u+y+Va+" +k=1"+Qn+l+H+co+r+t,1,u+y+Ma+" +k=1"+wa+l+H+co+r+t,1,u+y+yr+" +k=1"+si+l+H+co+r+t,1,u+y+R2+" +k=1"+Kr+l+Xt+fl+r+t,1,u+y+Va+" +k=1"+Qn+l+Xt+fl+r+t,1,u+y+Ma+" +k=1"+wa+l+Xt+fl+r+t,1,u+y+yr+" +k=1"+si+l+Xt+fl+r+t,1,u+y+sc+" +k=1"+Ge+l+Xt+fl+r+t,1,Q+Xt+t,1,u+y+R2+" +k=1"+Kr+l+Xt+r+t,1,u+y+Va+" +k=1"+Qn+l+Xt+r+t,1,u+y+Ma+" +k=1"+wa+l+Xt+r+t,1,u+y+yr+" +k=1"+si+l+Xt+r+t,15,I+$c+st+c+m+r+t,125,u+" +lat_0=-35.31773627777778 +lon_0=149.0092948305555 +k=1.000086"+ee+i2+He+vc+r+t,11,I+Ya+de+m+r+t,1,I+ws+de+m+r+t,2,I+Wr+st+c+m+r+t,3,u+y+Ma+pe+X+un+vt+r+t,2,u+y+ci+dt+X+un+c+m+r+t,14,I+na+st+He+ru+r+t,17,I+or+st+He+ru+r+t,1,I+er+st+He+ru+r+t,1,I+Dn+st+He+ru+r+t,2,I+Aa+st+ct+CC+r+t,1,m4+y+Bu+sd+un+c+m+r+t,6,Q+c+t,1,u+y+I0+pe+Ge+ku+c+r+t,3,vn+ka+" +lat_ts=70"+Sa+" +k=1"+bt+l+l7+_8+r+t,31,C+F6+Ra+P3+O0+bt+l+vt+r+t,1,C+F6+Ra+P3+v6+bt+l+vt+r+t,1,C+F6+Ra+P3+Pa+bt+l+vt+r+t,1,C+F6+Ra+P3+ir+bt+l+vt+r+t,1,C+F6+Ra+P3+Hc+bt+l+vt+r+t,1,C+ui+P6+M3+O0+bt+l+vt+r+t,1,C+ui+P6+M3+v6+bt+l+vt+r+t,1,C+ui+P6+M3+Pa+bt+l+vt+r+t,1,C+ui+P6+M3+ir+bt+l+vt+r+t,1,C+ui+P6+M3+Hc+bt+l+vt+r+t,1,C+M6+D6+D3+O0+bt+l+vt+r+t,1,C+M6+D6+D3+v6+bt+l+vt+r+t,1,C+M6+D6+D3+Pa+bt+l+vt+r+t,1,C+M6+D6+D3+ir+bt+l+vt+r+t,1,C+M6+D6+D3+Hc+bt+l+vt+r+t,1,vn+ka+ob+mg+Yu+Ln+ia+vt+r+t,1,vn+ka+ob+Jn+Yu+Ln+ia+vt+r+t,1,vn+ka+ob+" +lon_0=-33"+Yu+Ln+ia+vt+r+t,1,vn+ka+ob+Cd+Yu+Ln+ia+vt+r+t,1,vn+ka+ob+ir+Yu+Ln+ia+vt+r+t,110,C+M2+Hx+zx+" +lon_0=-30"+Ol+va+c+m+r+t,1,C+du+pu+gu+" +lon_0=-52"+Al+_0+c+m+r+t,1,C+du+pu+gu+" +lon_0=-12"+Mc+_0+c+m+r+t,1,C+_c+Ra+Cc+F0+Wo+Nc+c+m+r+t,1,C+_c+Ra+Cc+v6+fo+Nc+c+m+r+t,1,C+_c+Ra+Cc+" +lon_0=-10"+vu+Nc+c+m+r+t,1,C+ui+lo+uo+" +lon_0=-64"+Mc+ms+c+m+r+t,1,C+ui+lo+uo+v6+Dc+ms+c+m+r+t,1,C+ui+lo+uo+" +lon_0=-14"+Hp+ms+c+m+r+t,1,C+Ga+Ha+za+Pu+Qm+Ea+c+m+r+t,1,C+Ga+Ha+za+" +lon_0=-42"+Jm+Ea+c+m+r+t,1,C+Ga+Ha+za+" +lon_0=-22"+tb+Ea+c+m+r+t,1,C+p0+D0+g0+d7+Fl+C0+c+m+r+t,1,C+p0+D0+g0+" +lon_0=-38"+Ml+C0+c+m+r+t,1,C+p0+D0+g0+" +lon_0=-20"+v0+C0+c+m+r+t,1,C+" +lat_1=67"+TE+EE+" +lon_0=-51"+qf+kk+c+m+r+t,1,C+" +lat_1=67"+TE+EE+" +lon_0=-34"+Pc+kk+c+m+r+t,1,C+OE+FE+PE+" +lon_0=-52"+Mc+" +y_0=8500000"+c+m+r+t,1,C+OE+FE+PE+" +lon_0=-37"+Dc+" +y_0=8500000"+c+m+r+t,1,C+du+pu+gu+" +lon_0=16"+Dc+_0+c+m+r+t,1,C+_c+Ra+Cc+vr+qf+Nc+c+m+r+t,1,C+ui+lo+uo+rc+Fl+ms+c+m+r+t,1,C+ui+lo+uo+R6+Ml+ms+c+m+r+t,1,C+Ga+Ha+za+" +lon_0=14"+qf+Ea+c+m+r+t,1,C+Ga+Ha+za+R6+Pc+Ea+c+m+r+t,1,C+du+pu+gu+" +lon_0=53"+Hp+_0+vt+r+t,1,C+du+pu+gu+ta+Fl+_0+vt+r+t,1,C+_c+Ra+Cc+" +lon_0=52"+Pc+Nc+vt+r+t,1,C+_c+Ra+Cc+" +lon_0=83"+Cl+Nc+vt+r+t,1,C+_c+Ra+Cc+$s+wu+Nc+vt+r+t,1,C+_c+Ra+Cc+" +lon_0=145"+_l+Nc+vt+r+t,1,C+ui+lo+uo+" +lon_0=58"+v0+ms+vt+r+t,1,C+ui+lo+uo+" +lon_0=82"+S0+ms+vt+r+t,1,C+ui+lo+uo+t7+Wm+ms+vt+r+t,1,C+ui+lo+uo+" +lon_0=130"+qm+ms+vt+r+t,1,C+ui+lo+uo+e7+Km+ms+vt+r+t,1,C+ui+lo+uo+" +lon_0=179"+Zm+ms+vt+r+t,1,C+Ga+Ha+za+ub+Cl+Ea+vt+r+t,1,C+Ga+Ha+za+" +lon_0=74"+wu+Ea+vt+r+t,1,C+Ga+Ha+za+" +lon_0=95"+_l+Ea+vt+r+t,1,C+Ga+Ha+za+" +lon_0=116"+Tl+Ea+vt+r+t,1,C+Ga+Ha+za+" +lon_0=137"+El+Ea+vt+r+t,1,C+Ga+Ha+za+" +lon_0=158"+Ol+Ea+vt+r+t,1,C+Ga+Ha+za+" +lon_0=179"+Pl+Ea+vt+r+t,1,C+Ga+Ha+za+" +lon_0=-163"+Wo+Ea+c+m+r+t,1,C+Ga+Ha+za+l2+fo+Ea+c+m+r+t,1,C+p0+D0+g0+o6+Xo+C0+c+m+r+t,1,C+p0+D0+g0+l2+Il+C0+c+m+r+t,1,C+M2+Hx+zx+pn+El+va+c+m+r+t,1,C+du+pu+gu+l6+Xo+_0+c+m+r+t,1,C+du+pu+gu+y6+Il+_0+c+m+r+t,1,C+_c+Ra+Cc+L4+Ol+Nc+c+m+r+t,1,C+_c+Ra+Cc+Yo+Pl+Nc+c+m+r+t,1,C+_c+Ra+Cc+F0+Wo+Nc+c+m+r+t,1,C+ui+lo+uo+L4+Xo+ms+c+m+r+t,1,C+ui+lo+uo+" +lon_0=-104"+Il+ms+c+m+r+t,1,C+ui+lo+uo+Du+Al+ms+c+m+r+t,1,C+Ga+Ha+za+" +lon_0=-131"+vu+Ea+c+m+r+t,1,C+Ga+Ha+za+O0+$m+Ea+c+m+r+t,1,C+Ga+Ha+za+" +lon_0=-91"+Vm+Ea+c+m+r+t,1,C+Ga+Ha+za+" +lon_0=-71"+Ym+Ea+c+m+r+t,1,C+p0+D0+g0+" +lon_0=-132"+Al+C0+c+m+r+t,1,C+p0+D0+g0+" +lon_0=-113"+Mc+C0+c+m+r+t,1,C+p0+D0+g0+ju+Dc+C0+c+m+r+t,1,C+p0+D0+g0+y6+Hp+C0+c+m+r+t,1,C+M2+Hx+zx+ci+Pl+va+vt+r+t,1,C+M2+Hx+zx+Sa+Wo+va+vt+r+t,1,C+M2+Hx+zx+Sd+fo+va+vt+r+t,1,C+M2+Hx+zx+mg+Tl+va+vt+r+t,1,C+du+pu+gu+" +lon_0=133"+Ml+_0+vt+r+t,1,C+du+pu+gu+s7+Up+_0+vt+r+t,1,C+du+pu+gu+gd+Gp+_0+vt+r+t,1,C+_c+Ra+Cc+" +lon_0=176"+Tl+Nc+vt+r+t,1,C+_c+Ra+Cc+C4+El+Nc+vt+r+t,1,C+ui+lo+uo+" +lon_0=-155"+Gp+ms+vt+r+t,1,C+Ga+Ha+za+" +lon_0=-5"+dk+Ea+c+m+r+t,3,I+Wr+ge+bC+se+t,1,I+Wr+ge+SC+se+t,6,Q+c+m+t,69,u+y+vr+dt+X+l+Xt+jo+r+t,3,Q+ya+xa+" +towgs84=293.17,726.18,245.36,0,0,0,0"+t,3,I+Qi+c+m+r+t,1,I+Co+c+m+r+t,96,C+Nm+jm+Bm+Rm+ee+go+c+r+t,4,Q+de+fC+t,1,u+y+Pa+Sn+ee+" +y_0=-3500000"+de+fC+r+t,4,u+y+vr+dt+Lc+l+Xt+jo+r+t,2,Q+c+t,4,Q+c+t,3,Q+c+t,3,I+yo+c+r+t,1,I+Xc+c+r+t,1,I+$c+c+r+t,1,I+$l+c+r+t,1,I+Qu+c+r+t,1,I+Kl+c+r+t,1,I+To+c+r+t,1,I+lc+c+r+t,1,I+Eo+c+r+t,1,I+ql+c+r+t,1,I+Vl+c+r+t,1,I+Xl+c+r+t,1,I+vo+c+r+t,1,I+So+c+r+t,1,I+ko+c+r+t,1,I+_o+c+r+t,1,I+qs+c+r+t,1,I+Vs+c+r+t,1,I+Wr+c+r+t,1,I+or+c+r+t,1,I+er+c+r+t,2,tr+u6+Xs+O6+bd+bt+l+c+r+t,1,C+Ga+Ha+za+" +lon_0=-163"+Wo+Ea+c+r+t,1,C+Ga+Ha+za+l2+fo+Ea+c+r+t,1,C+p0+D0+g0+o6+Xo+C0+c+r+t,1,C+p0+D0+g0+l2+Il+C0+c+r+t,1,u+Vo+_3+vg+ee+l+c+r+t,1,u+Sr+eb+Un+Bt+l+c+r+t,6,C+" +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102"+Kr+l+c+m+r+t,3,Q+c+m+t,1,I+vo+c+m+r+t,1,I+So+c+m+r+t,1,I+ko+c+m+r+t,1,I+_o+c+m+r+t,1,I+qs+c+m+r+t,1,I+Vs+c+m+r+t,1,C+" +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102"+Kr+l+c+m+r+t,9,u+y+vr+" +k=1"+ve+l+H+Pm+r+t,1,u+y+Da+" +k=1"+ve+l+H+Pm+r+t,1,u+y+Zr+" +k=1"+ve+l+H+Pm+r+t,1,u+y+ci+" +k=1"+ve+l+H+Pm+r+t,1,u+y+Pa+" +k=1"+ve+l+H+Pm+r+t,1,u+y+Uu+" +k=1"+ve+l+H+Pm+r+t,1,u+y+xo+" +k=1"+ve+l+H+Pm+r+t,4,C+" +lat_1=19.33333333333333 +lat_2=19.7 +lat_0=19.33333333333333 +lon_0=-80.56666666666666 +x_0=899160 +y_0=579120"+c+m+se+t,2,tr+" +lat_1=55"+Md+k6+gd+bt+l+c+r+t,1,Gr+" +lat_0=57"+Ow+Fw+dt+sd+vi+Za+Um+c+r+t,1,u+Kn+O4+dt+X+l+c+r+t,1,u+Kn+F4+dt+X+l+c+r+t,1,u+Kn+mg+dt+X+l+c+r+t,1,u+Kn+gd+dt+X+l+c+r+t,1,u+Kn+T0+dt+X+l+c+r+t,1,u+Kn+P4+dt+X+l+c+r+t,1,u+Kn+M4+dt+X+l+c+r+t,1,u+Kn+s6+dt+X+l+c+r+t,1,C+Pw+Mw+P2+D4+Tn+l+c+r+t,1,u+We+Ah+dt+oa+l+c+r+t,1,u+We+Ah+dt+oa+l+c+se+t,1,u+We+kh+dt+oa+l+c+r+t,1,u+We+kh+dt+oa+l+c+se+t,1,u+We+Bf+Un+oa+l+c+r+t,1,u+We+Bf+Un+oa+l+c+se+t,1,C+kf+Af+fs+Vi+ye+l+c+r+t,1,C+kf+Af+fs+Vi+Ta+l+c+D+t,1,C+_f+dd+Cf+Vi+ye+Uc+c+r+t,1,C+_f+dd+Cf+Vi+Ta+Dp+c+D+t,1,tr+I6+c6+y+md+bt+$3+c+r+t,1,C+Kh+ys+Ir+qi+Ln+Le+c+r+t,1,C+Kh+ys+Ir+qi+aa+pr+c+D+t,1,C+Yh+Zh+Br+qi+Ln+Le+c+r+t,1,C+Yh+Zh+Br+qi+aa+pr+c+D+t,1,C+Ri+Qh+cd+ze+Ln+Le+c+r+t,1,C+Ri+Qh+cd+ze+aa+pr+c+D+t,1,C+Zf+Id+Jh+ld+Ln+Le+c+r+t,1,C+Zf+Id+Jh+ld+aa+pr+c+D+t,1,C+tf+ef+ud+Bc+Ln+Le+c+r+t,1,C+tf+ef+ud+Bc+aa+pr+c+D+t,1,C+nf+rf+af+Uf+Ln+Le+c+r+t,1,C+nf+rf+af+Uf+aa+pr+c+D+t,1,C+Qf+Jf+ou+Zn+Sl+kl+c+r+t,1,C+Qf+Jf+ou+Zn+Ic+xl+c+D+t,1,C+I1+T1+Ir+Zn+Sl+kl+c+r+t,1,C+I1+T1+Ir+Zn+Ic+xl+c+D+t,1,C+Ri+sf+Je+Zn+Sl+kl+c+r+t,1,C+Ri+sf+Je+Zn+Ic+xl+c+D+t,1,C+of+hd+cf+Vf+g8+m8+c+r+t,1,C+of+hd+cf+Vf+Vw+Kw+c+D+t,1,u+fn+_h+fd+ee+l+c+r+t,1,u+fn+_h+fd+gr+l+c+D+t,1,u+Li+_n+An+ee+l+c+r+t,1,u+Li+_n+An+gr+l+c+D+t,1,tr+" +lat_1=24"+k4+" +lat_0=24"+Mu+ye+l+c+r+t,1,C+td+lf+Td+ed+Bt+l+c+r+t,1,C+td+lf+Td+ed+Bt+l+c+D+t,1,u+Li+yd+An+ee+l+c+r+t,1,u+Li+yd+An+gr+l+c+D+t,1,u+Sr+Ch+dt+ee+l+c+r+t,1,u+Sr+Ch+dt+gr+l+c+D+t,1,u+Sr+Ih+dt+sa+l+c+r+t,1,u+Sr+Ih+dt+yl+l+c+D+t,1,u+wn+Rl+ji+X+l+c+r+t,1,u+wn+Rl+ji+mr+l+c+D+t,1,u+wn+Th+ji+ee+l+c+r+t,1,u+wn+Th+ji+gr+l+c+D+t,1,u+wn+Gf+Un+ar+l+c+r+t,1,u+wn+Gf+Un+Yw+l+c+D+t,1,u+Je+Rh+bu+ve+l+c+r+t,1,u+Je+Rh+bu+ve+l+c+D+t,1,u+Je+Lh+An+sa+l+c+r+t,1,u+Je+Lh+An+s8+l+c+D+t,1,u+Or+Nh+rn+hn+E0+c+r+t,1,u+Or+Nh+rn+a8+Tp+c+D+t,1,u+Or+jh+rn+bs+E0+c+r+t,1,u+Or+jh+rn+bs+Tp+c+D+t,1,C+If+Tf+Oa+Wi+Ge+Fe+c+r+t,1,C+If+Tf+Oa+Wi+Ge+Ep+c+D+t,1,C+ni+Ef+Vn+Wi+X+l+c+r+t,1,C+ni+Ef+Vn+Wi+Yn+l+c+D+t,1,C+Of+Ff+Ua+Pr+ye+l+c+r+t,1,C+Of+Ff+Ua+Pr+Ta+l+c+D+t,1,C+Pf+Mf+Je+Hr+ye+Uc+c+r+t,1,C+Pf+Mf+Je+Hr+Ta+Dp+c+D+t,1,C+ls+Vh+Or+$f+X+l+c+r+t,1,C+ls+Vh+Or+$f+mr+l+c+D+t,1,C+Cp+Ip+Ur+Ui+Ge+Fe+c+r+t,1,C+Cp+Ip+Ur+Ui+Ge+wl+c+D+t,1,C+E1+O1+Ur+Ui+X+Le+c+r+t,1,C+E1+O1+Ur+Ui+mr+pr+c+D+t,1,C+up+hp+Vo+$o+Tn+l+c+r+t,1,C+up+hp+Vo+$o+Lf+l+c+D+t,1,C+ug+hg+fg+pl+Tn+l+c+r+t,1,C+ug+hg+fg+pl+Lf+l+c+D+t,1,u+E4+C8+mo+X+l+c+r+t,1,u+ba+S8+mo+sa+l+c+r+t,1,u+ds+k8+mo+ve+l+c+r+t,1,u+ma+po+dt+ve+l+c+r+t,1,u+ma+po+dt+ve+l+c+D+t,1,u+ds+Bh+rn+bs+l+c+r+t,1,u+ds+Bh+rn+bs+l+c+D+t,1,C+$p+ng+Br+Nl+ye+l+c+r+t,1,C+$p+ng+Br+Nl+Zw+l+c+D+t,1,C+P1+M1+ki+Rc+X+l+c+r+t,1,C+P1+M1+ki+Rc+mr+l+c+D+t,1,C+F1+uf+ki+zi+ee+od+c+r+t,1,C+F1+uf+ki+zi+gr+od+c+D+t,1,C+rg+N1+j1+js+Zx+l+c+r+t,1,C+rg+N1+j1+js+Jw+l+c+se+t,1,C+D1+R1+L1+Ko+t4+l+c+r+t,1,C+D1+R1+L1+Ko+Qw+l+c+se+t,1,Gr+Iw+" +lonc=-86"+b8+pe+x8+p8+Za+y8+c+r+t,1,C+ml+ag+Oa+js+rd+l+c+r+t,1,C+ml+ag+Oa+js+f8+l+c+se+t,1,C+Qp+pp+Wa+Yf+ar+zr+c+r+t,1,C+Qp+pp+Wa+Yf+ri+ai+c+D+t,1,C+fp+dp+jc+Uh+ar+zr+c+r+t,1,C+fp+dp+jc+Uh+ri+ai+c+D+t,1,C+gp+mp+Hl+ju+ar+zr+c+r+t,1,C+gp+mp+Hl+ju+ri+ai+c+D+t,1,u+Hs+Eh+Sn+ve+l+c+r+t,1,u+Hs+Eh+Sn+ve+l+c+D+t,1,u+Cu+L8+n4+X+Jx+c+r+t,1,u+Hs+c0+Sn+sa+l+c+r+t,1,u+Hs+c0+Sn+yl+l+c+D+t,1,u+fu+$o+Un+X+l+c+r+t,1,u+fu+Y3+Un+Mn+l+c+r+t,1,u+T3+Z3+An+y4+l+c+r+t,1,C+bo+Og+qp+w0+Bt+l+c+r+t,1,C+bo+Og+qp+w0+vl+l+c+se+t,1,C+Yi+ys+bp+Jn+X+l+c+r+t,2,u+Er+Hh+dt+X+qo+c+r+t,1,u+Er+Hh+dt+Yn+qo+c+D+t,1,u+Er+Gh+dt+ee+e4+c+r+t,1,u+Er+Gh+dt+Rp+i8+c+D+t,1,u+Er+zh+dt+ar+ad+c+r+t,1,u+Er+zh+dt+ri+o8+c+D+t,1,u+Fa+Xh+rn+ve+l+c+r+t,1,u+Fa+Xh+rn+ve+l+c+D+t,1,u+us+Us+dt+En+l+c+r+t,1,u+us+Us+dt+En+l+c+D+t,1,u+We+Hf+dt+X+l+c+r+t,1,u+We+Hf+dt+mr+l+c+D+t,1,u+We+Oh+x0+ig+l+c+r+t,1,u+We+Oh+x0+ig+l+c+D+t,1,u+We+Fh+zf+w4+l+c+r+t,1,u+We+Fh+zf+t8+l+c+D+t,1,u+Vn+Ph+Ze+Mn+l+c+r+t,1,u+Vn+Ph+Ze+e8+l+c+D+t,1,u+us+Us+dt+En+l+c+r+t,1,u+us+Us+dt+En+l+c+D+t,1,C+hf+ff+hs+wd+ve+l+c+r+t,1,C+hf+ff+hs+wd+ve+l+c+D+t,1,u+Vn+Mh+Ze+s2+l+c+r+t,1,u+Vn+Mh+Ze+n8+l+c+D+t,1,C+B1+U1+nd+Du+A8+l+c+r+t,1,C+B1+U1+nd+Du+ke+l+c+D+t,1,C+Bs+G1+li+Gi+Bt+l+c+r+t,1,C+Bs+G1+li+Gi+vl+l+c+se+t,1,C+H1+z1+Ac+Gi+Bt+l+c+r+t,1,C+H1+z1+Ac+Gi+vl+l+c+se+t,1,C+dg+xp+Go+Xa+Bt+l+c+r+t,1,C+dg+xp+Go+Xa+Bt+l+c+D+t,1,C+yp+wp+fn+Xa+Bt+l+c+r+t,1,C+yp+wp+fn+Xa+Bt+l+c+D+t,1,C+df+X1+Ed+Pr+Bt+l+c+r+t,1,C+df+X1+Ed+Pr+Bt+l+c+D+t,1,C+W1+$1+pf+Pr+Bt+l+c+r+t,1,C+W1+$1+pf+Pr+Bt+l+c+D+t,1,C+Yi+Xs+$i+ze+ye+l+c+r+t,1,C+Yi+Xs+$i+ze+G3+l+c+se+t,1,C+Hu+cu+ma+ze+Kr+l+c+r+t,1,C+Hu+cu+ma+ze+B3+l+c+se+t,1,C+zu+lu+wn+ze+Ge+l+c+r+t,1,C+zu+lu+wn+ze+U3+l+c+se+t,1,C+Vp+q1+hs+Hi+Bt+l+c+r+t,1,C+Vp+q1+hs+Hi+Bt+l+c+D+t,1,C+gf+mf+Ir+Hi+Bt+l+c+r+t,1,C+gf+mf+Ir+Hi+Bt+l+c+D+t,1,C+Nm+jm+Bm+Rm+ee+go+c+r+t,1,u+Df+zi+zp+hn+l+c+r+t,1,u+Df+zi+zp+R3+l+c+D+t,1,C+V1+sg+bf+_n+og+l+c+r+t,1,C+V1+sg+bf+_n+og+l+c+se+t,1,C+vp+Sp+ba+Jn+Bt+l+c+r+t,1,C+vp+Sp+ba+Jn+Bt+l+c+D+t,1,C+pg+kp+Rf+Fi+Bt+l+c+r+t,1,C+pg+kp+Rf+Fi+Bt+l+c+D+t,1,C+K1+Kp+fs+P0+Bt+l+c+r+t,1,C+K1+Kp+fs+P0+Bt+l+c+D+t,1,C+J1+tp+uu+Fi+sa+Si+c+r+t,1,C+J1+tp+uu+Fi+yl+Si+c+D+t,1,tr+gg+Dg+M0+Jn+Ge+qo+c+r+t,1,C+gg+Dg+M0+Jn+Ge+ku+c+r+t,1,C+Y1+Yp+Od+Kf+ee+Fe+c+r+t,1,C+Y1+Yp+Od+Kf+gr+wl+c+D+t,1,C+Z1+Q1+xf+Hr+Bt+ia+c+r+t,1,C+Z1+Q1+xf+Hr+Bt+Pp+c+D+t,1,C+l0+u0+hu+Hr+ve+ku+c+r+t,1,C+l0+u0+hu+Hr+ve+u8+c+D+t,1,C+ep+np+yf+Yo+Bt+ad+c+r+t,1,C+ep+np+yf+Yo+Bt+l8+c+D+t,1,u+Fa+id+Xf+X+l+c+r+t,1,u+Fa+id+Xf+Yn+l+c+D+t,1,C+" +lat_1=37"+R4+sr+gs+bt+l+c+r+t,1,C+cg+rp+Br+Xi+Qn+ia+c+r+t,1,C+cg+rp+Br+Xi+Mp+Pp+c+D+t,1,C+ls+wf+Ur+Xi+Qn+Fe+c+r+t,1,C+ls+wf+Ur+Xi+Mp+wl+c+D+t,1,C+Bs+lg+li+Dh+X+l+c+r+t,1,C+Bs+lg+li+Dh+mr+l+c+D+t,1,C+ap+ip+vf+ze+X+l+c+r+t,1,C+ap+ip+vf+ze+mr+l+c+D+t,1,C+Jp+Mg+pd+gs+Bt+l+c+r+t,1,C+Jp+Mg+pd+gs+Bt+l+c+D+t,1,C+Ap+_p+Pd+_n+Bt+l+c+r+t,1,C+Ap+_p+Pd+_n+Bt+l+c+D+t,2,C+Ll+Zp+ba+pn+Bt+l+c+D+t,1,C+sp+op+Sf+pn+Bt+l+c+r+t,1,C+sp+op+Sf+pn+Bt+l+c+D+t,1,C+cp+lp+Xu+pn+Bt+l+c+r+t,1,C+cp+lp+Xu+pn+Bt+l+c+D+t,1,u+y+pn+pe+S4+D8+c+r+t,1,u+Gn+Wh+Ze+ee+l+c+r+t,1,u+Gn+Wh+Ze+Rp+l+c+D+t,1,u+Gn+$h+Ze+ye+zr+c+r+t,1,u+Gn+$h+Ze+Ta+ai+c+D+t,1,u+Gn+qh+Ze+ar+zr+c+r+t,1,u+Gn+qh+Ze+ri+ai+c+D+t,1,u+Gn+Wf+Ze+Bt+l+c+r+t,1,u+Gn+Wf+Ze+Bt+l+c+D+t,1,C+k0+f0+Ua+In+X+ia+c+r+t,1,C+ni+h0+bl+In+X+Fe+c+r+t,1,C+A0+d0+Je+In+X+Si+c+r+t,1,C+I2+Ul+oi+po+bt+l+c+m+r+t,1,tr+I2+Ul+oi+po+bt+l+c+m+r+t,1,tr+I2+Ul+oi+po+bt+l+c+m+r+t,1,C+k0+f0+Ua+In+Yn+c8+c+D+t,1,C+ni+h0+bl+In+Yn+Ep+c+D+t,1,C+A0+d0+Je+In+Yn+Si+c+D+t,1,u+kw+P8+rn+X+l+c+r+t,1,u+Aw+iw+rn+X+l+c+r+t,1,u+Lm+T0+Jo+X+l+c+r+t,1,u+_w+M8+Jo+X+l+c+r+t,1,u+Cw+sw+" +k=1"+X+l+c+r+t,1,u+Lm+T0+Jo+Yn+l+c+D+t,1,I+Kl+c+r+t,1,I+To+c+r+t,1,I+$l+st+c+r+t,1,u+" +lat_0=13.5 +lon_0=144.75 +k=1"+hn+go+c+r+t,9,u+vE+" +lon_0=46.5 +k=0.9994"+ar+l+Tr+jf+f3+r+t,22,Q+c+t,1,u+$u+xk+dt+bt+l+c+r+t,1,u+$u+Ru+dt+bt+l+c+r+t,1,u+sr+LS+dt+bt+l+c+r+t,1,u+$u+J8+dt+bt+l+c+r+t,1,u+sr+NS+dt+bt+l+c+r+t,1,u+sr+y2+dt+bt+l+c+r+t,1,u+sr+jS+dt+bt+l+c+r+t,1,u+sr+yk+dt+bt+l+c+r+t,1,u+sr+BS+dt+bt+l+c+r+t,1,u+Vn+US+dt+bt+l+c+r+t,1,u+oi+uk+dt+bt+l+c+r+t,1,u+oi+hk+dt+bt+l+c+r+t,1,u+oi+fk+dt+bt+l+c+r+t,1,u+$a+" +lon_0=142"+dt+bt+l+c+r+t,1,u+$a+Yx+dt+bt+l+c+r+t,1,u+$a+" +lon_0=124"+dt+bt+l+c+r+t,1,u+$a+Ru+dt+bt+l+c+r+t,1,u+" +lat_0=20"+y2+dt+bt+l+c+r+t,1,u+$a+e7+dt+bt+l+c+r+t,1,I+Ss+c+r+t,1,I+Zs+c+r+t,1,I+cc+c+r+t,1,I+Ao+c+r+t,1,I+Wc+c+r+t,11,u+y+w6+pe+X+un+de+m+r+t,3,Q+c+m+t,1,I+ua+c+m+r+t,1,I+Ka+c+m+r+t,1,I+Ks+c+m+r+t,11,u+y+" +lon_0=105.625 +k=1.000024"+tc+Jx+de+m+r+t,1,u+y+" +lon_0=105.625 +k=1.00002514"+tc+Jx+c+m+r+t,1,u+y+" +lon_0=96.875 +k=1"+tc+" +y_0=1400000"+de+m+r+t,1,u+y+" +lon_0=96.875 +k=0.99999387"+tc+va+c+m+r+t,13,I+Wl+st+c+m+r+t,1,I+Io+st+c+m+r+t,1,I+yo+st+c+m+r+t,45,Q+c+t,1,u+bg+lw+A2+kd+l+c+r+t,1,u+bg+lw+A2+Xx+l+c+se+t,1,u+bg+lw+A2+kd+l+c+r+t,1,u+bg+lw+A2+Xx+l+c+se+t,1,u+$i+I8+" +k=1.0002"+xd+l+c+r+t,1,u+$i+I8+" +k=1.0002"+jp+l+c+se+t,1,u+$i+I8+" +k=1.0002"+xd+l+c+r+t,1,u+$i+I8+" +k=1.0002"+jp+l+c+se+t,1,C+Dw+Rw+T8+tg+xd+" +y_0=130000"+c+r+t,1,C+Dw+Rw+T8+tg+jp+pF+c+se+t,1,C+Dw+Rw+T8+tg+xd+" +y_0=130000"+c+r+t,1,C+Dw+Rw+T8+tg+jp+pF+c+se+t,1,C+ml+ma+E8+N4+" +x_0=120000 +y_0=60000"+c+r+t,1,C+ml+ma+E8+N4+gF+SF+c+se+t,1,C+ml+ma+E8+N4+" +x_0=120000 +y_0=60000"+c+r+t,1,C+ml+ma+E8+N4+gF+SF+c+se+t,1,u+Fa+gl+p7+kd+l+c+r+t,1,u+Fa+gl+p7+Xx+l+c+se+t,1,u+Fa+gl+p7+kd+l+c+r+t,1,u+Fa+gl+p7+Xx+l+c+se+t,1,C+Lw+Ac+ze+N8+En+" +y_0=30000"+c+r+t,1,C+Lw+Ac+ze+N8+h8+kF+c+se+t,1,C+Lw+Ac+ze+N8+En+" +y_0=30000"+c+r+t,1,C+Lw+Ac+ze+N8+h8+kF+c+se+t,1,Gr+Nw+g7+m7+" +k=1"+a4+pk+Za+b7+c+r+t,1,Gr+Nw+g7+m7+" +k=1"+dF+mF+Za+b7+c+se+t,1,Gr+Nw+g7+m7+" +k=1"+a4+pk+Za+b7+c+r+t,1,Gr+Nw+g7+m7+" +k=1"+dF+mF+Za+b7+c+se+t,1,u+ds+gl+j4+tc+l+c+r+t,1,u+ds+gl+j4+Bp+l+c+se+t,1,u+ds+gl+j4+tc+l+c+r+t,1,u+ds+gl+j4+Bp+l+c+se+t,1,u+bg+B4+x7+xd+l+c+r+t,1,u+bg+B4+x7+jp+l+c+se+t,1,u+bg+B4+x7+xd+l+c+r+t,1,u+bg+B4+x7+jp+l+c+se+t,1,u+i4+uw+Tu+tc+l+c+r+t,1,u+i4+uw+Tu+Bp+l+c+se+t,1,u+i4+uw+Tu+tc+l+c+r+t,1,u+i4+uw+Tu+Bp+l+c+se+t,1,u+$i+gl+u2+tc+l+c+r+t,1,u+$i+gl+u2+Bp+l+c+se+t,1,u+$i+gl+u2+tc+l+c+r+t,1,u+$i+gl+u2+Bp+l+c+se+t,1,u+Wa+hw+y7+" +x_0=10000"+l+c+r+t,1,u+Wa+hw+y7+FF+l+c+se+t,1,u+Wa+hw+y7+" +x_0=10000"+l+c+r+t,1,u+Wa+hw+y7+FF+l+c+se+t,1,u+Wa+Bc+w7+kd+l+c+r+t,1,u+Wa+Bc+w7+Xx+l+c+se+t,1,u+Wa+Bc+w7+kd+l+c+r+t,1,u+Wa+Bc+w7+Xx+l+c+se+t,1,u+s4+Iu+" +k=1.0001"+xd+l+c+r+t,1,u+s4+Iu+" +k=1.0001"+jp+l+c+se+t,1,u+s4+Iu+" +k=1.0001"+xd+l+c+r+t,1,u+s4+Iu+" +k=1.0001"+jp+l+c+se+t,1,Gr+t2+j8+" +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000"+Za+" +gamma=5"+c+r+t,1,Gr+t2+j8+" +alpha=5 +k=1"+bF+cF+Za+" +gamma=5"+c+se+t,1,Gr+t2+j8+" +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000"+Za+" +gamma=5"+c+r+t,1,Gr+t2+j8+" +alpha=5 +k=1"+bF+cF+Za+" +gamma=5"+c+se+t,1,u+o4+fw+h6+" +x_0=60000"+l+c+r+t,1,u+o4+fw+h6+AF+l+c+se+t,1,u+o4+fw+h6+" +x_0=60000"+l+c+r+t,1,u+o4+fw+h6+AF+l+c+se+t,1,u+jw+C3+U4+v7+l+c+r+t,1,u+jw+C3+U4+_F+l+c+se+t,1,u+jw+C3+U4+v7+l+c+r+t,1,u+jw+C3+U4+_F+l+c+se+t,1,C+Ll+G4+O8+B8+hn+S2+c+r+t,1,C+Ll+G4+O8+B8+L3+ak+c+se+t,1,C+Ll+G4+O8+B8+hn+S2+c+r+t,1,C+Ll+G4+O8+B8+L3+ak+c+se+t,1,u+Bw+dw+S7+tc+l+c+r+t,1,u+Bw+dw+S7+Bp+l+c+se+t,1,u+Bw+dw+S7+tc+l+c+r+t,1,u+Bw+dw+S7+Bp+l+c+se+t,1,u+Uw+U8+H4+bt+l+c+r+t,1,u+Uw+U8+H4+bt+l+c+se+t,1,u+Uw+U8+H4+bt+l+c+r+t,1,u+Uw+U8+H4+bt+l+c+se+t,4,C+Yi+Xs+$i+ze+ye+l+c+r+t,1,C+Yi+Xs+$i+ze+G3+l+c+se+t,2,u+y+O2+" +k=1"+X+l+c+m+r+t,5,u+y+Ma+" +k=0.9985000000000001"+a4+l+c+m+r+t,1,u+y+Ma+" +k=1"+Ck+l+c+m+r+t,3,C+Ll+Zp+ba+pn+Bt+l+c+r+t,1,C+Yi+ys+bp+Jn+Yn+l+c+D+t,1,Q+Tr+jf+" +towgs84=-24,-203,268,0,0,0,0"+t,1,Q+Tr+jf+" +towgs84=-183,-15,273,0,0,0,0"+t,1,Q+ct+" +towgs84=-235,-110,393,0,0,0,0"+t,1,C+Hu+cu+ma+ze+Kr+l+c+r+t,1,C+Hu+cu+ma+ze+B3+l+c+se+t,1,C+zu+lu+wn+ze+Ge+l+c+r+t,1,C+zu+lu+wn+ze+U3+l+c+se+t,5,Q+Tr+jf+IC+t,2,Q+Tr+jf+" +towgs84=-63,176,185,0,0,0,0"+t,21,I+ws+Tr+jf+IC+r+t,7,C+f6+z4+sr+G8+ye+l+c+m+r+t,1,C+f6+z4+sr+G8+Ta+l+c+m+D+t,1,C+f6+z4+sr+G8+ye+l+c+r+t,1,C+f6+z4+sr+G8+Ta+l+c+D+t,6,Gs+ka+Hn+bt+l+de+m+r+t,1,Gs+Yt+Hn+bt+l+de+m+r+t,1,"+proj=cea"+Hn+" +lat_ts=30"+bt+l+de+m+r+t,29,C+" +lat_1=39 +lat_2=43"+ki+O2+bt+l+c+m+r+t,21,Q+c+t,1,u+MS+DS+gk+ik+ok+c+r+t,6,Q+c+t,1,u+MS+DS+gk+ik+ok+c+r+t,14,I+Ya+Tr+jf+Fx+r+t,1,I+Aa+Tr+jf+Fx+r+t,1,I+la+Tr+jf+Fx+r+t,28,Q+c+t,2,Q+c+t,2,Q+c+t,2,Q+c+t,16,C+" +lat_1=43.2 +lat_0=43.2 +lon_0=-95.25 +k_0=1.000052 +x_0=3505207.010414021 +y_0=2926085.852171705"+c+D+t,1,C+" +lat_1=43.16666666666666 +lat_0=43.16666666666666 +lon_0=-92.75 +k_0=1.000043 +x_0=3810007.62001524 +y_0=2987045.974091948"+c+D+t,1,u+eg+" +lon_0=-91.2 +k=1.000035 +x_0=4114808.229616459 +y_0=2529845.05969012"+c+D+t,1,C+" +lat_1=42.53333333333333 +lat_0=42.53333333333333 +lon_0=-94.83333333333333 +k_0=1.000045 +x_0=4419608.839217679 +y_0=2621285.242570485"+c+D+t,1,C+" +lat_1=42.65 +lat_0=42.65 +lon_0=-92.25 +k_0=1.000032 +x_0=4724409.448818898 +y_0=2712725.425450851"+c+D+t,1,u+eg+" +lon_0=-95.73333333333333 +k=1.000039 +x_0=5029210.058420117 +y_0=2011684.023368047"+c+D+t,1,u+eg+" +lon_0=-94.63333333333334"+h6+" +x_0=5334010.668021336 +y_0=2072644.145288291"+c+D+t,1,u+eg+" +lon_0=-93.71666666666667 +k=1.000033 +x_0=5638811.277622555 +y_0=2133604.267208535"+c+D+t,1,u+eg+" +lon_0=-92.81666666666666"+xg+" +x_0=5943611.887223775 +y_0=2194564.389128779"+c+D+t,1,C+" +lat_1=41.83333333333334 +lat_0=41.83333333333334 +lon_0=-91.66666666666667 +k_0=1.00002 +x_0=6248412.496824994 +y_0=2438404.876809754"+c+D+t,1,u+eg+" +lon_0=-90.53333333333333"+xg+" +x_0=6553213.106426213 +y_0=2316484.632969266"+c+D+t,1,C+" +lat_1=40.91666666666666 +lat_0=40.91666666666666 +lon_0=-93.75 +k_0=1.000037 +x_0=6858013.716027432"+lF+c+D+t,1,u+eg+FS+Ad+" +x_0=7162814.325628651 +y_0=1950723.901447803"+c+D+t,1,u+eg+" +lon_0=-91.25 +k=1.000018 +x_0=7467614.93522987"+lF+c+D+t,3,Q+c+t,1,I+Ya+st+c+r+t,1,I+Aa+st+c+r+t,1,I+la+st+c+r+t,1,I+ws+st+c+r+t,1,I+Vu+st+c+r+t,1,I+Ku+st+c+r+t,1,I+Nd+st+c+r+t,1,I+Lg+st+c+r+t,3,Q+c+t,2,Q+c+t,23,u+h2+H8+A2+En+l+c+r+t,1,u+" +lat_0=48"+H8+" +k=1.00019"+hn+l+c+r+t,1,C+X4+h2+O0+" +k_0=1.000145"+En+go+c+r+t,1,C+X4+h2+" +lon_0=-108.5"+tg+ee+" +y_0=150000"+c+r+t,1,C+Gw+Hw+Zn+tg+ee+zr+c+r+t,1,C+Gw+Hw+Zn+" +k_0=1.00009"+hn+S2+c+r+t,1,u+t2+" +lon_0=-107.75 +k=1.000148"+ee+l+c+r+t,1,C+Ik+" +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185"+hn+zr+c+r+t,1,C+ME+DE+zI+" +k_0=1.0001515"+ee+S2+c+r+t,1,u+RE+XI+" +k=1.00024"+hn+l+c+r+t,1,u+h2+H8+A2+h8+l+c+se+t,1,u+" +lat_0=48"+H8+" +k=1.00019"+L3+l+c+se+t,1,C+X4+h2+O0+" +k_0=1.000145"+h8+" +y_0=199999.9999992"+c+se+t,1,C+X4+h2+" +lon_0=-108.5"+tg+d8+" +y_0=150000.00001464"+c+se+t,1,C+Gw+Hw+Zn+tg+d8+uF+c+se+t,1,C+Gw+Hw+Zn+" +k_0=1.00009"+L3+" +y_0=49999.99971024"+c+se+t,1,u+t2+" +lon_0=-107.75 +k=1.000148"+d8+l+c+se+t,1,C+Ik+" +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185"+L3+uF+c+se+t,1,C+ME+DE+zI+" +k_0=1.0001515"+d8+ak+c+se+t,1,u+RE+XI+" +k=1.00024"+R3+l+c+D+t,3,u+e2+" +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000"+c+r+t,1,u+e2+" +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000"+c+D+t,1,Q+c+t,3,Q+de+t,3,Q+de+t,3,u+zw+Xw+" +k=1"+v8+" +y_0=126867.909"+Wx+$x+" +towgs84=-275.7224,94.7824,340.8944,-8.001,-4.42,-11.821,1"+r+t,115,u+n2+z8+Eu+ce+le+c+r+t,1,u+n2+z8+Eu+ce+le+c+D+t,1,u+f2+Kx+Ou+ce+le+c+r+t,1,u+f2+Kx+Ou+ce+le+c+D+t,1,u+" +lat_0=39"+pw+Fu+ce+le+c+r+t,1,u+" +lat_0=39"+pw+Fu+ce+le+c+D+t,1,u+" +lat_0=40.45"+r2+W4+ce+le+c+r+t,1,u+" +lat_0=40.45"+r2+W4+ce+le+c+D+t,1,u+" +lat_0=40.05"+WI+yg+ce+le+c+r+t,1,u+" +lat_0=40.05"+WI+yg+ce+le+c+D+t,1,u+$4+a2+wg+ce+le+c+r+t,1,u+$4+a2+wg+ce+le+c+D+t,1,u+" +lat_0=39"+c4+k7+ce+le+c+r+t,1,u+" +lat_0=39"+c4+k7+ce+le+c+D+t,1,u+" +lat_0=40.4"+$I+Fu+ce+le+c+r+t,1,u+" +lat_0=40.4"+$I+Fu+ce+le+c+D+t,1,u+n2+qI+d2+ce+le+c+r+t,1,u+n2+qI+d2+ce+le+c+D+t,1,u+l4+VI+" +k=1.000021"+ce+le+c+r+t,1,u+l4+VI+" +k=1.000021"+ce+le+c+D+t,1,u+u4+KI+" +k=1.000024"+ce+le+c+r+t,1,u+u4+KI+" +k=1.000024"+ce+le+c+D+t,1,u+" +lat_0=40.15"+YI+" +k=1.000032"+ce+le+c+r+t,1,u+" +lat_0=40.15"+YI+" +k=1.000032"+ce+le+c+D+t,1,u+" +lat_0=38.1"+a2+p2+ce+le+c+r+t,1,u+" +lat_0=38.1"+a2+p2+ce+le+c+D+t,1,u+" +lat_0=38.45"+gw+" +k=1.000018"+ce+le+c+r+t,1,u+" +lat_0=38.45"+gw+" +k=1.000018"+ce+le+c+D+t,1,u+" +lat_0=38.65"+ZI+W4+ce+le+c+r+t,1,u+" +lat_0=38.65"+ZI+W4+ce+le+c+D+t,1,u+" +lat_0=39.1"+QI+wg+ce+le+c+r+t,1,u+" +lat_0=39.1"+QI+wg+ce+le+c+D+t,1,u+h4+z8+wg+ce+le+c+r+t,1,u+h4+z8+wg+ce+le+c+D+t,1,u+" +lat_0=38.2"+X8+Ad+ce+le+c+r+t,1,u+" +lat_0=38.2"+X8+Ad+ce+le+c+D+t,1,u+f4+pw+" +k=1.000033"+ce+le+c+r+t,1,u+f4+pw+" +k=1.000033"+ce+le+c+D+t,1,u+d4+Kx+yg+ce+le+c+r+t,1,u+d4+Kx+yg+ce+le+c+D+t,1,u+" +lat_0=39.95"+r2+p2+ce+le+c+r+t,1,u+" +lat_0=39.95"+r2+p2+ce+le+c+D+t,1,u+f2+c4+Ou+ce+le+c+r+t,1,u+f2+c4+Ou+ce+le+c+D+t,1,u+l4+JI+q4+ce+le+c+r+t,1,u+l4+JI+q4+ce+le+c+D+t,1,u+p4+" +lon_0=-85.7"+Eu+ce+le+c+r+t,1,u+p4+" +lon_0=-85.7"+Eu+ce+le+c+D+t,1,u+" +lat_0=39.9"+P0+Eu+ce+le+c+r+t,1,u+" +lat_0=39.9"+P0+Eu+ce+le+c+D+t,1,u+" +lat_0=39.65"+g4+wg+ce+le+c+r+t,1,u+" +lat_0=39.65"+g4+wg+ce+le+c+D+t,1,u+" +lat_0=37.95"+Gx+xg+ce+le+c+r+t,1,u+" +lat_0=37.95"+Gx+xg+ce+le+c+D+t,1,u+" +lat_0=39.75"+W8+u2+ce+le+c+r+t,1,u+" +lat_0=39.75"+W8+u2+ce+le+c+D+t,1,u+p4+Gx+Ou+ce+le+c+r+t,1,u+p4+Gx+Ou+ce+le+c+D+t,1,u+f4+r4+Eu+ce+le+c+r+t,1,u+f4+r4+Eu+ce+le+c+D+t,1,u+" +lat_0=38.7 +lon_0=-85.95"+V4+ce+le+c+r+t,1,u+" +lat_0=38.7 +lon_0=-85.95"+V4+ce+le+c+D+t,1,u+K4+gw+xg+ce+le+c+r+t,1,u+K4+gw+xg+ce+le+c+D+t,1,u+" +lat_0=40.3"+k2+yg+ce+le+c+r+t,1,u+" +lat_0=40.3"+k2+yg+ce+le+c+D+t,1,u+" +lat_0=38.55"+tT+d2+ce+le+c+r+t,1,u+" +lat_0=38.55"+tT+d2+ce+le+c+D+t,1,u+" +lat_0=38.8"+g4+p2+ce+le+c+r+t,1,u+" +lat_0=38.8"+g4+p2+ce+le+c+D+t,1,u+Y4+Gx+Ou+ce+le+c+r+t,1,u+Y4+Gx+Ou+ce+le+c+D+t,1,u+" +lat_0=38.4"+$8+Tu+ce+le+c+r+t,1,u+" +lat_0=38.4"+$8+Tu+ce+le+c+D+t,1,u+h4+W8+" +k=1.000037"+ce+le+c+r+t,1,u+h4+W8+" +k=1.000037"+ce+le+c+D+t,1,u+K4+eT+Fu+ce+le+c+r+t,1,u+K4+eT+Fu+ce+le+c+D+t,1,u+f2+" +lon_0=-86.75"+xg+ce+le+c+r+t,1,u+f2+" +lon_0=-86.75"+xg+ce+le+c+D+t,1,u+" +lat_0=38.95"+a2+d2+ce+le+c+r+t,1,u+" +lat_0=38.95"+a2+d2+ce+le+c+D+t,1,u+" +lat_0=39.45"+X8+Ou+ce+le+c+r+t,1,u+" +lat_0=39.45"+X8+Ou+ce+le+c+D+t,1,u+u4+mw+Fu+ce+le+c+r+t,1,u+u4+mw+Fu+ce+le+c+D+t,1,u+$4+nT+V4+ce+le+c+r+t,1,u+$4+nT+V4+ce+le+c+D+t,1,u+Z4+" +lon_0=-86.7"+Ad+ce+le+c+r+t,1,u+Z4+" +lon_0=-86.7"+Ad+ce+le+c+D+t,1,u+" +lat_0=37.85"+r2+Tu+ce+le+c+r+t,1,u+" +lat_0=37.85"+r2+Tu+ce+le+c+D+t,1,u+e2+" +lon_0=-87.95"+q4+ce+le+c+r+t,1,u+e2+" +lon_0=-87.95"+q4+ce+le+c+D+t,1,u+" +lat_0=39.7"+Kx+" +k=1.000044"+ce+le+c+r+t,1,u+" +lat_0=39.7"+Kx+" +k=1.000044"+ce+le+c+D+t,1,u+Q4+" +lon_0=-85.3"+yg+ce+le+c+r+t,1,u+Q4+" +lon_0=-85.3"+yg+ce+le+c+D+t,1,u+Y4+rT+k7+ce+le+c+r+t,1,u+Y4+rT+k7+ce+le+c+D+t,1,u+e2+" +lon_0=-87.05 +k=1.000014"+ce+le+c+r+t,1,u+e2+" +lon_0=-87.05 +k=1.000014"+ce+le+c+D+t,1,u+Oa+k2+" +k=1.000041"+ce+le+c+r+t,1,u+Oa+k2+" +k=1.000041"+ce+le+c+D+t,1,u+Q4+eb+" +k=1.000017"+ce+le+c+r+t,1,u+Q4+eb+" +k=1.000017"+ce+le+c+D+t,1,u+" +lat_0=40.2"+mw+Fu+ce+le+c+r+t,1,u+" +lat_0=40.2"+mw+Fu+ce+le+c+D+t,1,u+Z4+q8+Tu+ce+le+c+r+t,1,u+Z4+q8+Tu+ce+le+c+D+t,1,u+d4+$8+Ad+ce+le+c+r+t,1,u+d4+$8+Ad+ce+le+c+D+t,1,u+n2+" +lon_0=-85.25"+Eu+ce+le+c+r+t,1,u+n2+" +lon_0=-85.25"+Eu+ce+le+c+D+t,3,Q+c+m+t,1,I+la+c+m+r+t,1,I+ws+c+m+r+t,1,I+Vu+c+m+r+t,152,u+LE+pn+" +k=1.0000365285 +x_0=147218.6942 +y_0=0.0037"+c+r+t,1,u+NE+aT+" +k=1.0000495683 +x_0=172821.9461 +y_0=0.0017"+c+r+t,1,u+jE+iT+" +k=1.0000486665 +x_0=93150 +y_0=0.0029"+c+r+t,1,C+BE+UE+sT+" +k_0=1.0000331195 +x_0=228600.4575 +y_0=148551.4837"+c+r+t,1,u+Hl+" +lon_0=-88"+Ad+" +x_0=31600 +y_0=4600"+c+r+t,1,u+GE+oT+" +k=1.0000382778 +x_0=175260.3502 +y_0=0.0048"+c+r+t,1,C+HE+zE+cT+" +k_0=1.0000383841 +x_0=64008.1276 +y_0=59445.9043"+c+r+t,1,u+XE+" +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8893 +y_0=0.0049"+c+r+t,1,C+WE+$E+lT+" +k_0=1.0000391127 +x_0=60045.72 +y_0=44091.4346"+c+r+t,1,u+" +lat_0=43.6"+uT+" +k=1.0000463003 +x_0=199949.1989 +y_0=0.0086"+c+r+t,1,C+qE+VE+hT+" +k_0=1.00003498 +x_0=169164.3381 +y_0=111569.6134"+c+r+t,1,C+CF+IF+KE+" +k_0=1.0000349151 +x_0=113690.6274 +y_0=53703.1201"+c+r+t,1,C+xF+yF+fT+" +k_0=1.0000384786 +x_0=247193.2944 +y_0=146591.9896"+c+r+t,1,u+YE+dT+" +k=1.0000346418 +x_0=263347.7263 +y_0=0.0076"+c+r+t,1,u+" +lat_0=44.4"+pT+" +k=1.0000187521 +x_0=158801.1176 +y_0=0.0023"+c+r+t,1,u+ZE+FS+" +k=1.0000385418 +x_0=59131.3183 +y_0=0.0041"+c+r+t,1,u+QE+gT+" +k=1.0000410324 +x_0=51816.104 +y_0=0.003"+c+r+t,1,C+JE+tO+mT+" +k_0=1.000035079 +x_0=120091.4402 +y_0=91687.92389999999"+c+r+t,1,u+eO+bT+" +k=1.0000552095 +x_0=133502.6683 +y_0=0.0063"+c+r+t,1,u+nO+xT+" +k=1.0000673004 +x_0=275844.5533 +y_0=0.0157"+c+r+t,1,u+rO+" +lon_0=-90.8 +k=1.0000349452 +x_0=242316.4841 +y_0=0.01"+c+r+t,1,C+aO+iO+yT+" +k_0=1.0000390487 +x_0=170078.7403 +y_0=45830.2947"+c+r+t,1,C+sO+oO+bw+" +k_0=1.0000344057 +x_0=150876.3018 +y_0=79170.7795"+c+r+t,1,u+cO+wT+" +k=1.0000394961 +x_0=113081.0261 +y_0=0.0045"+c+r+t,1,u+lO+vT+" +k=1.0000677153 +x_0=220980.4419 +y_0=0.008500000000000001"+c+r+t,1,u+uO+ST+" +k=1.0000353 +x_0=27000 +y_0=25000"+c+r+t,1,u+hO+kT+" +k=1.0000260649 +x_0=185928.3728 +y_0=0.0009"+c+r+t,1,u+fO+q8+" +k=1.0000233704 +x_0=79857.7614 +y_0=0.0012"+c+r+t,1,u+dO+AT+" +k=1.0000319985 +x_0=130454.6598 +y_0=0.0033"+c+r+t,1,C+pO+gO+_T+" +k_0=1.0000627024 +x_0=198425.197 +y_0=105279.7829"+c+r+t,1,u+mO+CT+" +k=1.0000599003 +x_0=116129.0323 +y_0=0.0058"+c+r+t,1,C+bO+xO+" +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493 +y_0=55049.2669"+c+r+t,1,u+yO+IT+" +k=1.0000234982 +x_0=238658.8794 +y_0=0.0032"+c+r+t,1,u+wO+TT+" +k=1.0000362499 +x_0=105461.0121 +y_0=0.0029"+c+r+t,1,C+vO+SO+ET+" +k_0=1.0000434122 +x_0=204521.209 +y_0=121923.9861"+c+r+t,1,u+kO+OT+" +k=1.0000236869 +x_0=182880.3676 +y_0=0.0033"+c+r+t,1,C+AO+_O+FT+" +k_0=1.0000686968 +x_0=70104.1401 +y_0=57588.0346"+c+r+t,1,C+CO+IO+PT+" +k_0=1.0000362977 +x_0=167640.3354 +y_0=86033.0876"+c+r+t,1,u+TO+xw+" +k=1.0000433849 +x_0=141732.2823 +y_0=0.0059"+c+r+t,1,C+EO+OO+" +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.1128 +y_0=50022.1874"+c+r+t,1,u+FO+MT+" +k=1.0000649554 +x_0=227990.8546 +y_0=0.0109"+c+r+t,1,C+wF+vF+DT+" +k_0=1.0000375653 +x_0=202387.6048 +y_0=134255.4253"+c+r+t,1,u+PO+RT+" +k=1.0000337311 +x_0=146304.2926 +y_0=0.0068"+c+r+t,1,u+MO+LT+" +k=1.0000495976 +x_0=250546.1013 +y_0=0.0234"+c+r+t,1,u+DO+NT+" +k=1.0000373868 +x_0=185623.5716 +y_0=0.0051"+c+r+t,1,C+RO+LO+jT+" +k_0=1.0000573461 +x_0=216713.2336 +y_0=120734.1631"+c+r+t,1,u+Ww+BT+" +k=1.000032144 +x_0=262433.3253 +y_0=0.009599999999999999"+c+r+t,1,u+Ww+xw+" +k=1.0000381803 +x_0=165506.7302 +y_0=0.0103"+c+r+t,1,C+NO+jO+UT+" +k_0=1.0000597566 +x_0=187147.5744 +y_0=107746.7522"+c+r+t,1,u+BO+GT+" +k=1.0000361538 +x_0=256946.9138 +y_0=0.0041"+c+r+t,1,C+UO+GO+HT+" +k_0=1.0000408158 +x_0=222504.4451 +y_0=47532.0602"+c+r+t,1,C+HO+zO+zT+" +k_0=1.0000730142 +x_0=134417.0689 +y_0=50337.1092"+c+r+t,1,C+XO+WO+XT+" +k_0=1.0000367192 +x_0=232562.8651 +y_0=111088.2224"+c+r+t,1,C+$O+qO+WT+" +k_0=1.0000475376 +x_0=234086.8682 +y_0=188358.6058"+c+r+t,1,u+VO+$T+" +k=1.00003738 +x_0=120091.4415 +y_0=0.003"+c+r+t,1,u+KO+qT+" +k=1.0000346179 +x_0=208788.418 +y_0=0.0034"+c+r+t,1,u+YO+VT+" +k=1.0000333645 +x_0=185013.9709 +y_0=0.007"+c+r+t,1,C+ZO+QO+bw+" +k_0=1.0000392096 +x_0=120091.4402 +y_0=45069.7587"+c+r+t,1,C+JO+tF+pn+" +k_0=1.0000421209 +x_0=208483.6173 +y_0=134589.754"+c+r+t,1,u+LE+pn+" +k=1.0000365285 +x_0=147218.6941325883 +y_0=0.00365760731521463"+c+D+t,1,u+NE+aT+" +k=1.0000495683 +x_0=172821.945948692 +y_0=0.001828803657607315"+c+D+t,1,u+jE+iT+" +k=1.0000486665 +x_0=93150"+I3+c+D+t,1,C+BE+UE+sT+" +k_0=1.0000331195 +x_0=228600.4575057151 +y_0=148551.4835661671"+c+D+t,1,u+Hl+" +lon_0=-88"+Ad+" +x_0=31599.99989839979 +y_0=4599.999898399797"+c+D+t,1,u+GE+oT+" +k=1.0000382778 +x_0=175260.3502159004"+KT+c+D+t,1,C+HE+zE+cT+" +k_0=1.0000383841 +x_0=64008.12771145543 +y_0=59445.90419100838"+c+D+t,1,u+XE+" +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8892049784"+KT+c+D+t,1,C+WE+$E+lT+" +k_0=1.0000391127 +x_0=60045.72009144018 +y_0=44091.43449326898"+c+D+t,1,u+" +lat_0=43.6"+uT+" +k=1.0000463003 +x_0=199949.198983998"+YT+c+D+t,1,C+qE+VE+hT+" +k_0=1.00003498 +x_0=169164.338023876 +y_0=111569.613512827"+c+D+t,1,C+CF+IF+KE+" +k_0=1.0000349151 +x_0=113690.6273812548 +y_0=53703.12024384048"+c+D+t,1,C+xF+yF+fT+" +k_0=1.0000384786 +x_0=247193.2943865888 +y_0=146591.9896367793"+c+D+t,1,u+YE+dT+" +k=1.0000346418 +x_0=263347.7263906528 +y_0=0.00762001524003048"+c+D+t,1,u+" +lat_0=44.4"+pT+" +k=1.0000187521 +x_0=158801.1176022352 +y_0=0.002438404876809754"+c+D+t,1,u+ZE+FS+" +k=1.0000385418 +x_0=59131.31826263652"+ZT+c+D+t,1,u+QE+gT+" +k=1.0000410324 +x_0=51816.10393700787"+I3+c+D+t,1,C+JE+tO+mT+" +k_0=1.000035079"+hF+" +y_0=91687.92390144781"+c+D+t,1,u+eO+bT+" +k=1.0000552095 +x_0=133502.6682245364 +y_0=0.006400812801625603"+c+D+t,1,u+nO+xT+" +k=1.0000673004 +x_0=275844.5532131065 +y_0=0.0158496316992634"+c+D+t,1,u+rO+" +lon_0=-90.8 +k=1.0000349452 +x_0=242316.484023368 +y_0=0.01005842011684023"+c+D+t,1,C+aO+iO+yT+" +k_0=1.0000390487 +x_0=170078.7401574803 +y_0=45830.29484378968"+c+D+t,1,C+sO+oO+bw+" +k_0=1.0000344057 +x_0=150876.3017526035 +y_0=79170.77937515875"+c+D+t,1,u+cO+wT+" +k=1.0000394961 +x_0=113081.0261620523 +y_0=0.004572009144018288"+c+D+t,1,u+lO+vT+" +k=1.0000677153 +x_0=220980.4419608839"+YT+c+D+t,1,u+uO+ST+" +k=1.0000353 +x_0=27000 +y_0=24999.99989839979"+c+D+t,1,u+hO+kT+" +k=1.0000260649 +x_0=185928.3727711455 +y_0=0.0009144018288036576"+c+D+t,1,u+fO+q8+" +k=1.0000233704 +x_0=79857.76154432308 +y_0=0.001219202438404877"+c+D+t,1,u+dO+AT+" +k=1.0000319985 +x_0=130454.6596901194"+PS+c+D+t,1,C+pO+gO+_T+" +k_0=1.0000627024 +x_0=198425.1968503937 +y_0=105279.7828803657"+c+D+t,1,u+mO+CT+" +k=1.0000599003 +x_0=116129.0322580645"+QT+c+D+t,1,C+bO+xO+" +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493522987 +y_0=55049.26695453391"+c+D+t,1,u+yO+IT+" +k=1.0000234982 +x_0=238658.8794513589"+I3+c+D+t,1,u+wO+TT+" +k=1.0000362499 +x_0=105461.0121412243"+I3+c+D+t,1,C+vO+SO+ET+" +k_0=1.0000434122 +x_0=204521.2090424181 +y_0=121923.9861823724"+c+D+t,1,u+kO+OT+" +k=1.0000236869 +x_0=182880.3675895352"+PS+c+D+t,1,C+AO+_O+FT+" +k_0=1.0000686968 +x_0=70104.14020828041 +y_0=57588.03474726949"+c+D+t,1,C+CO+IO+PT+" +k_0=1.0000362977 +x_0=167640.3352806706 +y_0=86033.08773177546"+c+D+t,1,u+TO+xw+" +k=1.0000433849 +x_0=141732.2822453645"+QT+c+D+t,1,C+EO+OO+" +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.11277622555 +y_0=50022.1874523749"+c+D+t,1,u+FO+MT+" +k=1.0000649554 +x_0=227990.8544577089 +y_0=0.01097282194564389"+c+D+t,1,C+wF+vF+DT+" +k_0=1.0000375653 +x_0=202387.6047752095 +y_0=134255.4254508509"+c+D+t,1,u+PO+RT+" +k=1.0000337311 +x_0=146304.2926085852 +y_0=0.006705613411226822"+c+D+t,1,u+MO+LT+" +k=1.0000495976 +x_0=250546.1013970028 +y_0=0.02346964693929388"+c+D+t,1,u+DO+NT+" +k=1.0000373868 +x_0=185623.5715519431 +y_0=0.005181610363220727"+c+D+t,1,C+RO+LO+jT+" +k_0=1.0000573461 +x_0=216713.2337312675 +y_0=120734.1631699263"+c+D+t,1,u+Ww+BT+" +k=1.000032144 +x_0=262433.3251714504 +y_0=0.009448818897637795"+c+D+t,1,u+Ww+xw+" +k=1.0000381803 +x_0=165506.7300990602 +y_0=0.01036322072644145"+c+D+t,1,C+NO+jO+UT+" +k_0=1.0000597566 +x_0=187147.5742951486 +y_0=107746.7521463043"+c+D+t,1,u+BO+GT+" +k=1.0000361538 +x_0=256946.9138938278"+ZT+c+D+t,1,C+UO+GO+HT+" +k_0=1.0000408158 +x_0=222504.44500889 +y_0=47532.0603505207"+c+D+t,1,C+HO+zO+zT+" +k_0=1.0000730142 +x_0=134417.0688341377 +y_0=50337.10927101854"+c+D+t,1,C+XO+WO+XT+" +k_0=1.0000367192 +x_0=232562.8651257302 +y_0=111088.2224028448"+c+D+t,1,C+$O+qO+WT+" +k_0=1.0000475376 +x_0=234086.8681737363 +y_0=188358.6059436119"+c+D+t,1,u+VO+$T+" +k=1.00003738 +x_0=120091.4414020828"+I3+c+D+t,1,u+KO+qT+" +k=1.0000346179 +x_0=208788.4178816358"+PS+c+D+t,1,u+YO+VT+" +k=1.0000333645 +x_0=185013.9709423419 +y_0=0.007010414020828041"+c+D+t,1,C+ZO+QO+bw+" +k_0=1.0000392096"+hF+" +y_0=45069.7588011176"+c+D+t,1,C+JO+tF+pn+" +k_0=1.0000421209 +x_0=208483.6172720346 +y_0=134589.7539243078"+c+D+t,41,Q+c+t,6,u+y+" +lon_0=68.51666666666667 +k=1 +x_0=1300000"+e6+c+r+t,1,u+y+" +lon_0=71.51666666666667 +k=1"+wk+e6+c+r+t,1,u+y+" +lon_0=74.51666666666667 +k=1"+vk+e6+c+r+t,1,u+y+" +lon_0=77.51666666666667 +k=1"+Sk+e6+c+r+t,1,u+y+" +lon_0=80.51666666666667 +k=1 +x_0=5300000"+e6+c+r+t,12308,u+y+vr+" +k=1"+wa+l+H+jt+r+t,1,u+y+Zr+" +k=1"+si+l+H+jt+r+t,1,u+y+Pa+" +k=1"+Su+l+H+jt+r+t,1,u+y+xo+" +k=1"+Lc+l+H+jt+r+t,1,u+y+Ki+" +k=1"+Xp+l+H+jt+r+t,1,u+y+Wu+" +k=1"+Wp+l+H+jt+r+t,1,u+y+Fg+" +k=1"+Up+l+H+jt+r+t,1,u+y+Fd+" +k=1"+qf+l+H+jt+r+t,1,u+y+Pg+" +k=1"+Gp+l+H+jt+r+t,1,u+y+Qr+" +k=1"+Pc+l+H+jt+r+t,1,u+y+Jr+" +k=1"+Xo+l+H+jt+r+t,1,u+y+ca+" +k=1"+Cl+l+H+jt+r+t,1,u+y+ta+" +k=1"+Il+l+H+jt+r+t,1,u+y+ea+" +k=1"+wu+l+H+jt+r+t,1,u+y+ir+" +k=1"+Al+l+H+jt+r+t,1,u+y+Yr+" +k=1"+_l+l+H+jt+r+t,1,u+y+Mr+" +k=1"+Mc+l+H+jt+r+t,1,u+y+Xr+" +k=1"+Tl+l+H+jt+r+t,1,u+y+xr+" +k=1"+Dc+l+H+jt+r+t,1,u+y+Dr+" +k=1"+El+l+H+jt+r+t,1,u+y+Ag+" +k=1"+Hp+l+H+jt+r+t,1,u+y+vd+" +k=1"+Ol+l+H+jt+r+t,1,u+y+Lu+" +k=1"+Fl+l+H+jt+r+t,1,u+y+_g+" +k=1"+Pl+l+H+jt+r+t,1,u+y+Nu+" +k=1"+Ml+l+H+jt+r+t,1,u+y+Bl+" +k=1"+Wo+l+H+jt+r+t,1,u+y+Hc+" +k=1"+v0+l+H+jt+r+t,1,u+y+I0+" +k=1"+fo+l+H+jt+r+t,1,u+y+_u+" +k=1"+S0+l+H+jt+r+t,103,I+hi+ie+v3+r+t,1,I+vs+ie+v3+r+t,1,I+Ya+ie+v3+r+t,1,I+Aa+ie+v3+r+t,111,I+As+st+He+vc+r+t,1,I+Ys+st+He+vc+r+t,1,I+Ss+st+He+vc+r+t,1,I+Zs+st+He+vc+r+t,1,I+cc+st+He+vc+r+t,1,I+Ao+st+He+vc+r+t,1,I+Wc+st+He+vc+r+t,1,I+Zu+st+He+vc+r+t,1,I+Rd+st+He+vc+r+t,1,I+Zi+st+He+vc+r+t,91,I+As+st+He+Sh+r+t,1,I+Ys+st+He+Sh+r+t,1,I+Ss+st+He+Sh+r+t,1,I+Zs+st+He+Sh+r+t,1,I+cc+st+He+Sh+r+t,1,I+Ao+st+He+Sh+r+t,1,I+Wc+st+He+Sh+r+t,1,I+Zu+st+He+Sh+r+t,80,I+vs+ct+C1+r+t,1,I+Ya+ct+C1+r+t,1,I+Aa+ct+C1+r+t,1,I+la+ct+C1+r+t,1,I+ws+ct+C1+r+t,59,I+la+ct+C1+r+t,39,I+Aa+H+xS+r+t,1,I+la+H+xS+r+t,251,u+Go+" +lon_0=1 +k=1"+ee+zs+ct+d3+h7+r+t,1,u+Go+" +lon_0=1 +k=1"+bt+l+ct+d3+h7+r+t,31,I+na+st+ct+p3+r+t,1,I+Qi+st+ct+p3+r+t,1,I+Co+st+ct+p3+r+t,110,I+Ks+st+Tr+Bi+Y5+r+t,1,I+hi+st+Tr+Bi+Y5+r+t,1,I+vs+st+Tr+Bi+Y5+r+t,99,I+hi+st+ie+Mm+r+t,1,I+vs+st+ie+Mm+r+t,1,I+Ya+st+ie+Mm+r+t,58,I+hi+ie+Mm+r+t,1,I+vs+ie+Mm+r+t,1,I+Ya+ie+Mm+r+t,51,I+ks+st+Xt+_1+r+t,1,I+As+st+Xt+_1+r+t,1,I+Ys+st+Xt+_1+r+t,141,u+y+Pu+mu+ye+l+ie+hS+r+t,1,u+" +lat_0=13.17638888888889 +lon_0=-59.55972222222222 +k=0.9999986"+v7+" +y_0=75000"+ie+hS+r+t,121,u+y+Qr+" +k=1"+Pc+l+H+Ce+r+t,1,u+y+Jr+" +k=1"+Xo+l+H+Ce+r+t,1,u+y+ca+" +k=1"+Cl+l+H+Ce+r+t,1,u+y+ta+" +k=1"+Il+l+H+Ce+r+t,1,u+y+ea+" +k=1"+wu+l+H+Ce+r+t,1,u+y+ir+" +k=1"+Al+l+H+Ce+r+t,1,u+y+Yr+" +k=1"+_l+l+H+Ce+r+t,1,u+y+Mr+" +k=1"+Mc+l+H+Ce+r+t,1,u+y+Xr+" +k=1"+Tl+l+H+Ce+r+t,1,u+y+xr+" +k=1"+Dc+l+H+Ce+r+t,1,u+y+Dr+" +k=1"+El+l+H+Ce+r+t,30,u+y+Qr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Jr+" +k=1"+X+l+H+Ce+r+t,1,u+y+ca+" +k=1"+X+l+H+Ce+r+t,1,u+y+ta+" +k=1"+X+l+H+Ce+r+t,1,u+y+ea+" +k=1"+X+l+H+Ce+r+t,1,u+y+ir+" +k=1"+X+l+H+Ce+r+t,1,u+y+Yr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Mr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Xr+" +k=1"+X+l+H+Ce+r+t,1,u+y+xr+" +k=1"+X+l+H+Ce+r+t,1,u+y+Dr+" +k=1"+X+l+H+Ce+r+t,37,C+Tw+Ew+ka+Hn+En+" +y_0=5400000"+ct+" +pm=brussels"+r+t,280,W3+yw+Hn+" +k_0=1"+bt+l+Xt+b3+" +pm=bern"+r+t,1,W3+yw+RS+" +k_0=1"+Bt+go+Xt+b3+r+t,1,W3+yw+RS+" +k_0=1"+bt+l+Xt+b3+r+t,36,I+or+ct+Dm+r+t,78,u+$w+" +lon_0=-77.08091666666667 +k=1"+Tn+Fe+ct+Dm+r+t,1,u+$w+" +lon_0=-74.08091666666667 +k=1"+Tn+Fe+ct+Dm+r+t,1,u+$w+" +lon_0=-71.08091666666667 +k=1"+Tn+Fe+ct+Dm+r+t,1,u+$w+" +lon_0=-68.08091666666667 +k=1"+Tn+Fe+ct+Dm+r+t,133,I+ua+st+ie+m3+r+t,1,I+Ka+st+ie+m3+r+t,58,u+y+" +lon_0=11.5"+pe+X+un+ie+m3+r+t,1,u+y+Ma+pe+X+un+ie+m3+r+t,79,u+Yt+x6+" +k=1"+Ge+l+c+m+r+t,1,u+Yt+F0+" +k=1"+Kr+l+c+m+r+t,1,u+Yt+kg+" +k=1"+Qn+l+c+m+r+t,1,u+Yt+ib+" +k=1"+wa+l+c+m+r+t,1,u+Yt+w6+" +k=1"+si+l+c+m+r+t,1,u+Yt+f7+" +k=1"+Su+l+c+m+r+t,1,u+Yt+Bu+" +k=1"+Lc+l+c+m+r+t,4,u+Yt+x6+" +k=1"+Ge+l+de+m+r+t,1,u+Yt+F0+" +k=1"+Kr+l+de+m+r+t,1,u+Yt+kg+" +k=1"+Qn+l+de+m+r+t,1,u+Yt+ib+" +k=1"+wa+l+de+m+r+t,1,u+Yt+w6+" +k=1"+si+l+de+m+r+t,1,u+Yt+f7+" +k=1"+Su+l+de+m+r+t,1,u+Yt+Bu+" +k=1"+Lc+l+de+m+r+t,4,u+Yt+x6+" +k=1"+Ge+l+ct+iu+r+t,1,u+Yt+F0+" +k=1"+Kr+l+ct+iu+r+t,1,u+Yt+kg+" +k=1"+Qn+l+ct+iu+r+t,1,u+Yt+ib+" +k=1"+wa+l+ct+iu+r+t,1,u+Yt+w6+" +k=1"+si+l+ct+iu+r+t,1,u+Yt+f7+" +k=1"+Su+l+ct+iu+r+t,1,u+Yt+Bu+" +k=1"+Lc+l+ct+iu+r+t,37,I+Ks+st+Tr+Bi+Sc+r+t,1,I+hi+st+Tr+Bi+Sc+r+t,40,u+y+yr+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+C2+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+Tg+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+vr+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+cb+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+Eg+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+Zr+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+" +lon_0=29 +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+_d+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,2,u+y+Pa+" +k=1"+bt+l+wr+Tr+Bi+Sc+r+t,39,I+ua+Ue+Xe+Ux+r+t,59,C+" +lat_1=36"+sr+" +lon_0=9.9"+w8+X+zs+Ue+Xe+Ux+r+t,1,C+d6+p6+" +lon_0=9.9"+H3+X+zs+Ue+Xe+Ux+r+t,129,I+cr+st+ct+Lx+r+t,1,I+na+st+ct+Lx+r+t,1,I+Qi+st+ct+Lx+r+t,1,I+Co+st+ct+Lx+r+t,1,I+wo+st+ct+Lx+r+t,175,C+Ok+" +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256"+ve+zs+Ue+Xe+$5+r+t,70,C+Ok+" +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256"+ve+zs+Ue+Xe+$5+r+t,10,ho+" +lat_0=34.2 +lon_0=39.15 +k=0.9995341"+bt+l+Ue+Xe+$5+r+t,211,u+Sr+" +lon_0=35 +k=1"+ve+" +y_0=1100000"+Oc+S3+r+t,1,u+Sr+_d+" +k=1 +x_0=615000 +y_0=810000"+Oc+S3+r+t,1,u+Sr+Zr+" +k=1"+sa+go+Oc+S3+r+t,1,u+Sr+Zr+" +k=1"+sa+Q8+Oc+S3+r+t,34,I+_a+ct+$n+r+t,1,I+qa+ct+$n+r+t,1,I+ic+ct+$n+r+t,1,I+zl+ct+$n+r+t,1,I+ua+ct+$n+r+t,1,I+Ka+ct+$n+r+t,1,I+Ks+ct+$n+r+t,1,I+hi+ct+$n+r+t,1,I+vs+ct+$n+r+t,1,I+Ya+ct+$n+r+t,1,I+Aa+ct+$n+r+t,52,u+y+Hn+pe+X+l+ct+$n+r+t,5,u+y+" +lon_0=5"+pe+X+l+ct+$n+r+t,144,I+la+ie+yS+r+t,1,I+ws+ie+yS+r+t,460,W3+" +lat_0=47.14439372222222 +lon_0=19.04857177777778 +k_0=0.99993 +x_0=650000"+go+Ek+KC+r+t,130,u+y+" +lon_0=94.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=97.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=100.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=103.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=106.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=109.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=112.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=115.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=118.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=121.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=124.5"+dt+ee+va+de+m+r+t,1,u+y+Yx+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=130.5"+dt+ee+va+de+m+r+t,1,u+y+J8+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=136.5"+dt+ee+va+de+m+r+t,1,u+y+" +lon_0=139.5"+dt+ee+va+de+m+r+t,1,I+Wl+xs+ps+Ns+r+t,1,I+Io+xs+ps+Ns+r+t,1,I+ks+xs+ps+Ns+r+t,1,I+As+xs+ps+Ns+r+t,1,I+Ys+xs+ps+Ns+r+t,1,I+Ss+xs+ps+Ns+r+t,1,I+Zs+xs+ps+Ns+r+t,14,I+Wl+de+m+r+t,1,I+Io+de+m+r+t,1,I+ks+de+m+r+t,1,I+As+de+m+r+t,1,I+Ys+de+m+r+t,1,I+Ss+de+m+r+t,1,I+Zs+de+m+r+t,5,I+Io+st+de+m+r+t,1,I+ks+st+de+m+r+t,1,I+As+st+de+m+r+t,1,I+Ys+st+de+m+r+t,1,I+Ss+st+de+m+r+t,1,I+Zs+st+de+m+r+t,1,I+cc+st+de+m+r+t,1,I+Ao+st+de+m+r+t,3,I+Io+st+xs+ps+Ns+r+t,1,I+ks+st+xs+ps+Ns+r+t,1,I+As+st+xs+ps+Ns+r+t,1,I+Ys+st+xs+ps+Ns+r+t,1,I+Ss+st+xs+ps+Ns+r+t,1,I+Zs+st+xs+ps+Ns+r+t,1,I+cc+st+xs+ps+Ns+r+t,1,I+Ao+st+xs+ps+Ns+r+t,52,I+Wl+ya+xa+ew+r+t,1,I+Io+ya+xa+ew+r+t,1,I+ks+ya+xa+ew+r+t,99,I+Io+ya+xa+wS+r+t,1,I+ks+ya+xa+wS+r+t,52,C+" +lat_1=18"+M0+Nl+" +k_0=1 +x_0=167638.49597 +y_0=121918.90616"+tk+ek+r8+t,100,C+" +lat_1=18"+M0+Nl+" +k_0=1"+Mn+" +y_0=150000"+ge+bI+r+t,105,I+Ng+ya+xa+tw+r+t,1,I+Wl+ya+xa+tw+r+t,5,I+Vu+Xm+Hm+Rx+r+t,1,I+Ku+Xm+Hm+Rx+r+t,1,I+Nd+Xm+Hm+Rx+r+t,29,I+Ku+Fc+Tc+dl+r+t,1,I+Nd+Fc+Tc+dl+r+t,1,I+Lg+Fc+Tc+dl+r+t,1,I+Ng+Fc+Tc+dl+r+t,1,I+Wl+Fc+Tc+dl+r+t,1,I+Io+Fc+Tc+dl+r+t,23,C+f6+" +lat_0=39.5 +lon_0=68 +k_0=0.99846154 +x_0=2153865.73916853 +y_0=2368292.194628102"+Np+Lp+jx+t,1,C+c2+Cu+" +lon_0=68"+Ec+N3+j3+Np+Lp+jx+t,1,C+D2+$a+" +lon_0=74"+Ec+N3+j3+Np+Lp+jx+t,1,C+" +lat_1=19 +lat_0=19 +lon_0=80"+Ec+N3+j3+Np+Lp+jx+t,1,C+" +lat_1=12 +lat_0=12 +lon_0=80"+Ec+N3+j3+Np+Lp+jx+t,1,C+D2+$a+Sa+Ec+" +x_0=2743185.69 +y_0=914395.23"+ya+xa+tw+r+t,1,C+c2+Cu+" +lon_0=68"+Ec+" +x_0=2743196.4 +y_0=914398.8"+Xm+Hm+Rx+r+t,1,C+D2+$a+" +lon_0=74"+Ec+" +x_0=2743196.4 +y_0=914398.8"+Xm+Hm+Rx+r+t,1,C+c2+Cu+" +lon_0=68"+Ec+X3+q3+Fc+Tc+dl+r+t,1,C+D2+$a+" +lon_0=74"+Ec+X3+q3+Fc+Tc+dl+r+t,1,C+D2+$a+Sa+Ec+X3+q3+Fc+Tc+dl+r+t,1,C+" +lat_1=19 +lat_0=19 +lon_0=80"+Ec+X3+q3+Fc+Tc+dl+r+t,1,C+D2+$a+Sa+Ec+N3+j3+Np+Lp+jx+t,1,C+" +lat_1=12 +lat_0=12 +lon_0=80"+Ec+X3+q3+Fc+Tc+dl+r+t,117,br+" +lat_0=1.287646666666667 +lon_0=103.8530022222222"+v7+" +y_0=30000"+zo+Ho+kc+r+t,47,I+Io+zo+Ho+kc+r+t,1,I+ks+zo+Ho+kc+r+t,52,C+c2+Cu+Ki+qS+Ge+_k+ie+qC+r+t,118,I+or+ct+V5+r+t,1,I+er+ct+V5+r+t,1,I+Dn+ct+V5+r+t,97,I+Wr+ct+Ls+r+t,1,I+or+ct+Ls+r+t,1,I+er+ct+Ls+r+t,1,I+Dn+ct+Ls+r+t,1,I+cr+ct+Ls+r+t,56,I+Wr+st+ct+Ls+r+t,1,I+or+st+ct+Ls+r+t,1,I+er+st+ct+Ls+r+t,1,I+Dn+st+ct+Ls+r+t,1,I+cr+st+ct+Ls+r+t,1,I+na+st+ct+Ls+r+t,9,u+" +lat_0=-6 +lon_0=-80.5 +k=0.99983008 +x_0=222000 +y_0=1426834.743"+ct+Ls+r+t,1,u+" +lat_0=-9.5 +lon_0=-76 +k=0.99932994 +x_0=720000 +y_0=1039979.159"+ct+Ls+r+t,1,u+" +lat_0=-9.5"+Rc+" +k=0.99952992 +x_0=1324000 +y_0=1040084.558"+ct+Ls+r+t,107,u+eE+" +lon_0=-1"+x2+" +x_0=274319.51"+l+ie+TI+r+t,231,I+zl+Ue+Xe+r+t,160,u+y+Mr+Sn+X+l+ge+Mx+r+t,1,u+y+a7+Sn+X+l+ge+Mx+r+t,1,u+y+i7+Sn+X+l+ge+Mx+r+t,1,u+y+Xr+Sn+X+l+ge+Mx+r+t,1,u+y+b2+Sn+X+l+ge+Mx+r+t,433,I+_a+c+m+r+t,1,I+qa+c+m+r+t,1,I+ic+c+m+r+t,1,I+zl+c+m+r+t,1,I+ua+c+m+r+t,1,I+Ka+c+m+r+t,1,I+Ks+c+m+r+t,1,I+hi+c+m+r+t,1,I+vs+c+m+r+t,1,I+Ya+c+m+r+t,47,u+y+Da+pe+X+l+c+m+r+t,48,I+ua+st+ct+zC+r+t,259,C+d6+p6+J4+H3+X+zs+Ue+Xe+A3+r+t,1,C+" +lat_1=29.7 +lat_0=29.7"+J4+" +k_0=0.9996155960000001"+X+zs+Ue+Xe+A3+r+t,2,C+" +lat_1=26.1 +lat_0=26.1"+J4+" +k_0=0.999616304 +x_0=1200000"+Uc+Ue+Xe+A3+r+t,1,C+" +lat_1=22.5 +lat_0=22.5"+J4+" +k_0=0.999616437"+Ge+Uc+Ue+Xe+A3+r+t,42,I+Ya+Xt+RI+r+t,94,I+zl+ie+Nx+r+t,1,I+ua+ie+Nx+r+t,59,u+R0+" +lon_0=4.5"+x2+" +x_0=230738.26"+l+ie+Nx+r+t,1,u+R0+" +lon_0=8.5"+x2+" +x_0=670553.98"+l+ie+Nx+r+t,1,u+R0+" +lon_0=12.5"+x2+" +x_0=1110369.7"+l+ie+Nx+r+t,239,I+ua+Ue+Xe+vS+r+t,60,I+ua+st+Ue+Xe+vS+r+t,9,I+$c+Rt+r+t,1,I+$l+Rt+r+t,1,I+Qu+Rt+r+t,1,I+Kl+Rt+r+t,1,I+To+Rt+r+t,1,I+lc+Rt+r+t,1,I+Eo+Rt+r+t,1,I+ql+Rt+r+t,1,I+Vl+Rt+r+t,1,I+Xl+Rt+r+t,1,I+vo+Rt+r+t,1,I+So+Rt+r+t,1,I+ko+Rt+r+t,1,I+_o+Rt+r+t,1,I+qs+Rt+r+t,1,I+Vs+Rt+r+t,1,I+Wr+Rt+r+t,1,I+or+Rt+r+t,1,I+er+Rt+r+t,1,I+Dn+Rt+r+t,1,I+cr+Rt+r+t,1,I+na+Rt+r+t,7,u+Vo+_3+vg+Ne+l+Rt+D+t,1,u+Sr+eb+Un+Ne+l+Rt+D+t,1,Gr+" +lat_0=57"+Ow+Fw+dt+" +x_0=5000000.001016002 +y_0=-5000000.001016002"+Za+Um+Rt+D+t,1,u+Kn+O4+dt+Ne+l+Rt+D+t,1,u+Kn+F4+dt+Ne+l+Rt+D+t,1,u+Kn+mg+dt+Ne+l+Rt+D+t,1,u+Kn+gd+dt+Ne+l+Rt+D+t,1,u+Kn+T0+dt+Ne+l+Rt+D+t,1,u+Kn+P4+dt+" +x_0=213360.4267208534"+l+Rt+D+t,1,u+Kn+M4+dt+Ne+l+Rt+D+t,1,u+Kn+s6+dt+YS+l+Rt+D+t,1,C+Pw+Mw+P2+D4+Ic+l+Rt+D+t,1,C+Kh+ys+Ir+qi+ke+l+Rt+D+t,1,C+Yh+Zh+Br+qi+ke+l+Rt+D+t,1,C+Ri+Qh+cd+ze+ke+l+Rt+D+t,1,C+Zf+Id+Jh+ld+ke+l+Rt+D+t,1,C+tf+ef+ud+Bc+ke+l+Rt+D+t,1,C+nf+rf+af+Uf+ke+l+Rt+D+t,2,u+We+kh+dt+Ne+l+Rt+D+t,1,u+We+Ah+dt+Ne+l+Rt+D+t,1,u+We+Bf+Un+Ne+l+Rt+D+t,1,C+kf+Af+fs+Vi+ke+l+Rt+D+t,1,C+_f+dd+Cf+Vi+ke+l+Rt+D+t,1,C+" +lat_1=39.71666666666667 +lat_2=40.78333333333333"+Ir+Zn+ke+l+Rt+D+t,1,C+Qf+Jf+ou+Zn+ke+l+Rt+D+t,1,C+Ri+sf+Je+Zn+ke+l+Rt+D+t,1,C+of+hd+cf+Vf+YS+l+Rt+D+t,1,u+fn+_h+fd+Ne+l+Rt+D+t,1,u+Li+_n+An+Ne+l+Rt+D+t,1,u+Li+yd+An+Ne+l+Rt+D+t,1,C+td+lf+Td+ed+ke+l+Rt+D+t,6,u+Sr+Ch+dt+Ne+l+Rt+D+t,1,u+Sr+Ih+dt+Ne+l+Rt+D+t,1,u+wn+Th+ji+Ne+l+Rt+D+t,1,u+wn+Rl+ji+Ne+l+Rt+D+t,1,u+wn+Gf+Un+Ne+l+Rt+D+t,1,u+Je+Rh+bu+Ne+l+Rt+D+t,1,u+Je+Lh+An+Ne+l+Rt+D+t,1,u+Or+Nh+rn+Ne+l+Rt+D+t,1,u+Or+jh+rn+Ne+l+Rt+D+t,1,C+If+Tf+Oa+Wi+ke+l+Rt+D+t,1,C+ni+Ef+Vn+Wi+ke+l+Rt+D+t,1,C+Of+Ff+Ua+Pr+ke+l+Rt+D+t,1,C+Pf+Mf+Je+Hr+ke+l+Rt+D+t,1,C+ls+Vh+Or+$f+ke+l+Rt+D+t,1,C+" +lat_1=36.73333333333333 +lat_2=37.93333333333333"+Ur+Ui+ke+l+Rt+D+t,1,C+" +lat_1=31.16666666666667 +lat_2=32.66666666666666 +lat_0=30.66666666666667"+$o+ke+l+Rt+D+t,1,C+" +lat_1=29.3 +lat_2=30.7 +lat_0=28.66666666666667"+pl+ke+l+Rt+D+t,1,u+ba+po+dt+Ne+l+Rt+D+t,1,u+ds+Bh+rn+Ne+l+Rt+D+t,1,C+" +lat_1=38.3 +lat_2=39.45"+ou+Nl+" +x_0=243840.4876809754"+l+Rt+D+t,1,C+" +lat_1=41.71666666666667 +lat_2=42.68333333333333"+ki+zi+YS+l+Rt+D+t,1,C+" +lat_1=41.28333333333333 +lat_2=41.48333333333333"+ki+Rc+" +x_0=60960.12192024384"+l+Rt+D+t,4,C+" +lat_1=47.03333333333333 +lat_2=48.63333333333333"+jc+Uh+ke+l+Rt+D+t,1,C+" +lat_1=45.61666666666667 +lat_2=47.05"+Wa+Yf+ke+l+Rt+D+t,1,C+" +lat_1=43.78333333333333 +lat_2=45.21666666666667"+Hl+ju+ke+l+Rt+D+t,1,u+uu+Eh+vg+Ne+l+Rt+D+t,1,u+Vo+c0+An+Ne+l+Rt+D+t,1,u+fu+Y3+Un+Ne+l+Rt+D+t,1,u+fu+$o+Un+Ne+l+Rt+D+t,1,u+T3+Z3+An+Ne+l+Rt+D+t,1,C+" +lat_1=34.41666666666666 +lat_2=33.86666666666667 +lat_0=34.13333333333333"+C3+" +x_0=1276106.450596901 +y_0=1268253.006858014"+Rt+D+t,48,u+ma+po+dt+Ni+l+c+m+D+t,1,u+ds+Bh+rn+bs+l+c+m+D+t,1,C+fp+dp+jc+Uh+ri+ai+c+m+D+t,1,C+Qp+pp+Wa+Yf+ri+ai+c+m+D+t,1,C+gp+mp+Hl+ju+ri+ai+c+m+D+t,1,C+Yi+ys+bp+Jn+Yn+l+c+m+D+t,1,C+Jp+Mg+pd+gs+Bt+l+c+m+D+t,1,C+Ap+_p+Pd+_n+Bt+l+c+m+D+t,1,u+ma+po+dt+Ni+l+c+m+D+t,1,u+ds+Bh+rn+bs+l+c+m+D+t,1,C+fp+dp+jc+Uh+ri+ai+c+m+D+t,1,C+Qp+pp+Wa+Yf+ri+ai+c+m+D+t,1,C+gp+mp+Hl+ju+ri+ai+c+m+D+t,1,C+Yi+ys+bp+Jn+Yn+l+c+m+D+t,1,C+Jp+Mg+pd+gs+Bt+l+c+m+D+t,1,C+Ap+_p+Pd+_n+Bt+l+c+m+D+t,1,u+ma+po+dt+Ni+l+c+m+D+t,1,u+ds+Bh+rn+bs+l+c+m+D+t,1,C+fp+dp+jc+Uh+ri+ai+c+m+D+t,1,C+Qp+pp+Wa+Yf+ri+ai+c+m+D+t,1,C+gp+mp+Hl+ju+ri+ai+c+m+D+t,1,C+Yi+ys+bp+Jn+Yn+l+c+m+D+t,1,C+Jp+Mg+pd+gs+Bt+l+c+m+D+t,1,C+Ap+_p+Pd+_n+Bt+l+c+m+D+t,21,u+y+Xa+dt+De+l+c+m+r+t,1,u+y+_n+dt+De+l+c+m+r+t,1,u+y+Mu+dt+De+l+c+m+r+t,1,u+y+Ko+dt+De+l+c+m+r+t,1,u+y+pn+dt+De+l+c+m+r+t,1,u+y+g2+dt+De+l+c+m+r+t,1,u+y+bd+dt+De+l+c+m+r+t,1,u+y+" +lon_0=-53"+dt+De+l+c+m+r+t,1,u+y+d7+dt+De+l+c+m+r+t,2,I+$c+c+m+r+t,1,I+$l+c+m+r+t,1,I+Qu+c+m+r+t,1,I+Kl+c+m+r+t,1,I+To+c+m+r+t,1,I+lc+c+m+r+t,1,I+Eo+c+m+r+t,1,I+ql+c+m+r+t,1,I+Vl+c+m+r+t,1,I+Xl+c+m+r+t,1,I+vo+c+m+r+t,1,I+So+c+m+r+t,1,I+ko+c+m+r+t,1,I+_o+c+m+r+t,1,I+qs+c+m+r+t,1,I+Vs+c+m+r+t,1,I+Wr+c+m+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,I+Dn+c+m+r+t,1,I+cr+c+m+r+t,1,I+na+c+m+r+t,1,I+Qi+c+m+r+t,6,u+Vo+_3+vg+ee+l+c+m+r+t,1,u+Sr+eb+Un+Bt+l+c+m+r+t,1,Gr+" +lat_0=57"+Ow+Fw+dt+sd+vi+Za+Um+c+m+r+t,1,u+Kn+O4+dt+X+l+c+m+r+t,1,u+Kn+F4+dt+X+l+c+m+r+t,1,u+Kn+mg+dt+X+l+c+m+r+t,1,u+Kn+gd+dt+X+l+c+m+r+t,1,u+Kn+T0+dt+X+l+c+m+r+t,1,u+Kn+P4+dt+X+l+c+m+r+t,1,u+Kn+M4+dt+X+l+c+m+r+t,1,u+Kn+s6+dt+X+l+c+m+r+t,1,C+Pw+Mw+P2+D4+Tn+l+c+m+r+t,1,C+Kh+ys+Ir+qi+Ln+Le+c+m+r+t,1,C+Yh+Zh+Br+qi+Ln+Le+c+m+r+t,1,C+Ri+Qh+cd+ze+Ln+Le+c+m+r+t,1,C+Zf+Id+Jh+ld+Ln+Le+c+m+r+t,1,C+tf+ef+ud+Bc+Ln+Le+c+m+r+t,1,C+nf+rf+af+Uf+Ln+Le+c+m+r+t,2,u+We+kh+dt+oa+l+c+m+r+t,1,u+We+Ah+dt+oa+l+c+m+r+t,1,u+We+Bf+Un+oa+l+c+m+r+t,1,C+kf+Af+fs+Vi+ye+l+c+m+r+t,1,C+_f+dd+Cf+Vi+ye+Uc+c+m+r+t,1,C+I1+T1+Ir+Zn+Sl+kl+c+m+r+t,1,C+Qf+Jf+ou+Zn+Sl+kl+c+m+r+t,1,C+Ri+sf+Je+Zn+Sl+kl+c+m+r+t,1,C+of+hd+cf+Vf+g8+m8+c+m+r+t,1,u+fn+_h+fd+ee+l+c+m+r+t,1,u+Li+_n+An+ee+l+c+m+r+t,1,u+Li+yd+An+ee+l+c+m+r+t,1,C+td+lf+Td+ed+Bt+l+c+m+r+t,1,u+kw+P8+rn+X+l+c+m+r+t,1,u+Aw+iw+rn+X+l+c+m+r+t,1,u+Lm+T0+Jo+X+l+c+m+r+t,1,u+_w+M8+Jo+X+l+c+m+r+t,1,u+Cw+sw+" +k=1"+X+l+c+m+r+t,1,u+Sr+Ch+dt+ee+l+c+m+r+t,1,u+Sr+Ih+dt+sa+l+c+m+r+t,1,u+wn+Th+ji+ee+l+c+m+r+t,1,u+wn+Rl+ji+X+l+c+m+r+t,1,u+wn+Gf+Un+ar+l+c+m+r+t,1,u+Je+Rh+bu+ve+l+c+m+r+t,1,u+Je+Lh+An+sa+l+c+m+r+t,1,u+Or+Nh+rn+hn+E0+c+m+r+t,1,u+Or+jh+rn+bs+E0+c+m+r+t,1,C+If+Tf+Oa+Wi+Ge+Fe+c+m+r+t,1,C+ni+Ef+Vn+Wi+X+l+c+m+r+t,1,C+Of+Ff+Ua+Pr+ye+l+c+m+r+t,1,C+Pf+Mf+Je+Hr+ye+Uc+c+m+r+t,2,C+E1+O1+Ur+Ui+X+Le+c+m+r+t,1,C+up+hp+Vo+$o+Tn+l+c+m+r+t,1,C+ug+hg+fg+pl+Tn+l+c+m+r+t,1,u+ma+po+dt+ve+l+c+m+r+t,1,u+ds+Bh+rn+bs+l+c+m+r+t,1,C+$p+ng+Br+Nl+ye+l+c+m+r+t,1,C+F1+uf+ki+zi+ee+od+c+m+r+t,1,C+P1+M1+ki+Rc+X+l+c+m+r+t,1,C+D1+R1+L1+Ko+t4+l+c+m+r+t,1,C+rg+N1+j1+js+Zx+l+c+m+r+t,1,C+ml+ag+Oa+js+rd+l+c+m+r+t,1,C+fp+dp+jc+Uh+ar+zr+c+m+r+t,1,C+Qp+pp+Wa+Yf+ar+zr+c+m+r+t,1,C+gp+mp+Hl+ju+ar+zr+c+m+r+t,1,u+Hs+Eh+Sn+ve+l+c+m+r+t,1,u+Hs+c0+Sn+sa+l+c+m+r+t,1,u+fu+Y3+Un+Mn+l+c+m+r+t,1,u+fu+$o+Un+X+l+c+m+r+t,1,u+T3+Z3+An+y4+l+c+m+r+t,41,I+la+ie+Fx+r+t,1,I+ws+ie+Fx+r+t,80,I+Dn+ct+EI+r+t,80,"+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150"+ct+Pn+r+t,5,u+" +lat_0=-36.87986527777778 +lon_0=174.7643393611111"+dt+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-37.76124980555556 +lon_0=176.46619725 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-38.62470277777778 +lon_0=177.8856362777778 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-39.65092930555556 +lon_0=176.6736805277778 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-39.13575830555556 +lon_0=174.22801175 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-39.51247038888889 +lon_0=175.6400368055556 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-40.24194713888889 +lon_0=175.4880996111111 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-40.92553263888889 +lon_0=175.6473496666667 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-41.30131963888888 +lon_0=174.7766231111111 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-40.71475905555556 +lon_0=172.6720465 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-41.27454472222222 +lon_0=173.2993168055555 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-41.28991152777778 +lon_0=172.1090281944444 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-41.81080286111111 +lon_0=171.5812600555556 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-42.33369427777778 +lon_0=171.5497713055556 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-42.68911658333333 +lon_0=173.0101333888889 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-41.54448666666666 +lon_0=173.8020741111111 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-42.88632236111111 +lon_0=170.9799935 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-43.11012813888889 +lon_0=170.2609258333333 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-43.97780288888889 +lon_0=168.606267 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-43.59063758333333 +lon_0=172.7271935833333 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-43.74871155555556 +lon_0=171.3607484722222 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-44.40222036111111 +lon_0=171.0572508333333 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-44.73526797222222 +lon_0=169.4677550833333 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-45.13290258333333 +lon_0=168.3986411944444 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-45.56372616666666 +lon_0=167.7388617777778 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-45.81619661111111 +lon_0=170.6285951666667 +k=1"+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-45.86151336111111 +lon_0=170.2825891111111"+vg+ve+Fr+ct+Pn+r+t,1,u+" +lat_0=-46.60000961111111 +lon_0=168.342872 +k=1 +x_0=300002.66 +y_0=699999.58"+ct+Pn+r+t,26,I+Zi+st+ct+Pn+r+t,1,I+yo+st+ct+Pn+r+t,1,I+Xc+st+ct+Pn+r+t,31,u+" +lat_0=-39 +lon_0=175.5 +k=1 +x_0=274319.5243848086 +y_0=365759.3658464114"+ct+Pn+FI+t,1,u+u7+" +lon_0=171.5 +k=1 +x_0=457199.2073080143 +y_0=457199.2073080143"+ct+Pn+FI+t,99,u+Nn+" +lon_0=-4.666666666666667 +k=1"+bt+l+y0+m0+nu+Ld+r+t,1,u+Nn+" +lon_0=-2.333333333333333 +k=1"+bt+l+y0+m0+nu+Ld+r+t,1,u+Nn+Hn+" +k=1"+bt+l+y0+m0+nu+Ld+r+t,1,u+Nn+" +lon_0=2.5 +k=1"+bt+l+y0+m0+nu+Ld+r+t,1,u+Nn+rE+" +k=1"+bt+l+y0+m0+nu+Ld+r+t,1,u+Nn+" +lon_0=10.16666666666667 +k=1"+bt+l+y0+m0+nu+Ld+r+t,1,u+Nn+" +lon_0=14.16666666666667 +k=1"+bt+l+y0+m0+nu+Ld+r+t,1,u+Nn+" +lon_0=18.33333333333333 +k=1"+bt+l+y0+m0+nu+Ld+r+t,31,I+qa+ct+lS+r+t,64,u+Go+GI+" +k=1 +x_0=180.598 +y_0=-86.98999999999999"+ct+lS+r+t,7,C+HS+zS+" +lon_0=5.399999999999999 +k_0=0.99950908"+X+zs+" +a=6376523"+JS+fF+r+t,61,C+HS+zS+Hn+" +k_0=0.999877341"+Bt+go+Ue+Xe+au+ac+r+t,1,C+" +lat_1=46.8 +lat_0=46.8"+Hn+" +k_0=0.99987742"+Bt+go+Ue+Xe+au+ac+r+t,1,C+eF+nF+Hn+" +k_0=0.999877499"+Bt+go+Ue+Xe+au+ac+r+t,1,C+rF+aF+Hn+" +k_0=0.99994471 +x_0=234.358 +y_0=185861.369"+Ue+Xe+au+ac+r+t,7,C+HS+zS+Hn+" +k_0=0.999877341"+Bt+Q8+Ue+Xe+au+ac+r+t,1,C+" +lat_1=46.8 +lat_0=46.8"+Hn+" +k_0=0.99987742"+Bt+" +y_0=2200000"+Ue+Xe+au+ac+r+t,1,C+eF+nF+Hn+" +k_0=0.999877499"+Bt+" +y_0=3200000"+Ue+Xe+au+ac+r+t,1,C+rF+aF+Hn+" +k_0=0.99994471 +x_0=234.358 +y_0=4185861.369"+Ue+Xe+au+ac+r+t,126,u+" +lat_0=49 +lon_0=-2 +k=0.9996012717"+ye+" +y_0=-100000"+nb+vC+r+t,491,br+zw+Xw+v8+" +y_0=126867.909"+Wx+$x+z5+r+t,1,u+zw+Xw+" +k=1"+v8+" +y_0=1126867.909"+Wx+$x+z5+r+t,1,br+zw+Xw+v8+" +y_0=1126867.909"+Wx+$x+z5+r+t,39,I+ua+st+Ue+Xe+xI+r+t,116,I+ks+st+c+m+r+t,1,I+As+st+c+m+r+t,1,I+Ys+st+c+m+r+t,1,I+Ss+st+c+m+r+t,1,I+Zs+st+c+m+r+t,1,I+cc+st+c+m+r+t,1,I+Ao+st+c+m+r+t,1,I+Wc+st+c+m+r+t,1,I+Zu+st+c+m+r+t,1,I+Rd+st+c+m+r+t,1,I+Zi+st+c+m+r+t,46,u+y+vr+" +k=1"+wa+l+H+Nt+r+t,1,u+y+Zr+" +k=1"+si+l+H+Nt+r+t,1,u+y+Pa+" +k=1"+Su+l+H+Nt+r+t,1,u+y+xo+" +k=1"+Lc+l+H+Nt+r+t,1,u+y+Ki+" +k=1"+Xp+l+H+Nt+r+t,1,u+y+Wu+" +k=1"+Wp+l+H+Nt+r+t,1,u+y+Fg+" +k=1"+Up+l+H+Nt+r+t,1,u+y+Fd+" +k=1"+qf+l+H+Nt+r+t,1,u+y+Pg+" +k=1"+Gp+l+H+Nt+r+t,1,u+y+Qr+" +k=1"+Pc+l+H+Nt+r+t,1,u+y+Jr+" +k=1"+Xo+l+H+Nt+r+t,1,u+y+ca+" +k=1"+Cl+l+H+Nt+r+t,1,u+y+ta+" +k=1"+Il+l+H+Nt+r+t,1,u+y+ea+" +k=1"+wu+l+H+Nt+r+t,1,u+y+ir+" +k=1"+Al+l+H+Nt+r+t,1,u+y+Yr+" +k=1"+_l+l+H+Nt+r+t,1,u+y+Mr+" +k=1"+Mc+l+H+Nt+r+t,1,u+y+Xr+" +k=1"+Tl+l+H+Nt+r+t,1,u+y+xr+" +k=1"+Dc+l+H+Nt+r+t,1,u+y+Dr+" +k=1"+El+l+H+Nt+r+t,1,u+y+Ag+" +k=1"+Hp+l+H+Nt+r+t,1,u+y+vd+" +k=1"+Ol+l+H+Nt+r+t,1,u+y+Lu+" +k=1"+Fl+l+H+Nt+r+t,1,u+y+_g+" +k=1"+Pl+l+H+Nt+r+t,1,u+y+Nu+" +k=1"+Ml+l+H+Nt+r+t,1,u+y+Bl+" +k=1"+Wo+l+H+Nt+r+t,1,u+y+Hc+" +k=1"+v0+l+H+Nt+r+t,1,u+y+I0+" +k=1"+fo+l+H+Nt+r+t,1,u+y+_u+" +k=1"+S0+l+H+Nt+r+t,168,u+" +lat_0=24.45"+oE+Jo+ee+zs+ct+BC+r+t,391,ho+iF+oF+" +k=0.9999079"+bt+l+Xt+rS+r+t,1,ho+iF+oF+" +k=0.9999079 +x_0=155000 +y_0=463000"+Xt+rS+r+t,109,m4+y+Bu+sd+un+He+cs+r+t,67,I+or+He+cs+r+t,1,I+er+He+cs+r+t,1,I+Dn+He+cs+r+t,1,I+cr+He+cs+r+t,1,I+na+He+cs+r+t,15,I+Wr+st+He+cs+r+t,1,I+or+st+He+cs+r+t,1,I+er+st+He+cs+r+t,1,I+Dn+st+He+cs+r+t,1,I+cr+st+He+cs+r+t,1,I+na+st+He+cs+r+t,1,I+Qi+st+He+cs+r+t,1,I+Co+st+He+cs+r+t,1,I+wo+st+He+cs+r+t,25,I+Dn+st+ct+AS+r+t,1,I+cr+st+ct+AS+r+t,112,I+Ka+st+b0+su+r+t,38,u+Ig+" +lon_0=11 +k=1"+bt+l+wr+b0+su+Op+t,2,u+Ig+" +lon_0=13 +k=1"+bt+l+wr+b0+su+Op+t,2,u+Ig+yr+" +k=1"+bt+l+wr+b0+su+Op+t,2,u+Ig+C2+" +k=1"+bt+l+wr+b0+su+Op+t,2,u+Ig+Tg+" +k=1"+bt+l+wr+b0+su+Op+t,2,u+Ig+vr+" +k=1"+bt+l+wr+b0+su+Op+t,2,u+Ig+cb+" +k=1"+bt+l+wr+b0+su+Op+t,2,u+Ig+Eg+" +k=1"+bt+l+wr+b0+su+Op+t,317,Gr+" +lat_0=-18.9 +lonc=44.10000000000001 +alpha=18.9"+mu+ye+qn+" +gamma=18.9"+ct+y3+ac+r+t,36,I+Aa+st+ct+y3+r+t,1,I+la+st+ct+y3+r+t,110,I+As+zm+Dx+r+t,1,I+Ys+zm+Dx+r+t,21,Gr+R0+T6+XS+Cg+" +x_0=590476.8714630401 +y_0=442857.653094361"+O3+zm+Dx+" +to_meter=20.11676512155263"+t,1,Gr+R0+T6+XS+Cg+" +x_0=590476.8727431979 +y_0=442857.6545573985"+O3+zm+Dx+" +to_meter=0.3047994715386762"+t,1,Gr+R0+T6+XS+Cg+" +x_0=590476.87 +y_0=442857.65"+O3+zm+Dx+r+t,28,u+b4+" +lon_0=-8 +k=1"+ee+E0+nb+Ex+r+t,1,u+b4+" +lon_0=-8 +k=1.000035"+ee+E0+z3+Ex+r+t,1,u+b4+" +lon_0=-8 +k=1.000035"+ee+E0+z3+Ex+r+t,258,u+$u+xk+dt+bt+l+Xt+Vr+r+t,1,u+$u+Ru+dt+bt+l+Xt+Vr+r+t,1,u+sr+LS+dt+bt+l+Xt+Vr+r+t,1,u+$u+J8+dt+bt+l+Xt+Vr+r+t,1,u+sr+NS+dt+bt+l+Xt+Vr+r+t,1,u+sr+y2+dt+bt+l+Xt+Vr+r+t,1,u+sr+jS+dt+bt+l+Xt+Vr+r+t,1,u+sr+yk+dt+bt+l+Xt+Vr+r+t,1,u+sr+BS+dt+bt+l+Xt+Vr+r+t,1,u+Vn+US+dt+bt+l+Xt+Vr+r+t,1,u+oi+uk+dt+bt+l+Xt+Vr+r+t,1,u+oi+hk+dt+bt+l+Xt+Vr+r+t,1,u+oi+fk+dt+bt+l+Xt+Vr+r+t,1,u+$a+" +lon_0=142"+dt+bt+l+Xt+Vr+r+t,1,u+$a+Yx+dt+bt+l+Xt+Vr+r+t,1,u+$a+" +lon_0=124"+dt+bt+l+Xt+Vr+r+t,1,u+$a+Ru+dt+bt+l+Xt+Vr+r+t,1,u+" +lat_0=20"+y2+dt+bt+l+Xt+Vr+r+t,1,u+$a+e7+dt+bt+l+Xt+Vr+r+t,21,br+aE+BI+" +x_0=86501.46392051999"+TF+xu+yu+cS+tE+t,139,I+la+Oc+r+t,1,I+ws+Oc+r+t,151,C+" +lat_1=36"+sr+_2+w8+X+zs+Ue+Xe+Z5+r+t,1,C+d6+p6+_2+H3+X+zs+Ue+Xe+Z5+r+t,1,C+" +lat_1=36"+sr+_2+w8+X+zs+Ue+Xe+r+t,1,C+d6+p6+_2+H3+X+zs+Ue+Xe+r+t,235,I+qa+ie+Em+r+t,1,I+ic+ie+Em+r+t,1,I+zl+ie+Em+r+t,1,I+ua+ie+Em+r+t,59,C+" +lat_1=36"+sr+_2+w8+" +x_0=500135 +y_0=300090"+ie+Em+r+t,1,C+d6+p6+_2+H3+" +x_0=500135 +y_0=300090"+ie+Em+r+t,236,I+_a+Ue+Xe+r+t,93,I+cr+ct+w3+r+t,33,u+y+Bu+pe+X+l+ct+w3+r+t,16,u+y+JT+pe+X+l+ct+w3+r+t,1,u+y+JT+dt+X+l+ct+w3+r+t,80,u+y+Rg+" +k=1"+bt+vi+Xt+jo+ec+r+t,1,u+y+_d+" +k=1"+bt+vi+Xt+jo+ec+r+t,1,u+y+R6+" +k=1"+bt+vi+Xt+jo+ec+r+t,1,u+y+WS+" +k=1"+bt+vi+Xt+o0+r+t,1,u+y+F3+" +k=1"+bt+vi+Xt+o0+r+t,1,u+y+$S+" +k=1"+bt+vi+Xt+o0+r+t,1,u+y+WS+" +k=1"+En+vi+Xt+o0+r+t,1,u+y+F3+" +k=1 +x_0=450000"+vi+Xt+o0+r+t,1,u+y+$S+" +k=1"+T4+vi+Xt+o0+r+t,22,u+y+Rg+" +k=1"+bt+l+Xt+jo+ec+r+t,1,u+y+_d+" +k=1"+bt+l+Xt+jo+ec+r+t,1,u+y+R6+" +k=1"+bt+l+Xt+jo+ec+r+t,1,u+y+WS+" +k=1"+En+l+Xt+o0+r+t,1,u+y+F3+" +k=1 +x_0=450000"+l+Xt+o0+r+t,1,u+y+$S+" +k=1"+T4+l+Xt+o0+r+t,1,C+bo+Ul+" +lat_0=47.5"+F3+ye+Uc+Xt+o0+r+t,1,u+y+Rg+" +k=1"+En+l+Xt+jo+ec+r+t,1,u+y+_d+" +k=1 +x_0=450000"+l+Xt+jo+ec+r+t,1,u+y+R6+" +k=1"+T4+l+Xt+jo+ec+r+t,10,C+Tw+Ew+ka+" +lon_0=4.356939722222222 +x_0=150000.01256 +y_0=5400088.4378"+ct+aS+r+t,70,C+" +lat_1=51.16666723333333 +lat_2=49.8333339"+ka+" +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438"+ct+aS+r+t,96,u+y+R2+" +k=1"+Kr+l+Xt+fl+r+t,1,u+y+Va+" +k=1"+Qn+l+Xt+fl+r+t,1,u+y+Ma+" +k=1"+wa+l+Xt+fl+r+t,1,u+y+yr+" +k=1"+si+l+Xt+fl+r+t,59,I+_a+Ue+Xe+_S+r+t,1,I+qa+Ue+Xe+_S+r+t,71,ho+" +lat_0=45.9 +lon_0=25.39246588888889 +k=0.9996667"+X+Le+ct+UC+r+t,238,I+Aa+de+fS+r+t,1,I+la+de+fS+r+t,62,u+y+lb+" +k=1"+X+l+c+QC+r+t,64,I+vo+c+m+r+t,1,I+So+c+m+r+t,1,I+ko+c+m+r+t,1,I+_o+c+m+r+t,1,I+qs+c+m+r+t,1,I+Vs+c+m+r+t,1,I+Wr+c+m+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,I+Dn+c+m+r+t,1,I+cr+c+m+r+t,1,I+na+c+m+r+t,1,I+Wr+st+c+m+r+t,1,I+or+st+c+m+r+t,1,I+er+st+c+m+r+t,1,I+Dn+st+c+m+r+t,1,I+cr+st+c+m+r+t,1,I+na+st+c+m+r+t,1,I+Qi+st+c+m+r+t,1,I+Co+st+c+m+r+t,1,I+wo+st+c+m+r+t,1,I+Wr+c+m+r+t,1,I+or+c+m+r+t,1,I+er+c+m+r+t,1,I+Dn+c+m+r+t,1,I+cr+c+m+r+t,1,I+na+c+m+r+t,1,I+Wr+st+c+m+r+t,1,I+or+st+c+m+r+t,1,I+er+st+c+m+r+t,1,I+Dn+st+c+m+r+t,1,I+cr+st+c+m+r+t,1,I+na+st+c+m+r+t,1,I+Qi+st+c+m+r+t,1,I+Co+st+c+m+r+t,1,I+wo+st+c+m+r+t,1,C+" +lat_1=48.71666666666667 +lat_2=47.85"+li+w0+ke+l+Rt+D+t,1,C+" +lat_1=47.88333333333333 +lat_2=46.45 +lat_0=45.83333333333334"+w0+ke+l+Rt+D+t,1,C+" +lat_1=46.4 +lat_2=44.86666666666667"+oi+w0+ke+l+Rt+D+t,2,C+" +lat_1=41.85 +lat_2=42.81666666666667 +lat_0=41.33333333333334"+Jn+ke+l+Rt+D+t,1,C+" +lat_1=40.28333333333333"+uf+Go+" +lon_0=-99.5"+ke+l+Rt+D+t,1,u+Er+Gh+dt+Ne+l+Rt+D+t,1,u+Er+Hh+dt+Ne+l+Rt+D+t,1,u+Er+zh+dt+Ne+l+Rt+D+t,1,u+Fa+Xh+rn+Ne+l+Rt+D+t,1,u+us+" +lon_0=-74.66666666666667"+bu+ke+l+Rt+D+t,1,u+We+Oh+x0+Ne+l+Rt+D+t,1,u+We+Hf+dt+Ne+l+Rt+D+t,1,u+We+Fh+zf+Ne+l+Rt+D+t,1,u+Vn+" +lon_0=-74.33333333333333"+rn+Ne+l+Rt+D+t,1,u+Vn+Ph+Ze+Ne+l+Rt+D+t,1,u+Vn+Mh+Ze+Ne+l+Rt+D+t,2,C+" +lat_1=34.33333333333334 +lat_2=36.16666666666666"+nd+Du+ke+l+Rt+D+t,1,C+" +lat_1=47.43333333333333"+sF+li+Gi+ke+l+Rt+D+t,1,C+" +lat_1=46.18333333333333 +lat_2=47.48333333333333"+Ac+Gi+ke+l+Rt+D+t,1,C+" +lat_1=40.43333333333333 +lat_2=41.7"+Go+Xa+ke+l+Rt+D+t,1,C+" +lat_1=38.73333333333333 +lat_2=40.03333333333333"+fn+Xa+ke+l+Rt+D+t,1,C+" +lat_1=35.56666666666667"+wf+Ed+Pr+ke+l+Rt+D+t,1,C+" +lat_1=33.93333333333333 +lat_2=35.23333333333333"+pf+Pr+ke+l+Rt+D+t,1,C+" +lat_1=44.33333333333334"+Ul+ma+ze+ke+l+Rt+D+t,1,C+" +lat_1=42.33333333333334 +lat_2=44"+wn+ze+ke+l+Rt+D+t,1,C+" +lat_1=40.88333333333333 +lat_2=41.95"+hs+Hi+ke+l+Rt+D+t,2,u+Df+zi+" +k=0.9999938"+Ne+l+Rt+D+t,1,C+" +lat_1=33.76666666666667 +lat_2=34.96666666666667"+$u+_n+ke+l+Rt+D+t,2,C+" +lat_1=32.33333333333334 +lat_2=33.66666666666666"+bf+_n+ke+l+Rt+D+t,1,C+" +lat_1=44.41666666666666 +lat_2=45.68333333333333"+ba+Jn+ke+l+Rt+D+t,1,C+" +lat_1=42.83333333333334 +lat_2=44.4"+Rf+Fi+ke+l+Rt+D+t,2,C+Ok+" +lat_2=36.18333333333333"+Od+Kf+ke+l+Rt+D+t,1,C+" +lat_1=32.13333333333333 +lat_2=33.96666666666667"+xf+" +lon_0=-97.5"+ke+l+Rt+D+t,1,C+" +lat_1=30.11666666666667 +lat_2=31.88333333333333"+uu+Fi+ke+l+Rt+D+t,1,C+" +lat_1=28.38333333333333 +lat_2=30.28333333333333"+yf+Yo+ke+l+Rt+D+t,1,C+" +lat_1=26.16666666666667 +lat_2=27.83333333333333"+hu+Hr+ke+l+Rt+D+t,1,C+" +lat_1=40.71666666666667 +lat_2=41.78333333333333"+bl+In+ke+l+Rt+D+t,1,C+" +lat_1=39.01666666666667 +lat_2=40.65"+Ua+In+ke+l+Rt+D+t,1,C+" +lat_1=37.21666666666667 +lat_2=38.35"+Je+In+ke+l+Rt+D+t,1,u+Fa+id+Xf+Ne+l+Rt+D+t,1,C+" +lat_1=38.03333333333333 +lat_2=39.2"+Br+Xi+ke+l+Rt+D+t,1,C+df+" +lat_2=37.96666666666667"+Ur+Xi+ke+l+Rt+D+t,1,C+" +lat_1=47.5"+sF+li+Dh+ke+l+Rt+D+t,1,C+" +lat_1=45.83333333333334 +lat_2=47.33333333333334"+vf+ze+ke+l+Rt+D+t,1,C+" +lat_1=39 +lat_2=40.25"+pd+gs+ke+l+Rt+D+t,1,C+" +lat_1=37.48333333333333 +lat_2=38.88333333333333"+Pd+_n+ke+l+Rt+D+t,1,C+" +lat_1=45.56666666666667 +lat_2=46.76666666666667"+Sf+pn+ke+l+Rt+D+t,1,C+" +lat_1=44.25"+Xs+ba+pn+ke+l+Rt+D+t,1,C+" +lat_1=42.73333333333333 +lat_2=44.06666666666667"+Xu+pn+ke+l+Rt+D+t,1,u+qw+Wh+An+Ne+l+Rt+D+t,1,u+qw+$h+An+Ne+l+Rt+D+t,1,u+qw+Wf+An+Ne+l+Rt+D+t,1,u+qw+qh+An+Ne+l+Rt+D+t,6,u+y+Yo+pe+tn+l+Rt+D+t,1,u+y+g2+pe+tn+l+Rt+D+t,1,u+y+Ko+pe+tn+l+Rt+D+t,1,u+y+_n+pe+tn+l+Rt+D+t,14,u+y+" +lon_0=-53"+dt+De+l+Rt+r+t,1,u+y+d7+dt+De+l+Rt+r+t,1,u+y+V8+dt+De+l+Rt+r+t,1,u+y+V3+dt+De+l+Rt+r+t,1,u+y+K3+dt+De+l+Rt+r+t,1,u+y+K8+dt+De+l+Rt+r+t,12,C+I2+Ul+oi+po+bt+l+Rt+r+t,1,C+l0+u0+hu+pl+ke+l+Rt+D+t,1,C+bo+Og+qp+w0+Bt+l+c+m+r+t,4,C+Yi+ys+bp+Jn+X+l+c+m+r+t,3,u+Er+Gh+dt+ee+e4+c+m+r+t,1,u+Er+Hh+dt+X+qo+c+m+r+t,1,u+Er+zh+dt+ar+ad+c+m+r+t,1,u+Fa+Xh+rn+ve+l+c+m+r+t,1,u+us+Us+dt+En+l+c+m+r+t,1,u+We+Oh+x0+ig+l+c+m+r+t,1,u+We+Hf+dt+X+l+c+m+r+t,1,u+We+Fh+zf+w4+l+c+m+r+t,1,u+us+Us+dt+En+l+c+m+r+t,1,u+Vn+Ph+Ze+Mn+l+c+m+r+t,1,u+Vn+Mh+Ze+s2+l+c+m+r+t,1,C+hf+ff+hs+wd+ve+l+c+m+r+t,1,C+B1+U1+nd+Du+A8+l+c+m+r+t,1,C+Bs+G1+li+Gi+Bt+l+c+m+r+t,1,C+H1+z1+Ac+Gi+Bt+l+c+m+r+t,1,C+dg+xp+Go+Xa+Bt+l+c+m+r+t,1,C+yp+wp+fn+Xa+Bt+l+c+m+r+t,1,C+df+X1+Ed+Pr+Bt+l+c+m+r+t,1,C+W1+$1+pf+Pr+Bt+l+c+m+r+t,1,C+Hu+cu+ma+ze+Kr+l+c+m+r+t,1,C+zu+lu+wn+ze+Ge+l+c+m+r+t,1,C+Vp+q1+hs+Hi+Bt+l+c+m+r+t,1,C+gf+mf+Ir+Hi+Bt+l+c+m+r+t,1,u+Df+zi+zp+hn+l+c+m+r+t,3,C+V1+sg+bf+_n+og+l+c+m+r+t,1,C+vp+Sp+ba+Jn+Bt+l+c+m+r+t,1,C+pg+kp+Rf+Fi+Bt+l+c+m+r+t,1,C+K1+Kp+fs+P0+Bt+l+c+m+r+t,1,C+Y1+Yp+Od+Kf+ee+Fe+c+m+r+t,1,C+Z1+Q1+xf+Hr+Bt+ia+c+m+r+t,1,C+J1+tp+uu+Fi+sa+Si+c+m+r+t,1,C+ep+np+yf+Yo+Bt+ad+c+m+r+t,1,C+l0+u0+hu+Hr+ve+ku+c+m+r+t,1,C+ni+h0+bl+In+X+Fe+c+m+r+t,1,C+k0+f0+Ua+In+X+ia+c+m+r+t,1,C+A0+d0+Je+In+X+Si+c+m+r+t,1,u+Fa+id+Xf+X+l+c+m+r+t,1,C+cg+rp+Br+Xi+Qn+ia+c+m+r+t,1,C+ls+wf+Ur+Xi+Qn+Fe+c+m+r+t,1,C+Bs+lg+li+Dh+X+l+c+m+r+t,1,C+ap+ip+vf+ze+X+l+c+m+r+t,1,C+Jp+Mg+pd+gs+Bt+l+c+m+r+t,1,C+Ap+_p+Pd+_n+Bt+l+c+m+r+t,1,C+sp+op+Sf+pn+Bt+l+c+m+r+t,1,C+Ll+Zp+ba+pn+Bt+l+c+m+r+t,1,C+cp+lp+Xu+pn+Bt+l+c+m+r+t,1,u+Gn+Wh+Ze+ee+l+c+m+r+t,1,u+Gn+$h+Ze+ye+zr+c+m+r+t,1,u+Gn+Wf+Ze+Bt+l+c+m+r+t,1,u+Gn+qh+Ze+ar+zr+c+m+r+t,3,C+Nm+jm+Bm+Rm+ee+go+c+m+r+t,3,u+y+Yo+pe+tn+l+c+m+D+t,1,u+y+g2+pe+tn+l+c+m+D+t,1,u+y+Ko+pe+tn+l+c+m+D+t,1,u+y+_n+pe+tn+l+c+m+D+t,14,u+y+" +lon_0=-53"+dt+De+l+c+m+r+t,1,u+y+d7+dt+De+l+c+m+r+t,1,u+y+V8+dt+De+l+c+m+r+t,1,u+y+V3+dt+De+l+c+m+r+t,1,u+y+K3+dt+De+l+c+m+r+t,1,u+y+K8+dt+De+l+c+m+r+t,1,u+y+Rc+dt+De+l+c+m+r+t,1,u+y+Y8+dt+De+l+c+m+r+t,1,u+y+Z8+dt+De+l+c+m+r+t,1,u+y+gs+dt+De+l+c+m+r+t,1,u+y+Xa+dt+De+l+c+m+r+t,1,u+y+_n+dt+De+l+c+m+r+t,1,u+y+Mu+dt+De+l+c+m+r+t,1,u+y+Ko+dt+De+l+c+m+r+t,1,u+y+pn+dt+De+l+c+m+r+t,1,u+y+g2+dt+De+l+c+m+r+t,1,u+y+bd+dt+De+l+c+m+r+t,1,C+I2+Ul+oi+po+bt+l+c+m+r+t,1,C+l0+u0+" +lat_0=25.5"+pl+Tn+l+c+m+r+t,2,I+$c+Ct+ne+r+t,1,I+$l+Ct+ne+r+t,1,I+Qu+Ct+ne+r+t,1,I+Kl+Ct+ne+r+t,1,I+To+Ct+ne+r+t,1,I+lc+Ct+ne+r+t,1,I+Eo+Ct+ne+r+t,1,I+ql+Ct+ne+r+t,1,I+Vl+Ct+ne+r+t,1,I+Xl+Ct+ne+r+t,1,I+vo+Ct+ne+r+t,1,I+So+Ct+ne+r+t,1,I+ko+Ct+ne+r+t,1,I+_o+Ct+ne+r+t,1,I+qs+Ct+ne+r+t,1,I+Vs+Ct+ne+r+t,1,I+Wr+Ct+ne+r+t,1,I+or+Ct+ne+r+t,1,I+er+Ct+ne+r+t,1,I+Dn+Ct+ne+r+t,1,I+cr+Ct+ne+r+t,1,I+na+Ct+ne+r+t,1,I+Qi+Ct+ne+r+t,1,I+Co+Ct+ne+r+t,1,I+wo+Ct+ne+r+t,1,I+oc+Ct+ne+r+t,1,I+Dd+Ct+ne+r+t,1,I+_a+Ct+ne+r+t,1,I+qa+Ct+ne+r+t,1,I+ic+Ct+ne+r+t,1,I+zl+Ct+ne+r+t,1,I+ua+Ct+ne+r+t,1,I+Ka+Ct+ne+r+t,1,I+Ks+Ct+ne+r+t,1,I+hi+Ct+ne+r+t,1,I+vs+Ct+ne+r+t,1,I+Ya+Ct+ne+r+t,1,I+Aa+Ct+ne+r+t,1,I+la+Ct+ne+r+t,1,I+ws+Ct+ne+r+t,1,I+Vu+Ct+ne+r+t,1,I+Ku+Ct+ne+r+t,1,I+Nd+Ct+ne+r+t,1,I+Lg+Ct+ne+r+t,1,I+Ng+Ct+ne+r+t,1,I+Wl+Ct+ne+r+t,1,I+Io+Ct+ne+r+t,1,I+ks+Ct+ne+r+t,1,I+As+Ct+ne+r+t,1,I+Ys+Ct+ne+r+t,1,I+Ss+Ct+ne+r+t,1,I+Zs+Ct+ne+r+t,1,I+cc+Ct+ne+r+t,1,I+Ao+Ct+ne+r+t,1,I+Wc+Ct+ne+r+t,1,I+Zu+Ct+ne+r+t,1,I+Rd+Ct+ne+r+t,1,I+Zi+Ct+ne+r+t,1,I+yo+Ct+ne+r+t,1,I+Xc+Ct+ne+r+t,41,I+$c+st+Ct+ne+r+t,1,I+$l+st+Ct+ne+r+t,1,I+Qu+st+Ct+ne+r+t,1,I+Kl+st+Ct+ne+r+t,1,I+To+st+Ct+ne+r+t,1,I+lc+st+Ct+ne+r+t,1,I+Eo+st+Ct+ne+r+t,1,I+ql+st+Ct+ne+r+t,1,I+Vl+st+Ct+ne+r+t,1,I+Xl+st+Ct+ne+r+t,1,I+vo+st+Ct+ne+r+t,1,I+So+st+Ct+ne+r+t,1,I+ko+st+Ct+ne+r+t,1,I+_o+st+Ct+ne+r+t,1,I+qs+st+Ct+ne+r+t,1,I+Vs+st+Ct+ne+r+t,1,I+Wr+st+Ct+ne+r+t,1,I+or+st+Ct+ne+r+t,1,I+er+st+Ct+ne+r+t,1,I+Dn+st+Ct+ne+r+t,1,I+cr+st+Ct+ne+r+t,1,I+na+st+Ct+ne+r+t,1,I+Qi+st+Ct+ne+r+t,1,I+Co+st+Ct+ne+r+t,1,I+wo+st+Ct+ne+r+t,1,I+oc+st+Ct+ne+r+t,1,I+Dd+st+Ct+ne+r+t,1,I+_a+st+Ct+ne+r+t,1,I+qa+st+Ct+ne+r+t,1,I+ic+st+Ct+ne+r+t,1,I+zl+st+Ct+ne+r+t,1,I+ua+st+Ct+ne+r+t,1,I+Ka+st+Ct+ne+r+t,1,I+Ks+st+Ct+ne+r+t,1,I+hi+st+Ct+ne+r+t,1,I+vs+st+Ct+ne+r+t,1,I+Ya+st+Ct+ne+r+t,1,I+Aa+st+Ct+ne+r+t,1,I+la+st+Ct+ne+r+t,1,I+ws+st+Ct+ne+r+t,1,I+Vu+st+Ct+ne+r+t,1,I+Ku+st+Ct+ne+r+t,1,I+Nd+st+Ct+ne+r+t,1,I+Lg+st+Ct+ne+r+t,1,I+Ng+st+Ct+ne+r+t,1,I+Wl+st+Ct+ne+r+t,1,I+Io+st+Ct+ne+r+t,1,I+ks+st+Ct+ne+r+t,1,I+As+st+Ct+ne+r+t,1,I+Ys+st+Ct+ne+r+t,1,I+Ss+st+Ct+ne+r+t,1,I+Zs+st+Ct+ne+r+t,1,I+cc+st+Ct+ne+r+t,1,I+Ao+st+Ct+ne+r+t,1,I+Wc+st+Ct+ne+r+t,1,I+Zu+st+Ct+ne+r+t,1,I+Rd+st+Ct+ne+r+t,1,I+Zi+st+Ct+ne+r+t,1,I+yo+st+Ct+ne+r+t,1,I+Xc+st+Ct+ne+r+t,41,I+$c+Ct+re+r+t,1,I+$l+Ct+re+r+t,1,I+Qu+Ct+re+r+t,1,I+Kl+Ct+re+r+t,1,I+To+Ct+re+r+t,1,I+lc+Ct+re+r+t,1,I+Eo+Ct+re+r+t,1,I+ql+Ct+re+r+t,1,I+Vl+Ct+re+r+t,1,I+Xl+Ct+re+r+t,1,I+vo+Ct+re+r+t,1,I+So+Ct+re+r+t,1,I+ko+Ct+re+r+t,1,I+_o+Ct+re+r+t,1,I+qs+Ct+re+r+t,1,I+Vs+Ct+re+r+t,1,I+Wr+Ct+re+r+t,1,I+or+Ct+re+r+t,1,I+er+Ct+re+r+t,1,I+Dn+Ct+re+r+t,1,I+cr+Ct+re+r+t,1,I+na+Ct+re+r+t,1,I+Qi+Ct+re+r+t,1,I+Co+Ct+re+r+t,1,I+wo+Ct+re+r+t,1,I+oc+Ct+re+r+t,1,I+Dd+Ct+re+r+t,1,I+_a+Ct+re+r+t,1,I+qa+Ct+re+r+t,1,I+ic+Ct+re+r+t,1,I+zl+Ct+re+r+t,1,I+ua+Ct+re+r+t,1,I+Ka+Ct+re+r+t,1,I+Ks+Ct+re+r+t,1,I+hi+Ct+re+r+t,1,I+vs+Ct+re+r+t,1,I+Ya+Ct+re+r+t,1,I+Aa+Ct+re+r+t,1,I+la+Ct+re+r+t,1,I+ws+Ct+re+r+t,1,I+Vu+Ct+re+r+t,1,I+Ku+Ct+re+r+t,1,I+Nd+Ct+re+r+t,1,I+Lg+Ct+re+r+t,1,I+Ng+Ct+re+r+t,1,I+Wl+Ct+re+r+t,1,I+Io+Ct+re+r+t,1,I+ks+Ct+re+r+t,1,I+As+Ct+re+r+t,1,I+Ys+Ct+re+r+t,1,I+Ss+Ct+re+r+t,1,I+Zs+Ct+re+r+t,1,I+cc+Ct+re+r+t,1,I+Ao+Ct+re+r+t,1,I+Wc+Ct+re+r+t,1,I+Zu+Ct+re+r+t,1,I+Rd+Ct+re+r+t,1,I+Zi+Ct+re+r+t,1,I+yo+Ct+re+r+t,1,I+Xc+Ct+re+r+t,41,I+$c+st+Ct+re+r+t,1,I+$l+st+Ct+re+r+t,1,I+Qu+st+Ct+re+r+t,1,I+Kl+st+Ct+re+r+t,1,I+To+st+Ct+re+r+t,1,I+lc+st+Ct+re+r+t,1,I+Eo+st+Ct+re+r+t,1,I+ql+st+Ct+re+r+t,1,I+Vl+st+Ct+re+r+t,1,I+Xl+st+Ct+re+r+t,1,I+vo+st+Ct+re+r+t,1,I+So+st+Ct+re+r+t,1,I+ko+st+Ct+re+r+t,1,I+_o+st+Ct+re+r+t,1,I+qs+st+Ct+re+r+t,1,I+Vs+st+Ct+re+r+t,1,I+Wr+st+Ct+re+r+t,1,I+or+st+Ct+re+r+t,1,I+er+st+Ct+re+r+t,1,I+Dn+st+Ct+re+r+t,1,I+cr+st+Ct+re+r+t,1,I+na+st+Ct+re+r+t,1,I+Qi+st+Ct+re+r+t,1,I+Co+st+Ct+re+r+t,1,I+wo+st+Ct+re+r+t,1,I+oc+st+Ct+re+r+t,1,I+Dd+st+Ct+re+r+t,1,I+_a+st+Ct+re+r+t,1,I+qa+st+Ct+re+r+t,1,I+ic+st+Ct+re+r+t,1,I+zl+st+Ct+re+r+t,1,I+ua+st+Ct+re+r+t,1,I+Ka+st+Ct+re+r+t,1,I+Ks+st+Ct+re+r+t,1,I+hi+st+Ct+re+r+t,1,I+vs+st+Ct+re+r+t,1,I+Ya+st+Ct+re+r+t,1,I+Aa+st+Ct+re+r+t,1,I+la+st+Ct+re+r+t,1,I+ws+st+Ct+re+r+t,1,I+Vu+st+Ct+re+r+t,1,I+Ku+st+Ct+re+r+t,1,I+Nd+st+Ct+re+r+t,1,I+Lg+st+Ct+re+r+t,1,I+Ng+st+Ct+re+r+t,1,I+Wl+st+Ct+re+r+t,1,I+Io+st+Ct+re+r+t,1,I+ks+st+Ct+re+r+t,1,I+As+st+Ct+re+r+t,1,I+Ys+st+Ct+re+r+t,1,I+Ss+st+Ct+re+r+t,1,I+Zs+st+Ct+re+r+t,1,I+cc+st+Ct+re+r+t,1,I+Ao+st+Ct+re+r+t,1,I+Wc+st+Ct+re+r+t,1,I+Zu+st+Ct+re+r+t,1,I+Rd+st+Ct+re+r+t,1,I+Zi+st+Ct+re+r+t,1,I+yo+st+Ct+re+r+t,1,I+Xc+st+Ct+re+r+t,41,I+$c+vt+r+t,1,I+$l+vt+r+t,1,I+Qu+vt+r+t,1,I+Kl+vt+r+t,1,I+To+vt+r+t,1,I+lc+vt+r+t,1,I+Eo+vt+r+t,1,I+ql+vt+r+t,1,I+Vl+vt+r+t,1,I+Xl+vt+r+t,1,I+vo+vt+r+t,1,I+So+vt+r+t,1,I+ko+vt+r+t,1,I+_o+vt+r+t,1,I+qs+vt+r+t,1,I+Vs+vt+r+t,1,I+Wr+vt+r+t,1,I+or+vt+r+t,1,I+er+vt+r+t,1,I+Dn+vt+r+t,1,I+cr+vt+r+t,1,I+na+vt+r+t,1,I+Qi+vt+r+t,1,I+Co+vt+r+t,1,I+wo+vt+r+t,1,I+oc+vt+r+t,1,I+Dd+vt+r+t,1,I+_a+vt+r+t,1,I+qa+vt+r+t,1,I+ic+vt+r+t,1,I+zl+vt+r+t,1,I+ua+vt+r+t,1,I+Ka+vt+r+t,1,I+Ks+vt+r+t,1,I+hi+vt+r+t,1,I+vs+vt+r+t,1,I+Ya+vt+r+t,1,I+Aa+vt+r+t,1,I+la+vt+r+t,1,I+ws+vt+r+t,1,I+Vu+vt+r+t,1,I+Ku+vt+r+t,1,I+Nd+vt+r+t,1,I+Lg+vt+r+t,1,I+Ng+vt+r+t,1,I+Wl+vt+r+t,1,I+Io+vt+r+t,1,I+ks+vt+r+t,1,I+As+vt+r+t,1,I+Ys+vt+r+t,1,I+Ss+vt+r+t,1,I+Zs+vt+r+t,1,I+cc+vt+r+t,1,I+Ao+vt+r+t,1,I+Wc+vt+r+t,1,I+Zu+vt+r+t,1,I+Rd+vt+r+t,1,I+Zi+vt+r+t,1,I+yo+vt+r+t,1,I+Xc+vt+r+t,1,vn+ka+ob+Hn+Yu+Ln+ia+vt+r+t,3,u+y+Yo+pe+tn+l+vt+D+t,1,u+y+g2+pe+tn+l+vt+D+t,1,u+y+Ko+pe+tn+l+vt+D+t,1,u+y+_n+pe+tn+l+vt+D+t,34,I+$c+st+vt+r+t,1,I+$l+st+vt+r+t,1,I+Qu+st+vt+r+t,1,I+Kl+st+vt+r+t,1,I+To+st+vt+r+t,1,I+lc+st+vt+r+t,1,I+Eo+st+vt+r+t,1,I+ql+st+vt+r+t,1,I+Vl+st+vt+r+t,1,I+Xl+st+vt+r+t,1,I+vo+st+vt+r+t,1,I+So+st+vt+r+t,1,I+ko+st+vt+r+t,1,I+_o+st+vt+r+t,1,I+qs+st+vt+r+t,1,I+Vs+st+vt+r+t,1,I+Wr+st+vt+r+t,1,I+or+st+vt+r+t,1,I+er+st+vt+r+t,1,I+Dn+st+vt+r+t,1,I+cr+st+vt+r+t,1,I+na+st+vt+r+t,1,I+Qi+st+vt+r+t,1,I+Co+st+vt+r+t,1,I+wo+st+vt+r+t,1,I+oc+st+vt+r+t,1,I+Dd+st+vt+r+t,1,I+_a+st+vt+r+t,1,I+qa+st+vt+r+t,1,I+ic+st+vt+r+t,1,I+zl+st+vt+r+t,1,I+ua+st+vt+r+t,1,I+Ka+st+vt+r+t,1,I+Ks+st+vt+r+t,1,I+hi+st+vt+r+t,1,I+vs+st+vt+r+t,1,I+Ya+st+vt+r+t,1,I+Aa+st+vt+r+t,1,I+la+st+vt+r+t,1,I+ws+st+vt+r+t,1,I+Vu+st+vt+r+t,1,I+Ku+st+vt+r+t,1,I+Nd+st+vt+r+t,1,I+Lg+st+vt+r+t,1,I+Ng+st+vt+r+t,1,I+Wl+st+vt+r+t,1,I+Io+st+vt+r+t,1,I+ks+st+vt+r+t,1,I+As+st+vt+r+t,1,I+Ys+st+vt+r+t,1,I+Ss+st+vt+r+t,1,I+Zs+st+vt+r+t,1,I+cc+st+vt+r+t,1,I+Ao+st+vt+r+t,1,I+Wc+st+vt+r+t,1,I+Zu+st+vt+r+t,1,I+Rd+st+vt+r+t,1,I+Zi+st+vt+r+t,1,I+yo+st+vt+r+t,1,I+Xc+st+vt+r+t,1,vn+Yt+" +lat_ts=-90"+Hn+Yu+Ln+ia+vt+r+t,5,u+y+Uu+pe+X+un+vt+r+t].reduce((S,n,e)=>{if(e%2===0){const i=S.prev+n,a="EPSG:"+i;S.defs.push([a]),S.prev=i}else S.defs[S.defs.length-1].push(n);return S},{defs:[],prev:0}).defs;let pb=_P;const EL=tM;typeof pb=="object"&&typeof pb.defs!="function"&&typeof pb.default=="function"&&(pb=pb.default);pb.defs(EL);var OL=pb;(function(S){const n=OL,e=ZP;function i(a,{from:s="EPSG:4326",in_place:o=!1,to:h="EPSG:4326"}){return(typeof s=="number"||s.match(/^\d+$/))&&(s="EPSG:"+s),(typeof h=="number"||h.match(/^\d+$/))&&(h="EPSG:"+h),e(a,{in_place:o,reproject:n(s,h).forward})}S.exports=i,typeof window=="object"&&(window.reprojectGeoJSON=i),typeof self=="object"&&(self.reprojectGeoJSON=i)})(JP);var FL=JP.exports;(function(S){const n=TL,e=FL;function i({debug:h=!1,fname:f,raster_bbox:d,raster_srs:p,raster_height:g,raster_width:x,pixel_height:w,pixel_width:_,mask:A,mask_srs:T}){return p!==T&&(A=e(A,{from:T,to:p})),n[f]({debug:h,raster_bbox:d,raster_height:g,raster_width:x,pixel_height:w,pixel_width:_,mask:A})}function a(h){return i({...h,fname:"inside"})}function s(h){return i({...h,fname:"outside"})}const o={inside:a,outside:s};S.exports=o})(TP);var PL=TP.exports;function eM({data:S,data_bbox:n,data_height:e,data_width:i,data_srs:a,debug:s=!1,geomask:o,mask:h,mask_srs:f,reproject:d,strategy:p="outside",edition:g}){if(!["inside","outside"].includes(p))throw new Error(`[geocanvas] strategy can be either "inside" or "outside". you provided "${p}"`);const{rows:x}=o[p]({raster_bbox:n,raster_height:e,raster_width:i,raster_srs:a,mask:h,mask_srs:f,reproject:d});x.forEach((w,_)=>{if(w){const A=_*4*i;w.forEach(([T,E])=>{for(let P=T;P<=E;P++)S[A+P*4+3]=0})}})}function ML({canvas:S,canvas_bbox:n,canvas_srs:e,geomask:i,mask:a,mask_srs:s,reproject:o,strategy:h="outside",edition:f,debug:d=!1}){if(d&&console.log("[geocanvas] starting to mask canvas"),!["inside","outside"].includes(h))throw new Error(`[geocanvas] strategy can be either "inside" or "outside". you provided "${h}"`);const p=S.getContext("2d"),{height:g,width:x}=S;d&&console.log(`[geocanvas] canvas height is ${g} pixels`),d&&console.log(`[geocanvas] canvas width is ${x} pixels`);const w=p.getImageData(0,0,x,g);return eM({data:w.data,data_bbox:n,data_height:g,data_srs:e,data_width:x,debug:d,geomask:i,mask:a,mask_srs:s,reproject:o,strategy:h}),d&&console.log("[geocanvas] image data after masking:",w),p.putImageData(w,0,0),d&&console.log("[geocanvas] put image data back"),S}var DL={maskImageData:eM,maskCanvas:ML};(function(S){const n=PL,e=DL;function i(o){return e.maskImageData({...o,edition:"full",geomask:n})}function a(o){return e.maskCanvas({...o,edition:"full",geomask:n})}const s={maskImageData:i,maskCanvas:a};S.exports=s,typeof self=="object"&&(self.geocanvas=s),typeof window=="object"&&(window.geocanvas=s)})(IP);var RL=IP.exports;const LL=ul(RL);var nM={exports:{}};(function(S){function n(w){try{w[Symbol.iterator]=function(){return this}}catch{}}function e(w){w["@@iterator"]=function(){return this}}function i(w){const _={next:w};return n(_),e(_),_}function a(w){try{return w.constructor.name.endsWith("Array")}catch{return!1}}function s(w){try{return typeof w.next=="function"}catch{return!1}}function o(w){try{return"@@iterator"in w}catch{return!1}}function h(w){try{return Symbol.iterator in w.constructor.prototype}catch{return!1}}function f(w){try{return Symbol.iterator in w&&typeof w.next=="function"&&w.propertyIsEnumerable("next")===!1}catch{return!1}}function d(w){const _=w["@@iterator"];if(s(_))return _;if(typeof _=="function")return _()}function p(w){let _=0,A=w.length;return i(()=>_++<A?{value:w[_],done:!1}:{done:!0})}function g(w){if(f(w))return w;if(h(w))return w[Symbol.iterator]();if(s(w))return i(w.next);if(o(w))return d(w);if(typeof w=="string"||a(w))return p(w);throw"[iter-fun] unable to determine iterator"}function x(w){return w=w.map(g),i(function(){const A=w.map(T=>T.next());return A.every(({done:T})=>T)?{done:!0}:{done:!1,value:A.map(({value:T})=>T)}})}S.exports={addSymbolIterator:n,addSymbolIteratorFallback:e,isIterator:f,isArray:a,hasNext:s,hasSymbolIterator:h,hasIterator:o,getIterator:d,createIterator:p,getOrCreateIterator:g,wrapNextFunction:i,zip:x}})(nM);var NL=nM.exports;const{wrapNextFunction:YB}=NL,PF={Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Float32Array,Float64Array};try{PF.BigInt64Array=BigInt64Array,PF.BigUint64Array=BigUint64Array}catch{}var rM={exports:{}};(function(S){function n(d){return d}function e(d,p,g,x,w){return g+x*(w-d)/p}function i(d,p,g,x,w){return g-x*(w-d)/p}function a(d,p,g,x,w){return Math.round(g+x*(w-d)/p)}function s(d,p,g,x,w){return Math.round(g-x*(w-d)/p)}function o([d,p],[g,x],{flip:w,no_range_value:_,no_range_value_strategy:A="highest",round:T=!1}={}){const E=p-d,P=x-g;if(E===0){if(typeof _=="number")return n.bind(null,_);if(A==="highest")return n.bind(null,x);if(A==="lowest")return n.bind(null,g);if(A==="middle"){let M=(x-g)/2;return T&&(M=Math.round(M)),n.bind(null,M)}}return w?T?s.bind(null,d,E,x,P):i.bind(null,d,E,x,P):T?a.bind(null,d,E,g,P):e.bind(null,d,E,g,P)}function h(d,...p){return create(p)(d)}const f={_identity:n,_scale:h,_scale_number:e,_scale_and_flip_number:i,_scale_and_round_number:a,_scale_and_flip_and_round_number:s,createScaleFunction:o};S.exports=f,typeof window=="object"&&(window.quickScale=f),typeof self=="object"&&(self.quickScale=f)})(rM);var jL=rM.exports;let MF;(function(S){S["[band][row][column]"]="[band][row][column]",S["[band][row,column]"]="[band][row,column]",S["[band,row,column]"]="[band,row,column]",S["[row,column,band]"]="[row,column,band]",S["[row,column][band]"]="[row,column][band]",S["[row][column][band]"]="[row][column][band]",S["[row][column,band]"]="[row][column,band]"})(MF||(MF={}));function DF(S){return[S,S,S]}function BL(S,n,e,i){if(i.includes(S))return n;const a=e(i[0]);return[a,a,a]}function UL(S,n,e,i){if(i.includes(S))return n;const a=e(i[0]);return"rgb("+a+", "+a+", "+a+")"}function GL(S,n,e,i,a){return a.includes(S)?n:[e(a[0]),i(a[1]),0]}function HL(S,n,e,i,a){return a.includes(S)?n:"rgb("+e(a[0])+", "+i(a[1])+", 0)"}function zL(S,n,e,i,a,s){return s.includes(S)?n:[e(s[0]),i(s[1]),a(s[2])]}function XL(S,n,e,i,a,s){return s.includes(S)?n:"rgb("+e(s[0])+", "+i(s[1])+", "+a(s[2])+")"}function WL(S,n,e,i,a,s){return s=s.slice(0,3),s.includes(S)?n:[e(s[0]),i(s[1]),a(s[2])]}function $L(S,n,e,i,a,s){return s=s.slice(0,3),s.includes(S)?n:"rgb("+e(s[0])+", "+i(s[1])+", "+a(s[2])+")"}function A7([S,n,e]){return"rgb("+S+", "+n+", "+e+")"}function RF({format:S="array",ranges:n,flip:e,new_no_data_pixel:i,new_no_data_value:a,no_range_value:s,no_range_value_strategy:o,old_no_data_value:h,round:f=!0}){const d=n.length;if(i&&a)throw new Error("[pixel-utils/raw-to-rgb] can't specify both new_no_data_pixel and new_no_data_value");if(i==null&&(a==null?i=DF(null):i=DF(a)),i===void 0)throw new Error("[raw-to-rgb] undefined new_no_data_pixel");const p=[a===0?1:0,a===255?254:255],g={flip:e,no_range_value:s,no_range_value_strategy:o,round:f},x=n.slice(0,3).map(w=>jL.createScaleFunction(w,p,g));if(d===1)return S==="string"?UL.bind(null,h,A7(i),...x):BL.bind(null,h,i,...x);if(d===2)return S==="string"?HL.bind(null,h,A7(i),...x):GL.bind(null,h,i,...x);if(d===3)return S==="string"?XL.bind(null,h,A7(i),...x):zL.bind(null,h,i,...x);if(d>=4)return S==="string"?$L.bind(null,h,A7(i),...x):WL.bind(null,h,i,...x);throw new Error("[pixel-utils/raw-to-rgb] invalid number of bands: "+d)}var qL=function(n){const e=n.toString();return e.startsWith("326")||e.startsWith("327")};const LF=ul(qL);var VL=function(n){return Number.parseInt(n.toString().substring(3))},KL=function(n){const e=n.toString();if(e.startsWith("326"))return"N";if(e.startsWith("327"))return"S"};const YL=VL,ZL=KL;var QL=function(n){const e=YL(n),i=ZL(n);return`+proj=utm +zone=${e}${i==="S"?" +south ":" "}+ellps=WGS84 +datum=WGS84 +units=m +no_defs`};const JL=ul(QL);var aM={exports:{}};(function(S){let n=_P;const e=tM;typeof n=="object"&&typeof n.defs!="function"&&typeof n.default=="function"&&(n=n.default),n.defs(e),S.exports=n,S.exports.default=n})(aM);var iM=aM.exports;const Ju=ul(iM);var d_={exports:{}},p_={exports:{}};function sM(S,n){const e=S.length,i=n.length,a=S.indexOf("."),s=n.indexOf("."),o=a===-1?e:a,h=s===-1?i:s,f=o-h;let d=Math.max(o,h),p=Math.max(e-o,i-h),g=f<0?-1*f:0,x=f<=0?0:f,w=d+1+p-1,_=0;for(;_<w;){const A=_-g,T=A===o?".":S[A]||"0",E=_-x,P=E===h?".":n[E]||"0";if(T!==P){if(T>P)return">";if(T<P)return"<"}_++}return"="}p_.exports=sM;p_.exports.default=sM;var $v=p_.exports,g_={exports:{}};function oM(S){S[0]==="+"&&(S=S.substring(1));const n=S[0]==="-"?"-":"";n==="-"&&(S=S.substring(1));const e=S.indexOf("e");if(e===-1)return n+S;let i=S.indexOf(".");i===-1&&(i=e);const a=Number(S.substring(e+1)),s=S.substring(0,e).replace(".",""),o=i+a,h=s.length;if(o>=h){const f=o-h;let d=s;for(let p=0;p<f;p++)d+="0";return n+d}else if(o<0){let f="0.";for(let d=0;d>o;d--)f+="0";return f+=s,n+f}else return n+s.substring(0,o)+"."+s.substring(o)}g_.exports=oM;g_.exports.default=oM;var tN=g_.exports;const eN=tN;var O5=function(n){return n[0]==="+"&&(n=n.substring(1)),n=eN(n),n=n.replace(/^0+(?=\d)/,""),n.includes(".")&&(n=n.replace(/\.?0+$/,"")),n===""&&(n="0"),n==="-0"&&(n="0"),n},m_={exports:{}};const nN=9007199254740991,rN=nN.toString().length-1;var b_={MAX_SAFE_INTEGER_LENGTH:rN};const{MAX_SAFE_INTEGER_LENGTH:NF}=b_;function cM(S,n){const e=S.length,i=n.length,a=S.indexOf("."),s=n.indexOf("."),o=a===-1?e:a,h=s===-1?i:s;if(a===-1&&s===-1&&e<NF&&i<NF)return(Number(S)+Number(n)).toFixed();const f=o-h;let d=Math.max(o,h),p=Math.max(e-o-1,i-h-1),g=f<0?-1*f:0,x=f<=0?0:f,w=d+1+p-1,_="",A=0,T=w;if(p>0){for(;T>w-p;){const E=S[T-g]||"0",P=n[T-x]||"0";let M=Number(E)+Number(P)+A;M>=10?(M-=10,A=1):A=0,(_!==""||M!==0)&&(_=M+_),T--}_&&(_="."+_),T--}if(d>0)for(;T>=0;){const E=S[T-g]||"0",P=n[T-x]||"0";let M=Number(E)+Number(P)+A;M>=10?(M-=10,A=1):A=0,_=M+_,T--}return A===1&&(_=A+_),_[0]==="."&&(_="0"+_),_}m_.exports=cM;m_.exports.default=cM;var lM=m_.exports,x_={exports:{}};const{MAX_SAFE_INTEGER_LENGTH:jF}=b_;function uM(S,n){const e=S.length,i=n.length,a=S.indexOf("."),s=n.indexOf("."),o=a===-1?e:a,h=s===-1?i:s;if(a===-1&&s===-1&&e<jF&&i<jF)return(Number(S)-Number(n)).toFixed();const f=o-h;let d=Math.max(o,h),p=Math.max(e-o-1,i-h-1),g=f<0?-1*f:0,x=f<=0?0:f,w=d+1+p-1,_="",A=0,T=w;if(p>0){for(;T>w-p;){let E=S[T-g]||"0",P=n[T-x]||"0";E-=A,A=0;let M=E-P;if(M<0)for(;M<0;)A++,M+=10;else A&&A--;(_!==""||M!==0)&&(_=M+_),T--}_!==""&&(_="."+_),T--}if(d>0){for(;T>0;){let F=S[T-g]||"0",k=n[T-x]||"0";F-=A,A=0;let O=F-k;if(O<0)for(;O<0;)A++,O+=10;else A&&A--;_=O+_,T--}const E=S[0-g]||"0",P=n[0-x]||"0";let M=Number(E)-(A>0?1:0)-Number(P);M!==0&&(_=M+_),_=_.replace(/^0+/,"")}return _[0]==="."&&(_="0"+_),_}x_.exports=uM;x_.exports.default=uM;var hM=x_.exports;const BF=$v,UF=O5,GF=lM,_7=hM;function fM(S,n){S=UF(S),n=UF(n);const e=S[0]!=="-",i=n[0]!=="-";if(e&&i)return GF(S,n);if(!e&&!i)return"-"+GF(S.substring(1),n.substring(1));if(!e&&i)switch(S=S.substring(1),BF(S,n)){case"=":return"0";case"<":return _7(n,S);case">":return"-"+_7(S,n)}else if(e&&!i)switch(n=n.substring(1),BF(S,n)){case"=":return"0";case"<":return"-"+_7(n,S);case">":return _7(S,n)}}d_.exports=fM;d_.exports.default=fM;var y_=d_.exports;const dM=ul(y_);var w_={exports:{}},v_={exports:{}};const aN=O5;function pM(S){return S=aN(S),S[0]==="-"?S.substring(1):S}v_.exports=pM;v_.exports.default=pM;var gM=v_.exports,S_={exports:{}},k_={exports:{}};const HF=O5,zF=$v,XF=lM,C7=hM;function mM(S,n){S=HF(S),n=HF(n);const e=S[0]!=="-",i=n[0]!=="-";if(e)if(i){const a=zF(S,n);return a===">"?C7(S,n):a==="<"?"-"+C7(n,S):"0"}else return XF(S,n.substring(1));else{if(i)return"-"+XF(S.substring(1),n);{S=S.substring(1),n=n.substring(1);const a=zF(S,n);return a===">"?"-"+C7(S,n):a==="<"?C7(n,S):"0"}}}k_.exports=mM;k_.exports.default=mM;var bM=k_.exports;const WF=ul(bM);var A_={exports:{}},__={exports:{}};function xM(S){return S.substring(0,S.indexOf("."))}__.exports=xM;__.exports.default=xM;var iN=__.exports;const sN=y_,oN=iN,cN=["5","6","7","8","9"];function yM(S){if(S.match(/\.9+$/))return sN(oN(S),"1");S[0]==="+"&&(S=S.substring(1));const n=S.length;let e="";const i=S[S.length-1];if(cN.includes(i)){let a;for(a=n-2;a>=0;a--){const s=S[a];if(s==="."||s==="-")continue;const o=Number(s)+1;if(o===10)e="0"+e;else{e=o+e;break}}a>0&&(e=S.substring(0,a)+e)}else e=S.substring(0,n-1);return e[e.length-1]==="."&&(e=e.substring(0,e.length-1)),e.indexOf(".")>-1&&(e=e.replace(/0+$/,"")),e}A_.exports=yM;A_.exports.default=yM;var lN=A_.exports;const I7=$v,T7=y_,$F=bM,uN=lN;function wM(S,n,{max_decimal_digits:e=100,ellipsis:i=!1}={}){S[0]==="0"&&(S=S.substring(1)),n[0]==="0"&&(n=n.substring(1));const a=S.indexOf("."),s=n.indexOf("."),o=a===-1?S.length:a,h=s===-1?0:n.length-1-s;let f=!1;S=S.replace(/\./,""),n=n.replace(/\./,"");const d=S.length;let p="",g="",x,w=-1*h,_=0;for(let P=0;P<d;P++){const M=S[P];if(p+=M,x=I7(p,n),x===">"){let F=1,k=T7(n,n),O=n;for(;I7(k,p)!==">";)F++,O=k,k=T7(k,n);if(F=F.toString(),g!=="")for(let v=F.length;v<=_;v++)g+="0";g+=F,p=$F(p,O),_=0}else if(x==="<"){g===""&&w++,_++;continue}else if(x==="="){if(g!=="")for(let F=0;F<_;F++)g+="0";g+="1",p="0",_=0}}if(p.match(/^0+$/g))x==="<"&&(g+=p.substring(0,p.length-1));else{const P={},M=o-w,F=g.length,k=M-F+e+1;g===""&&(_=0);for(let O=0;O<k;O++){if(p+="0",i)if(p in P){if(P[p]++,P[p]>3){g+="...",f=!0;break}}else P[p]=1;const v=I7(p,n);if(v===">"){let R=1,G=T7(n,n),j=n;for(;I7(G,p)!==">";)R++,j=G,G=T7(G,n);R=R.toString();for(let U=R.length;U<=_;U++)g+="0";if(g+=R,p=$F(p,j),p==="0")break;_=0}else if(v==="<"){_++;continue}else if(v==="="){for(let R=0;R<_;R++)g+="0";g+="1",_=0;break}}}const A=o-w,T=g.length;let E;if(A===T)E=0;else if(A<0)g="0."+"0".repeat(Math.abs(A))+g,E=T-A;else if(A>T){for(let P=T;P<A;P++)g+="0";E=0}else A<T?(g=g.substring(0,A)+"."+g.substring(A),E=T-A):A===0&&(g="0."+g,E=T);if(g=g.replace(/^0+/,""),g=g.replace(/\.\d+0+$/,""),!f){const P=E-e;P>0&&(g=uN(g.substring(0,g.length-P+1)))}return g[0]==="."&&(g="0"+g),g}S_.exports=wM;S_.exports.default=wM;var hN=S_.exports;const qF=gM,VF=O5,fN=hN;function vM(S,n,e){if(S=VF(S),n=VF(n),n==="0")throw new Error("[preciso] division by zero");if(S===""||S==="0")return"0";const i=S[0]!=="-",a=n[0]!=="-",s=i!==a?"-":"";return i||(S=qF(S)),a||(n=qF(n)),s+fN(S,n,e)}w_.exports=vM;w_.exports.default=vM;var dN=w_.exports;const pN=ul(dN);var C_={exports:{}},I_={exports:{}};const{MAX_SAFE_INTEGER_LENGTH:gN}=b_,mN=15;function SM(S,n){if(S==="0"||n==="0")return"0";const e=S.indexOf("."),i=n.indexOf("."),a=e===-1?S.length:e,s=i===-1?n.length:i,o=a+s,h=e===-1?0:S.length-1-e,f=i===-1?0:n.length-1-i,d=h+f;if(d===0&&o<gN)return(Number(S)*Number(n)).toFixed(0);const p=S.replace(".",""),g=n.replace(".",""),x=p.length,w=g.length,_=[];let A=x;for(;A>=0;){const O=A,v=A-=mN,R=p.substring(v,O);_.push([Number(R),R.length])}const T=[],E=[];for(let O=0,v=w-1;v>=0;v--,O++){const R=g[v],G=Number(R);let j=0,U="";const N=_.length-1;_.forEach(([Z,V],B)=>{let lt=(j+G*Z).toString();const mt=lt.length;if(mt>V&&B!==N){const ut=-1*V;U=lt.slice(ut)+U,j=Number(lt.slice(0,ut))}else{const ut=V-mt;for(let ft=0;ft<ut;ft++)lt="0"+lt;j=0,U=lt+U}}),U+="0".repeat(O),T.push(U),E.push([Array.from(U).map(Z=>Number(Z)),U.length])}const P=T.length,M=E[E.length-1][1]+P;let F="",k=0;for(let O=0;O<M;O++){let v=k;const R=Math.min(O,P-1);for(let G=0;G<=R;G++){const[j,U]=E[G],N=U-1-O;N>=0&&(v+=j[N])}v>=10?(v=v.toString(),F=v[v.length-1]+F,k=Number(v.slice(0,-1))):(F=v+F,k=0)}if(d===0)F=F.replace(/^0+/,"");else{const O=F.length-d;F=F.substring(0,O)+"."+F.substring(O),F=F.replace(/^0+/,""),F=F.replace(/\.?0+$/,""),F[0]==="."&&(F="0"+F)}return F}I_.exports=SM;I_.exports.default=SM;var bN=I_.exports;const KF=gM,YF=O5,xN=$v,yN=bN;function kM(S,n){S=YF(S),n=YF(n);const e=S[0]!=="-",i=n[0]!=="-",a=e!==i?"-":"";if(S=KF(S),n=KF(n),xN(S,n)==="<"){const o=S;S=n,n=o}return a+yN(S,n)}C_.exports=kM;C_.exports.default=kM;var wN=C_.exports;const Fk=ul(wN);var AM={exports:{}};(function(S,n){(function(e,i){S.exports=i()})(typeof self<"u"?self:h_,function(){return function(e){var i={};function a(s){if(i[s])return i[s].exports;var o=i[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,a),o.l=!0,o.exports}return a.m=e,a.c=i,a.d=function(s,o,h){a.o(s,o)||Object.defineProperty(s,o,{enumerable:!0,get:h})},a.r=function(s){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},a.t=function(s,o){if(1&o&&(s=a(s)),8&o||4&o&&typeof s=="object"&&s&&s.__esModule)return s;var h=Object.create(null);if(a.r(h),Object.defineProperty(h,"default",{enumerable:!0,value:s}),2&o&&typeof s!="string")for(var f in s)a.d(h,f,(function(d){return s[d]}).bind(null,f));return h},a.n=function(s){var o=s&&s.__esModule?function(){return s.default}:function(){return s};return a.d(o,"a",o),o},a.o=function(s,o){return Object.prototype.hasOwnProperty.call(s,o)},a.p="",a(a.s=1)}([function(e,i,a){const s=a(5);e.exports=function(o,h,f){const d=f&&f.debug||!1,p=f&&f.startIndex||0;d&&console.log("starting findTag with",h," and ",f);const g=s(o,`<${h}[ >]`,p);if(d&&console.log("start:",g),g===-1)return;const x=g+h.length+s(o.slice(g+h.length),"[ /]"+h+">",0)+1+h.length+1;if(d&&console.log("end:",x),x===-1)return;const w=o.slice(g,x);return{inner:w.slice(w.indexOf(">")+1,w.lastIndexOf("<")),outer:w,start:g,end:x}}},function(e,i,a){var s=a(2),o=a(0),h=a(6),f=a(12).default,d=a(7),p=a(8),g=(p.ARRAY_TYPE,p.EXCLUDED_FORMATS),x=p.BYTES_PER_VALUE,w=p.DATA_VIEW_READER_NAME,_=p.FORMATS,A=p.HASHED_FIELDS,T=p.NUM_FIELDS,E=(p.NUM_HASHED_FIELDS,p.UNSUPPORTED_MSG),P=_.ESRI_WKT,M=_.GEOSERVER,F=_.MAPFILE,k=_.MAPNIK,O=_.OGC_GML,v=_.OGC_XML,R=_.OGC_WKT,G=_.POSTGIS,j=_.PROJ_4,U=_.PROJ_4_JS,N=a(9),Z=new DataView(N),V=a(11).hash,B=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"];function J(ut){return function(ft){return!(!(ft=ft.trim()).startsWith("PROJCS[")&&!ft.startsWith("GEOGCS["))&&B.some(function(tt){return ft.includes(tt)})}(ut)?ut.includes("AUTHORITY")?R:P:ut.includes("gml:ProjectedCRS")||ut.includes("gml:GeodeticCRS")||ut.includes("gml:GeographicCRS")?ut.includes("gml:srsID")?v:O:ut.startsWith("+proj=")?j:ut.startsWith('proj4.defs("EPSG:')?U:/^\d{1,6}\=(PROJCS|GEOGCS)/.test(ut)?M:ut.startsWith("PROJECTION")&&ut.endsWith("END")?F:ut.endsWith("</Map>")?k:ut.startsWith("INSERT")?G:"SOMETHING ELSE"}function lt(ut,ft,tt){tt&&console.log("looking up "+ft);var et=V(ut);tt&&console.log("hashed:",et);var St=A.indexOf(ft)+1;tt&&console.log("offset:",St);for(var _t=St*x;_t<N.byteLength;_t+=T*x)if(et===Z[w](_t,!0))return Z[w](_t-St*x,!0)}function mt(ut,ft){var tt=!(!ft||!ft.debug)&&ft.debug,et=J(ut);if(tt&&console.log("dataType:",et),tt&&console.log("EXCLUDED_FORMATS:",g),g.includes(et.toLowerCase()))throw new Error(E.replace("{}",et));if(et===R){var St=f(ut);if(tt&&console.log("parsed:",St),St.AUTHORITY){var _t=St.AUTHORITY;return Number(_t.epsg||_t.EPSG)}}else{if(et==P){var Gt=f(ut);if(tt&&console.log("parsed:",Gt),Gt.name.match(/^WGS_1984_UTM_Zone_\d{1,2}(N|S)$/)){var Wt=Gt.name.split("_").pop(),Lt=Wt.substring(0,Wt.length-1),Qt=Wt.substr(-1)=="N"?6:7;return Number.parseInt("32"+Qt+Lt)}return lt(ut=d(ut),P,!1)}if(et===O){var he=o(ut,"gml:identifier",{debug:tt}).inner;return Number(he.replace("urn:ogc:def:crs:EPSG::",""))}if(et===v)return Number(s(ut,["gml:srsID","gml:name"],{debug:tt}).inner);if(et===j){if(ut.startsWith("+proj=utm")){var z=ut.split(" ").find(function(Pt){return Pt.startsWith("+zone=")}).split("=")[1],Y=ut.includes("+south")?"7":"6";return Number.parseInt("32"+Y+z)}return lt(ut,j)}if(et===U)return Number(ut.substring(17,ut.indexOf('"',17)));if(et===M)return Number(ut.match(/^\d{1,6}/)[0]);if(et===F){if(ut.includes("init=epsg:"))return Number.parseInt(/("init\=epsg:)(\d{1,10})(")/.exec(ut)[2]);if(ut.includes('"proj=utm"')){var at=/("zone\=)(\d{1,2})(")/.exec(ut)[2],Tt=ut.includes('"south"')?"7":"6";return Number.parseInt("32"+Tt+at)}return lt(ut,F)}if(et===k){var Ot=o(ut,"Map");return mt(h(Ot.outer,"srs"))}if(et===G)return Number(ut.substring(ut.indexOf("values (")+8,ut.indexOf("EPSG")-3).trim())}}e.exports!==void 0&&(e.exports=mt),typeof window<"u"?window.getEPSGCode=mt:typeof self<"u"&&(self.getEPSGCode=mt)},function(e,i,a){const s=a(3);e.exports=function(o,h,f){const d=f&&f.debug||!1,p=s(o,h,{debug:d,returnOnFirst:!0});return Array.isArray(p)&&p.length===1?p[0]:void 0}},function(e,i,a){const s=a(4);e.exports=function(o,h,f){const d=f&&f.debug||!1,p=f&&f.returnOnFirst||!1;let g=s(o,h.shift(),{debug:d});d&&console.log("first tags are:",g);for(let x=0;x<h.length;x++){const w=h[x];let _=[];for(let A=0;A<g.length;A++){const T=g[A],E=s(T.outer,w,{debug:d,startIndex:1});if(E.length>0){if(E.forEach(P=>{P.start+=T.start,P.end+=T.start}),p&&x===h.length-1)return[E[0]];_=_.concat(E)}}g=_}return g}},function(e,i,a){const s=a(0);e.exports=function(o,h,f){const d=[],p=f&&f.debug||!1;let g,x=f&&f.startIndex||0;for(;g=s(o,h,{debug:p,startIndex:x});)x=g.end,d.push(g);return d}},function(e,i){e.exports=function(a,s,o){const h=new RegExp(s).exec(a.slice(o));return h?o+h.index:-1}},function(e,i){e.exports=function(a,s,o){const h=o&&o.debug||!1;h&&console.log("getting "+s+" in "+a);const f=typeof a=="object"?a.outer:a,d=`${s}\\="(.*)"`;h&&console.log("pattern:",d);const p=new RegExp(d).exec(f);if(p)return p[1]}},function(e,i){e.exports=function(a){return a=(a=a.replace('DATUM["D_','DATUM["')).replace(/\.\d{16,}/g,function(s){return s.substr(0,16)})}},function(e,i){var a=["esriwkt","mapfile","proj4"],s=a,o=[];s.includes("esriwkt")||o.push("esriwkt"),s.includes("mapfile")||o.push("mapfile"),s.includes("proj4")||(o.push("mapnik"),o.push("proj4")),o.sort();var h=s.length,f=h+1,d=Int16Array;e.exports={ARRAY_TYPE:d,DATA_VIEW_READER_NAME:"getInt16",BYTES_PER_VALUE:2,DEFAULT_HASHED_FIELDS:a,EXCLUDED_FORMATS:o,FORMATS:{ESRI_WKT:"esriwkt",GEOSERVER:"geoserver",MAPFILE:"mapfile",MAPNIK:"mapnik",OGC_GML:"gml",OGC_XML:"xml",OGC_WKT:"wkt",POSTGIS:"postgis",PROJ_4:"proj4",PROJ_4_JS:"js"},HASHED_FIELDS:s,NUM_HASHED_FIELDS:h,NUM_FIELDS:f,UNSUPPORTED_MSG:"[get-epsg-code] {} format not supported"}},function(e,i,a){e.exports=a(10)("")},function(e,i,a){e.exports=function(s){for(var o=typeof window<"u"&&typeof window.atob=="function"?window.atob(s):Buffer.from(s,"base64").toString("binary"),h=new Uint8Array(o.length),f=0;f<o.length;++f)h[f]=o.charCodeAt(f);return h.buffer}},function(e,i){e.exports={hash:function(a){var s,o=0;if((a=(a=a.trim()).replace(/  /g," ")).length===0)return o;for(a.length,s=0;s<a.length;s++)o=(o<<5)-o+a.charCodeAt(s),o|=0;return o=Math.round(o/Math.pow(2,16))}}},function(e,i,a){a.r(i);var s=function(A){return new g(A).output()},o=/\s/,h=/[A-Za-z]/,f=/[A-Za-z84]/,d=/[,\]]/,p=/[\d\.E\-\+]/;function g(A){if(typeof A!="string")throw new Error("not a string");this.text=A.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=1}function x(A,T,E){Array.isArray(T)&&(E.unshift(T),T=null);var P=T?{}:A,M=E.reduce(function(F,k){return w(k,F),F},P);T&&(A[T]=M)}function w(A,T){if(Array.isArray(A)){var E,P=A.shift();if(P==="PARAMETER"&&(P=A.shift()),A.length===1)return Array.isArray(A[0])?(T[P]={},void w(A[0],T[P])):void(T[P]=A[0]);if(A.length)if(P!=="TOWGS84")switch(Array.isArray(P)||(T[P]={}),P){case"UNIT":case"PRIMEM":case"VERT_DATUM":return T[P]={name:A[0].toLowerCase(),convert:A[1]},void(A.length===3&&w(A[2],T[P]));case"SPHEROID":case"ELLIPSOID":return T[P]={name:A[0],a:A[1],rf:A[2]},void(A.length===4&&w(A[3],T[P]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return A[0]=["name",A[0]],void x(T,P,A);default:for(E=-1;++E<A.length;)if(!Array.isArray(A[E]))return w(A,T[P]);return x(T,P,A)}else T[P]=A;else T[P]=!0}else T[A]=!0}g.prototype.readCharicter=function(){var A=this.text[this.place++];if(this.state!==4)for(;o.test(A);){if(this.place>=this.text.length)return;A=this.text[this.place++]}switch(this.state){case 1:return this.neutral(A);case 2:return this.keyword(A);case 4:return this.quoted(A);case 5:return this.afterquote(A);case 3:return this.number(A);case-1:return}},g.prototype.afterquote=function(A){if(A==='"')return this.word+='"',void(this.state=4);if(d.test(A))return this.word=this.word.trim(),void this.afterItem(A);throw new Error(`havn't handled "`+A+'" in afterquote yet, index '+this.place)},g.prototype.afterItem=function(A){return A===","?(this.word!==null&&this.currentObject.push(this.word),this.word=null,void(this.state=1)):A==="]"?(this.level--,this.word!==null&&(this.currentObject.push(this.word),this.word=null),this.state=1,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},g.prototype.number=function(A){if(!p.test(A)){if(d.test(A))return this.word=parseFloat(this.word),void this.afterItem(A);throw new Error(`havn't handled "`+A+'" in number yet, index '+this.place)}this.word+=A},g.prototype.quoted=function(A){A!=='"'?this.word+=A:this.state=5},g.prototype.keyword=function(A){if(f.test(A))this.word+=A;else{if(A==="["){var T=[];return T.push(this.word),this.level++,this.root===null?this.root=T:this.currentObject.push(T),this.stack.push(this.currentObject),this.currentObject=T,void(this.state=1)}if(!d.test(A))throw new Error(`havn't handled "`+A+'" in keyword yet, index '+this.place);this.afterItem(A)}},g.prototype.neutral=function(A){if(h.test(A))return this.word=A,void(this.state=2);if(A==='"')return this.word="",void(this.state=4);if(p.test(A))return this.word=A,void(this.state=3);if(!d.test(A))throw new Error(`havn't handled "`+A+'" in neutral yet, index '+this.place);this.afterItem(A)},g.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(this.state===-1)return this.root;throw new Error('unable to parse string "'+this.text+'". State is '+this.state)};function _(A){return .017453292519943295*A}i.default=function(A){var T=s(A),E=T.shift(),P=T.shift();T.unshift(["name",P]),T.unshift(["type",E]);var M={};return w(T,M),function(F){F.type==="GEOGCS"?F.projName="longlat":F.type==="LOCAL_CS"?(F.projName="identity",F.local=!0):typeof F.PROJECTION=="object"?F.projName=Object.keys(F.PROJECTION)[0]:F.projName=F.PROJECTION,F.UNIT&&(F.units=F.UNIT.name.toLowerCase(),F.units==="metre"&&(F.units="meter"),F.UNIT.convert&&(F.type==="GEOGCS"?F.DATUM&&F.DATUM.SPHEROID&&(F.to_meter=F.UNIT.convert*F.DATUM.SPHEROID.a):F.to_meter=F.UNIT.convert));var k=F.GEOGCS;function O(v){return v*(F.to_meter||1)}F.type==="GEOGCS"&&(k=F),k&&(k.DATUM?F.datumCode=k.DATUM.name.toLowerCase():F.datumCode=k.name.toLowerCase(),F.datumCode.slice(0,2)==="d_"&&(F.datumCode=F.datumCode.slice(2)),F.datumCode!=="new_zealand_geodetic_datum_1949"&&F.datumCode!=="new_zealand_1949"||(F.datumCode="nzgd49"),F.datumCode==="wgs_1984"&&(F.PROJECTION==="Mercator_Auxiliary_Sphere"&&(F.sphere=!0),F.datumCode="wgs84"),F.datumCode.slice(-6)==="_ferro"&&(F.datumCode=F.datumCode.slice(0,-6)),F.datumCode.slice(-8)==="_jakarta"&&(F.datumCode=F.datumCode.slice(0,-8)),~F.datumCode.indexOf("belge")&&(F.datumCode="rnb72"),k.DATUM&&k.DATUM.SPHEROID&&(F.ellps=k.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk"),F.ellps.toLowerCase().slice(0,13)==="international"&&(F.ellps="intl"),F.a=k.DATUM.SPHEROID.a,F.rf=parseFloat(k.DATUM.SPHEROID.rf,10)),k.DATUM&&k.DATUM.TOWGS84&&(F.datum_params=k.DATUM.TOWGS84),~F.datumCode.indexOf("osgb_1936")&&(F.datumCode="osgb36"),~F.datumCode.indexOf("osni_1952")&&(F.datumCode="osni52"),(~F.datumCode.indexOf("tm65")||~F.datumCode.indexOf("geodetic_datum_of_1965"))&&(F.datumCode="ire65"),F.datumCode==="ch1903+"&&(F.datumCode="ch1903"),~F.datumCode.indexOf("israel")&&(F.datumCode="isr93")),F.b&&!isFinite(F.b)&&(F.b=F.a),[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",_],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",_],["x0","false_easting",O],["y0","false_northing",O],["long0","central_meridian",_],["lat0","latitude_of_origin",_],["lat0","standard_parallel_1",_],["lat1","standard_parallel_1",_],["lat2","standard_parallel_2",_],["azimuth","Azimuth"],["alpha","azimuth",_],["srsCode","name"]].forEach(function(v){return R=F,j=(G=v)[0],U=G[1],void(!(j in R)&&U in R&&(R[j]=R[U],G.length===3&&(R[j]=G[2](R[j]))));var R,G,j,U}),F.long0||!F.longc||F.projName!=="Albers_Conic_Equal_Area"&&F.projName!=="Lambert_Azimuthal_Equal_Area"||(F.long0=F.longc),F.lat_ts||!F.lat1||F.projName!=="Stereographic_South_Pole"&&F.projName!=="Polar Stereographic (variant B)"||(F.lat0=_(F.lat1>0?90:-90),F.lat_ts=F.lat1)}(M),M}}])})})(AM);var vN=AM.exports;const SN=ul(vN);var _M={exports:{}},CM={exports:{}};(function(S){function n(){const e=[],i=h=>typeof h=="object"&&Object.keys(h).length===0&&JSON.stringify(h)==="{}",a=h=>{if(h){if(Array.isArray(h))return h.forEach(a);h.default&&(h=h.default),!i(h)&&e.push(h)}};if(Array.from(arguments).forEach(a),e.length===0)throw Error("[proj4-merge] merge called with zero instances of proj4");const[s,...o]=e;return o.forEach(h=>{s.defs(Object.entries(h.defs))}),s}S.exports=n,S.exports.default=n})(CM);var kN=CM.exports,IM={exports:{}};(function(S){function n({bbox:e,reproject:i}){const[a,s,o,h]=e,f=i([a,h]),d=i([o,h]),p=i([a,s]),g=i([o,s]),x=[f,d,p,g],w=x.map(A=>A[0]),_=x.map(A=>A[1]);return[Math.min(...w),Math.min(..._),Math.max(...w),Math.max(..._)]}S.exports=n,S.exports.default=n,typeof window=="object"&&(window.reprojectBoundingBoxPluggable=n),typeof self=="object"&&(self.reprojectBoundingBoxPluggable=n)})(IM);var AN=IM.exports;(function(S){const n=kN,e=iM,i=AN;typeof n!="function"&&console.warn("[reproject-bbox] failed to import proj4-merge");function a({bbox:s,from:o,proj4:h,to:f}){typeof o=="number"&&(o="EPSG:"+o),typeof f=="number"&&(f="EPSG:"+f);const d=[h,e];typeof window=="object"&&window.proj4&&d.push(window.proj4),typeof self=="object"&&self.proj4&&d.push(self.proj4);const g=n(d)(o,f).forward;return i({bbox:s,reproject:g})}S.exports=a,S.exports.default=a,typeof window=="object"&&(window.reprojectBoundingBox=a),typeof self=="object"&&(self.reprojectBoundingBox=a)})(_M);var _N=_M.exports;const CN=ul(_N),ZF=(S,n)=>pN(dM(S.toString(),n.toString()),"2"),Ug=S=>Array.isArray(S),Rr=S=>S!=null&&S!=="",TM=S=>typeof S=="function",K0=S=>typeof S=="object",gv=S=>typeof S=="string",a9=S=>typeof S=="number",IN=S=>gv(S)&&!!S.match(/^[-|+]?[\d\.]+(, ?[-|+]?[\d\.]+){3}$/),QF=S=>K0(S)&&OM(S,["getEast","getNorth","getSouth","getWest"]),TN=(S,n)=>K0(S)&&TM(S[n]),EM=(S,n)=>K0(S)&&K0(S[n]),OM=(S,n)=>n.every(e=>TN(S,e)),EN=(S,n)=>n.every(e=>EM(S,e)),N7=(S,n)=>K0(S)&&S[n]!==void 0&&S[n]!==null,Pk=(S,n)=>n.every(e=>N7(S,e)),E7=S=>Ug(S)&&S.every(a9),ON=S=>Ug(S)&&S.every(gv),FN=S=>typeof obj=="object"&&typeof obj.constructor=="function"||void 0,N2=S=>{if(!S||gv(S)&&S.startsWith("EPSG:"))return S;if(gv(S)&&S.match(/^\d+$/))return"EPSG:"+S;if(a9(S))return"EPSG:"+S;const n=SN(S);return a9(n)?"EPSG:"+n:S};class gc{constructor(n,{srs:e}={}){this.srs=N2(e);let i,a,s,o,h,f,d,p;if(FN()===this.constructor&&({xmin:i,xmax:a,ymin:s,ymax:o}=n,Rr(n.srs)&&(this.srs=N2(n.srs))),IN(n)&&(n=n.split(/, ?/)),Ug(n)&&n.length===4&&E7(n))[i,s,a,o]=n;else if(Ug(n)&&n.length===4&&ON(n))[h,d,f,p]=n,[i,s,a,o]=n.map(g=>Number(g));else if(Ug(n)&&n.length===2&&n.every(Ug)&&n.every(g=>g.length===2&&E7(g)))[[s,i],[o,a]]=n;else if(QF(n))i=n.getWest(),a=n.getEast(),s=n.getSouth(),o=n.getNorth(),Rr(this.srs)||(this.srs="EPSG:4326");else if(Ug(n)&&n.length===2&&n.every(g=>Pk(g,["x","y"])))[{x:i,y:s},{x:a,y:o}]=n;else if(K0(n)&&Pk(n,["x","y"])&&a9(n.x)&&a9(n.y))i=a=n.x,s=o=n.y,N7(n,"spatialReference")&&N7(n.spatialReference,"wkid")&&(Rr(this.srs)||(this.srs=N2(n.spatialReference.wkid)));else if(K0(n)&&Pk(n,["xmin","xmax","ymin","ymax"])){({xmin:i,xmax:a,ymin:s,ymax:o}=n);const g=["srs","crs","proj","projection"];for(let x=0;x<g.length;x++){const w=g[x],_=n[w],A=N2(_);if(A){this.srs=A;break}}!this.srs&&Rr(n.srs)&&(this.srs=n.srs)}else if(Ug(n)&&n.length===2&&E7(n))i=a=n[0],s=o=n[1];else if(K0(n)&&OM(n,["getCoordinates"])){const g=n.getCoordinates();i=a=g[0],s=o=g[1]}else if(K0(n)&&N7(n,"bbox")&&n.bbox.length===4&&E7(n))[i,s,a,o]=n.bbox;else if(EM(n,"_bounds")&&QF(n._bounds)){const{_bounds:g}=n;i=g.getWest(),a=g.getEast(),s=g.getSouth(),o=g.getNorth(),this.srs||(this.srs="EPSG:4326")}else if(K0(n)&&K0(n._bounds)&&EN(n._bounds,["_southWest","_northEast"]))({lat:s,lng:i}=n._bounds._southWest),{lat:o,lng:a}=n._bounds._northEast,Rr(this.srs)||(this.srs="EPSG:4326");else throw new Error("[geo-extent] unknown format");this.xmin=i,this.xmin_str=h||i.toString(),this.ymin=s,this.ymin_str=d||s.toString(),this.xmax=a,this.xmax_str=f||a.toString(),this.ymax=o,this.ymax_str=p||o.toString(),this.width_str=WF(this.xmax_str,this.xmin_str),this.width=Number(this.width_str),this.height_str=WF(this.ymax_str,this.ymin_str),this.height=Number(this.height_str),this.bottomLeft={x:i,y:s},this.bottomRight={x:a,y:s},this.topLeft={x:i,y:o},this.topRight={x:a,y:o},this.leafletBounds=[[this.ymin,this.xmin],[this.ymax,this.xmax]],this.area_str=Fk(this.width_str,this.height_str),this.area=Number(this.area_str),this.perimeter_str=dM(Fk(this.width_str,"2"),Fk(this.height_str,"2")),this.perimeter=Number(this.perimeter_str),this.bbox=[i,s,a,o],this.bbox_str=[this.xmin_str,this.ymin_str,this.xmax_str,this.ymax_str],this.center_str={x:ZF(h||i,f||a),y:ZF(d||s,p||o)},this.center={x:Number(this.center_str.x),y:Number(this.center_str.y)},this.str=this.bbox_str.join(",")}_pre(n,e){if(e=new this.constructor(e),!(!Rr(n.srs)&&!Rr(e.srs))){if(Rr(n.srs)&&!Rr(e.srs))e=new n.constructor({...e,srs:n.srs});else if(!Rr(n.srs)&&Rr(e.srs))n=new n.constructor({...n,srs:e.srs});else if(Rr(n.srs)&&Rr(e.srs)&&n.srs!==e.srs)e=e.reproj(n.srs);else if(!(Rr(n.srs)&&Rr(e.srs)&&n.srs===e.srs))throw"UH OH"}return[n,e]}clone(){return new this.constructor(this)}contains(n){const[e,i]=this._pre(this,n),a=i.xmin>=e.xmin&&i.xmax<=e.xmax,s=i.ymin>=e.ymin&&i.ymax<=e.ymax;return a&&s}crop(n){if(n=new this.constructor(n),this.overlaps(n,{quiet:!0})===!1&&n.overlaps(this,{quiet:!0})===!1)return null;if(n.contains(this))return this.clone();if(n.srs==="EPSG:4326"&&(n.xmin<-180||n.xmax>180)){let P=n.unwrap().map(F=>this.crop(F));if(P=P.filter(Boolean),P.length===0)return null;let M=P[0];for(let F=1;F<P.length;F++)M=M.combine(P[F]);return M}let e=Rr(this.srs)&&Rr(n.srs)?n.reproj(this.srs,{quiet:!0}):n.clone();if(e){if(!this.overlaps(e))return null;const E=Math.max(this.xmin,e.xmin),P=Math.max(this.ymin,e.ymin),M=Math.min(this.xmax,e.xmax),F=Math.min(this.ymax,e.ymax);return new this.constructor([E,P,M,F],{srs:this.srs})}const i=Rr(this.srs)?this.reproj(4326):this,a=Rr(n.srs)?n.reproj(4326):n,[s,o,h,f]=i.bbox,[d,p,g,x]=a.bbox;if(!i.overlaps(a))return null;const w=Math.max(s,d),_=Math.max(o,p),A=Math.min(h,g),T=Math.min(f,x);return new this.constructor([w,_,A,T],{srs:4326}).reproj(this.srs)}combine(n){Rr(this.srs)&&Rr(n.srs)&&(n=n.reproj(this.srs));const e=Math.min(this.xmin,n.xmin),i=Math.max(this.xmax,n.xmax),a=Math.min(this.ymin,n.ymin),s=Math.max(this.ymax,n.ymax);return new this.constructor({xmin:e,xmax:i,ymin:a,ymax:s,srs:this.srs})}equals(n,{digits:e=13,strict:i=!0}={digits:13,strict:!0}){if(n=new this.constructor(n),Rr(this.srs)&&Rr(n.srs))n=n.reproj(this.srs);else if(i&&Rr(this.srs)!==!Rr(this.srs))return!1;const a=this.bbox.map(o=>o.toFixed(e)).join(","),s=n.bbox.map(o=>o.toFixed(e)).join(",");return a===s}overlaps(n,{quiet:e=!1}={quite:!1}){try{const[i,a]=this._pre(this,n),s=a.ymin<=i.ymax&&a.ymax>=i.ymin;return a.xmin<=i.xmax&&a.xmax>=i.xmin&&s}catch(i){if(e)return;throw i}}reproj(n,{quiet:e=!1}={quiet:!1}){if(n=N2(n),Rr(this.srs)&&this.srs===N2(n))return this.clone();if(!Rr(this.srs)){if(e)return;throw new Error(`[geo-extent] cannot reproject ${this.bbox} without a projection set`)}if(this.srs==="EPSG:4326"&&(this.xmin<-180||this.xmax>180))try{const a=this.unwrap().map(o=>o.reproj(n));let s=a[0];for(let o=1;o<a.length;o++)s=s.combine(a[o]);return s}catch(a){if(e)return;throw a}const i=CN({bbox:this.bbox,from:this.srs,to:n});if(i.some(isNaN)){if(e)return;throw new Error(`[geo-extent] failed to reproject ${this.bbox} from ${this.srs} to ${n}`)}return new gc(i,{srs:n})}unwrap(){const{xmin:n,ymin:e,xmax:i,ymax:a,srs:s}=this;if(s!=="EPSG:4326")return[this.clone()];if(n>-180&&i<180)return[this.clone()];if(n<-180&&i>=n+360)return[new this.constructor([-180,e,180,a],{srs:4326})];if(i>180&&n<=i-360)return[new this.constructor([-180,e,180,a],{srs:4326})];let o=[];return n<-180&&o.push(new this.constructor([n+360,e,180,a],{srs:s})),o.push(new this.constructor([n<-180?-180:n,e,i>180?180:i,a],{srs:s})),this.xmax>180&&o.push(new this.constructor([-180,e,i-360,a],{srs:s})),o}asEsriJSON(){return{xmin:this.xmin,ymin:this.ymin,xmax:this.xmax,ymax:this.ymax,spatialReference:{wkid:this.srs}}}asGeoJSON(){const{xmin:n,ymin:e,xmax:i,ymax:a}=this.srs==="EPSG:4326"?this:this.reproj(4326);return{type:"Feature",geometry:{type:"Polygon",coordinates:[[[n,a],[i,a],[i,e],[n,e],[n,a]]]}}}asObj(){const n={};for(let e in this){const i=this[e];TM(i)||(n[e]=i)}return n}}typeof define=="function"&&define.amd&&define(function(){return gc});typeof self=="object"&&(self.GeoExtent=gc);typeof window=="object"&&(window.GeoExtent=gc);var PN=({bbox:S,container:n,debug:e,origin:i,padding:a,scale:s})=>{e&&console.log("[snap-bbox] starting"),e&&console.log("[snap-bbox] bbox:",S),e&&console.log("[snap-bbox] debug:",e),e&&console.log("[snap-bbox] origin:",i),e&&console.log("[snap-bbox] padding:",a),e&&console.log("[snap-bbox] scale:",s);const[o,h]=i;e&&console.log("[snap-bbox] originX:",o),e&&console.log("[snap-bbox] originY:",h);const[f,d]=a||[0,0];e&&console.log("[snap-bbox] padX:",f),e&&console.log("[snap-bbox] padY:",d);const[p,g]=s;e&&console.log("[snap-bbox] scale_x:",p),e&&console.log("[snap-bbox] scale_y:",g);const x=Math.sign(p),w=Math.sign(g);e&&console.log("[snap-bbox] sign_scale_x:",x),e&&console.log("[snap-bbox] sign_scale_y:",w);const[_,A,T,E]=S;e&&console.log("[snap-bbox] xmin:",_),e&&console.log("[snap-bbox] ymin:",A),e&&console.log("[snap-bbox] xmax:",T),e&&console.log("[snap-bbox] ymax:",E);const P=(_-o)/p,M=(T-o)/p,F=(E-h)/g,k=(A-h)/g;e&&console.log("[snap-bbox] left:",P),e&&console.log("[snap-bbox] right:",M),e&&console.log("[snap-bbox] top:",F),e&&console.log("[snap-bbox] bottom:",k);let O=Math.floor(P)-f,v=Math.ceil(M)+f,R=Math.floor(F)-d,G=Math.ceil(k)+d;if(e&&console.log("[snap-bbox] left_int:",O),e&&console.log("[snap-bbox] right_int:",v),e&&console.log("[snap-bbox] top_int:",R),e&&console.log("[snap-bbox] bottom_int:",G),n){e&&console.log("[snap-bbox] container:",n);const N=(n[0]-o)/p,Z=(n[2]-o)/p,V=(n[3]-h)/g,B=(n[1]-h)/g;e&&console.log("[snap-bbox] min_left:",N),e&&console.log("[snap-bbox] max_right:",Z),e&&console.log("[snap-bbox] min_top:",V),e&&console.log("[snap-bbox] max_bottom:",B);const J=Math.ceil(N),lt=Math.floor(Z),mt=Math.ceil(V),ut=Math.floor(B);e&&console.log("[snap-bbox] min_left_int:",J),e&&console.log("[snap-bbox] max_right_int:",lt),e&&console.log("[snap-bbox] min_top_int:",mt),e&&console.log("[snap-bbox] max_bottom_int:",ut),O=Math.max(O,J),v=Math.min(v,lt),R=Math.max(R,mt),G=Math.min(G,ut),e&&console.log("[snap-bbox] after containment, left_int:",O),e&&console.log("[snap-bbox] after containment, right_int:",v),e&&console.log("[snap-bbox] after containment, top_int:",R),e&&console.log("[snap-bbox] after containment, bottom_int:",G)}const j=[O===0?0:O,G===0?0:G,v===0?0:v,R===0?0:R];return e&&console.log("[snap-bbox] bbox_in_grid_cells:",j),{bbox_in_coordinate_system:[o+O*p,h+G*g,o+v*p,h+R*g],bbox_in_grid_cells:j}};const MN=ul(PN),j2=4326,DN=new Set([3785,3857,4269,4326,900913,102113]),Mk=1e3,Dk=1e3,Rk=[0,0],Ai=S=>console.log("[georaster-layer-for-leaflet] ",S),Lk=S=>{var n,e,i,a;return S===lr.CRS.Simple||!S.code&&S.infinite&&(S==null||(n=S.transformation)===null||n===void 0?void 0:n._a)===1&&(S==null||(e=S.transformation)===null||e===void 0?void 0:e._b)===0&&(S==null||(i=S.transformation)===null||i===void 0?void 0:i._c)===-1&&(S==null||(a=S.transformation)===null||a===void 0?void 0:a._d)===0};BR||console.warn("[georaster-layer-for-leaflet] can't find Leaflet.  If you are loading via <script>, please add the GeoRasterLayer script after the LeafletJS script.");const RN=(S,n)=>S.map((e,i)=>[e,n[i]]),T_=lr.GridLayer.extend({options:{updateWhenIdle:!0,updateWhenZooming:!1,keepBuffer:25,resolution:2**5,debugLevel:0},initialize:function(S){try{if(S.georasters)this.georasters=S.georasters;else if(S.georaster)this.georasters=[S.georaster];else throw new Error("You initialized a GeoRasterLayer without a georaster or georasters value.");this.sourceType==="url"&&(S.updateWhenIdle=!1,S.updateWhenZooming=!0,S.keepBuffer=16),S.resampleMethod&&(this.resampleMethod=S.resampleMethod);const n=["height","width","noDataValue","palette","pixelHeight","pixelWidth","projection","sourceType","xmin","xmax","ymin","ymax"];this.georasters.length>1?n.forEach(i=>{if(this.same(this.georasters,i))this[i]=this.georasters[0][i];else throw new Error("all GeoRasters must have the same "+i)}):this.georasters.length===1&&n.forEach(i=>{this[i]=this.georasters[0][i]}),this._cache={innerTile:{},tile:{}},this.extent=new gc([this.xmin,this.ymin,this.xmax,this.ymax],{srs:this.projection}),this.ratio=this.height/this.width,this.debugLevel=S.debugLevel,this.debugLevel>=1&&Ai({options:S}),this.georasters.every(i=>typeof i.values=="object")&&(this.rasters=this.georasters.reduce((i,a)=>{if(a.values)return i=i.concat(a.values),i},[]),this.debugLevel>1&&console.log("this.rasters:",this.rasters)),S.mask&&(typeof S.mask=="string"?this.mask=fetch(S.mask).then(i=>i.json()):typeof S.mask=="object"&&(this.mask=Promise.resolve(S.mask)),this.mask_srs=S.mask_srs||"EPSG:4326"),this.mask_strategy=S.mask_strategy||"outside",this.chroma=K_,this.scale=K_.scale(),lr.Util.setOptions(this,S);const e=this.getTileSize();if(this.tileHeight=e.y,this.tileWidth=e.x,this.georasters.length>=4&&!S.pixelValuesToColorFn)throw"you must pass in a pixelValuesToColorFn if you are combining rasters";if(this.numBands=this.georasters.reduce((i,a)=>i+a.numberOfRasters,0),this.debugLevel>1&&console.log("this.numBands:",this.numBands),this.currentStats={mins:new Array(this.numBands),maxs:new Array(this.numBands),ranges:new Array(this.numBands)},[1,2,3].includes(this.georasters.length)&&this.georasters.every(i=>i.sourceType==="url")&&this.georasters.every(i=>i.numberOfRasters===1)&&!S.pixelValuesToColorFn)try{this.calcStats=!0,this._dynamic=!0,this.options.pixelValuesToColorFn=i=>{if(i.every(s=>s!==void 0&&s!==this.noDataValue))return this.rawToRgb(i)}}catch(i){console.error("[georaster-layer-for-leaflet]",i)}this.checkIfYCbCr=new Promise(async i=>{if(this.options.pixelValuesToColorFn)return i(!0);if(this.georasters.length===1&&this.georasters[0].numberOfRasters===3){var a,s;const o=await((a=this.georasters[0]._geotiff)===null||a===void 0?void 0:a.getImage());(o==null||(s=o.fileDirectory)===null||s===void 0?void 0:s.PhotometricInterpretation)===6&&(this.options.pixelValuesToColorFn=h=>{const f=Math.round(h[0]+1.402*(h[2]-128)),d=Math.round(h[0]-.34414*(h[1]-128)-.71414*(h[2]-128)),p=Math.round(h[0]+1.772*(h[1]-128));return`rgb(${f},${d},${p})`})}return i(!0)})}catch(n){console.error("ERROR initializing GeoTIFFLayer",n)}},getRasters:function(S){const{innerTileTopLeftPoint:n,heightOfSampleInScreenPixels:e,widthOfSampleInScreenPixels:i,zoom:a,numberOfSamplesAcross:s,numberOfSamplesDown:o,ymax:h,xmin:f}=S;this.debugLevel>=1&&console.log("starting getRasters with options:",S);const d=(w,_)=>{const A=n.x+_*i,T=n.y+w*e,E=lr.point(A,T);this.debugLevel>=1&&Ai({mapPoint:E});const{lat:P,lng:M}=this.getMap().unproject(E,a);if(this.projection===j2)return{y:Math.round((h-P)/this.pixelHeight),x:Math.round((M-f)/this.pixelWidth)};if(this.getProjector()){const[F,k]=this.getProjector().inverse([M,P]);return(F===1/0||k===1/0)&&this.debugLevel>=1&&console.error("projector converted",[M,P],"to",[F,k]),{y:Math.round((h-k)/this.pixelHeight),x:Math.round((F-f)/this.pixelWidth)}}else return null},p=d(0,0),g=d(o,s),x={bottom:g==null?void 0:g.y,height:o,left:p==null?void 0:p.x,right:g==null?void 0:g.x,top:p==null?void 0:p.y,width:s};if(!Object.values(x).every(w=>w!==void 0&&isFinite(w)))console.error("getRasters failed because not all values are finite:",x);else return Promise.all(this.georasters.map(w=>w.getValues({...x,resampleMethod:this.resampleMethod||"nearest"}))).then(w=>w.reduce((_,A)=>(_=_.concat(A),_),[]))},createTile:function(S,n){const e=lr.DomUtil.create("canvas","leaflet-tile");e.style.boxSizing="content-box",e.style.visibility="hidden";const i=e.getContext("2d");return this.drawTile({tile:e,coords:S,context:i,done:n}),e},drawTile:function({tile:S,coords:n,context:e,done:i}){try{const{debugLevel:a=0}=this;a>=2&&console.log("starting drawTile with",{tile:S,coords:n,context:e,done:i});let s;const{z:o}=n,h=[n.x,n.y,n.z].join(",");a>=2&&Ai({cacheKey:h});const f=this.getMapCRS();a>=2&&Ai({mapCRS:f});const d=Lk(f);a>=2&&Ai({inSimpleCRS:d});const{rasters:p,xmin:g,xmax:x,ymin:w,ymax:_}=this,A=this.height,T=this.width,E=new gc(this.getBounds(),{srs:d?"simple":4326});a>=2&&Ai({extentOfLayer:E});const P=d?E.height/A:this.pixelHeight,M=d?E.width/T:this.pixelWidth;a>=2&&Ai({pixelHeight:P,pixelWidth:M});const{xMinOfLayer:F,xMaxOfLayer:k,yMinOfLayer:O,yMaxOfLayer:v}=this,R=this._tileCoordsToBounds(n);a>=2&&Ai({boundsOfTile:R});const{code:G}=f;a>=2&&Ai({code:G});const j=new gc(R,{srs:d?"simple":4326});a>=2&&Ai({extentOfTile:j}),a>=4&&(this._cache.tile[h]||(this._cache.tile[h]=lr.rectangle(j.leafletBounds,{fillOpacity:0}).addTo(this.getMap()).bindTooltip(h,{direction:"center",permanent:!0})));const U=d?j:j.reproj(G);a>=2&&Ai({extentOfTileInMapCRS:U});let N=U.crop(d?E:this.extent);if(a>=2&&console.log("[georaster-layer-for-leaflet] extentOfInnerTileInMapCRS",N.reproj(d?"simple":4326)),a>=2&&Ai({coords:n,extentOfInnerTileInMapCRS:N,extent:this.extent}),a>=4&&!this._cache.innerTile[h]){const Ye=d?N:N.reproj(4326);this._cache.innerTile[h]=lr.rectangle(Ye.leafletBounds,{color:"#F00",dashArray:"5, 10",fillOpacity:0}).addTo(this.getMap())}const Z=U.width/this.tileWidth,V=U.height/this.tileHeight;a>=3&&Ai({heightOfScreenPixelInMapCRS:V,widthOfScreenPixelInMapCRS:Z});const B=d?N:N.reproj(this.projection),J=MN({bbox:B.bbox,container:d?[E.xmin,E.ymin-.25*P,E.xmax+.25*M,E.ymax]:[g,w-.25*P,x+.25*M,_],debug:a>=2,origin:d?[E.xmin,E.ymax]:[g,_],scale:[M,-P]}),lt=new gc(J.bbox_in_coordinate_system,{srs:d?"simple":this.projection}),mt=J.bbox_in_grid_cells,ut=Math.abs(mt[2]-mt[0]),ft=Math.abs(mt[3]-mt[1]),tt=Math.ceil(B.width/M),et=Math.ceil(B.height/P),{resolution:St}=this.options,_t=d?E:this.extent,Gt=B.crop(_t);let Wt=1,Lt=1;if(Gt!==null){const cn=(d?Gt:Gt.reproj(G)).crop(U);cn!==null&&(Wt=Math.ceil(St*(cn.width/U.width)),Lt=Math.ceil(St*(cn.height/U.height)))}const Qt=tt<Wt,he=et<Lt,z=Qt?ut:Wt,Y=he?ft:Lt;a>=3&&console.log("[georaster-layer-for-leaflet] extent of inner tile before snapping "+N.reproj(d?"simple":4326).bbox.toString());{const Ye=new gc(B.bbox),cn=new gc(lt.bbox),Pe=new gc(N.bbox);if(Ye.width!==0&&Ye.height!==0){let Bn=(cn.xmin-Ye.xmin)/Ye.width*Pe.width,Lr=(cn.ymin-Ye.ymin)/Ye.height*Pe.height,dr=(cn.xmax-Ye.xmax)/Ye.width*Pe.width,Nr=(cn.ymax-Ye.ymax)/Ye.height*Pe.height;Qt||(Bn=Math.max(Bn,0),dr=Math.min(dr,0)),he||(Lr=Math.max(Lr,0),Nr=Math.min(Nr,0));const mn=[Pe.xmin+Bn,Pe.ymin+Lr,Pe.xmax+dr,Pe.ymax+Nr];N=new gc(mn,{srs:N.srs})}}if(a>=4&&!this._cache.innerTile[h]){const Ye=d?N:N.reproj(4326);this._cache.innerTile[h]=lr.rectangle(Ye.leafletBounds,{color:"#F00",dashArray:"5, 10",fillOpacity:0}).addTo(this.getMap())}a>=3&&console.log("[georaster-layer-for-leaflet] extent of inner tile after snapping "+N.reproj(d?"simple":4326).bbox.toString());const at={left:Math.round((N.xmin-U.xmin)/Z),right:Math.round((U.xmax-N.xmax)/Z),top:Math.round((U.ymax-N.ymax)/V),bottom:Math.round((N.ymin-U.ymin)/V)};a>=3&&Ai({padding:at});const Tt=this.tileHeight-at.top-at.bottom,Ot=this.tileWidth-at.left-at.right;if(a>=3&&Ai({innerTileHeight:Tt,innerTileWidth:Ot}),a>=4){const Ye=U.xmin+at.left*Z,cn=U.ymin+at.bottom*V,Pe=U.xmax-at.right*Z,Bn=U.ymax-at.top*V;Ai({xMinOfInnerTileInMapCRS:Ye,yMinOfInnerTileInMapCRS:cn,xMaxOfInnerTileInMapCRS:Pe,yMaxOfInnerTileInMapCRS:Bn})}const Pt={left:Math.max(at.left,0),right:Math.max(at.right,0),top:Math.max(at.top,0),bottom:Math.max(at.bottom,0)},$t=this.tileHeight-Pt.top-Pt.bottom,me=this.tileWidth-Pt.left-Pt.right;S.style.paddingTop=Pt.top+"px",S.style.paddingRight=Pt.right+"px",S.style.paddingBottom=Pt.bottom+"px",S.style.paddingLeft=Pt.left+"px",S.height=$t,S.style.height=$t+"px",S.width=me,S.style.width=me+"px",a>=3&&console.log("setting tile height to "+$t+"px"),a>=3&&console.log("setting tile width to "+me+"px");const $e=Tt/Y,ue=Math.ceil($e),Ht=Ot/z,Se=Math.ceil(Ht),Qe=this.getMap(),On=this.getTileSize(),je=n.scaleBy(On);a>=4&&Ai({tileNwPoint:je});const fe=je.x+at.left,jn=je.y+at.top,Fn={x:fe,y:jn};return a>=4&&Ai({innerTileTopLeftPoint:Fn}),setTimeout(async()=>{try{let Ye=null;if(!p&&(Ye=await this.getRasters({innerTileTopLeftPoint:Fn,heightOfSampleInScreenPixels:$e,widthOfSampleInScreenPixels:Ht,zoom:o,pixelHeight:P,pixelWidth:M,numberOfSamplesAcross:z,numberOfSamplesDown:Y,ymax:_,xmin:g}),Ye&&this.calcStats)){const{noDataValue:cn}=this;for(let Pe=0;Pe<Ye.length;Pe++){let Bn=this.currentStats.mins[Pe],Lr=this.currentStats.maxs[Pe];const dr=Ye[Pe];for(let Nr=0;Nr<dr.length;Nr++){const mn=dr[Nr];for(let Oi=0;Oi<mn.length;Oi++){const ei=mn[Oi];ei!==cn&&((Bn===void 0||ei<Bn)&&(Bn=ei),(Lr===void 0||ei>Lr)&&(Lr=ei))}}this.currentStats.mins[Pe]=Bn,this.currentStats.maxs[Pe]=Lr,this.currentStats.ranges[Pe]=Lr-Bn}if(this._dynamic)try{const Pe=RF.default||RF;this.rawToRgb=Pe({format:"string",flip:this.currentStats.mins.length===1,ranges:RN(this.currentStats.mins,this.currentStats.maxs),round:!0})}catch(Pe){console.error(Pe)}}await this.checkIfYCbCr;for(let cn=0;cn<Y;cn++){const Pe=jn+(cn+.5)*$e,Bn=lr.point(fe,Pe),{lat:Lr}=Qe.unproject(Bn,o);if(Lr>O&&Lr<v){const dr=Math.round(cn*$e)+Math.min(at.top,0);let Nr=0;(d||this.projection===j2)&&(Nr=Math.floor((v-Lr)/P));for(let mn=0;mn<z;mn++){const Oi=lr.point(fe+(mn+.5)*Ht,Pe),{lng:ei}=Qe.unproject(Oi,o);if(ei>F&&ei<k){let jr=0;if(d||this.projection===j2)jr=Math.floor((ei-F)/M);else if(this.getProjector()){const en=this.getProjector().inverse({x:ei,y:Lr}),Ds=en.y;if(Nr=Math.floor((_-Ds)/P),Nr<0||Nr>=A)continue;const Na=en.x;if(jr=Math.floor((Na-g)/M),jr<0||jr>=T)continue}let xc=null;if(Ye)xc=Ye.map(en=>en[cn][mn]);else if(p)xc=p.map(en=>en[Nr][jr]);else{i&&i(Error("no rasters are available for, so skipping value generation"));return}const yc=Math.round(mn*Ht)+Math.min(at.left,0),Ia=dr,ss=Se,yn=ue;if(this.options.customDrawFunction)this.options.customDrawFunction({values:xc,context:e,x:yc,y:Ia,width:ss,height:yn,rasterX:jr,rasterY:Nr,sampleX:mn,sampleY:cn,sampledRaster:Ye});else{const en=this.getColor(xc);en&&e&&(e.fillStyle=en,e.fillRect(yc,Ia,ss,yn))}}}}}this.mask&&(d?console.warn("[georaster-layer-for-leaflet] mask is not supported when using simple projection"):this.mask.then(cn=>{LL.maskCanvas({canvas:S,canvas_bbox:N.bbox,canvas_srs:3857,mask:cn,mask_srs:this.mask_srs,strategy:this.mask_strategy})})),S.style.visibility="visible"}catch(Ye){console.error(Ye),s=Ye}i&&i(s,S)},0),S}catch(a){console.error(a),i&&i(a,S)}},_initTile:function(S){lr.DomUtil.addClass(S,"leaflet-tile"),S.onselectstart=lr.Util.falseFn,S.onmousemove=lr.Util.falseFn,lr.Browser.ielt9&&this.options.opacity<1&&lr.DomUtil.setOpacity(S,this.options.opacity),lr.Browser.android&&!lr.Browser.android23&&(S.style.WebkitBackfaceVisibility="hidden")},getBounds:function(){return this.initBounds(),this._bounds},getMap:function(){return this._map||this._mapToAdd},getMapCRS:function(){var S;return((S=this.getMap())===null||S===void 0?void 0:S.options.crs)||lr.CRS.EPSG3857},_tileCoordsToNwSe:function(S){const n=this.getMap(),e=this.getTileSize(),i=S.scaleBy(e),a=i.add(e),s=n.unproject(i,S.z),o=n.unproject(a,S.z);return[s,o]},_tileCoordsToBounds:function(S){const[n,e]=this._tileCoordsToNwSe(S);let i=new lr.LatLngBounds(n,e);if(!this.options.noWrap){const{crs:a}=this.getMap().options;i=a.wrapLatLngBounds(i)}return i},_isValidTile:function(S){const n=this.getMapCRS();if(!n.infinite){const w=this._globalTileRange;if(!n.wrapLng&&(S.x<w.min.x||S.x>w.max.x)||!n.wrapLat&&(S.y<w.min.y||S.y>w.max.y))return!1}const e=this.getBounds();if(!e)return!0;const{x:i,y:a,z:s}=S,o=new gc(e,{srs:4326}),h=this._tileCoordsToBounds(S);if(o.overlaps(h))return!0;if(Lk(n))return!1;const f=Math.pow(2,s),d=lr.point(i-f,a);d.z=s;const p=this._tileCoordsToBounds(d);if(o.overlaps(p))return!0;const g=lr.point(i+f,a);g.z=s;const x=this._tileCoordsToBounds(g);return!!o.overlaps(x)},getColor:function(S){if(this.options.pixelValuesToColorFn)return this.options.pixelValuesToColorFn(S);{const n=S.length;if(S.every(i=>i!==void 0&&i!==this.noDataValue))if(n==1){const i=S[0];if(this.palette){const[a,s,o,h]=this.palette[i];return`rgba(${a},${s},${o},${h/255})`}else if(this.georasters[0].mins){const{mins:a,ranges:s}=this.georasters[0];return this.scale((S[0]-a[0])/s[0]).hex()}else if(this.currentStats.mins){const a=this.currentStats.mins[0],s=this.currentStats.ranges[0];return this.scale((S[0]-a)/s).hex()}}else{if(n===2)return`rgb(${S[0]},${S[1]},0)`;if(n===3)return`rgb(${S[0]},${S[1]},${S[2]})`;if(n===4)return`rgba(${S[0]},${S[1]},${S[2]},${S[3]/255})`}}},updateColors(S,{debugLevel:n=-1}={debugLevel:-1}){if(!S)throw new Error("Missing pixelValuesToColorFn function");n===-1&&(n=this.debugLevel),n>=1&&console.log("Start updating active tile pixel values"),this.options.pixelValuesToColorFn=S;const e=this.getActiveTiles();return e?(n>=1&&console.log("Active tiles fetched",e),e.forEach(i=>{const{coords:a,el:s}=i;this.drawTile({tile:s,coords:a,context:s.getContext("2d")})}),n>=1&&console.log("Finished updating active tile colours"),this):(console.error("No active tiles available"),this)},getTiles(){return Object.values(this._tiles)},getActiveTiles(){return this.getTiles().filter(n=>this._isValidTile(n.coords))},isSupportedProjection:function(){if(this._isSupportedProjection===void 0){const S=this.projection;LF(S)?this._isSupportedProjection=!0:DN.has(S)?this._isSupportedProjection=!0:typeof Ju=="function"&&`EPSG:${S}`in Ju.defs?this._isSupportedProjection=!0:typeof proj4=="function"&&typeof proj4.defs<"u"&&`EPSG:${S}`in proj4.defs?this._isSupportedProjection=!0:this._isSupportedProjection=!1}return this._isSupportedProjection},getProjectionString:function(S){return LF(S)?JL(S):`EPSG:${S}`},initBounds:function(S){if(S||(S=this.options),!this._bounds){const{debugLevel:n,height:e,width:i,projection:a,xmin:s,xmax:o,ymin:h,ymax:f}=this;if(Lk(this.getMapCRS()))e===i?this._bounds=lr.latLngBounds([Rk,[Mk,Dk]]):e>i?this._bounds=lr.latLngBounds([Rk,[Mk,Dk/this.ratio]]):i>e&&(this._bounds=lr.latLngBounds([Rk,[Mk*this.ratio,Dk]]));else if(a===j2){n>=1&&console.log(`georaster projection is in ${j2}`);const d=lr.latLng(h,s),p=lr.latLng(f,o);this._bounds=lr.latLngBounds(d,p)}else if(this.getProjector()){n>=1&&console.log("projection is UTM or supported by proj4");const d=this.getProjector().forward({x:s,y:h}),p=lr.latLng(d.y,d.x),g=this.getProjector().forward({x:o,y:f}),x=lr.latLng(g.y,g.x);this._bounds=lr.latLngBounds(p,x)}else throw typeof Ju!="function"?`You are using the lite version of georaster-layer-for-leaflet, which does not support rasters with the projection ${a}.  Please try using the default build or add the projection definition to your global proj4.`:`GeoRasterLayer does not provide built-in support for rasters with the projection ${a}.  Add the projection definition to your global proj4.`;this.xMinOfLayer=this._bounds.getWest(),this.xMaxOfLayer=this._bounds.getEast(),this.yMaxOfLayer=this._bounds.getNorth(),this.yMinOfLayer=this._bounds.getSouth(),S.bounds=this._bounds}},getProjector:function(){if(this.isSupportedProjection()){if(!Ju&&!proj4)throw"proj4 must be found in the global scope in order to load a raster that uses this projection";if(!this._projector){const S=this.getProjectionString(this.projection);this.debugLevel>=1&&Ai({projString:S});let n;if(S.startsWith("EPSG"))if(typeof proj4=="function"&&typeof proj4.defs=="function"&&S in proj4.defs)n=proj4;else if(typeof Ju=="function"&&typeof Ju.defs=="function"&&S in Ju.defs)n=Ju;else throw"[georaster-layer-for-leaflet] projection not found in proj4 instance";else if(typeof proj4=="function")n=proj4;else if(typeof Ju=="function")n=Ju;else throw"[georaster-layer-for-leaflet] projection not found in proj4 instance";this._projector=n(S,`EPSG:${j2}`),this.debugLevel>=1&&console.log("projector set")}return this._projector}},same(S,n){return new Set(S.map(e=>e[n])).size===1}});typeof window=="object"&&(window.GeoRasterLayer=T_);typeof self<"u"&&(self.GeoRasterLayer=T_);var r9={};r9.d=(S,n)=>{for(var e in n)r9.o(n,e)&&!r9.o(S,e)&&Object.defineProperty(S,e,{enumerable:!0,get:n[e]})};r9.o=(S,n)=>Object.prototype.hasOwnProperty.call(S,n);var Ke=globalThis.pdfjsLib={};r9.d(Ke,{AbortException:()=>Am,AnnotationEditorLayer:()=>i_,AnnotationEditorParamsType:()=>Rn,AnnotationEditorType:()=>an,AnnotationEditorUIManager:()=>Ax,AnnotationLayer:()=>DA,AnnotationMode:()=>Gg,AnnotationType:()=>di,ColorPicker:()=>Sv,DOMSVGFactory:()=>wv,DrawLayer:()=>c_,FeatureTest:()=>Ms,GlobalWorkerOptions:()=>m1,ImageKind:()=>j7,InvalidPDFException:()=>Vk,MathClamp:()=>Ro,OPS:()=>mv,OutputScale:()=>v1,PDFDataRangeTransport:()=>MD,PDFDateString:()=>M_,PDFWorker:()=>Q2,PasswordResponses:()=>jN,PermissionFlag:()=>NN,PixelsPerInch:()=>_m,RenderingCancelledException:()=>F_,ResponseException:()=>bv,SignatureExtractor:()=>b1,SupportedImageMimeTypes:()=>Yk,TextLayer:()=>i9,TouchManager:()=>yv,Util:()=>Me,VerbosityLevel:()=>qv,XfaLayer:()=>RD,build:()=>sB,createValidAbsoluteUrl:()=>HN,fetchData:()=>P5,getDocument:()=>Kj,getFilenameFromUrl:()=>ZN,getPdfFilenameFromUrl:()=>QN,getUuid:()=>MM,getXfaPageViewport:()=>JN,isDataScheme:()=>Yv,isPdfFile:()=>P_,isValidExplicitDest:()=>Jj,noContextMenu:()=>Z0,normalizeUnicode:()=>VN,setLayerDimensions:()=>kx,shadow:()=>Cn,stopEvent:()=>pi,version:()=>iB});const Es=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser"),FM=[1,0,0,1,0,0],qk=[.001,0,0,.001,0,0],Nk=1.35,ol={ANY:1,DISPLAY:2,PRINT:4,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,IS_EDITING:128,OPLIST:256},Gg={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},LN="pdfjs_internal_editor_",an={DISABLE:-1,NONE:0,FREETEXT:3,HIGHLIGHT:9,STAMP:13,INK:15,SIGNATURE:101},Rn={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23,HIGHLIGHT_COLOR:31,HIGHLIGHT_DEFAULT_COLOR:32,HIGHLIGHT_THICKNESS:33,HIGHLIGHT_FREE:34,HIGHLIGHT_SHOW_ALL:35,DRAW_STEP:41},NN={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},Qs={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},j7={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},di={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},B2={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},qv={ERRORS:0,WARNINGS:1,INFOS:5},mv={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91,setStrokeTransparent:92,setFillTransparent:93},O7={moveTo:0,lineTo:1,curveTo:2,closePath:3},jN={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let Vv=qv.WARNINGS;function BN(S){Number.isInteger(S)&&(Vv=S)}function UN(){return Vv}function Kv(S){Vv>=qv.INFOS&&console.log(`Info: ${S}`)}function on(S){Vv>=qv.WARNINGS&&console.log(`Warning: ${S}`)}function Ar(S){throw new Error(S)}function gi(S,n){S||Ar(n)}function GN(S){switch(S==null?void 0:S.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function HN(S,n=null,e=null){if(!S)return null;if(e&&typeof S=="string"){if(e.addDefaultProtocol&&S.startsWith("www.")){const a=S.match(/\./g);(a==null?void 0:a.length)>=2&&(S=`http://${S}`)}if(e.tryConvertEncoding)try{S=qN(S)}catch{}}const i=n?URL.parse(S,n):URL.parse(S);return GN(i)?i:null}function Cn(S,n,e,i=!1){return Object.defineProperty(S,n,{value:e,enumerable:!i,configurable:!0,writable:!1}),e}const Cx=function(){function n(e,i){this.message=e,this.name=i}return n.prototype=new Error,n.constructor=n,n}();class JF extends Cx{constructor(n,e){super(n,"PasswordException"),this.code=e}}class jk extends Cx{constructor(n,e){super(n,"UnknownErrorException"),this.details=e}}class Vk extends Cx{constructor(n){super(n,"InvalidPDFException")}}class bv extends Cx{constructor(n,e,i){super(n,"ResponseException"),this.status=e,this.missing=i}}class zN extends Cx{constructor(n){super(n,"FormatError")}}class Am extends Cx{constructor(n){super(n,"AbortException")}}function PM(S){(typeof S!="object"||(S==null?void 0:S.length)===void 0)&&Ar("Invalid argument for bytesToString");const n=S.length,e=8192;if(n<e)return String.fromCharCode.apply(null,S);const i=[];for(let a=0;a<n;a+=e){const s=Math.min(a+e,n),o=S.subarray(a,s);i.push(String.fromCharCode.apply(null,o))}return i.join("")}function F5(S){typeof S!="string"&&Ar("Invalid argument for stringToBytes");const n=S.length,e=new Uint8Array(n);for(let i=0;i<n;++i)e[i]=S.charCodeAt(i)&255;return e}function XN(S){return String.fromCharCode(S>>24&255,S>>16&255,S>>8&255,S&255)}function E_(S){const n=Object.create(null);for(const[e,i]of S)n[e]=i;return n}function WN(){const S=new Uint8Array(4);return S[0]=1,new Uint32Array(S.buffer,0,1)[0]===1}function $N(){try{return new Function(""),!0}catch{return!1}}class Ms{static get isLittleEndian(){return Cn(this,"isLittleEndian",WN())}static get isEvalSupported(){return Cn(this,"isEvalSupported",$N())}static get isOffscreenCanvasSupported(){return Cn(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}static get isImageDecoderSupported(){return Cn(this,"isImageDecoderSupported",typeof ImageDecoder<"u")}static get platform(){if(typeof navigator<"u"&&typeof(navigator==null?void 0:navigator.platform)=="string"&&typeof(navigator==null?void 0:navigator.userAgent)=="string"){const{platform:n,userAgent:e}=navigator;return Cn(this,"platform",{isAndroid:e.includes("Android"),isLinux:n.includes("Linux"),isMac:n.includes("Mac"),isWindows:n.includes("Win"),isFirefox:e.includes("Firefox")})}return Cn(this,"platform",{isAndroid:!1,isLinux:!1,isMac:!1,isWindows:!1,isFirefox:!1})}static get isCSSRoundSupported(){var n,e;return Cn(this,"isCSSRoundSupported",(e=(n=globalThis.CSS)==null?void 0:n.supports)==null?void 0:e.call(n,"width: round(1.5px, 1px)"))}}const Bk=Array.from(Array(256).keys(),S=>S.toString(16).padStart(2,"0"));var y1,B7,Kk;class Me{static makeHexColor(n,e,i){return`#${Bk[n]}${Bk[e]}${Bk[i]}`}static transform(n,e){return[n[0]*e[0]+n[2]*e[1],n[1]*e[0]+n[3]*e[1],n[0]*e[2]+n[2]*e[3],n[1]*e[2]+n[3]*e[3],n[0]*e[4]+n[2]*e[5]+n[4],n[1]*e[4]+n[3]*e[5]+n[5]]}static applyTransform(n,e){const i=n[0]*e[0]+n[1]*e[2]+e[4],a=n[0]*e[1]+n[1]*e[3]+e[5];return[i,a]}static applyInverseTransform(n,e){const i=e[0]*e[3]-e[1]*e[2],a=(n[0]*e[3]-n[1]*e[2]+e[2]*e[5]-e[4]*e[3])/i,s=(-n[0]*e[1]+n[1]*e[0]+e[4]*e[1]-e[5]*e[0])/i;return[a,s]}static getAxialAlignedBoundingBox(n,e){const i=this.applyTransform(n,e),a=this.applyTransform(n.slice(2,4),e),s=this.applyTransform([n[0],n[3]],e),o=this.applyTransform([n[2],n[1]],e);return[Math.min(i[0],a[0],s[0],o[0]),Math.min(i[1],a[1],s[1],o[1]),Math.max(i[0],a[0],s[0],o[0]),Math.max(i[1],a[1],s[1],o[1])]}static inverseTransform(n){const e=n[0]*n[3]-n[1]*n[2];return[n[3]/e,-n[1]/e,-n[2]/e,n[0]/e,(n[2]*n[5]-n[4]*n[3])/e,(n[4]*n[1]-n[5]*n[0])/e]}static singularValueDecompose2dScale(n){const e=[n[0],n[2],n[1],n[3]],i=n[0]*e[0]+n[1]*e[2],a=n[0]*e[1]+n[1]*e[3],s=n[2]*e[0]+n[3]*e[2],o=n[2]*e[1]+n[3]*e[3],h=(i+o)/2,f=Math.sqrt((i+o)**2-4*(i*o-s*a))/2,d=h+f||1,p=h-f||1;return[Math.sqrt(d),Math.sqrt(p)]}static normalizeRect(n){const e=n.slice(0);return n[0]>n[2]&&(e[0]=n[2],e[2]=n[0]),n[1]>n[3]&&(e[1]=n[3],e[3]=n[1]),e}static intersect(n,e){const i=Math.max(Math.min(n[0],n[2]),Math.min(e[0],e[2])),a=Math.min(Math.max(n[0],n[2]),Math.max(e[0],e[2]));if(i>a)return null;const s=Math.max(Math.min(n[1],n[3]),Math.min(e[1],e[3])),o=Math.min(Math.max(n[1],n[3]),Math.max(e[1],e[3]));return s>o?null:[i,s,a,o]}static pointBoundingBox(n,e,i){i[0]=Math.min(i[0],n),i[1]=Math.min(i[1],e),i[2]=Math.max(i[2],n),i[3]=Math.max(i[3],e)}static rectBoundingBox(n,e,i,a,s){s[0]=Math.min(s[0],n,i),s[1]=Math.min(s[1],e,a),s[2]=Math.max(s[2],n,i),s[3]=Math.max(s[3],e,a)}static bezierBoundingBox(n,e,i,a,s,o,h,f,d){d[0]=Math.min(d[0],n,h),d[1]=Math.min(d[1],e,f),d[2]=Math.max(d[2],n,h),d[3]=Math.max(d[3],e,f),it(this,y1,Kk).call(this,n,i,s,h,e,a,o,f,3*(-n+3*(i-s)+h),6*(n-2*i+s),3*(i-n),d),it(this,y1,Kk).call(this,n,i,s,h,e,a,o,f,3*(-e+3*(a-o)+f),6*(e-2*a+o),3*(a-e),d)}}y1=new WeakSet,B7=function(n,e,i,a,s,o,h,f,d,p){if(d<=0||d>=1)return;const g=1-d,x=d*d,w=x*d,_=g*(g*(g*n+3*d*e)+3*x*i)+w*a,A=g*(g*(g*s+3*d*o)+3*x*h)+w*f;p[0]=Math.min(p[0],_),p[1]=Math.min(p[1],A),p[2]=Math.max(p[2],_),p[3]=Math.max(p[3],A)},Kk=function(n,e,i,a,s,o,h,f,d,p,g,x){if(Math.abs(d)<1e-12){Math.abs(p)>=1e-12&&it(this,y1,B7).call(this,n,e,i,a,s,o,h,f,-g/p,x);return}const w=p**2-4*g*d;if(w<0)return;const _=Math.sqrt(w),A=2*d;it(this,y1,B7).call(this,n,e,i,a,s,o,h,f,(-p+_)/A,x),it(this,y1,B7).call(this,n,e,i,a,s,o,h,f,(-p-_)/A,x)},rt(Me,y1);function qN(S){return decodeURIComponent(escape(S))}let Uk=null,tP=null;function VN(S){return Uk||(Uk=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,tP=new Map([["ﬅ","ſt"]])),S.replaceAll(Uk,(n,e,i)=>e?e.normalize("NFKC"):tP.get(i))}function MM(){if(typeof crypto.randomUUID=="function")return crypto.randomUUID();const S=new Uint8Array(32);return crypto.getRandomValues(S),PM(S)}const O_="pdfjs_internal_id_";function KN(S,n,e){if(!Array.isArray(e)||e.length<2)return!1;const[i,a,...s]=e;if(!S(i)&&!Number.isInteger(i)||!n(a))return!1;const o=s.length;let h=!0;switch(a.name){case"XYZ":if(o<2||o>3)return!1;break;case"Fit":case"FitB":return o===0;case"FitH":case"FitBH":case"FitV":case"FitBV":if(o>1)return!1;break;case"FitR":if(o!==4)return!1;h=!1;break;default:return!1}for(const f of s)if(!(typeof f=="number"||h&&f===null))return!1;return!0}function Ro(S,n,e){return Math.min(Math.max(S,n),e)}function DM(S){return Uint8Array.prototype.toBase64?S.toBase64():btoa(PM(S))}function YN(S){return Uint8Array.fromBase64?Uint8Array.fromBase64(S):F5(atob(S))}typeof Promise.try!="function"&&(Promise.try=function(S,...n){return new Promise(e=>{e(S(...n))})});typeof Math.sumPrecise!="function"&&(Math.sumPrecise=function(S){return S.reduce((n,e)=>n+e,0)});const jd="http://www.w3.org/2000/svg",gb=class gb{};Oe(gb,"CSS",96),Oe(gb,"PDF",72),Oe(gb,"PDF_TO_CSS_UNITS",gb.CSS/gb.PDF);let _m=gb;async function P5(S,n="text"){if(U2(S,document.baseURI)){const e=await fetch(S);if(!e.ok)throw new Error(e.statusText);switch(n){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"json":return e.json()}return e.text()}return new Promise((e,i)=>{const a=new XMLHttpRequest;a.open("GET",S,!0),a.responseType=n,a.onreadystatechange=()=>{if(a.readyState===XMLHttpRequest.DONE){if(a.status===200||a.status===0){switch(n){case"arraybuffer":case"blob":case"json":e(a.response);return}e(a.responseText);return}i(new Error(a.statusText))}},a.send(null)})}class M5{constructor({viewBox:n,userUnit:e,scale:i,rotation:a,offsetX:s=0,offsetY:o=0,dontFlip:h=!1}){this.viewBox=n,this.userUnit=e,this.scale=i,this.rotation=a,this.offsetX=s,this.offsetY=o,i*=e;const f=(n[2]+n[0])/2,d=(n[3]+n[1])/2;let p,g,x,w;switch(a%=360,a<0&&(a+=360),a){case 180:p=-1,g=0,x=0,w=1;break;case 90:p=0,g=1,x=1,w=0;break;case 270:p=0,g=-1,x=-1,w=0;break;case 0:p=1,g=0,x=0,w=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}h&&(x=-x,w=-w);let _,A,T,E;p===0?(_=Math.abs(d-n[1])*i+s,A=Math.abs(f-n[0])*i+o,T=(n[3]-n[1])*i,E=(n[2]-n[0])*i):(_=Math.abs(f-n[0])*i+s,A=Math.abs(d-n[1])*i+o,T=(n[2]-n[0])*i,E=(n[3]-n[1])*i),this.transform=[p*i,g*i,x*i,w*i,_-p*i*f-x*i*d,A-g*i*f-w*i*d],this.width=T,this.height=E}get rawDims(){const n=this.viewBox;return Cn(this,"rawDims",{pageWidth:n[2]-n[0],pageHeight:n[3]-n[1],pageX:n[0],pageY:n[1]})}clone({scale:n=this.scale,rotation:e=this.rotation,offsetX:i=this.offsetX,offsetY:a=this.offsetY,dontFlip:s=!1}={}){return new M5({viewBox:this.viewBox.slice(),userUnit:this.userUnit,scale:n,rotation:e,offsetX:i,offsetY:a,dontFlip:s})}convertToViewportPoint(n,e){return Me.applyTransform([n,e],this.transform)}convertToViewportRectangle(n){const e=Me.applyTransform([n[0],n[1]],this.transform),i=Me.applyTransform([n[2],n[3]],this.transform);return[e[0],e[1],i[0],i[1]]}convertToPdfPoint(n,e){return Me.applyInverseTransform([n,e],this.transform)}}class F_ extends Cx{constructor(n,e=0){super(n,"RenderingCancelledException"),this.extraDelay=e}}function Yv(S){const n=S.length;let e=0;for(;e<n&&S[e].trim()==="";)e++;return S.substring(e,e+5).toLowerCase()==="data:"}function P_(S){return typeof S=="string"&&/\.pdf$/i.test(S)}function ZN(S){return[S]=S.split(/[#?]/,1),S.substring(S.lastIndexOf("/")+1)}function QN(S,n="document.pdf"){if(typeof S!="string")return n;if(Yv(S))return on('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),n;const e=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,i=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,a=e.exec(S);let s=i.exec(a[1])||i.exec(a[2])||i.exec(a[3]);if(s&&(s=s[0],s.includes("%")))try{s=i.exec(decodeURIComponent(s))[0]}catch{}return s||n}class eP{constructor(){Oe(this,"started",Object.create(null));Oe(this,"times",[])}time(n){n in this.started&&on(`Timer is already running for ${n}`),this.started[n]=Date.now()}timeEnd(n){n in this.started||on(`Timer has not been started for ${n}`),this.times.push({name:n,start:this.started[n],end:Date.now()}),delete this.started[n]}toString(){const n=[];let e=0;for(const{name:i}of this.times)e=Math.max(i.length,e);for(const{name:i,start:a,end:s}of this.times)n.push(`${i.padEnd(e)} ${s-a}ms
`);return n.join("")}}function U2(S,n){const e=n?URL.parse(S,n):URL.parse(S);return(e==null?void 0:e.protocol)==="http:"||(e==null?void 0:e.protocol)==="https:"}function Z0(S){S.preventDefault()}function pi(S){S.preventDefault(),S.stopPropagation()}var o9;class M_{static toDateObject(n){if(!n||typeof n!="string")return null;b(this,o9)||K(this,o9,new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const e=b(this,o9).exec(n);if(!e)return null;const i=parseInt(e[1],10);let a=parseInt(e[2],10);a=a>=1&&a<=12?a-1:0;let s=parseInt(e[3],10);s=s>=1&&s<=31?s:1;let o=parseInt(e[4],10);o=o>=0&&o<=23?o:0;let h=parseInt(e[5],10);h=h>=0&&h<=59?h:0;let f=parseInt(e[6],10);f=f>=0&&f<=59?f:0;const d=e[7]||"Z";let p=parseInt(e[8],10);p=p>=0&&p<=23?p:0;let g=parseInt(e[9],10)||0;return g=g>=0&&g<=59?g:0,d==="-"?(o+=p,h+=g):d==="+"&&(o-=p,h-=g),new Date(Date.UTC(i,a,s,o,h,f))}}o9=new WeakMap,rt(M_,o9);function JN(S,{scale:n=1,rotation:e=0}){const{width:i,height:a}=S.attributes.style,s=[0,0,parseInt(i),parseInt(a)];return new M5({viewBox:s,userUnit:1,scale:n,rotation:e})}function D_(S){if(S.startsWith("#")){const n=parseInt(S.slice(1),16);return[(n&16711680)>>16,(n&65280)>>8,n&255]}return S.startsWith("rgb(")?S.slice(4,-1).split(",").map(n=>parseInt(n)):S.startsWith("rgba(")?S.slice(5,-1).split(",").map(n=>parseInt(n)).slice(0,3):(on(`Not a valid color format: "${S}"`),[0,0,0])}function tj(S){const n=document.createElement("span");n.style.visibility="hidden",document.body.append(n);for(const e of S.keys()){n.style.color=e;const i=window.getComputedStyle(n).color;S.set(e,D_(i))}n.remove()}function da(S){const{a:n,b:e,c:i,d:a,e:s,f:o}=S.getTransform();return[n,e,i,a,s,o]}function th(S){const{a:n,b:e,c:i,d:a,e:s,f:o}=S.getTransform().invertSelf();return[n,e,i,a,s,o]}function kx(S,n,e=!1,i=!0){if(n instanceof M5){const{pageWidth:a,pageHeight:s}=n.rawDims,{style:o}=S,h=Ms.isCSSRoundSupported,f=`var(--total-scale-factor) * ${a}px`,d=`var(--total-scale-factor) * ${s}px`,p=h?`round(down, ${f}, var(--scale-round-x))`:`calc(${f})`,g=h?`round(down, ${d}, var(--scale-round-y))`:`calc(${d})`;!e||n.rotation%180===0?(o.width=p,o.height=g):(o.width=g,o.height=p)}i&&S.setAttribute("data-main-rotation",n.rotation)}class v1{constructor(){const{pixelRatio:n}=v1;this.sx=n,this.sy=n}get scaled(){return this.sx!==1||this.sy!==1}get symmetric(){return this.sx===this.sy}limitCanvas(n,e,i,a){let s=1/0,o=1/0,h=1/0;i>0&&(s=Math.sqrt(i/(n*e))),a!==-1&&(o=a/n,h=a/e);const f=Math.min(s,o,h);return this.sx>f||this.sy>f?(this.sx=f,this.sy=f,!0):!1}static get pixelRatio(){return globalThis.devicePixelRatio||1}}const Yk=["image/apng","image/avif","image/bmp","image/gif","image/jpeg","image/png","image/svg+xml","image/webp","image/x-icon"];var Hg,bb,Zl,zg,c9,J2,l9,Cv,RM,Ps,LM,NM,U6,jM,U7;const Gd=class Gd{constructor(n){rt(this,Ps);rt(this,Hg,null);rt(this,bb,null);rt(this,Zl);rt(this,zg,null);rt(this,c9,null);rt(this,J2,null);K(this,Zl,n),b(Gd,l9)||K(Gd,l9,Object.freeze({freetext:"pdfjs-editor-remove-freetext-button",highlight:"pdfjs-editor-remove-highlight-button",ink:"pdfjs-editor-remove-ink-button",stamp:"pdfjs-editor-remove-stamp-button",signature:"pdfjs-editor-remove-signature-button"}))}render(){const n=K(this,Hg,document.createElement("div"));n.classList.add("editToolbar","hidden"),n.setAttribute("role","toolbar");const e=b(this,Zl)._uiManager._signal;n.addEventListener("contextmenu",Z0,{signal:e}),n.addEventListener("pointerdown",it(Gd,Cv,RM),{signal:e});const i=K(this,zg,document.createElement("div"));i.className="buttons",n.append(i);const a=b(this,Zl).toolbarPosition;if(a){const{style:s}=n,o=b(this,Zl)._uiManager.direction==="ltr"?1-a[0]:a[0];s.insetInlineEnd=`${100*o}%`,s.top=`calc(${100*a[1]}% + var(--editor-toolbar-vert-offset))`}return it(this,Ps,jM).call(this),n}get div(){return b(this,Hg)}hide(){var n;b(this,Hg).classList.add("hidden"),(n=b(this,bb))==null||n.hideDropdown()}show(){var n;b(this,Hg).classList.remove("hidden"),(n=b(this,c9))==null||n.shown()}async addAltText(n){const e=await n.render();it(this,Ps,U6).call(this,e),b(this,zg).prepend(e,b(this,Ps,U7)),K(this,c9,n)}addColorPicker(n){K(this,bb,n);const e=n.renderButton();it(this,Ps,U6).call(this,e),b(this,zg).prepend(e,b(this,Ps,U7))}async addEditSignatureButton(n){const e=K(this,J2,await n.renderEditButton(b(this,Zl)));it(this,Ps,U6).call(this,e),b(this,zg).prepend(e,b(this,Ps,U7))}updateEditSignatureButton(n){b(this,J2)&&(b(this,J2).title=n)}remove(){var n;b(this,Hg).remove(),(n=b(this,bb))==null||n.destroy(),K(this,bb,null)}};Hg=new WeakMap,bb=new WeakMap,Zl=new WeakMap,zg=new WeakMap,c9=new WeakMap,J2=new WeakMap,l9=new WeakMap,Cv=new WeakSet,RM=function(n){n.stopPropagation()},Ps=new WeakSet,LM=function(n){b(this,Zl)._focusEventsAllowed=!1,pi(n)},NM=function(n){b(this,Zl)._focusEventsAllowed=!0,pi(n)},U6=function(n){const e=b(this,Zl)._uiManager._signal;n.addEventListener("focusin",it(this,Ps,LM).bind(this),{capture:!0,signal:e}),n.addEventListener("focusout",it(this,Ps,NM).bind(this),{capture:!0,signal:e}),n.addEventListener("contextmenu",Z0,{signal:e})},jM=function(){const{editorType:n,_uiManager:e}=b(this,Zl),i=document.createElement("button");i.className="delete",i.tabIndex=0,i.setAttribute("data-l10n-id",b(Gd,l9)[n]),it(this,Ps,U6).call(this,i),i.addEventListener("click",a=>{e.delete()},{signal:e._signal}),b(this,zg).append(i)},U7=function(){const n=document.createElement("div");return n.className="divider",n},rt(Gd,Cv),rt(Gd,l9,null);let Zk=Gd;var u9,xb,yb,Cm,BM,UM,GM;class ej{constructor(n){rt(this,Cm);rt(this,u9,null);rt(this,xb,null);rt(this,yb);K(this,yb,n)}show(n,e,i){const[a,s]=it(this,Cm,UM).call(this,e,i),{style:o}=b(this,xb)||K(this,xb,it(this,Cm,BM).call(this));n.append(b(this,xb)),o.insetInlineEnd=`${100*a}%`,o.top=`calc(${100*s}% + var(--editor-toolbar-vert-offset))`}hide(){b(this,xb).remove()}}u9=new WeakMap,xb=new WeakMap,yb=new WeakMap,Cm=new WeakSet,BM=function(){const n=K(this,xb,document.createElement("div"));n.className="editToolbar",n.setAttribute("role","toolbar"),n.addEventListener("contextmenu",Z0,{signal:b(this,yb)._signal});const e=K(this,u9,document.createElement("div"));return e.className="buttons",n.append(e),it(this,Cm,GM).call(this),n},UM=function(n,e){let i=0,a=0;for(const s of n){const o=s.y+s.height;if(o<i)continue;const h=s.x+(e?s.width:0);if(o>i){a=h,i=o;continue}e?h>a&&(a=h):h<a&&(a=h)}return[e?1-a:a,i]},GM=function(){const n=document.createElement("button");n.className="highlightButton",n.tabIndex=0,n.setAttribute("data-l10n-id","pdfjs-highlight-floating-button1");const e=document.createElement("span");n.append(e),e.className="visuallyHidden",e.setAttribute("data-l10n-id","pdfjs-highlight-floating-button-label");const i=b(this,yb)._signal;n.addEventListener("contextmenu",Z0,{signal:i}),n.addEventListener("click",()=>{b(this,yb).highlightSelection("floating_button")},{signal:i}),b(this,u9).append(n)};function R_(S,n,e){for(const i of e)n.addEventListener(i,S[i].bind(S))}var Iv;class nj{constructor(){rt(this,Iv,0)}get id(){return`${LN}${io(this,Iv)._++}`}}Iv=new WeakMap;var ty,h9,to,ey,G7;const H_=class H_{constructor(){rt(this,ey);rt(this,ty,MM());rt(this,h9,0);rt(this,to,null)}static get _isSVGFittingCanvas(){const n='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',i=new OffscreenCanvas(1,3).getContext("2d",{willReadFrequently:!0}),a=new Image;a.src=n;const s=a.decode().then(()=>(i.drawImage(a,0,0,1,1,0,0,1,3),new Uint32Array(i.getImageData(0,0,1,1).data.buffer)[0]===0));return Cn(this,"_isSVGFittingCanvas",s)}async getFromFile(n){const{lastModified:e,name:i,size:a,type:s}=n;return it(this,ey,G7).call(this,`${e}_${i}_${a}_${s}`,n)}async getFromUrl(n){return it(this,ey,G7).call(this,n,n)}async getFromBlob(n,e){const i=await e;return it(this,ey,G7).call(this,n,i)}async getFromId(n){b(this,to)||K(this,to,new Map);const e=b(this,to).get(n);if(!e)return null;if(e.bitmap)return e.refCounter+=1,e;if(e.file)return this.getFromFile(e.file);if(e.blobPromise){const{blobPromise:i}=e;return delete e.blobPromise,this.getFromBlob(e.id,i)}return this.getFromUrl(e.url)}getFromCanvas(n,e){b(this,to)||K(this,to,new Map);let i=b(this,to).get(n);if(i!=null&&i.bitmap)return i.refCounter+=1,i;const a=new OffscreenCanvas(e.width,e.height);return a.getContext("2d").drawImage(e,0,0),i={bitmap:a.transferToImageBitmap(),id:`image_${b(this,ty)}_${io(this,h9)._++}`,refCounter:1,isSvg:!1},b(this,to).set(n,i),b(this,to).set(i.id,i),i}getSvgUrl(n){const e=b(this,to).get(n);return e!=null&&e.isSvg?e.svgUrl:null}deleteId(n){var a;b(this,to)||K(this,to,new Map);const e=b(this,to).get(n);if(!e||(e.refCounter-=1,e.refCounter!==0))return;const{bitmap:i}=e;if(!e.url&&!e.file){const s=new OffscreenCanvas(i.width,i.height);s.getContext("bitmaprenderer").transferFromImageBitmap(i),e.blobPromise=s.convertToBlob()}(a=i.close)==null||a.call(i),e.bitmap=null}isValidId(n){return n.startsWith(`image_${b(this,ty)}_`)}};ty=new WeakMap,h9=new WeakMap,to=new WeakMap,ey=new WeakSet,G7=async function(n,e){b(this,to)||K(this,to,new Map);let i=b(this,to).get(n);if(i===null)return null;if(i!=null&&i.bitmap)return i.refCounter+=1,i;try{i||(i={bitmap:null,id:`image_${b(this,ty)}_${io(this,h9)._++}`,refCounter:0,isSvg:!1});let a;if(typeof e=="string"?(i.url=e,a=await P5(e,"blob")):e instanceof File?a=i.file=e:e instanceof Blob&&(a=e),a.type==="image/svg+xml"){const s=H_._isSVGFittingCanvas,o=new FileReader,h=new Image,f=new Promise((d,p)=>{h.onload=()=>{i.bitmap=h,i.isSvg=!0,d()},o.onload=async()=>{const g=i.svgUrl=o.result;h.src=await s?`${g}#svgView(preserveAspectRatio(none))`:g},h.onerror=o.onerror=p});o.readAsDataURL(a),await f}else i.bitmap=await createImageBitmap(a);i.refCounter=1}catch(a){on(a),i=null}return b(this,to).set(n,i),i&&b(this,to).set(i.id,i),i};let Qk=H_;var Qa,Xg,f9,Ca;class rj{constructor(n=128){rt(this,Qa,[]);rt(this,Xg,!1);rt(this,f9);rt(this,Ca,-1);K(this,f9,n)}add({cmd:n,undo:e,post:i,mustExec:a,type:s=NaN,overwriteIfSameType:o=!1,keepUndo:h=!1}){if(a&&n(),b(this,Xg))return;const f={cmd:n,undo:e,post:i,type:s};if(b(this,Ca)===-1){b(this,Qa).length>0&&(b(this,Qa).length=0),K(this,Ca,0),b(this,Qa).push(f);return}if(o&&b(this,Qa)[b(this,Ca)].type===s){h&&(f.undo=b(this,Qa)[b(this,Ca)].undo),b(this,Qa)[b(this,Ca)]=f;return}const d=b(this,Ca)+1;d===b(this,f9)?b(this,Qa).splice(0,1):(K(this,Ca,d),d<b(this,Qa).length&&b(this,Qa).splice(d)),b(this,Qa).push(f)}undo(){if(b(this,Ca)===-1)return;K(this,Xg,!0);const{undo:n,post:e}=b(this,Qa)[b(this,Ca)];n(),e==null||e(),K(this,Xg,!1),K(this,Ca,b(this,Ca)-1)}redo(){if(b(this,Ca)<b(this,Qa).length-1){K(this,Ca,b(this,Ca)+1),K(this,Xg,!0);const{cmd:n,post:e}=b(this,Qa)[b(this,Ca)];n(),e==null||e(),K(this,Xg,!1)}}hasSomethingToUndo(){return b(this,Ca)!==-1}hasSomethingToRedo(){return b(this,Ca)<b(this,Qa).length-1}cleanType(n){if(b(this,Ca)!==-1){for(let e=b(this,Ca);e>=0;e--)if(b(this,Qa)[e].type!==n){b(this,Qa).splice(e+1,b(this,Ca)-e),K(this,Ca,e);return}b(this,Qa).length=0,K(this,Ca,-1)}}destroy(){K(this,Qa,null)}}Qa=new WeakMap,Xg=new WeakMap,f9=new WeakMap,Ca=new WeakMap;var Tv,HM;class D5{constructor(n){rt(this,Tv);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:e}=Ms.platform;for(const[i,a,s={}]of n)for(const o of i){const h=o.startsWith("mac+");e&&h?(this.callbacks.set(o.slice(4),{callback:a,options:s}),this.allKeys.add(o.split("+").at(-1))):!e&&!h&&(this.callbacks.set(o,{callback:a,options:s}),this.allKeys.add(o.split("+").at(-1)))}}exec(n,e){if(!this.allKeys.has(e.key))return;const i=this.callbacks.get(it(this,Tv,HM).call(this,e));if(!i)return;const{callback:a,options:{bubbles:s=!1,args:o=[],checker:h=null}}=i;h&&!h(n,e)||(a.bind(n,...o,e)(),s||pi(e))}}Tv=new WeakSet,HM=function(n){n.altKey&&this.buffer.push("alt"),n.ctrlKey&&this.buffer.push("ctrl"),n.metaKey&&this.buffer.push("meta"),n.shiftKey&&this.buffer.push("shift"),this.buffer.push(n.key);const e=this.buffer.join("+");return this.buffer.length=0,e};const Ev=class Ev{get _colors(){const n=new Map([["CanvasText",null],["Canvas",null]]);return tj(n),Cn(this,"_colors",n)}convert(n){const e=D_(n);if(!window.matchMedia("(forced-colors: active)").matches)return e;for(const[i,a]of this._colors)if(a.every((s,o)=>s===e[o]))return Ev._colorsMapping.get(i);return e}getHexCode(n){const e=this._colors.get(n);return e?Me.makeHexColor(...e):n}};Oe(Ev,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]));let Jk=Ev;var ny,Vc,Ii,_s,ry,zd,ay,Ql,Wg,wb,iy,vb,rh,N0,Sb,d9,p9,sy,g9,ah,$g,oy,qg,ih,Ov,Vg,m9,Kg,kb,Ab,Yg,b9,Ji,hr,Xd,Zg,_b,x9,y9,Qg,sh,Wd,w9,Jl,we,H7,tA,zM,XM,z7,WM,$M,qM,eA,VM,nA,rA,KM,Oo,Bd,YM,ZM,aA,QM,G6,iA;const K2=class K2{constructor(n,e,i,a,s,o,h,f,d,p,g,x,w,_){rt(this,we);rt(this,ny,new AbortController);rt(this,Vc,null);rt(this,Ii,new Map);rt(this,_s,new Map);rt(this,ry,null);rt(this,zd,null);rt(this,ay,null);rt(this,Ql,new rj);rt(this,Wg,null);rt(this,wb,null);rt(this,iy,0);rt(this,vb,new Set);rt(this,rh,null);rt(this,N0,null);rt(this,Sb,new Set);Oe(this,"_editorUndoBar",null);rt(this,d9,!1);rt(this,p9,!1);rt(this,sy,!1);rt(this,g9,null);rt(this,ah,null);rt(this,$g,null);rt(this,oy,null);rt(this,qg,!1);rt(this,ih,null);rt(this,Ov,new nj);rt(this,Vg,!1);rt(this,m9,!1);rt(this,Kg,null);rt(this,kb,null);rt(this,Ab,null);rt(this,Yg,null);rt(this,b9,null);rt(this,Ji,an.NONE);rt(this,hr,new Set);rt(this,Xd,null);rt(this,Zg,null);rt(this,_b,null);rt(this,x9,null);rt(this,y9,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1,hasSelectedText:!1});rt(this,Qg,[0,0]);rt(this,sh,null);rt(this,Wd,null);rt(this,w9,null);rt(this,Jl,null);const A=this._signal=b(this,ny).signal;K(this,Wd,n),K(this,w9,e),K(this,ry,i),K(this,Zg,a),this._eventBus=s,s._on("editingaction",this.onEditingAction.bind(this),{signal:A}),s._on("pagechanging",this.onPageChanging.bind(this),{signal:A}),s._on("scalechanging",this.onScaleChanging.bind(this),{signal:A}),s._on("rotationchanging",this.onRotationChanging.bind(this),{signal:A}),s._on("setpreference",this.onSetPreference.bind(this),{signal:A}),s._on("switchannotationeditorparams",T=>this.updateParams(T.type,T.value),{signal:A}),it(this,we,WM).call(this),it(this,we,KM).call(this),it(this,we,eA).call(this),K(this,zd,o.annotationStorage),K(this,g9,o.filterFactory),K(this,_b,h),K(this,oy,f||null),K(this,d9,d),K(this,p9,p),K(this,sy,g),K(this,b9,x||null),this.viewParameters={realScale:_m.PDF_TO_CSS_UNITS,rotation:0},this.isShiftKeyDown=!1,this._editorUndoBar=w||null,this._supportsPinchToZoom=_!==!1}static get _keyboardManager(){const n=K2.prototype,e=o=>b(o,Wd).contains(document.activeElement)&&document.activeElement.tagName!=="BUTTON"&&o.hasSomethingToControl(),i=(o,{target:h})=>{if(h instanceof HTMLInputElement){const{type:f}=h;return f!=="text"&&f!=="number"}return!0},a=this.TRANSLATE_SMALL,s=this.TRANSLATE_BIG;return Cn(this,"_keyboardManager",new D5([[["ctrl+a","mac+meta+a"],n.selectAll,{checker:i}],[["ctrl+z","mac+meta+z"],n.undo,{checker:i}],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],n.redo,{checker:i}],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],n.delete,{checker:i}],[["Enter","mac+Enter"],n.addNewEditorFromKeyboard,{checker:(o,{target:h})=>!(h instanceof HTMLButtonElement)&&b(o,Wd).contains(h)&&!o.isEnterHandled}],[[" ","mac+ "],n.addNewEditorFromKeyboard,{checker:(o,{target:h})=>!(h instanceof HTMLButtonElement)&&b(o,Wd).contains(document.activeElement)}],[["Escape","mac+Escape"],n.unselectAll],[["ArrowLeft","mac+ArrowLeft"],n.translateSelectedEditors,{args:[-a,0],checker:e}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],n.translateSelectedEditors,{args:[-s,0],checker:e}],[["ArrowRight","mac+ArrowRight"],n.translateSelectedEditors,{args:[a,0],checker:e}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],n.translateSelectedEditors,{args:[s,0],checker:e}],[["ArrowUp","mac+ArrowUp"],n.translateSelectedEditors,{args:[0,-a],checker:e}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],n.translateSelectedEditors,{args:[0,-s],checker:e}],[["ArrowDown","mac+ArrowDown"],n.translateSelectedEditors,{args:[0,a],checker:e}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],n.translateSelectedEditors,{args:[0,s],checker:e}]]))}destroy(){var n,e,i,a,s,o,h,f;(n=b(this,Jl))==null||n.resolve(),K(this,Jl,null),(e=b(this,ny))==null||e.abort(),K(this,ny,null),this._signal=null;for(const d of b(this,_s).values())d.destroy();b(this,_s).clear(),b(this,Ii).clear(),b(this,Sb).clear(),(i=b(this,Yg))==null||i.clear(),K(this,Vc,null),b(this,hr).clear(),b(this,Ql).destroy(),(a=b(this,ry))==null||a.destroy(),(s=b(this,Zg))==null||s.destroy(),(o=b(this,ih))==null||o.hide(),K(this,ih,null),(h=b(this,Ab))==null||h.destroy(),K(this,Ab,null),b(this,ah)&&(clearTimeout(b(this,ah)),K(this,ah,null)),b(this,sh)&&(clearTimeout(b(this,sh)),K(this,sh,null)),(f=this._editorUndoBar)==null||f.destroy()}combinedSignal(n){return AbortSignal.any([this._signal,n.signal])}get mlManager(){return b(this,b9)}get useNewAltTextFlow(){return b(this,p9)}get useNewAltTextWhenAddingImage(){return b(this,sy)}get hcmFilter(){return Cn(this,"hcmFilter",b(this,_b)?b(this,g9).addHCMFilter(b(this,_b).foreground,b(this,_b).background):"none")}get direction(){return Cn(this,"direction",getComputedStyle(b(this,Wd)).direction)}get highlightColors(){return Cn(this,"highlightColors",b(this,oy)?new Map(b(this,oy).split(",").map(n=>n.split("=").map(e=>e.trim()))):null)}get highlightColorNames(){return Cn(this,"highlightColorNames",this.highlightColors?new Map(Array.from(this.highlightColors,n=>n.reverse())):null)}setCurrentDrawingSession(n){n?(this.unselectAll(),this.disableUserSelect(!0)):this.disableUserSelect(!1),K(this,wb,n)}setMainHighlightColorPicker(n){K(this,Ab,n)}editAltText(n,e=!1){var i;(i=b(this,ry))==null||i.editAltText(this,n,e)}getSignature(n){var e;(e=b(this,Zg))==null||e.getSignature({uiManager:this,editor:n})}get signatureManager(){return b(this,Zg)}switchToMode(n,e){this._eventBus.on("annotationeditormodechanged",e,{once:!0,signal:this._signal}),this._eventBus.dispatch("showannotationeditorui",{source:this,mode:n})}setPreference(n,e){this._eventBus.dispatch("setpreference",{source:this,name:n,value:e})}onSetPreference({name:n,value:e}){switch(n){case"enableNewAltTextWhenAddingImage":K(this,sy,e);break}}onPageChanging({pageNumber:n}){K(this,iy,n-1)}focusMainContainer(){b(this,Wd).focus()}findParent(n,e){for(const i of b(this,_s).values()){const{x:a,y:s,width:o,height:h}=i.div.getBoundingClientRect();if(n>=a&&n<=a+o&&e>=s&&e<=s+h)return i}return null}disableUserSelect(n=!1){b(this,w9).classList.toggle("noUserSelect",n)}addShouldRescale(n){b(this,Sb).add(n)}removeShouldRescale(n){b(this,Sb).delete(n)}onScaleChanging({scale:n}){var e;this.commitOrRemove(),this.viewParameters.realScale=n*_m.PDF_TO_CSS_UNITS;for(const i of b(this,Sb))i.onScaleChanging();(e=b(this,wb))==null||e.onScaleChanging()}onRotationChanging({pagesRotation:n}){this.commitOrRemove(),this.viewParameters.rotation=n}highlightSelection(n=""){const e=document.getSelection();if(!e||e.isCollapsed)return;const{anchorNode:i,anchorOffset:a,focusNode:s,focusOffset:o}=e,h=e.toString(),d=it(this,we,H7).call(this,e).closest(".textLayer"),p=this.getSelectionBoxes(d);if(!p)return;e.empty();const g=it(this,we,tA).call(this,d),x=b(this,Ji)===an.NONE,w=()=>{g==null||g.createAndAddNewEditor({x:0,y:0},!1,{methodOfCreation:n,boxes:p,anchorNode:i,anchorOffset:a,focusNode:s,focusOffset:o,text:h}),x&&this.showAllEditors("highlight",!0,!0)};if(x){this.switchToMode(an.HIGHLIGHT,w);return}w()}addToAnnotationStorage(n){!n.isEmpty()&&b(this,zd)&&!b(this,zd).has(n.id)&&b(this,zd).setValue(n.id,n)}blur(){if(this.isShiftKeyDown=!1,b(this,qg)&&(K(this,qg,!1),it(this,we,z7).call(this,"main_toolbar")),!this.hasSelection)return;const{activeElement:n}=document;for(const e of b(this,hr))if(e.div.contains(n)){K(this,kb,[e,n]),e._focusEventsAllowed=!1;break}}focus(){if(!b(this,kb))return;const[n,e]=b(this,kb);K(this,kb,null),e.addEventListener("focusin",()=>{n._focusEventsAllowed=!0},{once:!0,signal:this._signal}),e.focus()}addEditListeners(){it(this,we,eA).call(this),it(this,we,nA).call(this)}removeEditListeners(){it(this,we,VM).call(this),it(this,we,rA).call(this)}dragOver(n){for(const{type:e}of n.dataTransfer.items)for(const i of b(this,N0))if(i.isHandlingMimeForPasting(e)){n.dataTransfer.dropEffect="copy",n.preventDefault();return}}drop(n){for(const e of n.dataTransfer.items)for(const i of b(this,N0))if(i.isHandlingMimeForPasting(e.type)){i.paste(e,this.currentLayer),n.preventDefault();return}}copy(n){var i;if(n.preventDefault(),(i=b(this,Vc))==null||i.commitOrRemove(),!this.hasSelection)return;const e=[];for(const a of b(this,hr)){const s=a.serialize(!0);s&&e.push(s)}e.length!==0&&n.clipboardData.setData("application/pdfjs",JSON.stringify(e))}cut(n){this.copy(n),this.delete()}async paste(n){n.preventDefault();const{clipboardData:e}=n;for(const s of e.items)for(const o of b(this,N0))if(o.isHandlingMimeForPasting(s.type)){o.paste(s,this.currentLayer);return}let i=e.getData("application/pdfjs");if(!i)return;try{i=JSON.parse(i)}catch(s){on(`paste: "${s.message}".`);return}if(!Array.isArray(i))return;this.unselectAll();const a=this.currentLayer;try{const s=[];for(const f of i){const d=await a.deserialize(f);if(!d)return;s.push(d)}const o=()=>{for(const f of s)it(this,we,aA).call(this,f);it(this,we,iA).call(this,s)},h=()=>{for(const f of s)f.remove()};this.addCommands({cmd:o,undo:h,mustExec:!0})}catch(s){on(`paste: "${s.message}".`)}}keydown(n){!this.isShiftKeyDown&&n.key==="Shift"&&(this.isShiftKeyDown=!0),b(this,Ji)!==an.NONE&&!this.isEditorHandlingKeyboard&&K2._keyboardManager.exec(this,n)}keyup(n){this.isShiftKeyDown&&n.key==="Shift"&&(this.isShiftKeyDown=!1,b(this,qg)&&(K(this,qg,!1),it(this,we,z7).call(this,"main_toolbar")))}onEditingAction({name:n}){switch(n){case"undo":case"redo":case"delete":case"selectAll":this[n]();break;case"highlightSelection":this.highlightSelection("context_menu");break}}setEditingState(n){n?(it(this,we,$M).call(this),it(this,we,nA).call(this),it(this,we,Oo).call(this,{isEditing:b(this,Ji)!==an.NONE,isEmpty:it(this,we,G6).call(this),hasSomethingToUndo:b(this,Ql).hasSomethingToUndo(),hasSomethingToRedo:b(this,Ql).hasSomethingToRedo(),hasSelectedEditor:!1})):(it(this,we,qM).call(this),it(this,we,rA).call(this),it(this,we,Oo).call(this,{isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(n){if(!b(this,N0)){K(this,N0,n);for(const e of b(this,N0))it(this,we,Bd).call(this,e.defaultPropertiesToUpdate)}}getId(){return b(this,Ov).id}get currentLayer(){return b(this,_s).get(b(this,iy))}getLayer(n){return b(this,_s).get(n)}get currentPageIndex(){return b(this,iy)}addLayer(n){b(this,_s).set(n.pageIndex,n),b(this,Vg)?n.enable():n.disable()}removeLayer(n){b(this,_s).delete(n.pageIndex)}async updateMode(n,e=null,i=!1){var a,s;if(b(this,Ji)!==n&&!(b(this,Jl)&&(await b(this,Jl).promise,!b(this,Jl)))){if(K(this,Jl,Promise.withResolvers()),K(this,Ji,n),n===an.NONE){this.setEditingState(!1),it(this,we,ZM).call(this),(a=this._editorUndoBar)==null||a.hide(),b(this,Jl).resolve();return}n===an.SIGNATURE&&await((s=b(this,Zg))==null?void 0:s.loadSignatures()),this.setEditingState(!0),await it(this,we,YM).call(this),this.unselectAll();for(const o of b(this,_s).values())o.updateMode(n);if(!e){i&&this.addNewEditorFromKeyboard(),b(this,Jl).resolve();return}for(const o of b(this,Ii).values())o.annotationElementId===e?(this.setSelected(o),o.enterInEditMode()):o.unselect();b(this,Jl).resolve()}}addNewEditorFromKeyboard(){this.currentLayer.canCreateNewEmptyEditor()&&this.currentLayer.addNewEditor()}updateToolbar(n){n!==b(this,Ji)&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:n})}updateParams(n,e){var i;if(b(this,N0)){switch(n){case Rn.CREATE:this.currentLayer.addNewEditor(e);return;case Rn.HIGHLIGHT_DEFAULT_COLOR:(i=b(this,Ab))==null||i.updateColor(e);break;case Rn.HIGHLIGHT_SHOW_ALL:this._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:{type:"highlight",action:"toggle_visibility"}}}),(b(this,x9)||K(this,x9,new Map)).set(n,e),this.showAllEditors("highlight",e);break}for(const a of b(this,hr))a.updateParams(n,e);for(const a of b(this,N0))a.updateDefaultParams(n,e)}}showAllEditors(n,e,i=!1){var s;for(const o of b(this,Ii).values())o.editorType===n&&o.show(e);(((s=b(this,x9))==null?void 0:s.get(Rn.HIGHLIGHT_SHOW_ALL))??!0)!==e&&it(this,we,Bd).call(this,[[Rn.HIGHLIGHT_SHOW_ALL,e]])}enableWaiting(n=!1){if(b(this,m9)!==n){K(this,m9,n);for(const e of b(this,_s).values())n?e.disableClick():e.enableClick(),e.div.classList.toggle("waiting",n)}}getEditors(n){const e=[];for(const i of b(this,Ii).values())i.pageIndex===n&&e.push(i);return e}getEditor(n){return b(this,Ii).get(n)}addEditor(n){b(this,Ii).set(n.id,n)}removeEditor(n){var e,i;n.div.contains(document.activeElement)&&(b(this,ah)&&clearTimeout(b(this,ah)),K(this,ah,setTimeout(()=>{this.focusMainContainer(),K(this,ah,null)},0))),b(this,Ii).delete(n.id),n.annotationElementId&&((e=b(this,Yg))==null||e.delete(n.annotationElementId)),this.unselect(n),(!n.annotationElementId||!b(this,vb).has(n.annotationElementId))&&((i=b(this,zd))==null||i.remove(n.id))}addDeletedAnnotationElement(n){b(this,vb).add(n.annotationElementId),this.addChangedExistingAnnotation(n),n.deleted=!0}isDeletedAnnotationElement(n){return b(this,vb).has(n)}removeDeletedAnnotationElement(n){b(this,vb).delete(n.annotationElementId),this.removeChangedExistingAnnotation(n),n.deleted=!1}setActiveEditor(n){b(this,Vc)!==n&&(K(this,Vc,n),n&&it(this,we,Bd).call(this,n.propertiesToUpdate))}updateUI(n){b(this,we,QM)===n&&it(this,we,Bd).call(this,n.propertiesToUpdate)}updateUIForDefaultProperties(n){it(this,we,Bd).call(this,n.defaultPropertiesToUpdate)}toggleSelected(n){if(b(this,hr).has(n)){b(this,hr).delete(n),n.unselect(),it(this,we,Oo).call(this,{hasSelectedEditor:this.hasSelection});return}b(this,hr).add(n),n.select(),it(this,we,Bd).call(this,n.propertiesToUpdate),it(this,we,Oo).call(this,{hasSelectedEditor:!0})}setSelected(n){var e;(e=b(this,wb))==null||e.commitOrRemove();for(const i of b(this,hr))i!==n&&i.unselect();b(this,hr).clear(),b(this,hr).add(n),n.select(),it(this,we,Bd).call(this,n.propertiesToUpdate),it(this,we,Oo).call(this,{hasSelectedEditor:!0})}isSelected(n){return b(this,hr).has(n)}get firstSelectedEditor(){return b(this,hr).values().next().value}unselect(n){n.unselect(),b(this,hr).delete(n),it(this,we,Oo).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return b(this,hr).size!==0}get isEnterHandled(){return b(this,hr).size===1&&this.firstSelectedEditor.isEnterHandled}undo(){var n;b(this,Ql).undo(),it(this,we,Oo).call(this,{hasSomethingToUndo:b(this,Ql).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:it(this,we,G6).call(this)}),(n=this._editorUndoBar)==null||n.hide()}redo(){b(this,Ql).redo(),it(this,we,Oo).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:b(this,Ql).hasSomethingToRedo(),isEmpty:it(this,we,G6).call(this)})}addCommands(n){b(this,Ql).add(n),it(this,we,Oo).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:it(this,we,G6).call(this)})}cleanUndoStack(n){b(this,Ql).cleanType(n)}delete(){var s;this.commitOrRemove();const n=(s=this.currentLayer)==null?void 0:s.endDrawingSession(!0);if(!this.hasSelection&&!n)return;const e=n?[n]:[...b(this,hr)],i=()=>{var o;(o=this._editorUndoBar)==null||o.show(a,e.length===1?e[0].editorType:e.length);for(const h of e)h.remove()},a=()=>{for(const o of e)it(this,we,aA).call(this,o)};this.addCommands({cmd:i,undo:a,mustExec:!0})}commitOrRemove(){var n;(n=b(this,Vc))==null||n.commitOrRemove()}hasSomethingToControl(){return b(this,Vc)||this.hasSelection}selectAll(){for(const n of b(this,hr))n.commit();it(this,we,iA).call(this,b(this,Ii).values())}unselectAll(){var n;if(!(b(this,Vc)&&(b(this,Vc).commitOrRemove(),b(this,Ji)!==an.NONE))&&!((n=b(this,wb))!=null&&n.commitOrRemove())&&this.hasSelection){for(const e of b(this,hr))e.unselect();b(this,hr).clear(),it(this,we,Oo).call(this,{hasSelectedEditor:!1})}}translateSelectedEditors(n,e,i=!1){if(i||this.commitOrRemove(),!this.hasSelection)return;b(this,Qg)[0]+=n,b(this,Qg)[1]+=e;const[a,s]=b(this,Qg),o=[...b(this,hr)],h=1e3;b(this,sh)&&clearTimeout(b(this,sh)),K(this,sh,setTimeout(()=>{K(this,sh,null),b(this,Qg)[0]=b(this,Qg)[1]=0,this.addCommands({cmd:()=>{for(const f of o)b(this,Ii).has(f.id)&&(f.translateInPage(a,s),f.translationDone())},undo:()=>{for(const f of o)b(this,Ii).has(f.id)&&(f.translateInPage(-a,-s),f.translationDone())},mustExec:!1})},h));for(const f of o)f.translateInPage(n,e),f.translationDone()}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),K(this,rh,new Map);for(const n of b(this,hr))b(this,rh).set(n,{savedX:n.x,savedY:n.y,savedPageIndex:n.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!b(this,rh))return!1;this.disableUserSelect(!1);const n=b(this,rh);K(this,rh,null);let e=!1;for(const[{x:a,y:s,pageIndex:o},h]of n)h.newX=a,h.newY=s,h.newPageIndex=o,e||(e=a!==h.savedX||s!==h.savedY||o!==h.savedPageIndex);if(!e)return!1;const i=(a,s,o,h)=>{if(b(this,Ii).has(a.id)){const f=b(this,_s).get(h);f?a._setParentAndPosition(f,s,o):(a.pageIndex=h,a.x=s,a.y=o)}};return this.addCommands({cmd:()=>{for(const[a,{newX:s,newY:o,newPageIndex:h}]of n)i(a,s,o,h)},undo:()=>{for(const[a,{savedX:s,savedY:o,savedPageIndex:h}]of n)i(a,s,o,h)},mustExec:!0}),!0}dragSelectedEditors(n,e){if(b(this,rh))for(const i of b(this,rh).keys())i.drag(n,e)}rebuild(n){if(n.parent===null){const e=this.getLayer(n.pageIndex);e?(e.changeParent(n),e.addOrRebuild(n)):(this.addEditor(n),this.addToAnnotationStorage(n),n.rebuild())}else n.parent.addOrRebuild(n)}get isEditorHandlingKeyboard(){var n;return((n=this.getActive())==null?void 0:n.shouldGetKeyboardEvents())||b(this,hr).size===1&&this.firstSelectedEditor.shouldGetKeyboardEvents()}isActive(n){return b(this,Vc)===n}getActive(){return b(this,Vc)}getMode(){return b(this,Ji)}get imageManager(){return Cn(this,"imageManager",new Qk)}getSelectionBoxes(n){if(!n)return null;const e=document.getSelection();for(let d=0,p=e.rangeCount;d<p;d++)if(!n.contains(e.getRangeAt(d).commonAncestorContainer))return null;const{x:i,y:a,width:s,height:o}=n.getBoundingClientRect();let h;switch(n.getAttribute("data-main-rotation")){case"90":h=(d,p,g,x)=>({x:(p-a)/o,y:1-(d+g-i)/s,width:x/o,height:g/s});break;case"180":h=(d,p,g,x)=>({x:1-(d+g-i)/s,y:1-(p+x-a)/o,width:g/s,height:x/o});break;case"270":h=(d,p,g,x)=>({x:1-(p+x-a)/o,y:(d-i)/s,width:x/o,height:g/s});break;default:h=(d,p,g,x)=>({x:(d-i)/s,y:(p-a)/o,width:g/s,height:x/o});break}const f=[];for(let d=0,p=e.rangeCount;d<p;d++){const g=e.getRangeAt(d);if(!g.collapsed)for(const{x,y:w,width:_,height:A}of g.getClientRects())_===0||A===0||f.push(h(x,w,_,A))}return f.length===0?null:f}addChangedExistingAnnotation({annotationElementId:n,id:e}){(b(this,ay)||K(this,ay,new Map)).set(n,e)}removeChangedExistingAnnotation({annotationElementId:n}){var e;(e=b(this,ay))==null||e.delete(n)}renderAnnotationElement(n){var a;const e=(a=b(this,ay))==null?void 0:a.get(n.data.id);if(!e)return;const i=b(this,zd).getRawValue(e);i&&(b(this,Ji)===an.NONE&&!i.hasBeenModified||i.renderAnnotationElement(n))}setMissingCanvas(n,e,i){var s;const a=(s=b(this,Yg))==null?void 0:s.get(n);a&&(a.setCanvas(e,i),b(this,Yg).delete(n))}addMissingCanvas(n,e){(b(this,Yg)||K(this,Yg,new Map)).set(n,e)}};ny=new WeakMap,Vc=new WeakMap,Ii=new WeakMap,_s=new WeakMap,ry=new WeakMap,zd=new WeakMap,ay=new WeakMap,Ql=new WeakMap,Wg=new WeakMap,wb=new WeakMap,iy=new WeakMap,vb=new WeakMap,rh=new WeakMap,N0=new WeakMap,Sb=new WeakMap,d9=new WeakMap,p9=new WeakMap,sy=new WeakMap,g9=new WeakMap,ah=new WeakMap,$g=new WeakMap,oy=new WeakMap,qg=new WeakMap,ih=new WeakMap,Ov=new WeakMap,Vg=new WeakMap,m9=new WeakMap,Kg=new WeakMap,kb=new WeakMap,Ab=new WeakMap,Yg=new WeakMap,b9=new WeakMap,Ji=new WeakMap,hr=new WeakMap,Xd=new WeakMap,Zg=new WeakMap,_b=new WeakMap,x9=new WeakMap,y9=new WeakMap,Qg=new WeakMap,sh=new WeakMap,Wd=new WeakMap,w9=new WeakMap,Jl=new WeakMap,we=new WeakSet,H7=function({anchorNode:n}){return n.nodeType===Node.TEXT_NODE?n.parentElement:n},tA=function(n){const{currentLayer:e}=this;if(e.hasTextLayer(n))return e;for(const i of b(this,_s).values())if(i.hasTextLayer(n))return i;return null},zM=function(){const n=document.getSelection();if(!n||n.isCollapsed)return;const i=it(this,we,H7).call(this,n).closest(".textLayer"),a=this.getSelectionBoxes(i);a&&(b(this,ih)||K(this,ih,new ej(this)),b(this,ih).show(i,a,this.direction==="ltr"))},XM=function(){var s,o,h;const n=document.getSelection();if(!n||n.isCollapsed){b(this,Xd)&&((s=b(this,ih))==null||s.hide(),K(this,Xd,null),it(this,we,Oo).call(this,{hasSelectedText:!1}));return}const{anchorNode:e}=n;if(e===b(this,Xd))return;const a=it(this,we,H7).call(this,n).closest(".textLayer");if(!a){b(this,Xd)&&((o=b(this,ih))==null||o.hide(),K(this,Xd,null),it(this,we,Oo).call(this,{hasSelectedText:!1}));return}if((h=b(this,ih))==null||h.hide(),K(this,Xd,e),it(this,we,Oo).call(this,{hasSelectedText:!0}),!(b(this,Ji)!==an.HIGHLIGHT&&b(this,Ji)!==an.NONE)&&(b(this,Ji)===an.HIGHLIGHT&&this.showAllEditors("highlight",!0,!0),K(this,qg,this.isShiftKeyDown),!this.isShiftKeyDown)){const f=b(this,Ji)===an.HIGHLIGHT?it(this,we,tA).call(this,a):null;f==null||f.toggleDrawing();const d=new AbortController,p=this.combinedSignal(d),g=x=>{x.type==="pointerup"&&x.button!==0||(d.abort(),f==null||f.toggleDrawing(!0),x.type==="pointerup"&&it(this,we,z7).call(this,"main_toolbar"))};window.addEventListener("pointerup",g,{signal:p}),window.addEventListener("blur",g,{signal:p})}},z7=function(n=""){b(this,Ji)===an.HIGHLIGHT?this.highlightSelection(n):b(this,d9)&&it(this,we,zM).call(this)},WM=function(){document.addEventListener("selectionchange",it(this,we,XM).bind(this),{signal:this._signal})},$M=function(){if(b(this,$g))return;K(this,$g,new AbortController);const n=this.combinedSignal(b(this,$g));window.addEventListener("focus",this.focus.bind(this),{signal:n}),window.addEventListener("blur",this.blur.bind(this),{signal:n})},qM=function(){var n;(n=b(this,$g))==null||n.abort(),K(this,$g,null)},eA=function(){if(b(this,Kg))return;K(this,Kg,new AbortController);const n=this.combinedSignal(b(this,Kg));window.addEventListener("keydown",this.keydown.bind(this),{signal:n}),window.addEventListener("keyup",this.keyup.bind(this),{signal:n})},VM=function(){var n;(n=b(this,Kg))==null||n.abort(),K(this,Kg,null)},nA=function(){if(b(this,Wg))return;K(this,Wg,new AbortController);const n=this.combinedSignal(b(this,Wg));document.addEventListener("copy",this.copy.bind(this),{signal:n}),document.addEventListener("cut",this.cut.bind(this),{signal:n}),document.addEventListener("paste",this.paste.bind(this),{signal:n})},rA=function(){var n;(n=b(this,Wg))==null||n.abort(),K(this,Wg,null)},KM=function(){const n=this._signal;document.addEventListener("dragover",this.dragOver.bind(this),{signal:n}),document.addEventListener("drop",this.drop.bind(this),{signal:n})},Oo=function(n){Object.entries(n).some(([i,a])=>b(this,y9)[i]!==a)&&(this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(b(this,y9),n)}),b(this,Ji)===an.HIGHLIGHT&&n.hasSelectedEditor===!1&&it(this,we,Bd).call(this,[[Rn.HIGHLIGHT_FREE,!0]]))},Bd=function(n){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:n})},YM=async function(){if(!b(this,Vg)){K(this,Vg,!0);const n=[];for(const e of b(this,_s).values())n.push(e.enable());await Promise.all(n);for(const e of b(this,Ii).values())e.enable()}},ZM=function(){if(this.unselectAll(),b(this,Vg)){K(this,Vg,!1);for(const n of b(this,_s).values())n.disable();for(const n of b(this,Ii).values())n.disable()}},aA=function(n){const e=b(this,_s).get(n.pageIndex);e?e.addOrRebuild(n):(this.addEditor(n),this.addToAnnotationStorage(n))},QM=function(){let n=null;for(n of b(this,hr));return n},G6=function(){if(b(this,Ii).size===0)return!0;if(b(this,Ii).size===1)for(const n of b(this,Ii).values())return n.isEmpty();return!1},iA=function(n){for(const e of b(this,hr))e.unselect();b(this,hr).clear();for(const e of n)e.isEmpty()||(b(this,hr).add(e),e.select());it(this,we,Oo).call(this,{hasSelectedEditor:this.hasSelection})},Oe(K2,"TRANSLATE_SMALL",1),Oe(K2,"TRANSLATE_BIG",10);let Ax=K2;var ts,oh,j0,cy,ch,Kc,ly,lh,fc,$d,Cb,uh,Jg,Y0,H6,X7;const Fo=class Fo{constructor(n){rt(this,Y0);rt(this,ts,null);rt(this,oh,!1);rt(this,j0,null);rt(this,cy,null);rt(this,ch,null);rt(this,Kc,null);rt(this,ly,!1);rt(this,lh,null);rt(this,fc,null);rt(this,$d,null);rt(this,Cb,null);rt(this,uh,!1);K(this,fc,n),K(this,uh,n._uiManager.useNewAltTextFlow),b(Fo,Jg)||K(Fo,Jg,Object.freeze({added:"pdfjs-editor-new-alt-text-added-button","added-label":"pdfjs-editor-new-alt-text-added-button-label",missing:"pdfjs-editor-new-alt-text-missing-button","missing-label":"pdfjs-editor-new-alt-text-missing-button-label",review:"pdfjs-editor-new-alt-text-to-review-button","review-label":"pdfjs-editor-new-alt-text-to-review-button-label"}))}static initialize(n){Fo._l10n??(Fo._l10n=n)}async render(){const n=K(this,j0,document.createElement("button"));n.className="altText",n.tabIndex="0";const e=K(this,cy,document.createElement("span"));n.append(e),b(this,uh)?(n.classList.add("new"),n.setAttribute("data-l10n-id",b(Fo,Jg).missing),e.setAttribute("data-l10n-id",b(Fo,Jg)["missing-label"])):(n.setAttribute("data-l10n-id","pdfjs-editor-alt-text-button"),e.setAttribute("data-l10n-id","pdfjs-editor-alt-text-button-label"));const i=b(this,fc)._uiManager._signal;n.addEventListener("contextmenu",Z0,{signal:i}),n.addEventListener("pointerdown",s=>s.stopPropagation(),{signal:i});const a=s=>{s.preventDefault(),b(this,fc)._uiManager.editAltText(b(this,fc)),b(this,uh)&&b(this,fc)._reportTelemetry({action:"pdfjs.image.alt_text.image_status_label_clicked",data:{label:b(this,Y0,H6)}})};return n.addEventListener("click",a,{capture:!0,signal:i}),n.addEventListener("keydown",s=>{s.target===n&&s.key==="Enter"&&(K(this,ly,!0),a(s))},{signal:i}),await it(this,Y0,X7).call(this),n}finish(){b(this,j0)&&(b(this,j0).focus({focusVisible:b(this,ly)}),K(this,ly,!1))}isEmpty(){return b(this,uh)?b(this,ts)===null:!b(this,ts)&&!b(this,oh)}hasData(){return b(this,uh)?b(this,ts)!==null||!!b(this,$d):this.isEmpty()}get guessedText(){return b(this,$d)}async setGuessedText(n){b(this,ts)===null&&(K(this,$d,n),K(this,Cb,await Fo._l10n.get("pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer",{generatedAltText:n})),it(this,Y0,X7).call(this))}toggleAltTextBadge(n=!1){var e;if(!b(this,uh)||b(this,ts)){(e=b(this,lh))==null||e.remove(),K(this,lh,null);return}if(!b(this,lh)){const i=K(this,lh,document.createElement("div"));i.className="noAltTextBadge",b(this,fc).div.append(i)}b(this,lh).classList.toggle("hidden",!n)}serialize(n){let e=b(this,ts);return!n&&b(this,$d)===e&&(e=b(this,Cb)),{altText:e,decorative:b(this,oh),guessedText:b(this,$d),textWithDisclaimer:b(this,Cb)}}get data(){return{altText:b(this,ts),decorative:b(this,oh)}}set data({altText:n,decorative:e,guessedText:i,textWithDisclaimer:a,cancel:s=!1}){i&&(K(this,$d,i),K(this,Cb,a)),!(b(this,ts)===n&&b(this,oh)===e)&&(s||(K(this,ts,n),K(this,oh,e)),it(this,Y0,X7).call(this))}toggle(n=!1){b(this,j0)&&(!n&&b(this,Kc)&&(clearTimeout(b(this,Kc)),K(this,Kc,null)),b(this,j0).disabled=!n)}shown(){b(this,fc)._reportTelemetry({action:"pdfjs.image.alt_text.image_status_label_displayed",data:{label:b(this,Y0,H6)}})}destroy(){var n,e;(n=b(this,j0))==null||n.remove(),K(this,j0,null),K(this,cy,null),K(this,ch,null),(e=b(this,lh))==null||e.remove(),K(this,lh,null)}};ts=new WeakMap,oh=new WeakMap,j0=new WeakMap,cy=new WeakMap,ch=new WeakMap,Kc=new WeakMap,ly=new WeakMap,lh=new WeakMap,fc=new WeakMap,$d=new WeakMap,Cb=new WeakMap,uh=new WeakMap,Jg=new WeakMap,Y0=new WeakSet,H6=function(){return b(this,ts)&&"added"||b(this,ts)===null&&this.guessedText&&"review"||"missing"},X7=async function(){var a,s,o;const n=b(this,j0);if(!n)return;if(b(this,uh)){if(n.classList.toggle("done",!!b(this,ts)),n.setAttribute("data-l10n-id",b(Fo,Jg)[b(this,Y0,H6)]),(a=b(this,cy))==null||a.setAttribute("data-l10n-id",b(Fo,Jg)[`${b(this,Y0,H6)}-label`]),!b(this,ts)){(s=b(this,ch))==null||s.remove();return}}else{if(!b(this,ts)&&!b(this,oh)){n.classList.remove("done"),(o=b(this,ch))==null||o.remove();return}n.classList.add("done"),n.setAttribute("data-l10n-id","pdfjs-editor-alt-text-edit-button")}let e=b(this,ch);if(!e){K(this,ch,e=document.createElement("span")),e.className="tooltip",e.setAttribute("role","tooltip"),e.id=`alt-text-tooltip-${b(this,fc).id}`;const h=100,f=b(this,fc)._uiManager._signal;f.addEventListener("abort",()=>{clearTimeout(b(this,Kc)),K(this,Kc,null)},{once:!0}),n.addEventListener("mouseenter",()=>{K(this,Kc,setTimeout(()=>{K(this,Kc,null),b(this,ch).classList.add("show"),b(this,fc)._reportTelemetry({action:"alt_text_tooltip"})},h))},{signal:f}),n.addEventListener("mouseleave",()=>{var d;b(this,Kc)&&(clearTimeout(b(this,Kc)),K(this,Kc,null)),(d=b(this,ch))==null||d.classList.remove("show")},{signal:f})}b(this,oh)?e.setAttribute("data-l10n-id","pdfjs-editor-alt-text-decorative-tooltip"):(e.removeAttribute("data-l10n-id"),e.textContent=b(this,ts)),e.parentNode||n.append(e);const i=b(this,fc).getElementForAltText();i==null||i.setAttribute("aria-describedby",e.id)},rt(Fo,Jg,null),Oe(Fo,"_l10n",null);let xv=Fo;var uy,Ib,v9,S9,k9,A9,_9,qd,Tb,Vd,Eb,tm,Im,JM,tD,eD;const z_=class z_{constructor({container:n,isPinchingDisabled:e=null,isPinchingStopped:i=null,onPinchStart:a=null,onPinching:s=null,onPinchEnd:o=null,signal:h}){rt(this,Im);rt(this,uy);rt(this,Ib,!1);rt(this,v9,null);rt(this,S9);rt(this,k9);rt(this,A9);rt(this,_9);rt(this,qd,null);rt(this,Tb);rt(this,Vd,null);rt(this,Eb);rt(this,tm,null);K(this,uy,n),K(this,v9,i),K(this,S9,e),K(this,k9,a),K(this,A9,s),K(this,_9,o),K(this,Eb,new AbortController),K(this,Tb,AbortSignal.any([h,b(this,Eb).signal])),n.addEventListener("touchstart",it(this,Im,JM).bind(this),{passive:!1,signal:b(this,Tb)})}get MIN_TOUCH_DISTANCE_TO_PINCH(){return 35/v1.pixelRatio}destroy(){var n,e;(n=b(this,Eb))==null||n.abort(),K(this,Eb,null),(e=b(this,qd))==null||e.abort(),K(this,qd,null)}};uy=new WeakMap,Ib=new WeakMap,v9=new WeakMap,S9=new WeakMap,k9=new WeakMap,A9=new WeakMap,_9=new WeakMap,qd=new WeakMap,Tb=new WeakMap,Vd=new WeakMap,Eb=new WeakMap,tm=new WeakMap,Im=new WeakSet,JM=function(n){var a,s,o;if((a=b(this,S9))!=null&&a.call(this))return;if(n.touches.length===1){if(b(this,qd))return;const h=K(this,qd,new AbortController),f=AbortSignal.any([b(this,Tb),h.signal]),d=b(this,uy),p={capture:!0,signal:f,passive:!1},g=x=>{var w;x.pointerType==="touch"&&((w=b(this,qd))==null||w.abort(),K(this,qd,null))};d.addEventListener("pointerdown",x=>{x.pointerType==="touch"&&(pi(x),g(x))},p),d.addEventListener("pointerup",g,p),d.addEventListener("pointercancel",g,p);return}if(!b(this,tm)){K(this,tm,new AbortController);const h=AbortSignal.any([b(this,Tb),b(this,tm).signal]),f=b(this,uy),d={signal:h,capture:!1,passive:!1};f.addEventListener("touchmove",it(this,Im,tD).bind(this),d);const p=it(this,Im,eD).bind(this);f.addEventListener("touchend",p,d),f.addEventListener("touchcancel",p,d),d.capture=!0,f.addEventListener("pointerdown",pi,d),f.addEventListener("pointermove",pi,d),f.addEventListener("pointercancel",pi,d),f.addEventListener("pointerup",pi,d),(s=b(this,k9))==null||s.call(this)}if(pi(n),n.touches.length!==2||(o=b(this,v9))!=null&&o.call(this)){K(this,Vd,null);return}let[e,i]=n.touches;e.identifier>i.identifier&&([e,i]=[i,e]),K(this,Vd,{touch0X:e.screenX,touch0Y:e.screenY,touch1X:i.screenX,touch1Y:i.screenY})},tD=function(n){var F;if(!b(this,Vd)||n.touches.length!==2)return;pi(n);let[e,i]=n.touches;e.identifier>i.identifier&&([e,i]=[i,e]);const{screenX:a,screenY:s}=e,{screenX:o,screenY:h}=i,f=b(this,Vd),{touch0X:d,touch0Y:p,touch1X:g,touch1Y:x}=f,w=g-d,_=x-p,A=o-a,T=h-s,E=Math.hypot(A,T)||1,P=Math.hypot(w,_)||1;if(!b(this,Ib)&&Math.abs(P-E)<=z_.MIN_TOUCH_DISTANCE_TO_PINCH)return;if(f.touch0X=a,f.touch0Y=s,f.touch1X=o,f.touch1Y=h,!b(this,Ib)){K(this,Ib,!0);return}const M=[(a+o)/2,(s+h)/2];(F=b(this,A9))==null||F.call(this,M,P,E)},eD=function(n){var e;n.touches.length>=2||(b(this,tm).abort(),K(this,tm,null),(e=b(this,_9))==null||e.call(this),b(this,Vd)&&(pi(n),K(this,Vd,null),K(this,Ib,!1)))};let yv=z_;var Ob,B0,ra,hy,em,C9,Fb,Cs,Pb,Kd,nm,I9,Mb,Yc,T9,Db,Yd,hh,fy,dy,t0,Rb,E9,Fv,Ve,sA,O9,oA,W7,nD,rD,cA,$7,lA,aD,iD,sD,uA,oD,hA,cD,lD,uD,fA,z6;const xn=class xn{constructor(n){rt(this,Ve);rt(this,Ob,null);rt(this,B0,null);rt(this,ra,null);rt(this,hy,!1);rt(this,em,null);rt(this,C9,"");rt(this,Fb,!1);rt(this,Cs,null);rt(this,Pb,null);rt(this,Kd,null);rt(this,nm,null);rt(this,I9,"");rt(this,Mb,!1);rt(this,Yc,null);rt(this,T9,!1);rt(this,Db,!1);rt(this,Yd,!1);rt(this,hh,null);rt(this,fy,0);rt(this,dy,0);rt(this,t0,null);rt(this,Rb,null);Oe(this,"_isCopy",!1);Oe(this,"_editToolbar",null);Oe(this,"_initialOptions",Object.create(null));Oe(this,"_initialData",null);Oe(this,"_isVisible",!0);Oe(this,"_uiManager",null);Oe(this,"_focusEventsAllowed",!0);rt(this,E9,!1);rt(this,Fv,xn._zIndex++);this.parent=n.parent,this.id=n.id,this.width=this.height=null,this.pageIndex=n.parent.pageIndex,this.name=n.name,this.div=null,this._uiManager=n.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=n.isCentered,this._structTreeParentId=null;const{rotation:e,rawDims:{pageWidth:i,pageHeight:a,pageX:s,pageY:o}}=this.parent.viewport;this.rotation=e,this.pageRotation=(360+e-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[i,a],this.pageTranslation=[s,o];const[h,f]=this.parentDimensions;this.x=n.x/h,this.y=n.y/f,this.isAttachedToDOM=!1,this.deleted=!1}static get _resizerKeyboardManager(){const n=xn.prototype._resizeWithKeyboard,e=Ax.TRANSLATE_SMALL,i=Ax.TRANSLATE_BIG;return Cn(this,"_resizerKeyboardManager",new D5([[["ArrowLeft","mac+ArrowLeft"],n,{args:[-e,0]}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],n,{args:[-i,0]}],[["ArrowRight","mac+ArrowRight"],n,{args:[e,0]}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],n,{args:[i,0]}],[["ArrowUp","mac+ArrowUp"],n,{args:[0,-e]}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],n,{args:[0,-i]}],[["ArrowDown","mac+ArrowDown"],n,{args:[0,e]}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],n,{args:[0,i]}],[["Escape","mac+Escape"],xn.prototype._stopResizingWithKeyboard]]))}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get isDrawer(){return!1}static get _defaultLineColor(){return Cn(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(n){const e=new aj({id:n.parent.getNextId(),parent:n.parent,uiManager:n._uiManager});e.annotationElementId=n.annotationElementId,e.deleted=!0,e._uiManager.addToAnnotationStorage(e)}static initialize(n,e){if(xn._l10n??(xn._l10n=n),xn._l10nResizer||(xn._l10nResizer=Object.freeze({topLeft:"pdfjs-editor-resizer-top-left",topMiddle:"pdfjs-editor-resizer-top-middle",topRight:"pdfjs-editor-resizer-top-right",middleRight:"pdfjs-editor-resizer-middle-right",bottomRight:"pdfjs-editor-resizer-bottom-right",bottomMiddle:"pdfjs-editor-resizer-bottom-middle",bottomLeft:"pdfjs-editor-resizer-bottom-left",middleLeft:"pdfjs-editor-resizer-middle-left"})),xn._borderLineWidth!==-1)return;const i=getComputedStyle(document.documentElement);xn._borderLineWidth=parseFloat(i.getPropertyValue("--outline-width"))||0}static updateDefaultParams(n,e){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(n){return!1}static paste(n,e){Ar("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return b(this,E9)}set _isDraggable(n){var e;K(this,E9,n),(e=this.div)==null||e.classList.toggle("draggable",n)}get isEnterHandled(){return!0}center(){const[n,e]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*e/(n*2),this.y+=this.width*n/(e*2);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*e/(n*2),this.y-=this.width*n/(e*2);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(n){this._uiManager.addCommands(n)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=b(this,Fv)}setParent(n){n!==null?(this.pageIndex=n.pageIndex,this.pageDimensions=n.pageDimensions):it(this,Ve,z6).call(this),this.parent=n}focusin(n){this._focusEventsAllowed&&(b(this,Mb)?K(this,Mb,!1):this.parent.setSelected(this))}focusout(n){var i;if(!this._focusEventsAllowed||!this.isAttachedToDOM)return;const e=n.relatedTarget;e!=null&&e.closest(`#${this.id}`)||(n.preventDefault(),(i=this.parent)!=null&&i.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(n,e,i,a){const[s,o]=this.parentDimensions;[i,a]=this.screenToPageTranslation(i,a),this.x=(n+i)/s,this.y=(e+a)/o,this.fixAndSetPosition()}_moveAfterPaste(n,e){const[i,a]=this.parentDimensions;this.setAt(n*i,e*a,this.width*i,this.height*a),this._onTranslated()}translate(n,e){it(this,Ve,sA).call(this,this.parentDimensions,n,e)}translateInPage(n,e){b(this,Yc)||K(this,Yc,[this.x,this.y,this.width,this.height]),it(this,Ve,sA).call(this,this.pageDimensions,n,e),this.div.scrollIntoView({block:"nearest"})}translationDone(){this._onTranslated(this.x,this.y)}drag(n,e){b(this,Yc)||K(this,Yc,[this.x,this.y,this.width,this.height]);const{div:i,parentDimensions:[a,s]}=this;if(this.x+=n/a,this.y+=e/s,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:g,y:x}=this.div.getBoundingClientRect();this.parent.findNewParent(this,g,x)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:o,y:h}=this;const[f,d]=this.getBaseTranslation();o+=f,h+=d;const{style:p}=i;p.left=`${(100*o).toFixed(2)}%`,p.top=`${(100*h).toFixed(2)}%`,this._onTranslating(o,h),i.scrollIntoView({block:"nearest"})}_onTranslating(n,e){}_onTranslated(n,e){}get _hasBeenMoved(){return!!b(this,Yc)&&(b(this,Yc)[0]!==this.x||b(this,Yc)[1]!==this.y)}get _hasBeenResized(){return!!b(this,Yc)&&(b(this,Yc)[2]!==this.width||b(this,Yc)[3]!==this.height)}getBaseTranslation(){const[n,e]=this.parentDimensions,{_borderLineWidth:i}=xn,a=i/n,s=i/e;switch(this.rotation){case 90:return[-a,s];case 180:return[a,s];case 270:return[a,-s];default:return[-a,-s]}}get _mustFixPosition(){return!0}fixAndSetPosition(n=this.rotation){const{div:{style:e},pageDimensions:[i,a]}=this;let{x:s,y:o,width:h,height:f}=this;if(h*=i,f*=a,s*=i,o*=a,this._mustFixPosition)switch(n){case 0:s=Ro(s,0,i-h),o=Ro(o,0,a-f);break;case 90:s=Ro(s,0,i-f),o=Ro(o,h,a);break;case 180:s=Ro(s,h,i),o=Ro(o,f,a);break;case 270:s=Ro(s,f,i),o=Ro(o,0,a-h);break}this.x=s/=i,this.y=o/=a;const[d,p]=this.getBaseTranslation();s+=d,o+=p,e.left=`${(100*s).toFixed(2)}%`,e.top=`${(100*o).toFixed(2)}%`,this.moveInDOM()}screenToPageTranslation(n,e){var i;return it(i=xn,O9,oA).call(i,n,e,this.parentRotation)}pageTranslationToScreen(n,e){var i;return it(i=xn,O9,oA).call(i,n,e,360-this.parentRotation)}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:n,pageDimensions:[e,i]}=this;return[e*n,i*n]}setDims(n,e){const[i,a]=this.parentDimensions,{style:s}=this.div;s.width=`${(100*n/i).toFixed(2)}%`,b(this,Fb)||(s.height=`${(100*e/a).toFixed(2)}%`)}fixDims(){const{style:n}=this.div,{height:e,width:i}=n,a=i.endsWith("%"),s=!b(this,Fb)&&e.endsWith("%");if(a&&s)return;const[o,h]=this.parentDimensions;a||(n.width=`${(100*parseFloat(i)/o).toFixed(2)}%`),!b(this,Fb)&&!s&&(n.height=`${(100*parseFloat(e)/h).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}_onResized(){}static _round(n){return Math.round(n*1e4)/1e4}_onResizing(){}altTextFinish(){var n;(n=b(this,ra))==null||n.finish()}async addEditToolbar(){return this._editToolbar||b(this,Db)?this._editToolbar:(this._editToolbar=new Zk(this),this.div.append(this._editToolbar.render()),b(this,ra)&&await this._editToolbar.addAltText(b(this,ra)),this._editToolbar)}removeEditToolbar(){var n;this._editToolbar&&(this._editToolbar.remove(),this._editToolbar=null,(n=b(this,ra))==null||n.destroy())}addContainer(n){var i;const e=(i=this._editToolbar)==null?void 0:i.div;e?e.before(n):this.div.append(n)}getClientDimensions(){return this.div.getBoundingClientRect()}async addAltTextButton(){b(this,ra)||(xv.initialize(xn._l10n),K(this,ra,new xv(this)),b(this,Ob)&&(b(this,ra).data=b(this,Ob),K(this,Ob,null)),await this.addEditToolbar())}get altTextData(){var n;return(n=b(this,ra))==null?void 0:n.data}set altTextData(n){b(this,ra)&&(b(this,ra).data=n)}get guessedAltText(){var n;return(n=b(this,ra))==null?void 0:n.guessedText}async setGuessedAltText(n){var e;await((e=b(this,ra))==null?void 0:e.setGuessedText(n))}serializeAltText(n){var e;return(e=b(this,ra))==null?void 0:e.serialize(n)}hasAltText(){return!!b(this,ra)&&!b(this,ra).isEmpty()}hasAltTextData(){var n;return((n=b(this,ra))==null?void 0:n.hasData())??!1}render(){var o;const n=this.div=document.createElement("div");n.setAttribute("data-editor-rotation",(360-this.rotation)%360),n.className=this.name,n.setAttribute("id",this.id),n.tabIndex=b(this,hy)?-1:0,n.setAttribute("role","application"),this.defaultL10nId&&n.setAttribute("data-l10n-id",this.defaultL10nId),this._isVisible||n.classList.add("hidden"),this.setInForeground(),it(this,Ve,hA).call(this);const[e,i]=this.parentDimensions;this.parentRotation%180!==0&&(n.style.maxWidth=`${(100*i/e).toFixed(2)}%`,n.style.maxHeight=`${(100*e/i).toFixed(2)}%`);const[a,s]=this.getInitialTranslation();return this.translate(a,s),R_(this,n,["keydown","pointerdown"]),this.isResizable&&this._uiManager._supportsPinchToZoom&&(b(this,Rb)||K(this,Rb,new yv({container:n,isPinchingDisabled:()=>!this.isSelected,onPinchStart:it(this,Ve,aD).bind(this),onPinching:it(this,Ve,iD).bind(this),onPinchEnd:it(this,Ve,sD).bind(this),signal:this._uiManager._signal}))),(o=this._uiManager._editorUndoBar)==null||o.hide(),n}pointerdown(n){const{isMac:e}=Ms.platform;if(n.button!==0||n.ctrlKey&&e){n.preventDefault();return}if(K(this,Mb,!0),this._isDraggable){it(this,Ve,oD).call(this,n);return}it(this,Ve,uA).call(this,n)}get isSelected(){return this._uiManager.isSelected(this)}_onStartDragging(){}_onStopDragging(){}moveInDOM(){b(this,hh)&&clearTimeout(b(this,hh)),K(this,hh,setTimeout(()=>{var n;K(this,hh,null),(n=this.parent)==null||n.moveEditorInDOM(this)},0))}_setParentAndPosition(n,e,i){n.changeParent(this),this.x=e,this.y=i,this.fixAndSetPosition(),this._onTranslated()}getRect(n,e,i=this.rotation){const a=this.parentScale,[s,o]=this.pageDimensions,[h,f]=this.pageTranslation,d=n/a,p=e/a,g=this.x*s,x=this.y*o,w=this.width*s,_=this.height*o;switch(i){case 0:return[g+d+h,o-x-p-_+f,g+d+w+h,o-x-p+f];case 90:return[g+p+h,o-x+d+f,g+p+_+h,o-x+d+w+f];case 180:return[g-d-w+h,o-x+p+f,g-d+h,o-x+p+_+f];case 270:return[g-p-_+h,o-x-d-w+f,g-p+h,o-x-d+f];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(n,e){const[i,a,s,o]=n,h=s-i,f=o-a;switch(this.rotation){case 0:return[i,e-o,h,f];case 90:return[i,e-a,f,h];case 180:return[s,e-a,h,f];case 270:return[s,e-o,f,h];default:throw new Error("Invalid rotation")}}onceAdded(n){}isEmpty(){return!1}enableEditMode(){K(this,Db,!0)}disableEditMode(){K(this,Db,!1)}isInEditMode(){return b(this,Db)}shouldGetKeyboardEvents(){return b(this,Yd)}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}get isOnScreen(){const{top:n,left:e,bottom:i,right:a}=this.getClientDimensions(),{innerHeight:s,innerWidth:o}=window;return e<o&&a>0&&n<s&&i>0}rebuild(){it(this,Ve,hA).call(this)}rotate(n){}resize(){}serializeDeleted(){var n;return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex,popupRef:((n=this._initialData)==null?void 0:n.popupRef)||""}}serialize(n=!1,e=null){Ar("An editor must be serializable")}static async deserialize(n,e,i){const a=new this.prototype.constructor({parent:e,id:e.getNextId(),uiManager:i});a.rotation=n.rotation,K(a,Ob,n.accessibilityData),a._isCopy=n.isCopy||!1;const[s,o]=a.pageDimensions,[h,f,d,p]=a.getRectInCurrentCoords(n.rect,o);return a.x=h/s,a.y=f/o,a.width=d/s,a.height=p/o,a}get hasBeenModified(){return!!this.annotationElementId&&(this.deleted||this.serialize()!==null)}remove(){var n,e;if((n=b(this,nm))==null||n.abort(),K(this,nm,null),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),b(this,hh)&&(clearTimeout(b(this,hh)),K(this,hh,null)),it(this,Ve,z6).call(this),this.removeEditToolbar(),b(this,t0)){for(const i of b(this,t0).values())clearTimeout(i);K(this,t0,null)}this.parent=null,(e=b(this,Rb))==null||e.destroy(),K(this,Rb,null)}get isResizable(){return!1}makeResizable(){this.isResizable&&(it(this,Ve,nD).call(this),b(this,Cs).classList.remove("hidden"))}get toolbarPosition(){return null}keydown(n){if(!this.isResizable||n.target!==this.div||n.key!=="Enter")return;this._uiManager.setSelected(this),K(this,Kd,{savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height});const e=b(this,Cs).children;if(!b(this,B0)){K(this,B0,Array.from(e));const o=it(this,Ve,cD).bind(this),h=it(this,Ve,lD).bind(this),f=this._uiManager._signal;for(const d of b(this,B0)){const p=d.getAttribute("data-resizer-name");d.setAttribute("role","spinbutton"),d.addEventListener("keydown",o,{signal:f}),d.addEventListener("blur",h,{signal:f}),d.addEventListener("focus",it(this,Ve,uD).bind(this,p),{signal:f}),d.setAttribute("data-l10n-id",xn._l10nResizer[p])}}const i=b(this,B0)[0];let a=0;for(const o of e){if(o===i)break;a++}const s=(360-this.rotation+this.parentRotation)%360/90*(b(this,B0).length/4);if(s!==a){if(s<a)for(let h=0;h<a-s;h++)b(this,Cs).append(b(this,Cs).firstChild);else if(s>a)for(let h=0;h<s-a;h++)b(this,Cs).firstChild.before(b(this,Cs).lastChild);let o=0;for(const h of e){const d=b(this,B0)[o++].getAttribute("data-resizer-name");h.setAttribute("data-l10n-id",xn._l10nResizer[d])}}it(this,Ve,fA).call(this,0),K(this,Yd,!0),b(this,Cs).firstChild.focus({focusVisible:!0}),n.preventDefault(),n.stopImmediatePropagation()}_resizeWithKeyboard(n,e){b(this,Yd)&&it(this,Ve,lA).call(this,b(this,I9),{deltaX:n,deltaY:e,fromKeyboard:!0})}_stopResizingWithKeyboard(){it(this,Ve,z6).call(this),this.div.focus()}select(){var n,e,i;if(this.makeResizable(),(n=this.div)==null||n.classList.add("selectedEditor"),!this._editToolbar){this.addEditToolbar().then(()=>{var a,s;(a=this.div)!=null&&a.classList.contains("selectedEditor")&&((s=this._editToolbar)==null||s.show())});return}(e=this._editToolbar)==null||e.show(),(i=b(this,ra))==null||i.toggleAltTextBadge(!1)}unselect(){var n,e,i,a,s;(n=b(this,Cs))==null||n.classList.add("hidden"),(e=this.div)==null||e.classList.remove("selectedEditor"),(i=this.div)!=null&&i.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus({preventScroll:!0}),(a=this._editToolbar)==null||a.hide(),(s=b(this,ra))==null||s.toggleAltTextBadge(!0)}updateParams(n,e){}disableEditing(){}enableEditing(){}enterInEditMode(){}getElementForAltText(){return this.div}get contentDiv(){return this.div}get isEditing(){return b(this,T9)}set isEditing(n){K(this,T9,n),this.parent&&(n?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(n,e){K(this,Fb,!0);const i=n/e,{style:a}=this.div;a.aspectRatio=i,a.height="auto"}static get MIN_SIZE(){return 16}static canCreateNewEmptyEditor(){return!0}get telemetryInitialData(){return{action:"added"}}get telemetryFinalData(){return null}_reportTelemetry(n,e=!1){if(e){b(this,t0)||K(this,t0,new Map);const{action:i}=n;let a=b(this,t0).get(i);a&&clearTimeout(a),a=setTimeout(()=>{this._reportTelemetry(n),b(this,t0).delete(i),b(this,t0).size===0&&K(this,t0,null)},xn._telemetryTimeout),b(this,t0).set(i,a);return}n.type||(n.type=this.editorType),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:n}})}show(n=this._isVisible){this.div.classList.toggle("hidden",!n),this._isVisible=n}enable(){this.div&&(this.div.tabIndex=0),K(this,hy,!1)}disable(){this.div&&(this.div.tabIndex=-1),K(this,hy,!0)}renderAnnotationElement(n){let e=n.container.querySelector(".annotationContent");if(!e)e=document.createElement("div"),e.classList.add("annotationContent",this.editorType),n.container.prepend(e);else if(e.nodeName==="CANVAS"){const i=e;e=document.createElement("div"),e.classList.add("annotationContent",this.editorType),i.before(e)}return e}resetAnnotationElement(n){const{firstChild:e}=n.container;(e==null?void 0:e.nodeName)==="DIV"&&e.classList.contains("annotationContent")&&e.remove()}};Ob=new WeakMap,B0=new WeakMap,ra=new WeakMap,hy=new WeakMap,em=new WeakMap,C9=new WeakMap,Fb=new WeakMap,Cs=new WeakMap,Pb=new WeakMap,Kd=new WeakMap,nm=new WeakMap,I9=new WeakMap,Mb=new WeakMap,Yc=new WeakMap,T9=new WeakMap,Db=new WeakMap,Yd=new WeakMap,hh=new WeakMap,fy=new WeakMap,dy=new WeakMap,t0=new WeakMap,Rb=new WeakMap,E9=new WeakMap,Fv=new WeakMap,Ve=new WeakSet,sA=function([n,e],i,a){[i,a]=this.screenToPageTranslation(i,a),this.x+=i/n,this.y+=a/e,this._onTranslating(this.x,this.y),this.fixAndSetPosition()},O9=new WeakSet,oA=function(n,e,i){switch(i){case 90:return[e,-n];case 180:return[-n,-e];case 270:return[-e,n];default:return[n,e]}},W7=function(n){switch(n){case 90:{const[e,i]=this.pageDimensions;return[0,-e/i,i/e,0]}case 180:return[-1,0,0,-1];case 270:{const[e,i]=this.pageDimensions;return[0,e/i,-i/e,0]}default:return[1,0,0,1]}},nD=function(){if(b(this,Cs))return;K(this,Cs,document.createElement("div")),b(this,Cs).classList.add("resizers");const n=this._willKeepAspectRatio?["topLeft","topRight","bottomRight","bottomLeft"]:["topLeft","topMiddle","topRight","middleRight","bottomRight","bottomMiddle","bottomLeft","middleLeft"],e=this._uiManager._signal;for(const i of n){const a=document.createElement("div");b(this,Cs).append(a),a.classList.add("resizer",i),a.setAttribute("data-resizer-name",i),a.addEventListener("pointerdown",it(this,Ve,rD).bind(this,i),{signal:e}),a.addEventListener("contextmenu",Z0,{signal:e}),a.tabIndex=-1}this.div.prepend(b(this,Cs))},rD=function(n,e){var p;e.preventDefault();const{isMac:i}=Ms.platform;if(e.button!==0||e.ctrlKey&&i)return;(p=b(this,ra))==null||p.toggle(!1);const a=this._isDraggable;this._isDraggable=!1,K(this,Pb,[e.screenX,e.screenY]);const s=new AbortController,o=this._uiManager.combinedSignal(s);this.parent.togglePointerEvents(!1),window.addEventListener("pointermove",it(this,Ve,lA).bind(this,n),{passive:!0,capture:!0,signal:o}),window.addEventListener("touchmove",pi,{passive:!1,signal:o}),window.addEventListener("contextmenu",Z0,{signal:o}),K(this,Kd,{savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height});const h=this.parent.div.style.cursor,f=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(e.target).cursor;const d=()=>{var g;s.abort(),this.parent.togglePointerEvents(!0),(g=b(this,ra))==null||g.toggle(!0),this._isDraggable=a,this.parent.div.style.cursor=h,this.div.style.cursor=f,it(this,Ve,$7).call(this)};window.addEventListener("pointerup",d,{signal:o}),window.addEventListener("blur",d,{signal:o})},cA=function(n,e,i,a){this.width=i,this.height=a,this.x=n,this.y=e;const[s,o]=this.parentDimensions;this.setDims(s*i,o*a),this.fixAndSetPosition(),this._onResized()},$7=function(){if(!b(this,Kd))return;const{savedX:n,savedY:e,savedWidth:i,savedHeight:a}=b(this,Kd);K(this,Kd,null);const s=this.x,o=this.y,h=this.width,f=this.height;s===n&&o===e&&h===i&&f===a||this.addCommands({cmd:it(this,Ve,cA).bind(this,s,o,h,f),undo:it(this,Ve,cA).bind(this,n,e,i,a),mustExec:!0})},lA=function(n,e){const[i,a]=this.parentDimensions,s=this.x,o=this.y,h=this.width,f=this.height,d=xn.MIN_SIZE/i,p=xn.MIN_SIZE/a,g=it(this,Ve,W7).call(this,this.rotation),x=(J,lt)=>[g[0]*J+g[2]*lt,g[1]*J+g[3]*lt],w=it(this,Ve,W7).call(this,360-this.rotation),_=(J,lt)=>[w[0]*J+w[2]*lt,w[1]*J+w[3]*lt];let A,T,E=!1,P=!1;switch(n){case"topLeft":E=!0,A=(J,lt)=>[0,0],T=(J,lt)=>[J,lt];break;case"topMiddle":A=(J,lt)=>[J/2,0],T=(J,lt)=>[J/2,lt];break;case"topRight":E=!0,A=(J,lt)=>[J,0],T=(J,lt)=>[0,lt];break;case"middleRight":P=!0,A=(J,lt)=>[J,lt/2],T=(J,lt)=>[0,lt/2];break;case"bottomRight":E=!0,A=(J,lt)=>[J,lt],T=(J,lt)=>[0,0];break;case"bottomMiddle":A=(J,lt)=>[J/2,lt],T=(J,lt)=>[J/2,0];break;case"bottomLeft":E=!0,A=(J,lt)=>[0,lt],T=(J,lt)=>[J,0];break;case"middleLeft":P=!0,A=(J,lt)=>[0,lt/2],T=(J,lt)=>[J,lt/2];break}const M=A(h,f),F=T(h,f);let k=x(...F);const O=xn._round(s+k[0]),v=xn._round(o+k[1]);let R=1,G=1,j,U;if(e.fromKeyboard)({deltaX:j,deltaY:U}=e);else{const{screenX:J,screenY:lt}=e,[mt,ut]=b(this,Pb);[j,U]=this.screenToPageTranslation(J-mt,lt-ut),b(this,Pb)[0]=J,b(this,Pb)[1]=lt}if([j,U]=_(j/i,U/a),E){const J=Math.hypot(h,f);R=G=Math.max(Math.min(Math.hypot(F[0]-M[0]-j,F[1]-M[1]-U)/J,1/h,1/f),d/h,p/f)}else P?R=Ro(Math.abs(F[0]-M[0]-j),d,1)/h:G=Ro(Math.abs(F[1]-M[1]-U),p,1)/f;const N=xn._round(h*R),Z=xn._round(f*G);k=x(...T(N,Z));const V=O-k[0],B=v-k[1];b(this,Yc)||K(this,Yc,[this.x,this.y,this.width,this.height]),this.width=N,this.height=Z,this.x=V,this.y=B,this.setDims(i*N,a*Z),this.fixAndSetPosition(),this._onResizing()},aD=function(){var n;K(this,Kd,{savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height}),(n=b(this,ra))==null||n.toggle(!1),this.parent.togglePointerEvents(!1)},iD=function(n,e,i){let s=.7*(i/e)+1-.7;if(s===1)return;const o=it(this,Ve,W7).call(this,this.rotation),h=(O,v)=>[o[0]*O+o[2]*v,o[1]*O+o[3]*v],[f,d]=this.parentDimensions,p=this.x,g=this.y,x=this.width,w=this.height,_=xn.MIN_SIZE/f,A=xn.MIN_SIZE/d;s=Math.max(Math.min(s,1/x,1/w),_/x,A/w);const T=xn._round(x*s),E=xn._round(w*s);if(T===x&&E===w)return;b(this,Yc)||K(this,Yc,[p,g,x,w]);const P=h(x/2,w/2),M=xn._round(p+P[0]),F=xn._round(g+P[1]),k=h(T/2,E/2);this.x=M-k[0],this.y=F-k[1],this.width=T,this.height=E,this.setDims(f*T,d*E),this.fixAndSetPosition(),this._onResizing()},sD=function(){var n;(n=b(this,ra))==null||n.toggle(!0),this.parent.togglePointerEvents(!0),it(this,Ve,$7).call(this)},uA=function(n){const{isMac:e}=Ms.platform;n.ctrlKey&&!e||n.shiftKey||n.metaKey&&e?this.parent.toggleSelected(this):this.parent.setSelected(this)},oD=function(n){const{isSelected:e}=this;this._uiManager.setUpDragSession();let i=!1;const a=new AbortController,s=this._uiManager.combinedSignal(a),o={capture:!0,passive:!1,signal:s},h=d=>{a.abort(),K(this,em,null),K(this,Mb,!1),this._uiManager.endDragSession()||it(this,Ve,uA).call(this,d),i&&this._onStopDragging()};e&&(K(this,fy,n.clientX),K(this,dy,n.clientY),K(this,em,n.pointerId),K(this,C9,n.pointerType),window.addEventListener("pointermove",d=>{i||(i=!0,this._onStartDragging());const{clientX:p,clientY:g,pointerId:x}=d;if(x!==b(this,em)){pi(d);return}const[w,_]=this.screenToPageTranslation(p-b(this,fy),g-b(this,dy));K(this,fy,p),K(this,dy,g),this._uiManager.dragSelectedEditors(w,_)},o),window.addEventListener("touchmove",pi,o),window.addEventListener("pointerdown",d=>{d.pointerType===b(this,C9)&&(b(this,Rb)||d.isPrimary)&&h(d),pi(d)},o));const f=d=>{if(!b(this,em)||b(this,em)===d.pointerId){h(d);return}pi(d)};window.addEventListener("pointerup",f,{signal:s}),window.addEventListener("blur",f,{signal:s})},hA=function(){if(b(this,nm)||!this.div)return;K(this,nm,new AbortController);const n=this._uiManager.combinedSignal(b(this,nm));this.div.addEventListener("focusin",this.focusin.bind(this),{signal:n}),this.div.addEventListener("focusout",this.focusout.bind(this),{signal:n})},cD=function(n){xn._resizerKeyboardManager.exec(this,n)},lD=function(n){var e;b(this,Yd)&&((e=n.relatedTarget)==null?void 0:e.parentNode)!==b(this,Cs)&&it(this,Ve,z6).call(this)},uD=function(n){K(this,I9,b(this,Yd)?n:"")},fA=function(n){if(b(this,B0))for(const e of b(this,B0))e.tabIndex=n},z6=function(){K(this,Yd,!1),it(this,Ve,fA).call(this,-1),it(this,Ve,$7).call(this)},rt(xn,O9),Oe(xn,"_l10n",null),Oe(xn,"_l10nResizer",null),Oe(xn,"_borderLineWidth",-1),Oe(xn,"_colorManager",new Jk),Oe(xn,"_zIndex",1),Oe(xn,"_telemetryTimeout",1e3);let ga=xn;class aj extends ga{constructor(n){super(n),this.annotationElementId=n.annotationElementId,this.deleted=!0}serialize(){return this.serializeDeleted()}}const nP=3285377520,Yl=4294901760,eh=65535;class hD{constructor(n){this.h1=n?n&4294967295:nP,this.h2=n?n&4294967295:nP}update(n){let e,i;if(typeof n=="string"){e=new Uint8Array(n.length*2),i=0;for(let A=0,T=n.length;A<T;A++){const E=n.charCodeAt(A);E<=255?e[i++]=E:(e[i++]=E>>>8,e[i++]=E&255)}}else if(ArrayBuffer.isView(n))e=n.slice(),i=e.byteLength;else throw new Error("Invalid data format, must be a string or TypedArray.");const a=i>>2,s=i-a*4,o=new Uint32Array(e.buffer,0,a);let h=0,f=0,d=this.h1,p=this.h2;const g=3432918353,x=461845907,w=g&eh,_=x&eh;for(let A=0;A<a;A++)A&1?(h=o[A],h=h*g&Yl|h*w&eh,h=h<<15|h>>>17,h=h*x&Yl|h*_&eh,d^=h,d=d<<13|d>>>19,d=d*5+3864292196):(f=o[A],f=f*g&Yl|f*w&eh,f=f<<15|f>>>17,f=f*x&Yl|f*_&eh,p^=f,p=p<<13|p>>>19,p=p*5+3864292196);switch(h=0,s){case 3:h^=e[a*4+2]<<16;case 2:h^=e[a*4+1]<<8;case 1:h^=e[a*4],h=h*g&Yl|h*w&eh,h=h<<15|h>>>17,h=h*x&Yl|h*_&eh,a&1?d^=h:p^=h}this.h1=d,this.h2=p}hexdigest(){let n=this.h1,e=this.h2;return n^=e>>>1,n=n*3981806797&Yl|n*36045&eh,e=e*4283543511&Yl|((e<<16|n>>>16)*2950163797&Yl)>>>16,n^=e>>>1,n=n*444984403&Yl|n*60499&eh,e=e*3301882366&Yl|((e<<16|n>>>16)*3120437893&Yl)>>>16,n^=e>>>1,(n>>>0).toString(16).padStart(8,"0")+(e>>>0).toString(16).padStart(8,"0")}}const dA=Object.freeze({map:null,hash:"",transfer:void 0});var Lb,Nb,es,Pv,fD;class L_{constructor(){rt(this,Pv);rt(this,Lb,!1);rt(this,Nb,null);rt(this,es,new Map);this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(n,e){const i=b(this,es).get(n);return i===void 0?e:Object.assign(e,i)}getRawValue(n){return b(this,es).get(n)}remove(n){if(b(this,es).delete(n),b(this,es).size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const e of b(this,es).values())if(e instanceof ga)return;this.onAnnotationEditor(null)}}setValue(n,e){const i=b(this,es).get(n);let a=!1;if(i!==void 0)for(const[s,o]of Object.entries(e))i[s]!==o&&(a=!0,i[s]=o);else a=!0,b(this,es).set(n,e);a&&it(this,Pv,fD).call(this),e instanceof ga&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(e.constructor._type)}has(n){return b(this,es).has(n)}getAll(){return b(this,es).size>0?E_(b(this,es)):null}setAll(n){for(const[e,i]of Object.entries(n))this.setValue(e,i)}get size(){return b(this,es).size}resetModified(){b(this,Lb)&&(K(this,Lb,!1),typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new dD(this)}get serializable(){if(b(this,es).size===0)return dA;const n=new Map,e=new hD,i=[],a=Object.create(null);let s=!1;for(const[o,h]of b(this,es)){const f=h instanceof ga?h.serialize(!1,a):h;f&&(n.set(o,f),e.update(`${o}:${JSON.stringify(f)}`),s||(s=!!f.bitmap))}if(s)for(const o of n.values())o.bitmap&&i.push(o.bitmap);return n.size>0?{map:n,hash:e.hexdigest(),transfer:i}:dA}get editorStats(){let n=null;const e=new Map;for(const i of b(this,es).values()){if(!(i instanceof ga))continue;const a=i.telemetryFinalData;if(!a)continue;const{type:s}=a;e.has(s)||e.set(s,Object.getPrototypeOf(i).constructor),n||(n=Object.create(null));const o=n[s]||(n[s]=new Map);for(const[h,f]of Object.entries(a)){if(h==="type")continue;let d=o.get(h);d||(d=new Map,o.set(h,d));const p=d.get(f)??0;d.set(f,p+1)}}for(const[i,a]of e)n[i]=a.computeTelemetryFinalData(n[i]);return n}resetModifiedIds(){K(this,Nb,null)}get modifiedIds(){if(b(this,Nb))return b(this,Nb);const n=[];for(const e of b(this,es).values())!(e instanceof ga)||!e.annotationElementId||!e.serialize()||n.push(e.annotationElementId);return K(this,Nb,{ids:new Set(n),hash:n.join(",")})}}Lb=new WeakMap,Nb=new WeakMap,es=new WeakMap,Pv=new WeakSet,fD=function(){b(this,Lb)||(K(this,Lb,!0),typeof this.onSetModified=="function"&&this.onSetModified())};var F9;class dD extends L_{constructor(e){super();rt(this,F9);const{map:i,hash:a,transfer:s}=e.serializable,o=structuredClone(i,s?{transfer:s}:null);K(this,F9,{map:o,hash:a,transfer:s})}get print(){Ar("Should not call PrintAnnotationStorage.print")}get serializable(){return b(this,F9)}get modifiedIds(){return Cn(this,"modifiedIds",{ids:new Set,hash:""})}}F9=new WeakMap;var py;class ij{constructor({ownerDocument:n=globalThis.document,styleElement:e=null}){rt(this,py,new Set);this._document=n,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(n){this.nativeFontFaces.add(n),this._document.fonts.add(n)}removeNativeFontFace(n){this.nativeFontFaces.delete(n),this._document.fonts.delete(n)}insertRule(n){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const e=this.styleElement.sheet;e.insertRule(n,e.cssRules.length)}clear(){for(const n of this.nativeFontFaces)this._document.fonts.delete(n);this.nativeFontFaces.clear(),b(this,py).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont({systemFontInfo:n,disableFontFace:e,_inspectFont:i}){if(!(!n||b(this,py).has(n.loadedName))){if(gi(!e,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:a,src:s,style:o}=n,h=new FontFace(a,s,o);this.addNativeFontFace(h);try{await h.load(),b(this,py).add(a),i==null||i(n)}catch{on(`Cannot load system font: ${n.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(h)}return}Ar("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(n){if(n.attached||n.missingFile&&!n.systemFontInfo)return;if(n.attached=!0,n.systemFontInfo){await this.loadSystemFont(n);return}if(this.isFontLoadingAPISupported){const i=n.createNativeFontFace();if(i){this.addNativeFontFace(i);try{await i.loaded}catch(a){throw on(`Failed to load font '${i.family}': '${a}'.`),n.disableFontFace=!0,a}}return}const e=n.createFontFaceRule();if(e){if(this.insertRule(e),this.isSyncFontLoadingSupported)return;await new Promise(i=>{const a=this._queueLoadingCallback(i);this._prepareFontLoadEvent(n,a)})}}get isFontLoadingAPISupported(){var e;const n=!!((e=this._document)!=null&&e.fonts);return Cn(this,"isFontLoadingAPISupported",n)}get isSyncFontLoadingSupported(){return Cn(this,"isSyncFontLoadingSupported",Es||Ms.platform.isFirefox)}_queueLoadingCallback(n){function e(){for(gi(!a.done,"completeRequest() cannot be called twice."),a.done=!0;i.length>0&&i[0].done;){const s=i.shift();setTimeout(s.callback,0)}}const{loadingRequests:i}=this,a={done:!1,complete:e,callback:n};return i.push(a),a}get _loadTestFont(){const n=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return Cn(this,"_loadTestFont",n)}_prepareFontLoadEvent(n,e){function i(F,k){return F.charCodeAt(k)<<24|F.charCodeAt(k+1)<<16|F.charCodeAt(k+2)<<8|F.charCodeAt(k+3)&255}function a(F,k,O,v){const R=F.substring(0,k),G=F.substring(k+O);return R+v+G}let s,o;const h=this._document.createElement("canvas");h.width=1,h.height=1;const f=h.getContext("2d");let d=0;function p(F,k){if(++d>30){on("Load test font never loaded."),k();return}if(f.font="30px "+F,f.fillText(".",0,20),f.getImageData(0,0,1,1).data[3]>0){k();return}setTimeout(p.bind(null,F,k))}const g=`lt${Date.now()}${this.loadTestFontId++}`;let x=this._loadTestFont;x=a(x,976,g.length,g);const _=16,A=1482184792;let T=i(x,_);for(s=0,o=g.length-3;s<o;s+=4)T=T-A+i(g,s)|0;s<g.length&&(T=T-A+i(g+"XXX",s)|0),x=a(x,_,4,XN(T));const E=`url(data:font/opentype;base64,${btoa(x)});`,P=`@font-face {font-family:"${g}";src:${E}}`;this.insertRule(P);const M=this._document.createElement("div");M.style.visibility="hidden",M.style.width=M.style.height="10px",M.style.position="absolute",M.style.top=M.style.left="0px";for(const F of[n.loadedName,g]){const k=this._document.createElement("span");k.textContent="Hi",k.style.fontFamily=F,M.append(k)}this._document.body.append(M),p(g,()=>{M.remove(),e.complete()})}}py=new WeakMap;class sj{constructor(n,e=null){this.compiledGlyphs=Object.create(null);for(const i in n)this[i]=n[i];this._inspectFont=e}createNativeFontFace(){var e;if(!this.data||this.disableFontFace)return null;let n;if(!this.cssFontInfo)n=new FontFace(this.loadedName,this.data,{});else{const i={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(i.style=`oblique ${this.cssFontInfo.italicAngle}deg`),n=new FontFace(this.cssFontInfo.fontFamily,this.data,i)}return(e=this._inspectFont)==null||e.call(this,this),n}createFontFaceRule(){var i;if(!this.data||this.disableFontFace)return null;const n=`url(data:${this.mimetype};base64,${DM(this.data)});`;let e;if(!this.cssFontInfo)e=`@font-face {font-family:"${this.loadedName}";src:${n}}`;else{let a=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(a+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),e=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${a}src:${n}}`}return(i=this._inspectFont)==null||i.call(this,this,n),e}getPathGenerator(n,e){if(this.compiledGlyphs[e]!==void 0)return this.compiledGlyphs[e];const i=this.loadedName+"_path_"+e;let a;try{a=n.get(i)}catch(o){on(`getPathGenerator - ignoring character: "${o}".`)}const s=new Path2D(a||"");return this.fontExtraProperties||n.delete(i),this.compiledGlyphs[e]=s}}const F7={DATA:1,ERROR:2},fi={CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function rP(){}function uc(S){if(S instanceof Am||S instanceof Vk||S instanceof JF||S instanceof bv||S instanceof jk)return S;switch(S instanceof Error||typeof S=="object"&&S!==null||Ar('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),S.name){case"AbortException":return new Am(S.message);case"InvalidPDFException":return new Vk(S.message);case"PasswordException":return new JF(S.message,S.code);case"ResponseException":return new bv(S.message,S.status,S.missing);case"UnknownErrorException":return new jk(S.message,S.details)}return new jk(S.message,S.toString())}var gy,s0,pD,gD,mD,q7;class X6{constructor(n,e,i){rt(this,s0);rt(this,gy,new AbortController);this.sourceName=n,this.targetName=e,this.comObj=i,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),i.addEventListener("message",it(this,s0,pD).bind(this),{signal:b(this,gy).signal})}on(n,e){const i=this.actionHandler;if(i[n])throw new Error(`There is already an actionName called "${n}"`);i[n]=e}send(n,e,i){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:n,data:e},i)}sendWithPromise(n,e,i){const a=this.callbackId++,s=Promise.withResolvers();this.callbackCapabilities[a]=s;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:n,callbackId:a,data:e},i)}catch(o){s.reject(o)}return s.promise}sendWithStream(n,e,i,a){const s=this.streamId++,o=this.sourceName,h=this.targetName,f=this.comObj;return new ReadableStream({start:d=>{const p=Promise.withResolvers();return this.streamControllers[s]={controller:d,startCall:p,pullCall:null,cancelCall:null,isClosed:!1},f.postMessage({sourceName:o,targetName:h,action:n,streamId:s,data:e,desiredSize:d.desiredSize},a),p.promise},pull:d=>{const p=Promise.withResolvers();return this.streamControllers[s].pullCall=p,f.postMessage({sourceName:o,targetName:h,stream:fi.PULL,streamId:s,desiredSize:d.desiredSize}),p.promise},cancel:d=>{gi(d instanceof Error,"cancel must have a valid reason");const p=Promise.withResolvers();return this.streamControllers[s].cancelCall=p,this.streamControllers[s].isClosed=!0,f.postMessage({sourceName:o,targetName:h,stream:fi.CANCEL,streamId:s,reason:uc(d)}),p.promise}},i)}destroy(){var n;(n=b(this,gy))==null||n.abort(),K(this,gy,null)}}gy=new WeakMap,s0=new WeakSet,pD=function({data:n}){if(n.targetName!==this.sourceName)return;if(n.stream){it(this,s0,mD).call(this,n);return}if(n.callback){const i=n.callbackId,a=this.callbackCapabilities[i];if(!a)throw new Error(`Cannot resolve callback ${i}`);if(delete this.callbackCapabilities[i],n.callback===F7.DATA)a.resolve(n.data);else if(n.callback===F7.ERROR)a.reject(uc(n.reason));else throw new Error("Unexpected callback case");return}const e=this.actionHandler[n.action];if(!e)throw new Error(`Unknown action from worker: ${n.action}`);if(n.callbackId){const i=this.sourceName,a=n.sourceName,s=this.comObj;Promise.try(e,n.data).then(function(o){s.postMessage({sourceName:i,targetName:a,callback:F7.DATA,callbackId:n.callbackId,data:o})},function(o){s.postMessage({sourceName:i,targetName:a,callback:F7.ERROR,callbackId:n.callbackId,reason:uc(o)})});return}if(n.streamId){it(this,s0,gD).call(this,n);return}e(n.data)},gD=function(n){const e=n.streamId,i=this.sourceName,a=n.sourceName,s=this.comObj,o=this,h=this.actionHandler[n.action],f={enqueue(d,p=1,g){if(this.isCancelled)return;const x=this.desiredSize;this.desiredSize-=p,x>0&&this.desiredSize<=0&&(this.sinkCapability=Promise.withResolvers(),this.ready=this.sinkCapability.promise),s.postMessage({sourceName:i,targetName:a,stream:fi.ENQUEUE,streamId:e,chunk:d},g)},close(){this.isCancelled||(this.isCancelled=!0,s.postMessage({sourceName:i,targetName:a,stream:fi.CLOSE,streamId:e}),delete o.streamSinks[e])},error(d){gi(d instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,s.postMessage({sourceName:i,targetName:a,stream:fi.ERROR,streamId:e,reason:uc(d)}))},sinkCapability:Promise.withResolvers(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:n.desiredSize,ready:null};f.sinkCapability.resolve(),f.ready=f.sinkCapability.promise,this.streamSinks[e]=f,Promise.try(h,n.data,f).then(function(){s.postMessage({sourceName:i,targetName:a,stream:fi.START_COMPLETE,streamId:e,success:!0})},function(d){s.postMessage({sourceName:i,targetName:a,stream:fi.START_COMPLETE,streamId:e,reason:uc(d)})})},mD=function(n){const e=n.streamId,i=this.sourceName,a=n.sourceName,s=this.comObj,o=this.streamControllers[e],h=this.streamSinks[e];switch(n.stream){case fi.START_COMPLETE:n.success?o.startCall.resolve():o.startCall.reject(uc(n.reason));break;case fi.PULL_COMPLETE:n.success?o.pullCall.resolve():o.pullCall.reject(uc(n.reason));break;case fi.PULL:if(!h){s.postMessage({sourceName:i,targetName:a,stream:fi.PULL_COMPLETE,streamId:e,success:!0});break}h.desiredSize<=0&&n.desiredSize>0&&h.sinkCapability.resolve(),h.desiredSize=n.desiredSize,Promise.try(h.onPull||rP).then(function(){s.postMessage({sourceName:i,targetName:a,stream:fi.PULL_COMPLETE,streamId:e,success:!0})},function(d){s.postMessage({sourceName:i,targetName:a,stream:fi.PULL_COMPLETE,streamId:e,reason:uc(d)})});break;case fi.ENQUEUE:if(gi(o,"enqueue should have stream controller"),o.isClosed)break;o.controller.enqueue(n.chunk);break;case fi.CLOSE:if(gi(o,"close should have stream controller"),o.isClosed)break;o.isClosed=!0,o.controller.close(),it(this,s0,q7).call(this,o,e);break;case fi.ERROR:gi(o,"error should have stream controller"),o.controller.error(uc(n.reason)),it(this,s0,q7).call(this,o,e);break;case fi.CANCEL_COMPLETE:n.success?o.cancelCall.resolve():o.cancelCall.reject(uc(n.reason)),it(this,s0,q7).call(this,o,e);break;case fi.CANCEL:if(!h)break;const f=uc(n.reason);Promise.try(h.onCancel||rP,f).then(function(){s.postMessage({sourceName:i,targetName:a,stream:fi.CANCEL_COMPLETE,streamId:e,success:!0})},function(d){s.postMessage({sourceName:i,targetName:a,stream:fi.CANCEL_COMPLETE,streamId:e,reason:uc(d)})}),h.sinkCapability.reject(f),h.isCancelled=!0,delete this.streamSinks[e];break;default:throw new Error("Unexpected stream case")}},q7=async function(n,e){var i,a,s;await Promise.allSettled([(i=n.startCall)==null?void 0:i.promise,(a=n.pullCall)==null?void 0:a.promise,(s=n.cancelCall)==null?void 0:s.promise]),delete this.streamControllers[e]};var P9;class bD{constructor({enableHWA:n=!1}){rt(this,P9,!1);K(this,P9,n)}create(n,e){if(n<=0||e<=0)throw new Error("Invalid canvas size");const i=this._createCanvas(n,e);return{canvas:i,context:i.getContext("2d",{willReadFrequently:!b(this,P9)})}}reset(n,e,i){if(!n.canvas)throw new Error("Canvas is not specified");if(e<=0||i<=0)throw new Error("Invalid canvas size");n.canvas.width=e,n.canvas.height=i}destroy(n){if(!n.canvas)throw new Error("Canvas is not specified");n.canvas.width=0,n.canvas.height=0,n.canvas=null,n.context=null}_createCanvas(n,e){Ar("Abstract method `_createCanvas` called.")}}P9=new WeakMap;class oj extends bD{constructor({ownerDocument:n=globalThis.document,enableHWA:e=!1}){super({enableHWA:e}),this._document=n}_createCanvas(n,e){const i=this._document.createElement("canvas");return i.width=n,i.height=e,i}}class xD{constructor({baseUrl:n=null,isCompressed:e=!0}){this.baseUrl=n,this.isCompressed=e}async fetch({name:n}){if(!this.baseUrl)throw new Error("Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.");if(!n)throw new Error("CMap name must be specified.");const e=this.baseUrl+n+(this.isCompressed?".bcmap":"");return this._fetch(e).then(i=>({cMapData:i,isCompressed:this.isCompressed})).catch(i=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${e}`)})}async _fetch(n){Ar("Abstract method `_fetch` called.")}}class aP extends xD{async _fetch(n){const e=await P5(n,this.isCompressed?"arraybuffer":"text");return e instanceof ArrayBuffer?new Uint8Array(e):F5(e)}}class yD{addFilter(n){return"none"}addHCMFilter(n,e){return"none"}addAlphaFilter(n){return"none"}addLuminosityFilter(n){return"none"}addHighlightHCMFilter(n,e,i,a,s){return"none"}destroy(n=!1){}}var jb,my,Zd,Qd,eo,Bb,Ub,Ae,Js,W6,G2,V7,H2,wD,pA,z2,$6,q6,gA,V6;class cj extends yD{constructor({docId:e,ownerDocument:i=globalThis.document}){super();rt(this,Ae);rt(this,jb);rt(this,my);rt(this,Zd);rt(this,Qd);rt(this,eo);rt(this,Bb);rt(this,Ub,0);K(this,Qd,e),K(this,eo,i)}addFilter(e){if(!e)return"none";let i=b(this,Ae,Js).get(e);if(i)return i;const[a,s,o]=it(this,Ae,V7).call(this,e),h=e.length===1?a:`${a}${s}${o}`;if(i=b(this,Ae,Js).get(h),i)return b(this,Ae,Js).set(e,i),i;const f=`g_${b(this,Qd)}_transfer_map_${io(this,Ub)._++}`,d=it(this,Ae,H2).call(this,f);b(this,Ae,Js).set(e,d),b(this,Ae,Js).set(h,d);const p=it(this,Ae,z2).call(this,f);return it(this,Ae,q6).call(this,a,s,o,p),d}addHCMFilter(e,i){var _;const a=`${e}-${i}`,s="base";let o=b(this,Ae,W6).get(s);if((o==null?void 0:o.key)===a||(o?((_=o.filter)==null||_.remove(),o.key=a,o.url="none",o.filter=null):(o={key:a,url:"none",filter:null},b(this,Ae,W6).set(s,o)),!e||!i))return o.url;const h=it(this,Ae,V6).call(this,e);e=Me.makeHexColor(...h);const f=it(this,Ae,V6).call(this,i);if(i=Me.makeHexColor(...f),b(this,Ae,G2).style.color="",e==="#000000"&&i==="#ffffff"||e===i)return o.url;const d=new Array(256);for(let A=0;A<=255;A++){const T=A/255;d[A]=T<=.03928?T/12.92:((T+.055)/1.055)**2.4}const p=d.join(","),g=`g_${b(this,Qd)}_hcm_filter`,x=o.filter=it(this,Ae,z2).call(this,g);it(this,Ae,q6).call(this,p,p,p,x),it(this,Ae,pA).call(this,x);const w=(A,T)=>{const E=h[A]/255,P=f[A]/255,M=new Array(T+1);for(let F=0;F<=T;F++)M[F]=E+F/T*(P-E);return M.join(",")};return it(this,Ae,q6).call(this,w(0,5),w(1,5),w(2,5),x),o.url=it(this,Ae,H2).call(this,g),o.url}addAlphaFilter(e){let i=b(this,Ae,Js).get(e);if(i)return i;const[a]=it(this,Ae,V7).call(this,[e]),s=`alpha_${a}`;if(i=b(this,Ae,Js).get(s),i)return b(this,Ae,Js).set(e,i),i;const o=`g_${b(this,Qd)}_alpha_map_${io(this,Ub)._++}`,h=it(this,Ae,H2).call(this,o);b(this,Ae,Js).set(e,h),b(this,Ae,Js).set(s,h);const f=it(this,Ae,z2).call(this,o);return it(this,Ae,gA).call(this,a,f),h}addLuminosityFilter(e){let i=b(this,Ae,Js).get(e||"luminosity");if(i)return i;let a,s;if(e?([a]=it(this,Ae,V7).call(this,[e]),s=`luminosity_${a}`):s="luminosity",i=b(this,Ae,Js).get(s),i)return b(this,Ae,Js).set(e,i),i;const o=`g_${b(this,Qd)}_luminosity_map_${io(this,Ub)._++}`,h=it(this,Ae,H2).call(this,o);b(this,Ae,Js).set(e,h),b(this,Ae,Js).set(s,h);const f=it(this,Ae,z2).call(this,o);return it(this,Ae,wD).call(this,f),e&&it(this,Ae,gA).call(this,a,f),h}addHighlightHCMFilter(e,i,a,s,o){var P;const h=`${i}-${a}-${s}-${o}`;let f=b(this,Ae,W6).get(e);if((f==null?void 0:f.key)===h||(f?((P=f.filter)==null||P.remove(),f.key=h,f.url="none",f.filter=null):(f={key:h,url:"none",filter:null},b(this,Ae,W6).set(e,f)),!i||!a))return f.url;const[d,p]=[i,a].map(it(this,Ae,V6).bind(this));let g=Math.round(.2126*d[0]+.7152*d[1]+.0722*d[2]),x=Math.round(.2126*p[0]+.7152*p[1]+.0722*p[2]),[w,_]=[s,o].map(it(this,Ae,V6).bind(this));x<g&&([g,x,w,_]=[x,g,_,w]),b(this,Ae,G2).style.color="";const A=(M,F,k)=>{const O=new Array(256),v=(x-g)/k,R=M/255,G=(F-M)/(255*k);let j=0;for(let U=0;U<=k;U++){const N=Math.round(g+U*v),Z=R+U*G;for(let V=j;V<=N;V++)O[V]=Z;j=N+1}for(let U=j;U<256;U++)O[U]=O[j-1];return O.join(",")},T=`g_${b(this,Qd)}_hcm_${e}_filter`,E=f.filter=it(this,Ae,z2).call(this,T);return it(this,Ae,pA).call(this,E),it(this,Ae,q6).call(this,A(w[0],_[0],5),A(w[1],_[1],5),A(w[2],_[2],5),E),f.url=it(this,Ae,H2).call(this,T),f.url}destroy(e=!1){var i,a,s,o;e&&((i=b(this,Bb))!=null&&i.size)||((a=b(this,Zd))==null||a.parentNode.parentNode.remove(),K(this,Zd,null),(s=b(this,my))==null||s.clear(),K(this,my,null),(o=b(this,Bb))==null||o.clear(),K(this,Bb,null),K(this,Ub,0))}}jb=new WeakMap,my=new WeakMap,Zd=new WeakMap,Qd=new WeakMap,eo=new WeakMap,Bb=new WeakMap,Ub=new WeakMap,Ae=new WeakSet,Js=function(){return b(this,my)||K(this,my,new Map)},W6=function(){return b(this,Bb)||K(this,Bb,new Map)},G2=function(){if(!b(this,Zd)){const e=b(this,eo).createElement("div"),{style:i}=e;i.visibility="hidden",i.contain="strict",i.width=i.height=0,i.position="absolute",i.top=i.left=0,i.zIndex=-1;const a=b(this,eo).createElementNS(jd,"svg");a.setAttribute("width",0),a.setAttribute("height",0),K(this,Zd,b(this,eo).createElementNS(jd,"defs")),e.append(a),a.append(b(this,Zd)),b(this,eo).body.append(e)}return b(this,Zd)},V7=function(e){if(e.length===1){const d=e[0],p=new Array(256);for(let x=0;x<256;x++)p[x]=d[x]/255;const g=p.join(",");return[g,g,g]}const[i,a,s]=e,o=new Array(256),h=new Array(256),f=new Array(256);for(let d=0;d<256;d++)o[d]=i[d]/255,h[d]=a[d]/255,f[d]=s[d]/255;return[o.join(","),h.join(","),f.join(",")]},H2=function(e){if(b(this,jb)===void 0){K(this,jb,"");const i=b(this,eo).URL;i!==b(this,eo).baseURI&&(Yv(i)?on('#createUrl: ignore "data:"-URL for performance reasons.'):K(this,jb,i.split("#",1)[0]))}return`url(${b(this,jb)}#${e})`},wD=function(e){const i=b(this,eo).createElementNS(jd,"feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("values","0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"),e.append(i)},pA=function(e){const i=b(this,eo).createElementNS(jd,"feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),e.append(i)},z2=function(e){const i=b(this,eo).createElementNS(jd,"filter");return i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("id",e),b(this,Ae,G2).append(i),i},$6=function(e,i,a){const s=b(this,eo).createElementNS(jd,i);s.setAttribute("type","discrete"),s.setAttribute("tableValues",a),e.append(s)},q6=function(e,i,a,s){const o=b(this,eo).createElementNS(jd,"feComponentTransfer");s.append(o),it(this,Ae,$6).call(this,o,"feFuncR",e),it(this,Ae,$6).call(this,o,"feFuncG",i),it(this,Ae,$6).call(this,o,"feFuncB",a)},gA=function(e,i){const a=b(this,eo).createElementNS(jd,"feComponentTransfer");i.append(a),it(this,Ae,$6).call(this,a,"feFuncA",e)},V6=function(e){return b(this,Ae,G2).style.color=e,D_(getComputedStyle(b(this,Ae,G2)).getPropertyValue("color"))};class vD{constructor({baseUrl:n=null}){this.baseUrl=n}async fetch({filename:n}){if(!this.baseUrl)throw new Error("Ensure that the `standardFontDataUrl` API parameter is provided.");if(!n)throw new Error("Font filename must be specified.");const e=`${this.baseUrl}${n}`;return this._fetch(e).catch(i=>{throw new Error(`Unable to load font data at: ${e}`)})}async _fetch(n){Ar("Abstract method `_fetch` called.")}}class iP extends vD{async _fetch(n){const e=await P5(n,"arraybuffer");return new Uint8Array(e)}}class SD{constructor({baseUrl:n=null}){this.baseUrl=n}async fetch({filename:n}){if(!this.baseUrl)throw new Error("Ensure that the `wasmUrl` API parameter is provided.");if(!n)throw new Error("Wasm filename must be specified.");const e=`${this.baseUrl}${n}`;return this._fetch(e).catch(i=>{throw new Error(`Unable to load wasm data at: ${e}`)})}async _fetch(n){Ar("Abstract method `_fetch` called.")}}class sP extends SD{async _fetch(n){const e=await P5(n,"arraybuffer");return new Uint8Array(e)}}Es&&on("Please use the `legacy` build in Node.js environments.");async function N_(S){const e=await process.getBuiltinModule("fs").promises.readFile(S);return new Uint8Array(e)}class lj extends yD{}class uj extends bD{_createCanvas(n,e){return process.getBuiltinModule("module").createRequire(import.meta.url)("@napi-rs/canvas").createCanvas(n,e)}}class hj extends xD{async _fetch(n){return N_(n)}}class fj extends vD{async _fetch(n){return N_(n)}}class dj extends SD{async _fetch(n){return N_(n)}}const Os={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};function mA(S,n){if(!n)return;const e=n[2]-n[0],i=n[3]-n[1],a=new Path2D;a.rect(n[0],n[1],e,i),S.clip(a)}class j_{isModifyingCurrentTransform(){return!1}getPattern(){Ar("Abstract method `getPattern` called.")}}class pj extends j_{constructor(n){super(),this._type=n[1],this._bbox=n[2],this._colorStops=n[3],this._p0=n[4],this._p1=n[5],this._r0=n[6],this._r1=n[7],this.matrix=null}_createGradient(n){let e;this._type==="axial"?e=n.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(e=n.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const i of this._colorStops)e.addColorStop(i[0],i[1]);return e}getPattern(n,e,i,a){let s;if(a===Os.STROKE||a===Os.FILL){const o=e.current.getClippedPathBoundingBox(a,da(n))||[0,0,0,0],h=Math.ceil(o[2]-o[0])||1,f=Math.ceil(o[3]-o[1])||1,d=e.cachedCanvases.getCanvas("pattern",h,f),p=d.context;p.clearRect(0,0,p.canvas.width,p.canvas.height),p.beginPath(),p.rect(0,0,p.canvas.width,p.canvas.height),p.translate(-o[0],-o[1]),i=Me.transform(i,[1,0,0,1,o[0],o[1]]),p.transform(...e.baseTransform),this.matrix&&p.transform(...this.matrix),mA(p,this._bbox),p.fillStyle=this._createGradient(p),p.fill(),s=n.createPattern(d.canvas,"no-repeat");const g=new DOMMatrix(i);s.setTransform(g)}else mA(n,this._bbox),s=this._createGradient(n);return s}}function Gk(S,n,e,i,a,s,o,h){const f=n.coords,d=n.colors,p=S.data,g=S.width*4;let x;f[e+1]>f[i+1]&&(x=e,e=i,i=x,x=s,s=o,o=x),f[i+1]>f[a+1]&&(x=i,i=a,a=x,x=o,o=h,h=x),f[e+1]>f[i+1]&&(x=e,e=i,i=x,x=s,s=o,o=x);const w=(f[e]+n.offsetX)*n.scaleX,_=(f[e+1]+n.offsetY)*n.scaleY,A=(f[i]+n.offsetX)*n.scaleX,T=(f[i+1]+n.offsetY)*n.scaleY,E=(f[a]+n.offsetX)*n.scaleX,P=(f[a+1]+n.offsetY)*n.scaleY;if(_>=P)return;const M=d[s],F=d[s+1],k=d[s+2],O=d[o],v=d[o+1],R=d[o+2],G=d[h],j=d[h+1],U=d[h+2],N=Math.round(_),Z=Math.round(P);let V,B,J,lt,mt,ut,ft,tt;for(let et=N;et<=Z;et++){if(et<T){const Lt=et<_?0:(_-et)/(_-T);V=w-(w-A)*Lt,B=M-(M-O)*Lt,J=F-(F-v)*Lt,lt=k-(k-R)*Lt}else{let Lt;et>P?Lt=1:T===P?Lt=0:Lt=(T-et)/(T-P),V=A-(A-E)*Lt,B=O-(O-G)*Lt,J=v-(v-j)*Lt,lt=R-(R-U)*Lt}let St;et<_?St=0:et>P?St=1:St=(_-et)/(_-P),mt=w-(w-E)*St,ut=M-(M-G)*St,ft=F-(F-j)*St,tt=k-(k-U)*St;const _t=Math.round(Math.min(V,mt)),Gt=Math.round(Math.max(V,mt));let Wt=g*et+_t*4;for(let Lt=_t;Lt<=Gt;Lt++)St=(V-Lt)/(V-mt),St<0?St=0:St>1&&(St=1),p[Wt++]=B-(B-ut)*St|0,p[Wt++]=J-(J-ft)*St|0,p[Wt++]=lt-(lt-tt)*St|0,p[Wt++]=255}}function gj(S,n,e){const i=n.coords,a=n.colors;let s,o;switch(n.type){case"lattice":const h=n.verticesPerRow,f=Math.floor(i.length/h)-1,d=h-1;for(s=0;s<f;s++){let p=s*h;for(let g=0;g<d;g++,p++)Gk(S,e,i[p],i[p+1],i[p+h],a[p],a[p+1],a[p+h]),Gk(S,e,i[p+h+1],i[p+1],i[p+h],a[p+h+1],a[p+1],a[p+h])}break;case"triangles":for(s=0,o=i.length;s<o;s+=3)Gk(S,e,i[s],i[s+1],i[s+2],a[s],a[s+1],a[s+2]);break;default:throw new Error("illegal figure")}}class mj extends j_{constructor(n){super(),this._coords=n[2],this._colors=n[3],this._figures=n[4],this._bounds=n[5],this._bbox=n[6],this._background=n[7],this.matrix=null}_createMeshCanvas(n,e,i){const h=Math.floor(this._bounds[0]),f=Math.floor(this._bounds[1]),d=Math.ceil(this._bounds[2])-h,p=Math.ceil(this._bounds[3])-f,g=Math.min(Math.ceil(Math.abs(d*n[0]*1.1)),3e3),x=Math.min(Math.ceil(Math.abs(p*n[1]*1.1)),3e3),w=d/g,_=p/x,A={coords:this._coords,colors:this._colors,offsetX:-h,offsetY:-f,scaleX:1/w,scaleY:1/_},T=g+2*2,E=x+2*2,P=i.getCanvas("mesh",T,E),M=P.context,F=M.createImageData(g,x);if(e){const O=F.data;for(let v=0,R=O.length;v<R;v+=4)O[v]=e[0],O[v+1]=e[1],O[v+2]=e[2],O[v+3]=255}for(const O of this._figures)gj(F,O,A);return M.putImageData(F,2,2),{canvas:P.canvas,offsetX:h-2*w,offsetY:f-2*_,scaleX:w,scaleY:_}}isModifyingCurrentTransform(){return!0}getPattern(n,e,i,a){mA(n,this._bbox);let s;if(a===Os.SHADING)s=Me.singularValueDecompose2dScale(da(n));else if(s=Me.singularValueDecompose2dScale(e.baseTransform),this.matrix){const h=Me.singularValueDecompose2dScale(this.matrix);s=[s[0]*h[0],s[1]*h[1]]}const o=this._createMeshCanvas(s,a===Os.SHADING?null:this._background,e.cachedCanvases);return a!==Os.SHADING&&(n.setTransform(...e.baseTransform),this.matrix&&n.transform(...this.matrix)),n.translate(o.offsetX,o.offsetY),n.scale(o.scaleX,o.scaleY),n.createPattern(o.canvas,"no-repeat")}}class bj extends j_{getPattern(){return"hotpink"}}function xj(S){switch(S[0]){case"RadialAxial":return new pj(S);case"Mesh":return new mj(S);case"Dummy":return new bj}throw new Error(`Unknown IR type: ${S[0]}`)}const oP={COLORED:1,UNCOLORED:2},Mv=class Mv{constructor(n,e,i,a){this.color=n[1],this.operatorList=n[2],this.matrix=n[3],this.bbox=n[4],this.xstep=n[5],this.ystep=n[6],this.paintType=n[7],this.tilingType=n[8],this.ctx=e,this.canvasGraphicsFactory=i,this.baseTransform=a}createPatternCanvas(n){const{bbox:e,operatorList:i,paintType:a,tilingType:s,color:o,canvasGraphicsFactory:h}=this;let{xstep:f,ystep:d}=this;f=Math.abs(f),d=Math.abs(d),Kv("TilingType: "+s);const p=e[0],g=e[1],x=e[2],w=e[3],_=x-p,A=w-g,T=Me.singularValueDecompose2dScale(this.matrix),E=Me.singularValueDecompose2dScale(this.baseTransform),P=T[0]*E[0],M=T[1]*E[1];let F=_,k=A,O=!1,v=!1;const R=Math.ceil(f*P),G=Math.ceil(d*M),j=Math.ceil(_*P),U=Math.ceil(A*M);R>=j?F=f:O=!0,G>=U?k=d:v=!0;const N=this.getSizeAndScale(F,this.ctx.canvas.width,P),Z=this.getSizeAndScale(k,this.ctx.canvas.height,M),V=n.cachedCanvases.getCanvas("pattern",N.size,Z.size),B=V.context,J=h.createCanvasGraphics(B);if(J.groupLevel=n.groupLevel,this.setFillAndStrokeStyleToContext(J,a,o),B.translate(-N.scale*p,-Z.scale*g),J.transform(N.scale,0,0,Z.scale,0,0),B.save(),this.clipBbox(J,p,g,x,w),J.baseTransform=da(J.ctx),J.executeOperatorList(i),J.endDrawing(),B.restore(),O||v){const lt=V.canvas;O&&(F=f),v&&(k=d);const mt=this.getSizeAndScale(F,this.ctx.canvas.width,P),ut=this.getSizeAndScale(k,this.ctx.canvas.height,M),ft=mt.size,tt=ut.size,et=n.cachedCanvases.getCanvas("pattern-workaround",ft,tt),St=et.context,_t=O?Math.floor(_/f):0,Gt=v?Math.floor(A/d):0;for(let Wt=0;Wt<=_t;Wt++)for(let Lt=0;Lt<=Gt;Lt++)St.drawImage(lt,ft*Wt,tt*Lt,ft,tt,0,0,ft,tt);return{canvas:et.canvas,scaleX:mt.scale,scaleY:ut.scale,offsetX:p,offsetY:g}}return{canvas:V.canvas,scaleX:N.scale,scaleY:Z.scale,offsetX:p,offsetY:g}}getSizeAndScale(n,e,i){const a=Math.max(Mv.MAX_PATTERN_SIZE,e);let s=Math.ceil(n*i);return s>=a?s=a:i=s/n,{scale:i,size:s}}clipBbox(n,e,i,a,s){const o=a-e,h=s-i;n.ctx.rect(e,i,o,h),n.current.updateRectMinMax(da(n.ctx),[e,i,a,s]),n.clip(),n.endPath()}setFillAndStrokeStyleToContext(n,e,i){const a=n.ctx,s=n.current;switch(e){case oP.COLORED:const o=this.ctx;a.fillStyle=o.fillStyle,a.strokeStyle=o.strokeStyle,s.fillColor=o.fillStyle,s.strokeColor=o.strokeStyle;break;case oP.UNCOLORED:const h=Me.makeHexColor(i[0],i[1],i[2]);a.fillStyle=h,a.strokeStyle=h,s.fillColor=h,s.strokeColor=h;break;default:throw new zN(`Unsupported paint type: ${e}`)}}isModifyingCurrentTransform(){return!1}getPattern(n,e,i,a){let s=i;a!==Os.SHADING&&(s=Me.transform(s,e.baseTransform),this.matrix&&(s=Me.transform(s,this.matrix)));const o=this.createPatternCanvas(e);let h=new DOMMatrix(s);h=h.translate(o.offsetX,o.offsetY),h=h.scale(1/o.scaleX,1/o.scaleY);const f=n.createPattern(o.canvas,"repeat");return f.setTransform(h),f}};Oe(Mv,"MAX_PATTERN_SIZE",3e3);let bA=Mv;function yj({src:S,srcPos:n=0,dest:e,width:i,height:a,nonBlackColor:s=4294967295,inverseDecode:o=!1}){const h=Ms.isLittleEndian?4278190080:255,[f,d]=o?[s,h]:[h,s],p=i>>3,g=i&7,x=S.length;e=new Uint32Array(e.buffer);let w=0;for(let _=0;_<a;_++){for(const T=n+p;n<T;n++){const E=n<x?S[n]:255;e[w++]=E&128?d:f,e[w++]=E&64?d:f,e[w++]=E&32?d:f,e[w++]=E&16?d:f,e[w++]=E&8?d:f,e[w++]=E&4?d:f,e[w++]=E&2?d:f,e[w++]=E&1?d:f}if(g===0)continue;const A=n<x?S[n++]:255;for(let T=0;T<g;T++)e[w++]=A&1<<7-T?d:f}return{srcPos:n,destPos:w}}const cP=16,lP=100,wj=15,uP=10,hP=1e3,mc=16,Hk=new DOMMatrix;function vj(S,n){if(S._removeMirroring)throw new Error("Context is already forwarding operations.");S.__originalSave=S.save,S.__originalRestore=S.restore,S.__originalRotate=S.rotate,S.__originalScale=S.scale,S.__originalTranslate=S.translate,S.__originalTransform=S.transform,S.__originalSetTransform=S.setTransform,S.__originalResetTransform=S.resetTransform,S.__originalClip=S.clip,S.__originalMoveTo=S.moveTo,S.__originalLineTo=S.lineTo,S.__originalBezierCurveTo=S.bezierCurveTo,S.__originalRect=S.rect,S.__originalClosePath=S.closePath,S.__originalBeginPath=S.beginPath,S._removeMirroring=()=>{S.save=S.__originalSave,S.restore=S.__originalRestore,S.rotate=S.__originalRotate,S.scale=S.__originalScale,S.translate=S.__originalTranslate,S.transform=S.__originalTransform,S.setTransform=S.__originalSetTransform,S.resetTransform=S.__originalResetTransform,S.clip=S.__originalClip,S.moveTo=S.__originalMoveTo,S.lineTo=S.__originalLineTo,S.bezierCurveTo=S.__originalBezierCurveTo,S.rect=S.__originalRect,S.closePath=S.__originalClosePath,S.beginPath=S.__originalBeginPath,delete S._removeMirroring},S.save=function(){n.save(),this.__originalSave()},S.restore=function(){n.restore(),this.__originalRestore()},S.translate=function(i,a){n.translate(i,a),this.__originalTranslate(i,a)},S.scale=function(i,a){n.scale(i,a),this.__originalScale(i,a)},S.transform=function(i,a,s,o,h,f){n.transform(i,a,s,o,h,f),this.__originalTransform(i,a,s,o,h,f)},S.setTransform=function(i,a,s,o,h,f){n.setTransform(i,a,s,o,h,f),this.__originalSetTransform(i,a,s,o,h,f)},S.resetTransform=function(){n.resetTransform(),this.__originalResetTransform()},S.rotate=function(i){n.rotate(i),this.__originalRotate(i)},S.clip=function(i){n.clip(i),this.__originalClip(i)},S.moveTo=function(e,i){n.moveTo(e,i),this.__originalMoveTo(e,i)},S.lineTo=function(e,i){n.lineTo(e,i),this.__originalLineTo(e,i)},S.bezierCurveTo=function(e,i,a,s,o,h){n.bezierCurveTo(e,i,a,s,o,h),this.__originalBezierCurveTo(e,i,a,s,o,h)},S.rect=function(e,i,a,s){n.rect(e,i,a,s),this.__originalRect(e,i,a,s)},S.closePath=function(){n.closePath(),this.__originalClosePath()},S.beginPath=function(){n.beginPath(),this.__originalBeginPath()}}class Sj{constructor(n){this.canvasFactory=n,this.cache=Object.create(null)}getCanvas(n,e,i){let a;return this.cache[n]!==void 0?(a=this.cache[n],this.canvasFactory.reset(a,e,i)):(a=this.canvasFactory.create(e,i),this.cache[n]=a),a}delete(n){delete this.cache[n]}clear(){for(const n in this.cache){const e=this.cache[n];this.canvasFactory.destroy(e),delete this.cache[n]}}}function P7(S,n,e,i,a,s,o,h,f,d){const[p,g,x,w,_,A]=da(S);if(g===0&&x===0){const P=o*p+_,M=Math.round(P),F=h*w+A,k=Math.round(F),O=(o+f)*p+_,v=Math.abs(Math.round(O)-M)||1,R=(h+d)*w+A,G=Math.abs(Math.round(R)-k)||1;return S.setTransform(Math.sign(p),0,0,Math.sign(w),M,k),S.drawImage(n,e,i,a,s,0,0,v,G),S.setTransform(p,g,x,w,_,A),[v,G]}if(p===0&&w===0){const P=h*x+_,M=Math.round(P),F=o*g+A,k=Math.round(F),O=(h+d)*x+_,v=Math.abs(Math.round(O)-M)||1,R=(o+f)*g+A,G=Math.abs(Math.round(R)-k)||1;return S.setTransform(0,Math.sign(g),Math.sign(x),0,M,k),S.drawImage(n,e,i,a,s,0,0,G,v),S.setTransform(p,g,x,w,_,A),[G,v]}S.drawImage(n,e,i,a,s,o,h,f,d);const T=Math.hypot(p,g),E=Math.hypot(x,w);return[T*f,E*d]}function kj(S){const{width:n,height:e}=S;if(n>hP||e>hP)return null;const i=1e3,a=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),s=n+1,o=new Uint8Array(s*(e+1));let h,f,d;const p=n+7&-8,g=new Uint8Array(p*e);let x=0;for(const O of S.data){let v=128;for(;v>0;)g[x++]=O&v?0:255,v>>=1}let w=0;for(x=0,g[x]!==0&&(o[0]=1,++w),f=1;f<n;f++)g[x]!==g[x+1]&&(o[f]=g[x]?2:1,++w),x++;for(g[x]!==0&&(o[f]=2,++w),h=1;h<e;h++){x=h*p,d=h*s,g[x-p]!==g[x]&&(o[d]=g[x]?1:8,++w);let O=(g[x]?4:0)+(g[x-p]?8:0);for(f=1;f<n;f++)O=(O>>2)+(g[x+1]?4:0)+(g[x-p+1]?8:0),a[O]&&(o[d+f]=a[O],++w),x++;if(g[x-p]!==g[x]&&(o[d+f]=g[x]?2:4,++w),w>i)return null}for(x=p*(e-1),d=h*s,g[x]!==0&&(o[d]=8,++w),f=1;f<n;f++)g[x]!==g[x+1]&&(o[d+f]=g[x]?4:8,++w),x++;if(g[x]!==0&&(o[d+f]=4,++w),w>i)return null;const _=new Int32Array([0,s,-1,0,-s,0,0,0,1]),A=new Path2D,{a:T,b:E,c:P,d:M,e:F,f:k}=new DOMMatrix().scaleSelf(1/n,-1/e).translateSelf(0,-e);for(h=0;w&&h<=e;h++){let O=h*s;const v=O+n;for(;O<v&&!o[O];)O++;if(O===v)continue;let R=O%s,G=h;A.moveTo(T*R+P*G+F,E*R+M*G+k);const j=O;let U=o[O];do{const N=_[U];do O+=N;while(!o[O]);const Z=o[O];Z!==5&&Z!==10?(U=Z,o[O]=0):(U=Z&51*U>>4,o[O]&=U>>2|U<<2),R=O%s,G=O/s|0,A.lineTo(T*R+P*G+F,E*R+M*G+k),o[O]||--w}while(j!==O);--h}return A}class fP{constructor(n,e){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=FM,this.textMatrixScale=1,this.fontMatrix=qk,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=Qs.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.patternStroke=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,n,e])}clone(){const n=Object.create(this);return n.clipBox=this.clipBox.slice(),n}updateRectMinMax(n,e){const i=Me.applyTransform(e,n),a=Me.applyTransform(e.slice(2),n),s=Me.applyTransform([e[0],e[3]],n),o=Me.applyTransform([e[2],e[1]],n);this.minX=Math.min(this.minX,i[0],a[0],s[0],o[0]),this.minY=Math.min(this.minY,i[1],a[1],s[1],o[1]),this.maxX=Math.max(this.maxX,i[0],a[0],s[0],o[0]),this.maxY=Math.max(this.maxY,i[1],a[1],s[1],o[1])}getPathBoundingBox(n=Os.FILL,e=null){const i=[this.minX,this.minY,this.maxX,this.maxY];if(n===Os.STROKE){e||Ar("Stroke bounding box must include transform.");const a=Me.singularValueDecompose2dScale(e),s=a[0]*this.lineWidth/2,o=a[1]*this.lineWidth/2;i[0]-=s,i[1]-=o,i[2]+=s,i[3]+=o}return i}updateClipFromPath(){const n=Me.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(n||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(n){this.clipBox=n,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(n=Os.FILL,e=null){return Me.intersect(this.clipBox,this.getPathBoundingBox(n,e))}}function dP(S,n){if(n instanceof ImageData){S.putImageData(n,0,0);return}const e=n.height,i=n.width,a=e%mc,s=(e-a)/mc,o=a===0?s:s+1,h=S.createImageData(i,mc);let f=0,d;const p=n.data,g=h.data;let x,w,_,A;if(n.kind===j7.GRAYSCALE_1BPP){const T=p.byteLength,E=new Uint32Array(g.buffer,0,g.byteLength>>2),P=E.length,M=i+7>>3,F=4294967295,k=Ms.isLittleEndian?4278190080:255;for(x=0;x<o;x++){for(_=x<s?mc:a,d=0,w=0;w<_;w++){const O=T-f;let v=0;const R=O>M?i:O*8-7,G=R&-8;let j=0,U=0;for(;v<G;v+=8)U=p[f++],E[d++]=U&128?F:k,E[d++]=U&64?F:k,E[d++]=U&32?F:k,E[d++]=U&16?F:k,E[d++]=U&8?F:k,E[d++]=U&4?F:k,E[d++]=U&2?F:k,E[d++]=U&1?F:k;for(;v<R;v++)j===0&&(U=p[f++],j=128),E[d++]=U&j?F:k,j>>=1}for(;d<P;)E[d++]=0;S.putImageData(h,0,x*mc)}}else if(n.kind===j7.RGBA_32BPP){for(w=0,A=i*mc*4,x=0;x<s;x++)g.set(p.subarray(f,f+A)),f+=A,S.putImageData(h,0,w),w+=mc;x<o&&(A=i*a*4,g.set(p.subarray(f,f+A)),S.putImageData(h,0,w))}else if(n.kind===j7.RGB_24BPP)for(_=mc,A=i*_,x=0;x<o;x++){for(x>=s&&(_=a,A=i*_),d=0,w=A;w--;)g[d++]=p[f++],g[d++]=p[f++],g[d++]=p[f++],g[d++]=255;S.putImageData(h,0,x*mc)}else throw new Error(`bad image kind: ${n.kind}`)}function pP(S,n){if(n.bitmap){S.drawImage(n.bitmap,0,0);return}const e=n.height,i=n.width,a=e%mc,s=(e-a)/mc,o=a===0?s:s+1,h=S.createImageData(i,mc);let f=0;const d=n.data,p=h.data;for(let g=0;g<o;g++){const x=g<s?mc:a;({srcPos:f}=yj({src:d,srcPos:f,dest:p,width:i,height:x,nonBlackColor:0})),S.putImageData(h,0,g*mc)}}function L6(S,n){const e=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const i of e)S[i]!==void 0&&(n[i]=S[i]);S.setLineDash!==void 0&&(n.setLineDash(S.getLineDash()),n.lineDashOffset=S.lineDashOffset)}function M7(S){if(S.strokeStyle=S.fillStyle="#000000",S.fillRule="nonzero",S.globalAlpha=1,S.lineWidth=1,S.lineCap="butt",S.lineJoin="miter",S.miterLimit=10,S.globalCompositeOperation="source-over",S.font="10px sans-serif",S.setLineDash!==void 0&&(S.setLineDash([]),S.lineDashOffset=0),!Es){const{filter:n}=S;n!=="none"&&n!==""&&(S.filter="none")}}function gP(S,n){if(n)return!0;const e=Me.singularValueDecompose2dScale(S);e[0]=Math.fround(e[0]),e[1]=Math.fround(e[1]);const i=Math.fround(v1.pixelRatio*_m.PDF_TO_CSS_UNITS);return e[0]<=i&&e[1]<=i}const Aj=["butt","round","square"],_j=["miter","round","bevel"],Cj={},mP={};var Q0,xA,yA,wA;const X_=class X_{constructor(n,e,i,a,s,{optionalContentConfig:o,markedContentStack:h=null},f,d){rt(this,Q0);this.ctx=n,this.current=new fP(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=e,this.objs=i,this.canvasFactory=a,this.filterFactory=s,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=h||[],this.optionalContentConfig=o,this.cachedCanvases=new Sj(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=f,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=d,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(n,e=null){return typeof n=="string"?n.startsWith("g_")?this.commonObjs.get(n):this.objs.get(n):e}beginDrawing({transform:n,viewport:e,transparency:i=!1,background:a=null}){const s=this.ctx.canvas.width,o=this.ctx.canvas.height,h=this.ctx.fillStyle;if(this.ctx.fillStyle=a||"#ffffff",this.ctx.fillRect(0,0,s,o),this.ctx.fillStyle=h,i){const f=this.cachedCanvases.getCanvas("transparent",s,o);this.compositeCtx=this.ctx,this.transparentCanvas=f.canvas,this.ctx=f.context,this.ctx.save(),this.ctx.transform(...da(this.compositeCtx))}this.ctx.save(),M7(this.ctx),n&&(this.ctx.transform(...n),this.outputScaleX=n[0],this.outputScaleY=n[0]),this.ctx.transform(...e.transform),this.viewportScale=e.scale,this.baseTransform=da(this.ctx)}executeOperatorList(n,e,i,a){const s=n.argsArray,o=n.fnArray;let h=e||0;const f=s.length;if(f===h)return h;const d=f-h>uP&&typeof i=="function",p=d?Date.now()+wj:0;let g=0;const x=this.commonObjs,w=this.objs;let _;for(;;){if(a!==void 0&&h===a.nextBreakPoint)return a.breakIt(h,i),h;if(_=o[h],_!==mv.dependency)this[_].apply(this,s[h]);else for(const A of s[h]){const T=A.startsWith("g_")?x:w;if(!T.has(A))return T.get(A,i),h}if(h++,h===f)return h;if(d&&++g>uP){if(Date.now()>p)return i(),h;g=0}}}endDrawing(){it(this,Q0,xA).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const n of this._cachedBitmapsMap.values()){for(const e of n.values())typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement&&(e.width=e.height=0);n.clear()}this._cachedBitmapsMap.clear(),it(this,Q0,yA).call(this)}_scaleImage(n,e){const i=n.width??n.displayWidth,a=n.height??n.displayHeight;let s=Math.max(Math.hypot(e[0],e[1]),1),o=Math.max(Math.hypot(e[2],e[3]),1),h=i,f=a,d="prescale1",p,g;for(;s>2&&h>1||o>2&&f>1;){let x=h,w=f;s>2&&h>1&&(x=h>=16384?Math.floor(h/2)-1||1:Math.ceil(h/2),s/=h/x),o>2&&f>1&&(w=f>=16384?Math.floor(f/2)-1||1:Math.ceil(f)/2,o/=f/w),p=this.cachedCanvases.getCanvas(d,x,w),g=p.context,g.clearRect(0,0,x,w),g.drawImage(n,0,0,h,f,0,0,x,w),n=p.canvas,h=x,f=w,d=d==="prescale1"?"prescale2":"prescale1"}return{img:n,paintWidth:h,paintHeight:f}}_createMaskCanvas(n){const e=this.ctx,{width:i,height:a}=n,s=this.current.fillColor,o=this.current.patternFill,h=da(e);let f,d,p,g;if((n.bitmap||n.data)&&n.count>1){const R=n.bitmap||n.data.buffer;d=JSON.stringify(o?h:[h.slice(0,4),s]),f=this._cachedBitmapsMap.get(R),f||(f=new Map,this._cachedBitmapsMap.set(R,f));const G=f.get(d);if(G&&!o){const j=Math.round(Math.min(h[0],h[2])+h[4]),U=Math.round(Math.min(h[1],h[3])+h[5]);return{canvas:G,offsetX:j,offsetY:U}}p=G}p||(g=this.cachedCanvases.getCanvas("maskCanvas",i,a),pP(g.context,n));let x=Me.transform(h,[1/i,0,0,-1/a,0,0]);x=Me.transform(x,[1,0,0,1,0,-a]);const[w,_,A,T]=Me.getAxialAlignedBoundingBox([0,0,i,a],x),E=Math.round(A-w)||1,P=Math.round(T-_)||1,M=this.cachedCanvases.getCanvas("fillCanvas",E,P),F=M.context,k=w,O=_;F.translate(-k,-O),F.transform(...x),p||(p=this._scaleImage(g.canvas,th(F)),p=p.img,f&&o&&f.set(d,p)),F.imageSmoothingEnabled=gP(da(F),n.interpolate),P7(F,p,0,0,p.width,p.height,0,0,i,a),F.globalCompositeOperation="source-in";const v=Me.transform(th(F),[1,0,0,1,-k,-O]);return F.fillStyle=o?s.getPattern(e,this,v,Os.FILL):s,F.fillRect(0,0,i,a),f&&!o&&(this.cachedCanvases.delete("fillCanvas"),f.set(d,M.canvas)),{canvas:M.canvas,offsetX:Math.round(k),offsetY:Math.round(O)}}setLineWidth(n){n!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=n,this.ctx.lineWidth=n}setLineCap(n){this.ctx.lineCap=Aj[n]}setLineJoin(n){this.ctx.lineJoin=_j[n]}setMiterLimit(n){this.ctx.miterLimit=n}setDash(n,e){const i=this.ctx;i.setLineDash!==void 0&&(i.setLineDash(n),i.lineDashOffset=e)}setRenderingIntent(n){}setFlatness(n){}setGState(n){for(const[e,i]of n)switch(e){case"LW":this.setLineWidth(i);break;case"LC":this.setLineCap(i);break;case"LJ":this.setLineJoin(i);break;case"ML":this.setMiterLimit(i);break;case"D":this.setDash(i[0],i[1]);break;case"RI":this.setRenderingIntent(i);break;case"FL":this.setFlatness(i);break;case"Font":this.setFont(i[0],i[1]);break;case"CA":this.current.strokeAlpha=i;break;case"ca":this.ctx.globalAlpha=this.current.fillAlpha=i;break;case"BM":this.ctx.globalCompositeOperation=i;break;case"SMask":this.current.activeSMask=i?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(i);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const n=this.inSMaskMode;this.current.activeSMask&&!n?this.beginSMaskMode():!this.current.activeSMask&&n&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const n=this.ctx.canvas.width,e=this.ctx.canvas.height,i="smaskGroupAt"+this.groupLevel,a=this.cachedCanvases.getCanvas(i,n,e);this.suspendedCtx=this.ctx;const s=this.ctx=a.context;s.setTransform(this.suspendedCtx.getTransform()),L6(this.suspendedCtx,s),vj(s,this.suspendedCtx),this.setGState([["BM","source-over"]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),L6(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(n){if(!this.current.activeSMask)return;n?(n[0]=Math.floor(n[0]),n[1]=Math.floor(n[1]),n[2]=Math.ceil(n[2]),n[3]=Math.ceil(n[3])):n=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const e=this.current.activeSMask,i=this.suspendedCtx;this.composeSMask(i,e,this.ctx,n),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}composeSMask(n,e,i,a){const s=a[0],o=a[1],h=a[2]-s,f=a[3]-o;h===0||f===0||(this.genericComposeSMask(e.context,i,h,f,e.subtype,e.backdrop,e.transferMap,s,o,e.offsetX,e.offsetY),n.save(),n.globalAlpha=1,n.globalCompositeOperation="source-over",n.setTransform(1,0,0,1,0,0),n.drawImage(i.canvas,0,0),n.restore())}genericComposeSMask(n,e,i,a,s,o,h,f,d,p,g){let x=n.canvas,w=f-p,_=d-g;if(o){const T=Me.makeHexColor(...o);if(w<0||_<0||w+i>x.width||_+a>x.height){const E=this.cachedCanvases.getCanvas("maskExtension",i,a),P=E.context;P.drawImage(x,-w,-_),P.globalCompositeOperation="destination-atop",P.fillStyle=T,P.fillRect(0,0,i,a),P.globalCompositeOperation="source-over",x=E.canvas,w=_=0}else{n.save(),n.globalAlpha=1,n.setTransform(1,0,0,1,0,0);const E=new Path2D;E.rect(w,_,i,a),n.clip(E),n.globalCompositeOperation="destination-atop",n.fillStyle=T,n.fillRect(w,_,i,a),n.restore()}}e.save(),e.globalAlpha=1,e.setTransform(1,0,0,1,0,0),s==="Alpha"&&h?e.filter=this.filterFactory.addAlphaFilter(h):s==="Luminosity"&&(e.filter=this.filterFactory.addLuminosityFilter(h));const A=new Path2D;A.rect(f,d,i,a),e.clip(A),e.globalCompositeOperation="destination-in",e.drawImage(x,w,_,i,a,f,d,i,a),e.restore()}save(){this.inSMaskMode&&L6(this.ctx,this.suspendedCtx),this.ctx.save();const n=this.current;this.stateStack.push(n),this.current=n.clone()}restore(){if(this.stateStack.length===0){this.inSMaskMode&&this.endSMaskMode();return}this.current=this.stateStack.pop(),this.ctx.restore(),this.inSMaskMode&&L6(this.suspendedCtx,this.ctx),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}transform(n,e,i,a,s,o){this.ctx.transform(n,e,i,a,s,o),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(n,e,i){let[a]=e;if(!i){a||(a=e[0]=new Path2D),this[n](a);return}if(!(a instanceof Path2D)){const s=e[0]=new Path2D;for(let o=0,h=a.length;o<h;)switch(a[o++]){case O7.moveTo:s.moveTo(a[o++],a[o++]);break;case O7.lineTo:s.lineTo(a[o++],a[o++]);break;case O7.curveTo:s.bezierCurveTo(a[o++],a[o++],a[o++],a[o++],a[o++],a[o++]);break;case O7.closePath:s.closePath();break;default:on(`Unrecognized drawing path operator: ${a[o-1]}`);break}a=s}this.current.updateRectMinMax(da(this.ctx),i),this[n](a)}closePath(){this.ctx.closePath()}stroke(n,e=!0){const i=this.ctx,a=this.current.strokeColor;if(i.globalAlpha=this.current.strokeAlpha,this.contentVisible)if(typeof a=="object"&&(a!=null&&a.getPattern)){const s=a.isModifyingCurrentTransform()?i.getTransform():null;if(i.save(),i.strokeStyle=a.getPattern(i,this,th(i),Os.STROKE),s){const o=new Path2D;o.addPath(n,i.getTransform().invertSelf().multiplySelf(s)),n=o}this.rescaleAndStroke(n,!1),i.restore()}else this.rescaleAndStroke(n,!0);e&&this.consumePath(n,this.current.getClippedPathBoundingBox(Os.STROKE,da(this.ctx))),i.globalAlpha=this.current.fillAlpha}closeStroke(n){this.stroke(n)}fill(n,e=!0){const i=this.ctx,a=this.current.fillColor,s=this.current.patternFill;let o=!1;if(s){const f=a.isModifyingCurrentTransform()?i.getTransform():null;if(i.save(),i.fillStyle=a.getPattern(i,this,th(i),Os.FILL),f){const d=new Path2D;d.addPath(n,i.getTransform().invertSelf().multiplySelf(f)),n=d}o=!0}const h=this.current.getClippedPathBoundingBox();this.contentVisible&&h!==null&&(this.pendingEOFill?(i.fill(n,"evenodd"),this.pendingEOFill=!1):i.fill(n)),o&&i.restore(),e&&this.consumePath(n,h)}eoFill(n){this.pendingEOFill=!0,this.fill(n)}fillStroke(n){this.fill(n,!1),this.stroke(n,!1),this.consumePath(n)}eoFillStroke(n){this.pendingEOFill=!0,this.fillStroke(n)}closeFillStroke(n){this.fillStroke(n)}closeEOFillStroke(n){this.pendingEOFill=!0,this.fillStroke(n)}endPath(n){this.consumePath(n)}clip(){this.pendingClip=Cj}eoClip(){this.pendingClip=mP}beginText(){this.current.textMatrix=FM,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const n=this.pendingTextPaths,e=this.ctx;if(n===void 0){e.beginPath();return}const i=new Path2D,a=e.getTransform().invertSelf();for(const{transform:s,x:o,y:h,fontSize:f,path:d}of n)i.addPath(d,new DOMMatrix(s).preMultiplySelf(a).translate(o,h).scale(f,-f));e.clip(i),e.beginPath(),delete this.pendingTextPaths}setCharSpacing(n){this.current.charSpacing=n}setWordSpacing(n){this.current.wordSpacing=n}setHScale(n){this.current.textHScale=n/100}setLeading(n){this.current.leading=-n}setFont(n,e){var p;const i=this.commonObjs.get(n),a=this.current;if(!i)throw new Error(`Can't find font for ${n}`);if(a.fontMatrix=i.fontMatrix||qk,(a.fontMatrix[0]===0||a.fontMatrix[3]===0)&&on("Invalid font matrix for font "+n),e<0?(e=-e,a.fontDirection=-1):a.fontDirection=1,this.current.font=i,this.current.fontSize=e,i.isType3Font)return;const s=i.loadedName||"sans-serif",o=((p=i.systemFontInfo)==null?void 0:p.css)||`"${s}", ${i.fallbackName}`;let h="normal";i.black?h="900":i.bold&&(h="bold");const f=i.italic?"italic":"normal";let d=e;e<cP?d=cP:e>lP&&(d=lP),this.current.fontSizeScale=e/d,this.ctx.font=`${f} ${h} ${d}px ${o}`}setTextRenderingMode(n){this.current.textRenderingMode=n}setTextRise(n){this.current.textRise=n}moveText(n,e){this.current.x=this.current.lineX+=n,this.current.y=this.current.lineY+=e}setLeadingMoveText(n,e){this.setLeading(-e),this.moveText(n,e)}setTextMatrix(n,e,i,a,s,o){this.current.textMatrix=[n,e,i,a,s,o],this.current.textMatrixScale=Math.hypot(n,e),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(n,e,i,a,s){const o=this.ctx,h=this.current,f=h.font,d=h.textRenderingMode,p=h.fontSize/h.fontSizeScale,g=d&Qs.FILL_STROKE_MASK,x=!!(d&Qs.ADD_TO_PATH_FLAG),w=h.patternFill&&!f.missingFile,_=h.patternStroke&&!f.missingFile;let A;if((f.disableFontFace||x||w||_)&&(A=f.getPathGenerator(this.commonObjs,n)),f.disableFontFace||w||_){o.save(),o.translate(e,i),o.scale(p,-p);let T;if((g===Qs.FILL||g===Qs.FILL_STROKE)&&(a?(T=o.getTransform(),o.setTransform(...a),o.fill(it(this,Q0,wA).call(this,A,T,a))):o.fill(A)),g===Qs.STROKE||g===Qs.FILL_STROKE)if(s){T||(T=o.getTransform()),o.setTransform(...s);const{a:E,b:P,c:M,d:F}=T,k=Me.inverseTransform(s),O=Me.transform([E,P,M,F,0,0],k),[v,R]=Me.singularValueDecompose2dScale(O);o.lineWidth*=Math.max(v,R)/p,o.stroke(it(this,Q0,wA).call(this,A,T,s))}else o.lineWidth/=p,o.stroke(A);o.restore()}else(g===Qs.FILL||g===Qs.FILL_STROKE)&&o.fillText(n,e,i),(g===Qs.STROKE||g===Qs.FILL_STROKE)&&o.strokeText(n,e,i);x&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:da(o),x:e,y:i,fontSize:p,path:A})}get isFontSubpixelAAEnabled(){const{context:n}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);n.scale(1.5,1),n.fillText("I",0,10);const e=n.getImageData(0,0,10,10).data;let i=!1;for(let a=3;a<e.length;a+=4)if(e[a]>0&&e[a]<255){i=!0;break}return Cn(this,"isFontSubpixelAAEnabled",i)}showText(n){const e=this.current,i=e.font;if(i.isType3Font)return this.showType3Text(n);const a=e.fontSize;if(a===0)return;const s=this.ctx,o=e.fontSizeScale,h=e.charSpacing,f=e.wordSpacing,d=e.fontDirection,p=e.textHScale*d,g=n.length,x=i.vertical,w=x?1:-1,_=i.defaultVMetrics,A=a*e.fontMatrix[0],T=e.textRenderingMode===Qs.FILL&&!i.disableFontFace&&!e.patternFill;s.save(),s.transform(...e.textMatrix),s.translate(e.x,e.y+e.textRise),d>0?s.scale(p,-1):s.scale(p,1);let E,P;if(e.patternFill){s.save();const v=e.fillColor.getPattern(s,this,th(s),Os.FILL);E=da(s),s.restore(),s.fillStyle=v}if(e.patternStroke){s.save();const v=e.strokeColor.getPattern(s,this,th(s),Os.STROKE);P=da(s),s.restore(),s.strokeStyle=v}let M=e.lineWidth;const F=e.textMatrixScale;if(F===0||M===0){const v=e.textRenderingMode&Qs.FILL_STROKE_MASK;(v===Qs.STROKE||v===Qs.FILL_STROKE)&&(M=this.getSinglePixelWidth())}else M/=F;if(o!==1&&(s.scale(o,o),M/=o),s.lineWidth=M,i.isInvalidPDFjsFont){const v=[];let R=0;for(const G of n)v.push(G.unicode),R+=G.width;s.fillText(v.join(""),0,0),e.x+=R*A*p,s.restore(),this.compose();return}let k=0,O;for(O=0;O<g;++O){const v=n[O];if(typeof v=="number"){k+=w*v*a/1e3;continue}let R=!1;const G=(v.isSpace?f:0)+h,j=v.fontChar,U=v.accent;let N,Z,V=v.width;if(x){const J=v.vmetric||_,lt=-(v.vmetric?J[1]:V*.5)*A,mt=J[2]*A;V=J?-J[0]:V,N=lt/o,Z=(k+mt)/o}else N=k/o,Z=0;if(i.remeasure&&V>0){const J=s.measureText(j).width*1e3/a*o;if(V<J&&this.isFontSubpixelAAEnabled){const lt=V/J;R=!0,s.save(),s.scale(lt,1),N/=lt}else V!==J&&(N+=(V-J)/2e3*a/o)}if(this.contentVisible&&(v.isInFont||i.missingFile)){if(T&&!U)s.fillText(j,N,Z);else if(this.paintChar(j,N,Z,E,P),U){const J=N+a*U.offset.x/o,lt=Z-a*U.offset.y/o;this.paintChar(U.fontChar,J,lt,E,P)}}const B=x?V*A-G*d:V*A+G*d;k+=B,R&&s.restore()}x?e.y-=k:e.x+=k*p,s.restore(),this.compose()}showType3Text(n){const e=this.ctx,i=this.current,a=i.font,s=i.fontSize,o=i.fontDirection,h=a.vertical?1:-1,f=i.charSpacing,d=i.wordSpacing,p=i.textHScale*o,g=i.fontMatrix||qk,x=n.length,w=i.textRenderingMode===Qs.INVISIBLE;let _,A,T,E;if(!(w||s===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,e.save(),e.transform(...i.textMatrix),e.translate(i.x,i.y+i.textRise),e.scale(p,o),_=0;_<x;++_){if(A=n[_],typeof A=="number"){E=h*A*s/1e3,this.ctx.translate(E,0),i.x+=E*p;continue}const P=(A.isSpace?d:0)+f,M=a.charProcOperatorList[A.operatorListId];M?this.contentVisible&&(this.processingType3=A,this.save(),e.scale(s,s),e.transform(...g),this.executeOperatorList(M),this.restore()):on(`Type3 character "${A.operatorListId}" is not available.`),T=Me.applyTransform([A.width,0],g)[0]*s+P,e.translate(T,0),i.x+=T*p}e.restore(),this.processingType3=null}}setCharWidth(n,e){}setCharWidthAndBounds(n,e,i,a,s,o){this.ctx.rect(i,a,s-i,o-a),this.ctx.clip(),this.endPath()}getColorN_Pattern(n){let e;if(n[0]==="TilingPattern"){const i=this.baseTransform||da(this.ctx),a={createCanvasGraphics:s=>new X_(s,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};e=new bA(n,this.ctx,a,i)}else e=this._getPattern(n[1],n[2]);return e}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments),this.current.patternStroke=!0}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(n,e,i){this.ctx.strokeStyle=this.current.strokeColor=Me.makeHexColor(n,e,i),this.current.patternStroke=!1}setStrokeTransparent(){this.ctx.strokeStyle=this.current.strokeColor="transparent",this.current.patternStroke=!1}setFillRGBColor(n,e,i){this.ctx.fillStyle=this.current.fillColor=Me.makeHexColor(n,e,i),this.current.patternFill=!1}setFillTransparent(){this.ctx.fillStyle=this.current.fillColor="transparent",this.current.patternFill=!1}_getPattern(n,e=null){let i;return this.cachedPatterns.has(n)?i=this.cachedPatterns.get(n):(i=xj(this.getObject(n)),this.cachedPatterns.set(n,i)),e&&(i.matrix=e),i}shadingFill(n){if(!this.contentVisible)return;const e=this.ctx;this.save();const i=this._getPattern(n);e.fillStyle=i.getPattern(e,this,th(e),Os.SHADING);const a=th(e);if(a){const{width:s,height:o}=e.canvas,[h,f,d,p]=Me.getAxialAlignedBoundingBox([0,0,s,o],a);this.ctx.fillRect(h,f,d-h,p-f)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){Ar("Should not call beginInlineImage")}beginImageData(){Ar("Should not call beginImageData")}paintFormXObjectBegin(n,e){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),n&&this.transform(...n),this.baseTransform=da(this.ctx),e)){const i=e[2]-e[0],a=e[3]-e[1];this.ctx.rect(e[0],e[1],i,a),this.current.updateRectMinMax(da(this.ctx),e),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(n){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const e=this.ctx;n.isolated||Kv("TODO: Support non-isolated groups."),n.knockout&&on("Knockout groups not supported.");const i=da(e);if(n.matrix&&e.transform(...n.matrix),!n.bbox)throw new Error("Bounding box is required.");let a=Me.getAxialAlignedBoundingBox(n.bbox,da(e));const s=[0,0,e.canvas.width,e.canvas.height];a=Me.intersect(a,s)||[0,0,0,0];const o=Math.floor(a[0]),h=Math.floor(a[1]),f=Math.max(Math.ceil(a[2])-o,1),d=Math.max(Math.ceil(a[3])-h,1);this.current.startNewPathAndClipBox([0,0,f,d]);let p="groupAt"+this.groupLevel;n.smask&&(p+="_smask_"+this.smaskCounter++%2);const g=this.cachedCanvases.getCanvas(p,f,d),x=g.context;x.translate(-o,-h),x.transform(...i);let w=new Path2D;const[_,A,T,E]=n.bbox;if(w.rect(_,A,T-_,E-A),n.matrix){const P=new Path2D;P.addPath(w,new DOMMatrix(n.matrix)),w=P}x.clip(w),n.smask?this.smaskStack.push({canvas:g.canvas,context:x,offsetX:o,offsetY:h,subtype:n.smask.subtype,backdrop:n.smask.backdrop,transferMap:n.smask.transferMap||null,startTransformInverse:null}):(e.setTransform(1,0,0,1,0,0),e.translate(o,h),e.save()),L6(e,x),this.ctx=x,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(e),this.groupLevel++}endGroup(n){if(!this.contentVisible)return;this.groupLevel--;const e=this.ctx,i=this.groupStack.pop();if(this.ctx=i,this.ctx.imageSmoothingEnabled=!1,n.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const a=da(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...a);const s=Me.getAxialAlignedBoundingBox([0,0,e.canvas.width,e.canvas.height],a);this.ctx.drawImage(e.canvas,0,0),this.ctx.restore(),this.compose(s)}}beginAnnotation(n,e,i,a,s){if(it(this,Q0,xA).call(this),M7(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),e){const o=e[2]-e[0],h=e[3]-e[1];if(s&&this.annotationCanvasMap){i=i.slice(),i[4]-=e[0],i[5]-=e[1],e=e.slice(),e[0]=e[1]=0,e[2]=o,e[3]=h;const[f,d]=Me.singularValueDecompose2dScale(da(this.ctx)),{viewportScale:p}=this,g=Math.ceil(o*this.outputScaleX*p),x=Math.ceil(h*this.outputScaleY*p);this.annotationCanvas=this.canvasFactory.create(g,x);const{canvas:w,context:_}=this.annotationCanvas;this.annotationCanvasMap.set(n,w),this.annotationCanvas.savedCtx=this.ctx,this.ctx=_,this.ctx.save(),this.ctx.setTransform(f,0,0,-d,0,h*d),M7(this.ctx)}else M7(this.ctx),this.endPath(),this.ctx.rect(e[0],e[1],o,h),this.ctx.clip(),this.ctx.beginPath()}this.current=new fP(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...i),this.transform(...a)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),it(this,Q0,yA).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(n){if(!this.contentVisible)return;const e=n.count;n=this.getObject(n.data,n),n.count=e;const i=this.ctx,a=this.processingType3;if(a&&(a.compiled===void 0&&(a.compiled=kj(n)),a.compiled)){i.fill(a.compiled);return}const s=this._createMaskCanvas(n),o=s.canvas;i.save(),i.setTransform(1,0,0,1,0,0),i.drawImage(o,s.offsetX,s.offsetY),i.restore(),this.compose()}paintImageMaskXObjectRepeat(n,e,i=0,a=0,s,o){if(!this.contentVisible)return;n=this.getObject(n.data,n);const h=this.ctx;h.save();const f=da(h);h.transform(e,i,a,s,0,0);const d=this._createMaskCanvas(n);h.setTransform(1,0,0,1,d.offsetX-f[4],d.offsetY-f[5]);for(let p=0,g=o.length;p<g;p+=2){const x=Me.transform(f,[e,i,a,s,o[p],o[p+1]]),[w,_]=Me.applyTransform([0,0],x);h.drawImage(d.canvas,w,_)}h.restore(),this.compose()}paintImageMaskXObjectGroup(n){if(!this.contentVisible)return;const e=this.ctx,i=this.current.fillColor,a=this.current.patternFill;for(const s of n){const{data:o,width:h,height:f,transform:d}=s,p=this.cachedCanvases.getCanvas("maskCanvas",h,f),g=p.context;g.save();const x=this.getObject(o,s);pP(g,x),g.globalCompositeOperation="source-in",g.fillStyle=a?i.getPattern(g,this,th(e),Os.FILL):i,g.fillRect(0,0,h,f),g.restore(),e.save(),e.transform(...d),e.scale(1,-1),P7(e,p.canvas,0,0,h,f,0,-1,1,1),e.restore()}this.compose()}paintImageXObject(n){if(!this.contentVisible)return;const e=this.getObject(n);if(!e){on("Dependent image isn't ready yet");return}this.paintInlineImageXObject(e)}paintImageXObjectRepeat(n,e,i,a){if(!this.contentVisible)return;const s=this.getObject(n);if(!s){on("Dependent image isn't ready yet");return}const o=s.width,h=s.height,f=[];for(let d=0,p=a.length;d<p;d+=2)f.push({transform:[e,0,0,i,a[d],a[d+1]],x:0,y:0,w:o,h});this.paintInlineImageXObjectGroup(s,f)}applyTransferMapsToCanvas(n){return this.current.transferMaps!=="none"&&(n.filter=this.current.transferMaps,n.drawImage(n.canvas,0,0),n.filter="none"),n.canvas}applyTransferMapsToBitmap(n){if(this.current.transferMaps==="none")return n.bitmap;const{bitmap:e,width:i,height:a}=n,s=this.cachedCanvases.getCanvas("inlineImage",i,a),o=s.context;return o.filter=this.current.transferMaps,o.drawImage(e,0,0),o.filter="none",s.canvas}paintInlineImageXObject(n){if(!this.contentVisible)return;const e=n.width,i=n.height,a=this.ctx;if(this.save(),!Es){const{filter:h}=a;h!=="none"&&h!==""&&(a.filter="none")}a.scale(1/e,-1/i);let s;if(n.bitmap)s=this.applyTransferMapsToBitmap(n);else if(typeof HTMLElement=="function"&&n instanceof HTMLElement||!n.data)s=n;else{const f=this.cachedCanvases.getCanvas("inlineImage",e,i).context;dP(f,n),s=this.applyTransferMapsToCanvas(f)}const o=this._scaleImage(s,th(a));a.imageSmoothingEnabled=gP(da(a),n.interpolate),P7(a,o.img,0,0,o.paintWidth,o.paintHeight,0,-i,e,i),this.compose(),this.restore()}paintInlineImageXObjectGroup(n,e){if(!this.contentVisible)return;const i=this.ctx;let a;if(n.bitmap)a=n.bitmap;else{const s=n.width,o=n.height,f=this.cachedCanvases.getCanvas("inlineImage",s,o).context;dP(f,n),a=this.applyTransferMapsToCanvas(f)}for(const s of e)i.save(),i.transform(...s.transform),i.scale(1,-1),P7(i,a,s.x,s.y,s.w,s.h,0,-1,1,1),i.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(n){}markPointProps(n,e){}beginMarkedContent(n){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(n,e){n==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(e)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(n,e){const i=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(e);const a=this.ctx;this.pendingClip&&(i||(this.pendingClip===mP?a.clip(n,"evenodd"):a.clip(n)),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),a.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const n=da(this.ctx);if(n[1]===0&&n[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(n[0]),Math.abs(n[3]));else{const e=Math.abs(n[0]*n[3]-n[2]*n[1]),i=Math.hypot(n[0],n[2]),a=Math.hypot(n[1],n[3]);this._cachedGetSinglePixelWidth=Math.max(i,a)/e}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:n}=this.current,{a:e,b:i,c:a,d:s}=this.ctx.getTransform();let o,h;if(i===0&&a===0){const f=Math.abs(e),d=Math.abs(s);if(f===d)if(n===0)o=h=1/f;else{const p=f*n;o=h=p<1?1/p:1}else if(n===0)o=1/f,h=1/d;else{const p=f*n,g=d*n;o=p<1?1/p:1,h=g<1?1/g:1}}else{const f=Math.abs(e*s-i*a),d=Math.hypot(e,i),p=Math.hypot(a,s);if(n===0)o=p/f,h=d/f;else{const g=n*f;o=p>g?p/g:1,h=d>g?d/g:1}}this._cachedScaleForStroking[0]=o,this._cachedScaleForStroking[1]=h}return this._cachedScaleForStroking}rescaleAndStroke(n,e){const{ctx:i,current:{lineWidth:a}}=this,[s,o]=this.getScaleForStroking();if(s===o){i.lineWidth=(a||1)*s,i.stroke(n);return}const h=i.getLineDash();e&&i.save(),i.scale(s,o),Hk.a=1/s,Hk.d=1/o;const f=new Path2D;if(f.addPath(n,Hk),h.length>0){const d=Math.max(s,o);i.setLineDash(h.map(p=>p/d)),i.lineDashOffset/=d}i.lineWidth=a||1,i.stroke(f),e&&i.restore()}isContentVisible(){for(let n=this.markedContentStack.length-1;n>=0;n--)if(!this.markedContentStack[n].visible)return!1;return!0}};Q0=new WeakSet,xA=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.current.activeSMask=null,this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},yA=function(){if(this.pageColors){const n=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(n!=="none"){const e=this.ctx.filter;this.ctx.filter=n,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=e}}},wA=function(n,e,i){const a=new Path2D;return a.addPath(n,new DOMMatrix(i).invertSelf().multiplySelf(e)),a};let Z2=X_;for(const S in mv)Z2.prototype[S]!==void 0&&(Z2.prototype[mv[S]]=Z2.prototype[S]);var M9,D9;class m1{static get workerPort(){return b(this,M9)}static set workerPort(n){if(!(typeof Worker<"u"&&n instanceof Worker)&&n!==null)throw new Error("Invalid `workerPort` type.");K(this,M9,n)}static get workerSrc(){return b(this,D9)}static set workerSrc(n){if(typeof n!="string")throw new Error("Invalid `workerSrc` type.");K(this,D9,n)}}M9=new WeakMap,D9=new WeakMap,rt(m1,M9,null),rt(m1,D9,"");var Gb,R9;class Ij{constructor({parsedData:n,rawData:e}){rt(this,Gb);rt(this,R9);K(this,Gb,n),K(this,R9,e)}getRaw(){return b(this,R9)}get(n){return b(this,Gb).get(n)??null}getAll(){return E_(b(this,Gb))}has(n){return b(this,Gb).has(n)}}Gb=new WeakMap,R9=new WeakMap;const X2=Symbol("INTERNAL");var L9,N9,j9,by;class Tj{constructor(n,{name:e,intent:i,usage:a,rbGroups:s}){rt(this,L9,!1);rt(this,N9,!1);rt(this,j9,!1);rt(this,by,!0);K(this,L9,!!(n&ol.DISPLAY)),K(this,N9,!!(n&ol.PRINT)),this.name=e,this.intent=i,this.usage=a,this.rbGroups=s}get visible(){if(b(this,j9))return b(this,by);if(!b(this,by))return!1;const{print:n,view:e}=this.usage;return b(this,L9)?(e==null?void 0:e.viewState)!=="OFF":b(this,N9)?(n==null?void 0:n.printState)!=="OFF":!0}_setVisible(n,e,i=!1){n!==X2&&Ar("Internal method `_setVisible` called."),K(this,j9,i),K(this,by,e)}}L9=new WeakMap,N9=new WeakMap,j9=new WeakMap,by=new WeakMap;var rm,fr,xy,yy,B9,vA;class Ej{constructor(n,e=ol.DISPLAY){rt(this,B9);rt(this,rm,null);rt(this,fr,new Map);rt(this,xy,null);rt(this,yy,null);if(this.renderingIntent=e,this.name=null,this.creator=null,n!==null){this.name=n.name,this.creator=n.creator,K(this,yy,n.order);for(const i of n.groups)b(this,fr).set(i.id,new Tj(e,i));if(n.baseState==="OFF")for(const i of b(this,fr).values())i._setVisible(X2,!1);for(const i of n.on)b(this,fr).get(i)._setVisible(X2,!0);for(const i of n.off)b(this,fr).get(i)._setVisible(X2,!1);K(this,xy,this.getHash())}}isVisible(n){if(b(this,fr).size===0)return!0;if(!n)return Kv("Optional content group not defined."),!0;if(n.type==="OCG")return b(this,fr).has(n.id)?b(this,fr).get(n.id).visible:(on(`Optional content group not found: ${n.id}`),!0);if(n.type==="OCMD"){if(n.expression)return it(this,B9,vA).call(this,n.expression);if(!n.policy||n.policy==="AnyOn"){for(const e of n.ids){if(!b(this,fr).has(e))return on(`Optional content group not found: ${e}`),!0;if(b(this,fr).get(e).visible)return!0}return!1}else if(n.policy==="AllOn"){for(const e of n.ids){if(!b(this,fr).has(e))return on(`Optional content group not found: ${e}`),!0;if(!b(this,fr).get(e).visible)return!1}return!0}else if(n.policy==="AnyOff"){for(const e of n.ids){if(!b(this,fr).has(e))return on(`Optional content group not found: ${e}`),!0;if(!b(this,fr).get(e).visible)return!0}return!1}else if(n.policy==="AllOff"){for(const e of n.ids){if(!b(this,fr).has(e))return on(`Optional content group not found: ${e}`),!0;if(b(this,fr).get(e).visible)return!1}return!0}return on(`Unknown optional content policy ${n.policy}.`),!0}return on(`Unknown group type ${n.type}.`),!0}setVisibility(n,e=!0,i=!0){var s;const a=b(this,fr).get(n);if(!a){on(`Optional content group not found: ${n}`);return}if(i&&e&&a.rbGroups.length)for(const o of a.rbGroups)for(const h of o)h!==n&&((s=b(this,fr).get(h))==null||s._setVisible(X2,!1,!0));a._setVisible(X2,!!e,!0),K(this,rm,null)}setOCGState({state:n,preserveRB:e}){let i;for(const a of n){switch(a){case"ON":case"OFF":case"Toggle":i=a;continue}const s=b(this,fr).get(a);if(s)switch(i){case"ON":this.setVisibility(a,!0,e);break;case"OFF":this.setVisibility(a,!1,e);break;case"Toggle":this.setVisibility(a,!s.visible,e);break}}K(this,rm,null)}get hasInitialVisibility(){return b(this,xy)===null||this.getHash()===b(this,xy)}getOrder(){return b(this,fr).size?b(this,yy)?b(this,yy).slice():[...b(this,fr).keys()]:null}getGroups(){return b(this,fr).size>0?E_(b(this,fr)):null}getGroup(n){return b(this,fr).get(n)||null}getHash(){if(b(this,rm)!==null)return b(this,rm);const n=new hD;for(const[e,i]of b(this,fr))n.update(`${e}:${i.visible}`);return K(this,rm,n.hexdigest())}}rm=new WeakMap,fr=new WeakMap,xy=new WeakMap,yy=new WeakMap,B9=new WeakSet,vA=function(n){const e=n.length;if(e<2)return!0;const i=n[0];for(let a=1;a<e;a++){const s=n[a];let o;if(Array.isArray(s))o=it(this,B9,vA).call(this,s);else if(b(this,fr).has(s))o=b(this,fr).get(s).visible;else return on(`Optional content group not found: ${s}`),!0;switch(i){case"And":if(!o)return!1;break;case"Or":if(o)return!0;break;case"Not":return!o;default:return!0}}return i==="And"};class Oj{constructor(n,{disableRange:e=!1,disableStream:i=!1}){gi(n,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');const{length:a,initialData:s,progressiveDone:o,contentDispositionFilename:h}=n;if(this._queuedChunks=[],this._progressiveDone=o,this._contentDispositionFilename=h,(s==null?void 0:s.length)>0){const f=s instanceof Uint8Array&&s.byteLength===s.buffer.byteLength?s.buffer:new Uint8Array(s).buffer;this._queuedChunks.push(f)}this._pdfDataRangeTransport=n,this._isStreamingSupported=!i,this._isRangeSupported=!e,this._contentLength=a,this._fullRequestReader=null,this._rangeReaders=[],n.addRangeListener((f,d)=>{this._onReceiveData({begin:f,chunk:d})}),n.addProgressListener((f,d)=>{this._onProgress({loaded:f,total:d})}),n.addProgressiveReadListener(f=>{this._onReceiveData({chunk:f})}),n.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),n.transportReady()}_onReceiveData({begin:n,chunk:e}){const i=e instanceof Uint8Array&&e.byteLength===e.buffer.byteLength?e.buffer:new Uint8Array(e).buffer;if(n===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(i):this._queuedChunks.push(i);else{const a=this._rangeReaders.some(function(s){return s._begin!==n?!1:(s._enqueue(i),!0)});gi(a,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var n;return((n=this._fullRequestReader)==null?void 0:n._loaded)??0}_onProgress(n){var e,i,a,s;n.total===void 0?(i=(e=this._rangeReaders[0])==null?void 0:e.onProgress)==null||i.call(e,{loaded:n.loaded}):(s=(a=this._fullRequestReader)==null?void 0:a.onProgress)==null||s.call(a,{loaded:n.loaded,total:n.total})}_onProgressiveDone(){var n;(n=this._fullRequestReader)==null||n.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(n){const e=this._rangeReaders.indexOf(n);e>=0&&this._rangeReaders.splice(e,1)}getFullReader(){gi(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const n=this._queuedChunks;return this._queuedChunks=null,new Fj(this,n,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(n,e){if(e<=this._progressiveDataLength)return null;const i=new Pj(this,n,e);return this._pdfDataRangeTransport.requestDataRange(n,e),this._rangeReaders.push(i),i}cancelAllRequests(n){var e;(e=this._fullRequestReader)==null||e.cancel(n);for(const i of this._rangeReaders.slice(0))i.cancel(n);this._pdfDataRangeTransport.abort()}}class Fj{constructor(n,e,i=!1,a=null){this._stream=n,this._done=i||!1,this._filename=P_(a)?a:null,this._queuedChunks=e||[],this._loaded=0;for(const s of this._queuedChunks)this._loaded+=s.byteLength;this._requests=[],this._headersReady=Promise.resolve(),n._fullRequestReader=this,this.onProgress=null}_enqueue(n){this._done||(this._requests.length>0?this._requests.shift().resolve({value:n,done:!1}):this._queuedChunks.push(n),this._loaded+=n.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const n=Promise.withResolvers();return this._requests.push(n),n.promise}cancel(n){this._done=!0;for(const e of this._requests)e.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class Pj{constructor(n,e,i){this._stream=n,this._begin=e,this._end=i,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(n){if(!this._done){if(this._requests.length===0)this._queuedChunk=n;else{this._requests.shift().resolve({value:n,done:!1});for(const i of this._requests)i.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const e=this._queuedChunk;return this._queuedChunk=null,{value:e,done:!1}}if(this._done)return{value:void 0,done:!0};const n=Promise.withResolvers();return this._requests.push(n),n.promise}cancel(n){this._done=!0;for(const e of this._requests)e.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}function Mj(S){let n=!0,e=i("filename\\*","i").exec(S);if(e){e=e[1];let p=h(e);return p=unescape(p),p=f(p),p=d(p),s(p)}if(e=o(S),e){const p=d(e);return s(p)}if(e=i("filename","i").exec(S),e){e=e[1];let p=h(e);return p=d(p),s(p)}function i(p,g){return new RegExp("(?:^|;)\\s*"+p+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',g)}function a(p,g){if(p){if(!/^[\x00-\xFF]+$/.test(g))return g;try{const x=new TextDecoder(p,{fatal:!0}),w=F5(g);g=x.decode(w),n=!1}catch{}}return g}function s(p){return n&&/[\x80-\xff]/.test(p)&&(p=a("utf-8",p),n&&(p=a("iso-8859-1",p))),p}function o(p){const g=[];let x;const w=i("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(x=w.exec(p))!==null;){let[,A,T,E]=x;if(A=parseInt(A,10),A in g){if(A===0)break;continue}g[A]=[T,E]}const _=[];for(let A=0;A<g.length&&A in g;++A){let[T,E]=g[A];E=h(E),T&&(E=unescape(E),A===0&&(E=f(E))),_.push(E)}return _.join("")}function h(p){if(p.startsWith('"')){const g=p.slice(1).split('\\"');for(let x=0;x<g.length;++x){const w=g[x].indexOf('"');w!==-1&&(g[x]=g[x].slice(0,w),g.length=x+1),g[x]=g[x].replaceAll(/\\(.)/g,"$1")}p=g.join('"')}return p}function f(p){const g=p.indexOf("'");if(g===-1)return p;const x=p.slice(0,g),_=p.slice(g+1).replace(/^[^']*'/,"");return a(x,_)}function d(p){return!p.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(p)?p:p.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(g,x,w,_){if(w==="q"||w==="Q")return _=_.replaceAll("_"," "),_=_.replaceAll(/=([0-9a-fA-F]{2})/g,function(A,T){return String.fromCharCode(parseInt(T,16))}),a(x,_);try{_=atob(_)}catch{}return a(x,_)})}return""}function kD(S,n){const e=new Headers;if(!S||!n||typeof n!="object")return e;for(const i in n){const a=n[i];a!==void 0&&e.append(i,a)}return e}function Zv(S){var n;return((n=URL.parse(S))==null?void 0:n.origin)??null}function AD({responseHeaders:S,isHttp:n,rangeChunkSize:e,disableRange:i}){const a={allowRangeRequests:!1,suggestedLength:void 0},s=parseInt(S.get("Content-Length"),10);return!Number.isInteger(s)||(a.suggestedLength=s,s<=2*e)||i||!n||S.get("Accept-Ranges")!=="bytes"||(S.get("Content-Encoding")||"identity")!=="identity"||(a.allowRangeRequests=!0),a}function _D(S){const n=S.get("Content-Disposition");if(n){let e=Mj(n);if(e.includes("%"))try{e=decodeURIComponent(e)}catch{}if(P_(e))return e}return null}function R5(S,n){return new bv(`Unexpected server response (${S}) while retrieving PDF "${n}".`,S,S===404||S===0&&n.startsWith("file:"))}function CD(S){return S===200||S===206}function ID(S,n,e){return{method:"GET",headers:S,signal:e.signal,mode:"cors",credentials:n?"include":"same-origin",redirect:"follow"}}function TD(S){return S instanceof Uint8Array?S.buffer:S instanceof ArrayBuffer?S:(on(`getArrayBuffer - unexpected data format: ${S}`),new Uint8Array(S).buffer)}class bP{constructor(n){Oe(this,"_responseOrigin",null);this.source=n,this.isHttp=/^https?:/i.test(n.url),this.headers=kD(this.isHttp,n.httpHeaders),this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var n;return((n=this._fullRequestReader)==null?void 0:n._loaded)??0}getFullReader(){return gi(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new Dj(this),this._fullRequestReader}getRangeReader(n,e){if(e<=this._progressiveDataLength)return null;const i=new Rj(this,n,e);return this._rangeRequestReaders.push(i),i}cancelAllRequests(n){var e;(e=this._fullRequestReader)==null||e.cancel(n);for(const i of this._rangeRequestReaders.slice(0))i.cancel(n)}}class Dj{constructor(n){this._stream=n,this._reader=null,this._loaded=0,this._filename=null;const e=n.source;this._withCredentials=e.withCredentials||!1,this._contentLength=e.length,this._headersCapability=Promise.withResolvers(),this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange;const i=new Headers(n.headers),a=e.url;fetch(a,ID(i,this._withCredentials,this._abortController)).then(s=>{if(n._responseOrigin=Zv(s.url),!CD(s.status))throw R5(s.status,a);this._reader=s.body.getReader(),this._headersCapability.resolve();const o=s.headers,{allowRangeRequests:h,suggestedLength:f}=AD({responseHeaders:o,isHttp:n.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=h,this._contentLength=f||this._contentLength,this._filename=_D(o),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new Am("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var i;await this._headersCapability.promise;const{value:n,done:e}=await this._reader.read();return e?{value:n,done:e}:(this._loaded+=n.byteLength,(i=this.onProgress)==null||i.call(this,{loaded:this._loaded,total:this._contentLength}),{value:TD(n),done:!1})}cancel(n){var e;(e=this._reader)==null||e.cancel(n),this._abortController.abort()}}class Rj{constructor(n,e,i){this._stream=n,this._reader=null,this._loaded=0;const a=n.source;this._withCredentials=a.withCredentials||!1,this._readCapability=Promise.withResolvers(),this._isStreamingSupported=!a.disableStream,this._abortController=new AbortController;const s=new Headers(n.headers);s.append("Range",`bytes=${e}-${i-1}`);const o=a.url;fetch(o,ID(s,this._withCredentials,this._abortController)).then(h=>{const f=Zv(h.url);if(f!==n._responseOrigin)throw new Error(`Expected range response-origin "${f}" to match "${n._responseOrigin}".`);if(!CD(h.status))throw R5(h.status,o);this._readCapability.resolve(),this._reader=h.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){var i;await this._readCapability.promise;const{value:n,done:e}=await this._reader.read();return e?{value:n,done:e}:(this._loaded+=n.byteLength,(i=this.onProgress)==null||i.call(this,{loaded:this._loaded}),{value:TD(n),done:!1})}cancel(n){var e;(e=this._reader)==null||e.cancel(n),this._abortController.abort()}}const zk=200,Xk=206;function Lj(S){const n=S.response;return typeof n!="string"?n:F5(n).buffer}class Nj{constructor({url:n,httpHeaders:e,withCredentials:i}){Oe(this,"_responseOrigin",null);this.url=n,this.isHttp=/^https?:/i.test(n),this.headers=kD(this.isHttp,e),this.withCredentials=i||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}request(n){const e=new XMLHttpRequest,i=this.currXhrId++,a=this.pendingRequests[i]={xhr:e};e.open("GET",this.url),e.withCredentials=this.withCredentials;for(const[s,o]of this.headers)e.setRequestHeader(s,o);return this.isHttp&&"begin"in n&&"end"in n?(e.setRequestHeader("Range",`bytes=${n.begin}-${n.end-1}`),a.expectedStatus=Xk):a.expectedStatus=zk,e.responseType="arraybuffer",gi(n.onError,"Expected `onError` callback to be provided."),e.onerror=()=>{n.onError(e.status)},e.onreadystatechange=this.onStateChange.bind(this,i),e.onprogress=this.onProgress.bind(this,i),a.onHeadersReceived=n.onHeadersReceived,a.onDone=n.onDone,a.onError=n.onError,a.onProgress=n.onProgress,e.send(null),i}onProgress(n,e){var a;const i=this.pendingRequests[n];i&&((a=i.onProgress)==null||a.call(i,e))}onStateChange(n,e){const i=this.pendingRequests[n];if(!i)return;const a=i.xhr;if(a.readyState>=2&&i.onHeadersReceived&&(i.onHeadersReceived(),delete i.onHeadersReceived),a.readyState!==4||!(n in this.pendingRequests))return;if(delete this.pendingRequests[n],a.status===0&&this.isHttp){i.onError(a.status);return}const s=a.status||zk;if(!(s===zk&&i.expectedStatus===Xk)&&s!==i.expectedStatus){i.onError(a.status);return}const h=Lj(a);if(s===Xk){const f=a.getResponseHeader("Content-Range"),d=/bytes (\d+)-(\d+)\/(\d+)/.exec(f);d?i.onDone({begin:parseInt(d[1],10),chunk:h}):(on('Missing or invalid "Content-Range" header.'),i.onError(0))}else h?i.onDone({begin:0,chunk:h}):i.onError(a.status)}getRequestXhr(n){return this.pendingRequests[n].xhr}isPendingRequest(n){return n in this.pendingRequests}abortRequest(n){const e=this.pendingRequests[n].xhr;delete this.pendingRequests[n],e.abort()}}class jj{constructor(n){this._source=n,this._manager=new Nj(n),this._rangeChunkSize=n.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(n){const e=this._rangeRequestReaders.indexOf(n);e>=0&&this._rangeRequestReaders.splice(e,1)}getFullReader(){return gi(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new Bj(this._manager,this._source),this._fullRequestReader}getRangeReader(n,e){const i=new Uj(this._manager,n,e);return i.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(i),i}cancelAllRequests(n){var e;(e=this._fullRequestReader)==null||e.cancel(n);for(const i of this._rangeRequestReaders.slice(0))i.cancel(n)}}class Bj{constructor(n,e){this._manager=n,this._url=e.url,this._fullRequestId=n.request({onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)}),this._headersCapability=Promise.withResolvers(),this._disableRange=e.disableRange||!1,this._contentLength=e.length,this._rangeChunkSize=e.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const n=this._fullRequestId,e=this._manager.getRequestXhr(n);this._manager._responseOrigin=Zv(e.responseURL);const i=e.getAllResponseHeaders(),a=new Headers(i?i.trimStart().replace(/[^\S ]+$/,"").split(/[\r\n]+/).map(h=>{const[f,...d]=h.split(": ");return[f,d.join(": ")]}):[]),{allowRangeRequests:s,suggestedLength:o}=AD({responseHeaders:a,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});s&&(this._isRangeSupported=!0),this._contentLength=o||this._contentLength,this._filename=_D(a),this._isRangeSupported&&this._manager.abortRequest(n),this._headersCapability.resolve()}_onDone(n){if(n&&(this._requests.length>0?this._requests.shift().resolve({value:n.chunk,done:!1}):this._cachedChunks.push(n.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const e of this._requests)e.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(n){this._storedError=R5(n,this._url),this._headersCapability.reject(this._storedError);for(const e of this._requests)e.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(n){var e;(e=this.onProgress)==null||e.call(this,{loaded:n.loaded,total:n.lengthComputable?n.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersCapability.promise}async read(){if(await this._headersCapability.promise,this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const n=Promise.withResolvers();return this._requests.push(n),n.promise}cancel(n){this._done=!0,this._headersCapability.reject(n);for(const e of this._requests)e.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class Uj{constructor(n,e,i){this._manager=n,this._url=n.url,this._requestId=n.request({begin:e,end:i,onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)}),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_onHeadersReceived(){var e;const n=Zv((e=this._manager.getRequestXhr(this._requestId))==null?void 0:e.responseURL);n!==this._manager._responseOrigin&&(this._storedError=new Error(`Expected range response-origin "${n}" to match "${this._manager._responseOrigin}".`),this._onError(0))}_close(){var n;(n=this.onClosed)==null||n.call(this,this)}_onDone(n){const e=n.chunk;this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunk=e,this._done=!0;for(const i of this._requests)i.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(n){this._storedError??(this._storedError=R5(n,this._url));for(const e of this._requests)e.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(n){var e;this.isStreamingSupported||(e=this.onProgress)==null||e.call(this,{loaded:n.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const e=this._queuedChunk;return this._queuedChunk=null,{value:e,done:!1}}if(this._done)return{value:void 0,done:!0};const n=Promise.withResolvers();return this._requests.push(n),n.promise}cancel(n){this._done=!0;for(const e of this._requests)e.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}const Gj=/^[a-z][a-z0-9\-+.]+:/i;function Hj(S){if(Gj.test(S))return new URL(S);const n=process.getBuiltinModule("url");return new URL(n.pathToFileURL(S))}class zj{constructor(n){this.source=n,this.url=Hj(n.url),gi(this.url.protocol==="file:","PDFNodeStream only supports file:// URLs."),this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var n;return((n=this._fullRequestReader)==null?void 0:n._loaded)??0}getFullReader(){return gi(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=new Xj(this),this._fullRequestReader}getRangeReader(n,e){if(e<=this._progressiveDataLength)return null;const i=new Wj(this,n,e);return this._rangeRequestReaders.push(i),i}cancelAllRequests(n){var e;(e=this._fullRequestReader)==null||e.cancel(n);for(const i of this._rangeRequestReaders.slice(0))i.cancel(n)}}class Xj{constructor(n){this._url=n.url,this._done=!1,this._storedError=null,this.onProgress=null;const e=n.source;this._contentLength=e.length,this._loaded=0,this._filename=null,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._readableStream=null,this._readCapability=Promise.withResolvers(),this._headersCapability=Promise.withResolvers();const i=process.getBuiltinModule("fs");i.promises.lstat(this._url).then(a=>{this._contentLength=a.size,this._setReadableStream(i.createReadStream(this._url)),this._headersCapability.resolve()},a=>{a.code==="ENOENT"&&(a=R5(0,this._url.href)),this._storedError=a,this._headersCapability.reject(a)})}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var i;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const n=this._readableStream.read();return n===null?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=n.length,(i=this.onProgress)==null||i.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(n).buffer,done:!1})}cancel(n){if(!this._readableStream){this._error(n);return}this._readableStream.destroy(n)}_error(n){this._storedError=n,this._readCapability.resolve()}_setReadableStream(n){this._readableStream=n,n.on("readable",()=>{this._readCapability.resolve()}),n.on("end",()=>{n.destroy(),this._done=!0,this._readCapability.resolve()}),n.on("error",e=>{this._error(e)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new Am("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class Wj{constructor(n,e,i){this._url=n.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=Promise.withResolvers();const a=n.source;this._isStreamingSupported=!a.disableStream;const s=process.getBuiltinModule("fs");this._setReadableStream(s.createReadStream(this._url,{start:e,end:i-1}))}get isStreamingSupported(){return this._isStreamingSupported}async read(){var i;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const n=this._readableStream.read();return n===null?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=n.length,(i=this.onProgress)==null||i.call(this,{loaded:this._loaded}),{value:new Uint8Array(n).buffer,done:!1})}cancel(n){if(!this._readableStream){this._error(n);return}this._readableStream.destroy(n)}_error(n){this._storedError=n,this._readCapability.resolve()}_setReadableStream(n){this._readableStream=n,n.on("readable",()=>{this._readCapability.resolve()}),n.on("end",()=>{n.destroy(),this._done=!0,this._readCapability.resolve()}),n.on("error",e=>{this._error(e)}),this._storedError&&this._readableStream.destroy(this._storedError)}}const $j=1e5,xP=30;var AP,am,dc,U9,G9,Hb,Jd,H9,z9,zb,wy,vy,im,Sy,X9,ky,Xb,W9,$9,Ay,Wb,q9,sm,_y,S1,ED,OD,SA,ll,K7,kA,FD,PD;const _i=class _i{constructor({textContentSource:n,container:e,viewport:i}){rt(this,S1);rt(this,am,Promise.withResolvers());rt(this,dc,null);rt(this,U9,!1);rt(this,G9,!!((AP=globalThis.FontInspector)!=null&&AP.enabled));rt(this,Hb,null);rt(this,Jd,null);rt(this,H9,0);rt(this,z9,0);rt(this,zb,null);rt(this,wy,null);rt(this,vy,0);rt(this,im,0);rt(this,Sy,Object.create(null));rt(this,X9,[]);rt(this,ky,null);rt(this,Xb,[]);rt(this,W9,new WeakMap);rt(this,$9,null);var f;if(n instanceof ReadableStream)K(this,ky,n);else if(typeof n=="object")K(this,ky,new ReadableStream({start(d){d.enqueue(n),d.close()}}));else throw new Error('No "textContentSource" parameter specified.');K(this,dc,K(this,wy,e)),K(this,im,i.scale*v1.pixelRatio),K(this,vy,i.rotation),K(this,Jd,{div:null,properties:null,ctx:null});const{pageWidth:a,pageHeight:s,pageX:o,pageY:h}=i.rawDims;K(this,$9,[1,0,0,-1,-o,h+s]),K(this,z9,a),K(this,H9,s),it(f=_i,ll,FD).call(f),kx(e,i),b(this,am).promise.finally(()=>{b(_i,_y).delete(this),K(this,Jd,null),K(this,Sy,null)}).catch(()=>{})}static get fontFamilyMap(){const{isWindows:n,isFirefox:e}=Ms.platform;return Cn(this,"fontFamilyMap",new Map([["sans-serif",`${n&&e?"Calibri, ":""}sans-serif`],["monospace",`${n&&e?"Lucida Console, ":""}monospace`]]))}render(){const n=()=>{b(this,zb).read().then(({value:e,done:i})=>{if(i){b(this,am).resolve();return}b(this,Hb)??K(this,Hb,e.lang),Object.assign(b(this,Sy),e.styles),it(this,S1,ED).call(this,e.items),n()},b(this,am).reject)};return K(this,zb,b(this,ky).getReader()),b(_i,_y).add(this),n(),b(this,am).promise}update({viewport:n,onBefore:e=null}){var s;const i=n.scale*v1.pixelRatio,a=n.rotation;if(a!==b(this,vy)&&(e==null||e(),K(this,vy,a),kx(b(this,wy),{rotation:a})),i!==b(this,im)){e==null||e(),K(this,im,i);const o={div:null,properties:null,ctx:it(s=_i,ll,K7).call(s,b(this,Hb))};for(const h of b(this,Xb))o.properties=b(this,W9).get(h),o.div=h,it(this,S1,SA).call(this,o)}}cancel(){var e;const n=new Am("TextLayer task cancelled.");(e=b(this,zb))==null||e.cancel(n).catch(()=>{}),K(this,zb,null),b(this,am).reject(n)}get textDivs(){return b(this,Xb)}get textContentItemsStr(){return b(this,X9)}static cleanup(){if(!(b(this,_y).size>0)){b(this,Ay).clear();for(const{canvas:n}of b(this,Wb).values())n.remove();b(this,Wb).clear()}}};am=new WeakMap,dc=new WeakMap,U9=new WeakMap,G9=new WeakMap,Hb=new WeakMap,Jd=new WeakMap,H9=new WeakMap,z9=new WeakMap,zb=new WeakMap,wy=new WeakMap,vy=new WeakMap,im=new WeakMap,Sy=new WeakMap,X9=new WeakMap,ky=new WeakMap,Xb=new WeakMap,W9=new WeakMap,$9=new WeakMap,Ay=new WeakMap,Wb=new WeakMap,q9=new WeakMap,sm=new WeakMap,_y=new WeakMap,S1=new WeakSet,ED=function(n){var a,s;if(b(this,U9))return;(s=b(this,Jd)).ctx??(s.ctx=it(a=_i,ll,K7).call(a,b(this,Hb)));const e=b(this,Xb),i=b(this,X9);for(const o of n){if(e.length>$j){on("Ignoring additional textDivs for performance reasons."),K(this,U9,!0);return}if(o.str===void 0){if(o.type==="beginMarkedContentProps"||o.type==="beginMarkedContent"){const h=b(this,dc);K(this,dc,document.createElement("span")),b(this,dc).classList.add("markedContent"),o.id!==null&&b(this,dc).setAttribute("id",`${o.id}`),h.append(b(this,dc))}else o.type==="endMarkedContent"&&K(this,dc,b(this,dc).parentNode);continue}i.push(o.str),it(this,S1,OD).call(this,o)}},OD=function(n){var A;const e=document.createElement("span"),i={angle:0,canvasWidth:0,hasText:n.str!=="",hasEOL:n.hasEOL,fontSize:0};b(this,Xb).push(e);const a=Me.transform(b(this,$9),n.transform);let s=Math.atan2(a[1],a[0]);const o=b(this,Sy)[n.fontName];o.vertical&&(s+=Math.PI/2);let h=b(this,G9)&&o.fontSubstitution||o.fontFamily;h=_i.fontFamilyMap.get(h)||h;const f=Math.hypot(a[2],a[3]),d=f*it(A=_i,ll,PD).call(A,h,o,b(this,Hb));let p,g;s===0?(p=a[4],g=a[5]-d):(p=a[4]+d*Math.sin(s),g=a[5]-d*Math.cos(s));const x="calc(var(--total-scale-factor) *",w=e.style;b(this,dc)===b(this,wy)?(w.left=`${(100*p/b(this,z9)).toFixed(2)}%`,w.top=`${(100*g/b(this,H9)).toFixed(2)}%`):(w.left=`${x}${p.toFixed(2)}px)`,w.top=`${x}${g.toFixed(2)}px)`),w.fontSize=`${x}${(b(_i,sm)*f).toFixed(2)}px)`,w.fontFamily=h,i.fontSize=f,e.setAttribute("role","presentation"),e.textContent=n.str,e.dir=n.dir,b(this,G9)&&(e.dataset.fontName=o.fontSubstitutionLoadedName||n.fontName),s!==0&&(i.angle=s*(180/Math.PI));let _=!1;if(n.str.length>1)_=!0;else if(n.str!==" "&&n.transform[0]!==n.transform[3]){const T=Math.abs(n.transform[0]),E=Math.abs(n.transform[3]);T!==E&&Math.max(T,E)/Math.min(T,E)>1.5&&(_=!0)}if(_&&(i.canvasWidth=o.vertical?n.height:n.width),b(this,W9).set(e,i),b(this,Jd).div=e,b(this,Jd).properties=i,it(this,S1,SA).call(this,b(this,Jd)),i.hasText&&b(this,dc).append(e),i.hasEOL){const T=document.createElement("br");T.setAttribute("role","presentation"),b(this,dc).append(T)}},SA=function(n){var h;const{div:e,properties:i,ctx:a}=n,{style:s}=e;let o="";if(b(_i,sm)>1&&(o=`scale(${1/b(_i,sm)})`),i.canvasWidth!==0&&i.hasText){const{fontFamily:f}=s,{canvasWidth:d,fontSize:p}=i;it(h=_i,ll,kA).call(h,a,p*b(this,im),f);const{width:g}=a.measureText(e.textContent);g>0&&(o=`scaleX(${d*b(this,im)/g}) ${o}`)}i.angle!==0&&(o=`rotate(${i.angle}deg) ${o}`),o.length>0&&(s.transform=o)},ll=new WeakSet,K7=function(n=null){let e=b(this,Wb).get(n||(n=""));if(!e){const i=document.createElement("canvas");i.className="hiddenCanvasElement",i.lang=n,document.body.append(i),e=i.getContext("2d",{alpha:!1,willReadFrequently:!0}),b(this,Wb).set(n,e),b(this,q9).set(e,{size:0,family:""})}return e},kA=function(n,e,i){const a=b(this,q9).get(n);e===a.size&&i===a.family||(n.font=`${e}px ${i}`,a.size=e,a.family=i)},FD=function(){if(b(this,sm)!==null)return;const n=document.createElement("div");n.style.opacity=0,n.style.lineHeight=1,n.style.fontSize="1px",n.style.position="absolute",n.textContent="X",document.body.append(n),K(this,sm,n.getBoundingClientRect().height),n.remove()},PD=function(n,e,i){const a=b(this,Ay).get(n);if(a)return a;const s=it(this,ll,K7).call(this,i);s.canvas.width=s.canvas.height=xP,it(this,ll,kA).call(this,s,xP,n);const o=s.measureText(""),h=o.fontBoundingBoxAscent,f=Math.abs(o.fontBoundingBoxDescent);s.canvas.width=s.canvas.height=0;let d=.8;return h?d=h/(h+f):(Ms.platform.isFirefox&&on("Enable the `dom.textMetrics.fontBoundingBox.enabled` preference in `about:config` to improve TextLayer rendering."),e.ascent?d=e.ascent:e.descent&&(d=1+e.descent)),b(this,Ay).set(n,d),d},rt(_i,ll),rt(_i,Ay,new Map),rt(_i,Wb,new Map),rt(_i,q9,new WeakMap),rt(_i,sm,null),rt(_i,_y,new Set);let i9=_i;class s9{static textContent(n){const e=[],i={items:e,styles:Object.create(null)};function a(s){var f;if(!s)return;let o=null;const h=s.name;if(h==="#text")o=s.value;else if(s9.shouldBuildText(h))(f=s==null?void 0:s.attributes)!=null&&f.textContent?o=s.attributes.textContent:s.value&&(o=s.value);else return;if(o!==null&&e.push({str:o}),!!s.children)for(const d of s.children)a(d)}return a(n),i}static shouldBuildText(n){return!(n==="textarea"||n==="input"||n==="option"||n==="select")}}const qj=65536,Vj=100;function Kj(S={}){typeof S=="string"||S instanceof URL?S={url:S}:(S instanceof ArrayBuffer||ArrayBuffer.isView(S))&&(S={data:S});const n=new _A,{docId:e}=n,i=S.url?Yj(S.url):null,a=S.data?Zj(S.data):null,s=S.httpHeaders||null,o=S.withCredentials===!0,h=S.password??null,f=S.range instanceof MD?S.range:null,d=Number.isInteger(S.rangeChunkSize)&&S.rangeChunkSize>0?S.rangeChunkSize:qj;let p=S.worker instanceof Q2?S.worker:null;const g=S.verbosity,x=typeof S.docBaseUrl=="string"&&!Yv(S.docBaseUrl)?S.docBaseUrl:null,w=D7(S.cMapUrl),_=S.cMapPacked!==!1,A=S.CMapReaderFactory||(Es?hj:aP),T=D7(S.iccUrl),E=D7(S.standardFontDataUrl),P=S.StandardFontDataFactory||(Es?fj:iP),M=D7(S.wasmUrl),F=S.WasmFactory||(Es?dj:sP),k=S.stopAtErrors!==!0,O=Number.isInteger(S.maxImageSize)&&S.maxImageSize>-1?S.maxImageSize:-1,v=S.isEvalSupported!==!1,R=typeof S.isOffscreenCanvasSupported=="boolean"?S.isOffscreenCanvasSupported:!Es,G=typeof S.isImageDecoderSupported=="boolean"?S.isImageDecoderSupported:!Es&&(Ms.platform.isFirefox||!globalThis.chrome),j=Number.isInteger(S.canvasMaxAreaInBytes)?S.canvasMaxAreaInBytes:-1,U=typeof S.disableFontFace=="boolean"?S.disableFontFace:Es,N=S.fontExtraProperties===!0,Z=S.enableXfa===!0,V=S.ownerDocument||globalThis.document,B=S.disableRange===!0,J=S.disableStream===!0,lt=S.disableAutoFetch===!0,mt=S.pdfBug===!0,ut=S.CanvasFactory||(Es?uj:oj),ft=S.FilterFactory||(Es?lj:cj),tt=S.enableHWA===!0,et=S.useWasm!==!1,St=f?f.length:S.length??NaN,_t=typeof S.useSystemFonts=="boolean"?S.useSystemFonts:!Es&&!U,Gt=typeof S.useWorkerFetch=="boolean"?S.useWorkerFetch:!!(A===aP&&P===iP&&F===sP&&w&&E&&M&&U2(w,document.baseURI)&&U2(E,document.baseURI)&&U2(M,document.baseURI)),Wt=null;BN(g);const Lt={canvasFactory:new ut({ownerDocument:V,enableHWA:tt}),filterFactory:new ft({docId:e,ownerDocument:V}),cMapReaderFactory:Gt?null:new A({baseUrl:w,isCompressed:_}),standardFontDataFactory:Gt?null:new P({baseUrl:E}),wasmFactory:Gt?null:new F({baseUrl:M})};if(!p){const z={verbosity:g,port:m1.workerPort};p=z.port?Q2.fromPort(z):new Q2(z),n._worker=p}const Qt={docId:e,apiVersion:"5.1.91",data:a,password:h,disableAutoFetch:lt,rangeChunkSize:d,length:St,docBaseUrl:x,enableXfa:Z,evaluatorOptions:{maxImageSize:O,disableFontFace:U,ignoreErrors:k,isEvalSupported:v,isOffscreenCanvasSupported:R,isImageDecoderSupported:G,canvasMaxAreaInBytes:j,fontExtraProperties:N,useSystemFonts:_t,useWasm:et,useWorkerFetch:Gt,cMapUrl:w,iccUrl:T,standardFontDataUrl:E,wasmUrl:M}},he={ownerDocument:V,pdfBug:mt,styleElement:Wt,loadingParams:{disableAutoFetch:lt,enableXfa:Z}};return p.promise.then(function(){if(n.destroyed)throw new Error("Loading aborted");if(p.destroyed)throw new Error("Worker was destroyed");const z=p.messageHandler.sendWithPromise("GetDocRequest",Qt,a?[a.buffer]:null);let Y;if(f)Y=new Oj(f,{disableRange:B,disableStream:J});else if(!a){if(!i)throw new Error("getDocument - no `url` parameter provided.");let at;if(Es)if(U2(i)){if(typeof fetch>"u"||typeof Response>"u"||!("body"in Response.prototype))throw new Error("getDocument - the Fetch API was disabled in Node.js, see `--no-experimental-fetch`.");at=bP}else at=zj;else at=U2(i)?bP:jj;Y=new at({url:i,length:St,httpHeaders:s,withCredentials:o,rangeChunkSize:d,disableRange:B,disableStream:J})}return z.then(at=>{if(n.destroyed)throw new Error("Loading aborted");if(p.destroyed)throw new Error("Worker was destroyed");const Tt=new X6(e,at,p.port),Ot=new rB(Tt,n,Y,he,Lt);n._transport=Ot,Tt.send("Ready",null)})}).catch(n._capability.reject),n}function Yj(S){if(S instanceof URL)return S.href;if(typeof S=="string"){if(Es)return S;const n=URL.parse(S,window.location);if(n)return n.href}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function Zj(S){if(Es&&typeof Buffer<"u"&&S instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(S instanceof Uint8Array&&S.byteLength===S.buffer.byteLength)return S;if(typeof S=="string")return F5(S);if(S instanceof ArrayBuffer||ArrayBuffer.isView(S)||typeof S=="object"&&!isNaN(S==null?void 0:S.length))return new Uint8Array(S);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}function D7(S){if(typeof S!="string")return null;if(S.endsWith("/"))return S;throw new Error(`Invalid factory url: "${S}" must include trailing slash.`)}const AA=S=>typeof S=="object"&&Number.isInteger(S==null?void 0:S.num)&&S.num>=0&&Number.isInteger(S==null?void 0:S.gen)&&S.gen>=0,Qj=S=>typeof S=="object"&&typeof(S==null?void 0:S.name)=="string",Jj=KN.bind(null,AA,Qj);var Dv;const Rv=class Rv{constructor(){Oe(this,"_capability",Promise.withResolvers());Oe(this,"_transport",null);Oe(this,"_worker",null);Oe(this,"docId",`d${io(Rv,Dv)._++}`);Oe(this,"destroyed",!1);Oe(this,"onPassword",null);Oe(this,"onProgress",null)}get promise(){return this._capability.promise}async destroy(){var n,e,i,a;this.destroyed=!0;try{(n=this._worker)!=null&&n.port&&(this._worker._pendingDestroy=!0),await((e=this._transport)==null?void 0:e.destroy())}catch(s){throw(i=this._worker)!=null&&i.port&&delete this._worker._pendingDestroy,s}this._transport=null,(a=this._worker)==null||a.destroy(),this._worker=null}async getData(){return this._transport.getData()}};Dv=new WeakMap,rt(Rv,Dv,0);let _A=Rv;class MD{constructor(n,e,i=!1,a=null){this.length=n,this.initialData=e,this.progressiveDone=i,this.contentDispositionFilename=a,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=Promise.withResolvers()}addRangeListener(n){this._rangeListeners.push(n)}addProgressListener(n){this._progressListeners.push(n)}addProgressiveReadListener(n){this._progressiveReadListeners.push(n)}addProgressiveDoneListener(n){this._progressiveDoneListeners.push(n)}onDataRange(n,e){for(const i of this._rangeListeners)i(n,e)}onDataProgress(n,e){this._readyCapability.promise.then(()=>{for(const i of this._progressListeners)i(n,e)})}onDataProgressiveRead(n){this._readyCapability.promise.then(()=>{for(const e of this._progressiveReadListeners)e(n)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const n of this._progressiveDoneListeners)n()})}transportReady(){this._readyCapability.resolve()}requestDataRange(n,e){Ar("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}class tB{constructor(n,e){this._pdfInfo=n,this._transport=e}get annotationStorage(){return this._transport.annotationStorage}get canvasFactory(){return this._transport.canvasFactory}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return Cn(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(n){return this._transport.getPage(n)}getPageIndex(n){return this._transport.getPageIndex(n)}getDestinations(){return this._transport.getDestinations()}getDestination(n){return this._transport.getDestination(n)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig({intent:n="display"}={}){const{renderingIntent:e}=this._transport.getRenderingIntent(n);return this._transport.getOptionalContentConfig(e)}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(n=!1){return this._transport.startCleanup(n||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}cachedPageNumber(n){return this._transport.cachedPageNumber(n)}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}var t1,$b,K6;class eB{constructor(n,e,i,a=!1){rt(this,$b);rt(this,t1,!1);this._pageIndex=n,this._pageInfo=e,this._transport=i,this._stats=a?new eP:null,this._pdfBug=a,this.commonObjs=i.commonObjs,this.objs=new DD,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:n,rotation:e=this.rotate,offsetX:i=0,offsetY:a=0,dontFlip:s=!1}={}){return new M5({viewBox:this.view,userUnit:this.userUnit,scale:n,rotation:e,offsetX:i,offsetY:a,dontFlip:s})}getAnnotations({intent:n="display"}={}){const{renderingIntent:e}=this._transport.getRenderingIntent(n);return this._transport.getAnnotations(this._pageIndex,e)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return Cn(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){var n;return((n=this._transport._htmlForXfa)==null?void 0:n.children[this._pageIndex])||null}render({canvasContext:n,viewport:e,intent:i="display",annotationMode:a=Gg.ENABLE,transform:s=null,background:o=null,optionalContentConfigPromise:h=null,annotationCanvasMap:f=null,pageColors:d=null,printAnnotationStorage:p=null,isEditing:g=!1}){var F,k;(F=this._stats)==null||F.time("Overall");const x=this._transport.getRenderingIntent(i,a,p,g),{renderingIntent:w,cacheKey:_}=x;K(this,t1,!1),h||(h=this._transport.getOptionalContentConfig(w));let A=this._intentStates.get(_);A||(A=Object.create(null),this._intentStates.set(_,A)),A.streamReaderCancelTimeout&&(clearTimeout(A.streamReaderCancelTimeout),A.streamReaderCancelTimeout=null);const T=!!(w&ol.PRINT);A.displayReadyCapability||(A.displayReadyCapability=Promise.withResolvers(),A.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(k=this._stats)==null||k.time("Page Request"),this._pumpOperatorList(x));const E=O=>{var v;A.renderTasks.delete(P),T&&K(this,t1,!0),it(this,$b,K6).call(this),O?(P.capability.reject(O),this._abortOperatorList({intentState:A,reason:O instanceof Error?O:new Error(O)})):P.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"),(v=globalThis.Stats)!=null&&v.enabled&&globalThis.Stats.add(this.pageNumber,this._stats))},P=new IA({callback:E,params:{canvasContext:n,viewport:e,transform:s,background:o},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:f,operatorList:A.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!T,pdfBug:this._pdfBug,pageColors:d});(A.renderTasks||(A.renderTasks=new Set)).add(P);const M=P.task;return Promise.all([A.displayReadyCapability.promise,h]).then(([O,v])=>{var R;if(this.destroyed){E();return}if((R=this._stats)==null||R.time("Rendering"),!(v.renderingIntent&w))throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");P.initializeGraphics({transparency:O,optionalContentConfig:v}),P.operatorListChanged()}).catch(E),M}getOperatorList({intent:n="display",annotationMode:e=Gg.ENABLE,printAnnotationStorage:i=null,isEditing:a=!1}={}){var d;function s(){h.operatorList.lastChunk&&(h.opListReadCapability.resolve(h.operatorList),h.renderTasks.delete(f))}const o=this._transport.getRenderingIntent(n,e,i,a,!0);let h=this._intentStates.get(o.cacheKey);h||(h=Object.create(null),this._intentStates.set(o.cacheKey,h));let f;return h.opListReadCapability||(f=Object.create(null),f.operatorListChanged=s,h.opListReadCapability=Promise.withResolvers(),(h.renderTasks||(h.renderTasks=new Set)).add(f),h.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(d=this._stats)==null||d.time("Page Request"),this._pumpOperatorList(o)),h.opListReadCapability.promise}streamTextContent({includeMarkedContent:n=!1,disableNormalization:e=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:n===!0,disableNormalization:e===!0},{highWaterMark:100,size(a){return a.items.length}})}getTextContent(n={}){if(this._transport._htmlForXfa)return this.getXfa().then(i=>s9.textContent(i));const e=this.streamTextContent(n);return new Promise(function(i,a){function s(){o.read().then(function({value:f,done:d}){if(d){i(h);return}h.lang??(h.lang=f.lang),Object.assign(h.styles,f.styles),h.items.push(...f.items),s()},a)}const o=e.getReader(),h={items:[],styles:Object.create(null),lang:null};s()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const n=[];for(const e of this._intentStates.values())if(this._abortOperatorList({intentState:e,reason:new Error("Page was destroyed."),force:!0}),!e.opListReadCapability)for(const i of e.renderTasks)n.push(i.completed),i.cancel();return this.objs.clear(),K(this,t1,!1),Promise.all(n)}cleanup(n=!1){K(this,t1,!0);const e=it(this,$b,K6).call(this);return n&&e&&this._stats&&(this._stats=new eP),e}_startRenderPage(n,e){var a,s;const i=this._intentStates.get(e);i&&((a=this._stats)==null||a.timeEnd("Page Request"),(s=i.displayReadyCapability)==null||s.resolve(n))}_renderPageChunk(n,e){for(let i=0,a=n.length;i<a;i++)e.operatorList.fnArray.push(n.fnArray[i]),e.operatorList.argsArray.push(n.argsArray[i]);e.operatorList.lastChunk=n.lastChunk,e.operatorList.separateAnnots=n.separateAnnots;for(const i of e.renderTasks)i.operatorListChanged();n.lastChunk&&it(this,$b,K6).call(this)}_pumpOperatorList({renderingIntent:n,cacheKey:e,annotationStorageSerializable:i,modifiedIds:a}){const{map:s,transfer:o}=i,f=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:n,cacheKey:e,annotationStorage:s,modifiedIds:a},o).getReader(),d=this._intentStates.get(e);d.streamReader=f;const p=()=>{f.read().then(({value:g,done:x})=>{if(x){d.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(g,d),p())},g=>{if(d.streamReader=null,!this._transport.destroyed){if(d.operatorList){d.operatorList.lastChunk=!0;for(const x of d.renderTasks)x.operatorListChanged();it(this,$b,K6).call(this)}if(d.displayReadyCapability)d.displayReadyCapability.reject(g);else if(d.opListReadCapability)d.opListReadCapability.reject(g);else throw g}})};p()}_abortOperatorList({intentState:n,reason:e,force:i=!1}){if(n.streamReader){if(n.streamReaderCancelTimeout&&(clearTimeout(n.streamReaderCancelTimeout),n.streamReaderCancelTimeout=null),!i){if(n.renderTasks.size>0)return;if(e instanceof F_){let a=Vj;e.extraDelay>0&&e.extraDelay<1e3&&(a+=e.extraDelay),n.streamReaderCancelTimeout=setTimeout(()=>{n.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:n,reason:e,force:!0})},a);return}}if(n.streamReader.cancel(new Am(e.message)).catch(()=>{}),n.streamReader=null,!this._transport.destroyed){for(const[a,s]of this._intentStates)if(s===n){this._intentStates.delete(a);break}this.cleanup()}}}get stats(){return this._stats}}t1=new WeakMap,$b=new WeakSet,K6=function(){if(!b(this,t1)||this.destroyed)return!1;for(const{renderTasks:n,operatorList:e}of this._intentStates.values())if(n.size>0||!e.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),K(this,t1,!1),!0};var e1,Lv;class nB{constructor(){rt(this,e1,new Map);rt(this,Lv,Promise.resolve())}postMessage(n,e){const i={data:structuredClone(n,e?{transfer:e}:null)};b(this,Lv).then(()=>{for(const[a]of b(this,e1))a.call(this,i)})}addEventListener(n,e,i=null){let a=null;if((i==null?void 0:i.signal)instanceof AbortSignal){const{signal:s}=i;if(s.aborted){on("LoopbackPort - cannot use an `aborted` signal.");return}const o=()=>this.removeEventListener(n,e);a=()=>s.removeEventListener("abort",o),s.addEventListener("abort",o)}b(this,e1).set(e,a)}removeEventListener(n,e){const i=b(this,e1).get(e);i==null||i(),b(this,e1).delete(e)}terminate(){for(const[,n]of b(this,e1))n==null||n();b(this,e1).clear()}}e1=new WeakMap,Lv=new WeakMap;var Nv,qb,Vb,Cy,Y7,Iy,Z7;const ha=class ha{constructor({name:n=null,port:e=null,verbosity:i=UN()}={}){rt(this,Cy);var a;if(this.name=n,this.destroyed=!1,this.verbosity=i,this._readyCapability=Promise.withResolvers(),this._port=null,this._webWorker=null,this._messageHandler=null,e){if((a=b(ha,Vb))!=null&&a.has(e))throw new Error("Cannot use more than one PDFWorker per port.");(b(ha,Vb)||K(ha,Vb,new WeakMap)).set(e,this),this._initializeFromPort(e);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(n){this._port=n,this._messageHandler=new X6("main","worker",n),this._messageHandler.on("ready",function(){}),it(this,Cy,Y7).call(this)}_initialize(){if(b(ha,qb)||b(ha,Iy,Z7)){this._setupFakeWorker();return}let{workerSrc:n}=ha;try{ha._isSameOrigin(window.location,n)||(n=ha._createCDNWrapper(new URL(n,window.location).href));const e=new Worker(n,{type:"module"}),i=new X6("main","worker",e),a=()=>{s.abort(),i.destroy(),e.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},s=new AbortController;e.addEventListener("error",()=>{this._webWorker||a()},{signal:s.signal}),i.on("test",h=>{if(s.abort(),this.destroyed||!h){a();return}this._messageHandler=i,this._port=e,this._webWorker=e,it(this,Cy,Y7).call(this)}),i.on("ready",h=>{if(s.abort(),this.destroyed){a();return}try{o()}catch{this._setupFakeWorker()}});const o=()=>{const h=new Uint8Array;i.send("test",h,[h.buffer])};o();return}catch{Kv("The worker has been disabled.")}this._setupFakeWorker()}_setupFakeWorker(){b(ha,qb)||(on("Setting up fake worker."),K(ha,qb,!0)),ha._setupFakeWorkerGlobal.then(n=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const e=new nB;this._port=e;const i=`fake${io(ha,Nv)._++}`,a=new X6(i+"_worker",i,e);n.setup(a,e),this._messageHandler=new X6(i,i+"_worker",e),it(this,Cy,Y7).call(this)}).catch(n=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${n.message}".`))})}destroy(){var n,e,i;this.destroyed=!0,(n=this._webWorker)==null||n.terminate(),this._webWorker=null,(e=b(ha,Vb))==null||e.delete(this._port),this._port=null,(i=this._messageHandler)==null||i.destroy(),this._messageHandler=null}static fromPort(n){var i;if(!(n!=null&&n.port))throw new Error("PDFWorker.fromPort - invalid method signature.");const e=(i=b(this,Vb))==null?void 0:i.get(n.port);if(e){if(e._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return e}return new ha(n)}static get workerSrc(){if(m1.workerSrc)return m1.workerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _setupFakeWorkerGlobal(){return Cn(this,"_setupFakeWorkerGlobal",(async()=>b(this,Iy,Z7)?b(this,Iy,Z7):(await import(this.workerSrc)).WorkerMessageHandler)())}};Nv=new WeakMap,qb=new WeakMap,Vb=new WeakMap,Cy=new WeakSet,Y7=function(){this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})},Iy=new WeakSet,Z7=function(){var n;try{return((n=globalThis.pdfjsWorker)==null?void 0:n.WorkerMessageHandler)||null}catch{return null}},rt(ha,Iy),rt(ha,Nv,0),rt(ha,qb,!1),rt(ha,Vb),Es&&(K(ha,qb,!0),m1.workerSrc||(m1.workerSrc="./pdf.worker.mjs")),ha._isSameOrigin=(n,e)=>{const i=URL.parse(n);if(!(i!=null&&i.origin)||i.origin==="null")return!1;const a=new URL(e,i);return i.origin===a.origin},ha._createCDNWrapper=n=>{const e=`await import("${n}");`;return URL.createObjectURL(new Blob([e],{type:"text/javascript"}))};let Q2=ha;var n1,fh,Ty,Ey,r1,Kb,Y6;class rB{constructor(n,e,i,a,s){rt(this,Kb);rt(this,n1,new Map);rt(this,fh,new Map);rt(this,Ty,new Map);rt(this,Ey,new Map);rt(this,r1,null);this.messageHandler=n,this.loadingTask=e,this.commonObjs=new DD,this.fontLoader=new ij({ownerDocument:a.ownerDocument,styleElement:a.styleElement}),this.loadingParams=a.loadingParams,this._params=a,this.canvasFactory=s.canvasFactory,this.filterFactory=s.filterFactory,this.cMapReaderFactory=s.cMapReaderFactory,this.standardFontDataFactory=s.standardFontDataFactory,this.wasmFactory=s.wasmFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=i,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=Promise.withResolvers(),this.setupMessageHandler()}get annotationStorage(){return Cn(this,"annotationStorage",new L_)}getRenderingIntent(n,e=Gg.ENABLE,i=null,a=!1,s=!1){let o=ol.DISPLAY,h=dA;switch(n){case"any":o=ol.ANY;break;case"display":break;case"print":o=ol.PRINT;break;default:on(`getRenderingIntent - invalid intent: ${n}`)}const f=o&ol.PRINT&&i instanceof dD?i:this.annotationStorage;switch(e){case Gg.DISABLE:o+=ol.ANNOTATIONS_DISABLE;break;case Gg.ENABLE:break;case Gg.ENABLE_FORMS:o+=ol.ANNOTATIONS_FORMS;break;case Gg.ENABLE_STORAGE:o+=ol.ANNOTATIONS_STORAGE,h=f.serializable;break;default:on(`getRenderingIntent - invalid annotationMode: ${e}`)}a&&(o+=ol.IS_EDITING),s&&(o+=ol.OPLIST);const{ids:d,hash:p}=f.modifiedIds,g=[o,h.hash,p];return{renderingIntent:o,cacheKey:g.join("_"),annotationStorageSerializable:h,modifiedIds:d}}destroy(){var i;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=Promise.withResolvers(),(i=b(this,r1))==null||i.reject(new Error("Worker was destroyed during onPassword callback"));const n=[];for(const a of b(this,fh).values())n.push(a._destroy());b(this,fh).clear(),b(this,Ty).clear(),b(this,Ey).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const e=this.messageHandler.sendWithPromise("Terminate",null);return n.push(e),Promise.all(n).then(()=>{var a,s;this.commonObjs.clear(),this.fontLoader.clear(),b(this,n1).clear(),this.filterFactory.destroy(),i9.cleanup(),(a=this._networkStream)==null||a.cancelAllRequests(new Am("Worker was terminated.")),(s=this.messageHandler)==null||s.destroy(),this.messageHandler=null,this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:n,loadingTask:e}=this;n.on("GetReader",(i,a)=>{gi(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=s=>{this._lastProgress={loaded:s.loaded,total:s.total}},a.onPull=()=>{this._fullReader.read().then(function({value:s,done:o}){if(o){a.close();return}gi(s instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),a.enqueue(new Uint8Array(s),1,[s])}).catch(s=>{a.error(s)})},a.onCancel=s=>{this._fullReader.cancel(s),a.ready.catch(o=>{if(!this.destroyed)throw o})}}),n.on("ReaderHeadersReady",async i=>{var h;await this._fullReader.headersReady;const{isStreamingSupported:a,isRangeSupported:s,contentLength:o}=this._fullReader;return(!a||!s)&&(this._lastProgress&&((h=e.onProgress)==null||h.call(e,this._lastProgress)),this._fullReader.onProgress=f=>{var d;(d=e.onProgress)==null||d.call(e,{loaded:f.loaded,total:f.total})}),{isStreamingSupported:a,isRangeSupported:s,contentLength:o}}),n.on("GetRangeReader",(i,a)=>{gi(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const s=this._networkStream.getRangeReader(i.begin,i.end);if(!s){a.close();return}a.onPull=()=>{s.read().then(function({value:o,done:h}){if(h){a.close();return}gi(o instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),a.enqueue(new Uint8Array(o),1,[o])}).catch(o=>{a.error(o)})},a.onCancel=o=>{s.cancel(o),a.ready.catch(h=>{if(!this.destroyed)throw h})}}),n.on("GetDoc",({pdfInfo:i})=>{this._numPages=i.numPages,this._htmlForXfa=i.htmlForXfa,delete i.htmlForXfa,e._capability.resolve(new tB(i,this))}),n.on("DocException",i=>{e._capability.reject(uc(i))}),n.on("PasswordRequest",i=>{K(this,r1,Promise.withResolvers());try{if(!e.onPassword)throw uc(i);const a=s=>{s instanceof Error?b(this,r1).reject(s):b(this,r1).resolve({password:s})};e.onPassword(a,i.code)}catch(a){b(this,r1).reject(a)}return b(this,r1).promise}),n.on("DataLoaded",i=>{var a;(a=e.onProgress)==null||a.call(e,{loaded:i.length,total:i.length}),this.downloadInfoCapability.resolve(i)}),n.on("StartRenderPage",i=>{if(this.destroyed)return;b(this,fh).get(i.pageIndex)._startRenderPage(i.transparency,i.cacheKey)}),n.on("commonobj",([i,a,s])=>{var o;if(this.destroyed||this.commonObjs.has(i))return null;switch(a){case"Font":if("error"in s){const p=s.error;on(`Error during font loading: ${p}`),this.commonObjs.resolve(i,p);break}const h=this._params.pdfBug&&((o=globalThis.FontInspector)!=null&&o.enabled)?(p,g)=>globalThis.FontInspector.fontAdded(p,g):null,f=new sj(s,h);this.fontLoader.bind(f).catch(()=>n.sendWithPromise("FontFallback",{id:i})).finally(()=>{!f.fontExtraProperties&&f.data&&(f.data=null),this.commonObjs.resolve(i,f)});break;case"CopyLocalImage":const{imageRef:d}=s;gi(d,"The imageRef must be defined.");for(const p of b(this,fh).values())for(const[,g]of p.objs)if((g==null?void 0:g.ref)===d)return g.dataLen?(this.commonObjs.resolve(i,structuredClone(g)),g.dataLen):null;break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(i,s);break;default:throw new Error(`Got unknown common object type ${a}`)}return null}),n.on("obj",([i,a,s,o])=>{var f;if(this.destroyed)return;const h=b(this,fh).get(a);if(!h.objs.has(i)){if(h._intentStates.size===0){(f=o==null?void 0:o.bitmap)==null||f.close();return}switch(s){case"Image":case"Pattern":h.objs.resolve(i,o);break;default:throw new Error(`Got unknown object type ${s}`)}}}),n.on("DocProgress",i=>{var a;this.destroyed||(a=e.onProgress)==null||a.call(e,{loaded:i.loaded,total:i.total})}),n.on("FetchBinaryData",async i=>{if(this.destroyed)throw new Error("Worker was destroyed.");const a=this[i.type];if(!a)throw new Error(`${i.type} not initialized, see the \`useWorkerFetch\` parameter.`);return a.fetch(i)})}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var i;this.annotationStorage.size<=0&&on("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:n,transfer:e}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:n,filename:((i=this._fullReader)==null?void 0:i.filename)??null},e).finally(()=>{this.annotationStorage.resetModified()})}getPage(n){if(!Number.isInteger(n)||n<=0||n>this._numPages)return Promise.reject(new Error("Invalid page request."));const e=n-1,i=b(this,Ty).get(e);if(i)return i;const a=this.messageHandler.sendWithPromise("GetPage",{pageIndex:e}).then(s=>{if(this.destroyed)throw new Error("Transport destroyed");s.refStr&&b(this,Ey).set(s.refStr,n);const o=new eB(e,s,this,this._params.pdfBug);return b(this,fh).set(e,o),o});return b(this,Ty).set(e,a),a}getPageIndex(n){return AA(n)?this.messageHandler.sendWithPromise("GetPageIndex",{num:n.num,gen:n.gen}):Promise.reject(new Error("Invalid pageIndex request."))}getAnnotations(n,e){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:n,intent:e})}getFieldObjects(){return it(this,Kb,Y6).call(this,"GetFieldObjects")}hasJSActions(){return it(this,Kb,Y6).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(n){return typeof n!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:n})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return it(this,Kb,Y6).call(this,"GetDocJSActions")}getPageJSActions(n){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:n})}getStructTree(n){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:n})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(n){return it(this,Kb,Y6).call(this,"GetOptionalContentConfig").then(e=>new Ej(e,n))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const n="GetMetadata",e=b(this,n1).get(n);if(e)return e;const i=this.messageHandler.sendWithPromise(n,null).then(a=>{var s,o;return{info:a[0],metadata:a[1]?new Ij(a[1]):null,contentDispositionFilename:((s=this._fullReader)==null?void 0:s.filename)??null,contentLength:((o=this._fullReader)==null?void 0:o.contentLength)??null}});return b(this,n1).set(n,i),i}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(n=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const e of b(this,fh).values())if(!e.cleanup())throw new Error(`startCleanup: Page ${e.pageNumber} is currently rendering.`);this.commonObjs.clear(),n||this.fontLoader.clear(),b(this,n1).clear(),this.filterFactory.destroy(!0),i9.cleanup()}}cachedPageNumber(n){if(!AA(n))return null;const e=n.gen===0?`${n.num}R`:`${n.num}R${n.gen}`;return b(this,Ey).get(e)??null}}n1=new WeakMap,fh=new WeakMap,Ty=new WeakMap,Ey=new WeakMap,r1=new WeakMap,Kb=new WeakSet,Y6=function(n,e=null){const i=b(this,n1).get(n);if(i)return i;const a=this.messageHandler.sendWithPromise(n,e);return b(this,n1).set(n,a),a};const N6=Symbol("INITIAL_DATA");var Zc,V9,CA;class DD{constructor(){rt(this,V9);rt(this,Zc,Object.create(null))}get(n,e=null){if(e){const a=it(this,V9,CA).call(this,n);return a.promise.then(()=>e(a.data)),null}const i=b(this,Zc)[n];if(!i||i.data===N6)throw new Error(`Requesting object that isn't resolved yet ${n}.`);return i.data}has(n){const e=b(this,Zc)[n];return!!e&&e.data!==N6}delete(n){const e=b(this,Zc)[n];return!e||e.data===N6?!1:(delete b(this,Zc)[n],!0)}resolve(n,e=null){const i=it(this,V9,CA).call(this,n);i.data=e,i.resolve()}clear(){var n;for(const e in b(this,Zc)){const{data:i}=b(this,Zc)[e];(n=i==null?void 0:i.bitmap)==null||n.close()}K(this,Zc,Object.create(null))}*[Symbol.iterator](){for(const n in b(this,Zc)){const{data:e}=b(this,Zc)[n];e!==N6&&(yield[n,e])}}}Zc=new WeakMap,V9=new WeakSet,CA=function(n){var e;return(e=b(this,Zc))[n]||(e[n]={...Promise.withResolvers(),data:N6})};var om;class aB{constructor(n){rt(this,om,null);Oe(this,"onContinue",null);Oe(this,"onError",null);K(this,om,n)}get promise(){return b(this,om).capability.promise}cancel(n=0){b(this,om).cancel(null,n)}get separateAnnots(){const{separateAnnots:n}=b(this,om).operatorList;if(!n)return!1;const{annotationCanvasMap:e}=b(this,om);return n.form||n.canvas&&(e==null?void 0:e.size)>0}}om=new WeakMap;var cm,Yb;const mb=class mb{constructor({callback:n,params:e,objs:i,commonObjs:a,annotationCanvasMap:s,operatorList:o,pageIndex:h,canvasFactory:f,filterFactory:d,useRequestAnimationFrame:p=!1,pdfBug:g=!1,pageColors:x=null}){rt(this,cm,null);this.callback=n,this.params=e,this.objs=i,this.commonObjs=a,this.annotationCanvasMap=s,this.operatorListIdx=null,this.operatorList=o,this._pageIndex=h,this.canvasFactory=f,this.filterFactory=d,this._pdfBug=g,this.pageColors=x,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=p===!0&&typeof window<"u",this.cancelled=!1,this.capability=Promise.withResolvers(),this.task=new aB(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=e.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:n=!1,optionalContentConfig:e}){var h,f;if(this.cancelled)return;if(this._canvas){if(b(mb,Yb).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");b(mb,Yb).add(this._canvas)}this._pdfBug&&((h=globalThis.StepperManager)!=null&&h.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:i,viewport:a,transform:s,background:o}=this.params;this.gfx=new Z2(i,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:e},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:s,viewport:a,transparency:n,background:o}),this.operatorListIdx=0,this.graphicsReady=!0,(f=this.graphicsReadyCallback)==null||f.call(this)}cancel(n=null,e=0){var i,a,s;this.running=!1,this.cancelled=!0,(i=this.gfx)==null||i.endDrawing(),b(this,cm)&&(window.cancelAnimationFrame(b(this,cm)),K(this,cm,null)),b(mb,Yb).delete(this._canvas),n||(n=new F_(`Rendering cancelled, page ${this._pageIndex+1}`,e)),this.callback(n),(s=(a=this.task).onError)==null||s.call(a,n)}operatorListChanged(){var n;if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}(n=this.stepper)==null||n.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?K(this,cm,window.requestAnimationFrame(()=>{K(this,cm,null),this._nextBound().catch(this._cancelBound)})):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),b(mb,Yb).delete(this._canvas),this.callback())))}};cm=new WeakMap,Yb=new WeakMap,rt(mb,Yb,new WeakSet);let IA=mb;const iB="5.1.91",sB="45cbe8bb0";function yP(S){return Math.floor(Math.max(0,Math.min(1,S))*255).toString(16).padStart(2,"0")}function j6(S){return Math.max(0,Math.min(255,255*S))}class wP{static CMYK_G([n,e,i,a]){return["G",1-Math.min(1,.3*n+.59*i+.11*e+a)]}static G_CMYK([n]){return["CMYK",0,0,0,1-n]}static G_RGB([n]){return["RGB",n,n,n]}static G_rgb([n]){return n=j6(n),[n,n,n]}static G_HTML([n]){const e=yP(n);return`#${e}${e}${e}`}static RGB_G([n,e,i]){return["G",.3*n+.59*e+.11*i]}static RGB_rgb(n){return n.map(j6)}static RGB_HTML(n){return`#${n.map(yP).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([n,e,i,a]){return["RGB",1-Math.min(1,n+a),1-Math.min(1,i+a),1-Math.min(1,e+a)]}static CMYK_rgb([n,e,i,a]){return[j6(1-Math.min(1,n+a)),j6(1-Math.min(1,i+a)),j6(1-Math.min(1,e+a))]}static CMYK_HTML(n){const e=this.CMYK_RGB(n).slice(1);return this.RGB_HTML(e)}static RGB_CMYK([n,e,i]){const a=1-n,s=1-e,o=1-i,h=Math.min(a,s,o);return["CMYK",a,s,o,h]}}class oB{create(n,e,i=!1){if(n<=0||e<=0)throw new Error("Invalid SVG dimensions");const a=this._createSVG("svg:svg");return a.setAttribute("version","1.1"),i||(a.setAttribute("width",`${n}px`),a.setAttribute("height",`${e}px`)),a.setAttribute("preserveAspectRatio","none"),a.setAttribute("viewBox",`0 0 ${n} ${e}`),a}createElement(n){if(typeof n!="string")throw new Error("Invalid SVG element type");return this._createSVG(n)}_createSVG(n){Ar("Abstract method `_createSVG` called.")}}class wv extends oB{_createSVG(n){return document.createElementNS(jd,n)}}class RD{static setupStorage(n,e,i,a,s){const o=a.getValue(e,{value:null});switch(i.name){case"textarea":if(o.value!==null&&(n.textContent=o.value),s==="print")break;n.addEventListener("input",h=>{a.setValue(e,{value:h.target.value})});break;case"input":if(i.attributes.type==="radio"||i.attributes.type==="checkbox"){if(o.value===i.attributes.xfaOn?n.setAttribute("checked",!0):o.value===i.attributes.xfaOff&&n.removeAttribute("checked"),s==="print")break;n.addEventListener("change",h=>{a.setValue(e,{value:h.target.checked?h.target.getAttribute("xfaOn"):h.target.getAttribute("xfaOff")})})}else{if(o.value!==null&&n.setAttribute("value",o.value),s==="print")break;n.addEventListener("input",h=>{a.setValue(e,{value:h.target.value})})}break;case"select":if(o.value!==null){n.setAttribute("value",o.value);for(const h of i.children)h.attributes.value===o.value?h.attributes.selected=!0:h.attributes.hasOwnProperty("selected")&&delete h.attributes.selected}n.addEventListener("input",h=>{const f=h.target.options,d=f.selectedIndex===-1?"":f[f.selectedIndex].value;a.setValue(e,{value:d})});break}}static setAttributes({html:n,element:e,storage:i=null,intent:a,linkService:s}){const{attributes:o}=e,h=n instanceof HTMLAnchorElement;o.type==="radio"&&(o.name=`${o.name}-${a}`);for(const[f,d]of Object.entries(o))if(d!=null)switch(f){case"class":d.length&&n.setAttribute(f,d.join(" "));break;case"dataId":break;case"id":n.setAttribute("data-element-id",d);break;case"style":Object.assign(n.style,d);break;case"textContent":n.textContent=d;break;default:(!h||f!=="href"&&f!=="newWindow")&&n.setAttribute(f,d)}h&&s.addLinkAttributes(n,o.href,o.newWindow),i&&o.dataId&&this.setupStorage(n,o.dataId,e,i)}static render(n){var g,x;const e=n.annotationStorage,i=n.linkService,a=n.xfaHtml,s=n.intent||"display",o=document.createElement(a.name);a.attributes&&this.setAttributes({html:o,element:a,intent:s,linkService:i});const h=s!=="richText",f=n.div;if(f.append(o),n.viewport){const w=`matrix(${n.viewport.transform.join(",")})`;f.style.transform=w}h&&f.setAttribute("class","xfaLayer xfaFont");const d=[];if(a.children.length===0){if(a.value){const w=document.createTextNode(a.value);o.append(w),h&&s9.shouldBuildText(a.name)&&d.push(w)}return{textDivs:d}}const p=[[a,-1,o]];for(;p.length>0;){const[w,_,A]=p.at(-1);if(_+1===w.children.length){p.pop();continue}const T=w.children[++p.at(-1)[1]];if(T===null)continue;const{name:E}=T;if(E==="#text"){const M=document.createTextNode(T.value);d.push(M),A.append(M);continue}const P=(g=T==null?void 0:T.attributes)!=null&&g.xmlns?document.createElementNS(T.attributes.xmlns,E):document.createElement(E);if(A.append(P),T.attributes&&this.setAttributes({html:P,element:T,storage:e,intent:s,linkService:i}),((x=T.children)==null?void 0:x.length)>0)p.push([T,-1,P]);else if(T.value){const M=document.createTextNode(T.value);h&&s9.shouldBuildText(E)&&d.push(M),P.append(M)}}for(const w of f.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))w.setAttribute("readOnly",!0);return{textDivs:d}}static update(n){const e=`matrix(${n.viewport.transform.join(",")})`;n.div.style.transform=e,n.div.hidden=!1}}const L5=1e3,cB=9,_x=new WeakSet;class vP{static create(n){switch(n.data.annotationType){case di.LINK:return new LD(n);case di.TEXT:return new lB(n);case di.WIDGET:switch(n.data.fieldType){case"Tx":return new uB(n);case"Btn":return n.data.radioButton?new BD(n):n.data.checkBox?new fB(n):new dB(n);case"Ch":return new pB(n);case"Sig":return new hB(n)}return new Ix(n);case di.POPUP:return new EA(n);case di.FREETEXT:return new XD(n);case di.LINE:return new mB(n);case di.SQUARE:return new bB(n);case di.CIRCLE:return new xB(n);case di.POLYLINE:return new WD(n);case di.CARET:return new wB(n);case di.INK:return new B_(n);case di.POLYGON:return new yB(n);case di.HIGHLIGHT:return new $D(n);case di.UNDERLINE:return new vB(n);case di.SQUIGGLY:return new SB(n);case di.STRIKEOUT:return new kB(n);case di.STAMP:return new qD(n);case di.FILEATTACHMENT:return new AB(n);default:return new ti(n)}}}var Zb,Oy,Fy,K9,TA;const W_=class W_{constructor(n,{isRenderable:e=!1,ignoreBorder:i=!1,createQuadrilaterals:a=!1}={}){rt(this,K9);rt(this,Zb,null);rt(this,Oy,!1);rt(this,Fy,null);this.isRenderable=e,this.data=n.data,this.layer=n.layer,this.linkService=n.linkService,this.downloadManager=n.downloadManager,this.imageResourcesPath=n.imageResourcesPath,this.renderForms=n.renderForms,this.svgFactory=n.svgFactory,this.annotationStorage=n.annotationStorage,this.enableScripting=n.enableScripting,this.hasJSActions=n.hasJSActions,this._fieldObjects=n.fieldObjects,this.parent=n.parent,e&&(this.container=this._createContainer(i)),a&&this._createQuadrilaterals()}static _hasPopupData({titleObj:n,contentsObj:e,richText:i}){return!!(n!=null&&n.str||e!=null&&e.str||i!=null&&i.str)}get _isEditable(){return this.data.isEditable}get hasPopupData(){return W_._hasPopupData(this.data)}updateEdited(n){var i;if(!this.container)return;b(this,Zb)||K(this,Zb,{rect:this.data.rect.slice(0)});const{rect:e}=n;e&&it(this,K9,TA).call(this,e),(i=b(this,Fy))==null||i.popup.updateEdited(n)}resetEdited(){var n;b(this,Zb)&&(it(this,K9,TA).call(this,b(this,Zb).rect),(n=b(this,Fy))==null||n.popup.resetEdited(),K(this,Zb,null))}_createContainer(n){const{data:e,parent:{page:i,viewport:a}}=this,s=document.createElement("section");s.setAttribute("data-annotation-id",e.id),this instanceof Ix||(s.tabIndex=L5);const{style:o}=s;if(o.zIndex=this.parent.zIndex++,e.alternativeText&&(s.title=e.alternativeText),e.noRotate&&s.classList.add("norotate"),!e.rect||this instanceof EA){const{rotation:A}=e;return!e.hasOwnCanvas&&A!==0&&this.setRotation(A,s),s}const{width:h,height:f}=this;if(!n&&e.borderStyle.width>0){o.borderWidth=`${e.borderStyle.width}px`;const A=e.borderStyle.horizontalCornerRadius,T=e.borderStyle.verticalCornerRadius;if(A>0||T>0){const P=`calc(${A}px * var(--total-scale-factor)) / calc(${T}px * var(--total-scale-factor))`;o.borderRadius=P}else if(this instanceof BD){const P=`calc(${h}px * var(--total-scale-factor)) / calc(${f}px * var(--total-scale-factor))`;o.borderRadius=P}switch(e.borderStyle.style){case B2.SOLID:o.borderStyle="solid";break;case B2.DASHED:o.borderStyle="dashed";break;case B2.BEVELED:on("Unimplemented border style: beveled");break;case B2.INSET:on("Unimplemented border style: inset");break;case B2.UNDERLINE:o.borderBottomStyle="solid";break}const E=e.borderColor||null;E?(K(this,Oy,!0),o.borderColor=Me.makeHexColor(E[0]|0,E[1]|0,E[2]|0)):o.borderWidth=0}const d=Me.normalizeRect([e.rect[0],i.view[3]-e.rect[1]+i.view[1],e.rect[2],i.view[3]-e.rect[3]+i.view[1]]),{pageWidth:p,pageHeight:g,pageX:x,pageY:w}=a.rawDims;o.left=`${100*(d[0]-x)/p}%`,o.top=`${100*(d[1]-w)/g}%`;const{rotation:_}=e;return e.hasOwnCanvas||_===0?(o.width=`${100*h/p}%`,o.height=`${100*f/g}%`):this.setRotation(_,s),s}setRotation(n,e=this.container){if(!this.data.rect)return;const{pageWidth:i,pageHeight:a}=this.parent.viewport.rawDims;let{width:s,height:o}=this;n%180!==0&&([s,o]=[o,s]),e.style.width=`${100*s/i}%`,e.style.height=`${100*o/a}%`,e.setAttribute("data-main-rotation",(360-n)%360)}get _commonActions(){const n=(e,i,a)=>{const s=a.detail[e],o=s[0],h=s.slice(1);a.target.style[i]=wP[`${o}_HTML`](h),this.annotationStorage.setValue(this.data.id,{[i]:wP[`${o}_rgb`](h)})};return Cn(this,"_commonActions",{display:e=>{const{display:i}=e.detail,a=i%2===1;this.container.style.visibility=a?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:a,noPrint:i===1||i===2})},print:e=>{this.annotationStorage.setValue(this.data.id,{noPrint:!e.detail.print})},hidden:e=>{const{hidden:i}=e.detail;this.container.style.visibility=i?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:i,noView:i})},focus:e=>{setTimeout(()=>e.target.focus({preventScroll:!1}),0)},userName:e=>{e.target.title=e.detail.userName},readonly:e=>{e.target.disabled=e.detail.readonly},required:e=>{this._setRequired(e.target,e.detail.required)},bgColor:e=>{n("bgColor","backgroundColor",e)},fillColor:e=>{n("fillColor","backgroundColor",e)},fgColor:e=>{n("fgColor","color",e)},textColor:e=>{n("textColor","color",e)},borderColor:e=>{n("borderColor","borderColor",e)},strokeColor:e=>{n("strokeColor","borderColor",e)},rotation:e=>{const i=e.detail.rotation;this.setRotation(i),this.annotationStorage.setValue(this.data.id,{rotation:i})}})}_dispatchEventFromSandbox(n,e){const i=this._commonActions;for(const a of Object.keys(e.detail)){const s=n[a]||i[a];s==null||s(e)}}_setDefaultPropertiesFromJS(n){if(!this.enableScripting)return;const e=this.annotationStorage.getRawValue(this.data.id);if(!e)return;const i=this._commonActions;for(const[a,s]of Object.entries(e)){const o=i[a];if(o){const h={detail:{[a]:s},target:n};o(h),delete e[a]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:n}=this.data;if(!n)return;const[e,i,a,s]=this.data.rect.map(A=>Math.fround(A));if(n.length===8){const[A,T,E,P]=n.subarray(2,6);if(a===A&&s===T&&e===E&&i===P)return}const{style:o}=this.container;let h;if(b(this,Oy)){const{borderColor:A,borderWidth:T}=o;o.borderWidth=0,h=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${A}" stroke-width="${T}">`],this.container.classList.add("hasBorder")}const f=a-e,d=s-i,{svgFactory:p}=this,g=p.createElement("svg");g.classList.add("quadrilateralsContainer"),g.setAttribute("width",0),g.setAttribute("height",0);const x=p.createElement("defs");g.append(x);const w=p.createElement("clipPath"),_=`clippath_${this.data.id}`;w.setAttribute("id",_),w.setAttribute("clipPathUnits","objectBoundingBox"),x.append(w);for(let A=2,T=n.length;A<T;A+=8){const E=n[A],P=n[A+1],M=n[A+2],F=n[A+3],k=p.createElement("rect"),O=(M-e)/f,v=(s-P)/d,R=(E-M)/f,G=(P-F)/d;k.setAttribute("x",O),k.setAttribute("y",v),k.setAttribute("width",R),k.setAttribute("height",G),w.append(k),h==null||h.push(`<rect vector-effect="non-scaling-stroke" x="${O}" y="${v}" width="${R}" height="${G}"/>`)}b(this,Oy)&&(h.push("</g></svg>')"),o.backgroundImage=h.join("")),this.container.append(g),this.container.style.clipPath=`url(#${_})`}_createPopup(){const{data:n}=this,e=K(this,Fy,new EA({data:{color:n.color,titleObj:n.titleObj,modificationDate:n.modificationDate,contentsObj:n.contentsObj,richText:n.richText,parentRect:n.rect,borderStyle:0,id:`popup_${n.id}`,rotation:n.rotation},parent:this.parent,elements:[this]}));this.parent.div.append(e.render())}render(){Ar("Abstract method `AnnotationElement.render` called")}_getElementsByName(n,e=null){const i=[];if(this._fieldObjects){const a=this._fieldObjects[n];if(a)for(const{page:s,id:o,exportValues:h}of a){if(s===-1||o===e)continue;const f=typeof h=="string"?h:null,d=document.querySelector(`[data-element-id="${o}"]`);if(d&&!_x.has(d)){on(`_getElementsByName - element not allowed: ${o}`);continue}i.push({id:o,exportValue:f,domElement:d})}return i}for(const a of document.getElementsByName(n)){const{exportValue:s}=a,o=a.getAttribute("data-element-id");o!==e&&_x.has(a)&&i.push({id:o,exportValue:s,domElement:a})}return i}show(){var n;this.container&&(this.container.hidden=!1),(n=this.popup)==null||n.maybeShow()}hide(){var n;this.container&&(this.container.hidden=!0),(n=this.popup)==null||n.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const n=this.getElementsToTriggerPopup();if(Array.isArray(n))for(const e of n)e.classList.add("highlightArea");else n.classList.add("highlightArea")}_editOnDoubleClick(){if(!this._isEditable)return;const{annotationEditorType:n,data:{id:e}}=this;this.container.addEventListener("dblclick",()=>{var i;(i=this.linkService.eventBus)==null||i.dispatch("switchannotationeditormode",{source:this,mode:n,editId:e})})}get width(){return this.data.rect[2]-this.data.rect[0]}get height(){return this.data.rect[3]-this.data.rect[1]}};Zb=new WeakMap,Oy=new WeakMap,Fy=new WeakMap,K9=new WeakSet,TA=function(n){const{container:{style:e},data:{rect:i,rotation:a},parent:{viewport:{rawDims:{pageWidth:s,pageHeight:o,pageX:h,pageY:f}}}}=this;i==null||i.splice(0,4,...n),e.left=`${100*(n[0]-h)/s}%`,e.top=`${100*(o-n[3]+f)/o}%`,a===0?(e.width=`${100*(n[2]-n[0])/s}%`,e.height=`${100*(n[3]-n[1])/o}%`):this.setRotation(a)};let ti=W_;var cl,hb,ND,jD;class LD extends ti{constructor(e,i=null){super(e,{isRenderable:!0,ignoreBorder:!!(i!=null&&i.ignoreBorder),createQuadrilaterals:!0});rt(this,cl);this.isTooltipOnly=e.data.isTooltipOnly}render(){const{data:e,linkService:i}=this,a=document.createElement("a");a.setAttribute("data-element-id",e.id);let s=!1;return e.url?(i.addLinkAttributes(a,e.url,e.newWindow),s=!0):e.action?(this._bindNamedAction(a,e.action),s=!0):e.attachment?(it(this,cl,ND).call(this,a,e.attachment,e.attachmentDest),s=!0):e.setOCGState?(it(this,cl,jD).call(this,a,e.setOCGState),s=!0):e.dest?(this._bindLink(a,e.dest),s=!0):(e.actions&&(e.actions.Action||e.actions["Mouse Up"]||e.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(a,e),s=!0),e.resetForm?(this._bindResetFormAction(a,e.resetForm),s=!0):this.isTooltipOnly&&!s&&(this._bindLink(a,""),s=!0)),this.container.classList.add("linkAnnotation"),s&&this.container.append(a),this.container}_bindLink(e,i){e.href=this.linkService.getDestinationHash(i),e.onclick=()=>(i&&this.linkService.goToDestination(i),!1),(i||i==="")&&it(this,cl,hb).call(this)}_bindNamedAction(e,i){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>(this.linkService.executeNamedAction(i),!1),it(this,cl,hb).call(this)}_bindJSAction(e,i){e.href=this.linkService.getAnchorUrl("");const a=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const s of Object.keys(i.actions)){const o=a.get(s);o&&(e[o]=()=>{var h;return(h=this.linkService.eventBus)==null||h.dispatch("dispatcheventinsandbox",{source:this,detail:{id:i.id,name:s}}),!1})}e.onclick||(e.onclick=()=>!1),it(this,cl,hb).call(this)}_bindResetFormAction(e,i){const a=e.onclick;if(a||(e.href=this.linkService.getAnchorUrl("")),it(this,cl,hb).call(this),!this._fieldObjects){on('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),a||(e.onclick=()=>!1);return}e.onclick=()=>{var g;a==null||a();const{fields:s,refs:o,include:h}=i,f=[];if(s.length!==0||o.length!==0){const x=new Set(o);for(const w of s){const _=this._fieldObjects[w]||[];for(const{id:A}of _)x.add(A)}for(const w of Object.values(this._fieldObjects))for(const _ of w)x.has(_.id)===h&&f.push(_)}else for(const x of Object.values(this._fieldObjects))f.push(...x);const d=this.annotationStorage,p=[];for(const x of f){const{id:w}=x;switch(p.push(w),x.type){case"text":{const A=x.defaultValue||"";d.setValue(w,{value:A});break}case"checkbox":case"radiobutton":{const A=x.defaultValue===x.exportValues;d.setValue(w,{value:A});break}case"combobox":case"listbox":{const A=x.defaultValue||"";d.setValue(w,{value:A});break}default:continue}const _=document.querySelector(`[data-element-id="${w}"]`);if(_){if(!_x.has(_)){on(`_bindResetFormAction - element not allowed: ${w}`);continue}}else continue;_.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((g=this.linkService.eventBus)==null||g.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:p,name:"ResetForm"}})),!1}}}cl=new WeakSet,hb=function(){this.container.setAttribute("data-internal-link","")},ND=function(e,i,a=null){e.href=this.linkService.getAnchorUrl(""),i.description&&(e.title=i.description),e.onclick=()=>{var s;return(s=this.downloadManager)==null||s.openOrDownloadData(i.content,i.filename,a),!1},it(this,cl,hb).call(this)},jD=function(e,i){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>(this.linkService.executeSetOCGState(i),!1),it(this,cl,hb).call(this)};class lB extends ti{constructor(n){super(n,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const n=document.createElement("img");return n.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",n.setAttribute("data-l10n-id","pdfjs-text-annotation-type"),n.setAttribute("data-l10n-args",JSON.stringify({type:this.data.name})),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(n),this.container}}class Ix extends ti{render(){return this.container}showElementAndHideCanvas(n){var e;this.data.hasOwnCanvas&&(((e=n.previousSibling)==null?void 0:e.nodeName)==="CANVAS"&&(n.previousSibling.hidden=!0),n.hidden=!1)}_getKeyModifier(n){return Ms.platform.isMac?n.metaKey:n.ctrlKey}_setEventListener(n,e,i,a,s){i.includes("mouse")?n.addEventListener(i,o=>{var h;(h=this.linkService.eventBus)==null||h.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:a,value:s(o),shift:o.shiftKey,modifier:this._getKeyModifier(o)}})}):n.addEventListener(i,o=>{var h;if(i==="blur"){if(!e.focused||!o.relatedTarget)return;e.focused=!1}else if(i==="focus"){if(e.focused)return;e.focused=!0}s&&((h=this.linkService.eventBus)==null||h.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:a,value:s(o)}}))})}_setEventListeners(n,e,i,a){var s,o,h;for(const[f,d]of i)(d==="Action"||(s=this.data.actions)!=null&&s[d])&&((d==="Focus"||d==="Blur")&&(e||(e={focused:!1})),this._setEventListener(n,e,f,d,a),d==="Focus"&&!((o=this.data.actions)!=null&&o.Blur)?this._setEventListener(n,e,"blur","Blur",null):d==="Blur"&&!((h=this.data.actions)!=null&&h.Focus)&&this._setEventListener(n,e,"focus","Focus",null))}_setBackgroundColor(n){const e=this.data.backgroundColor||null;n.style.backgroundColor=e===null?"transparent":Me.makeHexColor(e[0],e[1],e[2])}_setTextStyle(n){const e=["left","center","right"],{fontColor:i}=this.data.defaultAppearanceData,a=this.data.defaultAppearanceData.fontSize||cB,s=n.style;let o;const h=2,f=d=>Math.round(10*d)/10;if(this.data.multiLine){const d=Math.abs(this.data.rect[3]-this.data.rect[1]-h),p=Math.round(d/(Nk*a))||1,g=d/p;o=Math.min(a,f(g/Nk))}else{const d=Math.abs(this.data.rect[3]-this.data.rect[1]-h);o=Math.min(a,f(d/Nk))}s.fontSize=`calc(${o}px * var(--total-scale-factor))`,s.color=Me.makeHexColor(i[0],i[1],i[2]),this.data.textAlignment!==null&&(s.textAlign=e[this.data.textAlignment])}_setRequired(n,e){e?n.setAttribute("required",!0):n.removeAttribute("required"),n.setAttribute("aria-required",e)}}class uB extends Ix{constructor(n){const e=n.renderForms||n.data.hasOwnCanvas||!n.data.hasAppearance&&!!n.data.fieldValue;super(n,{isRenderable:e})}setPropertyOnSiblings(n,e,i,a){const s=this.annotationStorage;for(const o of this._getElementsByName(n.name,n.id))o.domElement&&(o.domElement[e]=i),s.setValue(o.id,{[a]:i})}render(){var a,s;const n=this.annotationStorage,e=this.data.id;this.container.classList.add("textWidgetAnnotation");let i=null;if(this.renderForms){const o=n.getValue(e,{value:this.data.fieldValue});let h=o.value||"";const f=n.getValue(e,{charLimit:this.data.maxLen}).charLimit;f&&h.length>f&&(h=h.slice(0,f));let d=o.formattedValue||((a=this.data.textContent)==null?void 0:a.join(`
`))||null;d&&this.data.comb&&(d=d.replaceAll(/\s+/g,""));const p={userValue:h,formattedValue:d,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(i=document.createElement("textarea"),i.textContent=d??h,this.data.doNotScroll&&(i.style.overflowY="hidden")):(i=document.createElement("input"),i.type=this.data.password?"password":"text",i.setAttribute("value",d??h),this.data.doNotScroll&&(i.style.overflowX="hidden")),this.data.hasOwnCanvas&&(i.hidden=!0),_x.add(i),i.setAttribute("data-element-id",e),i.disabled=this.data.readOnly,i.name=this.data.fieldName,i.tabIndex=L5,this._setRequired(i,this.data.required),f&&(i.maxLength=f),i.addEventListener("input",x=>{n.setValue(e,{value:x.target.value}),this.setPropertyOnSiblings(i,"value",x.target.value,"value"),p.formattedValue=null}),i.addEventListener("resetform",x=>{const w=this.data.defaultFieldValue??"";i.value=p.userValue=w,p.formattedValue=null});let g=x=>{const{formattedValue:w}=p;w!=null&&(x.target.value=w),x.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){i.addEventListener("focus",w=>{var A;if(p.focused)return;const{target:_}=w;p.userValue&&(_.value=p.userValue),p.lastCommittedValue=_.value,p.commitKey=1,(A=this.data.actions)!=null&&A.Focus||(p.focused=!0)}),i.addEventListener("updatefromsandbox",w=>{this.showElementAndHideCanvas(w.target);const _={value(A){p.userValue=A.detail.value??"",n.setValue(e,{value:p.userValue.toString()}),A.target.value=p.userValue},formattedValue(A){const{formattedValue:T}=A.detail;p.formattedValue=T,T!=null&&A.target!==document.activeElement&&(A.target.value=T),n.setValue(e,{formattedValue:T})},selRange(A){A.target.setSelectionRange(...A.detail.selRange)},charLimit:A=>{var M;const{charLimit:T}=A.detail,{target:E}=A;if(T===0){E.removeAttribute("maxLength");return}E.setAttribute("maxLength",T);let P=p.userValue;!P||P.length<=T||(P=P.slice(0,T),E.value=p.userValue=P,n.setValue(e,{value:P}),(M=this.linkService.eventBus)==null||M.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:P,willCommit:!0,commitKey:1,selStart:E.selectionStart,selEnd:E.selectionEnd}}))}};this._dispatchEventFromSandbox(_,w)}),i.addEventListener("keydown",w=>{var T;p.commitKey=1;let _=-1;if(w.key==="Escape"?_=0:w.key==="Enter"&&!this.data.multiLine?_=2:w.key==="Tab"&&(p.commitKey=3),_===-1)return;const{value:A}=w.target;p.lastCommittedValue!==A&&(p.lastCommittedValue=A,p.userValue=A,(T=this.linkService.eventBus)==null||T.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:A,willCommit:!0,commitKey:_,selStart:w.target.selectionStart,selEnd:w.target.selectionEnd}}))});const x=g;g=null,i.addEventListener("blur",w=>{var A,T;if(!p.focused||!w.relatedTarget)return;(A=this.data.actions)!=null&&A.Blur||(p.focused=!1);const{value:_}=w.target;p.userValue=_,p.lastCommittedValue!==_&&((T=this.linkService.eventBus)==null||T.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:_,willCommit:!0,commitKey:p.commitKey,selStart:w.target.selectionStart,selEnd:w.target.selectionEnd}})),x(w)}),(s=this.data.actions)!=null&&s.Keystroke&&i.addEventListener("beforeinput",w=>{var k;p.lastCommittedValue=null;const{data:_,target:A}=w,{value:T,selectionStart:E,selectionEnd:P}=A;let M=E,F=P;switch(w.inputType){case"deleteWordBackward":{const O=T.substring(0,E).match(/\w*[^\w]*$/);O&&(M-=O[0].length);break}case"deleteWordForward":{const O=T.substring(E).match(/^[^\w]*\w*/);O&&(F+=O[0].length);break}case"deleteContentBackward":E===P&&(M-=1);break;case"deleteContentForward":E===P&&(F+=1);break}w.preventDefault(),(k=this.linkService.eventBus)==null||k.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:T,change:_||"",willCommit:!1,selStart:M,selEnd:F}})}),this._setEventListeners(i,p,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],w=>w.target.value)}if(g&&i.addEventListener("blur",g),this.data.comb){const w=(this.data.rect[2]-this.data.rect[0])/f;i.classList.add("comb"),i.style.letterSpacing=`calc(${w}px * var(--total-scale-factor) - 1ch)`}}else i=document.createElement("div"),i.textContent=this.data.fieldValue,i.style.verticalAlign="middle",i.style.display="table-cell",this.data.hasOwnCanvas&&(i.hidden=!0);return this._setTextStyle(i),this._setBackgroundColor(i),this._setDefaultPropertiesFromJS(i),this.container.append(i),this.container}}class hB extends Ix{constructor(n){super(n,{isRenderable:!!n.data.hasOwnCanvas})}}class fB extends Ix{constructor(n){super(n,{isRenderable:n.renderForms})}render(){const n=this.annotationStorage,e=this.data,i=e.id;let a=n.getValue(i,{value:e.exportValue===e.fieldValue}).value;typeof a=="string"&&(a=a!=="Off",n.setValue(i,{value:a})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const s=document.createElement("input");return _x.add(s),s.setAttribute("data-element-id",i),s.disabled=e.readOnly,this._setRequired(s,this.data.required),s.type="checkbox",s.name=e.fieldName,a&&s.setAttribute("checked",!0),s.setAttribute("exportValue",e.exportValue),s.tabIndex=L5,s.addEventListener("change",o=>{const{name:h,checked:f}=o.target;for(const d of this._getElementsByName(h,i)){const p=f&&d.exportValue===e.exportValue;d.domElement&&(d.domElement.checked=p),n.setValue(d.id,{value:p})}n.setValue(i,{value:f})}),s.addEventListener("resetform",o=>{const h=e.defaultFieldValue||"Off";o.target.checked=h===e.exportValue}),this.enableScripting&&this.hasJSActions&&(s.addEventListener("updatefromsandbox",o=>{const h={value(f){f.target.checked=f.detail.value!=="Off",n.setValue(i,{value:f.target.checked})}};this._dispatchEventFromSandbox(h,o)}),this._setEventListeners(s,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],o=>o.target.checked)),this._setBackgroundColor(s),this._setDefaultPropertiesFromJS(s),this.container.append(s),this.container}}class BD extends Ix{constructor(n){super(n,{isRenderable:n.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const n=this.annotationStorage,e=this.data,i=e.id;let a=n.getValue(i,{value:e.fieldValue===e.buttonValue}).value;if(typeof a=="string"&&(a=a!==e.buttonValue,n.setValue(i,{value:a})),a)for(const o of this._getElementsByName(e.fieldName,i))n.setValue(o.id,{value:!1});const s=document.createElement("input");if(_x.add(s),s.setAttribute("data-element-id",i),s.disabled=e.readOnly,this._setRequired(s,this.data.required),s.type="radio",s.name=e.fieldName,a&&s.setAttribute("checked",!0),s.tabIndex=L5,s.addEventListener("change",o=>{const{name:h,checked:f}=o.target;for(const d of this._getElementsByName(h,i))n.setValue(d.id,{value:!1});n.setValue(i,{value:f})}),s.addEventListener("resetform",o=>{const h=e.defaultFieldValue;o.target.checked=h!=null&&h===e.buttonValue}),this.enableScripting&&this.hasJSActions){const o=e.buttonValue;s.addEventListener("updatefromsandbox",h=>{const f={value:d=>{const p=o===d.detail.value;for(const g of this._getElementsByName(d.target.name)){const x=p&&g.id===i;g.domElement&&(g.domElement.checked=x),n.setValue(g.id,{value:x})}}};this._dispatchEventFromSandbox(f,h)}),this._setEventListeners(s,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],h=>h.target.checked)}return this._setBackgroundColor(s),this._setDefaultPropertiesFromJS(s),this.container.append(s),this.container}}class dB extends LD{constructor(n){super(n,{ignoreBorder:n.data.hasAppearance})}render(){const n=super.render();n.classList.add("buttonWidgetAnnotation","pushButton");const e=n.lastChild;return this.enableScripting&&this.hasJSActions&&e&&(this._setDefaultPropertiesFromJS(e),e.addEventListener("updatefromsandbox",i=>{this._dispatchEventFromSandbox({},i)})),n}}class pB extends Ix{constructor(n){super(n,{isRenderable:n.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const n=this.annotationStorage,e=this.data.id,i=n.getValue(e,{value:this.data.fieldValue}),a=document.createElement("select");_x.add(a),a.setAttribute("data-element-id",e),a.disabled=this.data.readOnly,this._setRequired(a,this.data.required),a.name=this.data.fieldName,a.tabIndex=L5;let s=this.data.combo&&this.data.options.length>0;this.data.combo||(a.size=this.data.options.length,this.data.multiSelect&&(a.multiple=!0)),a.addEventListener("resetform",p=>{const g=this.data.defaultFieldValue;for(const x of a.options)x.selected=x.value===g});for(const p of this.data.options){const g=document.createElement("option");g.textContent=p.displayValue,g.value=p.exportValue,i.value.includes(p.exportValue)&&(g.setAttribute("selected",!0),s=!1),a.append(g)}let o=null;if(s){const p=document.createElement("option");p.value=" ",p.setAttribute("hidden",!0),p.setAttribute("selected",!0),a.prepend(p),o=()=>{p.remove(),a.removeEventListener("input",o),o=null},a.addEventListener("input",o)}const h=p=>{const g=p?"value":"textContent",{options:x,multiple:w}=a;return w?Array.prototype.filter.call(x,_=>_.selected).map(_=>_[g]):x.selectedIndex===-1?null:x[x.selectedIndex][g]};let f=h(!1);const d=p=>{const g=p.target.options;return Array.prototype.map.call(g,x=>({displayValue:x.textContent,exportValue:x.value}))};return this.enableScripting&&this.hasJSActions?(a.addEventListener("updatefromsandbox",p=>{const g={value(x){o==null||o();const w=x.detail.value,_=new Set(Array.isArray(w)?w:[w]);for(const A of a.options)A.selected=_.has(A.value);n.setValue(e,{value:h(!0)}),f=h(!1)},multipleSelection(x){a.multiple=!0},remove(x){const w=a.options,_=x.detail.remove;w[_].selected=!1,a.remove(_),w.length>0&&Array.prototype.findIndex.call(w,T=>T.selected)===-1&&(w[0].selected=!0),n.setValue(e,{value:h(!0),items:d(x)}),f=h(!1)},clear(x){for(;a.length!==0;)a.remove(0);n.setValue(e,{value:null,items:[]}),f=h(!1)},insert(x){const{index:w,displayValue:_,exportValue:A}=x.detail.insert,T=a.children[w],E=document.createElement("option");E.textContent=_,E.value=A,T?T.before(E):a.append(E),n.setValue(e,{value:h(!0),items:d(x)}),f=h(!1)},items(x){const{items:w}=x.detail;for(;a.length!==0;)a.remove(0);for(const _ of w){const{displayValue:A,exportValue:T}=_,E=document.createElement("option");E.textContent=A,E.value=T,a.append(E)}a.options.length>0&&(a.options[0].selected=!0),n.setValue(e,{value:h(!0),items:d(x)}),f=h(!1)},indices(x){const w=new Set(x.detail.indices);for(const _ of x.target.options)_.selected=w.has(_.index);n.setValue(e,{value:h(!0)}),f=h(!1)},editable(x){x.target.disabled=!x.detail.editable}};this._dispatchEventFromSandbox(g,p)}),a.addEventListener("input",p=>{var w;const g=h(!0),x=h(!1);n.setValue(e,{value:g}),p.preventDefault(),(w=this.linkService.eventBus)==null||w.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:f,change:x,changeEx:g,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(a,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],p=>p.target.value)):a.addEventListener("input",function(p){n.setValue(e,{value:h(!0)})}),this.data.combo&&this._setTextStyle(a),this._setBackgroundColor(a),this._setDefaultPropertiesFromJS(a),this.container.append(a),this.container}}class EA extends ti{constructor(n){const{data:e,elements:i}=n;super(n,{isRenderable:ti._hasPopupData(e)}),this.elements=i,this.popup=null}render(){this.container.classList.add("popupAnnotation");const n=this.popup=new gB({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),e=[];for(const i of this.elements)i.popup=n,i.container.ariaHasPopup="dialog",e.push(i.data.id),i.addHighlightArea();return this.container.setAttribute("aria-controls",e.map(i=>`${O_}${i}`).join(",")),this.container}}var Py,jv,Bv,My,Dy,La,a1,Ry,Y9,Z9,Ly,i1,U0,s1,Q9,o1,J9,Qb,Jb,_r,Q7,OA,UD,GD,HD,zD,J7,tv,FA;class gB{constructor({container:n,color:e,elements:i,titleObj:a,modificationDate:s,contentsObj:o,richText:h,parent:f,rect:d,parentRect:p,open:g}){rt(this,_r);rt(this,Py,it(this,_r,HD).bind(this));rt(this,jv,it(this,_r,FA).bind(this));rt(this,Bv,it(this,_r,tv).bind(this));rt(this,My,it(this,_r,J7).bind(this));rt(this,Dy,null);rt(this,La,null);rt(this,a1,null);rt(this,Ry,null);rt(this,Y9,null);rt(this,Z9,null);rt(this,Ly,null);rt(this,i1,!1);rt(this,U0,null);rt(this,s1,null);rt(this,Q9,null);rt(this,o1,null);rt(this,J9,null);rt(this,Qb,null);rt(this,Jb,!1);var x;K(this,La,n),K(this,J9,a),K(this,a1,o),K(this,o1,h),K(this,Z9,f),K(this,Dy,e),K(this,Q9,d),K(this,Ly,p),K(this,Y9,i),K(this,Ry,M_.toDateObject(s)),this.trigger=i.flatMap(w=>w.getElementsToTriggerPopup());for(const w of this.trigger)w.addEventListener("click",b(this,My)),w.addEventListener("mouseenter",b(this,Bv)),w.addEventListener("mouseleave",b(this,jv)),w.classList.add("popupTriggerArea");for(const w of i)(x=w.container)==null||x.addEventListener("keydown",b(this,Py));b(this,La).hidden=!0,g&&it(this,_r,J7).call(this)}render(){if(b(this,U0))return;const n=K(this,U0,document.createElement("div"));if(n.className="popup",b(this,Dy)){const s=n.style.outlineColor=Me.makeHexColor(...b(this,Dy));n.style.backgroundColor=`color-mix(in srgb, ${s} 30%, white)`}const e=document.createElement("span");e.className="header";const i=document.createElement("h1");if(e.append(i),{dir:i.dir,str:i.textContent}=b(this,J9),n.append(e),b(this,Ry)){const s=document.createElement("span");s.classList.add("popupDate"),s.setAttribute("data-l10n-id","pdfjs-annotation-date-time-string"),s.setAttribute("data-l10n-args",JSON.stringify({dateObj:b(this,Ry).valueOf()})),e.append(s)}const a=b(this,_r,Q7);if(a)RD.render({xfaHtml:a,intent:"richText",div:n}),n.lastChild.classList.add("richText","popupContent");else{const s=this._formatContents(b(this,a1));n.append(s)}b(this,La).append(n)}_formatContents({str:n,dir:e}){const i=document.createElement("p");i.classList.add("popupContent"),i.dir=e;const a=n.split(/(?:\r\n?|\n)/);for(let s=0,o=a.length;s<o;++s){const h=a[s];i.append(document.createTextNode(h)),s<o-1&&i.append(document.createElement("br"))}return i}updateEdited({rect:n,popupContent:e}){var i;b(this,Qb)||K(this,Qb,{contentsObj:b(this,a1),richText:b(this,o1)}),n&&K(this,s1,null),e&&(K(this,o1,it(this,_r,GD).call(this,e)),K(this,a1,null)),(i=b(this,U0))==null||i.remove(),K(this,U0,null)}resetEdited(){var n;b(this,Qb)&&({contentsObj:io(this,a1)._,richText:io(this,o1)._}=b(this,Qb),K(this,Qb,null),(n=b(this,U0))==null||n.remove(),K(this,U0,null),K(this,s1,null))}forceHide(){K(this,Jb,this.isVisible),b(this,Jb)&&(b(this,La).hidden=!0)}maybeShow(){b(this,Jb)&&(b(this,U0)||it(this,_r,tv).call(this),K(this,Jb,!1),b(this,La).hidden=!1)}get isVisible(){return b(this,La).hidden===!1}}Py=new WeakMap,jv=new WeakMap,Bv=new WeakMap,My=new WeakMap,Dy=new WeakMap,La=new WeakMap,a1=new WeakMap,Ry=new WeakMap,Y9=new WeakMap,Z9=new WeakMap,Ly=new WeakMap,i1=new WeakMap,U0=new WeakMap,s1=new WeakMap,Q9=new WeakMap,o1=new WeakMap,J9=new WeakMap,Qb=new WeakMap,Jb=new WeakMap,_r=new WeakSet,Q7=function(){const n=b(this,o1),e=b(this,a1);return n!=null&&n.str&&(!(e!=null&&e.str)||e.str===n.str)&&b(this,o1).html||null},OA=function(){var n,e,i;return((i=(e=(n=b(this,_r,Q7))==null?void 0:n.attributes)==null?void 0:e.style)==null?void 0:i.fontSize)||0},UD=function(){var n,e,i;return((i=(e=(n=b(this,_r,Q7))==null?void 0:n.attributes)==null?void 0:e.style)==null?void 0:i.color)||null},GD=function(n){const e=[],i={str:n,html:{name:"div",attributes:{dir:"auto"},children:[{name:"p",children:e}]}},a={style:{color:b(this,_r,UD),fontSize:b(this,_r,OA)?`calc(${b(this,_r,OA)}px * var(--total-scale-factor))`:""}};for(const s of n.split(`
`))e.push({name:"span",value:s,attributes:a});return i},HD=function(n){n.altKey||n.shiftKey||n.ctrlKey||n.metaKey||(n.key==="Enter"||n.key==="Escape"&&b(this,i1))&&it(this,_r,J7).call(this)},zD=function(){if(b(this,s1)!==null)return;const{page:{view:n},viewport:{rawDims:{pageWidth:e,pageHeight:i,pageX:a,pageY:s}}}=b(this,Z9);let o=!!b(this,Ly),h=o?b(this,Ly):b(this,Q9);for(const _ of b(this,Y9))if(!h||Me.intersect(_.data.rect,h)!==null){h=_.data.rect,o=!0;break}const f=Me.normalizeRect([h[0],n[3]-h[1]+n[1],h[2],n[3]-h[3]+n[1]]),p=o?h[2]-h[0]+5:0,g=f[0]+p,x=f[1];K(this,s1,[100*(g-a)/e,100*(x-s)/i]);const{style:w}=b(this,La);w.left=`${b(this,s1)[0]}%`,w.top=`${b(this,s1)[1]}%`},J7=function(){K(this,i1,!b(this,i1)),b(this,i1)?(it(this,_r,tv).call(this),b(this,La).addEventListener("click",b(this,My)),b(this,La).addEventListener("keydown",b(this,Py))):(it(this,_r,FA).call(this),b(this,La).removeEventListener("click",b(this,My)),b(this,La).removeEventListener("keydown",b(this,Py)))},tv=function(){b(this,U0)||this.render(),this.isVisible?b(this,i1)&&b(this,La).classList.add("focused"):(it(this,_r,zD).call(this),b(this,La).hidden=!1,b(this,La).style.zIndex=parseInt(b(this,La).style.zIndex)+1e3)},FA=function(){b(this,La).classList.remove("focused"),!(b(this,i1)||!this.isVisible)&&(b(this,La).hidden=!0,b(this,La).style.zIndex=parseInt(b(this,La).style.zIndex)-1e3)};class XD extends ti{constructor(n){super(n,{isRenderable:!0,ignoreBorder:!0}),this.textContent=n.data.textContent,this.textPosition=n.data.textPosition,this.annotationEditorType=an.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const n=document.createElement("div");n.classList.add("annotationTextContent"),n.setAttribute("role","comment");for(const e of this.textContent){const i=document.createElement("span");i.textContent=e,n.append(i)}this.container.append(n)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}var t5;class mB extends ti{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});rt(this,t5,null)}render(){this.container.classList.add("lineAnnotation");const{data:e,width:i,height:a}=this,s=this.svgFactory.create(i,a,!0),o=K(this,t5,this.svgFactory.createElement("svg:line"));return o.setAttribute("x1",e.rect[2]-e.lineCoordinates[0]),o.setAttribute("y1",e.rect[3]-e.lineCoordinates[1]),o.setAttribute("x2",e.rect[2]-e.lineCoordinates[2]),o.setAttribute("y2",e.rect[3]-e.lineCoordinates[3]),o.setAttribute("stroke-width",e.borderStyle.width||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","transparent"),s.append(o),this.container.append(s),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return b(this,t5)}addHighlightArea(){this.container.classList.add("highlightArea")}}t5=new WeakMap;var e5;class bB extends ti{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});rt(this,e5,null)}render(){this.container.classList.add("squareAnnotation");const{data:e,width:i,height:a}=this,s=this.svgFactory.create(i,a,!0),o=e.borderStyle.width,h=K(this,e5,this.svgFactory.createElement("svg:rect"));return h.setAttribute("x",o/2),h.setAttribute("y",o/2),h.setAttribute("width",i-o),h.setAttribute("height",a-o),h.setAttribute("stroke-width",o||1),h.setAttribute("stroke","transparent"),h.setAttribute("fill","transparent"),s.append(h),this.container.append(s),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return b(this,e5)}addHighlightArea(){this.container.classList.add("highlightArea")}}e5=new WeakMap;var n5;class xB extends ti{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});rt(this,n5,null)}render(){this.container.classList.add("circleAnnotation");const{data:e,width:i,height:a}=this,s=this.svgFactory.create(i,a,!0),o=e.borderStyle.width,h=K(this,n5,this.svgFactory.createElement("svg:ellipse"));return h.setAttribute("cx",i/2),h.setAttribute("cy",a/2),h.setAttribute("rx",i/2-o/2),h.setAttribute("ry",a/2-o/2),h.setAttribute("stroke-width",o||1),h.setAttribute("stroke","transparent"),h.setAttribute("fill","transparent"),s.append(h),this.container.append(s),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return b(this,n5)}addHighlightArea(){this.container.classList.add("highlightArea")}}n5=new WeakMap;var r5;class WD extends ti{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});rt(this,r5,null);this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const{data:{rect:e,vertices:i,borderStyle:a,popupRef:s},width:o,height:h}=this;if(!i)return this.container;const f=this.svgFactory.create(o,h,!0);let d=[];for(let g=0,x=i.length;g<x;g+=2){const w=i[g]-e[0],_=e[3]-i[g+1];d.push(`${w},${_}`)}d=d.join(" ");const p=K(this,r5,this.svgFactory.createElement(this.svgElementName));return p.setAttribute("points",d),p.setAttribute("stroke-width",a.width||1),p.setAttribute("stroke","transparent"),p.setAttribute("fill","transparent"),f.append(p),this.container.append(f),!s&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return b(this,r5)}addHighlightArea(){this.container.classList.add("highlightArea")}}r5=new WeakMap;class yB extends WD{constructor(n){super(n),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class wB extends ti{constructor(n){super(n,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}var a5,tx,i5,PA;class B_ extends ti{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});rt(this,i5);rt(this,a5,null);rt(this,tx,[]);this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=this.data.it==="InkHighlight"?an.HIGHLIGHT:an.INK}render(){this.container.classList.add(this.containerClassName);const{data:{rect:e,rotation:i,inkLists:a,borderStyle:s,popupRef:o}}=this,{transform:h,width:f,height:d}=it(this,i5,PA).call(this,i,e),p=this.svgFactory.create(f,d,!0),g=K(this,a5,this.svgFactory.createElement("svg:g"));p.append(g),g.setAttribute("stroke-width",s.width||1),g.setAttribute("stroke-linecap","round"),g.setAttribute("stroke-linejoin","round"),g.setAttribute("stroke-miterlimit",10),g.setAttribute("stroke","transparent"),g.setAttribute("fill","transparent"),g.setAttribute("transform",h);for(let x=0,w=a.length;x<w;x++){const _=this.svgFactory.createElement(this.svgElementName);b(this,tx).push(_),_.setAttribute("points",a[x].join(",")),g.append(_)}return!o&&this.hasPopupData&&this._createPopup(),this.container.append(p),this._editOnDoubleClick(),this.container}updateEdited(e){super.updateEdited(e);const{thickness:i,points:a,rect:s}=e,o=b(this,a5);if(i>=0&&o.setAttribute("stroke-width",i||1),a)for(let h=0,f=b(this,tx).length;h<f;h++)b(this,tx)[h].setAttribute("points",a[h].join(","));if(s){const{transform:h,width:f,height:d}=it(this,i5,PA).call(this,this.data.rotation,s);o.parentElement.setAttribute("viewBox",`0 0 ${f} ${d}`),o.setAttribute("transform",h)}}getElementsToTriggerPopup(){return b(this,tx)}addHighlightArea(){this.container.classList.add("highlightArea")}}a5=new WeakMap,tx=new WeakMap,i5=new WeakSet,PA=function(e,i){switch(e){case 90:return{transform:`rotate(90) translate(${-i[0]},${i[1]}) scale(1,-1)`,width:i[3]-i[1],height:i[2]-i[0]};case 180:return{transform:`rotate(180) translate(${-i[2]},${i[1]}) scale(1,-1)`,width:i[2]-i[0],height:i[3]-i[1]};case 270:return{transform:`rotate(270) translate(${-i[2]},${i[3]}) scale(1,-1)`,width:i[3]-i[1],height:i[2]-i[0]};default:return{transform:`translate(${-i[0]},${i[3]}) scale(1,-1)`,width:i[2]-i[0],height:i[3]-i[1]}}};class $D extends ti{constructor(n){super(n,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0}),this.annotationEditorType=an.HIGHLIGHT}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this._editOnDoubleClick(),this.container}}class vB extends ti{constructor(n){super(n,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class SB extends ti{constructor(n){super(n,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class kB extends ti{constructor(n){super(n,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class qD extends ti{constructor(n){super(n,{isRenderable:!0,ignoreBorder:!0}),this.annotationEditorType=an.STAMP}render(){return this.container.classList.add("stampAnnotation"),this.container.setAttribute("role","img"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}var s5,o5,MA;class AB extends ti{constructor(e){var a;super(e,{isRenderable:!0});rt(this,o5);rt(this,s5,null);const{file:i}=this.data;this.filename=i.filename,this.content=i.content,(a=this.linkService.eventBus)==null||a.dispatch("fileattachmentannotation",{source:this,...i})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:e,data:i}=this;let a;i.hasAppearance||i.fillAlpha===0?a=document.createElement("div"):(a=document.createElement("img"),a.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(i.name)?"paperclip":"pushpin"}.svg`,i.fillAlpha&&i.fillAlpha<1&&(a.style=`filter: opacity(${Math.round(i.fillAlpha*100)}%);`)),a.addEventListener("dblclick",it(this,o5,MA).bind(this)),K(this,s5,a);const{isMac:s}=Ms.platform;return e.addEventListener("keydown",o=>{o.key==="Enter"&&(s?o.metaKey:o.ctrlKey)&&it(this,o5,MA).call(this)}),!i.popupRef&&this.hasPopupData?this._createPopup():a.classList.add("popupTriggerArea"),e.append(a),e}getElementsToTriggerPopup(){return b(this,s5)}addHighlightArea(){this.container.classList.add("highlightArea")}}s5=new WeakMap,o5=new WeakSet,MA=function(){var e;(e=this.downloadManager)==null||e.openOrDownloadData(this.content,this.filename)};var c5,ex,lm,l5,Tm,RA,LA;const $_=class $_{constructor({div:n,accessibilityManager:e,annotationCanvasMap:i,annotationEditorUIManager:a,page:s,viewport:o,structTreeLayer:h}){rt(this,Tm);rt(this,c5,null);rt(this,ex,null);rt(this,lm,new Map);rt(this,l5,null);this.div=n,K(this,c5,e),K(this,ex,i),K(this,l5,h||null),this.page=s,this.viewport=o,this.zIndex=0,this._annotationEditorUIManager=a}hasEditableAnnotations(){return b(this,lm).size>0}async render(n){var o;const{annotations:e}=n,i=this.div;kx(i,this.viewport);const a=new Map,s={data:null,layer:i,linkService:n.linkService,downloadManager:n.downloadManager,imageResourcesPath:n.imageResourcesPath||"",renderForms:n.renderForms!==!1,svgFactory:new wv,annotationStorage:n.annotationStorage||new L_,enableScripting:n.enableScripting===!0,hasJSActions:n.hasJSActions,fieldObjects:n.fieldObjects,parent:this,elements:null};for(const h of e){if(h.noHTML)continue;const f=h.annotationType===di.POPUP;if(f){const g=a.get(h.id);if(!g)continue;s.elements=g}else if(h.rect[2]===h.rect[0]||h.rect[3]===h.rect[1])continue;s.data=h;const d=vP.create(s);if(!d.isRenderable)continue;if(!f&&h.popupRef){const g=a.get(h.popupRef);g?g.push(d):a.set(h.popupRef,[d])}const p=d.render();h.hidden&&(p.style.visibility="hidden"),await it(this,Tm,RA).call(this,p,h.id),d._isEditable&&(b(this,lm).set(d.data.id,d),(o=this._annotationEditorUIManager)==null||o.renderAnnotationElement(d))}it(this,Tm,LA).call(this)}async addLinkAnnotations(n,e){const i={data:null,layer:this.div,linkService:e,svgFactory:new wv,parent:this};for(const a of n){a.borderStyle||(a.borderStyle=$_._defaultBorderStyle),i.data=a;const s=vP.create(i);if(!s.isRenderable)continue;const o=s.render();await it(this,Tm,RA).call(this,o,a.id)}}update({viewport:n}){const e=this.div;this.viewport=n,kx(e,{rotation:n.rotation}),it(this,Tm,LA).call(this),e.hidden=!1}getEditableAnnotations(){return Array.from(b(this,lm).values())}getEditableAnnotation(n){return b(this,lm).get(n)}static get _defaultBorderStyle(){return Cn(this,"_defaultBorderStyle",Object.freeze({width:1,rawWidth:1,style:B2.SOLID,dashArray:[3],horizontalCornerRadius:0,verticalCornerRadius:0}))}};c5=new WeakMap,ex=new WeakMap,lm=new WeakMap,l5=new WeakMap,Tm=new WeakSet,RA=async function(n,e){var o,h;const i=n.firstChild||n,a=i.id=`${O_}${e}`,s=await((o=b(this,l5))==null?void 0:o.getAriaAttributes(a));if(s)for(const[f,d]of s)i.setAttribute(f,d);this.div.append(n),(h=b(this,c5))==null||h.moveElementInDOM(this.div,n,i,!1)},LA=function(){var e;if(!b(this,ex))return;const n=this.div;for(const[i,a]of b(this,ex)){const s=n.querySelector(`[data-annotation-id="${i}"]`);if(!s)continue;a.className="annotationContent";const{firstChild:o}=s;o?o.nodeName==="CANVAS"?o.replaceWith(a):o.classList.contains("annotationContent")?o.after(a):o.before(a):s.append(a);const h=b(this,lm).get(i);h&&(h._hasNoCanvas?((e=this._annotationEditorUIManager)==null||e.setMissingCanvas(i,s.id,a),h._hasNoCanvas=!1):h.canvas=a)}b(this,ex).clear()};let DA=$_;const R7=/\r\n?|\n/g;var G0,Qc,u5,nx,Jc,mi,VD,KD,YD,ev,w1,nv,rv,ZD,jA,QD;const $r=class $r extends ga{constructor(e){super({...e,name:"freeTextEditor"});rt(this,mi);rt(this,G0);rt(this,Qc,"");rt(this,u5,`${this.id}-editor`);rt(this,nx,null);rt(this,Jc);K(this,G0,e.color||$r._defaultColor||ga._defaultLineColor),K(this,Jc,e.fontSize||$r._defaultFontSize)}static get _keyboardManager(){const e=$r.prototype,i=o=>o.isEmpty(),a=Ax.TRANSLATE_SMALL,s=Ax.TRANSLATE_BIG;return Cn(this,"_keyboardManager",new D5([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],e.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],e.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],e._translateEmpty,{args:[-a,0],checker:i}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],e._translateEmpty,{args:[-s,0],checker:i}],[["ArrowRight","mac+ArrowRight"],e._translateEmpty,{args:[a,0],checker:i}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],e._translateEmpty,{args:[s,0],checker:i}],[["ArrowUp","mac+ArrowUp"],e._translateEmpty,{args:[0,-a],checker:i}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],e._translateEmpty,{args:[0,-s],checker:i}],[["ArrowDown","mac+ArrowDown"],e._translateEmpty,{args:[0,a],checker:i}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],e._translateEmpty,{args:[0,s],checker:i}]]))}static initialize(e,i){ga.initialize(e,i);const a=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(a.getPropertyValue("--freetext-padding"))}static updateDefaultParams(e,i){switch(e){case Rn.FREETEXT_SIZE:$r._defaultFontSize=i;break;case Rn.FREETEXT_COLOR:$r._defaultColor=i;break}}updateParams(e,i){switch(e){case Rn.FREETEXT_SIZE:it(this,mi,VD).call(this,i);break;case Rn.FREETEXT_COLOR:it(this,mi,KD).call(this,i);break}}static get defaultPropertiesToUpdate(){return[[Rn.FREETEXT_SIZE,$r._defaultFontSize],[Rn.FREETEXT_COLOR,$r._defaultColor||ga._defaultLineColor]]}get propertiesToUpdate(){return[[Rn.FREETEXT_SIZE,b(this,Jc)],[Rn.FREETEXT_COLOR,b(this,G0)]]}_translateEmpty(e,i){this._uiManager.translateSelectedEditors(e,i,!0)}getInitialTranslation(){const e=this.parentScale;return[-$r._internalPadding*e,-($r._internalPadding+b(this,Jc))*e]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){if(this.isInEditMode())return;this.parent.setEditingState(!1),this.parent.updateToolbar(an.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),K(this,nx,new AbortController);const e=this._uiManager.combinedSignal(b(this,nx));this.editorDiv.addEventListener("keydown",this.editorDivKeydown.bind(this),{signal:e}),this.editorDiv.addEventListener("focus",this.editorDivFocus.bind(this),{signal:e}),this.editorDiv.addEventListener("blur",this.editorDivBlur.bind(this),{signal:e}),this.editorDiv.addEventListener("input",this.editorDivInput.bind(this),{signal:e}),this.editorDiv.addEventListener("paste",this.editorDivPaste.bind(this),{signal:e})}disableEditMode(){var e;this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",b(this,u5)),this._isDraggable=!0,(e=b(this,nx))==null||e.abort(),K(this,nx,null),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freetextEditing"))}focusin(e){this._focusEventsAllowed&&(super.focusin(e),e.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(e){var i;this.width||(this.enableEditMode(),e&&this.editorDiv.focus(),(i=this._initialOptions)!=null&&i.isCentered&&this.center(),this._initialOptions=null)}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freetextEditing")),super.remove()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const e=b(this,Qc),i=K(this,Qc,it(this,mi,YD).call(this).trimEnd());if(e===i)return;const a=s=>{if(K(this,Qc,s),!s){this.remove();return}it(this,mi,rv).call(this),this._uiManager.rebuild(this),it(this,mi,ev).call(this)};this.addCommands({cmd:()=>{a(i)},undo:()=>{a(e)},mustExec:!1}),it(this,mi,ev).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(e){this.enterInEditMode()}keydown(e){e.target===this.div&&e.key==="Enter"&&(this.enterInEditMode(),e.preventDefault())}editorDivKeydown(e){$r._keyboardManager.exec(this,e)}editorDivFocus(e){this.isEditing=!0}editorDivBlur(e){this.isEditing=!1}editorDivInput(e){this.parent.div.classList.toggle("freetextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let e,i;(this._isCopy||this.annotationElementId)&&(e=this.x,i=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",b(this,u5)),this.editorDiv.setAttribute("data-l10n-id","pdfjs-free-text2"),this.editorDiv.setAttribute("data-l10n-attrs","default-content"),this.enableEditing(),this.editorDiv.contentEditable=!0;const{style:a}=this.editorDiv;if(a.fontSize=`calc(${b(this,Jc)}px * var(--total-scale-factor))`,a.color=b(this,G0),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),R_(this,this.div,["dblclick","keydown"]),this._isCopy||this.annotationElementId){const[s,o]=this.parentDimensions;if(this.annotationElementId){const{position:h}=this._initialData;let[f,d]=this.getInitialTranslation();[f,d]=this.pageTranslationToScreen(f,d);const[p,g]=this.pageDimensions,[x,w]=this.pageTranslation;let _,A;switch(this.rotation){case 0:_=e+(h[0]-x)/p,A=i+this.height-(h[1]-w)/g;break;case 90:_=e+(h[0]-x)/p,A=i-(h[1]-w)/g,[f,d]=[d,-f];break;case 180:_=e-this.width+(h[0]-x)/p,A=i-(h[1]-w)/g,[f,d]=[-f,-d];break;case 270:_=e+(h[0]-x-this.height*g)/p,A=i+(h[1]-w-this.width*p)/g,[f,d]=[-d,f];break}this.setAt(_*s,A*o,f,d)}else this._moveAfterPaste(e,i);it(this,mi,rv).call(this),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}editorDivPaste(e){var _,A,T;const i=e.clipboardData||window.clipboardData,{types:a}=i;if(a.length===1&&a[0]==="text/plain")return;e.preventDefault();const s=it(_=$r,w1,jA).call(_,i.getData("text")||"").replaceAll(R7,`
`);if(!s)return;const o=window.getSelection();if(!o.rangeCount)return;this.editorDiv.normalize(),o.deleteFromDocument();const h=o.getRangeAt(0);if(!s.includes(`
`)){h.insertNode(document.createTextNode(s)),this.editorDiv.normalize(),o.collapseToStart();return}const{startContainer:f,startOffset:d}=h,p=[],g=[];if(f.nodeType===Node.TEXT_NODE){const E=f.parentElement;if(g.push(f.nodeValue.slice(d).replaceAll(R7,"")),E!==this.editorDiv){let P=p;for(const M of this.editorDiv.childNodes){if(M===E){P=g;continue}P.push(it(A=$r,w1,nv).call(A,M))}}p.push(f.nodeValue.slice(0,d).replaceAll(R7,""))}else if(f===this.editorDiv){let E=p,P=0;for(const M of this.editorDiv.childNodes)P++===d&&(E=g),E.push(it(T=$r,w1,nv).call(T,M))}K(this,Qc,`${p.join(`
`)}${s}${g.join(`
`)}`),it(this,mi,rv).call(this);const x=new Range;let w=Math.sumPrecise(p.map(E=>E.length));for(const{firstChild:E}of this.editorDiv.childNodes)if(E.nodeType===Node.TEXT_NODE){const P=E.nodeValue.length;if(w<=P){x.setStart(E,w),x.setEnd(E,w);break}w-=P}o.removeAllRanges(),o.addRange(x)}get contentDiv(){return this.editorDiv}static async deserialize(e,i,a){var h;let s=null;if(e instanceof XD){const{data:{defaultAppearanceData:{fontSize:f,fontColor:d},rect:p,rotation:g,id:x,popupRef:w},textContent:_,textPosition:A,parent:{page:{pageNumber:T}}}=e;if(!_||_.length===0)return null;s=e={annotationType:an.FREETEXT,color:Array.from(d),fontSize:f,value:_.join(`
`),position:A,pageIndex:T-1,rect:p.slice(0),rotation:g,id:x,deleted:!1,popupRef:w}}const o=await super.deserialize(e,i,a);return K(o,Jc,e.fontSize),K(o,G0,Me.makeHexColor(...e.color)),K(o,Qc,it(h=$r,w1,jA).call(h,e.value)),o.annotationElementId=e.id||null,o._initialData=s,o}serialize(e=!1){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const i=$r._internalPadding*this.parentScale,a=this.getRect(i,i),s=ga._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:b(this,G0)),o={annotationType:an.FREETEXT,color:s,fontSize:b(this,Jc),value:it(this,mi,ZD).call(this),pageIndex:this.pageIndex,rect:a,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return e?(o.isCopy=!0,o):this.annotationElementId&&!it(this,mi,QD).call(this,o)?null:(o.id=this.annotationElementId,o)}renderAnnotationElement(e){const i=super.renderAnnotationElement(e);if(this.deleted)return i;const{style:a}=i;a.fontSize=`calc(${b(this,Jc)}px * var(--total-scale-factor))`,a.color=b(this,G0),i.replaceChildren();for(const o of b(this,Qc).split(`
`)){const h=document.createElement("div");h.append(o?document.createTextNode(o):document.createElement("br")),i.append(h)}const s=$r._internalPadding*this.parentScale;return e.updateEdited({rect:this.getRect(s,s),popupContent:b(this,Qc)}),i}resetAnnotationElement(e){super.resetAnnotationElement(e),e.resetEdited()}};G0=new WeakMap,Qc=new WeakMap,u5=new WeakMap,nx=new WeakMap,Jc=new WeakMap,mi=new WeakSet,VD=function(e){const i=s=>{this.editorDiv.style.fontSize=`calc(${s}px * var(--total-scale-factor))`,this.translate(0,-(s-b(this,Jc))*this.parentScale),K(this,Jc,s),it(this,mi,ev).call(this)},a=b(this,Jc);this.addCommands({cmd:i.bind(this,e),undo:i.bind(this,a),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:Rn.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},KD=function(e){const i=s=>{K(this,G0,this.editorDiv.style.color=s)},a=b(this,G0);this.addCommands({cmd:i.bind(this,e),undo:i.bind(this,a),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:Rn.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},YD=function(){var a;const e=[];this.editorDiv.normalize();let i=null;for(const s of this.editorDiv.childNodes)(i==null?void 0:i.nodeType)===Node.TEXT_NODE&&s.nodeName==="BR"||(e.push(it(a=$r,w1,nv).call(a,s)),i=s);return e.join(`
`)},ev=function(){const[e,i]=this.parentDimensions;let a;if(this.isAttachedToDOM)a=this.div.getBoundingClientRect();else{const{currentLayer:s,div:o}=this,h=o.style.display,f=o.classList.contains("hidden");o.classList.remove("hidden"),o.style.display="hidden",s.div.append(this.div),a=o.getBoundingClientRect(),o.remove(),o.style.display=h,o.classList.toggle("hidden",f)}this.rotation%180===this.parentRotation%180?(this.width=a.width/e,this.height=a.height/i):(this.width=a.height/e,this.height=a.width/i),this.fixAndSetPosition()},w1=new WeakSet,nv=function(e){return(e.nodeType===Node.TEXT_NODE?e.nodeValue:e.innerText).replaceAll(R7,"")},rv=function(){if(this.editorDiv.replaceChildren(),!!b(this,Qc))for(const e of b(this,Qc).split(`
`)){const i=document.createElement("div");i.append(e?document.createTextNode(e):document.createElement("br")),this.editorDiv.append(i)}},ZD=function(){return b(this,Qc).replaceAll(" "," ")},jA=function(e){return e.replaceAll(" "," ")},QD=function(e){const{value:i,fontSize:a,color:s,pageIndex:o}=this._initialData;return this._hasBeenMoved||e.value!==i||e.fontSize!==a||e.color.some((h,f)=>h!==s[f])||e.pageIndex!==o},rt($r,w1),Oe($r,"_freeTextDefaultContent",""),Oe($r,"_internalPadding",0),Oe($r,"_defaultColor",null),Oe($r,"_defaultFontSize",10),Oe($r,"_type","freetext"),Oe($r,"_editorType",an.FREETEXT);let NA=$r;class _e{toSVGPath(){Ar("Abstract method `toSVGPath` must be implemented.")}get box(){Ar("Abstract getter `box` must be implemented.")}serialize(n,e){Ar("Abstract method `serialize` must be implemented.")}static _rescale(n,e,i,a,s,o){o||(o=new Float32Array(n.length));for(let h=0,f=n.length;h<f;h+=2)o[h]=e+n[h]*a,o[h+1]=i+n[h+1]*s;return o}static _rescaleAndSwap(n,e,i,a,s,o){o||(o=new Float32Array(n.length));for(let h=0,f=n.length;h<f;h+=2)o[h]=e+n[h+1]*a,o[h+1]=i+n[h]*s;return o}static _translate(n,e,i,a){a||(a=new Float32Array(n.length));for(let s=0,o=n.length;s<o;s+=2)a[s]=e+n[s],a[s+1]=i+n[s+1];return a}static svgRound(n){return Math.round(n*1e4)}static _normalizePoint(n,e,i,a,s){switch(s){case 90:return[1-e/i,n/a];case 180:return[1-n/i,1-e/a];case 270:return[e/i,1-n/a];default:return[n/i,e/a]}}static _normalizePagePoint(n,e,i){switch(i){case 90:return[1-e,n];case 180:return[1-n,1-e];case 270:return[e,1-n];default:return[n,e]}}static createBezierPoints(n,e,i,a,s,o){return[(n+5*i)/6,(e+5*a)/6,(5*i+s)/6,(5*a+o)/6,(i+s)/2,(a+o)/2]}}Oe(_e,"PRECISION",1e-4);var tl,H0,Ny,jy,dh,kn,rx,ax,h5,f5,By,Uy,um,d5,Uv,Gv,Ei,Z6,JD,tR,eR,nR,rR,aR;const Hd=class Hd{constructor({x:n,y:e},i,a,s,o,h=0){rt(this,Ei);rt(this,tl);rt(this,H0,[]);rt(this,Ny);rt(this,jy);rt(this,dh,[]);rt(this,kn,new Float32Array(18));rt(this,rx);rt(this,ax);rt(this,h5);rt(this,f5);rt(this,By);rt(this,Uy);rt(this,um,[]);K(this,tl,i),K(this,Uy,s*a),K(this,jy,o),b(this,kn).set([NaN,NaN,NaN,NaN,n,e],6),K(this,Ny,h),K(this,f5,b(Hd,d5)*a),K(this,h5,b(Hd,Gv)*a),K(this,By,a),b(this,um).push(n,e)}isEmpty(){return isNaN(b(this,kn)[8])}add({x:n,y:e}){var G;K(this,rx,n),K(this,ax,e);const[i,a,s,o]=b(this,tl);let[h,f,d,p]=b(this,kn).subarray(8,12);const g=n-d,x=e-p,w=Math.hypot(g,x);if(w<b(this,h5))return!1;const _=w-b(this,f5),A=_/w,T=A*g,E=A*x;let P=h,M=f;h=d,f=p,d+=T,p+=E,(G=b(this,um))==null||G.push(n,e);const F=-E/_,k=T/_,O=F*b(this,Uy),v=k*b(this,Uy);return b(this,kn).set(b(this,kn).subarray(2,8),0),b(this,kn).set([d+O,p+v],4),b(this,kn).set(b(this,kn).subarray(14,18),12),b(this,kn).set([d-O,p-v],16),isNaN(b(this,kn)[6])?(b(this,dh).length===0&&(b(this,kn).set([h+O,f+v],2),b(this,dh).push(NaN,NaN,NaN,NaN,(h+O-i)/s,(f+v-a)/o),b(this,kn).set([h-O,f-v],14),b(this,H0).push(NaN,NaN,NaN,NaN,(h-O-i)/s,(f-v-a)/o)),b(this,kn).set([P,M,h,f,d,p],6),!this.isEmpty()):(b(this,kn).set([P,M,h,f,d,p],6),Math.abs(Math.atan2(M-f,P-h)-Math.atan2(E,T))<Math.PI/2?([h,f,d,p]=b(this,kn).subarray(2,6),b(this,dh).push(NaN,NaN,NaN,NaN,((h+d)/2-i)/s,((f+p)/2-a)/o),[h,f,P,M]=b(this,kn).subarray(14,18),b(this,H0).push(NaN,NaN,NaN,NaN,((P+h)/2-i)/s,((M+f)/2-a)/o),!0):([P,M,h,f,d,p]=b(this,kn).subarray(0,6),b(this,dh).push(((P+5*h)/6-i)/s,((M+5*f)/6-a)/o,((5*h+d)/6-i)/s,((5*f+p)/6-a)/o,((h+d)/2-i)/s,((f+p)/2-a)/o),[d,p,h,f,P,M]=b(this,kn).subarray(12,18),b(this,H0).push(((P+5*h)/6-i)/s,((M+5*f)/6-a)/o,((5*h+d)/6-i)/s,((5*f+p)/6-a)/o,((h+d)/2-i)/s,((f+p)/2-a)/o),!0))}toSVGPath(){if(this.isEmpty())return"";const n=b(this,dh),e=b(this,H0);if(isNaN(b(this,kn)[6])&&!this.isEmpty())return it(this,Ei,JD).call(this);const i=[];i.push(`M${n[4]} ${n[5]}`);for(let a=6;a<n.length;a+=6)isNaN(n[a])?i.push(`L${n[a+4]} ${n[a+5]}`):i.push(`C${n[a]} ${n[a+1]} ${n[a+2]} ${n[a+3]} ${n[a+4]} ${n[a+5]}`);it(this,Ei,eR).call(this,i);for(let a=e.length-6;a>=6;a-=6)isNaN(e[a])?i.push(`L${e[a+4]} ${e[a+5]}`):i.push(`C${e[a]} ${e[a+1]} ${e[a+2]} ${e[a+3]} ${e[a+4]} ${e[a+5]}`);return it(this,Ei,tR).call(this,i),i.join(" ")}newFreeDrawOutline(n,e,i,a,s,o){return new iR(n,e,i,a,s,o)}getOutlines(){var g;const n=b(this,dh),e=b(this,H0),i=b(this,kn),[a,s,o,h]=b(this,tl),f=new Float32Array((((g=b(this,um))==null?void 0:g.length)??0)+2);for(let x=0,w=f.length-2;x<w;x+=2)f[x]=(b(this,um)[x]-a)/o,f[x+1]=(b(this,um)[x+1]-s)/h;if(f[f.length-2]=(b(this,rx)-a)/o,f[f.length-1]=(b(this,ax)-s)/h,isNaN(i[6])&&!this.isEmpty())return it(this,Ei,nR).call(this,f);const d=new Float32Array(b(this,dh).length+24+b(this,H0).length);let p=n.length;for(let x=0;x<p;x+=2){if(isNaN(n[x])){d[x]=d[x+1]=NaN;continue}d[x]=n[x],d[x+1]=n[x+1]}p=it(this,Ei,aR).call(this,d,p);for(let x=e.length-6;x>=6;x-=6)for(let w=0;w<6;w+=2){if(isNaN(e[x+w])){d[p]=d[p+1]=NaN,p+=2;continue}d[p]=e[x+w],d[p+1]=e[x+w+1],p+=2}return it(this,Ei,rR).call(this,d,p),this.newFreeDrawOutline(d,f,b(this,tl),b(this,By),b(this,Ny),b(this,jy))}};tl=new WeakMap,H0=new WeakMap,Ny=new WeakMap,jy=new WeakMap,dh=new WeakMap,kn=new WeakMap,rx=new WeakMap,ax=new WeakMap,h5=new WeakMap,f5=new WeakMap,By=new WeakMap,Uy=new WeakMap,um=new WeakMap,d5=new WeakMap,Uv=new WeakMap,Gv=new WeakMap,Ei=new WeakSet,Z6=function(){const n=b(this,kn).subarray(4,6),e=b(this,kn).subarray(16,18),[i,a,s,o]=b(this,tl);return[(b(this,rx)+(n[0]-e[0])/2-i)/s,(b(this,ax)+(n[1]-e[1])/2-a)/o,(b(this,rx)+(e[0]-n[0])/2-i)/s,(b(this,ax)+(e[1]-n[1])/2-a)/o]},JD=function(){const[n,e,i,a]=b(this,tl),[s,o,h,f]=it(this,Ei,Z6).call(this);return`M${(b(this,kn)[2]-n)/i} ${(b(this,kn)[3]-e)/a} L${(b(this,kn)[4]-n)/i} ${(b(this,kn)[5]-e)/a} L${s} ${o} L${h} ${f} L${(b(this,kn)[16]-n)/i} ${(b(this,kn)[17]-e)/a} L${(b(this,kn)[14]-n)/i} ${(b(this,kn)[15]-e)/a} Z`},tR=function(n){const e=b(this,H0);n.push(`L${e[4]} ${e[5]} Z`)},eR=function(n){const[e,i,a,s]=b(this,tl),o=b(this,kn).subarray(4,6),h=b(this,kn).subarray(16,18),[f,d,p,g]=it(this,Ei,Z6).call(this);n.push(`L${(o[0]-e)/a} ${(o[1]-i)/s} L${f} ${d} L${p} ${g} L${(h[0]-e)/a} ${(h[1]-i)/s}`)},nR=function(n){const e=b(this,kn),[i,a,s,o]=b(this,tl),[h,f,d,p]=it(this,Ei,Z6).call(this),g=new Float32Array(36);return g.set([NaN,NaN,NaN,NaN,(e[2]-i)/s,(e[3]-a)/o,NaN,NaN,NaN,NaN,(e[4]-i)/s,(e[5]-a)/o,NaN,NaN,NaN,NaN,h,f,NaN,NaN,NaN,NaN,d,p,NaN,NaN,NaN,NaN,(e[16]-i)/s,(e[17]-a)/o,NaN,NaN,NaN,NaN,(e[14]-i)/s,(e[15]-a)/o],0),this.newFreeDrawOutline(g,n,b(this,tl),b(this,By),b(this,Ny),b(this,jy))},rR=function(n,e){const i=b(this,H0);return n.set([NaN,NaN,NaN,NaN,i[4],i[5]],e),e+=6},aR=function(n,e){const i=b(this,kn).subarray(4,6),a=b(this,kn).subarray(16,18),[s,o,h,f]=b(this,tl),[d,p,g,x]=it(this,Ei,Z6).call(this);return n.set([NaN,NaN,NaN,NaN,(i[0]-s)/h,(i[1]-o)/f,NaN,NaN,NaN,NaN,d,p,NaN,NaN,NaN,NaN,g,x,NaN,NaN,NaN,NaN,(a[0]-s)/h,(a[1]-o)/f],e),e+=24},rt(Hd,d5,8),rt(Hd,Uv,2),rt(Hd,Gv,b(Hd,d5)+b(Hd,Uv));let vv=Hd;var Gy,ix,c1,p5,el,g5,Ja,Hv,sR;class iR extends _e{constructor(e,i,a,s,o,h){super();rt(this,Hv);rt(this,Gy);rt(this,ix,new Float32Array(4));rt(this,c1);rt(this,p5);rt(this,el);rt(this,g5);rt(this,Ja);K(this,Ja,e),K(this,el,i),K(this,Gy,a),K(this,g5,s),K(this,c1,o),K(this,p5,h),this.lastPoint=[NaN,NaN],it(this,Hv,sR).call(this,h);const[f,d,p,g]=b(this,ix);for(let x=0,w=e.length;x<w;x+=2)e[x]=(e[x]-f)/p,e[x+1]=(e[x+1]-d)/g;for(let x=0,w=i.length;x<w;x+=2)i[x]=(i[x]-f)/p,i[x+1]=(i[x+1]-d)/g}toSVGPath(){const e=[`M${b(this,Ja)[4]} ${b(this,Ja)[5]}`];for(let i=6,a=b(this,Ja).length;i<a;i+=6){if(isNaN(b(this,Ja)[i])){e.push(`L${b(this,Ja)[i+4]} ${b(this,Ja)[i+5]}`);continue}e.push(`C${b(this,Ja)[i]} ${b(this,Ja)[i+1]} ${b(this,Ja)[i+2]} ${b(this,Ja)[i+3]} ${b(this,Ja)[i+4]} ${b(this,Ja)[i+5]}`)}return e.push("Z"),e.join(" ")}serialize([e,i,a,s],o){const h=a-e,f=s-i;let d,p;switch(o){case 0:d=_e._rescale(b(this,Ja),e,s,h,-f),p=_e._rescale(b(this,el),e,s,h,-f);break;case 90:d=_e._rescaleAndSwap(b(this,Ja),e,i,h,f),p=_e._rescaleAndSwap(b(this,el),e,i,h,f);break;case 180:d=_e._rescale(b(this,Ja),a,i,-h,f),p=_e._rescale(b(this,el),a,i,-h,f);break;case 270:d=_e._rescaleAndSwap(b(this,Ja),a,s,-h,-f),p=_e._rescaleAndSwap(b(this,el),a,s,-h,-f);break}return{outline:Array.from(d),points:[Array.from(p)]}}get box(){return b(this,ix)}newOutliner(e,i,a,s,o,h=0){return new vv(e,i,a,s,o,h)}getNewOutline(e,i){const[a,s,o,h]=b(this,ix),[f,d,p,g]=b(this,Gy),x=o*p,w=h*g,_=a*p+f,A=s*g+d,T=this.newOutliner({x:b(this,el)[0]*x+_,y:b(this,el)[1]*w+A},b(this,Gy),b(this,g5),e,b(this,p5),i??b(this,c1));for(let E=2;E<b(this,el).length;E+=2)T.add({x:b(this,el)[E]*x+_,y:b(this,el)[E+1]*w+A});return T.getOutlines()}}Gy=new WeakMap,ix=new WeakMap,c1=new WeakMap,p5=new WeakMap,el=new WeakMap,g5=new WeakMap,Ja=new WeakMap,Hv=new WeakSet,sR=function(e){const i=b(this,Ja);let a=i[4],s=i[5];const o=[a,s,a,s];let h=a,f=s;const d=e?Math.max:Math.min;for(let g=6,x=i.length;g<x;g+=6){const w=i[g+4],_=i[g+5];if(isNaN(i[g]))Me.pointBoundingBox(w,_,o),f<_?(h=w,f=_):f===_&&(h=d(h,w));else{const A=[1/0,1/0,-1/0,-1/0];Me.bezierBoundingBox(a,s,...i.slice(g,g+6),A),Me.rectBoundingBox(...A,o),f<A[3]?(h=A[2],f=A[3]):f===A[3]&&(h=d(h,A[2]))}a=w,s=_}const p=b(this,ix);p[0]=o[0]-b(this,c1),p[1]=o[1]-b(this,c1),p[2]=o[2]-o[0]+2*b(this,c1),p[3]=o[3]-o[1]+2*b(this,c1),this.lastPoint=[h,f]};var m5,b5,hm,z0,Lo,oR,av,cR,lR,UA;class BA{constructor(n,e=0,i=0,a=!0){rt(this,Lo);rt(this,m5);rt(this,b5);rt(this,hm,[]);rt(this,z0,[]);const s=[1/0,1/0,-1/0,-1/0],o=10**-4;for(const{x:w,y:_,width:A,height:T}of n){const E=Math.floor((w-e)/o)*o,P=Math.ceil((w+A+e)/o)*o,M=Math.floor((_-e)/o)*o,F=Math.ceil((_+T+e)/o)*o,k=[E,M,F,!0],O=[P,M,F,!1];b(this,hm).push(k,O),Me.rectBoundingBox(E,M,P,F,s)}const h=s[2]-s[0]+2*i,f=s[3]-s[1]+2*i,d=s[0]-i,p=s[1]-i,g=b(this,hm).at(a?-1:-2),x=[g[0],g[2]];for(const w of b(this,hm)){const[_,A,T]=w;w[0]=(_-d)/h,w[1]=(A-p)/f,w[2]=(T-p)/f}K(this,m5,new Float32Array([d,p,h,f])),K(this,b5,x)}getOutlines(){b(this,hm).sort((e,i)=>e[0]-i[0]||e[1]-i[1]||e[2]-i[2]);const n=[];for(const e of b(this,hm))e[3]?(n.push(...it(this,Lo,UA).call(this,e)),it(this,Lo,cR).call(this,e)):(it(this,Lo,lR).call(this,e),n.push(...it(this,Lo,UA).call(this,e)));return it(this,Lo,oR).call(this,n)}}m5=new WeakMap,b5=new WeakMap,hm=new WeakMap,z0=new WeakMap,Lo=new WeakSet,oR=function(n){const e=[],i=new Set;for(const o of n){const[h,f,d]=o;e.push([h,f,o],[h,d,o])}e.sort((o,h)=>o[1]-h[1]||o[0]-h[0]);for(let o=0,h=e.length;o<h;o+=2){const f=e[o][2],d=e[o+1][2];f.push(d),d.push(f),i.add(f),i.add(d)}const a=[];let s;for(;i.size>0;){const o=i.values().next().value;let[h,f,d,p,g]=o;i.delete(o);let x=h,w=f;for(s=[h,d],a.push(s);;){let _;if(i.has(p))_=p;else if(i.has(g))_=g;else break;i.delete(_),[h,f,d,p,g]=_,x!==h&&(s.push(x,w,h,w===f?f:d),x=h),w=w===f?d:f}s.push(x,w)}return new _B(a,b(this,m5),b(this,b5))},av=function(n){const e=b(this,z0);let i=0,a=e.length-1;for(;i<=a;){const s=i+a>>1,o=e[s][0];if(o===n)return s;o<n?i=s+1:a=s-1}return a+1},cR=function([,n,e]){const i=it(this,Lo,av).call(this,n);b(this,z0).splice(i,0,[n,e])},lR=function([,n,e]){const i=it(this,Lo,av).call(this,n);for(let a=i;a<b(this,z0).length;a++){const[s,o]=b(this,z0)[a];if(s!==n)break;if(s===n&&o===e){b(this,z0).splice(a,1);return}}for(let a=i-1;a>=0;a--){const[s,o]=b(this,z0)[a];if(s!==n)break;if(s===n&&o===e){b(this,z0).splice(a,1);return}}},UA=function(n){const[e,i,a]=n,s=[[e,i,a]],o=it(this,Lo,av).call(this,a);for(let h=0;h<o;h++){const[f,d]=b(this,z0)[h];for(let p=0,g=s.length;p<g;p++){const[,x,w]=s[p];if(!(d<=x||w<=f)){if(x>=f){if(w>d)s[p][1]=d;else{if(g===1)return[];s.splice(p,1),p--,g--}continue}s[p][2]=f,w>d&&s.push([e,d,w])}}}return s};var x5,Hy;class _B extends _e{constructor(e,i,a){super();rt(this,x5);rt(this,Hy);K(this,Hy,e),K(this,x5,i),this.lastPoint=a}toSVGPath(){const e=[];for(const i of b(this,Hy)){let[a,s]=i;e.push(`M${a} ${s}`);for(let o=2;o<i.length;o+=2){const h=i[o],f=i[o+1];h===a?(e.push(`V${f}`),s=f):f===s&&(e.push(`H${h}`),a=h)}e.push("Z")}return e.join(" ")}serialize([e,i,a,s],o){const h=[],f=a-e,d=s-i;for(const p of b(this,Hy)){const g=new Array(p.length);for(let x=0;x<p.length;x+=2)g[x]=e+p[x]*f,g[x+1]=s-p[x+1]*d;h.push(g)}return h}get box(){return b(this,x5)}get classNamesForOutlining(){return["highlightOutline"]}}x5=new WeakMap,Hy=new WeakMap;class GA extends vv{newFreeDrawOutline(n,e,i,a,s,o){return new CB(n,e,i,a,s,o)}}class CB extends iR{newOutliner(n,e,i,a,s,o=0){return new GA(n,e,i,a,s,o)}}var X0,sx,zy,Ti,y5,Xy,w5,v5,fm,W0,Wy,S5,kr,HA,zA,XA,fb,uR,Bg;const hc=class hc{constructor({editor:n=null,uiManager:e=null}){rt(this,kr);rt(this,X0,null);rt(this,sx,null);rt(this,zy);rt(this,Ti,null);rt(this,y5,!1);rt(this,Xy,!1);rt(this,w5,null);rt(this,v5);rt(this,fm,null);rt(this,W0,null);rt(this,Wy);var i;n?(K(this,Xy,!1),K(this,Wy,Rn.HIGHLIGHT_COLOR),K(this,w5,n)):(K(this,Xy,!0),K(this,Wy,Rn.HIGHLIGHT_DEFAULT_COLOR)),K(this,W0,(n==null?void 0:n._uiManager)||e),K(this,v5,b(this,W0)._eventBus),K(this,zy,(n==null?void 0:n.color)||((i=b(this,W0))==null?void 0:i.highlightColors.values().next().value)||"#FFFF98"),b(hc,S5)||K(hc,S5,Object.freeze({blue:"pdfjs-editor-colorpicker-blue",green:"pdfjs-editor-colorpicker-green",pink:"pdfjs-editor-colorpicker-pink",red:"pdfjs-editor-colorpicker-red",yellow:"pdfjs-editor-colorpicker-yellow"}))}static get _keyboardManager(){return Cn(this,"_keyboardManager",new D5([[["Escape","mac+Escape"],hc.prototype._hideDropdownFromKeyboard],[[" ","mac+ "],hc.prototype._colorSelectFromKeyboard],[["ArrowDown","ArrowRight","mac+ArrowDown","mac+ArrowRight"],hc.prototype._moveToNext],[["ArrowUp","ArrowLeft","mac+ArrowUp","mac+ArrowLeft"],hc.prototype._moveToPrevious],[["Home","mac+Home"],hc.prototype._moveToBeginning],[["End","mac+End"],hc.prototype._moveToEnd]]))}renderButton(){const n=K(this,X0,document.createElement("button"));n.className="colorPicker",n.tabIndex="0",n.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-button"),n.setAttribute("aria-haspopup",!0);const e=b(this,W0)._signal;n.addEventListener("click",it(this,kr,fb).bind(this),{signal:e}),n.addEventListener("keydown",it(this,kr,XA).bind(this),{signal:e});const i=K(this,sx,document.createElement("span"));return i.className="swatch",i.setAttribute("aria-hidden",!0),i.style.backgroundColor=b(this,zy),n.append(i),n}renderMainDropdown(){const n=K(this,Ti,it(this,kr,HA).call(this));return n.setAttribute("aria-orientation","horizontal"),n.setAttribute("aria-labelledby","highlightColorPickerLabel"),n}_colorSelectFromKeyboard(n){if(n.target===b(this,X0)){it(this,kr,fb).call(this,n);return}const e=n.target.getAttribute("data-color");e&&it(this,kr,zA).call(this,e,n)}_moveToNext(n){var e,i;if(!b(this,kr,Bg)){it(this,kr,fb).call(this,n);return}if(n.target===b(this,X0)){(e=b(this,Ti).firstChild)==null||e.focus();return}(i=n.target.nextSibling)==null||i.focus()}_moveToPrevious(n){var e,i;if(n.target===((e=b(this,Ti))==null?void 0:e.firstChild)||n.target===b(this,X0)){b(this,kr,Bg)&&this._hideDropdownFromKeyboard();return}b(this,kr,Bg)||it(this,kr,fb).call(this,n),(i=n.target.previousSibling)==null||i.focus()}_moveToBeginning(n){var e;if(!b(this,kr,Bg)){it(this,kr,fb).call(this,n);return}(e=b(this,Ti).firstChild)==null||e.focus()}_moveToEnd(n){var e;if(!b(this,kr,Bg)){it(this,kr,fb).call(this,n);return}(e=b(this,Ti).lastChild)==null||e.focus()}hideDropdown(){var n,e;(n=b(this,Ti))==null||n.classList.add("hidden"),(e=b(this,fm))==null||e.abort(),K(this,fm,null)}_hideDropdownFromKeyboard(){var n;if(!b(this,Xy)){if(!b(this,kr,Bg)){(n=b(this,w5))==null||n.unselect();return}this.hideDropdown(),b(this,X0).focus({preventScroll:!0,focusVisible:b(this,y5)})}}updateColor(n){if(b(this,sx)&&(b(this,sx).style.backgroundColor=n),!b(this,Ti))return;const e=b(this,W0).highlightColors.values();for(const i of b(this,Ti).children)i.setAttribute("aria-selected",e.next().value===n)}destroy(){var n,e;(n=b(this,X0))==null||n.remove(),K(this,X0,null),K(this,sx,null),(e=b(this,Ti))==null||e.remove(),K(this,Ti,null)}};X0=new WeakMap,sx=new WeakMap,zy=new WeakMap,Ti=new WeakMap,y5=new WeakMap,Xy=new WeakMap,w5=new WeakMap,v5=new WeakMap,fm=new WeakMap,W0=new WeakMap,Wy=new WeakMap,S5=new WeakMap,kr=new WeakSet,HA=function(){const n=document.createElement("div"),e=b(this,W0)._signal;n.addEventListener("contextmenu",Z0,{signal:e}),n.className="dropdown",n.role="listbox",n.setAttribute("aria-multiselectable",!1),n.setAttribute("aria-orientation","vertical"),n.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-dropdown");for(const[i,a]of b(this,W0).highlightColors){const s=document.createElement("button");s.tabIndex="0",s.role="option",s.setAttribute("data-color",a),s.title=i,s.setAttribute("data-l10n-id",b(hc,S5)[i]);const o=document.createElement("span");s.append(o),o.className="swatch",o.style.backgroundColor=a,s.setAttribute("aria-selected",a===b(this,zy)),s.addEventListener("click",it(this,kr,zA).bind(this,a),{signal:e}),n.append(s)}return n.addEventListener("keydown",it(this,kr,XA).bind(this),{signal:e}),n},zA=function(n,e){e.stopPropagation(),b(this,v5).dispatch("switchannotationeditorparams",{source:this,type:b(this,Wy),value:n})},XA=function(n){hc._keyboardManager.exec(this,n)},fb=function(n){if(b(this,kr,Bg)){this.hideDropdown();return}if(K(this,y5,n.detail===0),b(this,fm)||(K(this,fm,new AbortController),window.addEventListener("pointerdown",it(this,kr,uR).bind(this),{signal:b(this,W0).combinedSignal(b(this,fm))})),b(this,Ti)){b(this,Ti).classList.remove("hidden");return}const e=K(this,Ti,it(this,kr,HA).call(this));b(this,X0).append(e)},uR=function(n){var e;(e=b(this,Ti))!=null&&e.contains(n.target)||this.hideDropdown()},Bg=function(){return b(this,Ti)&&!b(this,Ti).classList.contains("hidden")},rt(hc,S5,null);let Sv=hc;var $y,k5,l1,ox,qy,pc,A5,_5,cx,e0,nl,Is,Vy,u1,no,Ky,n0,C5,gn,WA,iv,hR,fR,dR,$A,db,i0,W2,pR,sv,Q6,gR,mR,bR,xR,yR;const nr=class nr extends ga{constructor(e){super({...e,name:"highlightEditor"});rt(this,gn);rt(this,$y,null);rt(this,k5,0);rt(this,l1);rt(this,ox,null);rt(this,qy,null);rt(this,pc,null);rt(this,A5,null);rt(this,_5,0);rt(this,cx,null);rt(this,e0,null);rt(this,nl,null);rt(this,Is,!1);rt(this,Vy,null);rt(this,u1);rt(this,no,null);rt(this,Ky,"");rt(this,n0);rt(this,C5,"");this.color=e.color||nr._defaultColor,K(this,n0,e.thickness||nr._defaultThickness),K(this,u1,e.opacity||nr._defaultOpacity),K(this,l1,e.boxes||null),K(this,C5,e.methodOfCreation||""),K(this,Ky,e.text||""),this._isDraggable=!1,this.defaultL10nId="pdfjs-editor-highlight-editor",e.highlightId>-1?(K(this,Is,!0),it(this,gn,iv).call(this,e),it(this,gn,db).call(this)):b(this,l1)&&(K(this,$y,e.anchorNode),K(this,k5,e.anchorOffset),K(this,A5,e.focusNode),K(this,_5,e.focusOffset),it(this,gn,WA).call(this),it(this,gn,db).call(this),this.rotate(this.rotation))}static get _keyboardManager(){const e=nr.prototype;return Cn(this,"_keyboardManager",new D5([[["ArrowLeft","mac+ArrowLeft"],e._moveCaret,{args:[0]}],[["ArrowRight","mac+ArrowRight"],e._moveCaret,{args:[1]}],[["ArrowUp","mac+ArrowUp"],e._moveCaret,{args:[2]}],[["ArrowDown","mac+ArrowDown"],e._moveCaret,{args:[3]}]]))}get telemetryInitialData(){return{action:"added",type:b(this,Is)?"free_highlight":"highlight",color:this._uiManager.highlightColorNames.get(this.color),thickness:b(this,n0),methodOfCreation:b(this,C5)}}get telemetryFinalData(){return{type:"highlight",color:this._uiManager.highlightColorNames.get(this.color)}}static computeTelemetryFinalData(e){return{numberOfColors:e.get("color").size}}static initialize(e,i){var a;ga.initialize(e,i),nr._defaultColor||(nr._defaultColor=((a=i.highlightColors)==null?void 0:a.values().next().value)||"#fff066")}static updateDefaultParams(e,i){switch(e){case Rn.HIGHLIGHT_DEFAULT_COLOR:nr._defaultColor=i;break;case Rn.HIGHLIGHT_THICKNESS:nr._defaultThickness=i;break}}translateInPage(e,i){}get toolbarPosition(){return b(this,Vy)}updateParams(e,i){switch(e){case Rn.HIGHLIGHT_COLOR:it(this,gn,hR).call(this,i);break;case Rn.HIGHLIGHT_THICKNESS:it(this,gn,fR).call(this,i);break}}static get defaultPropertiesToUpdate(){return[[Rn.HIGHLIGHT_DEFAULT_COLOR,nr._defaultColor],[Rn.HIGHLIGHT_THICKNESS,nr._defaultThickness]]}get propertiesToUpdate(){return[[Rn.HIGHLIGHT_COLOR,this.color||nr._defaultColor],[Rn.HIGHLIGHT_THICKNESS,b(this,n0)||nr._defaultThickness],[Rn.HIGHLIGHT_FREE,b(this,Is)]]}async addEditToolbar(){const e=await super.addEditToolbar();return e?(this._uiManager.highlightColors&&(K(this,qy,new Sv({editor:this})),e.addColorPicker(b(this,qy))),e):null}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}fixAndSetPosition(){return super.fixAndSetPosition(it(this,gn,Q6).call(this))}getBaseTranslation(){return[0,0]}getRect(e,i){return super.getRect(e,i,it(this,gn,Q6).call(this))}onceAdded(e){this.annotationElementId||this.parent.addUndoableEditor(this),e&&this.div.focus()}remove(){it(this,gn,$A).call(this),this._reportTelemetry({action:"deleted"}),super.remove()}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(it(this,gn,db).call(this),this.isAttachedToDOM||this.parent.add(this)))}setParent(e){var a;let i=!1;this.parent&&!e?it(this,gn,$A).call(this):e&&(it(this,gn,db).call(this,e),i=!this.parent&&((a=this.div)==null?void 0:a.classList.contains("selectedEditor"))),super.setParent(e),this.show(this._isVisible),i&&this.select()}rotate(e){var s,o,h;const{drawLayer:i}=this.parent;let a;b(this,Is)?(e=(e-this.rotation+360)%360,a=it(s=nr,i0,W2).call(s,b(this,e0).box,e)):a=it(o=nr,i0,W2).call(o,[this.x,this.y,this.width,this.height],e),i.updateProperties(b(this,nl),{bbox:a,root:{"data-main-rotation":e}}),i.updateProperties(b(this,no),{bbox:it(h=nr,i0,W2).call(h,b(this,pc).box,e),root:{"data-main-rotation":e}})}render(){if(this.div)return this.div;const e=super.render();b(this,Ky)&&(e.setAttribute("aria-label",b(this,Ky)),e.setAttribute("role","mark")),b(this,Is)?e.classList.add("free"):this.div.addEventListener("keydown",it(this,gn,pR).bind(this),{signal:this._uiManager._signal});const i=K(this,cx,document.createElement("div"));e.append(i),i.setAttribute("aria-hidden","true"),i.className="internal",i.style.clipPath=b(this,ox);const[a,s]=this.parentDimensions;return this.setDims(this.width*a,this.height*s),R_(this,b(this,cx),["pointerover","pointerleave"]),this.enableEditing(),e}pointerover(){var e;this.isSelected||(e=this.parent)==null||e.drawLayer.updateProperties(b(this,no),{rootClass:{hovered:!0}})}pointerleave(){var e;this.isSelected||(e=this.parent)==null||e.drawLayer.updateProperties(b(this,no),{rootClass:{hovered:!1}})}_moveCaret(e){switch(this.parent.unselect(this),e){case 0:case 2:it(this,gn,sv).call(this,!0);break;case 1:case 3:it(this,gn,sv).call(this,!1);break}}select(){var e;super.select(),b(this,no)&&((e=this.parent)==null||e.drawLayer.updateProperties(b(this,no),{rootClass:{hovered:!1,selected:!0}}))}unselect(){var e;super.unselect(),b(this,no)&&((e=this.parent)==null||e.drawLayer.updateProperties(b(this,no),{rootClass:{selected:!1}}),b(this,Is)||it(this,gn,sv).call(this,!1))}get _mustFixPosition(){return!b(this,Is)}show(e=this._isVisible){super.show(e),this.parent&&(this.parent.drawLayer.updateProperties(b(this,nl),{rootClass:{hidden:!e}}),this.parent.drawLayer.updateProperties(b(this,no),{rootClass:{hidden:!e}}))}static startHighlighting(e,i,{target:a,x:s,y:o}){const{x:h,y:f,width:d,height:p}=a.getBoundingClientRect(),g=new AbortController,x=e.combinedSignal(g),w=_=>{g.abort(),it(this,i0,xR).call(this,e,_)};window.addEventListener("blur",w,{signal:x}),window.addEventListener("pointerup",w,{signal:x}),window.addEventListener("pointerdown",pi,{capture:!0,passive:!1,signal:x}),window.addEventListener("contextmenu",Z0,{signal:x}),a.addEventListener("pointermove",it(this,i0,bR).bind(this,e),{signal:x}),this._freeHighlight=new GA({x:s,y:o},[h,f,d,p],e.scale,this._defaultThickness/2,i,.001),{id:this._freeHighlightId,clipPathId:this._freeHighlightClipId}=e.drawLayer.draw({bbox:[0,0,1,1],root:{viewBox:"0 0 1 1",fill:this._defaultColor,"fill-opacity":this._defaultOpacity},rootClass:{highlight:!0,free:!0},path:{d:this._freeHighlight.toSVGPath()}},!0,!0)}static async deserialize(e,i,a){var A,T,E,P;let s=null;if(e instanceof $D){const{data:{quadPoints:M,rect:F,rotation:k,id:O,color:v,opacity:R,popupRef:G},parent:{page:{pageNumber:j}}}=e;s=e={annotationType:an.HIGHLIGHT,color:Array.from(v),opacity:R,quadPoints:M,boxes:null,pageIndex:j-1,rect:F.slice(0),rotation:k,id:O,deleted:!1,popupRef:G}}else if(e instanceof B_){const{data:{inkLists:M,rect:F,rotation:k,id:O,color:v,borderStyle:{rawWidth:R},popupRef:G},parent:{page:{pageNumber:j}}}=e;s=e={annotationType:an.HIGHLIGHT,color:Array.from(v),thickness:R,inkLists:M,boxes:null,pageIndex:j-1,rect:F.slice(0),rotation:k,id:O,deleted:!1,popupRef:G}}const{color:o,quadPoints:h,inkLists:f,opacity:d}=e,p=await super.deserialize(e,i,a);p.color=Me.makeHexColor(...o),K(p,u1,d||1),f&&K(p,n0,e.thickness),p.annotationElementId=e.id||null,p._initialData=s;const[g,x]=p.pageDimensions,[w,_]=p.pageTranslation;if(h){const M=K(p,l1,[]);for(let F=0;F<h.length;F+=8)M.push({x:(h[F]-w)/g,y:1-(h[F+1]-_)/x,width:(h[F+2]-h[F])/g,height:(h[F+1]-h[F+5])/x});it(A=p,gn,WA).call(A),it(T=p,gn,db).call(T),p.rotate(p.rotation)}else if(f){K(p,Is,!0);const M=f[0],F={x:M[0]-w,y:x-(M[1]-_)},k=new GA(F,[0,0,g,x],1,b(p,n0)/2,!0,.001);for(let R=0,G=M.length;R<G;R+=2)F.x=M[R]-w,F.y=x-(M[R+1]-_),k.add(F);const{id:O,clipPathId:v}=i.drawLayer.draw({bbox:[0,0,1,1],root:{viewBox:"0 0 1 1",fill:p.color,"fill-opacity":p._defaultOpacity},rootClass:{highlight:!0,free:!0},path:{d:k.toSVGPath()}},!0,!0);it(E=p,gn,iv).call(E,{highlightOutlines:k.getOutlines(),highlightId:O,clipPathId:v}),it(P=p,gn,db).call(P),p.rotate(p.parentRotation)}return p}serialize(e=!1){if(this.isEmpty()||e)return null;if(this.deleted)return this.serializeDeleted();const i=this.getRect(0,0),a=ga._colorManager.convert(this.color),s={annotationType:an.HIGHLIGHT,color:a,opacity:b(this,u1),thickness:b(this,n0),quadPoints:it(this,gn,gR).call(this),outlines:it(this,gn,mR).call(this,i),pageIndex:this.pageIndex,rect:i,rotation:it(this,gn,Q6).call(this),structTreeParentId:this._structTreeParentId};return this.annotationElementId&&!it(this,gn,yR).call(this,s)?null:(s.id=this.annotationElementId,s)}renderAnnotationElement(e){return e.updateEdited({rect:this.getRect(0,0)}),null}static canCreateNewEmptyEditor(){return!1}};$y=new WeakMap,k5=new WeakMap,l1=new WeakMap,ox=new WeakMap,qy=new WeakMap,pc=new WeakMap,A5=new WeakMap,_5=new WeakMap,cx=new WeakMap,e0=new WeakMap,nl=new WeakMap,Is=new WeakMap,Vy=new WeakMap,u1=new WeakMap,no=new WeakMap,Ky=new WeakMap,n0=new WeakMap,C5=new WeakMap,gn=new WeakSet,WA=function(){const e=new BA(b(this,l1),.001);K(this,e0,e.getOutlines()),[this.x,this.y,this.width,this.height]=b(this,e0).box;const i=new BA(b(this,l1),.0025,.001,this._uiManager.direction==="ltr");K(this,pc,i.getOutlines());const{lastPoint:a}=b(this,pc);K(this,Vy,[(a[0]-this.x)/this.width,(a[1]-this.y)/this.height])},iv=function({highlightOutlines:e,highlightId:i,clipPathId:a}){var g,x;if(K(this,e0,e),K(this,pc,e.getNewOutline(b(this,n0)/2+1.5,.0025)),i>=0)K(this,nl,i),K(this,ox,a),this.parent.drawLayer.finalizeDraw(i,{bbox:e.box,path:{d:e.toSVGPath()}}),K(this,no,this.parent.drawLayer.drawOutline({rootClass:{highlightOutline:!0,free:!0},bbox:b(this,pc).box,path:{d:b(this,pc).toSVGPath()}},!0));else if(this.parent){const w=this.parent.viewport.rotation;this.parent.drawLayer.updateProperties(b(this,nl),{bbox:it(g=nr,i0,W2).call(g,b(this,e0).box,(w-this.rotation+360)%360),path:{d:e.toSVGPath()}}),this.parent.drawLayer.updateProperties(b(this,no),{bbox:it(x=nr,i0,W2).call(x,b(this,pc).box,w),path:{d:b(this,pc).toSVGPath()}})}const[o,h,f,d]=e.box;switch(this.rotation){case 0:this.x=o,this.y=h,this.width=f,this.height=d;break;case 90:{const[w,_]=this.parentDimensions;this.x=h,this.y=1-o,this.width=f*_/w,this.height=d*w/_;break}case 180:this.x=1-o,this.y=1-h,this.width=f,this.height=d;break;case 270:{const[w,_]=this.parentDimensions;this.x=1-h,this.y=o,this.width=f*_/w,this.height=d*w/_;break}}const{lastPoint:p}=b(this,pc);K(this,Vy,[(p[0]-o)/f,(p[1]-h)/d])},hR=function(e){const i=(o,h)=>{var f,d;this.color=o,K(this,u1,h),(f=this.parent)==null||f.drawLayer.updateProperties(b(this,nl),{root:{fill:o,"fill-opacity":h}}),(d=b(this,qy))==null||d.updateColor(o)},a=this.color,s=b(this,u1);this.addCommands({cmd:i.bind(this,e,nr._defaultOpacity),undo:i.bind(this,a,s),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:Rn.HIGHLIGHT_COLOR,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"color_changed",color:this._uiManager.highlightColorNames.get(e)},!0)},fR=function(e){const i=b(this,n0),a=s=>{K(this,n0,s),it(this,gn,dR).call(this,s)};this.addCommands({cmd:a.bind(this,e),undo:a.bind(this,i),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:Rn.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"thickness_changed",thickness:e},!0)},dR=function(e){if(!b(this,Is))return;it(this,gn,iv).call(this,{highlightOutlines:b(this,e0).getNewOutline(e/2)}),this.fixAndSetPosition();const[i,a]=this.parentDimensions;this.setDims(this.width*i,this.height*a)},$A=function(){b(this,nl)===null||!this.parent||(this.parent.drawLayer.remove(b(this,nl)),K(this,nl,null),this.parent.drawLayer.remove(b(this,no)),K(this,no,null))},db=function(e=this.parent){b(this,nl)===null&&({id:io(this,nl)._,clipPathId:io(this,ox)._}=e.drawLayer.draw({bbox:b(this,e0).box,root:{viewBox:"0 0 1 1",fill:this.color,"fill-opacity":b(this,u1)},rootClass:{highlight:!0,free:b(this,Is)},path:{d:b(this,e0).toSVGPath()}},!1,!0),K(this,no,e.drawLayer.drawOutline({rootClass:{highlightOutline:!0,free:b(this,Is)},bbox:b(this,pc).box,path:{d:b(this,pc).toSVGPath()}},b(this,Is))),b(this,cx)&&(b(this,cx).style.clipPath=b(this,ox)))},i0=new WeakSet,W2=function([e,i,a,s],o){switch(o){case 90:return[1-i-s,e,s,a];case 180:return[1-e-a,1-i-s,a,s];case 270:return[i,1-e-a,s,a]}return[e,i,a,s]},pR=function(e){nr._keyboardManager.exec(this,e)},sv=function(e){if(!b(this,$y))return;const i=window.getSelection();e?i.setPosition(b(this,$y),b(this,k5)):i.setPosition(b(this,A5),b(this,_5))},Q6=function(){return b(this,Is)?this.rotation:0},gR=function(){if(b(this,Is))return null;const[e,i]=this.pageDimensions,[a,s]=this.pageTranslation,o=b(this,l1),h=new Float32Array(o.length*8);let f=0;for(const{x:d,y:p,width:g,height:x}of o){const w=d*e+a,_=(1-p)*i+s;h[f]=h[f+4]=w,h[f+1]=h[f+3]=_,h[f+2]=h[f+6]=w+g*e,h[f+5]=h[f+7]=_-x*i,f+=8}return h},mR=function(e){return b(this,e0).serialize(e,it(this,gn,Q6).call(this))},bR=function(e,i){this._freeHighlight.add(i)&&e.drawLayer.updateProperties(this._freeHighlightId,{path:{d:this._freeHighlight.toSVGPath()}})},xR=function(e,i){this._freeHighlight.isEmpty()?e.drawLayer.remove(this._freeHighlightId):e.createAndAddNewEditor(i,!1,{highlightId:this._freeHighlightId,highlightOutlines:this._freeHighlight.getOutlines(),clipPathId:this._freeHighlightClipId,methodOfCreation:"main_toolbar"}),this._freeHighlightId=-1,this._freeHighlight=null,this._freeHighlightClipId=""},yR=function(e){const{color:i}=this._initialData;return e.color.some((a,s)=>a!==i[s])},rt(nr,i0),Oe(nr,"_defaultColor",null),Oe(nr,"_defaultOpacity",1),Oe(nr,"_defaultThickness",12),Oe(nr,"_type","highlight"),Oe(nr,"_editorType",an.HIGHLIGHT),Oe(nr,"_freeHighlightId",-1),Oe(nr,"_freeHighlight",null),Oe(nr,"_freeHighlightClipId","");let kv=nr;var lx;class wR{constructor(){rt(this,lx,Object.create(null))}updateProperty(n,e){this[n]=e,this.updateSVGProperty(n,e)}updateProperties(n){if(n)for(const[e,i]of Object.entries(n))e.startsWith("_")||this.updateProperty(e,i)}updateSVGProperty(n,e){b(this,lx)[n]=e}toSVGProperties(){const n=b(this,lx);return K(this,lx,Object.create(null)),{root:n}}reset(){K(this,lx,Object.create(null))}updateAll(n=this){this.updateProperties(n)}clone(){Ar("Not implemented")}}lx=new WeakMap;var rl,Yy,ns,ux,hx,dm,pm,gm,fx,zn,qA,VA,KA,J6,vR,ov,t9,$2;const Ee=class Ee extends ga{constructor(e){super(e);rt(this,zn);rt(this,rl,null);rt(this,Yy);Oe(this,"_drawId",null);K(this,Yy,e.mustBeCommitted||!1),this._addOutlines(e)}_addOutlines(e){e.drawOutlines&&(it(this,zn,qA).call(this,e),it(this,zn,J6).call(this))}static _mergeSVGProperties(e,i){const a=new Set(Object.keys(e));for(const[s,o]of Object.entries(i))a.has(s)?Object.assign(e[s],o):e[s]=o;return e}static getDefaultDrawingOptions(e){Ar("Not implemented")}static get typesMap(){Ar("Not implemented")}static get isDrawer(){return!0}static get supportMultipleDrawings(){return!1}static updateDefaultParams(e,i){const a=this.typesMap.get(e);a&&this._defaultDrawingOptions.updateProperty(a,i),this._currentParent&&(b(Ee,ns).updateProperty(a,i),this._currentParent.drawLayer.updateProperties(this._currentDrawId,this._defaultDrawingOptions.toSVGProperties()))}updateParams(e,i){const a=this.constructor.typesMap.get(e);a&&this._updateProperty(e,a,i)}static get defaultPropertiesToUpdate(){const e=[],i=this._defaultDrawingOptions;for(const[a,s]of this.typesMap)e.push([a,i[s]]);return e}get propertiesToUpdate(){const e=[],{_drawingOptions:i}=this;for(const[a,s]of this.constructor.typesMap)e.push([a,i[s]]);return e}_updateProperty(e,i,a){const s=this._drawingOptions,o=s[i],h=f=>{var p;s.updateProperty(i,f);const d=b(this,rl).updateProperty(i,f);d&&it(this,zn,t9).call(this,d),(p=this.parent)==null||p.drawLayer.updateProperties(this._drawId,s.toSVGProperties())};this.addCommands({cmd:h.bind(this,a),undo:h.bind(this,o),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:e,overwriteIfSameType:!0,keepUndo:!0})}_onResizing(){var e;(e=this.parent)==null||e.drawLayer.updateProperties(this._drawId,Ee._mergeSVGProperties(b(this,rl).getPathResizingSVGProperties(it(this,zn,ov).call(this)),{bbox:it(this,zn,$2).call(this)}))}_onResized(){var e;(e=this.parent)==null||e.drawLayer.updateProperties(this._drawId,Ee._mergeSVGProperties(b(this,rl).getPathResizedSVGProperties(it(this,zn,ov).call(this)),{bbox:it(this,zn,$2).call(this)}))}_onTranslating(e,i){var a;(a=this.parent)==null||a.drawLayer.updateProperties(this._drawId,{bbox:it(this,zn,$2).call(this)})}_onTranslated(){var e;(e=this.parent)==null||e.drawLayer.updateProperties(this._drawId,Ee._mergeSVGProperties(b(this,rl).getPathTranslatedSVGProperties(it(this,zn,ov).call(this),this.parentDimensions),{bbox:it(this,zn,$2).call(this)}))}_onStartDragging(){var e;(e=this.parent)==null||e.drawLayer.updateProperties(this._drawId,{rootClass:{moving:!0}})}_onStopDragging(){var e;(e=this.parent)==null||e.drawLayer.updateProperties(this._drawId,{rootClass:{moving:!1}})}commit(){super.commit(),this.disableEditMode(),this.disableEditing()}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}getBaseTranslation(){return[0,0]}get isResizable(){return!0}onceAdded(e){this.annotationElementId||this.parent.addUndoableEditor(this),this._isDraggable=!0,b(this,Yy)&&(K(this,Yy,!1),this.commit(),this.parent.setSelected(this),e&&this.isOnScreen&&this.div.focus())}remove(){it(this,zn,KA).call(this),super.remove()}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(it(this,zn,J6).call(this),it(this,zn,t9).call(this,b(this,rl).box),this.isAttachedToDOM||this.parent.add(this)))}setParent(e){var a;let i=!1;this.parent&&!e?(this._uiManager.removeShouldRescale(this),it(this,zn,KA).call(this)):e&&(this._uiManager.addShouldRescale(this),it(this,zn,J6).call(this,e),i=!this.parent&&((a=this.div)==null?void 0:a.classList.contains("selectedEditor"))),super.setParent(e),i&&this.select()}rotate(){this.parent&&this.parent.drawLayer.updateProperties(this._drawId,Ee._mergeSVGProperties({bbox:it(this,zn,$2).call(this)},b(this,rl).updateRotation((this.parentRotation-this.rotation+360)%360)))}onScaleChanging(){this.parent&&it(this,zn,t9).call(this,b(this,rl).updateParentDimensions(this.parentDimensions,this.parent.scale))}static onScaleChangingWhenDrawing(){}render(){if(this.div)return this.div;let e,i;this._isCopy&&(e=this.x,i=this.y);const a=super.render();a.classList.add("draw");const s=document.createElement("div");a.append(s),s.setAttribute("aria-hidden","true"),s.className="internal";const[o,h]=this.parentDimensions;return this.setDims(this.width*o,this.height*h),this._uiManager.addShouldRescale(this),this.disableEditing(),this._isCopy&&this._moveAfterPaste(e,i),a}static createDrawerInstance(e,i,a,s,o){Ar("Not implemented")}static startDrawing(e,i,a,s){var T;const{target:o,offsetX:h,offsetY:f,pointerId:d,pointerType:p}=s;if(b(Ee,pm)&&b(Ee,pm)!==p)return;const{viewport:{rotation:g}}=e,{width:x,height:w}=o.getBoundingClientRect(),_=K(Ee,ux,new AbortController),A=e.combinedSignal(_);if(b(Ee,dm)||K(Ee,dm,d),b(Ee,pm)??K(Ee,pm,p),window.addEventListener("pointerup",E=>{var P;b(Ee,dm)===E.pointerId?this._endDraw(E):(P=b(Ee,gm))==null||P.delete(E.pointerId)},{signal:A}),window.addEventListener("pointercancel",E=>{var P;b(Ee,dm)===E.pointerId?this._currentParent.endDrawingSession():(P=b(Ee,gm))==null||P.delete(E.pointerId)},{signal:A}),window.addEventListener("pointerdown",E=>{b(Ee,pm)===E.pointerType&&((b(Ee,gm)||K(Ee,gm,new Set)).add(E.pointerId),b(Ee,ns).isCancellable()&&(b(Ee,ns).removeLastElement(),b(Ee,ns).isEmpty()?this._currentParent.endDrawingSession(!0):this._endDraw(null)))},{capture:!0,passive:!1,signal:A}),window.addEventListener("contextmenu",Z0,{signal:A}),o.addEventListener("pointermove",this._drawMove.bind(this),{signal:A}),o.addEventListener("touchmove",E=>{E.timeStamp===b(Ee,fx)&&pi(E)},{signal:A}),e.toggleDrawing(),(T=i._editorUndoBar)==null||T.hide(),b(Ee,ns)){e.drawLayer.updateProperties(this._currentDrawId,b(Ee,ns).startNew(h,f,x,w,g));return}i.updateUIForDefaultProperties(this),K(Ee,ns,this.createDrawerInstance(h,f,x,w,g)),K(Ee,hx,this.getDefaultDrawingOptions()),this._currentParent=e,{id:this._currentDrawId}=e.drawLayer.draw(this._mergeSVGProperties(b(Ee,hx).toSVGProperties(),b(Ee,ns).defaultSVGProperties),!0,!1)}static _drawMove(e){var o;if(K(Ee,fx,-1),!b(Ee,ns))return;const{offsetX:i,offsetY:a,pointerId:s}=e;if(b(Ee,dm)===s){if(((o=b(Ee,gm))==null?void 0:o.size)>=1){this._endDraw(e);return}this._currentParent.drawLayer.updateProperties(this._currentDrawId,b(Ee,ns).add(i,a)),K(Ee,fx,e.timeStamp),pi(e)}}static _cleanup(e){e&&(this._currentDrawId=-1,this._currentParent=null,K(Ee,ns,null),K(Ee,hx,null),K(Ee,pm,null),K(Ee,fx,NaN)),b(Ee,ux)&&(b(Ee,ux).abort(),K(Ee,ux,null),K(Ee,dm,NaN),K(Ee,gm,null))}static _endDraw(e){const i=this._currentParent;if(i){if(i.toggleDrawing(!0),this._cleanup(!1),(e==null?void 0:e.target)===i.div&&i.drawLayer.updateProperties(this._currentDrawId,b(Ee,ns).end(e.offsetX,e.offsetY)),this.supportMultipleDrawings){const a=b(Ee,ns),s=this._currentDrawId,o=a.getLastElement();i.addCommands({cmd:()=>{i.drawLayer.updateProperties(s,a.setLastElement(o))},undo:()=>{i.drawLayer.updateProperties(s,a.removeLastElement())},mustExec:!1,type:Rn.DRAW_STEP});return}this.endDrawing(!1)}}static endDrawing(e){const i=this._currentParent;if(!i)return null;if(i.toggleDrawing(!0),i.cleanUndoStack(Rn.DRAW_STEP),!b(Ee,ns).isEmpty()){const{pageDimensions:[a,s],scale:o}=i,h=i.createAndAddNewEditor({offsetX:0,offsetY:0},!1,{drawId:this._currentDrawId,drawOutlines:b(Ee,ns).getOutlines(a*o,s*o,o,this._INNER_MARGIN),drawingOptions:b(Ee,hx),mustBeCommitted:!e});return this._cleanup(!0),h}return i.drawLayer.remove(this._currentDrawId),this._cleanup(!0),null}createDrawingOptions(e){}static deserializeDraw(e,i,a,s,o,h){Ar("Not implemented")}static async deserialize(e,i,a){var g,x;const{rawDims:{pageWidth:s,pageHeight:o,pageX:h,pageY:f}}=i.viewport,d=this.deserializeDraw(h,f,s,o,this._INNER_MARGIN,e),p=await super.deserialize(e,i,a);return p.createDrawingOptions(e),it(g=p,zn,qA).call(g,{drawOutlines:d}),it(x=p,zn,J6).call(x),p.onScaleChanging(),p.rotate(),p}serializeDraw(e){const[i,a]=this.pageTranslation,[s,o]=this.pageDimensions;return b(this,rl).serialize([i,a,s,o],e)}renderAnnotationElement(e){return e.updateEdited({rect:this.getRect(0,0)}),null}static canCreateNewEmptyEditor(){return!1}};rl=new WeakMap,Yy=new WeakMap,ns=new WeakMap,ux=new WeakMap,hx=new WeakMap,dm=new WeakMap,pm=new WeakMap,gm=new WeakMap,fx=new WeakMap,zn=new WeakSet,qA=function({drawOutlines:e,drawId:i,drawingOptions:a}){K(this,rl,e),this._drawingOptions||(this._drawingOptions=a),i>=0?(this._drawId=i,this.parent.drawLayer.finalizeDraw(i,e.defaultProperties)):this._drawId=it(this,zn,VA).call(this,e,this.parent),it(this,zn,t9).call(this,e.box)},VA=function(e,i){const{id:a}=i.drawLayer.draw(Ee._mergeSVGProperties(this._drawingOptions.toSVGProperties(),e.defaultSVGProperties),!1,!1);return a},KA=function(){this._drawId===null||!this.parent||(this.parent.drawLayer.remove(this._drawId),this._drawId=null,this._drawingOptions.reset())},J6=function(e=this.parent){if(!(this._drawId!==null&&this.parent===e)){if(this._drawId!==null){this.parent.drawLayer.updateParent(this._drawId,e.drawLayer);return}this._drawingOptions.updateAll(),this._drawId=it(this,zn,VA).call(this,b(this,rl),e)}},vR=function([e,i,a,s]){const{parentDimensions:[o,h],rotation:f}=this;switch(f){case 90:return[i,1-e,a*(h/o),s*(o/h)];case 180:return[1-e,1-i,a,s];case 270:return[1-i,e,a*(h/o),s*(o/h)];default:return[e,i,a,s]}},ov=function(){const{x:e,y:i,width:a,height:s,parentDimensions:[o,h],rotation:f}=this;switch(f){case 90:return[1-i,e,a*(o/h),s*(h/o)];case 180:return[1-e,1-i,a,s];case 270:return[i,1-e,a*(o/h),s*(h/o)];default:return[e,i,a,s]}},t9=function(e){if([this.x,this.y,this.width,this.height]=it(this,zn,vR).call(this,e),this.div){this.fixAndSetPosition();const[i,a]=this.parentDimensions;this.setDims(this.width*i,this.height*a)}this._onResized()},$2=function(){const{x:e,y:i,width:a,height:s,rotation:o,parentRotation:h,parentDimensions:[f,d]}=this;switch((o*4+h)/90){case 1:return[1-i-s,e,s,a];case 2:return[1-e-a,1-i-s,a,s];case 3:return[i,1-e-a,s,a];case 4:return[e,i-a*(f/d),s*(d/f),a*(f/d)];case 5:return[1-i,e,a*(f/d),s*(d/f)];case 6:return[1-e-s*(d/f),1-i,s*(d/f),a*(f/d)];case 7:return[i-a*(f/d),1-e-s*(d/f),a*(f/d),s*(d/f)];case 8:return[e-a,i-s,a,s];case 9:return[1-i,e-a,s,a];case 10:return[1-e,1-i,a,s];case 11:return[i-s,1-e,s,a];case 12:return[e-s*(d/f),i,s*(d/f),a*(f/d)];case 13:return[1-i-a*(f/d),e-s*(d/f),a*(f/d),s*(d/f)];case 14:return[1-e,1-i-a*(f/d),s*(d/f),a*(f/d)];case 15:return[i,1-e,a*(f/d),s*(d/f)];default:return[e,i,a,s]}},Oe(Ee,"_currentDrawId",-1),Oe(Ee,"_currentParent",null),rt(Ee,ns,null),rt(Ee,ux,null),rt(Ee,hx,null),rt(Ee,dm,NaN),rt(Ee,pm,null),rt(Ee,gm,null),rt(Ee,fx,NaN),Oe(Ee,"_INNER_MARGIN",3);let Av=Ee;var ph,rs,as,dx,Zy,Po,Ts,r0,px,gx,mx,Qy,cv;class IB{constructor(n,e,i,a,s,o){rt(this,Qy);rt(this,ph,new Float64Array(6));rt(this,rs);rt(this,as);rt(this,dx);rt(this,Zy);rt(this,Po);rt(this,Ts,"");rt(this,r0,0);rt(this,px,new N5);rt(this,gx);rt(this,mx);K(this,gx,i),K(this,mx,a),K(this,dx,s),K(this,Zy,o),[n,e]=it(this,Qy,cv).call(this,n,e);const h=K(this,rs,[NaN,NaN,NaN,NaN,n,e]);K(this,Po,[n,e]),K(this,as,[{line:h,points:b(this,Po)}]),b(this,ph).set(h,0)}updateProperty(n,e){n==="stroke-width"&&K(this,Zy,e)}isEmpty(){return!b(this,as)||b(this,as).length===0}isCancellable(){return b(this,Po).length<=10}add(n,e){[n,e]=it(this,Qy,cv).call(this,n,e);const[i,a,s,o]=b(this,ph).subarray(2,6),h=n-s,f=e-o;return Math.hypot(b(this,gx)*h,b(this,mx)*f)<=2?null:(b(this,Po).push(n,e),isNaN(i)?(b(this,ph).set([s,o,n,e],2),b(this,rs).push(NaN,NaN,NaN,NaN,n,e),{path:{d:this.toSVGPath()}}):(isNaN(b(this,ph)[0])&&b(this,rs).splice(6,6),b(this,ph).set([i,a,s,o,n,e],0),b(this,rs).push(..._e.createBezierPoints(i,a,s,o,n,e)),{path:{d:this.toSVGPath()}}))}end(n,e){const i=this.add(n,e);return i||(b(this,Po).length===2?{path:{d:this.toSVGPath()}}:null)}startNew(n,e,i,a,s){K(this,gx,i),K(this,mx,a),K(this,dx,s),[n,e]=it(this,Qy,cv).call(this,n,e);const o=K(this,rs,[NaN,NaN,NaN,NaN,n,e]);K(this,Po,[n,e]);const h=b(this,as).at(-1);return h&&(h.line=new Float32Array(h.line),h.points=new Float32Array(h.points)),b(this,as).push({line:o,points:b(this,Po)}),b(this,ph).set(o,0),K(this,r0,0),this.toSVGPath(),null}getLastElement(){return b(this,as).at(-1)}setLastElement(n){return b(this,as)?(b(this,as).push(n),K(this,rs,n.line),K(this,Po,n.points),K(this,r0,0),{path:{d:this.toSVGPath()}}):b(this,px).setLastElement(n)}removeLastElement(){if(!b(this,as))return b(this,px).removeLastElement();b(this,as).pop(),K(this,Ts,"");for(let n=0,e=b(this,as).length;n<e;n++){const{line:i,points:a}=b(this,as)[n];K(this,rs,i),K(this,Po,a),K(this,r0,0),this.toSVGPath()}return{path:{d:b(this,Ts)}}}toSVGPath(){const n=_e.svgRound(b(this,rs)[4]),e=_e.svgRound(b(this,rs)[5]);if(b(this,Po).length===2)return K(this,Ts,`${b(this,Ts)} M ${n} ${e} Z`),b(this,Ts);if(b(this,Po).length<=6){const a=b(this,Ts).lastIndexOf("M");K(this,Ts,`${b(this,Ts).slice(0,a)} M ${n} ${e}`),K(this,r0,6)}if(b(this,Po).length===4){const a=_e.svgRound(b(this,rs)[10]),s=_e.svgRound(b(this,rs)[11]);return K(this,Ts,`${b(this,Ts)} L ${a} ${s}`),K(this,r0,12),b(this,Ts)}const i=[];b(this,r0)===0&&(i.push(`M ${n} ${e}`),K(this,r0,6));for(let a=b(this,r0),s=b(this,rs).length;a<s;a+=6){const[o,h,f,d,p,g]=b(this,rs).slice(a,a+6).map(_e.svgRound);i.push(`C${o} ${h} ${f} ${d} ${p} ${g}`)}return K(this,Ts,b(this,Ts)+i.join(" ")),K(this,r0,b(this,rs).length),b(this,Ts)}getOutlines(n,e,i,a){const s=b(this,as).at(-1);return s.line=new Float32Array(s.line),s.points=new Float32Array(s.points),b(this,px).build(b(this,as),n,e,i,b(this,dx),b(this,Zy),a),K(this,ph,null),K(this,rs,null),K(this,as,null),K(this,Ts,null),b(this,px)}get defaultSVGProperties(){return{root:{viewBox:"0 0 10000 10000"},rootClass:{draw:!0},bbox:[0,0,1,1]}}}ph=new WeakMap,rs=new WeakMap,as=new WeakMap,dx=new WeakMap,Zy=new WeakMap,Po=new WeakMap,Ts=new WeakMap,r0=new WeakMap,px=new WeakMap,gx=new WeakMap,mx=new WeakMap,Qy=new WeakSet,cv=function(n,e){return _e._normalizePoint(n,e,b(this,gx),b(this,mx),b(this,dx))};var Mo,I5,T5,al,gh,mh,Jy,t3,bx,Fs,Ud,SR,kR,AR;class N5 extends _e{constructor(){super(...arguments);rt(this,Fs);rt(this,Mo);rt(this,I5,0);rt(this,T5);rt(this,al);rt(this,gh);rt(this,mh);rt(this,Jy);rt(this,t3);rt(this,bx)}build(e,i,a,s,o,h,f){K(this,gh,i),K(this,mh,a),K(this,Jy,s),K(this,t3,o),K(this,bx,h),K(this,T5,f??0),K(this,al,e),it(this,Fs,kR).call(this)}get thickness(){return b(this,bx)}setLastElement(e){return b(this,al).push(e),{path:{d:this.toSVGPath()}}}removeLastElement(){return b(this,al).pop(),{path:{d:this.toSVGPath()}}}toSVGPath(){const e=[];for(const{line:i}of b(this,al)){if(e.push(`M${_e.svgRound(i[4])} ${_e.svgRound(i[5])}`),i.length===6){e.push("Z");continue}if(i.length===12&&isNaN(i[6])){e.push(`L${_e.svgRound(i[10])} ${_e.svgRound(i[11])}`);continue}for(let a=6,s=i.length;a<s;a+=6){const[o,h,f,d,p,g]=i.subarray(a,a+6).map(_e.svgRound);e.push(`C${o} ${h} ${f} ${d} ${p} ${g}`)}}return e.join("")}serialize([e,i,a,s],o){const h=[],f=[],[d,p,g,x]=it(this,Fs,SR).call(this);let w,_,A,T,E,P,M,F,k;switch(b(this,t3)){case 0:k=_e._rescale,w=e,_=i+s,A=a,T=-s,E=e+d*a,P=i+(1-p-x)*s,M=e+(d+g)*a,F=i+(1-p)*s;break;case 90:k=_e._rescaleAndSwap,w=e,_=i,A=a,T=s,E=e+p*a,P=i+d*s,M=e+(p+x)*a,F=i+(d+g)*s;break;case 180:k=_e._rescale,w=e+a,_=i,A=-a,T=s,E=e+(1-d-g)*a,P=i+p*s,M=e+(1-d)*a,F=i+(p+x)*s;break;case 270:k=_e._rescaleAndSwap,w=e+a,_=i+s,A=-a,T=-s,E=e+(1-p-x)*a,P=i+(1-d-g)*s,M=e+(1-p)*a,F=i+(1-d)*s;break}for(const{line:O,points:v}of b(this,al))h.push(k(O,w,_,A,T,o?new Array(O.length):null)),f.push(k(v,w,_,A,T,o?new Array(v.length):null));return{lines:h,points:f,rect:[E,P,M,F]}}static deserialize(e,i,a,s,o,{paths:{lines:h,points:f},rotation:d,thickness:p}){const g=[];let x,w,_,A,T;switch(d){case 0:T=_e._rescale,x=-e/a,w=i/s+1,_=1/a,A=-1/s;break;case 90:T=_e._rescaleAndSwap,x=-i/s,w=-e/a,_=1/s,A=1/a;break;case 180:T=_e._rescale,x=e/a+1,w=-i/s,_=-1/a,A=1/s;break;case 270:T=_e._rescaleAndSwap,x=i/s+1,w=e/a+1,_=-1/s,A=-1/a;break}if(!h){h=[];for(const P of f){const M=P.length;if(M===2){h.push(new Float32Array([NaN,NaN,NaN,NaN,P[0],P[1]]));continue}if(M===4){h.push(new Float32Array([NaN,NaN,NaN,NaN,P[0],P[1],NaN,NaN,NaN,NaN,P[2],P[3]]));continue}const F=new Float32Array(3*(M-2));h.push(F);let[k,O,v,R]=P.subarray(0,4);F.set([NaN,NaN,NaN,NaN,k,O],0);for(let G=4;G<M;G+=2){const j=P[G],U=P[G+1];F.set(_e.createBezierPoints(k,O,v,R,j,U),(G-2)*3),[k,O,v,R]=[v,R,j,U]}}}for(let P=0,M=h.length;P<M;P++)g.push({line:T(h[P].map(F=>F??NaN),x,w,_,A),points:T(f[P].map(F=>F??NaN),x,w,_,A)});const E=new this.prototype.constructor;return E.build(g,a,s,1,d,p,o),E}get box(){return b(this,Mo)}updateProperty(e,i){return e==="stroke-width"?it(this,Fs,AR).call(this,i):null}updateParentDimensions([e,i],a){const[s,o]=it(this,Fs,Ud).call(this);K(this,gh,e),K(this,mh,i),K(this,Jy,a);const[h,f]=it(this,Fs,Ud).call(this),d=h-s,p=f-o,g=b(this,Mo);return g[0]-=d,g[1]-=p,g[2]+=2*d,g[3]+=2*p,g}updateRotation(e){return K(this,I5,e),{path:{transform:this.rotationTransform}}}get viewBox(){return b(this,Mo).map(_e.svgRound).join(" ")}get defaultProperties(){const[e,i]=b(this,Mo);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${_e.svgRound(e)} ${_e.svgRound(i)}`}}}get rotationTransform(){const[,,e,i]=b(this,Mo);let a=0,s=0,o=0,h=0,f=0,d=0;switch(b(this,I5)){case 90:s=i/e,o=-e/i,f=e;break;case 180:a=-1,h=-1,f=e,d=i;break;case 270:s=-i/e,o=e/i,d=i;break;default:return""}return`matrix(${a} ${s} ${o} ${h} ${_e.svgRound(f)} ${_e.svgRound(d)})`}getPathResizingSVGProperties([e,i,a,s]){const[o,h]=it(this,Fs,Ud).call(this),[f,d,p,g]=b(this,Mo);if(Math.abs(p-o)<=_e.PRECISION||Math.abs(g-h)<=_e.PRECISION){const T=e+a/2-(f+p/2),E=i+s/2-(d+g/2);return{path:{"transform-origin":`${_e.svgRound(e)} ${_e.svgRound(i)}`,transform:`${this.rotationTransform} translate(${T} ${E})`}}}const x=(a-2*o)/(p-2*o),w=(s-2*h)/(g-2*h),_=p/a,A=g/s;return{path:{"transform-origin":`${_e.svgRound(f)} ${_e.svgRound(d)}`,transform:`${this.rotationTransform} scale(${_} ${A}) translate(${_e.svgRound(o)} ${_e.svgRound(h)}) scale(${x} ${w}) translate(${_e.svgRound(-o)} ${_e.svgRound(-h)})`}}}getPathResizedSVGProperties([e,i,a,s]){const[o,h]=it(this,Fs,Ud).call(this),f=b(this,Mo),[d,p,g,x]=f;if(f[0]=e,f[1]=i,f[2]=a,f[3]=s,Math.abs(g-o)<=_e.PRECISION||Math.abs(x-h)<=_e.PRECISION){const E=e+a/2-(d+g/2),P=i+s/2-(p+x/2);for(const{line:M,points:F}of b(this,al))_e._translate(M,E,P,M),_e._translate(F,E,P,F);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${_e.svgRound(e)} ${_e.svgRound(i)}`,transform:this.rotationTransform||null,d:this.toSVGPath()}}}const w=(a-2*o)/(g-2*o),_=(s-2*h)/(x-2*h),A=-w*(d+o)+e+o,T=-_*(p+h)+i+h;if(w!==1||_!==1||A!==0||T!==0)for(const{line:E,points:P}of b(this,al))_e._rescale(E,A,T,w,_,E),_e._rescale(P,A,T,w,_,P);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${_e.svgRound(e)} ${_e.svgRound(i)}`,transform:this.rotationTransform||null,d:this.toSVGPath()}}}getPathTranslatedSVGProperties([e,i],a){const[s,o]=a,h=b(this,Mo),f=e-h[0],d=i-h[1];if(b(this,gh)===s&&b(this,mh)===o)for(const{line:p,points:g}of b(this,al))_e._translate(p,f,d,p),_e._translate(g,f,d,g);else{const p=b(this,gh)/s,g=b(this,mh)/o;K(this,gh,s),K(this,mh,o);for(const{line:x,points:w}of b(this,al))_e._rescale(x,f,d,p,g,x),_e._rescale(w,f,d,p,g,w);h[2]*=p,h[3]*=g}return h[0]=e,h[1]=i,{root:{viewBox:this.viewBox},path:{d:this.toSVGPath(),"transform-origin":`${_e.svgRound(e)} ${_e.svgRound(i)}`}}}get defaultSVGProperties(){const e=b(this,Mo);return{root:{viewBox:this.viewBox},rootClass:{draw:!0},path:{d:this.toSVGPath(),"transform-origin":`${_e.svgRound(e[0])} ${_e.svgRound(e[1])}`,transform:this.rotationTransform||null},bbox:e}}}Mo=new WeakMap,I5=new WeakMap,T5=new WeakMap,al=new WeakMap,gh=new WeakMap,mh=new WeakMap,Jy=new WeakMap,t3=new WeakMap,bx=new WeakMap,Fs=new WeakSet,Ud=function(e=b(this,bx)){const i=b(this,T5)+e/2*b(this,Jy);return b(this,t3)%180===0?[i/b(this,gh),i/b(this,mh)]:[i/b(this,mh),i/b(this,gh)]},SR=function(){const[e,i,a,s]=b(this,Mo),[o,h]=it(this,Fs,Ud).call(this,0);return[e+o,i+h,a-2*o,s-2*h]},kR=function(){const e=K(this,Mo,new Float32Array([1/0,1/0,-1/0,-1/0]));for(const{line:s}of b(this,al)){if(s.length<=12){for(let f=4,d=s.length;f<d;f+=6)Me.pointBoundingBox(s[f],s[f+1],e);continue}let o=s[4],h=s[5];for(let f=6,d=s.length;f<d;f+=6){const[p,g,x,w,_,A]=s.subarray(f,f+6);Me.bezierBoundingBox(o,h,p,g,x,w,_,A,e),o=_,h=A}}const[i,a]=it(this,Fs,Ud).call(this);e[0]=Ro(e[0]-i,0,1),e[1]=Ro(e[1]-a,0,1),e[2]=Ro(e[2]+i,0,1),e[3]=Ro(e[3]+a,0,1),e[2]-=e[0],e[3]-=e[1]},AR=function(e){const[i,a]=it(this,Fs,Ud).call(this);K(this,bx,e);const[s,o]=it(this,Fs,Ud).call(this),[h,f]=[s-i,o-a],d=b(this,Mo);return d[0]-=h,d[1]-=f,d[2]+=2*h,d[3]+=2*f,d};class Qv extends wR{constructor(n){super(),this._viewParameters=n,super.updateProperties({fill:"none",stroke:ga._defaultLineColor,"stroke-opacity":1,"stroke-width":1,"stroke-linecap":"round","stroke-linejoin":"round","stroke-miterlimit":10})}updateSVGProperty(n,e){n==="stroke-width"&&(e??(e=this["stroke-width"]),e*=this._viewParameters.realScale),super.updateSVGProperty(n,e)}clone(){const n=new Qv(this._viewParameters);return n.updateAll(this),n}}var zv,_R;const Y2=class Y2 extends Av{constructor(e){super({...e,name:"inkEditor"});rt(this,zv);this._willKeepAspectRatio=!0,this.defaultL10nId="pdfjs-editor-ink-editor"}static initialize(e,i){ga.initialize(e,i),this._defaultDrawingOptions=new Qv(i.viewParameters)}static getDefaultDrawingOptions(e){const i=this._defaultDrawingOptions.clone();return i.updateProperties(e),i}static get supportMultipleDrawings(){return!0}static get typesMap(){return Cn(this,"typesMap",new Map([[Rn.INK_THICKNESS,"stroke-width"],[Rn.INK_COLOR,"stroke"],[Rn.INK_OPACITY,"stroke-opacity"]]))}static createDrawerInstance(e,i,a,s,o){return new IB(e,i,a,s,o,this._defaultDrawingOptions["stroke-width"])}static deserializeDraw(e,i,a,s,o,h){return N5.deserialize(e,i,a,s,o,h)}static async deserialize(e,i,a){let s=null;if(e instanceof B_){const{data:{inkLists:h,rect:f,rotation:d,id:p,color:g,opacity:x,borderStyle:{rawWidth:w},popupRef:_},parent:{page:{pageNumber:A}}}=e;s=e={annotationType:an.INK,color:Array.from(g),thickness:w,opacity:x,paths:{points:h},boxes:null,pageIndex:A-1,rect:f.slice(0),rotation:d,id:p,deleted:!1,popupRef:_}}const o=await super.deserialize(e,i,a);return o.annotationElementId=e.id||null,o._initialData=s,o}onScaleChanging(){if(!this.parent)return;super.onScaleChanging();const{_drawId:e,_drawingOptions:i,parent:a}=this;i.updateSVGProperty("stroke-width"),a.drawLayer.updateProperties(e,i.toSVGProperties())}static onScaleChangingWhenDrawing(){const e=this._currentParent;e&&(super.onScaleChangingWhenDrawing(),this._defaultDrawingOptions.updateSVGProperty("stroke-width"),e.drawLayer.updateProperties(this._currentDrawId,this._defaultDrawingOptions.toSVGProperties()))}createDrawingOptions({color:e,thickness:i,opacity:a}){this._drawingOptions=Y2.getDefaultDrawingOptions({stroke:Me.makeHexColor(...e),"stroke-width":i,"stroke-opacity":a})}serialize(e=!1){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const{lines:i,points:a,rect:s}=this.serializeDraw(e),{_drawingOptions:{stroke:o,"stroke-opacity":h,"stroke-width":f}}=this,d={annotationType:an.INK,color:ga._colorManager.convert(o),opacity:h,thickness:f,paths:{lines:i,points:a},pageIndex:this.pageIndex,rect:s,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return e?(d.isCopy=!0,d):this.annotationElementId&&!it(this,zv,_R).call(this,d)?null:(d.id=this.annotationElementId,d)}renderAnnotationElement(e){const{points:i,rect:a}=this.serializeDraw(!1);return e.updateEdited({rect:a,thickness:this._drawingOptions["stroke-width"],points:i}),null}};zv=new WeakSet,_R=function(e){const{color:i,thickness:a,opacity:s,pageIndex:o}=this._initialData;return this._hasBeenMoved||this._hasBeenResized||e.color.some((h,f)=>h!==i[f])||e.thickness!==a||e.opacity!==s||e.pageIndex!==o},Oe(Y2,"_type","ink"),Oe(Y2,"_editorType",an.INK),Oe(Y2,"_defaultDrawingOptions",null);let YA=Y2;class ZA extends N5{toSVGPath(){let n=super.toSVGPath();return n.endsWith("Z")||(n+="Z"),n}}const L7=8,B6=3;var xx,ur,QA,$0,CR,IR,JA,lv,TR,ER,OR,t_,e_,FR;class b1{static extractContoursFromText(n,{fontFamily:e,fontStyle:i,fontWeight:a},s,o,h,f){let d=new OffscreenCanvas(1,1),p=d.getContext("2d",{alpha:!1});const g=200,x=p.font=`${i} ${a} ${g}px ${e}`,{actualBoundingBoxLeft:w,actualBoundingBoxRight:_,actualBoundingBoxAscent:A,actualBoundingBoxDescent:T,fontBoundingBoxAscent:E,fontBoundingBoxDescent:P,width:M}=p.measureText(n),F=1.5,k=Math.ceil(Math.max(Math.abs(w)+Math.abs(_)||0,M)*F),O=Math.ceil(Math.max(Math.abs(A)+Math.abs(T)||g,Math.abs(E)+Math.abs(P)||g)*F);d=new OffscreenCanvas(k,O),p=d.getContext("2d",{alpha:!0,willReadFrequently:!0}),p.font=x,p.filter="grayscale(1)",p.fillStyle="white",p.fillRect(0,0,k,O),p.fillStyle="black",p.fillText(n,k*(F-1)/2,O*(3-F)/2);const v=it(this,ur,t_).call(this,p.getImageData(0,0,k,O).data),R=it(this,ur,OR).call(this,v),G=it(this,ur,e_).call(this,R),j=it(this,ur,JA).call(this,v,k,O,G);return this.processDrawnLines({lines:{curves:j,width:k,height:O},pageWidth:s,pageHeight:o,rotation:h,innerMargin:f,mustSmooth:!0,areContours:!0})}static process(n,e,i,a,s){const[o,h,f]=it(this,ur,FR).call(this,n),[d,p]=it(this,ur,ER).call(this,o,h,f,Math.hypot(h,f)*b(this,xx).sigmaSFactor,b(this,xx).sigmaR,b(this,xx).kernelSize),g=it(this,ur,e_).call(this,p),x=it(this,ur,JA).call(this,d,h,f,g);return this.processDrawnLines({lines:{curves:x,width:h,height:f},pageWidth:e,pageHeight:i,rotation:a,innerMargin:s,mustSmooth:!0,areContours:!0})}static processDrawnLines({lines:n,pageWidth:e,pageHeight:i,rotation:a,innerMargin:s,mustSmooth:o,areContours:h}){a%180!==0&&([e,i]=[i,e]);const{curves:f,width:d,height:p}=n,g=n.thickness??0,x=[],w=Math.min(e/d,i/p),_=w/e,A=w/i,T=[];for(const{points:P}of f){const M=o?it(this,ur,TR).call(this,P):P;if(!M)continue;T.push(M);const F=M.length,k=new Float32Array(F),O=new Float32Array(3*(F===2?2:F-2));if(x.push({line:O,points:k}),F===2){k[0]=M[0]*_,k[1]=M[1]*A,O.set([NaN,NaN,NaN,NaN,k[0],k[1]],0);continue}let[v,R,G,j]=M;v*=_,R*=A,G*=_,j*=A,k.set([v,R,G,j],0),O.set([NaN,NaN,NaN,NaN,v,R],0);for(let U=4;U<F;U+=2){const N=k[U]=M[U]*_,Z=k[U+1]=M[U+1]*A;O.set(_e.createBezierPoints(v,R,G,j,N,Z),(U-2)*3),[v,R,G,j]=[G,j,N,Z]}}if(x.length===0)return null;const E=h?new ZA:new N5;return E.build(x,e,i,1,a,h?0:g,s),{outline:E,newCurves:T,areContours:h,thickness:g,width:d,height:p}}static async compressSignature({outlines:n,areContours:e,thickness:i,width:a,height:s}){let o=1/0,h=-1/0,f=0;for(const M of n){f+=M.length;for(let F=2,k=M.length;F<k;F++){const O=M[F]-M[F-2];o=Math.min(o,O),h=Math.max(h,O)}}let d;o>=-128&&h<=127?d=Int8Array:o>=-32768&&h<=32767?d=Int16Array:d=Int32Array;const p=n.length,g=L7+B6*p,x=new Uint32Array(g);let w=0;x[w++]=g*Uint32Array.BYTES_PER_ELEMENT+(f-2*p)*d.BYTES_PER_ELEMENT,x[w++]=0,x[w++]=a,x[w++]=s,x[w++]=e?0:1,x[w++]=Math.max(0,Math.floor(i??0)),x[w++]=p,x[w++]=d.BYTES_PER_ELEMENT;for(const M of n)x[w++]=M.length-2,x[w++]=M[0],x[w++]=M[1];const _=new CompressionStream("deflate-raw"),A=_.writable.getWriter();await A.ready,A.write(x);const T=d.prototype.constructor;for(const M of n){const F=new T(M.length-2);for(let k=2,O=M.length;k<O;k++)F[k-2]=M[k]-M[k-2];A.write(F)}A.close();const E=await new Response(_.readable).arrayBuffer(),P=new Uint8Array(E);return DM(P)}static async decompressSignature(n){try{const e=YN(n),{readable:i,writable:a}=new DecompressionStream("deflate-raw"),s=a.getWriter();await s.ready,s.write(e).then(async()=>{await s.ready,await s.close()}).catch(()=>{});let o=null,h=0;for await(const M of i)o||(o=new Uint8Array(new Uint32Array(M.buffer,0,4)[0])),o.set(M,h),h+=M.length;const f=new Uint32Array(o.buffer,0,o.length>>2),d=f[1];if(d!==0)throw new Error(`Invalid version: ${d}`);const p=f[2],g=f[3],x=f[4]===0,w=f[5],_=f[6],A=f[7],T=[],E=(L7+B6*_)*Uint32Array.BYTES_PER_ELEMENT;let P;switch(A){case Int8Array.BYTES_PER_ELEMENT:P=new Int8Array(o.buffer,E);break;case Int16Array.BYTES_PER_ELEMENT:P=new Int16Array(o.buffer,E);break;case Int32Array.BYTES_PER_ELEMENT:P=new Int32Array(o.buffer,E);break}h=0;for(let M=0;M<_;M++){const F=f[B6*M+L7],k=new Float32Array(F+2);T.push(k);for(let O=0;O<B6-1;O++)k[O]=f[B6*M+L7+O+1];for(let O=0;O<F;O++)k[O+2]=k[O]+P[h++]}return{areContours:x,thickness:w,outlines:T,width:p,height:g}}catch(e){return on(`decompressSignature: ${e}`),null}}}xx=new WeakMap,ur=new WeakSet,QA=function(n,e,i,a){return i-=n,a-=e,i===0?a>0?0:4:i===1?a+6:2-a},$0=new WeakMap,CR=function(n,e,i,a,s,o,h){const f=it(this,ur,QA).call(this,i,a,s,o);for(let d=0;d<8;d++){const p=(-d+f-h+16)%8,g=b(this,$0)[2*p],x=b(this,$0)[2*p+1];if(n[(i+g)*e+(a+x)]!==0)return p}return-1},IR=function(n,e,i,a,s,o,h){const f=it(this,ur,QA).call(this,i,a,s,o);for(let d=0;d<8;d++){const p=(d+f+h+16)%8,g=b(this,$0)[2*p],x=b(this,$0)[2*p+1];if(n[(i+g)*e+(a+x)]!==0)return p}return-1},JA=function(n,e,i,a){const s=n.length,o=new Int32Array(s);for(let p=0;p<s;p++)o[p]=n[p]<=a?1:0;for(let p=1;p<i-1;p++)o[p*e]=o[p*e+e-1]=0;for(let p=0;p<e;p++)o[p]=o[e*i-1-p]=0;let h=1,f;const d=[];for(let p=1;p<i-1;p++){f=1;for(let g=1;g<e-1;g++){const x=p*e+g,w=o[x];if(w===0)continue;let _=p,A=g;if(w===1&&o[x-1]===0)h+=1,A-=1;else if(w>=1&&o[x+1]===0)h+=1,A+=1,w>1&&(f=w);else{w!==1&&(f=Math.abs(w));continue}const T=[g,p],E=A===g+1,P={isHole:E,points:T,id:h,parent:0};d.push(P);let M;for(const U of d)if(U.id===f){M=U;break}M?M.isHole?P.parent=E?M.parent:f:P.parent=E?f:M.parent:P.parent=E?f:0;const F=it(this,ur,CR).call(this,o,e,p,g,_,A,0);if(F===-1){o[x]=-h,o[x]!==1&&(f=Math.abs(o[x]));continue}let k=b(this,$0)[2*F],O=b(this,$0)[2*F+1];const v=p+k,R=g+O;_=v,A=R;let G=p,j=g;for(;;){const U=it(this,ur,IR).call(this,o,e,G,j,_,A,1);k=b(this,$0)[2*U],O=b(this,$0)[2*U+1];const N=G+k,Z=j+O;T.push(Z,N);const V=G*e+j;if(o[V+1]===0?o[V]=-h:o[V]===1&&(o[V]=h),N===p&&Z===g&&G===v&&j===R){o[x]!==1&&(f=Math.abs(o[x]));break}else _=G,A=j,G=N,j=Z}}}return d},lv=function(n,e,i,a){if(i-e<=4){for(let v=e;v<i-2;v+=2)a.push(n[v],n[v+1]);return}const s=n[e],o=n[e+1],h=n[i-4]-s,f=n[i-3]-o,d=Math.hypot(h,f),p=h/d,g=f/d,x=p*o-g*s,w=f/h,_=1/d,A=Math.atan(w),T=Math.cos(A),E=Math.sin(A),P=_*(Math.abs(T)+Math.abs(E)),M=_*(1-P+P**2),F=Math.max(Math.atan(Math.abs(E+T)*M),Math.atan(Math.abs(E-T)*M));let k=0,O=e;for(let v=e+2;v<i-2;v+=2){const R=Math.abs(x-p*n[v+1]+g*n[v]);R>k&&(O=v,k=R)}k>(d*F)**2?(it(this,ur,lv).call(this,n,e,O+2,a),it(this,ur,lv).call(this,n,O,i,a)):a.push(s,o)},TR=function(n){const e=[],i=n.length;return it(this,ur,lv).call(this,n,0,i,e),e.push(n[i-2],n[i-1]),e.length<=4?null:e},ER=function(n,e,i,a,s,o){const h=new Float32Array(o**2),f=-2*a**2,d=o>>1;for(let A=0;A<o;A++){const T=(A-d)**2;for(let E=0;E<o;E++)h[A*o+E]=Math.exp((T+(E-d)**2)/f)}const p=new Float32Array(256),g=-2*s**2;for(let A=0;A<256;A++)p[A]=Math.exp(A**2/g);const x=n.length,w=new Uint8Array(x),_=new Uint32Array(256);for(let A=0;A<i;A++)for(let T=0;T<e;T++){const E=A*e+T,P=n[E];let M=0,F=0;for(let O=0;O<o;O++){const v=A+O-d;if(!(v<0||v>=i))for(let R=0;R<o;R++){const G=T+R-d;if(G<0||G>=e)continue;const j=n[v*e+G],U=h[O*o+R]*p[Math.abs(j-P)];M+=j*U,F+=U}}const k=w[E]=Math.round(M/F);_[k]++}return[w,_]},OR=function(n){const e=new Uint32Array(256);for(const i of n)e[i]++;return e},t_=function(n){const e=n.length,i=new Uint8ClampedArray(e>>2);let a=-1/0,s=1/0;for(let h=0,f=i.length;h<f;h++){if(n[(h<<2)+3]===0){a=i[h]=255;continue}const p=i[h]=n[h<<2];p>a&&(a=p),p<s&&(s=p)}const o=255/(a-s);for(let h=0;h<e;h++)i[h]=(i[h]-s)*o;return i},e_=function(n){let e,i=-1/0,a=-1/0;const s=n.findIndex(f=>f!==0);let o=s,h=s;for(e=s;e<256;e++){const f=n[e];f>i&&(e-o>a&&(a=e-o,h=e-1),i=f,o=e)}for(e=h-1;e>=0&&!(n[e]>n[e+1]);e--);return e},FR=function(n){const e=n,{width:i,height:a}=n,{maxDim:s}=b(this,xx);let o=i,h=a;if(i>s||a>s){let x=i,w=a,_=Math.log2(Math.max(i,a)/s);const A=Math.floor(_);_=_===A?A-1:A;for(let E=0;E<_;E++){o=x,h=w,o>s&&(o=Math.ceil(o/2)),h>s&&(h=Math.ceil(h/2));const P=new OffscreenCanvas(o,h);P.getContext("2d").drawImage(n,0,0,x,w,0,0,o,h),x=o,w=h,n!==e&&n.close(),n=P.transferToImageBitmap()}const T=Math.min(s/o,s/h);o=Math.round(o*T),h=Math.round(h*T)}const d=new OffscreenCanvas(o,h).getContext("2d",{willReadFrequently:!0});d.filter="grayscale(1)",d.drawImage(n,0,0,n.width,n.height,0,0,o,h);const p=d.getImageData(0,0,o,h).data;return[it(this,ur,t_).call(this,p),o,h]},rt(b1,ur),rt(b1,xx,{maxDim:512,sigmaSFactor:.02,sigmaR:25,kernelSize:16}),rt(b1,$0,new Int32Array([0,1,-1,1,-1,0,-1,-1,0,-1,1,-1,1,0,1,1]));class U_ extends wR{constructor(){super(),super.updateProperties({fill:"CanvasText","stroke-width":0})}clone(){const n=new U_;return n.updateAll(this),n}}class G_ extends Qv{constructor(n){super(n),super.updateProperties({stroke:"CanvasText","stroke-width":1})}clone(){const n=new G_(this._viewParameters);return n.updateAll(this),n}}var mm,il,bm,xm;const qc=class qc extends Av{constructor(e){super({...e,mustBeCommitted:!0,name:"signatureEditor"});rt(this,mm,!1);rt(this,il,null);rt(this,bm,null);rt(this,xm,null);this._willKeepAspectRatio=!0,K(this,bm,e.signatureData||null),K(this,il,null),this.defaultL10nId="pdfjs-editor-signature-editor1"}static initialize(e,i){ga.initialize(e,i),this._defaultDrawingOptions=new U_,this._defaultDrawnSignatureOptions=new G_(i.viewParameters)}static getDefaultDrawingOptions(e){const i=this._defaultDrawingOptions.clone();return i.updateProperties(e),i}static get supportMultipleDrawings(){return!1}static get typesMap(){return Cn(this,"typesMap",new Map)}static get isDrawer(){return!1}get telemetryFinalData(){return{type:"signature",hasDescription:!!b(this,il)}}static computeTelemetryFinalData(e){const i=e.get("hasDescription");return{hasAltText:i.get(!0)??0,hasNoAltText:i.get(!1)??0}}get isResizable(){return!0}onScaleChanging(){this._drawId!==null&&super.onScaleChanging()}render(){if(this.div)return this.div;let e,i;const{_isCopy:a}=this;if(a&&(this._isCopy=!1,e=this.x,i=this.y),super.render(),this._drawId===null)if(b(this,bm)){const{lines:s,mustSmooth:o,areContours:h,description:f,uuid:d,heightInPage:p}=b(this,bm),{rawDims:{pageWidth:g,pageHeight:x},rotation:w}=this.parent.viewport,_=b1.processDrawnLines({lines:s,pageWidth:g,pageHeight:x,rotation:w,innerMargin:qc._INNER_MARGIN,mustSmooth:o,areContours:h});this.addSignature(_,p,f,d)}else this.div.setAttribute("data-l10n-args",JSON.stringify({description:""})),this.div.hidden=!0,this._uiManager.getSignature(this);return a&&(this._isCopy=!0,this._moveAfterPaste(e,i)),this.div}setUuid(e){K(this,xm,e),this.addEditToolbar()}getUuid(){return b(this,xm)}get description(){return b(this,il)}set description(e){K(this,il,e),super.addEditToolbar().then(i=>{i==null||i.updateEditSignatureButton(e)})}getSignaturePreview(){const{newCurves:e,areContours:i,thickness:a,width:s,height:o}=b(this,bm),h=Math.max(s,o),f=b1.processDrawnLines({lines:{curves:e.map(d=>({points:d})),thickness:a,width:s,height:o},pageWidth:h,pageHeight:h,rotation:0,innerMargin:0,mustSmooth:!1,areContours:i});return{areContours:i,outline:f.outline}}async addEditToolbar(){const e=await super.addEditToolbar();return e?(this._uiManager.signatureManager&&b(this,il)!==null&&(await e.addEditSignatureButton(this._uiManager.signatureManager,b(this,xm),b(this,il)),e.show()),e):null}addSignature(e,i,a,s){const{x:o,y:h}=this,{outline:f}=K(this,bm,e);K(this,mm,f instanceof ZA),K(this,il,a),this.div.setAttribute("data-l10n-args",JSON.stringify({description:a}));let d;b(this,mm)?d=qc.getDefaultDrawingOptions():(d=qc._defaultDrawnSignatureOptions.clone(),d.updateProperties({"stroke-width":f.thickness})),this._addOutlines({drawOutlines:f,drawingOptions:d});const[p,g]=this.parentDimensions,[,x]=this.pageDimensions;let w=i/x;w=w>=1?.5:w,this.width*=w/this.height,this.width>=1&&(w*=.9/this.width,this.width=.9),this.height=w,this.setDims(p*this.width,g*this.height),this.x=o,this.y=h,this.center(),this._onResized(),this.onScaleChanging(),this.rotate(),this._uiManager.addToAnnotationStorage(this),this.setUuid(s),this._reportTelemetry({action:"pdfjs.signature.inserted",data:{hasBeenSaved:!!s,hasDescription:!!a}}),this.div.hidden=!1}getFromImage(e){const{rawDims:{pageWidth:i,pageHeight:a},rotation:s}=this.parent.viewport;return b1.process(e,i,a,s,qc._INNER_MARGIN)}getFromText(e,i){const{rawDims:{pageWidth:a,pageHeight:s},rotation:o}=this.parent.viewport;return b1.extractContoursFromText(e,i,a,s,o,qc._INNER_MARGIN)}getDrawnSignature(e){const{rawDims:{pageWidth:i,pageHeight:a},rotation:s}=this.parent.viewport;return b1.processDrawnLines({lines:e,pageWidth:i,pageHeight:a,rotation:s,innerMargin:qc._INNER_MARGIN,mustSmooth:!1,areContours:!1})}createDrawingOptions({areContours:e,thickness:i}){e?this._drawingOptions=qc.getDefaultDrawingOptions():(this._drawingOptions=qc._defaultDrawnSignatureOptions.clone(),this._drawingOptions.updateProperties({"stroke-width":i}))}serialize(e=!1){if(this.isEmpty())return null;const{lines:i,points:a,rect:s}=this.serializeDraw(e),{_drawingOptions:{"stroke-width":o}}=this,h={annotationType:an.SIGNATURE,isSignature:!0,areContours:b(this,mm),color:[0,0,0],thickness:b(this,mm)?0:o,pageIndex:this.pageIndex,rect:s,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return e?(h.paths={lines:i,points:a},h.uuid=b(this,xm),h.isCopy=!0):h.lines=i,b(this,il)&&(h.accessibilityData={type:"Figure",alt:b(this,il)}),h}static deserializeDraw(e,i,a,s,o,h){return h.areContours?ZA.deserialize(e,i,a,s,o,h):N5.deserialize(e,i,a,s,o,h)}static async deserialize(e,i,a){var o;const s=await super.deserialize(e,i,a);return K(s,mm,e.areContours),K(s,il,((o=e.accessibilityData)==null?void 0:o.alt)||""),K(s,xm,e.uuid),s}};mm=new WeakMap,il=new WeakMap,bm=new WeakMap,xm=new WeakMap,Oe(qc,"_type","signature"),Oe(qc,"_editorType",an.SIGNATURE),Oe(qc,"_defaultDrawingOptions",null);let n_=qc;var fa,is,ym,h1,wm,e3,f1,yx,bh,sl,n3,Xn,e9,n9,uv,hv,fv,a_,dv,PR;class r_ extends ga{constructor(e){super({...e,name:"stampEditor"});rt(this,Xn);rt(this,fa,null);rt(this,is,null);rt(this,ym,null);rt(this,h1,null);rt(this,wm,null);rt(this,e3,"");rt(this,f1,null);rt(this,yx,!1);rt(this,bh,null);rt(this,sl,!1);rt(this,n3,!1);K(this,h1,e.bitmapUrl),K(this,wm,e.bitmapFile),this.defaultL10nId="pdfjs-editor-stamp-editor"}static initialize(e,i){ga.initialize(e,i)}static isHandlingMimeForPasting(e){return Yk.includes(e)}static paste(e,i){i.pasteEditor(an.STAMP,{bitmapFile:e.getAsFile()})}altTextFinish(){this._uiManager.useNewAltTextFlow&&(this.div.hidden=!1),super.altTextFinish()}get telemetryFinalData(){var e;return{type:"stamp",hasAltText:!!((e=this.altTextData)!=null&&e.altText)}}static computeTelemetryFinalData(e){const i=e.get("hasAltText");return{hasAltText:i.get(!0)??0,hasNoAltText:i.get(!1)??0}}async mlGuessAltText(e=null,i=!0){if(this.hasAltTextData())return null;const{mlManager:a}=this._uiManager;if(!a)throw new Error("No ML.");if(!await a.isEnabledFor("altText"))throw new Error("ML isn't enabled for alt text.");const{data:s,width:o,height:h}=e||this.copyCanvas(null,null,!0).imageData,f=await a.guess({name:"altText",request:{data:s,width:o,height:h,channels:s.length/(o*h)}});if(!f)throw new Error("No response from the AI service.");if(f.error)throw new Error("Error from the AI service.");if(f.cancel)return null;if(!f.output)throw new Error("No valid response from the AI service.");const d=f.output;return await this.setGuessedAltText(d),i&&!this.hasAltTextData()&&(this.altTextData={alt:d,decorative:!1}),d}remove(){var e;b(this,is)&&(K(this,fa,null),this._uiManager.imageManager.deleteId(b(this,is)),(e=b(this,f1))==null||e.remove(),K(this,f1,null),b(this,bh)&&(clearTimeout(b(this,bh)),K(this,bh,null))),super.remove()}rebuild(){if(!this.parent){b(this,is)&&it(this,Xn,uv).call(this);return}super.rebuild(),this.div!==null&&(b(this,is)&&b(this,f1)===null&&it(this,Xn,uv).call(this),this.isAttachedToDOM||this.parent.add(this))}onceAdded(e){this._isDraggable=!0,e&&this.div.focus()}isEmpty(){return!(b(this,ym)||b(this,fa)||b(this,h1)||b(this,wm)||b(this,is)||b(this,yx))}get isResizable(){return!0}render(){if(this.div)return this.div;let e,i;return this._isCopy&&(e=this.x,i=this.y),super.render(),this.div.hidden=!0,this.addAltTextButton(),b(this,yx)||(b(this,fa)?it(this,Xn,hv).call(this):it(this,Xn,uv).call(this)),this._isCopy&&this._moveAfterPaste(e,i),this._uiManager.addShouldRescale(this),this.div}setCanvas(e,i){const{id:a,bitmap:s}=this._uiManager.imageManager.getFromCanvas(e,i);i.remove(),a&&this._uiManager.imageManager.isValidId(a)&&(K(this,is,a),s&&K(this,fa,s),K(this,yx,!1),it(this,Xn,hv).call(this))}_onResized(){this.onScaleChanging()}onScaleChanging(){if(!this.parent)return;b(this,bh)!==null&&clearTimeout(b(this,bh)),K(this,bh,setTimeout(()=>{K(this,bh,null),it(this,Xn,a_).call(this)},200))}copyCanvas(e,i,a=!1){var w;e||(e=224);const{width:s,height:o}=b(this,fa),h=new v1;let f=b(this,fa),d=s,p=o,g=null;if(i){if(s>i||o>i){const R=Math.min(i/s,i/o);d=Math.floor(s*R),p=Math.floor(o*R)}g=document.createElement("canvas");const _=g.width=Math.ceil(d*h.sx),A=g.height=Math.ceil(p*h.sy);b(this,sl)||(f=it(this,Xn,fv).call(this,_,A));const T=g.getContext("2d");T.filter=this._uiManager.hcmFilter;let E="white",P="#cfcfd8";this._uiManager.hcmFilter!=="none"?P="black":(w=window.matchMedia)!=null&&w.call(window,"(prefers-color-scheme: dark)").matches&&(E="#8f8f9d",P="#42414d");const M=15,F=M*h.sx,k=M*h.sy,O=new OffscreenCanvas(F*2,k*2),v=O.getContext("2d");v.fillStyle=E,v.fillRect(0,0,F*2,k*2),v.fillStyle=P,v.fillRect(0,0,F,k),v.fillRect(F,k,F,k),T.fillStyle=T.createPattern(O,"repeat"),T.fillRect(0,0,_,A),T.drawImage(f,0,0,f.width,f.height,0,0,_,A)}let x=null;if(a){let _,A;if(h.symmetric&&f.width<e&&f.height<e)_=f.width,A=f.height;else if(f=b(this,fa),s>e||o>e){const P=Math.min(e/s,e/o);_=Math.floor(s*P),A=Math.floor(o*P),b(this,sl)||(f=it(this,Xn,fv).call(this,_,A))}const E=new OffscreenCanvas(_,A).getContext("2d",{willReadFrequently:!0});E.drawImage(f,0,0,f.width,f.height,0,0,_,A),x={width:_,height:A,data:E.getImageData(0,0,_,A).data}}return{canvas:g,width:d,height:p,imageData:x}}static async deserialize(e,i,a){var T;let s=null,o=!1;if(e instanceof qD){const{data:{rect:E,rotation:P,id:M,structParent:F,popupRef:k},container:O,parent:{page:{pageNumber:v}},canvas:R}=e;let G,j;R?(delete e.canvas,{id:G,bitmap:j}=a.imageManager.getFromCanvas(O.id,R),R.remove()):(o=!0,e._hasNoCanvas=!0);const U=((T=await i._structTree.getAriaAttributes(`${O_}${M}`))==null?void 0:T.get("aria-label"))||"";s=e={annotationType:an.STAMP,bitmapId:G,bitmap:j,pageIndex:v-1,rect:E.slice(0),rotation:P,id:M,deleted:!1,accessibilityData:{decorative:!1,altText:U},isSvg:!1,structParent:F,popupRef:k}}const h=await super.deserialize(e,i,a),{rect:f,bitmap:d,bitmapUrl:p,bitmapId:g,isSvg:x,accessibilityData:w}=e;o?(a.addMissingCanvas(e.id,h),K(h,yx,!0)):g&&a.imageManager.isValidId(g)?(K(h,is,g),d&&K(h,fa,d)):K(h,h1,p),K(h,sl,x);const[_,A]=h.pageDimensions;return h.width=(f[2]-f[0])/_,h.height=(f[3]-f[1])/A,h.annotationElementId=e.id||null,w&&(h.altTextData=w),h._initialData=s,K(h,n3,!!s),h}serialize(e=!1,i=null){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const a={annotationType:an.STAMP,bitmapId:b(this,is),pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:b(this,sl),structTreeParentId:this._structTreeParentId};if(e)return a.bitmapUrl=it(this,Xn,dv).call(this,!0),a.accessibilityData=this.serializeAltText(!0),a.isCopy=!0,a;const{decorative:s,altText:o}=this.serializeAltText(!1);if(!s&&o&&(a.accessibilityData={type:"Figure",alt:o}),this.annotationElementId){const f=it(this,Xn,PR).call(this,a);if(f.isSame)return null;f.isSameAltText?delete a.accessibilityData:a.accessibilityData.structParent=this._initialData.structParent??-1}if(a.id=this.annotationElementId,i===null)return a;i.stamps||(i.stamps=new Map);const h=b(this,sl)?(a.rect[2]-a.rect[0])*(a.rect[3]-a.rect[1]):null;if(!i.stamps.has(b(this,is)))i.stamps.set(b(this,is),{area:h,serialized:a}),a.bitmap=it(this,Xn,dv).call(this,!1);else if(b(this,sl)){const f=i.stamps.get(b(this,is));h>f.area&&(f.area=h,f.serialized.bitmap.close(),f.serialized.bitmap=it(this,Xn,dv).call(this,!1))}return a}renderAnnotationElement(e){return e.updateEdited({rect:this.getRect(0,0)}),null}}fa=new WeakMap,is=new WeakMap,ym=new WeakMap,h1=new WeakMap,wm=new WeakMap,e3=new WeakMap,f1=new WeakMap,yx=new WeakMap,bh=new WeakMap,sl=new WeakMap,n3=new WeakMap,Xn=new WeakSet,e9=function(e,i=!1){if(!e){this.remove();return}K(this,fa,e.bitmap),i||(K(this,is,e.id),K(this,sl,e.isSvg)),e.file&&K(this,e3,e.file.name),it(this,Xn,hv).call(this)},n9=function(){if(K(this,ym,null),this._uiManager.enableWaiting(!1),!!b(this,f1)){if(this._uiManager.useNewAltTextWhenAddingImage&&this._uiManager.useNewAltTextFlow&&b(this,fa)){this._editToolbar.hide(),this._uiManager.editAltText(this,!0);return}if(!this._uiManager.useNewAltTextWhenAddingImage&&this._uiManager.useNewAltTextFlow&&b(this,fa)){this._reportTelemetry({action:"pdfjs.image.image_added",data:{alt_text_modal:!1,alt_text_type:"empty"}});try{this.mlGuessAltText()}catch{}}this.div.focus()}},uv=function(){if(b(this,is)){this._uiManager.enableWaiting(!0),this._uiManager.imageManager.getFromId(b(this,is)).then(a=>it(this,Xn,e9).call(this,a,!0)).finally(()=>it(this,Xn,n9).call(this));return}if(b(this,h1)){const a=b(this,h1);K(this,h1,null),this._uiManager.enableWaiting(!0),K(this,ym,this._uiManager.imageManager.getFromUrl(a).then(s=>it(this,Xn,e9).call(this,s)).finally(()=>it(this,Xn,n9).call(this)));return}if(b(this,wm)){const a=b(this,wm);K(this,wm,null),this._uiManager.enableWaiting(!0),K(this,ym,this._uiManager.imageManager.getFromFile(a).then(s=>it(this,Xn,e9).call(this,s)).finally(()=>it(this,Xn,n9).call(this)));return}const e=document.createElement("input");e.type="file",e.accept=Yk.join(",");const i=this._uiManager._signal;K(this,ym,new Promise(a=>{e.addEventListener("change",async()=>{if(!e.files||e.files.length===0)this.remove();else{this._uiManager.enableWaiting(!0);const s=await this._uiManager.imageManager.getFromFile(e.files[0]);this._reportTelemetry({action:"pdfjs.image.image_selected",data:{alt_text_modal:this._uiManager.useNewAltTextFlow}}),it(this,Xn,e9).call(this,s)}a()},{signal:i}),e.addEventListener("cancel",()=>{this.remove(),a()},{signal:i})}).finally(()=>it(this,Xn,n9).call(this))),e.click()},hv=function(){var g;const{div:e}=this;let{width:i,height:a}=b(this,fa);const[s,o]=this.pageDimensions,h=.75;if(this.width)i=this.width*s,a=this.height*o;else if(i>h*s||a>h*o){const x=Math.min(h*s/i,h*o/a);i*=x,a*=x}const[f,d]=this.parentDimensions;this.setDims(i*f/s,a*d/o),this._uiManager.enableWaiting(!1);const p=K(this,f1,document.createElement("canvas"));p.setAttribute("role","img"),this.addContainer(p),this.width=i/s,this.height=a/o,(g=this._initialOptions)!=null&&g.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,(!this._uiManager.useNewAltTextWhenAddingImage||!this._uiManager.useNewAltTextFlow||this.annotationElementId)&&(e.hidden=!1),it(this,Xn,a_).call(this),b(this,n3)||(this.parent.addUndoableEditor(this),K(this,n3,!0)),this._reportTelemetry({action:"inserted_image"}),b(this,e3)&&this.div.setAttribute("aria-description",b(this,e3))},fv=function(e,i){const{width:a,height:s}=b(this,fa);let o=a,h=s,f=b(this,fa);for(;o>2*e||h>2*i;){const d=o,p=h;o>2*e&&(o=o>=16384?Math.floor(o/2)-1:Math.ceil(o/2)),h>2*i&&(h=h>=16384?Math.floor(h/2)-1:Math.ceil(h/2));const g=new OffscreenCanvas(o,h);g.getContext("2d").drawImage(f,0,0,d,p,0,0,o,h),f=g.transferToImageBitmap()}return f},a_=function(){const[e,i]=this.parentDimensions,{width:a,height:s}=this,o=new v1,h=Math.ceil(a*e*o.sx),f=Math.ceil(s*i*o.sy),d=b(this,f1);if(!d||d.width===h&&d.height===f)return;d.width=h,d.height=f;const p=b(this,sl)?b(this,fa):it(this,Xn,fv).call(this,h,f),g=d.getContext("2d");g.filter=this._uiManager.hcmFilter,g.drawImage(p,0,0,p.width,p.height,0,0,h,f)},dv=function(e){if(e){if(b(this,sl)){const s=this._uiManager.imageManager.getSvgUrl(b(this,is));if(s)return s}const i=document.createElement("canvas");return{width:i.width,height:i.height}=b(this,fa),i.getContext("2d").drawImage(b(this,fa),0,0),i.toDataURL()}if(b(this,sl)){const[i,a]=this.pageDimensions,s=Math.round(this.width*i*_m.PDF_TO_CSS_UNITS),o=Math.round(this.height*a*_m.PDF_TO_CSS_UNITS),h=new OffscreenCanvas(s,o);return h.getContext("2d").drawImage(b(this,fa),0,0,b(this,fa).width,b(this,fa).height,0,0,s,o),h.transferToImageBitmap()}return structuredClone(b(this,fa))},PR=function(e){var h;const{pageIndex:i,accessibilityData:{altText:a}}=this._initialData,s=e.pageIndex===i,o=(((h=e.accessibilityData)==null?void 0:h.alt)||"")===a;return{isSame:!this._hasBeenMoved&&!this._hasBeenResized&&s&&o,isSameAltText:o}},Oe(r_,"_type","stamp"),Oe(r_,"_editorType",an.STAMP);var wx,r3,xh,vm,d1,a0,Sm,a3,vx,q0,p1,ro,g1,Re,km,pa,MR,nh,s_,o_,pv;const L0=class L0{constructor({uiManager:n,pageIndex:e,div:i,structTreeLayer:a,accessibilityManager:s,annotationLayer:o,drawLayer:h,textLayer:f,viewport:d,l10n:p}){rt(this,pa);rt(this,wx);rt(this,r3,!1);rt(this,xh,null);rt(this,vm,null);rt(this,d1,null);rt(this,a0,new Map);rt(this,Sm,!1);rt(this,a3,!1);rt(this,vx,!1);rt(this,q0,null);rt(this,p1,null);rt(this,ro,null);rt(this,g1,null);rt(this,Re);const g=[...b(L0,km).values()];if(!L0._initialized){L0._initialized=!0;for(const x of g)x.initialize(p,n)}n.registerEditorTypes(g),K(this,Re,n),this.pageIndex=e,this.div=i,K(this,wx,s),K(this,xh,o),this.viewport=d,K(this,ro,f),this.drawLayer=h,this._structTree=a,b(this,Re).addLayer(this)}get isEmpty(){return b(this,a0).size===0}get isInvisible(){return this.isEmpty&&b(this,Re).getMode()===an.NONE}updateToolbar(n){b(this,Re).updateToolbar(n)}updateMode(n=b(this,Re).getMode()){switch(it(this,pa,pv).call(this),n){case an.NONE:this.disableTextSelection(),this.togglePointerEvents(!1),this.toggleAnnotationLayerPointerEvents(!0),this.disableClick();return;case an.INK:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick();break;case an.HIGHLIGHT:this.enableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;default:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick()}this.toggleAnnotationLayerPointerEvents(!1);const{classList:e}=this.div;for(const i of b(L0,km).values())e.toggle(`${i._type}Editing`,n===i._editorType);this.div.hidden=!1}hasTextLayer(n){var e;return n===((e=b(this,ro))==null?void 0:e.div)}setEditingState(n){b(this,Re).setEditingState(n)}addCommands(n){b(this,Re).addCommands(n)}cleanUndoStack(n){b(this,Re).cleanUndoStack(n)}toggleDrawing(n=!1){this.div.classList.toggle("drawing",!n)}togglePointerEvents(n=!1){this.div.classList.toggle("disabled",!n)}toggleAnnotationLayerPointerEvents(n=!1){var e;(e=b(this,xh))==null||e.div.classList.toggle("disabled",!n)}async enable(){K(this,vx,!0),this.div.tabIndex=0,this.togglePointerEvents(!0);const n=new Set;for(const i of b(this,a0).values())i.enableEditing(),i.show(!0),i.annotationElementId&&(b(this,Re).removeChangedExistingAnnotation(i),n.add(i.annotationElementId));if(!b(this,xh)){K(this,vx,!1);return}const e=b(this,xh).getEditableAnnotations();for(const i of e){if(i.hide(),b(this,Re).isDeletedAnnotationElement(i.data.id)||n.has(i.data.id))continue;const a=await this.deserialize(i);a&&(this.addOrRebuild(a),a.enableEditing())}K(this,vx,!1)}disable(){var a;K(this,a3,!0),this.div.tabIndex=-1,this.togglePointerEvents(!1);const n=new Map,e=new Map;for(const s of b(this,a0).values())if(s.disableEditing(),!!s.annotationElementId){if(s.serialize()!==null){n.set(s.annotationElementId,s);continue}else e.set(s.annotationElementId,s);(a=this.getEditableAnnotation(s.annotationElementId))==null||a.show(),s.remove()}if(b(this,xh)){const s=b(this,xh).getEditableAnnotations();for(const o of s){const{id:h}=o.data;if(b(this,Re).isDeletedAnnotationElement(h))continue;let f=e.get(h);if(f){f.resetAnnotationElement(o),f.show(!1),o.show();continue}f=n.get(h),f&&(b(this,Re).addChangedExistingAnnotation(f),f.renderAnnotationElement(o)&&f.show(!1)),o.show()}}it(this,pa,pv).call(this),this.isEmpty&&(this.div.hidden=!0);const{classList:i}=this.div;for(const s of b(L0,km).values())i.remove(`${s._type}Editing`);this.disableTextSelection(),this.toggleAnnotationLayerPointerEvents(!0),K(this,a3,!1)}getEditableAnnotation(n){var e;return((e=b(this,xh))==null?void 0:e.getEditableAnnotation(n))||null}setActiveEditor(n){b(this,Re).getActive()!==n&&b(this,Re).setActiveEditor(n)}enableTextSelection(){var n;if(this.div.tabIndex=-1,(n=b(this,ro))!=null&&n.div&&!b(this,g1)){K(this,g1,new AbortController);const e=b(this,Re).combinedSignal(b(this,g1));b(this,ro).div.addEventListener("pointerdown",it(this,pa,MR).bind(this),{signal:e}),b(this,ro).div.classList.add("highlighting")}}disableTextSelection(){var n;this.div.tabIndex=0,(n=b(this,ro))!=null&&n.div&&b(this,g1)&&(b(this,g1).abort(),K(this,g1,null),b(this,ro).div.classList.remove("highlighting"))}enableClick(){if(b(this,vm))return;K(this,vm,new AbortController);const n=b(this,Re).combinedSignal(b(this,vm));this.div.addEventListener("pointerdown",this.pointerdown.bind(this),{signal:n});const e=this.pointerup.bind(this);this.div.addEventListener("pointerup",e,{signal:n}),this.div.addEventListener("pointercancel",e,{signal:n})}disableClick(){var n;(n=b(this,vm))==null||n.abort(),K(this,vm,null)}attach(n){b(this,a0).set(n.id,n);const{annotationElementId:e}=n;e&&b(this,Re).isDeletedAnnotationElement(e)&&b(this,Re).removeDeletedAnnotationElement(n)}detach(n){var e;b(this,a0).delete(n.id),(e=b(this,wx))==null||e.removePointerInTextLayer(n.contentDiv),!b(this,a3)&&n.annotationElementId&&b(this,Re).addDeletedAnnotationElement(n)}remove(n){this.detach(n),b(this,Re).removeEditor(n),n.div.remove(),n.isAttachedToDOM=!1}changeParent(n){var e;n.parent!==this&&(n.parent&&n.annotationElementId&&(b(this,Re).addDeletedAnnotationElement(n.annotationElementId),ga.deleteAnnotationElement(n),n.annotationElementId=null),this.attach(n),(e=n.parent)==null||e.detach(n),n.setParent(this),n.div&&n.isAttachedToDOM&&(n.div.remove(),this.div.append(n.div)))}add(n){if(!(n.parent===this&&n.isAttachedToDOM)){if(this.changeParent(n),b(this,Re).addEditor(n),this.attach(n),!n.isAttachedToDOM){const e=n.render();this.div.append(e),n.isAttachedToDOM=!0}n.fixAndSetPosition(),n.onceAdded(!b(this,vx)),b(this,Re).addToAnnotationStorage(n),n._reportTelemetry(n.telemetryInitialData)}}moveEditorInDOM(n){var i;if(!n.isAttachedToDOM)return;const{activeElement:e}=document;n.div.contains(e)&&!b(this,d1)&&(n._focusEventsAllowed=!1,K(this,d1,setTimeout(()=>{K(this,d1,null),n.div.contains(document.activeElement)?n._focusEventsAllowed=!0:(n.div.addEventListener("focusin",()=>{n._focusEventsAllowed=!0},{once:!0,signal:b(this,Re)._signal}),e.focus())},0))),n._structTreeParentId=(i=b(this,wx))==null?void 0:i.moveElementInDOM(this.div,n.div,n.contentDiv,!0)}addOrRebuild(n){n.needsToBeRebuilt()?(n.parent||(n.parent=this),n.rebuild(),n.show()):this.add(n)}addUndoableEditor(n){const e=()=>n._uiManager.rebuild(n),i=()=>{n.remove()};this.addCommands({cmd:e,undo:i,mustExec:!1})}getNextId(){return b(this,Re).getId()}combinedSignal(n){return b(this,Re).combinedSignal(n)}canCreateNewEmptyEditor(){var n;return(n=b(this,pa,nh))==null?void 0:n.canCreateNewEmptyEditor()}async pasteEditor(n,e){b(this,Re).updateToolbar(n),await b(this,Re).updateMode(n);const{offsetX:i,offsetY:a}=it(this,pa,o_).call(this),s=this.getNextId(),o=it(this,pa,s_).call(this,{parent:this,id:s,x:i,y:a,uiManager:b(this,Re),isCentered:!0,...e});o&&this.add(o)}async deserialize(n){var e;return await((e=b(L0,km).get(n.annotationType??n.annotationEditorType))==null?void 0:e.deserialize(n,this,b(this,Re)))||null}createAndAddNewEditor(n,e,i={}){const a=this.getNextId(),s=it(this,pa,s_).call(this,{parent:this,id:a,x:n.offsetX,y:n.offsetY,uiManager:b(this,Re),isCentered:e,...i});return s&&this.add(s),s}addNewEditor(n={}){this.createAndAddNewEditor(it(this,pa,o_).call(this),!0,n)}setSelected(n){b(this,Re).setSelected(n)}toggleSelected(n){b(this,Re).toggleSelected(n)}unselect(n){b(this,Re).unselect(n)}pointerup(n){var a;const{isMac:e}=Ms.platform;if(n.button!==0||n.ctrlKey&&e||n.target!==this.div||!b(this,Sm)||(K(this,Sm,!1),(a=b(this,pa,nh))!=null&&a.isDrawer&&b(this,pa,nh).supportMultipleDrawings))return;if(!b(this,r3)){K(this,r3,!0);return}const i=b(this,Re).getMode();if(i===an.STAMP||i===an.SIGNATURE){b(this,Re).unselectAll();return}this.createAndAddNewEditor(n,!1)}pointerdown(n){var a;if(b(this,Re).getMode()===an.HIGHLIGHT&&this.enableTextSelection(),b(this,Sm)){K(this,Sm,!1);return}const{isMac:e}=Ms.platform;if(n.button!==0||n.ctrlKey&&e||n.target!==this.div)return;if(K(this,Sm,!0),(a=b(this,pa,nh))!=null&&a.isDrawer){this.startDrawingSession(n);return}const i=b(this,Re).getActive();K(this,r3,!i||i.isEmpty())}startDrawingSession(n){if(this.div.focus({preventScroll:!0}),b(this,q0)){b(this,pa,nh).startDrawing(this,b(this,Re),!1,n);return}b(this,Re).setCurrentDrawingSession(this),K(this,q0,new AbortController);const e=b(this,Re).combinedSignal(b(this,q0));this.div.addEventListener("blur",({relatedTarget:i})=>{i&&!this.div.contains(i)&&(K(this,p1,null),this.commitOrRemove())},{signal:e}),b(this,pa,nh).startDrawing(this,b(this,Re),!1,n)}pause(n){if(n){const{activeElement:e}=document;this.div.contains(e)&&K(this,p1,e);return}b(this,p1)&&setTimeout(()=>{var e;(e=b(this,p1))==null||e.focus(),K(this,p1,null)},0)}endDrawingSession(n=!1){return b(this,q0)?(b(this,Re).setCurrentDrawingSession(null),b(this,q0).abort(),K(this,q0,null),K(this,p1,null),b(this,pa,nh).endDrawing(n)):null}findNewParent(n,e,i){const a=b(this,Re).findParent(e,i);return a===null||a===this?!1:(a.changeParent(n),!0)}commitOrRemove(){return b(this,q0)?(this.endDrawingSession(),!0):!1}onScaleChanging(){b(this,q0)&&b(this,pa,nh).onScaleChangingWhenDrawing(this)}destroy(){var n,e;this.commitOrRemove(),((n=b(this,Re).getActive())==null?void 0:n.parent)===this&&(b(this,Re).commitOrRemove(),b(this,Re).setActiveEditor(null)),b(this,d1)&&(clearTimeout(b(this,d1)),K(this,d1,null));for(const i of b(this,a0).values())(e=b(this,wx))==null||e.removePointerInTextLayer(i.contentDiv),i.setParent(null),i.isAttachedToDOM=!1,i.div.remove();this.div=null,b(this,a0).clear(),b(this,Re).removeLayer(this)}render({viewport:n}){this.viewport=n,kx(this.div,n);for(const e of b(this,Re).getEditors(this.pageIndex))this.add(e),e.rebuild();this.updateMode()}update({viewport:n}){b(this,Re).commitOrRemove(),it(this,pa,pv).call(this);const e=this.viewport.rotation,i=n.rotation;if(this.viewport=n,kx(this.div,{rotation:i}),e!==i)for(const a of b(this,a0).values())a.rotate(i)}get pageDimensions(){const{pageWidth:n,pageHeight:e}=this.viewport.rawDims;return[n,e]}get scale(){return b(this,Re).viewParameters.realScale}};wx=new WeakMap,r3=new WeakMap,xh=new WeakMap,vm=new WeakMap,d1=new WeakMap,a0=new WeakMap,Sm=new WeakMap,a3=new WeakMap,vx=new WeakMap,q0=new WeakMap,p1=new WeakMap,ro=new WeakMap,g1=new WeakMap,Re=new WeakMap,km=new WeakMap,pa=new WeakSet,MR=function(n){b(this,Re).unselectAll();const{target:e}=n;if(e===b(this,ro).div||(e.getAttribute("role")==="img"||e.classList.contains("endOfContent"))&&b(this,ro).div.contains(e)){const{isMac:i}=Ms.platform;if(n.button!==0||n.ctrlKey&&i)return;b(this,Re).showAllEditors("highlight",!0,!0),b(this,ro).div.classList.add("free"),this.toggleDrawing(),kv.startHighlighting(this,b(this,Re).direction==="ltr",{target:b(this,ro).div,x:n.x,y:n.y}),b(this,ro).div.addEventListener("pointerup",()=>{b(this,ro).div.classList.remove("free"),this.toggleDrawing(!0)},{once:!0,signal:b(this,Re)._signal}),n.preventDefault()}},nh=function(){return b(L0,km).get(b(this,Re).getMode())},s_=function(n){const e=b(this,pa,nh);return e?new e.prototype.constructor(n):null},o_=function(){const{x:n,y:e,width:i,height:a}=this.div.getBoundingClientRect(),s=Math.max(0,n),o=Math.max(0,e),h=Math.min(window.innerWidth,n+i),f=Math.min(window.innerHeight,e+a),d=(s+h)/2-n,p=(o+f)/2-e,[g,x]=this.viewport.rotation%180===0?[d,p]:[p,d];return{offsetX:g,offsetY:x}},pv=function(){for(const n of b(this,a0).values())n.isEmpty()&&n.remove()},Oe(L0,"_initialized",!1),rt(L0,km,new Map([NA,YA,r_,kv,n_].map(n=>[n._editorType,n])));let i_=L0;var V0,Do,Sx,E5,Xv,DR,yh,l_,RR,u_;const Ci=class Ci{constructor({pageIndex:n}){rt(this,yh);rt(this,V0,null);rt(this,Do,new Map);rt(this,Sx,new Map);this.pageIndex=n}setParent(n){if(!b(this,V0)){K(this,V0,n);return}if(b(this,V0)!==n){if(b(this,Do).size>0)for(const e of b(this,Do).values())e.remove(),n.append(e);K(this,V0,n)}}static get _svgFactory(){return Cn(this,"_svgFactory",new wv)}draw(n,e=!1,i=!1){const a=io(Ci,E5)._++,s=it(this,yh,l_).call(this),o=Ci._svgFactory.createElement("defs");s.append(o);const h=Ci._svgFactory.createElement("path");o.append(h);const f=`path_p${this.pageIndex}_${a}`;h.setAttribute("id",f),h.setAttribute("vector-effect","non-scaling-stroke"),e&&b(this,Sx).set(a,h);const d=i?it(this,yh,RR).call(this,o,f):null,p=Ci._svgFactory.createElement("use");return s.append(p),p.setAttribute("href",`#${f}`),this.updateProperties(s,n),b(this,Do).set(a,s),{id:a,clipPathId:`url(#${d})`}}drawOutline(n,e){const i=io(Ci,E5)._++,a=it(this,yh,l_).call(this),s=Ci._svgFactory.createElement("defs");a.append(s);const o=Ci._svgFactory.createElement("path");s.append(o);const h=`path_p${this.pageIndex}_${i}`;o.setAttribute("id",h),o.setAttribute("vector-effect","non-scaling-stroke");let f;if(e){const g=Ci._svgFactory.createElement("mask");s.append(g),f=`mask_p${this.pageIndex}_${i}`,g.setAttribute("id",f),g.setAttribute("maskUnits","objectBoundingBox");const x=Ci._svgFactory.createElement("rect");g.append(x),x.setAttribute("width","1"),x.setAttribute("height","1"),x.setAttribute("fill","white");const w=Ci._svgFactory.createElement("use");g.append(w),w.setAttribute("href",`#${h}`),w.setAttribute("stroke","none"),w.setAttribute("fill","black"),w.setAttribute("fill-rule","nonzero"),w.classList.add("mask")}const d=Ci._svgFactory.createElement("use");a.append(d),d.setAttribute("href",`#${h}`),f&&d.setAttribute("mask",`url(#${f})`);const p=d.cloneNode();return a.append(p),d.classList.add("mainOutline"),p.classList.add("secondaryOutline"),this.updateProperties(a,n),b(this,Do).set(i,a),i}finalizeDraw(n,e){b(this,Sx).delete(n),this.updateProperties(n,e)}updateProperties(n,e){var f;if(!e)return;const{root:i,bbox:a,rootClass:s,path:o}=e,h=typeof n=="number"?b(this,Do).get(n):n;if(h){if(i&&it(this,yh,u_).call(this,h,i),a&&it(f=Ci,Xv,DR).call(f,h,a),s){const{classList:d}=h;for(const[p,g]of Object.entries(s))d.toggle(p,g)}if(o){const p=h.firstChild.firstChild;it(this,yh,u_).call(this,p,o)}}}updateParent(n,e){if(e===this)return;const i=b(this,Do).get(n);i&&(b(e,V0).append(i),b(this,Do).delete(n),b(e,Do).set(n,i))}remove(n){b(this,Sx).delete(n),b(this,V0)!==null&&(b(this,Do).get(n).remove(),b(this,Do).delete(n))}destroy(){K(this,V0,null);for(const n of b(this,Do).values())n.remove();b(this,Do).clear(),b(this,Sx).clear()}};V0=new WeakMap,Do=new WeakMap,Sx=new WeakMap,E5=new WeakMap,Xv=new WeakSet,DR=function(n,[e,i,a,s]){const{style:o}=n;o.top=`${100*i}%`,o.left=`${100*e}%`,o.width=`${100*a}%`,o.height=`${100*s}%`},yh=new WeakSet,l_=function(){const n=Ci._svgFactory.create(1,1,!0);return b(this,V0).append(n),n.setAttribute("aria-hidden",!0),n},RR=function(n,e){const i=Ci._svgFactory.createElement("clipPath");n.append(i);const a=`clip_${e}`;i.setAttribute("id",a),i.setAttribute("clipPathUnits","objectBoundingBox");const s=Ci._svgFactory.createElement("use");return i.append(s),s.setAttribute("href",`#${e}`),s.classList.add("clip"),a},u_=function(n,e){for(const[i,a]of Object.entries(e))a===null?n.removeAttribute(i):n.setAttribute(i,a)},rt(Ci,Xv),rt(Ci,E5,0);let c_=Ci;globalThis.pdfjsTestingUtils={HighlightOutliner:BA};Ke.AbortException;Ke.AnnotationEditorLayer;Ke.AnnotationEditorParamsType;Ke.AnnotationEditorType;Ke.AnnotationEditorUIManager;Ke.AnnotationLayer;Ke.AnnotationMode;Ke.AnnotationType;Ke.ColorPicker;Ke.DOMSVGFactory;Ke.DrawLayer;Ke.FeatureTest;var TB=Ke.GlobalWorkerOptions;Ke.ImageKind;Ke.InvalidPDFException;Ke.MathClamp;Ke.OPS;Ke.OutputScale;Ke.PDFDataRangeTransport;Ke.PDFDateString;Ke.PDFWorker;Ke.PasswordResponses;Ke.PermissionFlag;Ke.PixelsPerInch;Ke.RenderingCancelledException;Ke.ResponseException;Ke.SignatureExtractor;Ke.SupportedImageMimeTypes;Ke.TextLayer;Ke.TouchManager;Ke.Util;Ke.VerbosityLevel;Ke.XfaLayer;Ke.build;Ke.createValidAbsoluteUrl;Ke.fetchData;var EB=Ke.getDocument;Ke.getFilenameFromUrl;Ke.getPdfFilenameFromUrl;Ke.getUuid;Ke.getXfaPageViewport;Ke.isDataScheme;Ke.isPdfFile;Ke.isValidExplicitDest;Ke.noContextMenu;Ke.normalizeUnicode;Ke.setLayerDimensions;Ke.shadow;Ke.stopEvent;Ke.version;const OB=`/**
 * @licstart The following is the entire license notice for the
 * JavaScript code in this page
 *
 * Copyright 2024 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @licend The above is the entire license notice for the
 * JavaScript code in this page
 */

/******/ // The require scope
/******/ var __webpack_require__ = {};
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = globalThis.pdfjsWorker = {};

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  WorkerMessageHandler: () => (/* reexport */ WorkerMessageHandler)
});

;// ./src/shared/util.js
const isNodeJS = typeof process === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
const LINE_FACTOR = 1.35;
const LINE_DESCENT_FACTOR = 0.35;
const BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;
const RenderingIntentFlag = {
  ANY: 0x01,
  DISPLAY: 0x02,
  PRINT: 0x04,
  SAVE: 0x08,
  ANNOTATIONS_FORMS: 0x10,
  ANNOTATIONS_STORAGE: 0x20,
  ANNOTATIONS_DISABLE: 0x40,
  IS_EDITING: 0x80,
  OPLIST: 0x100
};
const AnnotationMode = {
  DISABLE: 0,
  ENABLE: 1,
  ENABLE_FORMS: 2,
  ENABLE_STORAGE: 3
};
const AnnotationEditorPrefix = "pdfjs_internal_editor_";
const AnnotationEditorType = {
  DISABLE: -1,
  NONE: 0,
  FREETEXT: 3,
  HIGHLIGHT: 9,
  STAMP: 13,
  INK: 15,
  SIGNATURE: 101
};
const AnnotationEditorParamsType = {
  RESIZE: 1,
  CREATE: 2,
  FREETEXT_SIZE: 11,
  FREETEXT_COLOR: 12,
  FREETEXT_OPACITY: 13,
  INK_COLOR: 21,
  INK_THICKNESS: 22,
  INK_OPACITY: 23,
  HIGHLIGHT_COLOR: 31,
  HIGHLIGHT_DEFAULT_COLOR: 32,
  HIGHLIGHT_THICKNESS: 33,
  HIGHLIGHT_FREE: 34,
  HIGHLIGHT_SHOW_ALL: 35,
  DRAW_STEP: 41
};
const PermissionFlag = {
  PRINT: 0x04,
  MODIFY_CONTENTS: 0x08,
  COPY: 0x10,
  MODIFY_ANNOTATIONS: 0x20,
  FILL_INTERACTIVE_FORMS: 0x100,
  COPY_FOR_ACCESSIBILITY: 0x200,
  ASSEMBLE: 0x400,
  PRINT_HIGH_QUALITY: 0x800
};
const TextRenderingMode = {
  FILL: 0,
  STROKE: 1,
  FILL_STROKE: 2,
  INVISIBLE: 3,
  FILL_ADD_TO_PATH: 4,
  STROKE_ADD_TO_PATH: 5,
  FILL_STROKE_ADD_TO_PATH: 6,
  ADD_TO_PATH: 7,
  FILL_STROKE_MASK: 3,
  ADD_TO_PATH_FLAG: 4
};
const ImageKind = {
  GRAYSCALE_1BPP: 1,
  RGB_24BPP: 2,
  RGBA_32BPP: 3
};
const AnnotationType = {
  TEXT: 1,
  LINK: 2,
  FREETEXT: 3,
  LINE: 4,
  SQUARE: 5,
  CIRCLE: 6,
  POLYGON: 7,
  POLYLINE: 8,
  HIGHLIGHT: 9,
  UNDERLINE: 10,
  SQUIGGLY: 11,
  STRIKEOUT: 12,
  STAMP: 13,
  CARET: 14,
  INK: 15,
  POPUP: 16,
  FILEATTACHMENT: 17,
  SOUND: 18,
  MOVIE: 19,
  WIDGET: 20,
  SCREEN: 21,
  PRINTERMARK: 22,
  TRAPNET: 23,
  WATERMARK: 24,
  THREED: 25,
  REDACT: 26
};
const AnnotationReplyType = {
  GROUP: "Group",
  REPLY: "R"
};
const AnnotationFlag = {
  INVISIBLE: 0x01,
  HIDDEN: 0x02,
  PRINT: 0x04,
  NOZOOM: 0x08,
  NOROTATE: 0x10,
  NOVIEW: 0x20,
  READONLY: 0x40,
  LOCKED: 0x80,
  TOGGLENOVIEW: 0x100,
  LOCKEDCONTENTS: 0x200
};
const AnnotationFieldFlag = {
  READONLY: 0x0000001,
  REQUIRED: 0x0000002,
  NOEXPORT: 0x0000004,
  MULTILINE: 0x0001000,
  PASSWORD: 0x0002000,
  NOTOGGLETOOFF: 0x0004000,
  RADIO: 0x0008000,
  PUSHBUTTON: 0x0010000,
  COMBO: 0x0020000,
  EDIT: 0x0040000,
  SORT: 0x0080000,
  FILESELECT: 0x0100000,
  MULTISELECT: 0x0200000,
  DONOTSPELLCHECK: 0x0400000,
  DONOTSCROLL: 0x0800000,
  COMB: 0x1000000,
  RICHTEXT: 0x2000000,
  RADIOSINUNISON: 0x2000000,
  COMMITONSELCHANGE: 0x4000000
};
const AnnotationBorderStyleType = {
  SOLID: 1,
  DASHED: 2,
  BEVELED: 3,
  INSET: 4,
  UNDERLINE: 5
};
const AnnotationActionEventType = {
  E: "Mouse Enter",
  X: "Mouse Exit",
  D: "Mouse Down",
  U: "Mouse Up",
  Fo: "Focus",
  Bl: "Blur",
  PO: "PageOpen",
  PC: "PageClose",
  PV: "PageVisible",
  PI: "PageInvisible",
  K: "Keystroke",
  F: "Format",
  V: "Validate",
  C: "Calculate"
};
const DocumentActionEventType = {
  WC: "WillClose",
  WS: "WillSave",
  DS: "DidSave",
  WP: "WillPrint",
  DP: "DidPrint"
};
const PageActionEventType = {
  O: "PageOpen",
  C: "PageClose"
};
const VerbosityLevel = {
  ERRORS: 0,
  WARNINGS: 1,
  INFOS: 5
};
const OPS = {
  dependency: 1,
  setLineWidth: 2,
  setLineCap: 3,
  setLineJoin: 4,
  setMiterLimit: 5,
  setDash: 6,
  setRenderingIntent: 7,
  setFlatness: 8,
  setGState: 9,
  save: 10,
  restore: 11,
  transform: 12,
  moveTo: 13,
  lineTo: 14,
  curveTo: 15,
  curveTo2: 16,
  curveTo3: 17,
  closePath: 18,
  rectangle: 19,
  stroke: 20,
  closeStroke: 21,
  fill: 22,
  eoFill: 23,
  fillStroke: 24,
  eoFillStroke: 25,
  closeFillStroke: 26,
  closeEOFillStroke: 27,
  endPath: 28,
  clip: 29,
  eoClip: 30,
  beginText: 31,
  endText: 32,
  setCharSpacing: 33,
  setWordSpacing: 34,
  setHScale: 35,
  setLeading: 36,
  setFont: 37,
  setTextRenderingMode: 38,
  setTextRise: 39,
  moveText: 40,
  setLeadingMoveText: 41,
  setTextMatrix: 42,
  nextLine: 43,
  showText: 44,
  showSpacedText: 45,
  nextLineShowText: 46,
  nextLineSetSpacingShowText: 47,
  setCharWidth: 48,
  setCharWidthAndBounds: 49,
  setStrokeColorSpace: 50,
  setFillColorSpace: 51,
  setStrokeColor: 52,
  setStrokeColorN: 53,
  setFillColor: 54,
  setFillColorN: 55,
  setStrokeGray: 56,
  setFillGray: 57,
  setStrokeRGBColor: 58,
  setFillRGBColor: 59,
  setStrokeCMYKColor: 60,
  setFillCMYKColor: 61,
  shadingFill: 62,
  beginInlineImage: 63,
  beginImageData: 64,
  endInlineImage: 65,
  paintXObject: 66,
  markPoint: 67,
  markPointProps: 68,
  beginMarkedContent: 69,
  beginMarkedContentProps: 70,
  endMarkedContent: 71,
  beginCompat: 72,
  endCompat: 73,
  paintFormXObjectBegin: 74,
  paintFormXObjectEnd: 75,
  beginGroup: 76,
  endGroup: 77,
  beginAnnotation: 80,
  endAnnotation: 81,
  paintImageMaskXObject: 83,
  paintImageMaskXObjectGroup: 84,
  paintImageXObject: 85,
  paintInlineImageXObject: 86,
  paintInlineImageXObjectGroup: 87,
  paintImageXObjectRepeat: 88,
  paintImageMaskXObjectRepeat: 89,
  paintSolidColorImageMask: 90,
  constructPath: 91,
  setStrokeTransparent: 92,
  setFillTransparent: 93
};
const DrawOPS = {
  moveTo: 0,
  lineTo: 1,
  curveTo: 2,
  closePath: 3
};
const PasswordResponses = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};
let verbosity = VerbosityLevel.WARNINGS;
function setVerbosityLevel(level) {
  if (Number.isInteger(level)) {
    verbosity = level;
  }
}
function getVerbosityLevel() {
  return verbosity;
}
function info(msg) {
  if (verbosity >= VerbosityLevel.INFOS) {
    console.log(\`Info: \${msg}\`);
  }
}
function warn(msg) {
  if (verbosity >= VerbosityLevel.WARNINGS) {
    console.log(\`Warning: \${msg}\`);
  }
}
function unreachable(msg) {
  throw new Error(msg);
}
function assert(cond, msg) {
  if (!cond) {
    unreachable(msg);
  }
}
function _isValidProtocol(url) {
  switch (url?.protocol) {
    case "http:":
    case "https:":
    case "ftp:":
    case "mailto:":
    case "tel:":
      return true;
    default:
      return false;
  }
}
function createValidAbsoluteUrl(url, baseUrl = null, options = null) {
  if (!url) {
    return null;
  }
  if (options && typeof url === "string") {
    if (options.addDefaultProtocol && url.startsWith("www.")) {
      const dots = url.match(/\\./g);
      if (dots?.length >= 2) {
        url = \`http://\${url}\`;
      }
    }
    if (options.tryConvertEncoding) {
      try {
        url = stringToUTF8String(url);
      } catch {}
    }
  }
  const absoluteUrl = baseUrl ? URL.parse(url, baseUrl) : URL.parse(url);
  return _isValidProtocol(absoluteUrl) ? absoluteUrl : null;
}
function shadow(obj, prop, value, nonSerializable = false) {
  Object.defineProperty(obj, prop, {
    value,
    enumerable: !nonSerializable,
    configurable: true,
    writable: false
  });
  return value;
}
const BaseException = function BaseExceptionClosure() {
  function BaseException(message, name) {
    this.message = message;
    this.name = name;
  }
  BaseException.prototype = new Error();
  BaseException.constructor = BaseException;
  return BaseException;
}();
class PasswordException extends BaseException {
  constructor(msg, code) {
    super(msg, "PasswordException");
    this.code = code;
  }
}
class UnknownErrorException extends BaseException {
  constructor(msg, details) {
    super(msg, "UnknownErrorException");
    this.details = details;
  }
}
class InvalidPDFException extends BaseException {
  constructor(msg) {
    super(msg, "InvalidPDFException");
  }
}
class ResponseException extends BaseException {
  constructor(msg, status, missing) {
    super(msg, "ResponseException");
    this.status = status;
    this.missing = missing;
  }
}
class FormatError extends BaseException {
  constructor(msg) {
    super(msg, "FormatError");
  }
}
class AbortException extends BaseException {
  constructor(msg) {
    super(msg, "AbortException");
  }
}
function bytesToString(bytes) {
  if (typeof bytes !== "object" || bytes?.length === undefined) {
    unreachable("Invalid argument for bytesToString");
  }
  const length = bytes.length;
  const MAX_ARGUMENT_COUNT = 8192;
  if (length < MAX_ARGUMENT_COUNT) {
    return String.fromCharCode.apply(null, bytes);
  }
  const strBuf = [];
  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
    const chunk = bytes.subarray(i, chunkEnd);
    strBuf.push(String.fromCharCode.apply(null, chunk));
  }
  return strBuf.join("");
}
function stringToBytes(str) {
  if (typeof str !== "string") {
    unreachable("Invalid argument for stringToBytes");
  }
  const length = str.length;
  const bytes = new Uint8Array(length);
  for (let i = 0; i < length; ++i) {
    bytes[i] = str.charCodeAt(i) & 0xff;
  }
  return bytes;
}
function string32(value) {
  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
}
function objectSize(obj) {
  return Object.keys(obj).length;
}
function objectFromMap(map) {
  const obj = Object.create(null);
  for (const [key, value] of map) {
    obj[key] = value;
  }
  return obj;
}
function isLittleEndian() {
  const buffer8 = new Uint8Array(4);
  buffer8[0] = 1;
  const view32 = new Uint32Array(buffer8.buffer, 0, 1);
  return view32[0] === 1;
}
function isEvalSupported() {
  try {
    new Function("");
    return true;
  } catch {
    return false;
  }
}
class FeatureTest {
  static get isLittleEndian() {
    return shadow(this, "isLittleEndian", isLittleEndian());
  }
  static get isEvalSupported() {
    return shadow(this, "isEvalSupported", isEvalSupported());
  }
  static get isOffscreenCanvasSupported() {
    return shadow(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas !== "undefined");
  }
  static get isImageDecoderSupported() {
    return shadow(this, "isImageDecoderSupported", typeof ImageDecoder !== "undefined");
  }
  static get platform() {
    if (typeof navigator !== "undefined" && typeof navigator?.platform === "string" && typeof navigator?.userAgent === "string") {
      const {
        platform,
        userAgent
      } = navigator;
      return shadow(this, "platform", {
        isAndroid: userAgent.includes("Android"),
        isLinux: platform.includes("Linux"),
        isMac: platform.includes("Mac"),
        isWindows: platform.includes("Win"),
        isFirefox: userAgent.includes("Firefox")
      });
    }
    return shadow(this, "platform", {
      isAndroid: false,
      isLinux: false,
      isMac: false,
      isWindows: false,
      isFirefox: false
    });
  }
  static get isCSSRoundSupported() {
    return shadow(this, "isCSSRoundSupported", globalThis.CSS?.supports?.("width: round(1.5px, 1px)"));
  }
}
const hexNumbers = Array.from(Array(256).keys(), n => n.toString(16).padStart(2, "0"));
class Util {
  static makeHexColor(r, g, b) {
    return \`#\${hexNumbers[r]}\${hexNumbers[g]}\${hexNumbers[b]}\`;
  }
  static transform(m1, m2) {
    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
  }
  static applyTransform(p, m) {
    const xt = p[0] * m[0] + p[1] * m[2] + m[4];
    const yt = p[0] * m[1] + p[1] * m[3] + m[5];
    return [xt, yt];
  }
  static applyInverseTransform(p, m) {
    const d = m[0] * m[3] - m[1] * m[2];
    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
    return [xt, yt];
  }
  static getAxialAlignedBoundingBox(r, m) {
    const p1 = this.applyTransform(r, m);
    const p2 = this.applyTransform(r.slice(2, 4), m);
    const p3 = this.applyTransform([r[0], r[3]], m);
    const p4 = this.applyTransform([r[2], r[1]], m);
    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
  }
  static inverseTransform(m) {
    const d = m[0] * m[3] - m[1] * m[2];
    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
  }
  static singularValueDecompose2dScale(m) {
    const transpose = [m[0], m[2], m[1], m[3]];
    const a = m[0] * transpose[0] + m[1] * transpose[2];
    const b = m[0] * transpose[1] + m[1] * transpose[3];
    const c = m[2] * transpose[0] + m[3] * transpose[2];
    const d = m[2] * transpose[1] + m[3] * transpose[3];
    const first = (a + d) / 2;
    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;
    const sx = first + second || 1;
    const sy = first - second || 1;
    return [Math.sqrt(sx), Math.sqrt(sy)];
  }
  static normalizeRect(rect) {
    const r = rect.slice(0);
    if (rect[0] > rect[2]) {
      r[0] = rect[2];
      r[2] = rect[0];
    }
    if (rect[1] > rect[3]) {
      r[1] = rect[3];
      r[3] = rect[1];
    }
    return r;
  }
  static intersect(rect1, rect2) {
    const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));
    const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));
    if (xLow > xHigh) {
      return null;
    }
    const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));
    const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));
    if (yLow > yHigh) {
      return null;
    }
    return [xLow, yLow, xHigh, yHigh];
  }
  static pointBoundingBox(x, y, minMax) {
    minMax[0] = Math.min(minMax[0], x);
    minMax[1] = Math.min(minMax[1], y);
    minMax[2] = Math.max(minMax[2], x);
    minMax[3] = Math.max(minMax[3], y);
  }
  static rectBoundingBox(x0, y0, x1, y1, minMax) {
    minMax[0] = Math.min(minMax[0], x0, x1);
    minMax[1] = Math.min(minMax[1], y0, y1);
    minMax[2] = Math.max(minMax[2], x0, x1);
    minMax[3] = Math.max(minMax[3], y0, y1);
  }
  static #getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, t, minMax) {
    if (t <= 0 || t >= 1) {
      return;
    }
    const mt = 1 - t;
    const tt = t * t;
    const ttt = tt * t;
    const x = mt * (mt * (mt * x0 + 3 * t * x1) + 3 * tt * x2) + ttt * x3;
    const y = mt * (mt * (mt * y0 + 3 * t * y1) + 3 * tt * y2) + ttt * y3;
    minMax[0] = Math.min(minMax[0], x);
    minMax[1] = Math.min(minMax[1], y);
    minMax[2] = Math.max(minMax[2], x);
    minMax[3] = Math.max(minMax[3], y);
  }
  static #getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, a, b, c, minMax) {
    if (Math.abs(a) < 1e-12) {
      if (Math.abs(b) >= 1e-12) {
        this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, -c / b, minMax);
      }
      return;
    }
    const delta = b ** 2 - 4 * c * a;
    if (delta < 0) {
      return;
    }
    const sqrtDelta = Math.sqrt(delta);
    const a2 = 2 * a;
    this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, (-b + sqrtDelta) / a2, minMax);
    this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, (-b - sqrtDelta) / a2, minMax);
  }
  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3, minMax) {
    minMax[0] = Math.min(minMax[0], x0, x3);
    minMax[1] = Math.min(minMax[1], y0, y3);
    minMax[2] = Math.max(minMax[2], x0, x3);
    minMax[3] = Math.max(minMax[3], y0, y3);
    this.#getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-x0 + 3 * (x1 - x2) + x3), 6 * (x0 - 2 * x1 + x2), 3 * (x1 - x0), minMax);
    this.#getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-y0 + 3 * (y1 - y2) + y3), 6 * (y0 - 2 * y1 + y2), 3 * (y1 - y0), minMax);
  }
}
const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];
function stringToPDFString(str) {
  if (str[0] >= "\\xEF") {
    let encoding;
    if (str[0] === "\\xFE" && str[1] === "\\xFF") {
      encoding = "utf-16be";
      if (str.length % 2 === 1) {
        str = str.slice(0, -1);
      }
    } else if (str[0] === "\\xFF" && str[1] === "\\xFE") {
      encoding = "utf-16le";
      if (str.length % 2 === 1) {
        str = str.slice(0, -1);
      }
    } else if (str[0] === "\\xEF" && str[1] === "\\xBB" && str[2] === "\\xBF") {
      encoding = "utf-8";
    }
    if (encoding) {
      try {
        const decoder = new TextDecoder(encoding, {
          fatal: true
        });
        const buffer = stringToBytes(str);
        const decoded = decoder.decode(buffer);
        if (!decoded.includes("\\x1b")) {
          return decoded;
        }
        return decoded.replaceAll(/\\x1b[^\\x1b]*(?:\\x1b|$)/g, "");
      } catch (ex) {
        warn(\`stringToPDFString: "\${ex}".\`);
      }
    }
  }
  const strBuf = [];
  for (let i = 0, ii = str.length; i < ii; i++) {
    const charCode = str.charCodeAt(i);
    if (charCode === 0x1b) {
      while (++i < ii && str.charCodeAt(i) !== 0x1b) {}
      continue;
    }
    const code = PDFStringTranslateTable[charCode];
    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
  }
  return strBuf.join("");
}
function stringToUTF8String(str) {
  return decodeURIComponent(escape(str));
}
function utf8StringToString(str) {
  return unescape(encodeURIComponent(str));
}
function isArrayEqual(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  for (let i = 0, ii = arr1.length; i < ii; i++) {
    if (arr1[i] !== arr2[i]) {
      return false;
    }
  }
  return true;
}
function getModificationDate(date = new Date()) {
  const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
  return buffer.join("");
}
let NormalizeRegex = null;
let NormalizationMap = null;
function normalizeUnicode(str) {
  if (!NormalizeRegex) {
    NormalizeRegex = /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;
    NormalizationMap = new Map([["ﬅ", "ſt"]]);
  }
  return str.replaceAll(NormalizeRegex, (_, p1, p2) => p1 ? p1.normalize("NFKC") : NormalizationMap.get(p2));
}
function getUuid() {
  if (typeof crypto.randomUUID === "function") {
    return crypto.randomUUID();
  }
  const buf = new Uint8Array(32);
  crypto.getRandomValues(buf);
  return bytesToString(buf);
}
const AnnotationPrefix = "pdfjs_internal_id_";
function _isValidExplicitDest(validRef, validName, dest) {
  if (!Array.isArray(dest) || dest.length < 2) {
    return false;
  }
  const [page, zoom, ...args] = dest;
  if (!validRef(page) && !Number.isInteger(page)) {
    return false;
  }
  if (!validName(zoom)) {
    return false;
  }
  const argsLen = args.length;
  let allowNull = true;
  switch (zoom.name) {
    case "XYZ":
      if (argsLen < 2 || argsLen > 3) {
        return false;
      }
      break;
    case "Fit":
    case "FitB":
      return argsLen === 0;
    case "FitH":
    case "FitBH":
    case "FitV":
    case "FitBV":
      if (argsLen > 1) {
        return false;
      }
      break;
    case "FitR":
      if (argsLen !== 4) {
        return false;
      }
      allowNull = false;
      break;
    default:
      return false;
  }
  for (const arg of args) {
    if (typeof arg === "number" || allowNull && arg === null) {
      continue;
    }
    return false;
  }
  return true;
}
function MathClamp(v, min, max) {
  return Math.min(Math.max(v, min), max);
}
function toHexUtil(arr) {
  if (Uint8Array.prototype.toHex) {
    return arr.toHex();
  }
  return Array.from(arr, num => hexNumbers[num]).join("");
}
function toBase64Util(arr) {
  if (Uint8Array.prototype.toBase64) {
    return arr.toBase64();
  }
  return btoa(bytesToString(arr));
}
function fromBase64Util(str) {
  if (Uint8Array.fromBase64) {
    return Uint8Array.fromBase64(str);
  }
  return stringToBytes(atob(str));
}
if (typeof Promise.try !== "function") {
  Promise.try = function (fn, ...args) {
    return new Promise(resolve => {
      resolve(fn(...args));
    });
  };
}
if (typeof Math.sumPrecise !== "function") {
  Math.sumPrecise = function (numbers) {
    return numbers.reduce((a, b) => a + b, 0);
  };
}

;// ./src/core/primitives.js

const CIRCULAR_REF = Symbol("CIRCULAR_REF");
const EOF = Symbol("EOF");
let CmdCache = Object.create(null);
let NameCache = Object.create(null);
let RefCache = Object.create(null);
function clearPrimitiveCaches() {
  CmdCache = Object.create(null);
  NameCache = Object.create(null);
  RefCache = Object.create(null);
}
class Name {
  constructor(name) {
    this.name = name;
  }
  static get(name) {
    return NameCache[name] ||= new Name(name);
  }
}
class Cmd {
  constructor(cmd) {
    this.cmd = cmd;
  }
  static get(cmd) {
    return CmdCache[cmd] ||= new Cmd(cmd);
  }
}
const nonSerializable = function nonSerializableClosure() {
  return nonSerializable;
};
class Dict {
  constructor(xref = null) {
    this._map = new Map();
    this.xref = xref;
    this.objId = null;
    this.suppressEncryption = false;
    this.__nonSerializable__ = nonSerializable;
  }
  assignXref(newXref) {
    this.xref = newXref;
  }
  get size() {
    return this._map.size;
  }
  get(key1, key2, key3) {
    let value = this._map.get(key1);
    if (value === undefined && key2 !== undefined) {
      value = this._map.get(key2);
      if (value === undefined && key3 !== undefined) {
        value = this._map.get(key3);
      }
    }
    if (value instanceof Ref && this.xref) {
      return this.xref.fetch(value, this.suppressEncryption);
    }
    return value;
  }
  async getAsync(key1, key2, key3) {
    let value = this._map.get(key1);
    if (value === undefined && key2 !== undefined) {
      value = this._map.get(key2);
      if (value === undefined && key3 !== undefined) {
        value = this._map.get(key3);
      }
    }
    if (value instanceof Ref && this.xref) {
      return this.xref.fetchAsync(value, this.suppressEncryption);
    }
    return value;
  }
  getArray(key1, key2, key3) {
    let value = this._map.get(key1);
    if (value === undefined && key2 !== undefined) {
      value = this._map.get(key2);
      if (value === undefined && key3 !== undefined) {
        value = this._map.get(key3);
      }
    }
    if (value instanceof Ref && this.xref) {
      value = this.xref.fetch(value, this.suppressEncryption);
    }
    if (Array.isArray(value)) {
      value = value.slice();
      for (let i = 0, ii = value.length; i < ii; i++) {
        if (value[i] instanceof Ref && this.xref) {
          value[i] = this.xref.fetch(value[i], this.suppressEncryption);
        }
      }
    }
    return value;
  }
  getRaw(key) {
    return this._map.get(key);
  }
  getKeys() {
    return [...this._map.keys()];
  }
  getRawValues() {
    return [...this._map.values()];
  }
  set(key, value) {
    this._map.set(key, value);
  }
  has(key) {
    return this._map.has(key);
  }
  *[Symbol.iterator]() {
    for (const [key, value] of this._map) {
      yield [key, value instanceof Ref && this.xref ? this.xref.fetch(value, this.suppressEncryption) : value];
    }
  }
  static get empty() {
    const emptyDict = new Dict(null);
    emptyDict.set = (key, value) => {
      unreachable("Should not call \`set\` on the empty dictionary.");
    };
    return shadow(this, "empty", emptyDict);
  }
  static merge({
    xref,
    dictArray,
    mergeSubDicts = false
  }) {
    const mergedDict = new Dict(xref),
      properties = new Map();
    for (const dict of dictArray) {
      if (!(dict instanceof Dict)) {
        continue;
      }
      for (const [key, value] of dict._map) {
        let property = properties.get(key);
        if (property === undefined) {
          property = [];
          properties.set(key, property);
        } else if (!mergeSubDicts || !(value instanceof Dict)) {
          continue;
        }
        property.push(value);
      }
    }
    for (const [name, values] of properties) {
      if (values.length === 1 || !(values[0] instanceof Dict)) {
        mergedDict._map.set(name, values[0]);
        continue;
      }
      const subDict = new Dict(xref);
      for (const dict of values) {
        for (const [key, value] of dict._map) {
          if (!subDict._map.has(key)) {
            subDict._map.set(key, value);
          }
        }
      }
      if (subDict.size > 0) {
        mergedDict._map.set(name, subDict);
      }
    }
    properties.clear();
    return mergedDict.size > 0 ? mergedDict : Dict.empty;
  }
  clone() {
    const dict = new Dict(this.xref);
    for (const key of this.getKeys()) {
      dict.set(key, this.getRaw(key));
    }
    return dict;
  }
  delete(key) {
    delete this._map[key];
  }
}
class Ref {
  constructor(num, gen) {
    this.num = num;
    this.gen = gen;
  }
  toString() {
    if (this.gen === 0) {
      return \`\${this.num}R\`;
    }
    return \`\${this.num}R\${this.gen}\`;
  }
  static fromString(str) {
    const ref = RefCache[str];
    if (ref) {
      return ref;
    }
    const m = /^(\\d+)R(\\d*)$/.exec(str);
    if (!m || m[1] === "0") {
      return null;
    }
    return RefCache[str] = new Ref(parseInt(m[1]), !m[2] ? 0 : parseInt(m[2]));
  }
  static get(num, gen) {
    const key = gen === 0 ? \`\${num}R\` : \`\${num}R\${gen}\`;
    return RefCache[key] ||= new Ref(num, gen);
  }
}
class RefSet {
  constructor(parent = null) {
    this._set = new Set(parent?._set);
  }
  has(ref) {
    return this._set.has(ref.toString());
  }
  put(ref) {
    this._set.add(ref.toString());
  }
  remove(ref) {
    this._set.delete(ref.toString());
  }
  [Symbol.iterator]() {
    return this._set.values();
  }
  clear() {
    this._set.clear();
  }
}
class RefSetCache {
  constructor() {
    this._map = new Map();
  }
  get size() {
    return this._map.size;
  }
  get(ref) {
    return this._map.get(ref.toString());
  }
  has(ref) {
    return this._map.has(ref.toString());
  }
  put(ref, obj) {
    this._map.set(ref.toString(), obj);
  }
  putAlias(ref, aliasRef) {
    this._map.set(ref.toString(), this.get(aliasRef));
  }
  [Symbol.iterator]() {
    return this._map.values();
  }
  clear() {
    this._map.clear();
  }
  *values() {
    yield* this._map.values();
  }
  *items() {
    for (const [ref, value] of this._map) {
      yield [Ref.fromString(ref), value];
    }
  }
}
function isName(v, name) {
  return v instanceof Name && (name === undefined || v.name === name);
}
function isCmd(v, cmd) {
  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);
}
function isDict(v, type) {
  return v instanceof Dict && (type === undefined || isName(v.get("Type"), type));
}
function isRefsEqual(v1, v2) {
  return v1.num === v2.num && v1.gen === v2.gen;
}

;// ./src/core/base_stream.js

class BaseStream {
  get length() {
    unreachable("Abstract getter \`length\` accessed");
  }
  get isEmpty() {
    unreachable("Abstract getter \`isEmpty\` accessed");
  }
  get isDataLoaded() {
    return shadow(this, "isDataLoaded", true);
  }
  getByte() {
    unreachable("Abstract method \`getByte\` called");
  }
  getBytes(length) {
    unreachable("Abstract method \`getBytes\` called");
  }
  async getImageData(length, decoderOptions) {
    return this.getBytes(length, decoderOptions);
  }
  async asyncGetBytes() {
    unreachable("Abstract method \`asyncGetBytes\` called");
  }
  get isAsync() {
    return false;
  }
  get isAsyncDecoder() {
    return false;
  }
  get canAsyncDecodeImageFromBuffer() {
    return false;
  }
  async getTransferableImage() {
    return null;
  }
  peekByte() {
    const peekedByte = this.getByte();
    if (peekedByte !== -1) {
      this.pos--;
    }
    return peekedByte;
  }
  peekBytes(length) {
    const bytes = this.getBytes(length);
    this.pos -= bytes.length;
    return bytes;
  }
  getUint16() {
    const b0 = this.getByte();
    const b1 = this.getByte();
    if (b0 === -1 || b1 === -1) {
      return -1;
    }
    return (b0 << 8) + b1;
  }
  getInt32() {
    const b0 = this.getByte();
    const b1 = this.getByte();
    const b2 = this.getByte();
    const b3 = this.getByte();
    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
  }
  getByteRange(begin, end) {
    unreachable("Abstract method \`getByteRange\` called");
  }
  getString(length) {
    return bytesToString(this.getBytes(length));
  }
  skip(n) {
    this.pos += n || 1;
  }
  reset() {
    unreachable("Abstract method \`reset\` called");
  }
  moveStart() {
    unreachable("Abstract method \`moveStart\` called");
  }
  makeSubStream(start, length, dict = null) {
    unreachable("Abstract method \`makeSubStream\` called");
  }
  getBaseStreams() {
    return null;
  }
}

;// ./src/core/core_utils.js



const PDF_VERSION_REGEXP = /^[1-9]\\.\\d$/;
const MAX_INT_32 = 2 ** 31 - 1;
const MIN_INT_32 = -(2 ** 31);
function getLookupTableFactory(initializer) {
  let lookup;
  return function () {
    if (initializer) {
      lookup = Object.create(null);
      initializer(lookup);
      initializer = null;
    }
    return lookup;
  };
}
class MissingDataException extends BaseException {
  constructor(begin, end) {
    super(\`Missing data [\${begin}, \${end})\`, "MissingDataException");
    this.begin = begin;
    this.end = end;
  }
}
class ParserEOFException extends BaseException {
  constructor(msg) {
    super(msg, "ParserEOFException");
  }
}
class XRefEntryException extends BaseException {
  constructor(msg) {
    super(msg, "XRefEntryException");
  }
}
class XRefParseException extends BaseException {
  constructor(msg) {
    super(msg, "XRefParseException");
  }
}
function arrayBuffersToBytes(arr) {
  const length = arr.length;
  if (length === 0) {
    return new Uint8Array(0);
  }
  if (length === 1) {
    return new Uint8Array(arr[0]);
  }
  let dataLength = 0;
  for (let i = 0; i < length; i++) {
    dataLength += arr[i].byteLength;
  }
  const data = new Uint8Array(dataLength);
  let pos = 0;
  for (let i = 0; i < length; i++) {
    const item = new Uint8Array(arr[i]);
    data.set(item, pos);
    pos += item.byteLength;
  }
  return data;
}
async function fetchBinaryData(url) {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(\`Failed to fetch file "\${url}" with "\${response.statusText}".\`);
  }
  return new Uint8Array(await response.arrayBuffer());
}
function getInheritableProperty({
  dict,
  key,
  getArray = false,
  stopWhenFound = true
}) {
  let values;
  const visited = new RefSet();
  while (dict instanceof Dict && !(dict.objId && visited.has(dict.objId))) {
    if (dict.objId) {
      visited.put(dict.objId);
    }
    const value = getArray ? dict.getArray(key) : dict.get(key);
    if (value !== undefined) {
      if (stopWhenFound) {
        return value;
      }
      (values ||= []).push(value);
    }
    dict = dict.get("Parent");
  }
  return values;
}
function getParentToUpdate(dict, ref, xref) {
  const visited = new RefSet();
  const firstDict = dict;
  const result = {
    dict: null,
    ref: null
  };
  while (dict instanceof Dict && !visited.has(ref)) {
    visited.put(ref);
    if (dict.has("T")) {
      break;
    }
    ref = dict.getRaw("Parent");
    if (!(ref instanceof Ref)) {
      return result;
    }
    dict = xref.fetch(ref);
  }
  if (dict instanceof Dict && dict !== firstDict) {
    result.dict = dict;
    result.ref = ref;
  }
  return result;
}
const ROMAN_NUMBER_MAP = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM", "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC", "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"];
function toRomanNumerals(number, lowerCase = false) {
  assert(Number.isInteger(number) && number > 0, "The number should be a positive integer.");
  const roman = "M".repeat(number / 1000 | 0) + ROMAN_NUMBER_MAP[number % 1000 / 100 | 0] + ROMAN_NUMBER_MAP[10 + (number % 100 / 10 | 0)] + ROMAN_NUMBER_MAP[20 + number % 10];
  return lowerCase ? roman.toLowerCase() : roman;
}
function log2(x) {
  return x > 0 ? Math.ceil(Math.log2(x)) : 0;
}
function readInt8(data, offset) {
  return data[offset] << 24 >> 24;
}
function readInt16(data, offset) {
  return (data[offset] << 24 | data[offset + 1] << 16) >> 16;
}
function readUint16(data, offset) {
  return data[offset] << 8 | data[offset + 1];
}
function readUint32(data, offset) {
  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
}
function isWhiteSpace(ch) {
  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;
}
function isBooleanArray(arr, len) {
  return Array.isArray(arr) && (len === null || arr.length === len) && arr.every(x => typeof x === "boolean");
}
function isNumberArray(arr, len) {
  if (Array.isArray(arr)) {
    return (len === null || arr.length === len) && arr.every(x => typeof x === "number");
  }
  return ArrayBuffer.isView(arr) && !(arr instanceof BigInt64Array || arr instanceof BigUint64Array) && (len === null || arr.length === len);
}
function lookupMatrix(arr, fallback) {
  return isNumberArray(arr, 6) ? arr : fallback;
}
function lookupRect(arr, fallback) {
  return isNumberArray(arr, 4) ? arr : fallback;
}
function lookupNormalRect(arr, fallback) {
  return isNumberArray(arr, 4) ? Util.normalizeRect(arr) : fallback;
}
function parseXFAPath(path) {
  const positionPattern = /(.+)\\[(\\d+)\\]$/;
  return path.split(".").map(component => {
    const m = component.match(positionPattern);
    if (m) {
      return {
        name: m[1],
        pos: parseInt(m[2], 10)
      };
    }
    return {
      name: component,
      pos: 0
    };
  });
}
function escapePDFName(str) {
  const buffer = [];
  let start = 0;
  for (let i = 0, ii = str.length; i < ii; i++) {
    const char = str.charCodeAt(i);
    if (char < 0x21 || char > 0x7e || char === 0x23 || char === 0x28 || char === 0x29 || char === 0x3c || char === 0x3e || char === 0x5b || char === 0x5d || char === 0x7b || char === 0x7d || char === 0x2f || char === 0x25) {
      if (start < i) {
        buffer.push(str.substring(start, i));
      }
      buffer.push(\`#\${char.toString(16)}\`);
      start = i + 1;
    }
  }
  if (buffer.length === 0) {
    return str;
  }
  if (start < str.length) {
    buffer.push(str.substring(start, str.length));
  }
  return buffer.join("");
}
function escapeString(str) {
  return str.replaceAll(/([()\\\\\\n\\r])/g, match => {
    if (match === "\\n") {
      return "\\\\n";
    } else if (match === "\\r") {
      return "\\\\r";
    }
    return \`\\\\\${match}\`;
  });
}
function _collectJS(entry, xref, list, parents) {
  if (!entry) {
    return;
  }
  let parent = null;
  if (entry instanceof Ref) {
    if (parents.has(entry)) {
      return;
    }
    parent = entry;
    parents.put(parent);
    entry = xref.fetch(entry);
  }
  if (Array.isArray(entry)) {
    for (const element of entry) {
      _collectJS(element, xref, list, parents);
    }
  } else if (entry instanceof Dict) {
    if (isName(entry.get("S"), "JavaScript")) {
      const js = entry.get("JS");
      let code;
      if (js instanceof BaseStream) {
        code = js.getString();
      } else if (typeof js === "string") {
        code = js;
      }
      code &&= stringToPDFString(code).replaceAll("\\x00", "");
      if (code) {
        list.push(code);
      }
    }
    _collectJS(entry.getRaw("Next"), xref, list, parents);
  }
  if (parent) {
    parents.remove(parent);
  }
}
function collectActions(xref, dict, eventType) {
  const actions = Object.create(null);
  const additionalActionsDicts = getInheritableProperty({
    dict,
    key: "AA",
    stopWhenFound: false
  });
  if (additionalActionsDicts) {
    for (let i = additionalActionsDicts.length - 1; i >= 0; i--) {
      const additionalActions = additionalActionsDicts[i];
      if (!(additionalActions instanceof Dict)) {
        continue;
      }
      for (const key of additionalActions.getKeys()) {
        const action = eventType[key];
        if (!action) {
          continue;
        }
        const actionDict = additionalActions.getRaw(key);
        const parents = new RefSet();
        const list = [];
        _collectJS(actionDict, xref, list, parents);
        if (list.length > 0) {
          actions[action] = list;
        }
      }
    }
  }
  if (dict.has("A")) {
    const actionDict = dict.get("A");
    const parents = new RefSet();
    const list = [];
    _collectJS(actionDict, xref, list, parents);
    if (list.length > 0) {
      actions.Action = list;
    }
  }
  return objectSize(actions) > 0 ? actions : null;
}
const XMLEntities = {
  0x3c: "&lt;",
  0x3e: "&gt;",
  0x26: "&amp;",
  0x22: "&quot;",
  0x27: "&apos;"
};
function* codePointIter(str) {
  for (let i = 0, ii = str.length; i < ii; i++) {
    const char = str.codePointAt(i);
    if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {
      i++;
    }
    yield char;
  }
}
function encodeToXmlString(str) {
  const buffer = [];
  let start = 0;
  for (let i = 0, ii = str.length; i < ii; i++) {
    const char = str.codePointAt(i);
    if (0x20 <= char && char <= 0x7e) {
      const entity = XMLEntities[char];
      if (entity) {
        if (start < i) {
          buffer.push(str.substring(start, i));
        }
        buffer.push(entity);
        start = i + 1;
      }
    } else {
      if (start < i) {
        buffer.push(str.substring(start, i));
      }
      buffer.push(\`&#x\${char.toString(16).toUpperCase()};\`);
      if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {
        i++;
      }
      start = i + 1;
    }
  }
  if (buffer.length === 0) {
    return str;
  }
  if (start < str.length) {
    buffer.push(str.substring(start, str.length));
  }
  return buffer.join("");
}
function validateFontName(fontFamily, mustWarn = false) {
  const m = /^("|').*("|')$/.exec(fontFamily);
  if (m && m[1] === m[2]) {
    const re = new RegExp(\`[^\\\\\\\\]\${m[1]}\`);
    if (re.test(fontFamily.slice(1, -1))) {
      if (mustWarn) {
        warn(\`FontFamily contains unescaped \${m[1]}: \${fontFamily}.\`);
      }
      return false;
    }
  } else {
    for (const ident of fontFamily.split(/[ \\t]+/)) {
      if (/^(\\d|(-(\\d|-)))/.test(ident) || !/^[\\w-\\\\]+$/.test(ident)) {
        if (mustWarn) {
          warn(\`FontFamily contains invalid <custom-ident>: \${fontFamily}.\`);
        }
        return false;
      }
    }
  }
  return true;
}
function validateCSSFont(cssFontInfo) {
  const DEFAULT_CSS_FONT_OBLIQUE = "14";
  const DEFAULT_CSS_FONT_WEIGHT = "400";
  const CSS_FONT_WEIGHT_VALUES = new Set(["100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "normal", "bold", "bolder", "lighter"]);
  const {
    fontFamily,
    fontWeight,
    italicAngle
  } = cssFontInfo;
  if (!validateFontName(fontFamily, true)) {
    return false;
  }
  const weight = fontWeight ? fontWeight.toString() : "";
  cssFontInfo.fontWeight = CSS_FONT_WEIGHT_VALUES.has(weight) ? weight : DEFAULT_CSS_FONT_WEIGHT;
  const angle = parseFloat(italicAngle);
  cssFontInfo.italicAngle = isNaN(angle) || angle < -90 || angle > 90 ? DEFAULT_CSS_FONT_OBLIQUE : italicAngle.toString();
  return true;
}
function recoverJsURL(str) {
  const URL_OPEN_METHODS = ["app.launchURL", "window.open", "xfa.host.gotoURL"];
  const regex = new RegExp("^\\\\s*(" + URL_OPEN_METHODS.join("|").replaceAll(".", "\\\\.") + ")\\\\((?:'|\\")([^'\\"]*)(?:'|\\")(?:,\\\\s*(\\\\w+)\\\\)|\\\\))", "i");
  const jsUrl = regex.exec(str);
  if (jsUrl?.[2]) {
    return {
      url: jsUrl[2],
      newWindow: jsUrl[1] === "app.launchURL" && jsUrl[3] === "true"
    };
  }
  return null;
}
function numberToString(value) {
  if (Number.isInteger(value)) {
    return value.toString();
  }
  const roundedValue = Math.round(value * 100);
  if (roundedValue % 100 === 0) {
    return (roundedValue / 100).toString();
  }
  if (roundedValue % 10 === 0) {
    return value.toFixed(1);
  }
  return value.toFixed(2);
}
function getNewAnnotationsMap(annotationStorage) {
  if (!annotationStorage) {
    return null;
  }
  const newAnnotationsByPage = new Map();
  for (const [key, value] of annotationStorage) {
    if (!key.startsWith(AnnotationEditorPrefix)) {
      continue;
    }
    let annotations = newAnnotationsByPage.get(value.pageIndex);
    if (!annotations) {
      annotations = [];
      newAnnotationsByPage.set(value.pageIndex, annotations);
    }
    annotations.push(value);
  }
  return newAnnotationsByPage.size > 0 ? newAnnotationsByPage : null;
}
function stringToAsciiOrUTF16BE(str) {
  return isAscii(str) ? str : stringToUTF16String(str, true);
}
function isAscii(str) {
  return /^[\\x00-\\x7F]*$/.test(str);
}
function stringToUTF16HexString(str) {
  const buf = [];
  for (let i = 0, ii = str.length; i < ii; i++) {
    const char = str.charCodeAt(i);
    buf.push(hexNumbers[char >> 8 & 0xff], hexNumbers[char & 0xff]);
  }
  return buf.join("");
}
function stringToUTF16String(str, bigEndian = false) {
  const buf = [];
  if (bigEndian) {
    buf.push("\\xFE\\xFF");
  }
  for (let i = 0, ii = str.length; i < ii; i++) {
    const char = str.charCodeAt(i);
    buf.push(String.fromCharCode(char >> 8 & 0xff), String.fromCharCode(char & 0xff));
  }
  return buf.join("");
}
function getRotationMatrix(rotation, width, height) {
  switch (rotation) {
    case 90:
      return [0, 1, -1, 0, width, 0];
    case 180:
      return [-1, 0, 0, -1, width, height];
    case 270:
      return [0, -1, 1, 0, 0, height];
    default:
      throw new Error("Invalid rotation");
  }
}
function getSizeInBytes(x) {
  return Math.ceil(Math.ceil(Math.log2(1 + x)) / 8);
}

;// ./external/qcms/qcms_utils.js
class QCMS {
  static _module = null;
  static _mustAddAlpha = false;
  static _destBuffer = null;
}
function copy_result(ptr, len) {
  const {
    _module,
    _mustAddAlpha,
    _destBuffer
  } = QCMS;
  const result = new Uint8Array(_module.memory.buffer, ptr, len);
  if (result.length === _destBuffer.length) {
    _destBuffer.set(result);
    return;
  }
  if (_mustAddAlpha) {
    for (let i = 0, j = 0, ii = result.length; i < ii; i += 3, j += 4) {
      _destBuffer[j] = result[i];
      _destBuffer[j + 1] = result[i + 1];
      _destBuffer[j + 2] = result[i + 2];
      _destBuffer[j + 3] = 255;
    }
  } else {
    for (let i = 0, j = 0, ii = result.length; i < ii; i += 3, j += 4) {
      _destBuffer[j] = result[i];
      _destBuffer[j + 1] = result[i + 1];
      _destBuffer[j + 2] = result[i + 2];
    }
  }
}
function copy_rgb(ptr) {
  QCMS._destBuffer.set(new Uint8Array(QCMS._module.memory.buffer, ptr, 3));
}

;// ./external/qcms/qcms.js

let wasm;
const cachedTextDecoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', {
  ignoreBOM: true,
  fatal: true
}) : {
  decode: () => {
    throw Error('TextDecoder not available');
  }
};
if (typeof TextDecoder !== 'undefined') {
  cachedTextDecoder.decode();
}
;
let cachedUint8ArrayMemory0 = null;
function getUint8ArrayMemory0() {
  if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
    cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachedUint8ArrayMemory0;
}
function getStringFromWasm0(ptr, len) {
  ptr = ptr >>> 0;
  return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
}
let WASM_VECTOR_LEN = 0;
function passArray8ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 1, 1) >>> 0;
  getUint8ArrayMemory0().set(arg, ptr / 1);
  WASM_VECTOR_LEN = arg.length;
  return ptr;
}
function qcms_convert_array(transformer, src) {
  const ptr0 = passArray8ToWasm0(src, wasm.__wbindgen_malloc);
  const len0 = WASM_VECTOR_LEN;
  wasm.qcms_convert_array(transformer, ptr0, len0);
}
function qcms_convert_one(transformer, src) {
  wasm.qcms_convert_one(transformer, src);
}
function qcms_convert_three(transformer, src1, src2, src3) {
  wasm.qcms_convert_three(transformer, src1, src2, src3);
}
function qcms_convert_four(transformer, src1, src2, src3, src4) {
  wasm.qcms_convert_four(transformer, src1, src2, src3, src4);
}
function qcms_transformer_from_memory(mem, in_type, intent) {
  const ptr0 = passArray8ToWasm0(mem, wasm.__wbindgen_malloc);
  const len0 = WASM_VECTOR_LEN;
  const ret = wasm.qcms_transformer_from_memory(ptr0, len0, in_type, intent);
  return ret >>> 0;
}
function qcms_drop_transformer(transformer) {
  wasm.qcms_drop_transformer(transformer);
}
const DataType = Object.freeze({
  RGB8: 0,
  "0": "RGB8",
  RGBA8: 1,
  "1": "RGBA8",
  BGRA8: 2,
  "2": "BGRA8",
  Gray8: 3,
  "3": "Gray8",
  GrayA8: 4,
  "4": "GrayA8",
  CMYK: 5,
  "5": "CMYK"
});
const Intent = Object.freeze({
  Perceptual: 0,
  "0": "Perceptual",
  RelativeColorimetric: 1,
  "1": "RelativeColorimetric",
  Saturation: 2,
  "2": "Saturation",
  AbsoluteColorimetric: 3,
  "3": "AbsoluteColorimetric"
});
async function __wbg_load(module, imports) {
  if (typeof Response === 'function' && module instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === 'function') {
      try {
        return await WebAssembly.instantiateStreaming(module, imports);
      } catch (e) {
        if (module.headers.get('Content-Type') != 'application/wasm') {
          console.warn("\`WebAssembly.instantiateStreaming\` failed because your server does not serve Wasm with \`application/wasm\` MIME type. Falling back to \`WebAssembly.instantiate\` which is slower. Original error:\\n", e);
        } else {
          throw e;
        }
      }
    }
    const bytes = await module.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module, imports);
    if (instance instanceof WebAssembly.Instance) {
      return {
        instance,
        module
      };
    } else {
      return instance;
    }
  }
}
function __wbg_get_imports() {
  const imports = {};
  imports.wbg = {};
  imports.wbg.__wbg_copyresult_b08ee7d273f295dd = function (arg0, arg1) {
    copy_result(arg0 >>> 0, arg1 >>> 0);
  };
  imports.wbg.__wbg_copyrgb_d60ce17bb05d9b67 = function (arg0) {
    copy_rgb(arg0 >>> 0);
  };
  imports.wbg.__wbindgen_init_externref_table = function () {
    const table = wasm.__wbindgen_export_0;
    const offset = table.grow(4);
    table.set(0, undefined);
    table.set(offset + 0, undefined);
    table.set(offset + 1, null);
    table.set(offset + 2, true);
    table.set(offset + 3, false);
  };
  imports.wbg.__wbindgen_throw = function (arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
  };
  return imports;
}
function __wbg_init_memory(imports, memory) {}
function __wbg_finalize_init(instance, module) {
  wasm = instance.exports;
  __wbg_init.__wbindgen_wasm_module = module;
  cachedUint8ArrayMemory0 = null;
  wasm.__wbindgen_start();
  return wasm;
}
function initSync(module) {
  if (wasm !== undefined) return wasm;
  if (typeof module !== 'undefined') {
    if (Object.getPrototypeOf(module) === Object.prototype) {
      ({
        module
      } = module);
    } else {
      console.warn('using deprecated parameters for \`initSync()\`; pass a single object instead');
    }
  }
  const imports = __wbg_get_imports();
  __wbg_init_memory(imports);
  if (!(module instanceof WebAssembly.Module)) {
    module = new WebAssembly.Module(module);
  }
  const instance = new WebAssembly.Instance(module, imports);
  return __wbg_finalize_init(instance, module);
}
async function __wbg_init(module_or_path) {
  if (wasm !== undefined) return wasm;
  if (typeof module_or_path !== 'undefined') {
    if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
      ({
        module_or_path
      } = module_or_path);
    } else {
      console.warn('using deprecated parameters for the initialization function; pass a single object instead');
    }
  }
  if (typeof module_or_path === 'undefined') {
    module_or_path = new URL('qcms_bg.wasm', import.meta.url);
  }
  const imports = __wbg_get_imports();
  if (typeof module_or_path === 'string' || typeof Request === 'function' && module_or_path instanceof Request || typeof URL === 'function' && module_or_path instanceof URL) {
    module_or_path = fetch(module_or_path);
  }
  __wbg_init_memory(imports);
  const {
    instance,
    module
  } = await __wbg_load(await module_or_path, imports);
  return __wbg_finalize_init(instance, module);
}

/* harmony default export */ const qcms = ((/* unused pure expression or super */ null && (__wbg_init)));
;// ./src/core/colorspace.js


function resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {
  const COMPONENTS = 3;
  alpha01 = alpha01 !== 1 ? 0 : alpha01;
  const xRatio = w1 / w2;
  const yRatio = h1 / h2;
  let newIndex = 0,
    oldIndex;
  const xScaled = new Uint16Array(w2);
  const w1Scanline = w1 * COMPONENTS;
  for (let i = 0; i < w2; i++) {
    xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;
  }
  for (let i = 0; i < h2; i++) {
    const py = Math.floor(i * yRatio) * w1Scanline;
    for (let j = 0; j < w2; j++) {
      oldIndex = py + xScaled[j];
      dest[newIndex++] = src[oldIndex++];
      dest[newIndex++] = src[oldIndex++];
      dest[newIndex++] = src[oldIndex++];
      newIndex += alpha01;
    }
  }
}
function resizeRgbaImage(src, dest, w1, h1, w2, h2, alpha01) {
  const xRatio = w1 / w2;
  const yRatio = h1 / h2;
  let newIndex = 0;
  const xScaled = new Uint16Array(w2);
  if (alpha01 === 1) {
    for (let i = 0; i < w2; i++) {
      xScaled[i] = Math.floor(i * xRatio);
    }
    const src32 = new Uint32Array(src.buffer);
    const dest32 = new Uint32Array(dest.buffer);
    const rgbMask = FeatureTest.isLittleEndian ? 0x00ffffff : 0xffffff00;
    for (let i = 0; i < h2; i++) {
      const buf = src32.subarray(Math.floor(i * yRatio) * w1);
      for (let j = 0; j < w2; j++) {
        dest32[newIndex++] |= buf[xScaled[j]] & rgbMask;
      }
    }
  } else {
    const COMPONENTS = 4;
    const w1Scanline = w1 * COMPONENTS;
    for (let i = 0; i < w2; i++) {
      xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;
    }
    for (let i = 0; i < h2; i++) {
      const buf = src.subarray(Math.floor(i * yRatio) * w1Scanline);
      for (let j = 0; j < w2; j++) {
        const oldIndex = xScaled[j];
        dest[newIndex++] = buf[oldIndex];
        dest[newIndex++] = buf[oldIndex + 1];
        dest[newIndex++] = buf[oldIndex + 2];
      }
    }
  }
}
function copyRgbaImage(src, dest, alpha01) {
  if (alpha01 === 1) {
    const src32 = new Uint32Array(src.buffer);
    const dest32 = new Uint32Array(dest.buffer);
    const rgbMask = FeatureTest.isLittleEndian ? 0x00ffffff : 0xffffff00;
    for (let i = 0, ii = src32.length; i < ii; i++) {
      dest32[i] |= src32[i] & rgbMask;
    }
  } else {
    let j = 0;
    for (let i = 0, ii = src.length; i < ii; i += 4) {
      dest[j++] = src[i];
      dest[j++] = src[i + 1];
      dest[j++] = src[i + 2];
    }
  }
}
class ColorSpace {
  constructor(name, numComps) {
    this.name = name;
    this.numComps = numComps;
  }
  getRgb(src, srcOffset) {
    const rgb = new Uint8ClampedArray(3);
    this.getRgbItem(src, srcOffset, rgb, 0);
    return rgb;
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    unreachable("Should not call ColorSpace.getRgbItem");
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    unreachable("Should not call ColorSpace.getRgbBuffer");
  }
  getOutputLength(inputLength, alpha01) {
    unreachable("Should not call ColorSpace.getOutputLength");
  }
  isPassthrough(bits) {
    return false;
  }
  isDefaultDecode(decodeMap, bpc) {
    return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
  }
  fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {
    const count = originalWidth * originalHeight;
    let rgbBuf = null;
    const numComponentColors = 1 << bpc;
    const needsResizing = originalHeight !== height || originalWidth !== width;
    if (this.isPassthrough(bpc)) {
      rgbBuf = comps;
    } else if (this.numComps === 1 && count > numComponentColors && this.name !== "DeviceGray" && this.name !== "DeviceRGB") {
      const allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);
      for (let i = 0; i < numComponentColors; i++) {
        allColors[i] = i;
      }
      const colorMap = new Uint8ClampedArray(numComponentColors * 3);
      this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);
      if (!needsResizing) {
        let destPos = 0;
        for (let i = 0; i < count; ++i) {
          const key = comps[i] * 3;
          dest[destPos++] = colorMap[key];
          dest[destPos++] = colorMap[key + 1];
          dest[destPos++] = colorMap[key + 2];
          destPos += alpha01;
        }
      } else {
        rgbBuf = new Uint8Array(count * 3);
        let rgbPos = 0;
        for (let i = 0; i < count; ++i) {
          const key = comps[i] * 3;
          rgbBuf[rgbPos++] = colorMap[key];
          rgbBuf[rgbPos++] = colorMap[key + 1];
          rgbBuf[rgbPos++] = colorMap[key + 2];
        }
      }
    } else if (!needsResizing) {
      this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);
    } else {
      rgbBuf = new Uint8ClampedArray(count * 3);
      this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);
    }
    if (rgbBuf) {
      if (needsResizing) {
        resizeRgbImage(rgbBuf, dest, originalWidth, originalHeight, width, height, alpha01);
      } else {
        let destPos = 0,
          rgbPos = 0;
        for (let i = 0, ii = width * actualHeight; i < ii; i++) {
          dest[destPos++] = rgbBuf[rgbPos++];
          dest[destPos++] = rgbBuf[rgbPos++];
          dest[destPos++] = rgbBuf[rgbPos++];
          destPos += alpha01;
        }
      }
    }
  }
  get usesZeroToOneRange() {
    return shadow(this, "usesZeroToOneRange", true);
  }
  static isDefaultDecode(decode, numComps) {
    if (!Array.isArray(decode)) {
      return true;
    }
    if (numComps * 2 !== decode.length) {
      warn("The decode map is not the correct length");
      return true;
    }
    for (let i = 0, ii = decode.length; i < ii; i += 2) {
      if (decode[i] !== 0 || decode[i + 1] !== 1) {
        return false;
      }
    }
    return true;
  }
}
class AlternateCS extends ColorSpace {
  constructor(numComps, base, tintFn) {
    super("Alternate", numComps);
    this.base = base;
    this.tintFn = tintFn;
    this.tmpBuf = new Float32Array(base.numComps);
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    const tmpBuf = this.tmpBuf;
    this.tintFn(src, srcOffset, tmpBuf, 0);
    this.base.getRgbItem(tmpBuf, 0, dest, destOffset);
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    const tintFn = this.tintFn;
    const base = this.base;
    const scale = 1 / ((1 << bits) - 1);
    const baseNumComps = base.numComps;
    const usesZeroToOneRange = base.usesZeroToOneRange;
    const isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;
    let pos = isPassthrough ? destOffset : 0;
    const baseBuf = isPassthrough ? dest : new Uint8ClampedArray(baseNumComps * count);
    const numComps = this.numComps;
    const scaled = new Float32Array(numComps);
    const tinted = new Float32Array(baseNumComps);
    let i, j;
    for (i = 0; i < count; i++) {
      for (j = 0; j < numComps; j++) {
        scaled[j] = src[srcOffset++] * scale;
      }
      tintFn(scaled, 0, tinted, 0);
      if (usesZeroToOneRange) {
        for (j = 0; j < baseNumComps; j++) {
          baseBuf[pos++] = tinted[j] * 255;
        }
      } else {
        base.getRgbItem(tinted, 0, baseBuf, pos);
        pos += baseNumComps;
      }
    }
    if (!isPassthrough) {
      base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);
    }
  }
  getOutputLength(inputLength, alpha01) {
    return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);
  }
}
class PatternCS extends ColorSpace {
  constructor(baseCS) {
    super("Pattern", null);
    this.base = baseCS;
  }
  isDefaultDecode(decodeMap, bpc) {
    unreachable("Should not call PatternCS.isDefaultDecode");
  }
}
class IndexedCS extends ColorSpace {
  constructor(base, highVal, lookup) {
    super("Indexed", 1);
    this.base = base;
    const length = base.numComps * (highVal + 1);
    this.lookup = new Uint8Array(length);
    if (lookup instanceof BaseStream) {
      const bytes = lookup.getBytes(length);
      this.lookup.set(bytes);
    } else if (typeof lookup === "string") {
      for (let i = 0; i < length; ++i) {
        this.lookup[i] = lookup.charCodeAt(i) & 0xff;
      }
    } else {
      throw new FormatError(\`IndexedCS - unrecognized lookup table: \${lookup}\`);
    }
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    const numComps = this.base.numComps;
    const start = src[srcOffset] * numComps;
    this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    const base = this.base;
    const numComps = base.numComps;
    const outputDelta = base.getOutputLength(numComps, alpha01);
    const lookup = this.lookup;
    for (let i = 0; i < count; ++i) {
      const lookupPos = src[srcOffset++] * numComps;
      base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);
      destOffset += outputDelta;
    }
  }
  getOutputLength(inputLength, alpha01) {
    return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);
  }
  isDefaultDecode(decodeMap, bpc) {
    if (!Array.isArray(decodeMap)) {
      return true;
    }
    if (decodeMap.length !== 2) {
      warn("Decode map length is not correct");
      return true;
    }
    if (!Number.isInteger(bpc) || bpc < 1) {
      warn("Bits per component is not correct");
      return true;
    }
    return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;
  }
}
class DeviceGrayCS extends ColorSpace {
  constructor() {
    super("DeviceGray", 1);
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    const c = src[srcOffset] * 255;
    dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    const scale = 255 / ((1 << bits) - 1);
    let j = srcOffset,
      q = destOffset;
    for (let i = 0; i < count; ++i) {
      const c = scale * src[j++];
      dest[q++] = c;
      dest[q++] = c;
      dest[q++] = c;
      q += alpha01;
    }
  }
  getOutputLength(inputLength, alpha01) {
    return inputLength * (3 + alpha01);
  }
}
class DeviceRgbCS extends ColorSpace {
  constructor() {
    super("DeviceRGB", 3);
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    dest[destOffset] = src[srcOffset] * 255;
    dest[destOffset + 1] = src[srcOffset + 1] * 255;
    dest[destOffset + 2] = src[srcOffset + 2] * 255;
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    if (bits === 8 && alpha01 === 0) {
      dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);
      return;
    }
    const scale = 255 / ((1 << bits) - 1);
    let j = srcOffset,
      q = destOffset;
    for (let i = 0; i < count; ++i) {
      dest[q++] = scale * src[j++];
      dest[q++] = scale * src[j++];
      dest[q++] = scale * src[j++];
      q += alpha01;
    }
  }
  getOutputLength(inputLength, alpha01) {
    return inputLength * (3 + alpha01) / 3 | 0;
  }
  isPassthrough(bits) {
    return bits === 8;
  }
}
class DeviceRgbaCS extends ColorSpace {
  constructor() {
    super("DeviceRGBA", 4);
  }
  getOutputLength(inputLength, _alpha01) {
    return inputLength * 4;
  }
  isPassthrough(bits) {
    return bits === 8;
  }
  fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {
    if (originalHeight !== height || originalWidth !== width) {
      resizeRgbaImage(comps, dest, originalWidth, originalHeight, width, height, alpha01);
    } else {
      copyRgbaImage(comps, dest, alpha01);
    }
  }
}
class DeviceCmykCS extends ColorSpace {
  constructor() {
    super("DeviceCMYK", 4);
  }
  #toRgb(src, srcOffset, srcScale, dest, destOffset) {
    const c = src[srcOffset] * srcScale;
    const m = src[srcOffset + 1] * srcScale;
    const y = src[srcOffset + 2] * srcScale;
    const k = src[srcOffset + 3] * srcScale;
    dest[destOffset] = 255 + c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747);
    dest[destOffset + 1] = 255 + c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578);
    dest[destOffset + 2] = 255 + c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367);
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    this.#toRgb(src, srcOffset, 1, dest, destOffset);
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    const scale = 1 / ((1 << bits) - 1);
    for (let i = 0; i < count; i++) {
      this.#toRgb(src, srcOffset, scale, dest, destOffset);
      srcOffset += 4;
      destOffset += 3 + alpha01;
    }
  }
  getOutputLength(inputLength, alpha01) {
    return inputLength / 4 * (3 + alpha01) | 0;
  }
}
class CalGrayCS extends ColorSpace {
  constructor(whitePoint, blackPoint, gamma) {
    super("CalGray", 1);
    if (!whitePoint) {
      throw new FormatError("WhitePoint missing - required for color space CalGray");
    }
    [this.XW, this.YW, this.ZW] = whitePoint;
    [this.XB, this.YB, this.ZB] = blackPoint || [0, 0, 0];
    this.G = gamma || 1;
    if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {
      throw new FormatError(\`Invalid WhitePoint components for \${this.name}, no fallback available\`);
    }
    if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {
      info(\`Invalid BlackPoint for \${this.name}, falling back to default.\`);
      this.XB = this.YB = this.ZB = 0;
    }
    if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {
      warn(\`\${this.name}, BlackPoint: XB: \${this.XB}, YB: \${this.YB}, \` + \`ZB: \${this.ZB}, only default values are supported.\`);
    }
    if (this.G < 1) {
      info(\`Invalid Gamma: \${this.G} for \${this.name}, falling back to default.\`);
      this.G = 1;
    }
  }
  #toRgb(src, srcOffset, dest, destOffset, scale) {
    const A = src[srcOffset] * scale;
    const AG = A ** this.G;
    const L = this.YW * AG;
    const val = Math.max(295.8 * L ** 0.3333333333333333 - 40.8, 0);
    dest[destOffset] = val;
    dest[destOffset + 1] = val;
    dest[destOffset + 2] = val;
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    this.#toRgb(src, srcOffset, dest, destOffset, 1);
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    const scale = 1 / ((1 << bits) - 1);
    for (let i = 0; i < count; ++i) {
      this.#toRgb(src, srcOffset, dest, destOffset, scale);
      srcOffset += 1;
      destOffset += 3 + alpha01;
    }
  }
  getOutputLength(inputLength, alpha01) {
    return inputLength * (3 + alpha01);
  }
}
class CalRGBCS extends ColorSpace {
  static #BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);
  static #BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -0.0085287, 0.0400428, 0.9684867]);
  static #SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.9692660, 1.8760108, 0.0415560, 0.0556434, -0.2040259, 1.0572252]);
  static #FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);
  static #tempNormalizeMatrix = new Float32Array(3);
  static #tempConvertMatrix1 = new Float32Array(3);
  static #tempConvertMatrix2 = new Float32Array(3);
  static #DECODE_L_CONSTANT = ((8 + 16) / 116) ** 3 / 8.0;
  constructor(whitePoint, blackPoint, gamma, matrix) {
    super("CalRGB", 3);
    if (!whitePoint) {
      throw new FormatError("WhitePoint missing - required for color space CalRGB");
    }
    const [XW, YW, ZW] = this.whitePoint = whitePoint;
    const [XB, YB, ZB] = this.blackPoint = blackPoint || new Float32Array(3);
    [this.GR, this.GG, this.GB] = gamma || new Float32Array([1, 1, 1]);
    [this.MXA, this.MYA, this.MZA, this.MXB, this.MYB, this.MZB, this.MXC, this.MYC, this.MZC] = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
    if (XW < 0 || ZW < 0 || YW !== 1) {
      throw new FormatError(\`Invalid WhitePoint components for \${this.name}, no fallback available\`);
    }
    if (XB < 0 || YB < 0 || ZB < 0) {
      info(\`Invalid BlackPoint for \${this.name} [\${XB}, \${YB}, \${ZB}], \` + "falling back to default.");
      this.blackPoint = new Float32Array(3);
    }
    if (this.GR < 0 || this.GG < 0 || this.GB < 0) {
      info(\`Invalid Gamma [\${this.GR}, \${this.GG}, \${this.GB}] for \` + \`\${this.name}, falling back to default.\`);
      this.GR = this.GG = this.GB = 1;
    }
  }
  #matrixProduct(a, b, result) {
    result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];
    result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];
  }
  #toFlat(sourceWhitePoint, LMS, result) {
    result[0] = LMS[0] * 1 / sourceWhitePoint[0];
    result[1] = LMS[1] * 1 / sourceWhitePoint[1];
    result[2] = LMS[2] * 1 / sourceWhitePoint[2];
  }
  #toD65(sourceWhitePoint, LMS, result) {
    const D65X = 0.95047;
    const D65Y = 1;
    const D65Z = 1.08883;
    result[0] = LMS[0] * D65X / sourceWhitePoint[0];
    result[1] = LMS[1] * D65Y / sourceWhitePoint[1];
    result[2] = LMS[2] * D65Z / sourceWhitePoint[2];
  }
  #sRGBTransferFunction(color) {
    if (color <= 0.0031308) {
      return MathClamp(12.92 * color, 0, 1);
    }
    if (color >= 0.99554525) {
      return 1;
    }
    return MathClamp((1 + 0.055) * color ** (1 / 2.4) - 0.055, 0, 1);
  }
  #decodeL(L) {
    if (L < 0) {
      return -this.#decodeL(-L);
    }
    if (L > 8.0) {
      return ((L + 16) / 116) ** 3;
    }
    return L * CalRGBCS.#DECODE_L_CONSTANT;
  }
  #compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {
    if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {
      result[0] = XYZ_Flat[0];
      result[1] = XYZ_Flat[1];
      result[2] = XYZ_Flat[2];
      return;
    }
    const zeroDecodeL = this.#decodeL(0);
    const X_DST = zeroDecodeL;
    const X_SRC = this.#decodeL(sourceBlackPoint[0]);
    const Y_DST = zeroDecodeL;
    const Y_SRC = this.#decodeL(sourceBlackPoint[1]);
    const Z_DST = zeroDecodeL;
    const Z_SRC = this.#decodeL(sourceBlackPoint[2]);
    const X_Scale = (1 - X_DST) / (1 - X_SRC);
    const X_Offset = 1 - X_Scale;
    const Y_Scale = (1 - Y_DST) / (1 - Y_SRC);
    const Y_Offset = 1 - Y_Scale;
    const Z_Scale = (1 - Z_DST) / (1 - Z_SRC);
    const Z_Offset = 1 - Z_Scale;
    result[0] = XYZ_Flat[0] * X_Scale + X_Offset;
    result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;
    result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;
  }
  #normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {
    if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {
      result[0] = XYZ_In[0];
      result[1] = XYZ_In[1];
      result[2] = XYZ_In[2];
      return;
    }
    const LMS = result;
    this.#matrixProduct(CalRGBCS.#BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
    const LMS_Flat = CalRGBCS.#tempNormalizeMatrix;
    this.#toFlat(sourceWhitePoint, LMS, LMS_Flat);
    this.#matrixProduct(CalRGBCS.#BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);
  }
  #normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {
    const LMS = result;
    this.#matrixProduct(CalRGBCS.#BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
    const LMS_D65 = CalRGBCS.#tempNormalizeMatrix;
    this.#toD65(sourceWhitePoint, LMS, LMS_D65);
    this.#matrixProduct(CalRGBCS.#BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);
  }
  #toRgb(src, srcOffset, dest, destOffset, scale) {
    const A = MathClamp(src[srcOffset] * scale, 0, 1);
    const B = MathClamp(src[srcOffset + 1] * scale, 0, 1);
    const C = MathClamp(src[srcOffset + 2] * scale, 0, 1);
    const AGR = A === 1 ? 1 : A ** this.GR;
    const BGG = B === 1 ? 1 : B ** this.GG;
    const CGB = C === 1 ? 1 : C ** this.GB;
    const X = this.MXA * AGR + this.MXB * BGG + this.MXC * CGB;
    const Y = this.MYA * AGR + this.MYB * BGG + this.MYC * CGB;
    const Z = this.MZA * AGR + this.MZB * BGG + this.MZC * CGB;
    const XYZ = CalRGBCS.#tempConvertMatrix1;
    XYZ[0] = X;
    XYZ[1] = Y;
    XYZ[2] = Z;
    const XYZ_Flat = CalRGBCS.#tempConvertMatrix2;
    this.#normalizeWhitePointToFlat(this.whitePoint, XYZ, XYZ_Flat);
    const XYZ_Black = CalRGBCS.#tempConvertMatrix1;
    this.#compensateBlackPoint(this.blackPoint, XYZ_Flat, XYZ_Black);
    const XYZ_D65 = CalRGBCS.#tempConvertMatrix2;
    this.#normalizeWhitePointToD65(CalRGBCS.#FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);
    const SRGB = CalRGBCS.#tempConvertMatrix1;
    this.#matrixProduct(CalRGBCS.#SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);
    dest[destOffset] = this.#sRGBTransferFunction(SRGB[0]) * 255;
    dest[destOffset + 1] = this.#sRGBTransferFunction(SRGB[1]) * 255;
    dest[destOffset + 2] = this.#sRGBTransferFunction(SRGB[2]) * 255;
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    this.#toRgb(src, srcOffset, dest, destOffset, 1);
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    const scale = 1 / ((1 << bits) - 1);
    for (let i = 0; i < count; ++i) {
      this.#toRgb(src, srcOffset, dest, destOffset, scale);
      srcOffset += 3;
      destOffset += 3 + alpha01;
    }
  }
  getOutputLength(inputLength, alpha01) {
    return inputLength * (3 + alpha01) / 3 | 0;
  }
}
class LabCS extends ColorSpace {
  constructor(whitePoint, blackPoint, range) {
    super("Lab", 3);
    if (!whitePoint) {
      throw new FormatError("WhitePoint missing - required for color space Lab");
    }
    [this.XW, this.YW, this.ZW] = whitePoint;
    [this.amin, this.amax, this.bmin, this.bmax] = range || [-100, 100, -100, 100];
    [this.XB, this.YB, this.ZB] = blackPoint || [0, 0, 0];
    if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {
      throw new FormatError("Invalid WhitePoint components, no fallback available");
    }
    if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {
      info("Invalid BlackPoint, falling back to default");
      this.XB = this.YB = this.ZB = 0;
    }
    if (this.amin > this.amax || this.bmin > this.bmax) {
      info("Invalid Range, falling back to defaults");
      this.amin = -100;
      this.amax = 100;
      this.bmin = -100;
      this.bmax = 100;
    }
  }
  #fn_g(x) {
    return x >= 6 / 29 ? x ** 3 : 108 / 841 * (x - 4 / 29);
  }
  #decode(value, high1, low2, high2) {
    return low2 + value * (high2 - low2) / high1;
  }
  #toRgb(src, srcOffset, maxVal, dest, destOffset) {
    let Ls = src[srcOffset];
    let as = src[srcOffset + 1];
    let bs = src[srcOffset + 2];
    if (maxVal !== false) {
      Ls = this.#decode(Ls, maxVal, 0, 100);
      as = this.#decode(as, maxVal, this.amin, this.amax);
      bs = this.#decode(bs, maxVal, this.bmin, this.bmax);
    }
    if (as > this.amax) {
      as = this.amax;
    } else if (as < this.amin) {
      as = this.amin;
    }
    if (bs > this.bmax) {
      bs = this.bmax;
    } else if (bs < this.bmin) {
      bs = this.bmin;
    }
    const M = (Ls + 16) / 116;
    const L = M + as / 500;
    const N = M - bs / 200;
    const X = this.XW * this.#fn_g(L);
    const Y = this.YW * this.#fn_g(M);
    const Z = this.ZW * this.#fn_g(N);
    let r, g, b;
    if (this.ZW < 1) {
      r = X * 3.1339 + Y * -1.617 + Z * -0.4906;
      g = X * -0.9785 + Y * 1.916 + Z * 0.0333;
      b = X * 0.072 + Y * -0.229 + Z * 1.4057;
    } else {
      r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;
      g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;
      b = X * 0.0557 + Y * -0.204 + Z * 1.057;
    }
    dest[destOffset] = Math.sqrt(r) * 255;
    dest[destOffset + 1] = Math.sqrt(g) * 255;
    dest[destOffset + 2] = Math.sqrt(b) * 255;
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    this.#toRgb(src, srcOffset, false, dest, destOffset);
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    const maxVal = (1 << bits) - 1;
    for (let i = 0; i < count; i++) {
      this.#toRgb(src, srcOffset, maxVal, dest, destOffset);
      srcOffset += 3;
      destOffset += 3 + alpha01;
    }
  }
  getOutputLength(inputLength, alpha01) {
    return inputLength * (3 + alpha01) / 3 | 0;
  }
  isDefaultDecode(decodeMap, bpc) {
    return true;
  }
  get usesZeroToOneRange() {
    return shadow(this, "usesZeroToOneRange", false);
  }
}

;// ./src/core/icc_colorspace.js




function fetchSync(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url, false);
  xhr.responseType = "arraybuffer";
  xhr.send(null);
  return xhr.response;
}
class IccColorSpace extends ColorSpace {
  #transformer;
  #convertPixel;
  static #useWasm = true;
  static #wasmUrl = null;
  static #finalizer = new FinalizationRegistry(transformer => {
    qcms_drop_transformer(transformer);
  });
  constructor(iccProfile, name, numComps) {
    if (!IccColorSpace.isUsable) {
      throw new Error("No ICC color space support");
    }
    super(name, numComps);
    let inType;
    switch (numComps) {
      case 1:
        inType = DataType.Gray8;
        this.#convertPixel = (src, srcOffset) => qcms_convert_one(this.#transformer, src[srcOffset] * 255);
        break;
      case 3:
        inType = DataType.RGB8;
        this.#convertPixel = (src, srcOffset) => qcms_convert_three(this.#transformer, src[srcOffset] * 255, src[srcOffset + 1] * 255, src[srcOffset + 2] * 255);
        break;
      case 4:
        inType = DataType.CMYK;
        this.#convertPixel = (src, srcOffset) => qcms_convert_four(this.#transformer, src[srcOffset] * 255, src[srcOffset + 1] * 255, src[srcOffset + 2] * 255, src[srcOffset + 3] * 255);
        break;
      default:
        throw new Error(\`Unsupported number of components: \${numComps}\`);
    }
    this.#transformer = qcms_transformer_from_memory(iccProfile, inType, Intent.Perceptual);
    if (!this.#transformer) {
      throw new Error("Failed to create ICC color space");
    }
    IccColorSpace.#finalizer.register(this, this.#transformer);
  }
  getRgbItem(src, srcOffset, dest, destOffset) {
    QCMS._destBuffer = dest.subarray(destOffset, destOffset + 3);
    this.#convertPixel(src, srcOffset);
    QCMS._destBuffer = null;
  }
  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
    src = src.subarray(srcOffset, srcOffset + count * this.numComps);
    if (bits !== 8) {
      const scale = 255 / ((1 << bits) - 1);
      for (let i = 0, ii = src.length; i < ii; i++) {
        src[i] *= scale;
      }
    }
    QCMS._mustAddAlpha = alpha01 && dest.buffer === src.buffer;
    QCMS._destBuffer = dest.subarray(destOffset, destOffset + count * (3 + alpha01));
    qcms_convert_array(this.#transformer, src);
    QCMS._mustAddAlpha = false;
    QCMS._destBuffer = null;
  }
  getOutputLength(inputLength, alpha01) {
    return inputLength / this.numComps * (3 + alpha01) | 0;
  }
  static setOptions({
    useWasm,
    useWorkerFetch,
    wasmUrl
  }) {
    if (!useWorkerFetch) {
      this.#useWasm = false;
      return;
    }
    this.#useWasm = useWasm;
    this.#wasmUrl = wasmUrl;
  }
  static get isUsable() {
    let isUsable = false;
    if (this.#useWasm) {
      if (this.#wasmUrl) {
        try {
          this._module = QCMS._module = initSync({
            module: fetchSync(\`\${this.#wasmUrl}qcms_bg.wasm\`)
          });
          isUsable = !!this._module;
        } catch (e) {
          warn(\`ICCBased color space: "\${e}".\`);
        }
      } else {
        warn("No ICC color space support due to missing \`wasmUrl\` API option");
      }
    }
    return shadow(this, "isUsable", isUsable);
  }
}
class CmykICCBasedCS extends IccColorSpace {
  static #iccUrl;
  constructor() {
    const iccProfile = new Uint8Array(fetchSync(\`\${CmykICCBasedCS.#iccUrl}CGATS001Compat-v2-micro.icc\`));
    super(iccProfile, "DeviceCMYK", 4);
  }
  static setOptions({
    iccUrl
  }) {
    this.#iccUrl = iccUrl;
  }
  static get isUsable() {
    let isUsable = false;
    if (IccColorSpace.isUsable) {
      if (this.#iccUrl) {
        isUsable = true;
      } else {
        warn("No CMYK ICC profile support due to missing \`iccUrl\` API option");
      }
    }
    return shadow(this, "isUsable", isUsable);
  }
}

;// ./src/core/stream.js


class Stream extends BaseStream {
  constructor(arrayBuffer, start, length, dict) {
    super();
    this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);
    this.start = start || 0;
    this.pos = this.start;
    this.end = start + length || this.bytes.length;
    this.dict = dict;
  }
  get length() {
    return this.end - this.start;
  }
  get isEmpty() {
    return this.length === 0;
  }
  getByte() {
    if (this.pos >= this.end) {
      return -1;
    }
    return this.bytes[this.pos++];
  }
  getBytes(length) {
    const bytes = this.bytes;
    const pos = this.pos;
    const strEnd = this.end;
    if (!length) {
      return bytes.subarray(pos, strEnd);
    }
    let end = pos + length;
    if (end > strEnd) {
      end = strEnd;
    }
    this.pos = end;
    return bytes.subarray(pos, end);
  }
  getByteRange(begin, end) {
    if (begin < 0) {
      begin = 0;
    }
    if (end > this.end) {
      end = this.end;
    }
    return this.bytes.subarray(begin, end);
  }
  reset() {
    this.pos = this.start;
  }
  moveStart() {
    this.start = this.pos;
  }
  makeSubStream(start, length, dict = null) {
    return new Stream(this.bytes.buffer, start, length, dict);
  }
}
class StringStream extends Stream {
  constructor(str) {
    super(stringToBytes(str));
  }
}
class NullStream extends Stream {
  constructor() {
    super(new Uint8Array(0));
  }
}

;// ./src/core/chunked_stream.js



class ChunkedStream extends Stream {
  constructor(length, chunkSize, manager) {
    super(new Uint8Array(length), 0, length, null);
    this.chunkSize = chunkSize;
    this._loadedChunks = new Set();
    this.numChunks = Math.ceil(length / chunkSize);
    this.manager = manager;
    this.progressiveDataLength = 0;
    this.lastSuccessfulEnsureByteChunk = -1;
  }
  getMissingChunks() {
    const chunks = [];
    for (let chunk = 0, n = this.numChunks; chunk < n; ++chunk) {
      if (!this._loadedChunks.has(chunk)) {
        chunks.push(chunk);
      }
    }
    return chunks;
  }
  get numChunksLoaded() {
    return this._loadedChunks.size;
  }
  get isDataLoaded() {
    return this.numChunksLoaded === this.numChunks;
  }
  onReceiveData(begin, chunk) {
    const chunkSize = this.chunkSize;
    if (begin % chunkSize !== 0) {
      throw new Error(\`Bad begin offset: \${begin}\`);
    }
    const end = begin + chunk.byteLength;
    if (end % chunkSize !== 0 && end !== this.bytes.length) {
      throw new Error(\`Bad end offset: \${end}\`);
    }
    this.bytes.set(new Uint8Array(chunk), begin);
    const beginChunk = Math.floor(begin / chunkSize);
    const endChunk = Math.floor((end - 1) / chunkSize) + 1;
    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
      this._loadedChunks.add(curChunk);
    }
  }
  onReceiveProgressiveData(data) {
    let position = this.progressiveDataLength;
    const beginChunk = Math.floor(position / this.chunkSize);
    this.bytes.set(new Uint8Array(data), position);
    position += data.byteLength;
    this.progressiveDataLength = position;
    const endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);
    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
      this._loadedChunks.add(curChunk);
    }
  }
  ensureByte(pos) {
    if (pos < this.progressiveDataLength) {
      return;
    }
    const chunk = Math.floor(pos / this.chunkSize);
    if (chunk > this.numChunks) {
      return;
    }
    if (chunk === this.lastSuccessfulEnsureByteChunk) {
      return;
    }
    if (!this._loadedChunks.has(chunk)) {
      throw new MissingDataException(pos, pos + 1);
    }
    this.lastSuccessfulEnsureByteChunk = chunk;
  }
  ensureRange(begin, end) {
    if (begin >= end) {
      return;
    }
    if (end <= this.progressiveDataLength) {
      return;
    }
    const beginChunk = Math.floor(begin / this.chunkSize);
    if (beginChunk > this.numChunks) {
      return;
    }
    const endChunk = Math.min(Math.floor((end - 1) / this.chunkSize) + 1, this.numChunks);
    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {
      if (!this._loadedChunks.has(chunk)) {
        throw new MissingDataException(begin, end);
      }
    }
  }
  nextEmptyChunk(beginChunk) {
    const numChunks = this.numChunks;
    for (let i = 0; i < numChunks; ++i) {
      const chunk = (beginChunk + i) % numChunks;
      if (!this._loadedChunks.has(chunk)) {
        return chunk;
      }
    }
    return null;
  }
  hasChunk(chunk) {
    return this._loadedChunks.has(chunk);
  }
  getByte() {
    const pos = this.pos;
    if (pos >= this.end) {
      return -1;
    }
    if (pos >= this.progressiveDataLength) {
      this.ensureByte(pos);
    }
    return this.bytes[this.pos++];
  }
  getBytes(length) {
    const bytes = this.bytes;
    const pos = this.pos;
    const strEnd = this.end;
    if (!length) {
      if (strEnd > this.progressiveDataLength) {
        this.ensureRange(pos, strEnd);
      }
      return bytes.subarray(pos, strEnd);
    }
    let end = pos + length;
    if (end > strEnd) {
      end = strEnd;
    }
    if (end > this.progressiveDataLength) {
      this.ensureRange(pos, end);
    }
    this.pos = end;
    return bytes.subarray(pos, end);
  }
  getByteRange(begin, end) {
    if (begin < 0) {
      begin = 0;
    }
    if (end > this.end) {
      end = this.end;
    }
    if (end > this.progressiveDataLength) {
      this.ensureRange(begin, end);
    }
    return this.bytes.subarray(begin, end);
  }
  makeSubStream(start, length, dict = null) {
    if (length) {
      if (start + length > this.progressiveDataLength) {
        this.ensureRange(start, start + length);
      }
    } else if (start >= this.progressiveDataLength) {
      this.ensureByte(start);
    }
    function ChunkedStreamSubstream() {}
    ChunkedStreamSubstream.prototype = Object.create(this);
    ChunkedStreamSubstream.prototype.getMissingChunks = function () {
      const chunkSize = this.chunkSize;
      const beginChunk = Math.floor(this.start / chunkSize);
      const endChunk = Math.floor((this.end - 1) / chunkSize) + 1;
      const missingChunks = [];
      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {
        if (!this._loadedChunks.has(chunk)) {
          missingChunks.push(chunk);
        }
      }
      return missingChunks;
    };
    Object.defineProperty(ChunkedStreamSubstream.prototype, "isDataLoaded", {
      get() {
        if (this.numChunksLoaded === this.numChunks) {
          return true;
        }
        return this.getMissingChunks().length === 0;
      },
      configurable: true
    });
    const subStream = new ChunkedStreamSubstream();
    subStream.pos = subStream.start = start;
    subStream.end = start + length || this.end;
    subStream.dict = dict;
    return subStream;
  }
  getBaseStreams() {
    return [this];
  }
}
class ChunkedStreamManager {
  constructor(pdfNetworkStream, args) {
    this.length = args.length;
    this.chunkSize = args.rangeChunkSize;
    this.stream = new ChunkedStream(this.length, this.chunkSize, this);
    this.pdfNetworkStream = pdfNetworkStream;
    this.disableAutoFetch = args.disableAutoFetch;
    this.msgHandler = args.msgHandler;
    this.currRequestId = 0;
    this._chunksNeededByRequest = new Map();
    this._requestsByChunk = new Map();
    this._promisesByRequest = new Map();
    this.progressiveDataLength = 0;
    this.aborted = false;
    this._loadedStreamCapability = Promise.withResolvers();
  }
  sendRequest(begin, end) {
    const rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);
    if (!rangeReader.isStreamingSupported) {
      rangeReader.onProgress = this.onProgress.bind(this);
    }
    let chunks = [],
      loaded = 0;
    return new Promise((resolve, reject) => {
      const readChunk = ({
        value,
        done
      }) => {
        try {
          if (done) {
            const chunkData = arrayBuffersToBytes(chunks);
            chunks = null;
            resolve(chunkData);
            return;
          }
          loaded += value.byteLength;
          if (rangeReader.isStreamingSupported) {
            this.onProgress({
              loaded
            });
          }
          chunks.push(value);
          rangeReader.read().then(readChunk, reject);
        } catch (e) {
          reject(e);
        }
      };
      rangeReader.read().then(readChunk, reject);
    }).then(data => {
      if (this.aborted) {
        return;
      }
      this.onReceiveData({
        chunk: data,
        begin
      });
    });
  }
  requestAllChunks(noFetch = false) {
    if (!noFetch) {
      const missingChunks = this.stream.getMissingChunks();
      this._requestChunks(missingChunks);
    }
    return this._loadedStreamCapability.promise;
  }
  _requestChunks(chunks) {
    const requestId = this.currRequestId++;
    const chunksNeeded = new Set();
    this._chunksNeededByRequest.set(requestId, chunksNeeded);
    for (const chunk of chunks) {
      if (!this.stream.hasChunk(chunk)) {
        chunksNeeded.add(chunk);
      }
    }
    if (chunksNeeded.size === 0) {
      return Promise.resolve();
    }
    const capability = Promise.withResolvers();
    this._promisesByRequest.set(requestId, capability);
    const chunksToRequest = [];
    for (const chunk of chunksNeeded) {
      let requestIds = this._requestsByChunk.get(chunk);
      if (!requestIds) {
        requestIds = [];
        this._requestsByChunk.set(chunk, requestIds);
        chunksToRequest.push(chunk);
      }
      requestIds.push(requestId);
    }
    if (chunksToRequest.length > 0) {
      const groupedChunksToRequest = this.groupChunks(chunksToRequest);
      for (const groupedChunk of groupedChunksToRequest) {
        const begin = groupedChunk.beginChunk * this.chunkSize;
        const end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);
        this.sendRequest(begin, end).catch(capability.reject);
      }
    }
    return capability.promise.catch(reason => {
      if (this.aborted) {
        return;
      }
      throw reason;
    });
  }
  getStream() {
    return this.stream;
  }
  requestRange(begin, end) {
    end = Math.min(end, this.length);
    const beginChunk = this.getBeginChunk(begin);
    const endChunk = this.getEndChunk(end);
    const chunks = [];
    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {
      chunks.push(chunk);
    }
    return this._requestChunks(chunks);
  }
  requestRanges(ranges = []) {
    const chunksToRequest = [];
    for (const range of ranges) {
      const beginChunk = this.getBeginChunk(range.begin);
      const endChunk = this.getEndChunk(range.end);
      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {
        if (!chunksToRequest.includes(chunk)) {
          chunksToRequest.push(chunk);
        }
      }
    }
    chunksToRequest.sort((a, b) => a - b);
    return this._requestChunks(chunksToRequest);
  }
  groupChunks(chunks) {
    const groupedChunks = [];
    let beginChunk = -1;
    let prevChunk = -1;
    for (let i = 0, ii = chunks.length; i < ii; ++i) {
      const chunk = chunks[i];
      if (beginChunk < 0) {
        beginChunk = chunk;
      }
      if (prevChunk >= 0 && prevChunk + 1 !== chunk) {
        groupedChunks.push({
          beginChunk,
          endChunk: prevChunk + 1
        });
        beginChunk = chunk;
      }
      if (i + 1 === chunks.length) {
        groupedChunks.push({
          beginChunk,
          endChunk: chunk + 1
        });
      }
      prevChunk = chunk;
    }
    return groupedChunks;
  }
  onProgress(args) {
    this.msgHandler.send("DocProgress", {
      loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,
      total: this.length
    });
  }
  onReceiveData(args) {
    const chunk = args.chunk;
    const isProgressive = args.begin === undefined;
    const begin = isProgressive ? this.progressiveDataLength : args.begin;
    const end = begin + chunk.byteLength;
    const beginChunk = Math.floor(begin / this.chunkSize);
    const endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);
    if (isProgressive) {
      this.stream.onReceiveProgressiveData(chunk);
      this.progressiveDataLength = end;
    } else {
      this.stream.onReceiveData(begin, chunk);
    }
    if (this.stream.isDataLoaded) {
      this._loadedStreamCapability.resolve(this.stream);
    }
    const loadedRequests = [];
    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
      const requestIds = this._requestsByChunk.get(curChunk);
      if (!requestIds) {
        continue;
      }
      this._requestsByChunk.delete(curChunk);
      for (const requestId of requestIds) {
        const chunksNeeded = this._chunksNeededByRequest.get(requestId);
        if (chunksNeeded.has(curChunk)) {
          chunksNeeded.delete(curChunk);
        }
        if (chunksNeeded.size > 0) {
          continue;
        }
        loadedRequests.push(requestId);
      }
    }
    if (!this.disableAutoFetch && this._requestsByChunk.size === 0) {
      let nextEmptyChunk;
      if (this.stream.numChunksLoaded === 1) {
        const lastChunk = this.stream.numChunks - 1;
        if (!this.stream.hasChunk(lastChunk)) {
          nextEmptyChunk = lastChunk;
        }
      } else {
        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);
      }
      if (Number.isInteger(nextEmptyChunk)) {
        this._requestChunks([nextEmptyChunk]);
      }
    }
    for (const requestId of loadedRequests) {
      const capability = this._promisesByRequest.get(requestId);
      this._promisesByRequest.delete(requestId);
      capability.resolve();
    }
    this.msgHandler.send("DocProgress", {
      loaded: this.stream.numChunksLoaded * this.chunkSize,
      total: this.length
    });
  }
  onError(err) {
    this._loadedStreamCapability.reject(err);
  }
  getBeginChunk(begin) {
    return Math.floor(begin / this.chunkSize);
  }
  getEndChunk(end) {
    return Math.floor((end - 1) / this.chunkSize) + 1;
  }
  abort(reason) {
    this.aborted = true;
    this.pdfNetworkStream?.cancelAllRequests(reason);
    for (const capability of this._promisesByRequest.values()) {
      capability.reject(reason);
    }
  }
}

;// ./src/shared/image_utils.js

function convertToRGBA(params) {
  switch (params.kind) {
    case ImageKind.GRAYSCALE_1BPP:
      return convertBlackAndWhiteToRGBA(params);
    case ImageKind.RGB_24BPP:
      return convertRGBToRGBA(params);
  }
  return null;
}
function convertBlackAndWhiteToRGBA({
  src,
  srcPos = 0,
  dest,
  width,
  height,
  nonBlackColor = 0xffffffff,
  inverseDecode = false
}) {
  const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;
  const [zeroMapping, oneMapping] = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor];
  const widthInSource = width >> 3;
  const widthRemainder = width & 7;
  const srcLength = src.length;
  dest = new Uint32Array(dest.buffer);
  let destPos = 0;
  for (let i = 0; i < height; i++) {
    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {
      const elem = srcPos < srcLength ? src[srcPos] : 255;
      dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;
      dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;
      dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;
      dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;
      dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;
      dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;
      dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;
      dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;
    }
    if (widthRemainder === 0) {
      continue;
    }
    const elem = srcPos < srcLength ? src[srcPos++] : 255;
    for (let j = 0; j < widthRemainder; j++) {
      dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;
    }
  }
  return {
    srcPos,
    destPos
  };
}
function convertRGBToRGBA({
  src,
  srcPos = 0,
  dest,
  destPos = 0,
  width,
  height
}) {
  let i = 0;
  const len = width * height * 3;
  const len32 = len >> 2;
  const src32 = new Uint32Array(src.buffer, srcPos, len32);
  if (FeatureTest.isLittleEndian) {
    for (; i < len32 - 2; i += 3, destPos += 4) {
      const s1 = src32[i];
      const s2 = src32[i + 1];
      const s3 = src32[i + 2];
      dest[destPos] = s1 | 0xff000000;
      dest[destPos + 1] = s1 >>> 24 | s2 << 8 | 0xff000000;
      dest[destPos + 2] = s2 >>> 16 | s3 << 16 | 0xff000000;
      dest[destPos + 3] = s3 >>> 8 | 0xff000000;
    }
    for (let j = i * 4, jj = srcPos + len; j < jj; j += 3) {
      dest[destPos++] = src[j] | src[j + 1] << 8 | src[j + 2] << 16 | 0xff000000;
    }
  } else {
    for (; i < len32 - 2; i += 3, destPos += 4) {
      const s1 = src32[i];
      const s2 = src32[i + 1];
      const s3 = src32[i + 2];
      dest[destPos] = s1 | 0xff;
      dest[destPos + 1] = s1 << 24 | s2 >>> 8 | 0xff;
      dest[destPos + 2] = s2 << 16 | s3 >>> 16 | 0xff;
      dest[destPos + 3] = s3 << 8 | 0xff;
    }
    for (let j = i * 4, jj = srcPos + len; j < jj; j += 3) {
      dest[destPos++] = src[j] << 24 | src[j + 1] << 16 | src[j + 2] << 8 | 0xff;
    }
  }
  return {
    srcPos: srcPos + len,
    destPos
  };
}
function grayToRGBA(src, dest) {
  if (FeatureTest.isLittleEndian) {
    for (let i = 0, ii = src.length; i < ii; i++) {
      dest[i] = src[i] * 0x10101 | 0xff000000;
    }
  } else {
    for (let i = 0, ii = src.length; i < ii; i++) {
      dest[i] = src[i] * 0x1010100 | 0x000000ff;
    }
  }
}

;// ./src/core/image_resizer.js



const MIN_IMAGE_DIM = 2048;
const MAX_IMAGE_DIM = 65537;
const MAX_ERROR = 128;
class ImageResizer {
  static #goodSquareLength = MIN_IMAGE_DIM;
  static #isImageDecoderSupported = FeatureTest.isImageDecoderSupported;
  constructor(imgData, isMask) {
    this._imgData = imgData;
    this._isMask = isMask;
  }
  static get canUseImageDecoder() {
    return shadow(this, "canUseImageDecoder", this.#isImageDecoderSupported ? ImageDecoder.isTypeSupported("image/bmp") : Promise.resolve(false));
  }
  static needsToBeResized(width, height) {
    if (width <= this.#goodSquareLength && height <= this.#goodSquareLength) {
      return false;
    }
    const {
      MAX_DIM
    } = this;
    if (width > MAX_DIM || height > MAX_DIM) {
      return true;
    }
    const area = width * height;
    if (this._hasMaxArea) {
      return area > this.MAX_AREA;
    }
    if (area < this.#goodSquareLength ** 2) {
      return false;
    }
    if (this._areGoodDims(width, height)) {
      this.#goodSquareLength = Math.max(this.#goodSquareLength, Math.floor(Math.sqrt(width * height)));
      return false;
    }
    this.#goodSquareLength = this._guessMax(this.#goodSquareLength, MAX_DIM, MAX_ERROR, 0);
    const maxArea = this.MAX_AREA = this.#goodSquareLength ** 2;
    return area > maxArea;
  }
  static get MAX_DIM() {
    return shadow(this, "MAX_DIM", this._guessMax(MIN_IMAGE_DIM, MAX_IMAGE_DIM, 0, 1));
  }
  static get MAX_AREA() {
    this._hasMaxArea = true;
    return shadow(this, "MAX_AREA", this._guessMax(this.#goodSquareLength, this.MAX_DIM, MAX_ERROR, 0) ** 2);
  }
  static set MAX_AREA(area) {
    if (area >= 0) {
      this._hasMaxArea = true;
      shadow(this, "MAX_AREA", area);
    }
  }
  static setOptions({
    canvasMaxAreaInBytes = -1,
    isImageDecoderSupported = false
  }) {
    if (!this._hasMaxArea) {
      this.MAX_AREA = canvasMaxAreaInBytes >> 2;
    }
    this.#isImageDecoderSupported = isImageDecoderSupported;
  }
  static _areGoodDims(width, height) {
    try {
      const canvas = new OffscreenCanvas(width, height);
      const ctx = canvas.getContext("2d");
      ctx.fillRect(0, 0, 1, 1);
      const opacity = ctx.getImageData(0, 0, 1, 1).data[3];
      canvas.width = canvas.height = 1;
      return opacity !== 0;
    } catch {
      return false;
    }
  }
  static _guessMax(start, end, tolerance, defaultHeight) {
    while (start + tolerance + 1 < end) {
      const middle = Math.floor((start + end) / 2);
      const height = defaultHeight || middle;
      if (this._areGoodDims(middle, height)) {
        start = middle;
      } else {
        end = middle;
      }
    }
    return start;
  }
  static async createImage(imgData, isMask = false) {
    return new ImageResizer(imgData, isMask)._createImage();
  }
  async _createImage() {
    const {
      _imgData: imgData
    } = this;
    const {
      width,
      height
    } = imgData;
    if (width * height * 4 > MAX_INT_32) {
      const result = this.#rescaleImageData();
      if (result) {
        return result;
      }
    }
    const data = this._encodeBMP();
    let decoder, imagePromise;
    if (await ImageResizer.canUseImageDecoder) {
      decoder = new ImageDecoder({
        data,
        type: "image/bmp",
        preferAnimation: false,
        transfer: [data.buffer]
      });
      imagePromise = decoder.decode().catch(reason => {
        warn(\`BMP image decoding failed: \${reason}\`);
        return createImageBitmap(new Blob([this._encodeBMP().buffer], {
          type: "image/bmp"
        }));
      }).finally(() => {
        decoder.close();
      });
    } else {
      imagePromise = createImageBitmap(new Blob([data.buffer], {
        type: "image/bmp"
      }));
    }
    const {
      MAX_AREA,
      MAX_DIM
    } = ImageResizer;
    const minFactor = Math.max(width / MAX_DIM, height / MAX_DIM, Math.sqrt(width * height / MAX_AREA));
    const firstFactor = Math.max(minFactor, 2);
    const factor = Math.round(10 * (minFactor + 1.25)) / 10 / firstFactor;
    const N = Math.floor(Math.log2(factor));
    const steps = new Array(N + 2).fill(2);
    steps[0] = firstFactor;
    steps.splice(-1, 1, factor / (1 << N));
    let newWidth = width;
    let newHeight = height;
    const result = await imagePromise;
    let bitmap = result.image || result;
    for (const step of steps) {
      const prevWidth = newWidth;
      const prevHeight = newHeight;
      newWidth = Math.floor(newWidth / step) - 1;
      newHeight = Math.floor(newHeight / step) - 1;
      const canvas = new OffscreenCanvas(newWidth, newHeight);
      const ctx = canvas.getContext("2d");
      ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);
      bitmap.close();
      bitmap = canvas.transferToImageBitmap();
    }
    imgData.data = null;
    imgData.bitmap = bitmap;
    imgData.width = newWidth;
    imgData.height = newHeight;
    return imgData;
  }
  #rescaleImageData() {
    const {
      _imgData: imgData
    } = this;
    const {
      data,
      width,
      height,
      kind
    } = imgData;
    const rgbaSize = width * height * 4;
    const K = Math.ceil(Math.log2(rgbaSize / MAX_INT_32));
    const newWidth = width >> K;
    const newHeight = height >> K;
    let rgbaData;
    let maxHeight = height;
    try {
      rgbaData = new Uint8Array(rgbaSize);
    } catch {
      let n = Math.floor(Math.log2(rgbaSize + 1));
      while (true) {
        try {
          rgbaData = new Uint8Array(2 ** n - 1);
          break;
        } catch {
          n -= 1;
        }
      }
      maxHeight = Math.floor((2 ** n - 1) / (width * 4));
      const newSize = width * maxHeight * 4;
      if (newSize < rgbaData.length) {
        rgbaData = new Uint8Array(newSize);
      }
    }
    const src32 = new Uint32Array(rgbaData.buffer);
    const dest32 = new Uint32Array(newWidth * newHeight);
    let srcPos = 0;
    let newIndex = 0;
    const step = Math.ceil(height / maxHeight);
    const remainder = height % maxHeight === 0 ? height : height % maxHeight;
    for (let k = 0; k < step; k++) {
      const h = k < step - 1 ? maxHeight : remainder;
      ({
        srcPos
      } = convertToRGBA({
        kind,
        src: data,
        dest: src32,
        width,
        height: h,
        inverseDecode: this._isMask,
        srcPos
      }));
      for (let i = 0, ii = h >> K; i < ii; i++) {
        const buf = src32.subarray((i << K) * width);
        for (let j = 0; j < newWidth; j++) {
          dest32[newIndex++] = buf[j << K];
        }
      }
    }
    if (ImageResizer.needsToBeResized(newWidth, newHeight)) {
      imgData.data = dest32;
      imgData.width = newWidth;
      imgData.height = newHeight;
      imgData.kind = ImageKind.RGBA_32BPP;
      return null;
    }
    const canvas = new OffscreenCanvas(newWidth, newHeight);
    const ctx = canvas.getContext("2d", {
      willReadFrequently: true
    });
    ctx.putImageData(new ImageData(new Uint8ClampedArray(dest32.buffer), newWidth, newHeight), 0, 0);
    imgData.data = null;
    imgData.bitmap = canvas.transferToImageBitmap();
    imgData.width = newWidth;
    imgData.height = newHeight;
    return imgData;
  }
  _encodeBMP() {
    const {
      width,
      height,
      kind
    } = this._imgData;
    let data = this._imgData.data;
    let bitPerPixel;
    let colorTable = new Uint8Array(0);
    let maskTable = colorTable;
    let compression = 0;
    switch (kind) {
      case ImageKind.GRAYSCALE_1BPP:
        {
          bitPerPixel = 1;
          colorTable = new Uint8Array(this._isMask ? [255, 255, 255, 255, 0, 0, 0, 0] : [0, 0, 0, 0, 255, 255, 255, 255]);
          const rowLen = width + 7 >> 3;
          const rowSize = rowLen + 3 & -4;
          if (rowLen !== rowSize) {
            const newData = new Uint8Array(rowSize * height);
            let k = 0;
            for (let i = 0, ii = height * rowLen; i < ii; i += rowLen, k += rowSize) {
              newData.set(data.subarray(i, i + rowLen), k);
            }
            data = newData;
          }
          break;
        }
      case ImageKind.RGB_24BPP:
        {
          bitPerPixel = 24;
          if (width & 3) {
            const rowLen = 3 * width;
            const rowSize = rowLen + 3 & -4;
            const extraLen = rowSize - rowLen;
            const newData = new Uint8Array(rowSize * height);
            let k = 0;
            for (let i = 0, ii = height * rowLen; i < ii; i += rowLen) {
              const row = data.subarray(i, i + rowLen);
              for (let j = 0; j < rowLen; j += 3) {
                newData[k++] = row[j + 2];
                newData[k++] = row[j + 1];
                newData[k++] = row[j];
              }
              k += extraLen;
            }
            data = newData;
          } else {
            for (let i = 0, ii = data.length; i < ii; i += 3) {
              const tmp = data[i];
              data[i] = data[i + 2];
              data[i + 2] = tmp;
            }
          }
          break;
        }
      case ImageKind.RGBA_32BPP:
        bitPerPixel = 32;
        compression = 3;
        maskTable = new Uint8Array(4 + 4 + 4 + 4 + 52);
        const view = new DataView(maskTable.buffer);
        if (FeatureTest.isLittleEndian) {
          view.setUint32(0, 0x000000ff, true);
          view.setUint32(4, 0x0000ff00, true);
          view.setUint32(8, 0x00ff0000, true);
          view.setUint32(12, 0xff000000, true);
        } else {
          view.setUint32(0, 0xff000000, true);
          view.setUint32(4, 0x00ff0000, true);
          view.setUint32(8, 0x0000ff00, true);
          view.setUint32(12, 0x000000ff, true);
        }
        break;
      default:
        throw new Error("invalid format");
    }
    let i = 0;
    const headerLength = 40 + maskTable.length;
    const fileLength = 14 + headerLength + colorTable.length + data.length;
    const bmpData = new Uint8Array(fileLength);
    const view = new DataView(bmpData.buffer);
    view.setUint16(i, 0x4d42, true);
    i += 2;
    view.setUint32(i, fileLength, true);
    i += 4;
    view.setUint32(i, 0, true);
    i += 4;
    view.setUint32(i, 14 + headerLength + colorTable.length, true);
    i += 4;
    view.setUint32(i, headerLength, true);
    i += 4;
    view.setInt32(i, width, true);
    i += 4;
    view.setInt32(i, -height, true);
    i += 4;
    view.setUint16(i, 1, true);
    i += 2;
    view.setUint16(i, bitPerPixel, true);
    i += 2;
    view.setUint32(i, compression, true);
    i += 4;
    view.setUint32(i, 0, true);
    i += 4;
    view.setInt32(i, 0, true);
    i += 4;
    view.setInt32(i, 0, true);
    i += 4;
    view.setUint32(i, colorTable.length / 4, true);
    i += 4;
    view.setUint32(i, 0, true);
    i += 4;
    bmpData.set(maskTable, i);
    i += maskTable.length;
    bmpData.set(colorTable, i);
    i += colorTable.length;
    bmpData.set(data, i);
    return bmpData;
  }
}

;// ./src/core/decode_stream.js


const emptyBuffer = new Uint8Array(0);
class DecodeStream extends BaseStream {
  constructor(maybeMinBufferLength) {
    super();
    this._rawMinBufferLength = maybeMinBufferLength || 0;
    this.pos = 0;
    this.bufferLength = 0;
    this.eof = false;
    this.buffer = emptyBuffer;
    this.minBufferLength = 512;
    if (maybeMinBufferLength) {
      while (this.minBufferLength < maybeMinBufferLength) {
        this.minBufferLength *= 2;
      }
    }
  }
  get isEmpty() {
    while (!this.eof && this.bufferLength === 0) {
      this.readBlock();
    }
    return this.bufferLength === 0;
  }
  ensureBuffer(requested) {
    const buffer = this.buffer;
    if (requested <= buffer.byteLength) {
      return buffer;
    }
    let size = this.minBufferLength;
    while (size < requested) {
      size *= 2;
    }
    const buffer2 = new Uint8Array(size);
    buffer2.set(buffer);
    return this.buffer = buffer2;
  }
  getByte() {
    const pos = this.pos;
    while (this.bufferLength <= pos) {
      if (this.eof) {
        return -1;
      }
      this.readBlock();
    }
    return this.buffer[this.pos++];
  }
  getBytes(length, decoderOptions = null) {
    const pos = this.pos;
    let end;
    if (length) {
      this.ensureBuffer(pos + length);
      end = pos + length;
      while (!this.eof && this.bufferLength < end) {
        this.readBlock(decoderOptions);
      }
      const bufEnd = this.bufferLength;
      if (end > bufEnd) {
        end = bufEnd;
      }
    } else {
      while (!this.eof) {
        this.readBlock(decoderOptions);
      }
      end = this.bufferLength;
    }
    this.pos = end;
    return this.buffer.subarray(pos, end);
  }
  async getImageData(length, decoderOptions) {
    if (!this.canAsyncDecodeImageFromBuffer) {
      if (this.isAsyncDecoder) {
        return this.decodeImage(null, decoderOptions);
      }
      return this.getBytes(length, decoderOptions);
    }
    const data = await this.stream.asyncGetBytes();
    return this.decodeImage(data, decoderOptions);
  }
  reset() {
    this.pos = 0;
  }
  makeSubStream(start, length, dict = null) {
    if (length === undefined) {
      while (!this.eof) {
        this.readBlock();
      }
    } else {
      const end = start + length;
      while (this.bufferLength <= end && !this.eof) {
        this.readBlock();
      }
    }
    return new Stream(this.buffer, start, length, dict);
  }
  getBaseStreams() {
    return this.str ? this.str.getBaseStreams() : null;
  }
}
class StreamsSequenceStream extends DecodeStream {
  constructor(streams, onError = null) {
    streams = streams.filter(s => s instanceof BaseStream);
    let maybeLength = 0;
    for (const stream of streams) {
      maybeLength += stream instanceof DecodeStream ? stream._rawMinBufferLength : stream.length;
    }
    super(maybeLength);
    this.streams = streams;
    this._onError = onError;
  }
  readBlock() {
    const streams = this.streams;
    if (streams.length === 0) {
      this.eof = true;
      return;
    }
    const stream = streams.shift();
    let chunk;
    try {
      chunk = stream.getBytes();
    } catch (reason) {
      if (this._onError) {
        this._onError(reason, stream.dict?.objId);
        return;
      }
      throw reason;
    }
    const bufferLength = this.bufferLength;
    const newLength = bufferLength + chunk.length;
    const buffer = this.ensureBuffer(newLength);
    buffer.set(chunk, bufferLength);
    this.bufferLength = newLength;
  }
  getBaseStreams() {
    const baseStreamsBuf = [];
    for (const stream of this.streams) {
      const baseStreams = stream.getBaseStreams();
      if (baseStreams) {
        baseStreamsBuf.push(...baseStreams);
      }
    }
    return baseStreamsBuf.length > 0 ? baseStreamsBuf : null;
  }
}

;// ./src/core/colorspace_utils.js





class ColorSpaceUtils {
  static parse({
    cs,
    xref,
    resources = null,
    pdfFunctionFactory,
    globalColorSpaceCache,
    localColorSpaceCache,
    asyncIfNotCached = false
  }) {
    const options = {
      xref,
      resources,
      pdfFunctionFactory,
      globalColorSpaceCache,
      localColorSpaceCache
    };
    let csName, csRef, parsedCS;
    if (cs instanceof Ref) {
      csRef = cs;
      const cachedCS = globalColorSpaceCache.getByRef(csRef) || localColorSpaceCache.getByRef(csRef);
      if (cachedCS) {
        return cachedCS;
      }
      cs = xref.fetch(cs);
    }
    if (cs instanceof Name) {
      csName = cs.name;
      const cachedCS = localColorSpaceCache.getByName(csName);
      if (cachedCS) {
        return cachedCS;
      }
    }
    try {
      parsedCS = this.#parse(cs, options);
    } catch (ex) {
      if (asyncIfNotCached && !(ex instanceof MissingDataException)) {
        return Promise.reject(ex);
      }
      throw ex;
    }
    if (csName || csRef) {
      localColorSpaceCache.set(csName, csRef, parsedCS);
      if (csRef) {
        globalColorSpaceCache.set(null, csRef, parsedCS);
      }
    }
    return asyncIfNotCached ? Promise.resolve(parsedCS) : parsedCS;
  }
  static #subParse(cs, options) {
    const {
      globalColorSpaceCache
    } = options;
    let csRef;
    if (cs instanceof Ref) {
      csRef = cs;
      const cachedCS = globalColorSpaceCache.getByRef(csRef);
      if (cachedCS) {
        return cachedCS;
      }
    }
    const parsedCS = this.#parse(cs, options);
    if (csRef) {
      globalColorSpaceCache.set(null, csRef, parsedCS);
    }
    return parsedCS;
  }
  static #parse(cs, options) {
    const {
      xref,
      resources,
      pdfFunctionFactory,
      globalColorSpaceCache
    } = options;
    cs = xref.fetchIfRef(cs);
    if (cs instanceof Name) {
      switch (cs.name) {
        case "G":
        case "DeviceGray":
          return this.gray;
        case "RGB":
        case "DeviceRGB":
          return this.rgb;
        case "DeviceRGBA":
          return this.rgba;
        case "CMYK":
        case "DeviceCMYK":
          return this.cmyk;
        case "Pattern":
          return new PatternCS(null);
        default:
          if (resources instanceof Dict) {
            const colorSpaces = resources.get("ColorSpace");
            if (colorSpaces instanceof Dict) {
              const resourcesCS = colorSpaces.get(cs.name);
              if (resourcesCS) {
                if (resourcesCS instanceof Name) {
                  return this.#parse(resourcesCS, options);
                }
                cs = resourcesCS;
                break;
              }
            }
          }
          warn(\`Unrecognized ColorSpace: \${cs.name}\`);
          return this.gray;
      }
    }
    if (Array.isArray(cs)) {
      const mode = xref.fetchIfRef(cs[0]).name;
      let params, numComps, baseCS, whitePoint, blackPoint, gamma;
      switch (mode) {
        case "G":
        case "DeviceGray":
          return this.gray;
        case "RGB":
        case "DeviceRGB":
          return this.rgb;
        case "CMYK":
        case "DeviceCMYK":
          return this.cmyk;
        case "CalGray":
          params = xref.fetchIfRef(cs[1]);
          whitePoint = params.getArray("WhitePoint");
          blackPoint = params.getArray("BlackPoint");
          gamma = params.get("Gamma");
          return new CalGrayCS(whitePoint, blackPoint, gamma);
        case "CalRGB":
          params = xref.fetchIfRef(cs[1]);
          whitePoint = params.getArray("WhitePoint");
          blackPoint = params.getArray("BlackPoint");
          gamma = params.getArray("Gamma");
          const matrix = params.getArray("Matrix");
          return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);
        case "ICCBased":
          const isRef = cs[1] instanceof Ref;
          if (isRef) {
            const cachedCS = globalColorSpaceCache.getByRef(cs[1]);
            if (cachedCS) {
              return cachedCS;
            }
          }
          const stream = xref.fetchIfRef(cs[1]);
          const dict = stream.dict;
          numComps = dict.get("N");
          if (IccColorSpace.isUsable) {
            try {
              const iccCS = new IccColorSpace(stream.getBytes(), "ICCBased", numComps);
              if (isRef) {
                globalColorSpaceCache.set(null, cs[1], iccCS);
              }
              return iccCS;
            } catch (ex) {
              if (ex instanceof MissingDataException) {
                throw ex;
              }
              warn(\`ICCBased color space (\${cs[1]}): "\${ex}".\`);
            }
          }
          const altRaw = dict.getRaw("Alternate");
          if (altRaw) {
            const altCS = this.#subParse(altRaw, options);
            if (altCS.numComps === numComps) {
              return altCS;
            }
            warn("ICCBased color space: Ignoring incorrect /Alternate entry.");
          }
          if (numComps === 1) {
            return this.gray;
          } else if (numComps === 3) {
            return this.rgb;
          } else if (numComps === 4) {
            return this.cmyk;
          }
          break;
        case "Pattern":
          baseCS = cs[1] || null;
          if (baseCS) {
            baseCS = this.#subParse(baseCS, options);
          }
          return new PatternCS(baseCS);
        case "I":
        case "Indexed":
          baseCS = this.#subParse(cs[1], options);
          const hiVal = MathClamp(xref.fetchIfRef(cs[2]), 0, 255);
          const lookup = xref.fetchIfRef(cs[3]);
          return new IndexedCS(baseCS, hiVal, lookup);
        case "Separation":
        case "DeviceN":
          const name = xref.fetchIfRef(cs[1]);
          numComps = Array.isArray(name) ? name.length : 1;
          baseCS = this.#subParse(cs[2], options);
          const tintFn = pdfFunctionFactory.create(cs[3]);
          return new AlternateCS(numComps, baseCS, tintFn);
        case "Lab":
          params = xref.fetchIfRef(cs[1]);
          whitePoint = params.getArray("WhitePoint");
          blackPoint = params.getArray("BlackPoint");
          const range = params.getArray("Range");
          return new LabCS(whitePoint, blackPoint, range);
        default:
          warn(\`Unimplemented ColorSpace object: \${mode}\`);
          return this.gray;
      }
    }
    warn(\`Unrecognized ColorSpace object: \${cs}\`);
    return this.gray;
  }
  static get gray() {
    return shadow(this, "gray", new DeviceGrayCS());
  }
  static get rgb() {
    return shadow(this, "rgb", new DeviceRgbCS());
  }
  static get rgba() {
    return shadow(this, "rgba", new DeviceRgbaCS());
  }
  static get cmyk() {
    if (CmykICCBasedCS.isUsable) {
      try {
        return shadow(this, "cmyk", new CmykICCBasedCS());
      } catch {
        warn("CMYK fallback: DeviceCMYK");
      }
    }
    return shadow(this, "cmyk", new DeviceCmykCS());
  }
}

;// ./src/core/jpg.js





class JpegError extends BaseException {
  constructor(msg) {
    super(msg, "JpegError");
  }
}
class DNLMarkerError extends BaseException {
  constructor(message, scanLines) {
    super(message, "DNLMarkerError");
    this.scanLines = scanLines;
  }
}
class EOIMarkerError extends BaseException {
  constructor(msg) {
    super(msg, "EOIMarkerError");
  }
}
const dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
const dctCos1 = 4017;
const dctSin1 = 799;
const dctCos3 = 3406;
const dctSin3 = 2276;
const dctCos6 = 1567;
const dctSin6 = 3784;
const dctSqrt2 = 5793;
const dctSqrt1d2 = 2896;
function buildHuffmanTable(codeLengths, values) {
  let k = 0,
    i,
    j,
    length = 16;
  while (length > 0 && !codeLengths[length - 1]) {
    length--;
  }
  const code = [{
    children: [],
    index: 0
  }];
  let p = code[0],
    q;
  for (i = 0; i < length; i++) {
    for (j = 0; j < codeLengths[i]; j++) {
      p = code.pop();
      p.children[p.index] = values[k];
      while (p.index > 0) {
        p = code.pop();
      }
      p.index++;
      code.push(p);
      while (code.length <= i) {
        code.push(q = {
          children: [],
          index: 0
        });
        p.children[p.index] = q.children;
        p = q;
      }
      k++;
    }
    if (i + 1 < length) {
      code.push(q = {
        children: [],
        index: 0
      });
      p.children[p.index] = q.children;
      p = q;
    }
  }
  return code[0].children;
}
function getBlockBufferOffset(component, row, col) {
  return 64 * ((component.blocksPerLine + 1) * row + col);
}
function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, parseDNLMarker = false) {
  const mcusPerLine = frame.mcusPerLine;
  const progressive = frame.progressive;
  const startOffset = offset;
  let bitsData = 0,
    bitsCount = 0;
  function readBit() {
    if (bitsCount > 0) {
      bitsCount--;
      return bitsData >> bitsCount & 1;
    }
    bitsData = data[offset++];
    if (bitsData === 0xff) {
      const nextByte = data[offset++];
      if (nextByte) {
        if (nextByte === 0xdc && parseDNLMarker) {
          offset += 2;
          const scanLines = readUint16(data, offset);
          offset += 2;
          if (scanLines > 0 && scanLines !== frame.scanLines) {
            throw new DNLMarkerError("Found DNL marker (0xFFDC) while parsing scan data", scanLines);
          }
        } else if (nextByte === 0xd9) {
          if (parseDNLMarker) {
            const maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);
            if (maybeScanLines > 0 && Math.round(frame.scanLines / maybeScanLines) >= 5) {
              throw new DNLMarkerError("Found EOI marker (0xFFD9) while parsing scan data, " + "possibly caused by incorrect \`scanLines\` parameter", maybeScanLines);
            }
          }
          throw new EOIMarkerError("Found EOI marker (0xFFD9) while parsing scan data");
        }
        throw new JpegError(\`unexpected marker \${(bitsData << 8 | nextByte).toString(16)}\`);
      }
    }
    bitsCount = 7;
    return bitsData >>> 7;
  }
  function decodeHuffman(tree) {
    let node = tree;
    while (true) {
      node = node[readBit()];
      switch (typeof node) {
        case "number":
          return node;
        case "object":
          continue;
      }
      throw new JpegError("invalid huffman sequence");
    }
  }
  function receive(length) {
    let n = 0;
    while (length > 0) {
      n = n << 1 | readBit();
      length--;
    }
    return n;
  }
  function receiveAndExtend(length) {
    if (length === 1) {
      return readBit() === 1 ? 1 : -1;
    }
    const n = receive(length);
    if (n >= 1 << length - 1) {
      return n;
    }
    return n + (-1 << length) + 1;
  }
  function decodeBaseline(component, blockOffset) {
    const t = decodeHuffman(component.huffmanTableDC);
    const diff = t === 0 ? 0 : receiveAndExtend(t);
    component.blockData[blockOffset] = component.pred += diff;
    let k = 1;
    while (k < 64) {
      const rs = decodeHuffman(component.huffmanTableAC);
      const s = rs & 15,
        r = rs >> 4;
      if (s === 0) {
        if (r < 15) {
          break;
        }
        k += 16;
        continue;
      }
      k += r;
      const z = dctZigZag[k];
      component.blockData[blockOffset + z] = receiveAndExtend(s);
      k++;
    }
  }
  function decodeDCFirst(component, blockOffset) {
    const t = decodeHuffman(component.huffmanTableDC);
    const diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
    component.blockData[blockOffset] = component.pred += diff;
  }
  function decodeDCSuccessive(component, blockOffset) {
    component.blockData[blockOffset] |= readBit() << successive;
  }
  let eobrun = 0;
  function decodeACFirst(component, blockOffset) {
    if (eobrun > 0) {
      eobrun--;
      return;
    }
    let k = spectralStart;
    const e = spectralEnd;
    while (k <= e) {
      const rs = decodeHuffman(component.huffmanTableAC);
      const s = rs & 15,
        r = rs >> 4;
      if (s === 0) {
        if (r < 15) {
          eobrun = receive(r) + (1 << r) - 1;
          break;
        }
        k += 16;
        continue;
      }
      k += r;
      const z = dctZigZag[k];
      component.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);
      k++;
    }
  }
  let successiveACState = 0,
    successiveACNextValue;
  function decodeACSuccessive(component, blockOffset) {
    let k = spectralStart;
    const e = spectralEnd;
    let r = 0;
    let s;
    let rs;
    while (k <= e) {
      const offsetZ = blockOffset + dctZigZag[k];
      const sign = component.blockData[offsetZ] < 0 ? -1 : 1;
      switch (successiveACState) {
        case 0:
          rs = decodeHuffman(component.huffmanTableAC);
          s = rs & 15;
          r = rs >> 4;
          if (s === 0) {
            if (r < 15) {
              eobrun = receive(r) + (1 << r);
              successiveACState = 4;
            } else {
              r = 16;
              successiveACState = 1;
            }
          } else {
            if (s !== 1) {
              throw new JpegError("invalid ACn encoding");
            }
            successiveACNextValue = receiveAndExtend(s);
            successiveACState = r ? 2 : 3;
          }
          continue;
        case 1:
        case 2:
          if (component.blockData[offsetZ]) {
            component.blockData[offsetZ] += sign * (readBit() << successive);
          } else {
            r--;
            if (r === 0) {
              successiveACState = successiveACState === 2 ? 3 : 0;
            }
          }
          break;
        case 3:
          if (component.blockData[offsetZ]) {
            component.blockData[offsetZ] += sign * (readBit() << successive);
          } else {
            component.blockData[offsetZ] = successiveACNextValue << successive;
            successiveACState = 0;
          }
          break;
        case 4:
          if (component.blockData[offsetZ]) {
            component.blockData[offsetZ] += sign * (readBit() << successive);
          }
          break;
      }
      k++;
    }
    if (successiveACState === 4) {
      eobrun--;
      if (eobrun === 0) {
        successiveACState = 0;
      }
    }
  }
  let blockRow = 0;
  function decodeMcu(component, decode, mcu, row, col) {
    const mcuRow = mcu / mcusPerLine | 0;
    const mcuCol = mcu % mcusPerLine;
    blockRow = mcuRow * component.v + row;
    const blockCol = mcuCol * component.h + col;
    const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);
    decode(component, blockOffset);
  }
  function decodeBlock(component, decode, mcu) {
    blockRow = mcu / component.blocksPerLine | 0;
    const blockCol = mcu % component.blocksPerLine;
    const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);
    decode(component, blockOffset);
  }
  const componentsLength = components.length;
  let component, i, j, k, n;
  let decodeFn;
  if (progressive) {
    if (spectralStart === 0) {
      decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
    } else {
      decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
    }
  } else {
    decodeFn = decodeBaseline;
  }
  let mcu = 0,
    fileMarker;
  const mcuExpected = componentsLength === 1 ? components[0].blocksPerLine * components[0].blocksPerColumn : mcusPerLine * frame.mcusPerColumn;
  let h, v;
  while (mcu <= mcuExpected) {
    const mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;
    if (mcuToRead > 0) {
      for (i = 0; i < componentsLength; i++) {
        components[i].pred = 0;
      }
      eobrun = 0;
      if (componentsLength === 1) {
        component = components[0];
        for (n = 0; n < mcuToRead; n++) {
          decodeBlock(component, decodeFn, mcu);
          mcu++;
        }
      } else {
        for (n = 0; n < mcuToRead; n++) {
          for (i = 0; i < componentsLength; i++) {
            component = components[i];
            h = component.h;
            v = component.v;
            for (j = 0; j < v; j++) {
              for (k = 0; k < h; k++) {
                decodeMcu(component, decodeFn, mcu, j, k);
              }
            }
          }
          mcu++;
        }
      }
    }
    bitsCount = 0;
    fileMarker = findNextFileMarker(data, offset);
    if (!fileMarker) {
      break;
    }
    if (fileMarker.invalid) {
      const partialMsg = mcuToRead > 0 ? "unexpected" : "excessive";
      warn(\`decodeScan - \${partialMsg} MCU data, current marker is: \${fileMarker.invalid}\`);
      offset = fileMarker.offset;
    }
    if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {
      offset += 2;
    } else {
      break;
    }
  }
  return offset - startOffset;
}
function quantizeAndInverse(component, blockBufferOffset, p) {
  const qt = component.quantizationTable,
    blockData = component.blockData;
  let v0, v1, v2, v3, v4, v5, v6, v7;
  let p0, p1, p2, p3, p4, p5, p6, p7;
  let t;
  if (!qt) {
    throw new JpegError("missing required Quantization Table.");
  }
  for (let row = 0; row < 64; row += 8) {
    p0 = blockData[blockBufferOffset + row];
    p1 = blockData[blockBufferOffset + row + 1];
    p2 = blockData[blockBufferOffset + row + 2];
    p3 = blockData[blockBufferOffset + row + 3];
    p4 = blockData[blockBufferOffset + row + 4];
    p5 = blockData[blockBufferOffset + row + 5];
    p6 = blockData[blockBufferOffset + row + 6];
    p7 = blockData[blockBufferOffset + row + 7];
    p0 *= qt[row];
    if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
      t = dctSqrt2 * p0 + 512 >> 10;
      p[row] = t;
      p[row + 1] = t;
      p[row + 2] = t;
      p[row + 3] = t;
      p[row + 4] = t;
      p[row + 5] = t;
      p[row + 6] = t;
      p[row + 7] = t;
      continue;
    }
    p1 *= qt[row + 1];
    p2 *= qt[row + 2];
    p3 *= qt[row + 3];
    p4 *= qt[row + 4];
    p5 *= qt[row + 5];
    p6 *= qt[row + 6];
    p7 *= qt[row + 7];
    v0 = dctSqrt2 * p0 + 128 >> 8;
    v1 = dctSqrt2 * p4 + 128 >> 8;
    v2 = p2;
    v3 = p6;
    v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;
    v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;
    v5 = p3 << 4;
    v6 = p5 << 4;
    v0 = v0 + v1 + 1 >> 1;
    v1 = v0 - v1;
    t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
    v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
    v3 = t;
    v4 = v4 + v6 + 1 >> 1;
    v6 = v4 - v6;
    v7 = v7 + v5 + 1 >> 1;
    v5 = v7 - v5;
    v0 = v0 + v3 + 1 >> 1;
    v3 = v0 - v3;
    v1 = v1 + v2 + 1 >> 1;
    v2 = v1 - v2;
    t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
    v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
    v7 = t;
    t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
    v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
    v6 = t;
    p[row] = v0 + v7;
    p[row + 7] = v0 - v7;
    p[row + 1] = v1 + v6;
    p[row + 6] = v1 - v6;
    p[row + 2] = v2 + v5;
    p[row + 5] = v2 - v5;
    p[row + 3] = v3 + v4;
    p[row + 4] = v3 - v4;
  }
  for (let col = 0; col < 8; ++col) {
    p0 = p[col];
    p1 = p[col + 8];
    p2 = p[col + 16];
    p3 = p[col + 24];
    p4 = p[col + 32];
    p5 = p[col + 40];
    p6 = p[col + 48];
    p7 = p[col + 56];
    if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
      t = dctSqrt2 * p0 + 8192 >> 14;
      if (t < -2040) {
        t = 0;
      } else if (t >= 2024) {
        t = 255;
      } else {
        t = t + 2056 >> 4;
      }
      blockData[blockBufferOffset + col] = t;
      blockData[blockBufferOffset + col + 8] = t;
      blockData[blockBufferOffset + col + 16] = t;
      blockData[blockBufferOffset + col + 24] = t;
      blockData[blockBufferOffset + col + 32] = t;
      blockData[blockBufferOffset + col + 40] = t;
      blockData[blockBufferOffset + col + 48] = t;
      blockData[blockBufferOffset + col + 56] = t;
      continue;
    }
    v0 = dctSqrt2 * p0 + 2048 >> 12;
    v1 = dctSqrt2 * p4 + 2048 >> 12;
    v2 = p2;
    v3 = p6;
    v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;
    v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;
    v5 = p3;
    v6 = p5;
    v0 = (v0 + v1 + 1 >> 1) + 4112;
    v1 = v0 - v1;
    t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
    v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
    v3 = t;
    v4 = v4 + v6 + 1 >> 1;
    v6 = v4 - v6;
    v7 = v7 + v5 + 1 >> 1;
    v5 = v7 - v5;
    v0 = v0 + v3 + 1 >> 1;
    v3 = v0 - v3;
    v1 = v1 + v2 + 1 >> 1;
    v2 = v1 - v2;
    t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
    v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
    v7 = t;
    t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
    v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
    v6 = t;
    p0 = v0 + v7;
    p7 = v0 - v7;
    p1 = v1 + v6;
    p6 = v1 - v6;
    p2 = v2 + v5;
    p5 = v2 - v5;
    p3 = v3 + v4;
    p4 = v3 - v4;
    if (p0 < 16) {
      p0 = 0;
    } else if (p0 >= 4080) {
      p0 = 255;
    } else {
      p0 >>= 4;
    }
    if (p1 < 16) {
      p1 = 0;
    } else if (p1 >= 4080) {
      p1 = 255;
    } else {
      p1 >>= 4;
    }
    if (p2 < 16) {
      p2 = 0;
    } else if (p2 >= 4080) {
      p2 = 255;
    } else {
      p2 >>= 4;
    }
    if (p3 < 16) {
      p3 = 0;
    } else if (p3 >= 4080) {
      p3 = 255;
    } else {
      p3 >>= 4;
    }
    if (p4 < 16) {
      p4 = 0;
    } else if (p4 >= 4080) {
      p4 = 255;
    } else {
      p4 >>= 4;
    }
    if (p5 < 16) {
      p5 = 0;
    } else if (p5 >= 4080) {
      p5 = 255;
    } else {
      p5 >>= 4;
    }
    if (p6 < 16) {
      p6 = 0;
    } else if (p6 >= 4080) {
      p6 = 255;
    } else {
      p6 >>= 4;
    }
    if (p7 < 16) {
      p7 = 0;
    } else if (p7 >= 4080) {
      p7 = 255;
    } else {
      p7 >>= 4;
    }
    blockData[blockBufferOffset + col] = p0;
    blockData[blockBufferOffset + col + 8] = p1;
    blockData[blockBufferOffset + col + 16] = p2;
    blockData[blockBufferOffset + col + 24] = p3;
    blockData[blockBufferOffset + col + 32] = p4;
    blockData[blockBufferOffset + col + 40] = p5;
    blockData[blockBufferOffset + col + 48] = p6;
    blockData[blockBufferOffset + col + 56] = p7;
  }
}
function buildComponentData(frame, component) {
  const blocksPerLine = component.blocksPerLine;
  const blocksPerColumn = component.blocksPerColumn;
  const computationBuffer = new Int16Array(64);
  for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
    for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {
      const offset = getBlockBufferOffset(component, blockRow, blockCol);
      quantizeAndInverse(component, offset, computationBuffer);
    }
  }
  return component.blockData;
}
function findNextFileMarker(data, currentPos, startPos = currentPos) {
  const maxPos = data.length - 1;
  let newPos = startPos < currentPos ? startPos : currentPos;
  if (currentPos >= maxPos) {
    return null;
  }
  const currentMarker = readUint16(data, currentPos);
  if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {
    return {
      invalid: null,
      marker: currentMarker,
      offset: currentPos
    };
  }
  let newMarker = readUint16(data, newPos);
  while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {
    if (++newPos >= maxPos) {
      return null;
    }
    newMarker = readUint16(data, newPos);
  }
  return {
    invalid: currentMarker.toString(16),
    marker: newMarker,
    offset: newPos
  };
}
function prepareComponents(frame) {
  const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
  const mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
  for (const component of frame.components) {
    const blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);
    const blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);
    const blocksPerLineForMcu = mcusPerLine * component.h;
    const blocksPerColumnForMcu = mcusPerColumn * component.v;
    const blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
    component.blockData = new Int16Array(blocksBufferSize);
    component.blocksPerLine = blocksPerLine;
    component.blocksPerColumn = blocksPerColumn;
  }
  frame.mcusPerLine = mcusPerLine;
  frame.mcusPerColumn = mcusPerColumn;
}
function readDataBlock(data, offset) {
  const length = readUint16(data, offset);
  offset += 2;
  let endOffset = offset + length - 2;
  const fileMarker = findNextFileMarker(data, endOffset, offset);
  if (fileMarker?.invalid) {
    warn("readDataBlock - incorrect length, current marker is: " + fileMarker.invalid);
    endOffset = fileMarker.offset;
  }
  const array = data.subarray(offset, endOffset);
  return {
    appData: array,
    oldOffset: offset,
    newOffset: offset + array.length
  };
}
function skipData(data, offset) {
  const length = readUint16(data, offset);
  offset += 2;
  const endOffset = offset + length - 2;
  const fileMarker = findNextFileMarker(data, endOffset, offset);
  if (fileMarker?.invalid) {
    return fileMarker.offset;
  }
  return endOffset;
}
class JpegImage {
  constructor({
    decodeTransform = null,
    colorTransform = -1
  } = {}) {
    this._decodeTransform = decodeTransform;
    this._colorTransform = colorTransform;
  }
  static canUseImageDecoder(data, colorTransform = -1) {
    let exifOffsets = null;
    let offset = 0;
    let numComponents = null;
    let fileMarker = readUint16(data, offset);
    offset += 2;
    if (fileMarker !== 0xffd8) {
      throw new JpegError("SOI not found");
    }
    fileMarker = readUint16(data, offset);
    offset += 2;
    markerLoop: while (fileMarker !== 0xffd9) {
      switch (fileMarker) {
        case 0xffe1:
          const {
            appData,
            oldOffset,
            newOffset
          } = readDataBlock(data, offset);
          offset = newOffset;
          if (appData[0] === 0x45 && appData[1] === 0x78 && appData[2] === 0x69 && appData[3] === 0x66 && appData[4] === 0 && appData[5] === 0) {
            if (exifOffsets) {
              throw new JpegError("Duplicate EXIF-blocks found.");
            }
            exifOffsets = {
              exifStart: oldOffset + 6,
              exifEnd: newOffset
            };
          }
          fileMarker = readUint16(data, offset);
          offset += 2;
          continue;
        case 0xffc0:
        case 0xffc1:
        case 0xffc2:
          numComponents = data[offset + (2 + 1 + 2 + 2)];
          break markerLoop;
        case 0xffff:
          if (data[offset] !== 0xff) {
            offset--;
          }
          break;
      }
      offset = skipData(data, offset);
      fileMarker = readUint16(data, offset);
      offset += 2;
    }
    if (numComponents === 4) {
      return null;
    }
    if (numComponents === 3 && colorTransform === 0) {
      return null;
    }
    return exifOffsets || {};
  }
  parse(data, {
    dnlScanLines = null
  } = {}) {
    let offset = 0;
    let jfif = null;
    let adobe = null;
    let frame, resetInterval;
    let numSOSMarkers = 0;
    const quantizationTables = [];
    const huffmanTablesAC = [],
      huffmanTablesDC = [];
    let fileMarker = readUint16(data, offset);
    offset += 2;
    if (fileMarker !== 0xffd8) {
      throw new JpegError("SOI not found");
    }
    fileMarker = readUint16(data, offset);
    offset += 2;
    markerLoop: while (fileMarker !== 0xffd9) {
      let i, j, l;
      switch (fileMarker) {
        case 0xffe0:
        case 0xffe1:
        case 0xffe2:
        case 0xffe3:
        case 0xffe4:
        case 0xffe5:
        case 0xffe6:
        case 0xffe7:
        case 0xffe8:
        case 0xffe9:
        case 0xffea:
        case 0xffeb:
        case 0xffec:
        case 0xffed:
        case 0xffee:
        case 0xffef:
        case 0xfffe:
          const {
            appData,
            newOffset
          } = readDataBlock(data, offset);
          offset = newOffset;
          if (fileMarker === 0xffe0) {
            if (appData[0] === 0x4a && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
              jfif = {
                version: {
                  major: appData[5],
                  minor: appData[6]
                },
                densityUnits: appData[7],
                xDensity: appData[8] << 8 | appData[9],
                yDensity: appData[10] << 8 | appData[11],
                thumbWidth: appData[12],
                thumbHeight: appData[13],
                thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
              };
            }
          }
          if (fileMarker === 0xffee) {
            if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6f && appData[3] === 0x62 && appData[4] === 0x65) {
              adobe = {
                version: appData[5] << 8 | appData[6],
                flags0: appData[7] << 8 | appData[8],
                flags1: appData[9] << 8 | appData[10],
                transformCode: appData[11]
              };
            }
          }
          break;
        case 0xffdb:
          const quantizationTablesLength = readUint16(data, offset);
          offset += 2;
          const quantizationTablesEnd = quantizationTablesLength + offset - 2;
          let z;
          while (offset < quantizationTablesEnd) {
            const quantizationTableSpec = data[offset++];
            const tableData = new Uint16Array(64);
            if (quantizationTableSpec >> 4 === 0) {
              for (j = 0; j < 64; j++) {
                z = dctZigZag[j];
                tableData[z] = data[offset++];
              }
            } else if (quantizationTableSpec >> 4 === 1) {
              for (j = 0; j < 64; j++) {
                z = dctZigZag[j];
                tableData[z] = readUint16(data, offset);
                offset += 2;
              }
            } else {
              throw new JpegError("DQT - invalid table spec");
            }
            quantizationTables[quantizationTableSpec & 15] = tableData;
          }
          break;
        case 0xffc0:
        case 0xffc1:
        case 0xffc2:
          if (frame) {
            throw new JpegError("Only single frame JPEGs supported");
          }
          offset += 2;
          frame = {};
          frame.extended = fileMarker === 0xffc1;
          frame.progressive = fileMarker === 0xffc2;
          frame.precision = data[offset++];
          const sofScanLines = readUint16(data, offset);
          offset += 2;
          frame.scanLines = dnlScanLines || sofScanLines;
          frame.samplesPerLine = readUint16(data, offset);
          offset += 2;
          frame.components = [];
          frame.componentIds = {};
          const componentsCount = data[offset++];
          let maxH = 0,
            maxV = 0;
          for (i = 0; i < componentsCount; i++) {
            const componentId = data[offset];
            const h = data[offset + 1] >> 4;
            const v = data[offset + 1] & 15;
            if (maxH < h) {
              maxH = h;
            }
            if (maxV < v) {
              maxV = v;
            }
            const qId = data[offset + 2];
            l = frame.components.push({
              h,
              v,
              quantizationId: qId,
              quantizationTable: null
            });
            frame.componentIds[componentId] = l - 1;
            offset += 3;
          }
          frame.maxH = maxH;
          frame.maxV = maxV;
          prepareComponents(frame);
          break;
        case 0xffc4:
          const huffmanLength = readUint16(data, offset);
          offset += 2;
          for (i = 2; i < huffmanLength;) {
            const huffmanTableSpec = data[offset++];
            const codeLengths = new Uint8Array(16);
            let codeLengthSum = 0;
            for (j = 0; j < 16; j++, offset++) {
              codeLengthSum += codeLengths[j] = data[offset];
            }
            const huffmanValues = new Uint8Array(codeLengthSum);
            for (j = 0; j < codeLengthSum; j++, offset++) {
              huffmanValues[j] = data[offset];
            }
            i += 17 + codeLengthSum;
            (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
          }
          break;
        case 0xffdd:
          offset += 2;
          resetInterval = readUint16(data, offset);
          offset += 2;
          break;
        case 0xffda:
          const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;
          offset += 2;
          const selectorsCount = data[offset++],
            components = [];
          for (i = 0; i < selectorsCount; i++) {
            const index = data[offset++];
            const componentIndex = frame.componentIds[index];
            const component = frame.components[componentIndex];
            component.index = index;
            const tableSpec = data[offset++];
            component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
            component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
            components.push(component);
          }
          const spectralStart = data[offset++],
            spectralEnd = data[offset++],
            successiveApproximation = data[offset++];
          try {
            const processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);
            offset += processed;
          } catch (ex) {
            if (ex instanceof DNLMarkerError) {
              warn(\`\${ex.message} -- attempting to re-parse the JPEG image.\`);
              return this.parse(data, {
                dnlScanLines: ex.scanLines
              });
            } else if (ex instanceof EOIMarkerError) {
              warn(\`\${ex.message} -- ignoring the rest of the image data.\`);
              break markerLoop;
            }
            throw ex;
          }
          break;
        case 0xffdc:
          offset += 4;
          break;
        case 0xffff:
          if (data[offset] !== 0xff) {
            offset--;
          }
          break;
        default:
          const nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);
          if (nextFileMarker?.invalid) {
            warn("JpegImage.parse - unexpected data, current marker is: " + nextFileMarker.invalid);
            offset = nextFileMarker.offset;
            break;
          }
          if (!nextFileMarker || offset >= data.length - 1) {
            warn("JpegImage.parse - reached the end of the image data " + "without finding an EOI marker (0xFFD9).");
            break markerLoop;
          }
          throw new JpegError("JpegImage.parse - unknown marker: " + fileMarker.toString(16));
      }
      fileMarker = readUint16(data, offset);
      offset += 2;
    }
    if (!frame) {
      throw new JpegError("JpegImage.parse - no frame data found.");
    }
    this.width = frame.samplesPerLine;
    this.height = frame.scanLines;
    this.jfif = jfif;
    this.adobe = adobe;
    this.components = [];
    for (const component of frame.components) {
      const quantizationTable = quantizationTables[component.quantizationId];
      if (quantizationTable) {
        component.quantizationTable = quantizationTable;
      }
      this.components.push({
        index: component.index,
        output: buildComponentData(frame, component),
        scaleX: component.h / frame.maxH,
        scaleY: component.v / frame.maxV,
        blocksPerLine: component.blocksPerLine,
        blocksPerColumn: component.blocksPerColumn
      });
    }
    this.numComponents = this.components.length;
    return undefined;
  }
  _getLinearizedBlockData(width, height, isSourcePDF = false) {
    const scaleX = this.width / width,
      scaleY = this.height / height;
    let component, componentScaleX, componentScaleY, blocksPerScanline;
    let x, y, i, j, k;
    let index;
    let offset = 0;
    let output;
    const numComponents = this.components.length;
    const dataLength = width * height * numComponents;
    const data = new Uint8ClampedArray(dataLength);
    const xScaleBlockOffset = new Uint32Array(width);
    const mask3LSB = 0xfffffff8;
    let lastComponentScaleX;
    for (i = 0; i < numComponents; i++) {
      component = this.components[i];
      componentScaleX = component.scaleX * scaleX;
      componentScaleY = component.scaleY * scaleY;
      offset = i;
      output = component.output;
      blocksPerScanline = component.blocksPerLine + 1 << 3;
      if (componentScaleX !== lastComponentScaleX) {
        for (x = 0; x < width; x++) {
          j = 0 | x * componentScaleX;
          xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;
        }
        lastComponentScaleX = componentScaleX;
      }
      for (y = 0; y < height; y++) {
        j = 0 | y * componentScaleY;
        index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;
        for (x = 0; x < width; x++) {
          data[offset] = output[index + xScaleBlockOffset[x]];
          offset += numComponents;
        }
      }
    }
    let transform = this._decodeTransform;
    if (!isSourcePDF && numComponents === 4 && !transform) {
      transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);
    }
    if (transform) {
      for (i = 0; i < dataLength;) {
        for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {
          data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];
        }
      }
    }
    return data;
  }
  get _isColorConversionNeeded() {
    if (this.adobe) {
      return !!this.adobe.transformCode;
    }
    if (this.numComponents === 3) {
      if (this._colorTransform === 0) {
        return false;
      } else if (this.components[0].index === 0x52 && this.components[1].index === 0x47 && this.components[2].index === 0x42) {
        return false;
      }
      return true;
    }
    if (this._colorTransform === 1) {
      return true;
    }
    return false;
  }
  _convertYccToRgb(data) {
    let Y, Cb, Cr;
    for (let i = 0, length = data.length; i < length; i += 3) {
      Y = data[i];
      Cb = data[i + 1];
      Cr = data[i + 2];
      data[i] = Y - 179.456 + 1.402 * Cr;
      data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
      data[i + 2] = Y - 226.816 + 1.772 * Cb;
    }
    return data;
  }
  _convertYccToRgba(data, out) {
    for (let i = 0, j = 0, length = data.length; i < length; i += 3, j += 4) {
      const Y = data[i];
      const Cb = data[i + 1];
      const Cr = data[i + 2];
      out[j] = Y - 179.456 + 1.402 * Cr;
      out[j + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
      out[j + 2] = Y - 226.816 + 1.772 * Cb;
      out[j + 3] = 255;
    }
    return out;
  }
  _convertYcckToRgb(data) {
    this._convertYcckToCmyk(data);
    return this._convertCmykToRgb(data);
  }
  _convertYcckToRgba(data) {
    this._convertYcckToCmyk(data);
    return this._convertCmykToRgba(data);
  }
  _convertYcckToCmyk(data) {
    let Y, Cb, Cr;
    for (let i = 0, length = data.length; i < length; i += 4) {
      Y = data[i];
      Cb = data[i + 1];
      Cr = data[i + 2];
      data[i] = 434.456 - Y - 1.402 * Cr;
      data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;
      data[i + 2] = 481.816 - Y - 1.772 * Cb;
    }
    return data;
  }
  _convertCmykToRgb(data) {
    const count = data.length / 4;
    ColorSpaceUtils.cmyk.getRgbBuffer(data, 0, count, data, 0, 8, 0);
    return data.subarray(0, count * 3);
  }
  _convertCmykToRgba(data) {
    ColorSpaceUtils.cmyk.getRgbBuffer(data, 0, data.length / 4, data, 0, 8, 1);
    if (ColorSpaceUtils.cmyk instanceof DeviceCmykCS) {
      for (let i = 3, ii = data.length; i < ii; i += 4) {
        data[i] = 255;
      }
    }
    return data;
  }
  getData({
    width,
    height,
    forceRGBA = false,
    forceRGB = false,
    isSourcePDF = false
  }) {
    if (this.numComponents > 4) {
      throw new JpegError("Unsupported color mode");
    }
    const data = this._getLinearizedBlockData(width, height, isSourcePDF);
    if (this.numComponents === 1 && (forceRGBA || forceRGB)) {
      const len = data.length * (forceRGBA ? 4 : 3);
      const rgbaData = new Uint8ClampedArray(len);
      let offset = 0;
      if (forceRGBA) {
        grayToRGBA(data, new Uint32Array(rgbaData.buffer));
      } else {
        for (const grayColor of data) {
          rgbaData[offset++] = grayColor;
          rgbaData[offset++] = grayColor;
          rgbaData[offset++] = grayColor;
        }
      }
      return rgbaData;
    } else if (this.numComponents === 3 && this._isColorConversionNeeded) {
      if (forceRGBA) {
        const rgbaData = new Uint8ClampedArray(data.length / 3 * 4);
        return this._convertYccToRgba(data, rgbaData);
      }
      return this._convertYccToRgb(data);
    } else if (this.numComponents === 4) {
      if (this._isColorConversionNeeded) {
        if (forceRGBA) {
          return this._convertYcckToRgba(data);
        }
        if (forceRGB) {
          return this._convertYcckToRgb(data);
        }
        return this._convertYcckToCmyk(data);
      } else if (forceRGBA) {
        return this._convertCmykToRgba(data);
      } else if (forceRGB) {
        return this._convertCmykToRgb(data);
      }
    }
    return data;
  }
}

;// ./src/core/jpeg_stream.js




class JpegStream extends DecodeStream {
  static #isImageDecoderSupported = FeatureTest.isImageDecoderSupported;
  constructor(stream, maybeLength, params) {
    super(maybeLength);
    this.stream = stream;
    this.dict = stream.dict;
    this.maybeLength = maybeLength;
    this.params = params;
  }
  static get canUseImageDecoder() {
    return shadow(this, "canUseImageDecoder", this.#isImageDecoderSupported ? ImageDecoder.isTypeSupported("image/jpeg") : Promise.resolve(false));
  }
  static setOptions({
    isImageDecoderSupported = false
  }) {
    this.#isImageDecoderSupported = isImageDecoderSupported;
  }
  get bytes() {
    return shadow(this, "bytes", this.stream.getBytes(this.maybeLength));
  }
  ensureBuffer(requested) {}
  readBlock() {
    this.decodeImage();
  }
  get jpegOptions() {
    const jpegOptions = {
      decodeTransform: undefined,
      colorTransform: undefined
    };
    const decodeArr = this.dict.getArray("D", "Decode");
    if ((this.forceRGBA || this.forceRGB) && Array.isArray(decodeArr)) {
      const bitsPerComponent = this.dict.get("BPC", "BitsPerComponent") || 8;
      const decodeArrLength = decodeArr.length;
      const transform = new Int32Array(decodeArrLength);
      let transformNeeded = false;
      const maxValue = (1 << bitsPerComponent) - 1;
      for (let i = 0; i < decodeArrLength; i += 2) {
        transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;
        transform[i + 1] = decodeArr[i] * maxValue | 0;
        if (transform[i] !== 256 || transform[i + 1] !== 0) {
          transformNeeded = true;
        }
      }
      if (transformNeeded) {
        jpegOptions.decodeTransform = transform;
      }
    }
    if (this.params instanceof Dict) {
      const colorTransform = this.params.get("ColorTransform");
      if (Number.isInteger(colorTransform)) {
        jpegOptions.colorTransform = colorTransform;
      }
    }
    return shadow(this, "jpegOptions", jpegOptions);
  }
  #skipUselessBytes(data) {
    for (let i = 0, ii = data.length - 1; i < ii; i++) {
      if (data[i] === 0xff && data[i + 1] === 0xd8) {
        if (i > 0) {
          data = data.subarray(i);
        }
        break;
      }
    }
    return data;
  }
  decodeImage(bytes) {
    if (this.eof) {
      return this.buffer;
    }
    bytes = this.#skipUselessBytes(bytes || this.bytes);
    const jpegImage = new JpegImage(this.jpegOptions);
    jpegImage.parse(bytes);
    const data = jpegImage.getData({
      width: this.drawWidth,
      height: this.drawHeight,
      forceRGBA: this.forceRGBA,
      forceRGB: this.forceRGB,
      isSourcePDF: true
    });
    this.buffer = data;
    this.bufferLength = data.length;
    this.eof = true;
    return this.buffer;
  }
  get canAsyncDecodeImageFromBuffer() {
    return this.stream.isAsync;
  }
  async getTransferableImage() {
    if (!(await JpegStream.canUseImageDecoder)) {
      return null;
    }
    const jpegOptions = this.jpegOptions;
    if (jpegOptions.decodeTransform) {
      return null;
    }
    let decoder;
    try {
      const bytes = this.canAsyncDecodeImageFromBuffer && (await this.stream.asyncGetBytes()) || this.bytes;
      if (!bytes) {
        return null;
      }
      let data = this.#skipUselessBytes(bytes);
      const useImageDecoder = JpegImage.canUseImageDecoder(data, jpegOptions.colorTransform);
      if (!useImageDecoder) {
        return null;
      }
      if (useImageDecoder.exifStart) {
        data = data.slice();
        data.fill(0x00, useImageDecoder.exifStart, useImageDecoder.exifEnd);
      }
      decoder = new ImageDecoder({
        data,
        type: "image/jpeg",
        preferAnimation: false
      });
      return (await decoder.decode()).image;
    } catch (reason) {
      warn(\`getTransferableImage - failed: "\${reason}".\`);
      return null;
    } finally {
      decoder?.close();
    }
  }
}

;// ./external/openjpeg/openjpeg.js
var OpenJPEG = (() => {
  var _scriptName = import.meta.url;
  return async function (moduleArg = {}) {
    var moduleRtn;
    var Module = moduleArg;
    var readyPromiseResolve, readyPromiseReject;
    var readyPromise = new Promise((resolve, reject) => {
      readyPromiseResolve = resolve;
      readyPromiseReject = reject;
    });
    var ENVIRONMENT_IS_WEB = true;
    var ENVIRONMENT_IS_WORKER = false;
    var moduleOverrides = Object.assign({}, Module);
    var arguments_ = [];
    var thisProgram = "./this.program";
    var quit_ = (status, toThrow) => {
      throw toThrow;
    };
    var scriptDirectory = "";
    function locateFile(path) {
      if (Module["locateFile"]) {
        return Module["locateFile"](path, scriptDirectory);
      }
      return scriptDirectory + path;
    }
    var readAsync, readBinary;
    if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = self.location.href;
      } else if (typeof document != "undefined" && document.currentScript) {
        scriptDirectory = document.currentScript.src;
      }
      if (_scriptName) {
        scriptDirectory = _scriptName;
      }
      if (scriptDirectory.startsWith("blob:")) {
        scriptDirectory = "";
      } else {
        scriptDirectory = scriptDirectory.slice(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
      }
      readAsync = async url => {
        var response = await fetch(url, {
          credentials: "same-origin"
        });
        if (response.ok) {
          return response.arrayBuffer();
        }
        throw new Error(response.status + " : " + response.url);
      };
    } else {}
    var out = Module["print"] || console.log.bind(console);
    var err = Module["printErr"] || console.error.bind(console);
    Object.assign(Module, moduleOverrides);
    moduleOverrides = null;
    if (Module["arguments"]) arguments_ = Module["arguments"];
    if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
    var wasmBinary = Module["wasmBinary"];
    var wasmMemory;
    var ABORT = false;
    var EXITSTATUS;
    var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAP64, HEAPU64, HEAPF64;
    var runtimeInitialized = false;
    function updateMemoryViews() {
      var b = wasmMemory.buffer;
      Module["HEAP8"] = HEAP8 = new Int8Array(b);
      Module["HEAP16"] = HEAP16 = new Int16Array(b);
      Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
      Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);
      Module["HEAP32"] = HEAP32 = new Int32Array(b);
      Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);
      Module["HEAPF32"] = HEAPF32 = new Float32Array(b);
      Module["HEAPF64"] = HEAPF64 = new Float64Array(b);
      Module["HEAP64"] = HEAP64 = new BigInt64Array(b);
      Module["HEAPU64"] = HEAPU64 = new BigUint64Array(b);
    }
    function preRun() {
      if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]];
        while (Module["preRun"].length) {
          addOnPreRun(Module["preRun"].shift());
        }
      }
      callRuntimeCallbacks(onPreRuns);
    }
    function initRuntime() {
      runtimeInitialized = true;
      wasmExports["t"]();
    }
    function postRun() {
      if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]];
        while (Module["postRun"].length) {
          addOnPostRun(Module["postRun"].shift());
        }
      }
      callRuntimeCallbacks(onPostRuns);
    }
    var runDependencies = 0;
    var dependenciesFulfilled = null;
    function addRunDependency(id) {
      runDependencies++;
      Module["monitorRunDependencies"]?.(runDependencies);
    }
    function removeRunDependency(id) {
      runDependencies--;
      Module["monitorRunDependencies"]?.(runDependencies);
      if (runDependencies == 0) {
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    function abort(what) {
      Module["onAbort"]?.(what);
      what = "Aborted(" + what + ")";
      err(what);
      ABORT = true;
      what += ". Build with -sASSERTIONS for more info.";
      var e = new WebAssembly.RuntimeError(what);
      readyPromiseReject(e);
      throw e;
    }
    var wasmBinaryFile;
    function findWasmBinary() {
      if (Module["locateFile"]) {
        return locateFile("openjpeg.wasm");
      }
      return new URL("openjpeg.wasm", import.meta.url).href;
    }
    function getBinarySync(file) {
      if (file == wasmBinaryFile && wasmBinary) {
        return new Uint8Array(wasmBinary);
      }
      if (readBinary) {
        return readBinary(file);
      }
      throw "both async and sync fetching of the wasm failed";
    }
    async function getWasmBinary(binaryFile) {
      if (!wasmBinary) {
        try {
          var response = await readAsync(binaryFile);
          return new Uint8Array(response);
        } catch {}
      }
      return getBinarySync(binaryFile);
    }
    async function instantiateArrayBuffer(binaryFile, imports) {
      try {
        var binary = await getWasmBinary(binaryFile);
        var instance = await WebAssembly.instantiate(binary, imports);
        return instance;
      } catch (reason) {
        err(\`failed to asynchronously prepare wasm: \${reason}\`);
        abort(reason);
      }
    }
    async function instantiateAsync(binary, binaryFile, imports) {
      if (!binary && typeof WebAssembly.instantiateStreaming == "function") {
        try {
          var response = fetch(binaryFile, {
            credentials: "same-origin"
          });
          var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
          return instantiationResult;
        } catch (reason) {
          err(\`wasm streaming compile failed: \${reason}\`);
          err("falling back to ArrayBuffer instantiation");
        }
      }
      return instantiateArrayBuffer(binaryFile, imports);
    }
    function getWasmImports() {
      return {
        a: wasmImports
      };
    }
    async function createWasm() {
      function receiveInstance(instance, module) {
        wasmExports = instance.exports;
        wasmMemory = wasmExports["s"];
        updateMemoryViews();
        removeRunDependency("wasm-instantiate");
        return wasmExports;
      }
      addRunDependency("wasm-instantiate");
      function receiveInstantiationResult(result) {
        return receiveInstance(result["instance"]);
      }
      var info = getWasmImports();
      if (Module["instantiateWasm"]) {
        return new Promise((resolve, reject) => {
          Module["instantiateWasm"](info, (mod, inst) => {
            receiveInstance(mod, inst);
            resolve(mod.exports);
          });
        });
      }
      wasmBinaryFile ??= findWasmBinary();
      try {
        var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
        var exports = receiveInstantiationResult(result);
        return exports;
      } catch (e) {
        readyPromiseReject(e);
        return Promise.reject(e);
      }
    }
    class ExitStatus {
      name = "ExitStatus";
      constructor(status) {
        this.message = \`Program terminated with exit(\${status})\`;
        this.status = status;
      }
    }
    var callRuntimeCallbacks = callbacks => {
      while (callbacks.length > 0) {
        callbacks.shift()(Module);
      }
    };
    var onPostRuns = [];
    var addOnPostRun = cb => onPostRuns.unshift(cb);
    var onPreRuns = [];
    var addOnPreRun = cb => onPreRuns.unshift(cb);
    var noExitRuntime = Module["noExitRuntime"] || true;
    var __abort_js = () => abort("");
    var runtimeKeepaliveCounter = 0;
    var __emscripten_runtime_keepalive_clear = () => {
      noExitRuntime = false;
      runtimeKeepaliveCounter = 0;
    };
    var timers = {};
    var handleException = e => {
      if (e instanceof ExitStatus || e == "unwind") {
        return EXITSTATUS;
      }
      quit_(1, e);
    };
    var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;
    var _proc_exit = code => {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        Module["onExit"]?.(code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    };
    var exitJS = (status, implicit) => {
      EXITSTATUS = status;
      _proc_exit(status);
    };
    var _exit = exitJS;
    var maybeExit = () => {
      if (!keepRuntimeAlive()) {
        try {
          _exit(EXITSTATUS);
        } catch (e) {
          handleException(e);
        }
      }
    };
    var callUserCallback = func => {
      if (ABORT) {
        return;
      }
      try {
        func();
        maybeExit();
      } catch (e) {
        handleException(e);
      }
    };
    var _emscripten_get_now = () => performance.now();
    var __setitimer_js = (which, timeout_ms) => {
      if (timers[which]) {
        clearTimeout(timers[which].id);
        delete timers[which];
      }
      if (!timeout_ms) return 0;
      var id = setTimeout(() => {
        delete timers[which];
        callUserCallback(() => __emscripten_timeout(which, _emscripten_get_now()));
      }, timeout_ms);
      timers[which] = {
        id,
        timeout_ms
      };
      return 0;
    };
    function _copy_pixels_1(compG_ptr, nb_pixels) {
      compG_ptr >>= 2;
      const imageData = Module.imageData = new Uint8ClampedArray(nb_pixels);
      const compG = HEAP32.subarray(compG_ptr, compG_ptr + nb_pixels);
      imageData.set(compG);
    }
    function _copy_pixels_3(compR_ptr, compG_ptr, compB_ptr, nb_pixels) {
      compR_ptr >>= 2;
      compG_ptr >>= 2;
      compB_ptr >>= 2;
      const imageData = Module.imageData = new Uint8ClampedArray(nb_pixels * 3);
      const compR = HEAP32.subarray(compR_ptr, compR_ptr + nb_pixels);
      const compG = HEAP32.subarray(compG_ptr, compG_ptr + nb_pixels);
      const compB = HEAP32.subarray(compB_ptr, compB_ptr + nb_pixels);
      for (let i = 0; i < nb_pixels; i++) {
        imageData[3 * i] = compR[i];
        imageData[3 * i + 1] = compG[i];
        imageData[3 * i + 2] = compB[i];
      }
    }
    function _copy_pixels_4(compR_ptr, compG_ptr, compB_ptr, compA_ptr, nb_pixels) {
      compR_ptr >>= 2;
      compG_ptr >>= 2;
      compB_ptr >>= 2;
      compA_ptr >>= 2;
      const imageData = Module.imageData = new Uint8ClampedArray(nb_pixels * 4);
      const compR = HEAP32.subarray(compR_ptr, compR_ptr + nb_pixels);
      const compG = HEAP32.subarray(compG_ptr, compG_ptr + nb_pixels);
      const compB = HEAP32.subarray(compB_ptr, compB_ptr + nb_pixels);
      const compA = HEAP32.subarray(compA_ptr, compA_ptr + nb_pixels);
      for (let i = 0; i < nb_pixels; i++) {
        imageData[4 * i] = compR[i];
        imageData[4 * i + 1] = compG[i];
        imageData[4 * i + 2] = compB[i];
        imageData[4 * i + 3] = compA[i];
      }
    }
    var getHeapMax = () => 2147483648;
    var alignMemory = (size, alignment) => Math.ceil(size / alignment) * alignment;
    var growMemory = size => {
      var b = wasmMemory.buffer;
      var pages = (size - b.byteLength + 65535) / 65536 | 0;
      try {
        wasmMemory.grow(pages);
        updateMemoryViews();
        return 1;
      } catch (e) {}
    };
    var _emscripten_resize_heap = requestedSize => {
      var oldSize = HEAPU8.length;
      requestedSize >>>= 0;
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        return false;
      }
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
        var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
        var replacement = growMemory(newSize);
        if (replacement) {
          return true;
        }
      }
      return false;
    };
    var ENV = {};
    var getExecutableName = () => thisProgram || "./this.program";
    var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        var lang = (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
        var env = {
          USER: "web_user",
          LOGNAME: "web_user",
          PATH: "/",
          PWD: "/",
          HOME: "/home/web_user",
          LANG: lang,
          _: getExecutableName()
        };
        for (var x in ENV) {
          if (ENV[x] === undefined) delete env[x];else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(\`\${x}=\${env[x]}\`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
    var stringToAscii = (str, buffer) => {
      for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++] = str.charCodeAt(i);
      }
      HEAP8[buffer] = 0;
    };
    var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      getEnvStrings().forEach((string, i) => {
        var ptr = environ_buf + bufSize;
        HEAPU32[__environ + i * 4 >> 2] = ptr;
        stringToAscii(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    };
    var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[penviron_count >> 2] = strings.length;
      var bufSize = 0;
      strings.forEach(string => bufSize += string.length + 1);
      HEAPU32[penviron_buf_size >> 2] = bufSize;
      return 0;
    };
    var _fd_close = fd => 52;
    var INT53_MAX = 9007199254740992;
    var INT53_MIN = -9007199254740992;
    var bigintToI53Checked = num => num < INT53_MIN || num > INT53_MAX ? NaN : Number(num);
    function _fd_seek(fd, offset, whence, newOffset) {
      offset = bigintToI53Checked(offset);
      return 70;
    }
    var printCharBuffers = [null, [], []];
    var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder() : undefined;
    var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = "";
      while (idx < endPtr) {
        var u0 = heapOrArray[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
      return str;
    };
    var printChar = (stream, curr) => {
      var buffer = printCharBuffers[stream];
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer));
        buffer.length = 0;
      } else {
        buffer.push(curr);
      }
    };
    var UTF8ToString = (ptr, maxBytesToRead) => ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
    var _fd_write = (fd, iov, iovcnt, pnum) => {
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[iov >> 2];
        var len = HEAPU32[iov + 4 >> 2];
        iov += 8;
        for (var j = 0; j < len; j++) {
          printChar(fd, HEAPU8[ptr + j]);
        }
        num += len;
      }
      HEAPU32[pnum >> 2] = num;
      return 0;
    };
    function _gray_to_rgba(compG_ptr, nb_pixels) {
      compG_ptr >>= 2;
      const imageData = Module.imageData = new Uint8ClampedArray(nb_pixels * 4);
      const compG = HEAP32.subarray(compG_ptr, compG_ptr + nb_pixels);
      for (let i = 0; i < nb_pixels; i++) {
        imageData[4 * i] = imageData[4 * i + 1] = imageData[4 * i + 2] = compG[i];
        imageData[4 * i + 3] = 255;
      }
    }
    function _graya_to_rgba(compG_ptr, compA_ptr, nb_pixels) {
      compG_ptr >>= 2;
      compA_ptr >>= 2;
      const imageData = Module.imageData = new Uint8ClampedArray(nb_pixels * 4);
      const compG = HEAP32.subarray(compG_ptr, compG_ptr + nb_pixels);
      const compA = HEAP32.subarray(compA_ptr, compA_ptr + nb_pixels);
      for (let i = 0; i < nb_pixels; i++) {
        imageData[4 * i] = imageData[4 * i + 1] = imageData[4 * i + 2] = compG[i];
        imageData[4 * i + 3] = compA[i];
      }
    }
    function _jsPrintWarning(message_ptr) {
      const message = UTF8ToString(message_ptr);
      (Module.warn || console.warn)(\`OpenJPEG: \${message}\`);
    }
    function _rgb_to_rgba(compR_ptr, compG_ptr, compB_ptr, nb_pixels) {
      compR_ptr >>= 2;
      compG_ptr >>= 2;
      compB_ptr >>= 2;
      const imageData = Module.imageData = new Uint8ClampedArray(nb_pixels * 4);
      const compR = HEAP32.subarray(compR_ptr, compR_ptr + nb_pixels);
      const compG = HEAP32.subarray(compG_ptr, compG_ptr + nb_pixels);
      const compB = HEAP32.subarray(compB_ptr, compB_ptr + nb_pixels);
      for (let i = 0; i < nb_pixels; i++) {
        imageData[4 * i] = compR[i];
        imageData[4 * i + 1] = compG[i];
        imageData[4 * i + 2] = compB[i];
        imageData[4 * i + 3] = 255;
      }
    }
    function _storeErrorMessage(message_ptr) {
      const message = UTF8ToString(message_ptr);
      if (!Module.errorMessages) {
        Module.errorMessages = message;
      } else {
        Module.errorMessages += "\\n" + message;
      }
    }
    var wasmImports = {
      l: __abort_js,
      k: __emscripten_runtime_keepalive_clear,
      m: __setitimer_js,
      g: _copy_pixels_1,
      f: _copy_pixels_3,
      e: _copy_pixels_4,
      n: _emscripten_resize_heap,
      p: _environ_get,
      q: _environ_sizes_get,
      b: _fd_close,
      o: _fd_seek,
      c: _fd_write,
      r: _gray_to_rgba,
      i: _graya_to_rgba,
      d: _jsPrintWarning,
      j: _proc_exit,
      h: _rgb_to_rgba,
      a: _storeErrorMessage
    };
    var wasmExports = await createWasm();
    var ___wasm_call_ctors = wasmExports["t"];
    var _malloc = Module["_malloc"] = wasmExports["u"];
    var _free = Module["_free"] = wasmExports["v"];
    var _jp2_decode = Module["_jp2_decode"] = wasmExports["x"];
    var __emscripten_timeout = wasmExports["y"];
    function run() {
      if (runDependencies > 0) {
        dependenciesFulfilled = run;
        return;
      }
      preRun();
      if (runDependencies > 0) {
        dependenciesFulfilled = run;
        return;
      }
      function doRun() {
        Module["calledRun"] = true;
        if (ABORT) return;
        initRuntime();
        readyPromiseResolve(Module);
        Module["onRuntimeInitialized"]?.();
        postRun();
      }
      if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(() => {
          setTimeout(() => Module["setStatus"](""), 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }
    if (Module["preInit"]) {
      if (typeof Module["preInit"] == "function") Module["preInit"] = [Module["preInit"]];
      while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
      }
    }
    run();
    moduleRtn = readyPromise;
    return moduleRtn;
  };
})();
/* harmony default export */ const openjpeg = (OpenJPEG);
;// ./src/core/jpx.js




class JpxError extends BaseException {
  constructor(msg) {
    super(msg, "JpxError");
  }
}
class JpxImage {
  static #buffer = null;
  static #handler = null;
  static #modulePromise = null;
  static #useWasm = true;
  static #useWorkerFetch = true;
  static #wasmUrl = null;
  static setOptions({
    handler,
    useWasm,
    useWorkerFetch,
    wasmUrl
  }) {
    this.#useWasm = useWasm;
    this.#useWorkerFetch = useWorkerFetch;
    this.#wasmUrl = wasmUrl;
    if (!useWorkerFetch) {
      this.#handler = handler;
    }
  }
  static async #getJsModule(fallbackCallback) {
    const path = \`\${this.#wasmUrl}openjpeg_nowasm_fallback.js\`;
    let instance = null;
    try {
      const mod = await import(
      /*webpackIgnore: true*/
      /*@vite-ignore*/
      path);
      instance = mod.default();
    } catch (e) {
      warn(\`JpxImage#getJsModule: \${e}\`);
    }
    fallbackCallback(instance);
  }
  static async #instantiateWasm(fallbackCallback, imports, successCallback) {
    const filename = "openjpeg.wasm";
    try {
      if (!this.#buffer) {
        if (this.#useWorkerFetch) {
          this.#buffer = await fetchBinaryData(\`\${this.#wasmUrl}\${filename}\`);
        } else {
          this.#buffer = await this.#handler.sendWithPromise("FetchBinaryData", {
            type: "wasmFactory",
            filename
          });
        }
      }
      const results = await WebAssembly.instantiate(this.#buffer, imports);
      return successCallback(results.instance);
    } catch (reason) {
      warn(\`JpxImage#instantiateWasm: \${reason}\`);
      this.#getJsModule(fallbackCallback);
      return null;
    } finally {
      this.#handler = null;
    }
  }
  static async decode(bytes, {
    numComponents = 4,
    isIndexedColormap = false,
    smaskInData = false
  } = {}) {
    if (!this.#modulePromise) {
      const {
        promise,
        resolve
      } = Promise.withResolvers();
      const promises = [promise];
      if (!this.#useWasm) {
        this.#getJsModule(resolve);
      } else {
        promises.push(openjpeg({
          warn: warn,
          instantiateWasm: this.#instantiateWasm.bind(this, resolve)
        }));
      }
      this.#modulePromise = Promise.race(promises);
    }
    const module = await this.#modulePromise;
    if (!module) {
      throw new JpxError("OpenJPEG failed to initialize");
    }
    let ptr;
    try {
      const size = bytes.length;
      ptr = module._malloc(size);
      module.HEAPU8.set(bytes, ptr);
      const ret = module._jp2_decode(ptr, size, numComponents > 0 ? numComponents : 0, !!isIndexedColormap, !!smaskInData);
      if (ret) {
        const {
          errorMessages
        } = module;
        if (errorMessages) {
          delete module.errorMessages;
          throw new JpxError(errorMessages);
        }
        throw new JpxError("Unknown error");
      }
      const {
        imageData
      } = module;
      module.imageData = null;
      return imageData;
    } finally {
      if (ptr) {
        module._free(ptr);
      }
    }
  }
  static cleanup() {
    this.#modulePromise = null;
  }
  static parseImageProperties(stream) {
    let newByte = stream.getByte();
    while (newByte >= 0) {
      const oldByte = newByte;
      newByte = stream.getByte();
      const code = oldByte << 8 | newByte;
      if (code === 0xff51) {
        stream.skip(4);
        const Xsiz = stream.getInt32() >>> 0;
        const Ysiz = stream.getInt32() >>> 0;
        const XOsiz = stream.getInt32() >>> 0;
        const YOsiz = stream.getInt32() >>> 0;
        stream.skip(16);
        const Csiz = stream.getUint16();
        return {
          width: Xsiz - XOsiz,
          height: Ysiz - YOsiz,
          bitsPerComponent: 8,
          componentsCount: Csiz
        };
      }
    }
    throw new JpxError("No size marker found in JPX stream");
  }
}

;// ./src/core/binary_cmap.js

function hexToInt(a, size) {
  let n = 0;
  for (let i = 0; i <= size; i++) {
    n = n << 8 | a[i];
  }
  return n >>> 0;
}
function hexToStr(a, size) {
  if (size === 1) {
    return String.fromCharCode(a[0], a[1]);
  }
  if (size === 3) {
    return String.fromCharCode(a[0], a[1], a[2], a[3]);
  }
  return String.fromCharCode(...a.subarray(0, size + 1));
}
function addHex(a, b, size) {
  let c = 0;
  for (let i = size; i >= 0; i--) {
    c += a[i] + b[i];
    a[i] = c & 255;
    c >>= 8;
  }
}
function incHex(a, size) {
  let c = 1;
  for (let i = size; i >= 0 && c > 0; i--) {
    c += a[i];
    a[i] = c & 255;
    c >>= 8;
  }
}
const MAX_NUM_SIZE = 16;
const MAX_ENCODED_NUM_SIZE = 19;
class BinaryCMapStream {
  constructor(data) {
    this.buffer = data;
    this.pos = 0;
    this.end = data.length;
    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);
  }
  readByte() {
    if (this.pos >= this.end) {
      return -1;
    }
    return this.buffer[this.pos++];
  }
  readNumber() {
    let n = 0;
    let last;
    do {
      const b = this.readByte();
      if (b < 0) {
        throw new FormatError("unexpected EOF in bcmap");
      }
      last = !(b & 0x80);
      n = n << 7 | b & 0x7f;
    } while (!last);
    return n;
  }
  readSigned() {
    const n = this.readNumber();
    return n & 1 ? ~(n >>> 1) : n >>> 1;
  }
  readHex(num, size) {
    num.set(this.buffer.subarray(this.pos, this.pos + size + 1));
    this.pos += size + 1;
  }
  readHexNumber(num, size) {
    let last;
    const stack = this.tmpBuf;
    let sp = 0;
    do {
      const b = this.readByte();
      if (b < 0) {
        throw new FormatError("unexpected EOF in bcmap");
      }
      last = !(b & 0x80);
      stack[sp++] = b & 0x7f;
    } while (!last);
    let i = size,
      buffer = 0,
      bufferSize = 0;
    while (i >= 0) {
      while (bufferSize < 8 && stack.length > 0) {
        buffer |= stack[--sp] << bufferSize;
        bufferSize += 7;
      }
      num[i] = buffer & 255;
      i--;
      buffer >>= 8;
      bufferSize -= 8;
    }
  }
  readHexSigned(num, size) {
    this.readHexNumber(num, size);
    const sign = num[size] & 1 ? 255 : 0;
    let c = 0;
    for (let i = 0; i <= size; i++) {
      c = (c & 1) << 8 | num[i];
      num[i] = c >> 1 ^ sign;
    }
  }
  readString() {
    const len = this.readNumber(),
      buf = new Array(len);
    for (let i = 0; i < len; i++) {
      buf[i] = this.readNumber();
    }
    return String.fromCharCode(...buf);
  }
}
class BinaryCMapReader {
  async process(data, cMap, extend) {
    const stream = new BinaryCMapStream(data);
    const header = stream.readByte();
    cMap.vertical = !!(header & 1);
    let useCMap = null;
    const start = new Uint8Array(MAX_NUM_SIZE);
    const end = new Uint8Array(MAX_NUM_SIZE);
    const char = new Uint8Array(MAX_NUM_SIZE);
    const charCode = new Uint8Array(MAX_NUM_SIZE);
    const tmp = new Uint8Array(MAX_NUM_SIZE);
    let code;
    let b;
    while ((b = stream.readByte()) >= 0) {
      const type = b >> 5;
      if (type === 7) {
        switch (b & 0x1f) {
          case 0:
            stream.readString();
            break;
          case 1:
            useCMap = stream.readString();
            break;
        }
        continue;
      }
      const sequence = !!(b & 0x10);
      const dataSize = b & 15;
      if (dataSize + 1 > MAX_NUM_SIZE) {
        throw new Error("BinaryCMapReader.process: Invalid dataSize.");
      }
      const ucs2DataSize = 1;
      const subitemsCount = stream.readNumber();
      switch (type) {
        case 0:
          stream.readHex(start, dataSize);
          stream.readHexNumber(end, dataSize);
          addHex(end, start, dataSize);
          cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));
          for (let i = 1; i < subitemsCount; i++) {
            incHex(end, dataSize);
            stream.readHexNumber(start, dataSize);
            addHex(start, end, dataSize);
            stream.readHexNumber(end, dataSize);
            addHex(end, start, dataSize);
            cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));
          }
          break;
        case 1:
          stream.readHex(start, dataSize);
          stream.readHexNumber(end, dataSize);
          addHex(end, start, dataSize);
          stream.readNumber();
          for (let i = 1; i < subitemsCount; i++) {
            incHex(end, dataSize);
            stream.readHexNumber(start, dataSize);
            addHex(start, end, dataSize);
            stream.readHexNumber(end, dataSize);
            addHex(end, start, dataSize);
            stream.readNumber();
          }
          break;
        case 2:
          stream.readHex(char, dataSize);
          code = stream.readNumber();
          cMap.mapOne(hexToInt(char, dataSize), code);
          for (let i = 1; i < subitemsCount; i++) {
            incHex(char, dataSize);
            if (!sequence) {
              stream.readHexNumber(tmp, dataSize);
              addHex(char, tmp, dataSize);
            }
            code = stream.readSigned() + (code + 1);
            cMap.mapOne(hexToInt(char, dataSize), code);
          }
          break;
        case 3:
          stream.readHex(start, dataSize);
          stream.readHexNumber(end, dataSize);
          addHex(end, start, dataSize);
          code = stream.readNumber();
          cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);
          for (let i = 1; i < subitemsCount; i++) {
            incHex(end, dataSize);
            if (!sequence) {
              stream.readHexNumber(start, dataSize);
              addHex(start, end, dataSize);
            } else {
              start.set(end);
            }
            stream.readHexNumber(end, dataSize);
            addHex(end, start, dataSize);
            code = stream.readNumber();
            cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);
          }
          break;
        case 4:
          stream.readHex(char, ucs2DataSize);
          stream.readHex(charCode, dataSize);
          cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));
          for (let i = 1; i < subitemsCount; i++) {
            incHex(char, ucs2DataSize);
            if (!sequence) {
              stream.readHexNumber(tmp, ucs2DataSize);
              addHex(char, tmp, ucs2DataSize);
            }
            incHex(charCode, dataSize);
            stream.readHexSigned(tmp, dataSize);
            addHex(charCode, tmp, dataSize);
            cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));
          }
          break;
        case 5:
          stream.readHex(start, ucs2DataSize);
          stream.readHexNumber(end, ucs2DataSize);
          addHex(end, start, ucs2DataSize);
          stream.readHex(charCode, dataSize);
          cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));
          for (let i = 1; i < subitemsCount; i++) {
            incHex(end, ucs2DataSize);
            if (!sequence) {
              stream.readHexNumber(start, ucs2DataSize);
              addHex(start, end, ucs2DataSize);
            } else {
              start.set(end);
            }
            stream.readHexNumber(end, ucs2DataSize);
            addHex(end, start, ucs2DataSize);
            stream.readHex(charCode, dataSize);
            cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));
          }
          break;
        default:
          throw new Error(\`BinaryCMapReader.process - unknown type: \${type}\`);
      }
    }
    if (useCMap) {
      return extend(useCMap);
    }
    return cMap;
  }
}

;// ./src/core/ascii_85_stream.js


class Ascii85Stream extends DecodeStream {
  constructor(str, maybeLength) {
    if (maybeLength) {
      maybeLength *= 0.8;
    }
    super(maybeLength);
    this.str = str;
    this.dict = str.dict;
    this.input = new Uint8Array(5);
  }
  readBlock() {
    const TILDA_CHAR = 0x7e;
    const Z_LOWER_CHAR = 0x7a;
    const EOF = -1;
    const str = this.str;
    let c = str.getByte();
    while (isWhiteSpace(c)) {
      c = str.getByte();
    }
    if (c === EOF || c === TILDA_CHAR) {
      this.eof = true;
      return;
    }
    const bufferLength = this.bufferLength;
    let buffer, i;
    if (c === Z_LOWER_CHAR) {
      buffer = this.ensureBuffer(bufferLength + 4);
      for (i = 0; i < 4; ++i) {
        buffer[bufferLength + i] = 0;
      }
      this.bufferLength += 4;
    } else {
      const input = this.input;
      input[0] = c;
      for (i = 1; i < 5; ++i) {
        c = str.getByte();
        while (isWhiteSpace(c)) {
          c = str.getByte();
        }
        input[i] = c;
        if (c === EOF || c === TILDA_CHAR) {
          break;
        }
      }
      buffer = this.ensureBuffer(bufferLength + i - 1);
      this.bufferLength += i - 1;
      if (i < 5) {
        for (; i < 5; ++i) {
          input[i] = 0x21 + 84;
        }
        this.eof = true;
      }
      let t = 0;
      for (i = 0; i < 5; ++i) {
        t = t * 85 + (input[i] - 0x21);
      }
      for (i = 3; i >= 0; --i) {
        buffer[bufferLength + i] = t & 0xff;
        t >>= 8;
      }
    }
  }
}

;// ./src/core/ascii_hex_stream.js

class AsciiHexStream extends DecodeStream {
  constructor(str, maybeLength) {
    if (maybeLength) {
      maybeLength *= 0.5;
    }
    super(maybeLength);
    this.str = str;
    this.dict = str.dict;
    this.firstDigit = -1;
  }
  readBlock() {
    const UPSTREAM_BLOCK_SIZE = 8000;
    const bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);
    if (!bytes.length) {
      this.eof = true;
      return;
    }
    const maxDecodeLength = bytes.length + 1 >> 1;
    const buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);
    let bufferLength = this.bufferLength;
    let firstDigit = this.firstDigit;
    for (const ch of bytes) {
      let digit;
      if (ch >= 0x30 && ch <= 0x39) {
        digit = ch & 0x0f;
      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {
        digit = (ch & 0x0f) + 9;
      } else if (ch === 0x3e) {
        this.eof = true;
        break;
      } else {
        continue;
      }
      if (firstDigit < 0) {
        firstDigit = digit;
      } else {
        buffer[bufferLength++] = firstDigit << 4 | digit;
        firstDigit = -1;
      }
    }
    if (firstDigit >= 0 && this.eof) {
      buffer[bufferLength++] = firstDigit << 4;
      firstDigit = -1;
    }
    this.firstDigit = firstDigit;
    this.bufferLength = bufferLength;
  }
}

;// ./src/core/ccitt.js

const ccittEOL = -2;
const ccittEOF = -1;
const twoDimPass = 0;
const twoDimHoriz = 1;
const twoDimVert0 = 2;
const twoDimVertR1 = 3;
const twoDimVertL1 = 4;
const twoDimVertR2 = 5;
const twoDimVertL2 = 6;
const twoDimVertR3 = 7;
const twoDimVertL3 = 8;
const twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];
const whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];
const whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];
const blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];
const blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];
const blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];
class CCITTFaxDecoder {
  constructor(source, options = {}) {
    if (typeof source?.next !== "function") {
      throw new Error('CCITTFaxDecoder - invalid "source" parameter.');
    }
    this.source = source;
    this.eof = false;
    this.encoding = options.K || 0;
    this.eoline = options.EndOfLine || false;
    this.byteAlign = options.EncodedByteAlign || false;
    this.columns = options.Columns || 1728;
    this.rows = options.Rows || 0;
    this.eoblock = options.EndOfBlock ?? true;
    this.black = options.BlackIs1 || false;
    this.codingLine = new Uint32Array(this.columns + 1);
    this.refLine = new Uint32Array(this.columns + 2);
    this.codingLine[0] = this.columns;
    this.codingPos = 0;
    this.row = 0;
    this.nextLine2D = this.encoding < 0;
    this.inputBits = 0;
    this.inputBuf = 0;
    this.outputBits = 0;
    this.rowsDone = false;
    let code1;
    while ((code1 = this._lookBits(12)) === 0) {
      this._eatBits(1);
    }
    if (code1 === 1) {
      this._eatBits(12);
    }
    if (this.encoding > 0) {
      this.nextLine2D = !this._lookBits(1);
      this._eatBits(1);
    }
  }
  readNextChar() {
    if (this.eof) {
      return -1;
    }
    const refLine = this.refLine;
    const codingLine = this.codingLine;
    const columns = this.columns;
    let refPos, blackPixels, bits, i;
    if (this.outputBits === 0) {
      if (this.rowsDone) {
        this.eof = true;
      }
      if (this.eof) {
        return -1;
      }
      this.err = false;
      let code1, code2, code3;
      if (this.nextLine2D) {
        for (i = 0; codingLine[i] < columns; ++i) {
          refLine[i] = codingLine[i];
        }
        refLine[i++] = columns;
        refLine[i] = columns;
        codingLine[0] = 0;
        this.codingPos = 0;
        refPos = 0;
        blackPixels = 0;
        while (codingLine[this.codingPos] < columns) {
          code1 = this._getTwoDimCode();
          switch (code1) {
            case twoDimPass:
              this._addPixels(refLine[refPos + 1], blackPixels);
              if (refLine[refPos + 1] < columns) {
                refPos += 2;
              }
              break;
            case twoDimHoriz:
              code1 = code2 = 0;
              if (blackPixels) {
                do {
                  code1 += code3 = this._getBlackCode();
                } while (code3 >= 64);
                do {
                  code2 += code3 = this._getWhiteCode();
                } while (code3 >= 64);
              } else {
                do {
                  code1 += code3 = this._getWhiteCode();
                } while (code3 >= 64);
                do {
                  code2 += code3 = this._getBlackCode();
                } while (code3 >= 64);
              }
              this._addPixels(codingLine[this.codingPos] + code1, blackPixels);
              if (codingLine[this.codingPos] < columns) {
                this._addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);
              }
              while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                refPos += 2;
              }
              break;
            case twoDimVertR3:
              this._addPixels(refLine[refPos] + 3, blackPixels);
              blackPixels ^= 1;
              if (codingLine[this.codingPos] < columns) {
                ++refPos;
                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                  refPos += 2;
                }
              }
              break;
            case twoDimVertR2:
              this._addPixels(refLine[refPos] + 2, blackPixels);
              blackPixels ^= 1;
              if (codingLine[this.codingPos] < columns) {
                ++refPos;
                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                  refPos += 2;
                }
              }
              break;
            case twoDimVertR1:
              this._addPixels(refLine[refPos] + 1, blackPixels);
              blackPixels ^= 1;
              if (codingLine[this.codingPos] < columns) {
                ++refPos;
                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                  refPos += 2;
                }
              }
              break;
            case twoDimVert0:
              this._addPixels(refLine[refPos], blackPixels);
              blackPixels ^= 1;
              if (codingLine[this.codingPos] < columns) {
                ++refPos;
                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                  refPos += 2;
                }
              }
              break;
            case twoDimVertL3:
              this._addPixelsNeg(refLine[refPos] - 3, blackPixels);
              blackPixels ^= 1;
              if (codingLine[this.codingPos] < columns) {
                if (refPos > 0) {
                  --refPos;
                } else {
                  ++refPos;
                }
                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                  refPos += 2;
                }
              }
              break;
            case twoDimVertL2:
              this._addPixelsNeg(refLine[refPos] - 2, blackPixels);
              blackPixels ^= 1;
              if (codingLine[this.codingPos] < columns) {
                if (refPos > 0) {
                  --refPos;
                } else {
                  ++refPos;
                }
                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                  refPos += 2;
                }
              }
              break;
            case twoDimVertL1:
              this._addPixelsNeg(refLine[refPos] - 1, blackPixels);
              blackPixels ^= 1;
              if (codingLine[this.codingPos] < columns) {
                if (refPos > 0) {
                  --refPos;
                } else {
                  ++refPos;
                }
                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                  refPos += 2;
                }
              }
              break;
            case ccittEOF:
              this._addPixels(columns, 0);
              this.eof = true;
              break;
            default:
              info("bad 2d code");
              this._addPixels(columns, 0);
              this.err = true;
          }
        }
      } else {
        codingLine[0] = 0;
        this.codingPos = 0;
        blackPixels = 0;
        while (codingLine[this.codingPos] < columns) {
          code1 = 0;
          if (blackPixels) {
            do {
              code1 += code3 = this._getBlackCode();
            } while (code3 >= 64);
          } else {
            do {
              code1 += code3 = this._getWhiteCode();
            } while (code3 >= 64);
          }
          this._addPixels(codingLine[this.codingPos] + code1, blackPixels);
          blackPixels ^= 1;
        }
      }
      let gotEOL = false;
      if (this.byteAlign) {
        this.inputBits &= ~7;
      }
      if (!this.eoblock && this.row === this.rows - 1) {
        this.rowsDone = true;
      } else {
        code1 = this._lookBits(12);
        if (this.eoline) {
          while (code1 !== ccittEOF && code1 !== 1) {
            this._eatBits(1);
            code1 = this._lookBits(12);
          }
        } else {
          while (code1 === 0) {
            this._eatBits(1);
            code1 = this._lookBits(12);
          }
        }
        if (code1 === 1) {
          this._eatBits(12);
          gotEOL = true;
        } else if (code1 === ccittEOF) {
          this.eof = true;
        }
      }
      if (!this.eof && this.encoding > 0 && !this.rowsDone) {
        this.nextLine2D = !this._lookBits(1);
        this._eatBits(1);
      }
      if (this.eoblock && gotEOL && this.byteAlign) {
        code1 = this._lookBits(12);
        if (code1 === 1) {
          this._eatBits(12);
          if (this.encoding > 0) {
            this._lookBits(1);
            this._eatBits(1);
          }
          if (this.encoding >= 0) {
            for (i = 0; i < 4; ++i) {
              code1 = this._lookBits(12);
              if (code1 !== 1) {
                info("bad rtc code: " + code1);
              }
              this._eatBits(12);
              if (this.encoding > 0) {
                this._lookBits(1);
                this._eatBits(1);
              }
            }
          }
          this.eof = true;
        }
      } else if (this.err && this.eoline) {
        while (true) {
          code1 = this._lookBits(13);
          if (code1 === ccittEOF) {
            this.eof = true;
            return -1;
          }
          if (code1 >> 1 === 1) {
            break;
          }
          this._eatBits(1);
        }
        this._eatBits(12);
        if (this.encoding > 0) {
          this._eatBits(1);
          this.nextLine2D = !(code1 & 1);
        }
      }
      this.outputBits = codingLine[0] > 0 ? codingLine[this.codingPos = 0] : codingLine[this.codingPos = 1];
      this.row++;
    }
    let c;
    if (this.outputBits >= 8) {
      c = this.codingPos & 1 ? 0 : 0xff;
      this.outputBits -= 8;
      if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {
        this.codingPos++;
        this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];
      }
    } else {
      bits = 8;
      c = 0;
      do {
        if (typeof this.outputBits !== "number") {
          throw new FormatError('Invalid /CCITTFaxDecode data, "outputBits" must be a number.');
        }
        if (this.outputBits > bits) {
          c <<= bits;
          if (!(this.codingPos & 1)) {
            c |= 0xff >> 8 - bits;
          }
          this.outputBits -= bits;
          bits = 0;
        } else {
          c <<= this.outputBits;
          if (!(this.codingPos & 1)) {
            c |= 0xff >> 8 - this.outputBits;
          }
          bits -= this.outputBits;
          this.outputBits = 0;
          if (codingLine[this.codingPos] < columns) {
            this.codingPos++;
            this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];
          } else if (bits > 0) {
            c <<= bits;
            bits = 0;
          }
        }
      } while (bits);
    }
    if (this.black) {
      c ^= 0xff;
    }
    return c;
  }
  _addPixels(a1, blackPixels) {
    const codingLine = this.codingLine;
    let codingPos = this.codingPos;
    if (a1 > codingLine[codingPos]) {
      if (a1 > this.columns) {
        info("row is wrong length");
        this.err = true;
        a1 = this.columns;
      }
      if (codingPos & 1 ^ blackPixels) {
        ++codingPos;
      }
      codingLine[codingPos] = a1;
    }
    this.codingPos = codingPos;
  }
  _addPixelsNeg(a1, blackPixels) {
    const codingLine = this.codingLine;
    let codingPos = this.codingPos;
    if (a1 > codingLine[codingPos]) {
      if (a1 > this.columns) {
        info("row is wrong length");
        this.err = true;
        a1 = this.columns;
      }
      if (codingPos & 1 ^ blackPixels) {
        ++codingPos;
      }
      codingLine[codingPos] = a1;
    } else if (a1 < codingLine[codingPos]) {
      if (a1 < 0) {
        info("invalid code");
        this.err = true;
        a1 = 0;
      }
      while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {
        --codingPos;
      }
      codingLine[codingPos] = a1;
    }
    this.codingPos = codingPos;
  }
  _findTableCode(start, end, table, limit) {
    const limitValue = limit || 0;
    for (let i = start; i <= end; ++i) {
      let code = this._lookBits(i);
      if (code === ccittEOF) {
        return [true, 1, false];
      }
      if (i < end) {
        code <<= end - i;
      }
      if (!limitValue || code >= limitValue) {
        const p = table[code - limitValue];
        if (p[0] === i) {
          this._eatBits(i);
          return [true, p[1], true];
        }
      }
    }
    return [false, 0, false];
  }
  _getTwoDimCode() {
    let code = 0;
    let p;
    if (this.eoblock) {
      code = this._lookBits(7);
      p = twoDimTable[code];
      if (p?.[0] > 0) {
        this._eatBits(p[0]);
        return p[1];
      }
    } else {
      const result = this._findTableCode(1, 7, twoDimTable);
      if (result[0] && result[2]) {
        return result[1];
      }
    }
    info("Bad two dim code");
    return ccittEOF;
  }
  _getWhiteCode() {
    let code = 0;
    let p;
    if (this.eoblock) {
      code = this._lookBits(12);
      if (code === ccittEOF) {
        return 1;
      }
      p = code >> 5 === 0 ? whiteTable1[code] : whiteTable2[code >> 3];
      if (p[0] > 0) {
        this._eatBits(p[0]);
        return p[1];
      }
    } else {
      let result = this._findTableCode(1, 9, whiteTable2);
      if (result[0]) {
        return result[1];
      }
      result = this._findTableCode(11, 12, whiteTable1);
      if (result[0]) {
        return result[1];
      }
    }
    info("bad white code");
    this._eatBits(1);
    return 1;
  }
  _getBlackCode() {
    let code, p;
    if (this.eoblock) {
      code = this._lookBits(13);
      if (code === ccittEOF) {
        return 1;
      }
      if (code >> 7 === 0) {
        p = blackTable1[code];
      } else if (code >> 9 === 0 && code >> 7 !== 0) {
        p = blackTable2[(code >> 1) - 64];
      } else {
        p = blackTable3[code >> 7];
      }
      if (p[0] > 0) {
        this._eatBits(p[0]);
        return p[1];
      }
    } else {
      let result = this._findTableCode(2, 6, blackTable3);
      if (result[0]) {
        return result[1];
      }
      result = this._findTableCode(7, 12, blackTable2, 64);
      if (result[0]) {
        return result[1];
      }
      result = this._findTableCode(10, 13, blackTable1);
      if (result[0]) {
        return result[1];
      }
    }
    info("bad black code");
    this._eatBits(1);
    return 1;
  }
  _lookBits(n) {
    let c;
    while (this.inputBits < n) {
      if ((c = this.source.next()) === -1) {
        if (this.inputBits === 0) {
          return ccittEOF;
        }
        return this.inputBuf << n - this.inputBits & 0xffff >> 16 - n;
      }
      this.inputBuf = this.inputBuf << 8 | c;
      this.inputBits += 8;
    }
    return this.inputBuf >> this.inputBits - n & 0xffff >> 16 - n;
  }
  _eatBits(n) {
    if ((this.inputBits -= n) < 0) {
      this.inputBits = 0;
    }
  }
}

;// ./src/core/ccitt_stream.js



class CCITTFaxStream extends DecodeStream {
  constructor(str, maybeLength, params) {
    super(maybeLength);
    this.str = str;
    this.dict = str.dict;
    if (!(params instanceof Dict)) {
      params = Dict.empty;
    }
    const source = {
      next() {
        return str.getByte();
      }
    };
    this.ccittFaxDecoder = new CCITTFaxDecoder(source, {
      K: params.get("K"),
      EndOfLine: params.get("EndOfLine"),
      EncodedByteAlign: params.get("EncodedByteAlign"),
      Columns: params.get("Columns"),
      Rows: params.get("Rows"),
      EndOfBlock: params.get("EndOfBlock"),
      BlackIs1: params.get("BlackIs1")
    });
  }
  readBlock() {
    while (!this.eof) {
      const c = this.ccittFaxDecoder.readNextChar();
      if (c === -1) {
        this.eof = true;
        return;
      }
      this.ensureBuffer(this.bufferLength + 1);
      this.buffer[this.bufferLength++] = c;
    }
  }
}

;// ./src/core/flate_stream.js



const codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
const lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);
const distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);
const fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];
const fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];
class FlateStream extends DecodeStream {
  constructor(str, maybeLength) {
    super(maybeLength);
    this.str = str;
    this.dict = str.dict;
    const cmf = str.getByte();
    const flg = str.getByte();
    if (cmf === -1 || flg === -1) {
      throw new FormatError(\`Invalid header in flate stream: \${cmf}, \${flg}\`);
    }
    if ((cmf & 0x0f) !== 0x08) {
      throw new FormatError(\`Unknown compression method in flate stream: \${cmf}, \${flg}\`);
    }
    if (((cmf << 8) + flg) % 31 !== 0) {
      throw new FormatError(\`Bad FCHECK in flate stream: \${cmf}, \${flg}\`);
    }
    if (flg & 0x20) {
      throw new FormatError(\`FDICT bit set in flate stream: \${cmf}, \${flg}\`);
    }
    this.codeSize = 0;
    this.codeBuf = 0;
  }
  async getImageData(length, _decoderOptions) {
    const data = await this.asyncGetBytes();
    return data?.subarray(0, length) || this.getBytes(length);
  }
  async asyncGetBytes() {
    this.str.reset();
    const bytes = this.str.getBytes();
    try {
      const {
        readable,
        writable
      } = new DecompressionStream("deflate");
      const writer = writable.getWriter();
      await writer.ready;
      writer.write(bytes).then(async () => {
        await writer.ready;
        await writer.close();
      }).catch(() => {});
      const chunks = [];
      let totalLength = 0;
      for await (const chunk of readable) {
        chunks.push(chunk);
        totalLength += chunk.byteLength;
      }
      const data = new Uint8Array(totalLength);
      let offset = 0;
      for (const chunk of chunks) {
        data.set(chunk, offset);
        offset += chunk.byteLength;
      }
      return data;
    } catch {
      this.str = new Stream(bytes, 2, bytes.length, this.str.dict);
      this.reset();
      return null;
    }
  }
  get isAsync() {
    return true;
  }
  getBits(bits) {
    const str = this.str;
    let codeSize = this.codeSize;
    let codeBuf = this.codeBuf;
    let b;
    while (codeSize < bits) {
      if ((b = str.getByte()) === -1) {
        throw new FormatError("Bad encoding in flate stream");
      }
      codeBuf |= b << codeSize;
      codeSize += 8;
    }
    b = codeBuf & (1 << bits) - 1;
    this.codeBuf = codeBuf >> bits;
    this.codeSize = codeSize -= bits;
    return b;
  }
  getCode(table) {
    const str = this.str;
    const codes = table[0];
    const maxLen = table[1];
    let codeSize = this.codeSize;
    let codeBuf = this.codeBuf;
    let b;
    while (codeSize < maxLen) {
      if ((b = str.getByte()) === -1) {
        break;
      }
      codeBuf |= b << codeSize;
      codeSize += 8;
    }
    const code = codes[codeBuf & (1 << maxLen) - 1];
    const codeLen = code >> 16;
    const codeVal = code & 0xffff;
    if (codeLen < 1 || codeSize < codeLen) {
      throw new FormatError("Bad encoding in flate stream");
    }
    this.codeBuf = codeBuf >> codeLen;
    this.codeSize = codeSize - codeLen;
    return codeVal;
  }
  generateHuffmanTable(lengths) {
    const n = lengths.length;
    let maxLen = 0;
    let i;
    for (i = 0; i < n; ++i) {
      if (lengths[i] > maxLen) {
        maxLen = lengths[i];
      }
    }
    const size = 1 << maxLen;
    const codes = new Int32Array(size);
    for (let len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {
      for (let val = 0; val < n; ++val) {
        if (lengths[val] === len) {
          let code2 = 0;
          let t = code;
          for (i = 0; i < len; ++i) {
            code2 = code2 << 1 | t & 1;
            t >>= 1;
          }
          for (i = code2; i < size; i += skip) {
            codes[i] = len << 16 | val;
          }
          ++code;
        }
      }
    }
    return [codes, maxLen];
  }
  #endsStreamOnError(err) {
    info(err);
    this.eof = true;
  }
  readBlock() {
    let buffer, hdr, len;
    const str = this.str;
    try {
      hdr = this.getBits(3);
    } catch (ex) {
      this.#endsStreamOnError(ex.message);
      return;
    }
    if (hdr & 1) {
      this.eof = true;
    }
    hdr >>= 1;
    if (hdr === 0) {
      let b;
      if ((b = str.getByte()) === -1) {
        this.#endsStreamOnError("Bad block header in flate stream");
        return;
      }
      let blockLen = b;
      if ((b = str.getByte()) === -1) {
        this.#endsStreamOnError("Bad block header in flate stream");
        return;
      }
      blockLen |= b << 8;
      if ((b = str.getByte()) === -1) {
        this.#endsStreamOnError("Bad block header in flate stream");
        return;
      }
      let check = b;
      if ((b = str.getByte()) === -1) {
        this.#endsStreamOnError("Bad block header in flate stream");
        return;
      }
      check |= b << 8;
      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {
        throw new FormatError("Bad uncompressed block length in flate stream");
      }
      this.codeBuf = 0;
      this.codeSize = 0;
      const bufferLength = this.bufferLength,
        end = bufferLength + blockLen;
      buffer = this.ensureBuffer(end);
      this.bufferLength = end;
      if (blockLen === 0) {
        if (str.peekByte() === -1) {
          this.eof = true;
        }
      } else {
        const block = str.getBytes(blockLen);
        buffer.set(block, bufferLength);
        if (block.length < blockLen) {
          this.eof = true;
        }
      }
      return;
    }
    let litCodeTable;
    let distCodeTable;
    if (hdr === 1) {
      litCodeTable = fixedLitCodeTab;
      distCodeTable = fixedDistCodeTab;
    } else if (hdr === 2) {
      const numLitCodes = this.getBits(5) + 257;
      const numDistCodes = this.getBits(5) + 1;
      const numCodeLenCodes = this.getBits(4) + 4;
      const codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);
      let i;
      for (i = 0; i < numCodeLenCodes; ++i) {
        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);
      }
      const codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);
      len = 0;
      i = 0;
      const codes = numLitCodes + numDistCodes;
      const codeLengths = new Uint8Array(codes);
      let bitsLength, bitsOffset, what;
      while (i < codes) {
        const code = this.getCode(codeLenCodeTab);
        if (code === 16) {
          bitsLength = 2;
          bitsOffset = 3;
          what = len;
        } else if (code === 17) {
          bitsLength = 3;
          bitsOffset = 3;
          what = len = 0;
        } else if (code === 18) {
          bitsLength = 7;
          bitsOffset = 11;
          what = len = 0;
        } else {
          codeLengths[i++] = len = code;
          continue;
        }
        let repeatLength = this.getBits(bitsLength) + bitsOffset;
        while (repeatLength-- > 0) {
          codeLengths[i++] = what;
        }
      }
      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));
      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));
    } else {
      throw new FormatError("Unknown block type in flate stream");
    }
    buffer = this.buffer;
    let limit = buffer ? buffer.length : 0;
    let pos = this.bufferLength;
    while (true) {
      let code1 = this.getCode(litCodeTable);
      if (code1 < 256) {
        if (pos + 1 >= limit) {
          buffer = this.ensureBuffer(pos + 1);
          limit = buffer.length;
        }
        buffer[pos++] = code1;
        continue;
      }
      if (code1 === 256) {
        this.bufferLength = pos;
        return;
      }
      code1 -= 257;
      code1 = lengthDecode[code1];
      let code2 = code1 >> 16;
      if (code2 > 0) {
        code2 = this.getBits(code2);
      }
      len = (code1 & 0xffff) + code2;
      code1 = this.getCode(distCodeTable);
      code1 = distDecode[code1];
      code2 = code1 >> 16;
      if (code2 > 0) {
        code2 = this.getBits(code2);
      }
      const dist = (code1 & 0xffff) + code2;
      if (pos + len >= limit) {
        buffer = this.ensureBuffer(pos + len);
        limit = buffer.length;
      }
      for (let k = 0; k < len; ++k, ++pos) {
        buffer[pos] = buffer[pos - dist];
      }
    }
  }
}

;// ./src/core/arithmetic_decoder.js
const QeTable = [{
  qe: 0x5601,
  nmps: 1,
  nlps: 1,
  switchFlag: 1
}, {
  qe: 0x3401,
  nmps: 2,
  nlps: 6,
  switchFlag: 0
}, {
  qe: 0x1801,
  nmps: 3,
  nlps: 9,
  switchFlag: 0
}, {
  qe: 0x0ac1,
  nmps: 4,
  nlps: 12,
  switchFlag: 0
}, {
  qe: 0x0521,
  nmps: 5,
  nlps: 29,
  switchFlag: 0
}, {
  qe: 0x0221,
  nmps: 38,
  nlps: 33,
  switchFlag: 0
}, {
  qe: 0x5601,
  nmps: 7,
  nlps: 6,
  switchFlag: 1
}, {
  qe: 0x5401,
  nmps: 8,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 0x4801,
  nmps: 9,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 0x3801,
  nmps: 10,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 0x3001,
  nmps: 11,
  nlps: 17,
  switchFlag: 0
}, {
  qe: 0x2401,
  nmps: 12,
  nlps: 18,
  switchFlag: 0
}, {
  qe: 0x1c01,
  nmps: 13,
  nlps: 20,
  switchFlag: 0
}, {
  qe: 0x1601,
  nmps: 29,
  nlps: 21,
  switchFlag: 0
}, {
  qe: 0x5601,
  nmps: 15,
  nlps: 14,
  switchFlag: 1
}, {
  qe: 0x5401,
  nmps: 16,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 0x5101,
  nmps: 17,
  nlps: 15,
  switchFlag: 0
}, {
  qe: 0x4801,
  nmps: 18,
  nlps: 16,
  switchFlag: 0
}, {
  qe: 0x3801,
  nmps: 19,
  nlps: 17,
  switchFlag: 0
}, {
  qe: 0x3401,
  nmps: 20,
  nlps: 18,
  switchFlag: 0
}, {
  qe: 0x3001,
  nmps: 21,
  nlps: 19,
  switchFlag: 0
}, {
  qe: 0x2801,
  nmps: 22,
  nlps: 19,
  switchFlag: 0
}, {
  qe: 0x2401,
  nmps: 23,
  nlps: 20,
  switchFlag: 0
}, {
  qe: 0x2201,
  nmps: 24,
  nlps: 21,
  switchFlag: 0
}, {
  qe: 0x1c01,
  nmps: 25,
  nlps: 22,
  switchFlag: 0
}, {
  qe: 0x1801,
  nmps: 26,
  nlps: 23,
  switchFlag: 0
}, {
  qe: 0x1601,
  nmps: 27,
  nlps: 24,
  switchFlag: 0
}, {
  qe: 0x1401,
  nmps: 28,
  nlps: 25,
  switchFlag: 0
}, {
  qe: 0x1201,
  nmps: 29,
  nlps: 26,
  switchFlag: 0
}, {
  qe: 0x1101,
  nmps: 30,
  nlps: 27,
  switchFlag: 0
}, {
  qe: 0x0ac1,
  nmps: 31,
  nlps: 28,
  switchFlag: 0
}, {
  qe: 0x09c1,
  nmps: 32,
  nlps: 29,
  switchFlag: 0
}, {
  qe: 0x08a1,
  nmps: 33,
  nlps: 30,
  switchFlag: 0
}, {
  qe: 0x0521,
  nmps: 34,
  nlps: 31,
  switchFlag: 0
}, {
  qe: 0x0441,
  nmps: 35,
  nlps: 32,
  switchFlag: 0
}, {
  qe: 0x02a1,
  nmps: 36,
  nlps: 33,
  switchFlag: 0
}, {
  qe: 0x0221,
  nmps: 37,
  nlps: 34,
  switchFlag: 0
}, {
  qe: 0x0141,
  nmps: 38,
  nlps: 35,
  switchFlag: 0
}, {
  qe: 0x0111,
  nmps: 39,
  nlps: 36,
  switchFlag: 0
}, {
  qe: 0x0085,
  nmps: 40,
  nlps: 37,
  switchFlag: 0
}, {
  qe: 0x0049,
  nmps: 41,
  nlps: 38,
  switchFlag: 0
}, {
  qe: 0x0025,
  nmps: 42,
  nlps: 39,
  switchFlag: 0
}, {
  qe: 0x0015,
  nmps: 43,
  nlps: 40,
  switchFlag: 0
}, {
  qe: 0x0009,
  nmps: 44,
  nlps: 41,
  switchFlag: 0
}, {
  qe: 0x0005,
  nmps: 45,
  nlps: 42,
  switchFlag: 0
}, {
  qe: 0x0001,
  nmps: 45,
  nlps: 43,
  switchFlag: 0
}, {
  qe: 0x5601,
  nmps: 46,
  nlps: 46,
  switchFlag: 0
}];
class ArithmeticDecoder {
  constructor(data, start, end) {
    this.data = data;
    this.bp = start;
    this.dataEnd = end;
    this.chigh = data[start];
    this.clow = 0;
    this.byteIn();
    this.chigh = this.chigh << 7 & 0xffff | this.clow >> 9 & 0x7f;
    this.clow = this.clow << 7 & 0xffff;
    this.ct -= 7;
    this.a = 0x8000;
  }
  byteIn() {
    const data = this.data;
    let bp = this.bp;
    if (data[bp] === 0xff) {
      if (data[bp + 1] > 0x8f) {
        this.clow += 0xff00;
        this.ct = 8;
      } else {
        bp++;
        this.clow += data[bp] << 9;
        this.ct = 7;
        this.bp = bp;
      }
    } else {
      bp++;
      this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;
      this.ct = 8;
      this.bp = bp;
    }
    if (this.clow > 0xffff) {
      this.chigh += this.clow >> 16;
      this.clow &= 0xffff;
    }
  }
  readBit(contexts, pos) {
    let cx_index = contexts[pos] >> 1,
      cx_mps = contexts[pos] & 1;
    const qeTableIcx = QeTable[cx_index];
    const qeIcx = qeTableIcx.qe;
    let d;
    let a = this.a - qeIcx;
    if (this.chigh < qeIcx) {
      if (a < qeIcx) {
        a = qeIcx;
        d = cx_mps;
        cx_index = qeTableIcx.nmps;
      } else {
        a = qeIcx;
        d = 1 ^ cx_mps;
        if (qeTableIcx.switchFlag === 1) {
          cx_mps = d;
        }
        cx_index = qeTableIcx.nlps;
      }
    } else {
      this.chigh -= qeIcx;
      if ((a & 0x8000) !== 0) {
        this.a = a;
        return cx_mps;
      }
      if (a < qeIcx) {
        d = 1 ^ cx_mps;
        if (qeTableIcx.switchFlag === 1) {
          cx_mps = d;
        }
        cx_index = qeTableIcx.nlps;
      } else {
        d = cx_mps;
        cx_index = qeTableIcx.nmps;
      }
    }
    do {
      if (this.ct === 0) {
        this.byteIn();
      }
      a <<= 1;
      this.chigh = this.chigh << 1 & 0xffff | this.clow >> 15 & 1;
      this.clow = this.clow << 1 & 0xffff;
      this.ct--;
    } while ((a & 0x8000) === 0);
    this.a = a;
    contexts[pos] = cx_index << 1 | cx_mps;
    return d;
  }
}

;// ./src/core/jbig2.js




class Jbig2Error extends BaseException {
  constructor(msg) {
    super(msg, "Jbig2Error");
  }
}
class ContextCache {
  getContexts(id) {
    if (id in this) {
      return this[id];
    }
    return this[id] = new Int8Array(1 << 16);
  }
}
class DecodingContext {
  constructor(data, start, end) {
    this.data = data;
    this.start = start;
    this.end = end;
  }
  get decoder() {
    const decoder = new ArithmeticDecoder(this.data, this.start, this.end);
    return shadow(this, "decoder", decoder);
  }
  get contextCache() {
    const cache = new ContextCache();
    return shadow(this, "contextCache", cache);
  }
}
function decodeInteger(contextCache, procedure, decoder) {
  const contexts = contextCache.getContexts(procedure);
  let prev = 1;
  function readBits(length) {
    let v = 0;
    for (let i = 0; i < length; i++) {
      const bit = decoder.readBit(contexts, prev);
      prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;
      v = v << 1 | bit;
    }
    return v >>> 0;
  }
  const sign = readBits(1);
  const value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);
  let signedValue;
  if (sign === 0) {
    signedValue = value;
  } else if (value > 0) {
    signedValue = -value;
  }
  if (signedValue >= MIN_INT_32 && signedValue <= MAX_INT_32) {
    return signedValue;
  }
  return null;
}
function decodeIAID(contextCache, decoder, codeLength) {
  const contexts = contextCache.getContexts("IAID");
  let prev = 1;
  for (let i = 0; i < codeLength; i++) {
    const bit = decoder.readBit(contexts, prev);
    prev = prev << 1 | bit;
  }
  if (codeLength < 31) {
    return prev & (1 << codeLength) - 1;
  }
  return prev & 0x7fffffff;
}
const SegmentTypes = ["SymbolDictionary", null, null, null, "IntermediateTextRegion", null, "ImmediateTextRegion", "ImmediateLosslessTextRegion", null, null, null, null, null, null, null, null, "PatternDictionary", null, null, null, "IntermediateHalftoneRegion", null, "ImmediateHalftoneRegion", "ImmediateLosslessHalftoneRegion", null, null, null, null, null, null, null, null, null, null, null, null, "IntermediateGenericRegion", null, "ImmediateGenericRegion", "ImmediateLosslessGenericRegion", "IntermediateGenericRefinementRegion", null, "ImmediateGenericRefinementRegion", "ImmediateLosslessGenericRefinementRegion", null, null, null, null, "PageInformation", "EndOfPage", "EndOfStripe", "EndOfFile", "Profiles", "Tables", null, null, null, null, null, null, null, null, "Extension"];
const CodingTemplates = [[{
  x: -1,
  y: -2
}, {
  x: 0,
  y: -2
}, {
  x: 1,
  y: -2
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: 2,
  y: -1
}, {
  x: -4,
  y: 0
}, {
  x: -3,
  y: 0
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}], [{
  x: -1,
  y: -2
}, {
  x: 0,
  y: -2
}, {
  x: 1,
  y: -2
}, {
  x: 2,
  y: -2
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: 2,
  y: -1
}, {
  x: -3,
  y: 0
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}], [{
  x: -1,
  y: -2
}, {
  x: 0,
  y: -2
}, {
  x: 1,
  y: -2
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}], [{
  x: -3,
  y: -1
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: -4,
  y: 0
}, {
  x: -3,
  y: 0
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}]];
const RefinementTemplates = [{
  coding: [{
    x: 0,
    y: -1
  }, {
    x: 1,
    y: -1
  }, {
    x: -1,
    y: 0
  }],
  reference: [{
    x: 0,
    y: -1
  }, {
    x: 1,
    y: -1
  }, {
    x: -1,
    y: 0
  }, {
    x: 0,
    y: 0
  }, {
    x: 1,
    y: 0
  }, {
    x: -1,
    y: 1
  }, {
    x: 0,
    y: 1
  }, {
    x: 1,
    y: 1
  }]
}, {
  coding: [{
    x: -1,
    y: -1
  }, {
    x: 0,
    y: -1
  }, {
    x: 1,
    y: -1
  }, {
    x: -1,
    y: 0
  }],
  reference: [{
    x: 0,
    y: -1
  }, {
    x: -1,
    y: 0
  }, {
    x: 0,
    y: 0
  }, {
    x: 1,
    y: 0
  }, {
    x: 0,
    y: 1
  }, {
    x: 1,
    y: 1
  }]
}];
const ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];
const RefinementReusedContexts = [0x0020, 0x0008];
function decodeBitmapTemplate0(width, height, decodingContext) {
  const decoder = decodingContext.decoder;
  const contexts = decodingContext.contextCache.getContexts("GB");
  const bitmap = [];
  let contextLabel, i, j, pixel, row, row1, row2;
  const OLD_PIXEL_MASK = 0x7bf7;
  for (i = 0; i < height; i++) {
    row = bitmap[i] = new Uint8Array(width);
    row1 = i < 1 ? row : bitmap[i - 1];
    row2 = i < 2 ? row : bitmap[i - 2];
    contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;
    for (j = 0; j < width; j++) {
      row[j] = pixel = decoder.readBit(contexts, contextLabel);
      contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;
    }
  }
  return bitmap;
}
function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {
  if (mmr) {
    const input = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);
    return decodeMMRBitmap(input, width, height, false);
  }
  if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {
    return decodeBitmapTemplate0(width, height, decodingContext);
  }
  const useskip = !!skip;
  const template = CodingTemplates[templateIndex].concat(at);
  template.sort((a, b) => a.y - b.y || a.x - b.x);
  const templateLength = template.length;
  const templateX = new Int8Array(templateLength);
  const templateY = new Int8Array(templateLength);
  const changingTemplateEntries = [];
  let reuseMask = 0,
    minX = 0,
    maxX = 0,
    minY = 0;
  let c, k;
  for (k = 0; k < templateLength; k++) {
    templateX[k] = template[k].x;
    templateY[k] = template[k].y;
    minX = Math.min(minX, template[k].x);
    maxX = Math.max(maxX, template[k].x);
    minY = Math.min(minY, template[k].y);
    if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {
      reuseMask |= 1 << templateLength - 1 - k;
    } else {
      changingTemplateEntries.push(k);
    }
  }
  const changingEntriesLength = changingTemplateEntries.length;
  const changingTemplateX = new Int8Array(changingEntriesLength);
  const changingTemplateY = new Int8Array(changingEntriesLength);
  const changingTemplateBit = new Uint16Array(changingEntriesLength);
  for (c = 0; c < changingEntriesLength; c++) {
    k = changingTemplateEntries[c];
    changingTemplateX[c] = template[k].x;
    changingTemplateY[c] = template[k].y;
    changingTemplateBit[c] = 1 << templateLength - 1 - k;
  }
  const sbb_left = -minX;
  const sbb_top = -minY;
  const sbb_right = width - maxX;
  const pseudoPixelContext = ReusedContexts[templateIndex];
  let row = new Uint8Array(width);
  const bitmap = [];
  const decoder = decodingContext.decoder;
  const contexts = decodingContext.contextCache.getContexts("GB");
  let ltp = 0,
    j,
    i0,
    j0,
    contextLabel = 0,
    bit,
    shift;
  for (let i = 0; i < height; i++) {
    if (prediction) {
      const sltp = decoder.readBit(contexts, pseudoPixelContext);
      ltp ^= sltp;
      if (ltp) {
        bitmap.push(row);
        continue;
      }
    }
    row = new Uint8Array(row);
    bitmap.push(row);
    for (j = 0; j < width; j++) {
      if (useskip && skip[i][j]) {
        row[j] = 0;
        continue;
      }
      if (j >= sbb_left && j < sbb_right && i >= sbb_top) {
        contextLabel = contextLabel << 1 & reuseMask;
        for (k = 0; k < changingEntriesLength; k++) {
          i0 = i + changingTemplateY[k];
          j0 = j + changingTemplateX[k];
          bit = bitmap[i0][j0];
          if (bit) {
            bit = changingTemplateBit[k];
            contextLabel |= bit;
          }
        }
      } else {
        contextLabel = 0;
        shift = templateLength - 1;
        for (k = 0; k < templateLength; k++, shift--) {
          j0 = j + templateX[k];
          if (j0 >= 0 && j0 < width) {
            i0 = i + templateY[k];
            if (i0 >= 0) {
              bit = bitmap[i0][j0];
              if (bit) {
                contextLabel |= bit << shift;
              }
            }
          }
        }
      }
      const pixel = decoder.readBit(contexts, contextLabel);
      row[j] = pixel;
    }
  }
  return bitmap;
}
function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {
  let codingTemplate = RefinementTemplates[templateIndex].coding;
  if (templateIndex === 0) {
    codingTemplate = codingTemplate.concat([at[0]]);
  }
  const codingTemplateLength = codingTemplate.length;
  const codingTemplateX = new Int32Array(codingTemplateLength);
  const codingTemplateY = new Int32Array(codingTemplateLength);
  let k;
  for (k = 0; k < codingTemplateLength; k++) {
    codingTemplateX[k] = codingTemplate[k].x;
    codingTemplateY[k] = codingTemplate[k].y;
  }
  let referenceTemplate = RefinementTemplates[templateIndex].reference;
  if (templateIndex === 0) {
    referenceTemplate = referenceTemplate.concat([at[1]]);
  }
  const referenceTemplateLength = referenceTemplate.length;
  const referenceTemplateX = new Int32Array(referenceTemplateLength);
  const referenceTemplateY = new Int32Array(referenceTemplateLength);
  for (k = 0; k < referenceTemplateLength; k++) {
    referenceTemplateX[k] = referenceTemplate[k].x;
    referenceTemplateY[k] = referenceTemplate[k].y;
  }
  const referenceWidth = referenceBitmap[0].length;
  const referenceHeight = referenceBitmap.length;
  const pseudoPixelContext = RefinementReusedContexts[templateIndex];
  const bitmap = [];
  const decoder = decodingContext.decoder;
  const contexts = decodingContext.contextCache.getContexts("GR");
  let ltp = 0;
  for (let i = 0; i < height; i++) {
    if (prediction) {
      const sltp = decoder.readBit(contexts, pseudoPixelContext);
      ltp ^= sltp;
      if (ltp) {
        throw new Jbig2Error("prediction is not supported");
      }
    }
    const row = new Uint8Array(width);
    bitmap.push(row);
    for (let j = 0; j < width; j++) {
      let i0, j0;
      let contextLabel = 0;
      for (k = 0; k < codingTemplateLength; k++) {
        i0 = i + codingTemplateY[k];
        j0 = j + codingTemplateX[k];
        if (i0 < 0 || j0 < 0 || j0 >= width) {
          contextLabel <<= 1;
        } else {
          contextLabel = contextLabel << 1 | bitmap[i0][j0];
        }
      }
      for (k = 0; k < referenceTemplateLength; k++) {
        i0 = i + referenceTemplateY[k] - offsetY;
        j0 = j + referenceTemplateX[k] - offsetX;
        if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {
          contextLabel <<= 1;
        } else {
          contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];
        }
      }
      const pixel = decoder.readBit(contexts, contextLabel);
      row[j] = pixel;
    }
  }
  return bitmap;
}
function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext, huffmanInput) {
  if (huffman && refinement) {
    throw new Jbig2Error("symbol refinement with Huffman is not supported");
  }
  const newSymbols = [];
  let currentHeight = 0;
  let symbolCodeLength = log2(symbols.length + numberOfNewSymbols);
  const decoder = decodingContext.decoder;
  const contextCache = decodingContext.contextCache;
  let tableB1, symbolWidths;
  if (huffman) {
    tableB1 = getStandardTable(1);
    symbolWidths = [];
    symbolCodeLength = Math.max(symbolCodeLength, 1);
  }
  while (newSymbols.length < numberOfNewSymbols) {
    const deltaHeight = huffman ? huffmanTables.tableDeltaHeight.decode(huffmanInput) : decodeInteger(contextCache, "IADH", decoder);
    currentHeight += deltaHeight;
    let currentWidth = 0,
      totalWidth = 0;
    const firstSymbol = huffman ? symbolWidths.length : 0;
    while (true) {
      const deltaWidth = huffman ? huffmanTables.tableDeltaWidth.decode(huffmanInput) : decodeInteger(contextCache, "IADW", decoder);
      if (deltaWidth === null) {
        break;
      }
      currentWidth += deltaWidth;
      totalWidth += currentWidth;
      let bitmap;
      if (refinement) {
        const numberOfInstances = decodeInteger(contextCache, "IAAI", decoder);
        if (numberOfInstances > 1) {
          bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, 0, huffmanInput);
        } else {
          const symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
          const rdx = decodeInteger(contextCache, "IARDX", decoder);
          const rdy = decodeInteger(contextCache, "IARDY", decoder);
          const symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];
          bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);
        }
        newSymbols.push(bitmap);
      } else if (huffman) {
        symbolWidths.push(currentWidth);
      } else {
        bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);
        newSymbols.push(bitmap);
      }
    }
    if (huffman && !refinement) {
      const bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);
      huffmanInput.byteAlign();
      let collectiveBitmap;
      if (bitmapSize === 0) {
        collectiveBitmap = readUncompressedBitmap(huffmanInput, totalWidth, currentHeight);
      } else {
        const originalEnd = huffmanInput.end;
        const bitmapEnd = huffmanInput.position + bitmapSize;
        huffmanInput.end = bitmapEnd;
        collectiveBitmap = decodeMMRBitmap(huffmanInput, totalWidth, currentHeight, false);
        huffmanInput.end = originalEnd;
        huffmanInput.position = bitmapEnd;
      }
      const numberOfSymbolsDecoded = symbolWidths.length;
      if (firstSymbol === numberOfSymbolsDecoded - 1) {
        newSymbols.push(collectiveBitmap);
      } else {
        let i,
          y,
          xMin = 0,
          xMax,
          bitmapWidth,
          symbolBitmap;
        for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {
          bitmapWidth = symbolWidths[i];
          xMax = xMin + bitmapWidth;
          symbolBitmap = [];
          for (y = 0; y < currentHeight; y++) {
            symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
          }
          newSymbols.push(symbolBitmap);
          xMin = xMax;
        }
      }
    }
  }
  const exportedSymbols = [],
    flags = [];
  let currentFlag = false,
    i,
    ii;
  const totalSymbolsLength = symbols.length + numberOfNewSymbols;
  while (flags.length < totalSymbolsLength) {
    let runLength = huffman ? tableB1.decode(huffmanInput) : decodeInteger(contextCache, "IAEX", decoder);
    while (runLength--) {
      flags.push(currentFlag);
    }
    currentFlag = !currentFlag;
  }
  for (i = 0, ii = symbols.length; i < ii; i++) {
    if (flags[i]) {
      exportedSymbols.push(symbols[i]);
    }
  }
  for (let j = 0; j < numberOfNewSymbols; i++, j++) {
    if (flags[i]) {
      exportedSymbols.push(newSymbols[j]);
    }
  }
  return exportedSymbols;
}
function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, logStripSize, huffmanInput) {
  if (huffman && refinement) {
    throw new Jbig2Error("refinement with Huffman is not supported");
  }
  const bitmap = [];
  let i, row;
  for (i = 0; i < height; i++) {
    row = new Uint8Array(width);
    if (defaultPixelValue) {
      row.fill(defaultPixelValue);
    }
    bitmap.push(row);
  }
  const decoder = decodingContext.decoder;
  const contextCache = decodingContext.contextCache;
  let stripT = huffman ? -huffmanTables.tableDeltaT.decode(huffmanInput) : -decodeInteger(contextCache, "IADT", decoder);
  let firstS = 0;
  i = 0;
  while (i < numberOfSymbolInstances) {
    const deltaT = huffman ? huffmanTables.tableDeltaT.decode(huffmanInput) : decodeInteger(contextCache, "IADT", decoder);
    stripT += deltaT;
    const deltaFirstS = huffman ? huffmanTables.tableFirstS.decode(huffmanInput) : decodeInteger(contextCache, "IAFS", decoder);
    firstS += deltaFirstS;
    let currentS = firstS;
    do {
      let currentT = 0;
      if (stripSize > 1) {
        currentT = huffman ? huffmanInput.readBits(logStripSize) : decodeInteger(contextCache, "IAIT", decoder);
      }
      const t = stripSize * stripT + currentT;
      const symbolId = huffman ? huffmanTables.symbolIDTable.decode(huffmanInput) : decodeIAID(contextCache, decoder, symbolCodeLength);
      const applyRefinement = refinement && (huffman ? huffmanInput.readBit() : decodeInteger(contextCache, "IARI", decoder));
      let symbolBitmap = inputSymbols[symbolId];
      let symbolWidth = symbolBitmap[0].length;
      let symbolHeight = symbolBitmap.length;
      if (applyRefinement) {
        const rdw = decodeInteger(contextCache, "IARDW", decoder);
        const rdh = decodeInteger(contextCache, "IARDH", decoder);
        const rdx = decodeInteger(contextCache, "IARDX", decoder);
        const rdy = decodeInteger(contextCache, "IARDY", decoder);
        symbolWidth += rdw;
        symbolHeight += rdh;
        symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);
      }
      let increment = 0;
      if (!transposed) {
        if (referenceCorner > 1) {
          currentS += symbolWidth - 1;
        } else {
          increment = symbolWidth - 1;
        }
      } else if (!(referenceCorner & 1)) {
        currentS += symbolHeight - 1;
      } else {
        increment = symbolHeight - 1;
      }
      const offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);
      const offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);
      let s2, t2, symbolRow;
      if (transposed) {
        for (s2 = 0; s2 < symbolHeight; s2++) {
          row = bitmap[offsetS + s2];
          if (!row) {
            continue;
          }
          symbolRow = symbolBitmap[s2];
          const maxWidth = Math.min(width - offsetT, symbolWidth);
          switch (combinationOperator) {
            case 0:
              for (t2 = 0; t2 < maxWidth; t2++) {
                row[offsetT + t2] |= symbolRow[t2];
              }
              break;
            case 2:
              for (t2 = 0; t2 < maxWidth; t2++) {
                row[offsetT + t2] ^= symbolRow[t2];
              }
              break;
            default:
              throw new Jbig2Error(\`operator \${combinationOperator} is not supported\`);
          }
        }
      } else {
        for (t2 = 0; t2 < symbolHeight; t2++) {
          row = bitmap[offsetT + t2];
          if (!row) {
            continue;
          }
          symbolRow = symbolBitmap[t2];
          switch (combinationOperator) {
            case 0:
              for (s2 = 0; s2 < symbolWidth; s2++) {
                row[offsetS + s2] |= symbolRow[s2];
              }
              break;
            case 2:
              for (s2 = 0; s2 < symbolWidth; s2++) {
                row[offsetS + s2] ^= symbolRow[s2];
              }
              break;
            default:
              throw new Jbig2Error(\`operator \${combinationOperator} is not supported\`);
          }
        }
      }
      i++;
      const deltaS = huffman ? huffmanTables.tableDeltaS.decode(huffmanInput) : decodeInteger(contextCache, "IADS", decoder);
      if (deltaS === null) {
        break;
      }
      currentS += increment + deltaS + dsOffset;
    } while (true);
  }
  return bitmap;
}
function decodePatternDictionary(mmr, patternWidth, patternHeight, maxPatternIndex, template, decodingContext) {
  const at = [];
  if (!mmr) {
    at.push({
      x: -patternWidth,
      y: 0
    });
    if (template === 0) {
      at.push({
        x: -3,
        y: -1
      }, {
        x: 2,
        y: -2
      }, {
        x: -2,
        y: -2
      });
    }
  }
  const collectiveWidth = (maxPatternIndex + 1) * patternWidth;
  const collectiveBitmap = decodeBitmap(mmr, collectiveWidth, patternHeight, template, false, null, at, decodingContext);
  const patterns = [];
  for (let i = 0; i <= maxPatternIndex; i++) {
    const patternBitmap = [];
    const xMin = patternWidth * i;
    const xMax = xMin + patternWidth;
    for (let y = 0; y < patternHeight; y++) {
      patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
    }
    patterns.push(patternBitmap);
  }
  return patterns;
}
function decodeHalftoneRegion(mmr, patterns, template, regionWidth, regionHeight, defaultPixelValue, enableSkip, combinationOperator, gridWidth, gridHeight, gridOffsetX, gridOffsetY, gridVectorX, gridVectorY, decodingContext) {
  const skip = null;
  if (enableSkip) {
    throw new Jbig2Error("skip is not supported");
  }
  if (combinationOperator !== 0) {
    throw new Jbig2Error(\`operator "\${combinationOperator}" is not supported in halftone region\`);
  }
  const regionBitmap = [];
  let i, j, row;
  for (i = 0; i < regionHeight; i++) {
    row = new Uint8Array(regionWidth);
    if (defaultPixelValue) {
      row.fill(defaultPixelValue);
    }
    regionBitmap.push(row);
  }
  const numberOfPatterns = patterns.length;
  const pattern0 = patterns[0];
  const patternWidth = pattern0[0].length,
    patternHeight = pattern0.length;
  const bitsPerValue = log2(numberOfPatterns);
  const at = [];
  if (!mmr) {
    at.push({
      x: template <= 1 ? 3 : 2,
      y: -1
    });
    if (template === 0) {
      at.push({
        x: -3,
        y: -1
      }, {
        x: 2,
        y: -2
      }, {
        x: -2,
        y: -2
      });
    }
  }
  const grayScaleBitPlanes = [];
  let mmrInput, bitmap;
  if (mmr) {
    mmrInput = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);
  }
  for (i = bitsPerValue - 1; i >= 0; i--) {
    if (mmr) {
      bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);
    } else {
      bitmap = decodeBitmap(false, gridWidth, gridHeight, template, false, skip, at, decodingContext);
    }
    grayScaleBitPlanes[i] = bitmap;
  }
  let mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;
  for (mg = 0; mg < gridHeight; mg++) {
    for (ng = 0; ng < gridWidth; ng++) {
      bit = 0;
      patternIndex = 0;
      for (j = bitsPerValue - 1; j >= 0; j--) {
        bit ^= grayScaleBitPlanes[j][mg][ng];
        patternIndex |= bit << j;
      }
      patternBitmap = patterns[patternIndex];
      x = gridOffsetX + mg * gridVectorY + ng * gridVectorX >> 8;
      y = gridOffsetY + mg * gridVectorX - ng * gridVectorY >> 8;
      if (x >= 0 && x + patternWidth <= regionWidth && y >= 0 && y + patternHeight <= regionHeight) {
        for (i = 0; i < patternHeight; i++) {
          regionRow = regionBitmap[y + i];
          patternRow = patternBitmap[i];
          for (j = 0; j < patternWidth; j++) {
            regionRow[x + j] |= patternRow[j];
          }
        }
      } else {
        let regionX, regionY;
        for (i = 0; i < patternHeight; i++) {
          regionY = y + i;
          if (regionY < 0 || regionY >= regionHeight) {
            continue;
          }
          regionRow = regionBitmap[regionY];
          patternRow = patternBitmap[i];
          for (j = 0; j < patternWidth; j++) {
            regionX = x + j;
            if (regionX >= 0 && regionX < regionWidth) {
              regionRow[regionX] |= patternRow[j];
            }
          }
        }
      }
    }
  }
  return regionBitmap;
}
function readSegmentHeader(data, start) {
  const segmentHeader = {};
  segmentHeader.number = readUint32(data, start);
  const flags = data[start + 4];
  const segmentType = flags & 0x3f;
  if (!SegmentTypes[segmentType]) {
    throw new Jbig2Error("invalid segment type: " + segmentType);
  }
  segmentHeader.type = segmentType;
  segmentHeader.typeName = SegmentTypes[segmentType];
  segmentHeader.deferredNonRetain = !!(flags & 0x80);
  const pageAssociationFieldSize = !!(flags & 0x40);
  const referredFlags = data[start + 5];
  let referredToCount = referredFlags >> 5 & 7;
  const retainBits = [referredFlags & 31];
  let position = start + 6;
  if (referredFlags === 7) {
    referredToCount = readUint32(data, position - 1) & 0x1fffffff;
    position += 3;
    let bytes = referredToCount + 7 >> 3;
    retainBits[0] = data[position++];
    while (--bytes > 0) {
      retainBits.push(data[position++]);
    }
  } else if (referredFlags === 5 || referredFlags === 6) {
    throw new Jbig2Error("invalid referred-to flags");
  }
  segmentHeader.retainBits = retainBits;
  let referredToSegmentNumberSize = 4;
  if (segmentHeader.number <= 256) {
    referredToSegmentNumberSize = 1;
  } else if (segmentHeader.number <= 65536) {
    referredToSegmentNumberSize = 2;
  }
  const referredTo = [];
  let i, ii;
  for (i = 0; i < referredToCount; i++) {
    let number;
    if (referredToSegmentNumberSize === 1) {
      number = data[position];
    } else if (referredToSegmentNumberSize === 2) {
      number = readUint16(data, position);
    } else {
      number = readUint32(data, position);
    }
    referredTo.push(number);
    position += referredToSegmentNumberSize;
  }
  segmentHeader.referredTo = referredTo;
  if (!pageAssociationFieldSize) {
    segmentHeader.pageAssociation = data[position++];
  } else {
    segmentHeader.pageAssociation = readUint32(data, position);
    position += 4;
  }
  segmentHeader.length = readUint32(data, position);
  position += 4;
  if (segmentHeader.length === 0xffffffff) {
    if (segmentType === 38) {
      const genericRegionInfo = readRegionSegmentInformation(data, position);
      const genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];
      const genericRegionMmr = !!(genericRegionSegmentFlags & 1);
      const searchPatternLength = 6;
      const searchPattern = new Uint8Array(searchPatternLength);
      if (!genericRegionMmr) {
        searchPattern[0] = 0xff;
        searchPattern[1] = 0xac;
      }
      searchPattern[2] = genericRegionInfo.height >>> 24 & 0xff;
      searchPattern[3] = genericRegionInfo.height >> 16 & 0xff;
      searchPattern[4] = genericRegionInfo.height >> 8 & 0xff;
      searchPattern[5] = genericRegionInfo.height & 0xff;
      for (i = position, ii = data.length; i < ii; i++) {
        let j = 0;
        while (j < searchPatternLength && searchPattern[j] === data[i + j]) {
          j++;
        }
        if (j === searchPatternLength) {
          segmentHeader.length = i + searchPatternLength;
          break;
        }
      }
      if (segmentHeader.length === 0xffffffff) {
        throw new Jbig2Error("segment end was not found");
      }
    } else {
      throw new Jbig2Error("invalid unknown segment length");
    }
  }
  segmentHeader.headerEnd = position;
  return segmentHeader;
}
function readSegments(header, data, start, end) {
  const segments = [];
  let position = start;
  while (position < end) {
    const segmentHeader = readSegmentHeader(data, position);
    position = segmentHeader.headerEnd;
    const segment = {
      header: segmentHeader,
      data
    };
    if (!header.randomAccess) {
      segment.start = position;
      position += segmentHeader.length;
      segment.end = position;
    }
    segments.push(segment);
    if (segmentHeader.type === 51) {
      break;
    }
  }
  if (header.randomAccess) {
    for (let i = 0, ii = segments.length; i < ii; i++) {
      segments[i].start = position;
      position += segments[i].header.length;
      segments[i].end = position;
    }
  }
  return segments;
}
function readRegionSegmentInformation(data, start) {
  return {
    width: readUint32(data, start),
    height: readUint32(data, start + 4),
    x: readUint32(data, start + 8),
    y: readUint32(data, start + 12),
    combinationOperator: data[start + 16] & 7
  };
}
const RegionSegmentInformationFieldLength = 17;
function processSegment(segment, visitor) {
  const header = segment.header;
  const data = segment.data,
    end = segment.end;
  let position = segment.start;
  let args, at, i, atLength;
  switch (header.type) {
    case 0:
      const dictionary = {};
      const dictionaryFlags = readUint16(data, position);
      dictionary.huffman = !!(dictionaryFlags & 1);
      dictionary.refinement = !!(dictionaryFlags & 2);
      dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;
      dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;
      dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;
      dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;
      dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);
      dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);
      dictionary.template = dictionaryFlags >> 10 & 3;
      dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;
      position += 2;
      if (!dictionary.huffman) {
        atLength = dictionary.template === 0 ? 4 : 1;
        at = [];
        for (i = 0; i < atLength; i++) {
          at.push({
            x: readInt8(data, position),
            y: readInt8(data, position + 1)
          });
          position += 2;
        }
        dictionary.at = at;
      }
      if (dictionary.refinement && !dictionary.refinementTemplate) {
        at = [];
        for (i = 0; i < 2; i++) {
          at.push({
            x: readInt8(data, position),
            y: readInt8(data, position + 1)
          });
          position += 2;
        }
        dictionary.refinementAt = at;
      }
      dictionary.numberOfExportedSymbols = readUint32(data, position);
      position += 4;
      dictionary.numberOfNewSymbols = readUint32(data, position);
      position += 4;
      args = [dictionary, header.number, header.referredTo, data, position, end];
      break;
    case 6:
    case 7:
      const textRegion = {};
      textRegion.info = readRegionSegmentInformation(data, position);
      position += RegionSegmentInformationFieldLength;
      const textRegionSegmentFlags = readUint16(data, position);
      position += 2;
      textRegion.huffman = !!(textRegionSegmentFlags & 1);
      textRegion.refinement = !!(textRegionSegmentFlags & 2);
      textRegion.logStripSize = textRegionSegmentFlags >> 2 & 3;
      textRegion.stripSize = 1 << textRegion.logStripSize;
      textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;
      textRegion.transposed = !!(textRegionSegmentFlags & 64);
      textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;
      textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;
      textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;
      textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;
      if (textRegion.huffman) {
        const textRegionHuffmanFlags = readUint16(data, position);
        position += 2;
        textRegion.huffmanFS = textRegionHuffmanFlags & 3;
        textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;
        textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;
        textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;
        textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;
        textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;
        textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;
        textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 0x4000);
      }
      if (textRegion.refinement && !textRegion.refinementTemplate) {
        at = [];
        for (i = 0; i < 2; i++) {
          at.push({
            x: readInt8(data, position),
            y: readInt8(data, position + 1)
          });
          position += 2;
        }
        textRegion.refinementAt = at;
      }
      textRegion.numberOfSymbolInstances = readUint32(data, position);
      position += 4;
      args = [textRegion, header.referredTo, data, position, end];
      break;
    case 16:
      const patternDictionary = {};
      const patternDictionaryFlags = data[position++];
      patternDictionary.mmr = !!(patternDictionaryFlags & 1);
      patternDictionary.template = patternDictionaryFlags >> 1 & 3;
      patternDictionary.patternWidth = data[position++];
      patternDictionary.patternHeight = data[position++];
      patternDictionary.maxPatternIndex = readUint32(data, position);
      position += 4;
      args = [patternDictionary, header.number, data, position, end];
      break;
    case 22:
    case 23:
      const halftoneRegion = {};
      halftoneRegion.info = readRegionSegmentInformation(data, position);
      position += RegionSegmentInformationFieldLength;
      const halftoneRegionFlags = data[position++];
      halftoneRegion.mmr = !!(halftoneRegionFlags & 1);
      halftoneRegion.template = halftoneRegionFlags >> 1 & 3;
      halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);
      halftoneRegion.combinationOperator = halftoneRegionFlags >> 4 & 7;
      halftoneRegion.defaultPixelValue = halftoneRegionFlags >> 7 & 1;
      halftoneRegion.gridWidth = readUint32(data, position);
      position += 4;
      halftoneRegion.gridHeight = readUint32(data, position);
      position += 4;
      halftoneRegion.gridOffsetX = readUint32(data, position) & 0xffffffff;
      position += 4;
      halftoneRegion.gridOffsetY = readUint32(data, position) & 0xffffffff;
      position += 4;
      halftoneRegion.gridVectorX = readUint16(data, position);
      position += 2;
      halftoneRegion.gridVectorY = readUint16(data, position);
      position += 2;
      args = [halftoneRegion, header.referredTo, data, position, end];
      break;
    case 38:
    case 39:
      const genericRegion = {};
      genericRegion.info = readRegionSegmentInformation(data, position);
      position += RegionSegmentInformationFieldLength;
      const genericRegionSegmentFlags = data[position++];
      genericRegion.mmr = !!(genericRegionSegmentFlags & 1);
      genericRegion.template = genericRegionSegmentFlags >> 1 & 3;
      genericRegion.prediction = !!(genericRegionSegmentFlags & 8);
      if (!genericRegion.mmr) {
        atLength = genericRegion.template === 0 ? 4 : 1;
        at = [];
        for (i = 0; i < atLength; i++) {
          at.push({
            x: readInt8(data, position),
            y: readInt8(data, position + 1)
          });
          position += 2;
        }
        genericRegion.at = at;
      }
      args = [genericRegion, data, position, end];
      break;
    case 48:
      const pageInfo = {
        width: readUint32(data, position),
        height: readUint32(data, position + 4),
        resolutionX: readUint32(data, position + 8),
        resolutionY: readUint32(data, position + 12)
      };
      if (pageInfo.height === 0xffffffff) {
        delete pageInfo.height;
      }
      const pageSegmentFlags = data[position + 16];
      readUint16(data, position + 17);
      pageInfo.lossless = !!(pageSegmentFlags & 1);
      pageInfo.refinement = !!(pageSegmentFlags & 2);
      pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;
      pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;
      pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);
      pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);
      args = [pageInfo];
      break;
    case 49:
      break;
    case 50:
      break;
    case 51:
      break;
    case 53:
      args = [header.number, data, position, end];
      break;
    case 62:
      break;
    default:
      throw new Jbig2Error(\`segment type \${header.typeName}(\${header.type}) is not implemented\`);
  }
  const callbackName = "on" + header.typeName;
  if (callbackName in visitor) {
    visitor[callbackName].apply(visitor, args);
  }
}
function processSegments(segments, visitor) {
  for (let i = 0, ii = segments.length; i < ii; i++) {
    processSegment(segments[i], visitor);
  }
}
function parseJbig2Chunks(chunks) {
  const visitor = new SimpleSegmentVisitor();
  for (let i = 0, ii = chunks.length; i < ii; i++) {
    const chunk = chunks[i];
    const segments = readSegments({}, chunk.data, chunk.start, chunk.end);
    processSegments(segments, visitor);
  }
  return visitor.buffer;
}
function parseJbig2(data) {
  throw new Error("Not implemented: parseJbig2");
}
class SimpleSegmentVisitor {
  onPageInformation(info) {
    this.currentPageInfo = info;
    const rowSize = info.width + 7 >> 3;
    const buffer = new Uint8ClampedArray(rowSize * info.height);
    if (info.defaultPixelValue) {
      buffer.fill(0xff);
    }
    this.buffer = buffer;
  }
  drawBitmap(regionInfo, bitmap) {
    const pageInfo = this.currentPageInfo;
    const width = regionInfo.width,
      height = regionInfo.height;
    const rowSize = pageInfo.width + 7 >> 3;
    const combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;
    const buffer = this.buffer;
    const mask0 = 128 >> (regionInfo.x & 7);
    let offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);
    let i, j, mask, offset;
    switch (combinationOperator) {
      case 0:
        for (i = 0; i < height; i++) {
          mask = mask0;
          offset = offset0;
          for (j = 0; j < width; j++) {
            if (bitmap[i][j]) {
              buffer[offset] |= mask;
            }
            mask >>= 1;
            if (!mask) {
              mask = 128;
              offset++;
            }
          }
          offset0 += rowSize;
        }
        break;
      case 2:
        for (i = 0; i < height; i++) {
          mask = mask0;
          offset = offset0;
          for (j = 0; j < width; j++) {
            if (bitmap[i][j]) {
              buffer[offset] ^= mask;
            }
            mask >>= 1;
            if (!mask) {
              mask = 128;
              offset++;
            }
          }
          offset0 += rowSize;
        }
        break;
      default:
        throw new Jbig2Error(\`operator \${combinationOperator} is not supported\`);
    }
  }
  onImmediateGenericRegion(region, data, start, end) {
    const regionInfo = region.info;
    const decodingContext = new DecodingContext(data, start, end);
    const bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);
    this.drawBitmap(regionInfo, bitmap);
  }
  onImmediateLosslessGenericRegion() {
    this.onImmediateGenericRegion(...arguments);
  }
  onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {
    let huffmanTables, huffmanInput;
    if (dictionary.huffman) {
      huffmanTables = getSymbolDictionaryHuffmanTables(dictionary, referredSegments, this.customTables);
      huffmanInput = new Reader(data, start, end);
    }
    let symbols = this.symbols;
    if (!symbols) {
      this.symbols = symbols = {};
    }
    const inputSymbols = [];
    for (const referredSegment of referredSegments) {
      const referredSymbols = symbols[referredSegment];
      if (referredSymbols) {
        inputSymbols.push(...referredSymbols);
      }
    }
    const decodingContext = new DecodingContext(data, start, end);
    symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext, huffmanInput);
  }
  onImmediateTextRegion(region, referredSegments, data, start, end) {
    const regionInfo = region.info;
    let huffmanTables, huffmanInput;
    const symbols = this.symbols;
    const inputSymbols = [];
    for (const referredSegment of referredSegments) {
      const referredSymbols = symbols[referredSegment];
      if (referredSymbols) {
        inputSymbols.push(...referredSymbols);
      }
    }
    const symbolCodeLength = log2(inputSymbols.length);
    if (region.huffman) {
      huffmanInput = new Reader(data, start, end);
      huffmanTables = getTextRegionHuffmanTables(region, referredSegments, this.customTables, inputSymbols.length, huffmanInput);
    }
    const decodingContext = new DecodingContext(data, start, end);
    const bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext, region.logStripSize, huffmanInput);
    this.drawBitmap(regionInfo, bitmap);
  }
  onImmediateLosslessTextRegion() {
    this.onImmediateTextRegion(...arguments);
  }
  onPatternDictionary(dictionary, currentSegment, data, start, end) {
    let patterns = this.patterns;
    if (!patterns) {
      this.patterns = patterns = {};
    }
    const decodingContext = new DecodingContext(data, start, end);
    patterns[currentSegment] = decodePatternDictionary(dictionary.mmr, dictionary.patternWidth, dictionary.patternHeight, dictionary.maxPatternIndex, dictionary.template, decodingContext);
  }
  onImmediateHalftoneRegion(region, referredSegments, data, start, end) {
    const patterns = this.patterns[referredSegments[0]];
    const regionInfo = region.info;
    const decodingContext = new DecodingContext(data, start, end);
    const bitmap = decodeHalftoneRegion(region.mmr, patterns, region.template, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.enableSkip, region.combinationOperator, region.gridWidth, region.gridHeight, region.gridOffsetX, region.gridOffsetY, region.gridVectorX, region.gridVectorY, decodingContext);
    this.drawBitmap(regionInfo, bitmap);
  }
  onImmediateLosslessHalftoneRegion() {
    this.onImmediateHalftoneRegion(...arguments);
  }
  onTables(currentSegment, data, start, end) {
    let customTables = this.customTables;
    if (!customTables) {
      this.customTables = customTables = {};
    }
    customTables[currentSegment] = decodeTablesSegment(data, start, end);
  }
}
class HuffmanLine {
  constructor(lineData) {
    if (lineData.length === 2) {
      this.isOOB = true;
      this.rangeLow = 0;
      this.prefixLength = lineData[0];
      this.rangeLength = 0;
      this.prefixCode = lineData[1];
      this.isLowerRange = false;
    } else {
      this.isOOB = false;
      this.rangeLow = lineData[0];
      this.prefixLength = lineData[1];
      this.rangeLength = lineData[2];
      this.prefixCode = lineData[3];
      this.isLowerRange = lineData[4] === "lower";
    }
  }
}
class HuffmanTreeNode {
  constructor(line) {
    this.children = [];
    if (line) {
      this.isLeaf = true;
      this.rangeLength = line.rangeLength;
      this.rangeLow = line.rangeLow;
      this.isLowerRange = line.isLowerRange;
      this.isOOB = line.isOOB;
    } else {
      this.isLeaf = false;
    }
  }
  buildTree(line, shift) {
    const bit = line.prefixCode >> shift & 1;
    if (shift <= 0) {
      this.children[bit] = new HuffmanTreeNode(line);
    } else {
      let node = this.children[bit];
      if (!node) {
        this.children[bit] = node = new HuffmanTreeNode(null);
      }
      node.buildTree(line, shift - 1);
    }
  }
  decodeNode(reader) {
    if (this.isLeaf) {
      if (this.isOOB) {
        return null;
      }
      const htOffset = reader.readBits(this.rangeLength);
      return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);
    }
    const node = this.children[reader.readBit()];
    if (!node) {
      throw new Jbig2Error("invalid Huffman data");
    }
    return node.decodeNode(reader);
  }
}
class HuffmanTable {
  constructor(lines, prefixCodesDone) {
    if (!prefixCodesDone) {
      this.assignPrefixCodes(lines);
    }
    this.rootNode = new HuffmanTreeNode(null);
    for (let i = 0, ii = lines.length; i < ii; i++) {
      const line = lines[i];
      if (line.prefixLength > 0) {
        this.rootNode.buildTree(line, line.prefixLength - 1);
      }
    }
  }
  decode(reader) {
    return this.rootNode.decodeNode(reader);
  }
  assignPrefixCodes(lines) {
    const linesLength = lines.length;
    let prefixLengthMax = 0;
    for (let i = 0; i < linesLength; i++) {
      prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);
    }
    const histogram = new Uint32Array(prefixLengthMax + 1);
    for (let i = 0; i < linesLength; i++) {
      histogram[lines[i].prefixLength]++;
    }
    let currentLength = 1,
      firstCode = 0,
      currentCode,
      currentTemp,
      line;
    histogram[0] = 0;
    while (currentLength <= prefixLengthMax) {
      firstCode = firstCode + histogram[currentLength - 1] << 1;
      currentCode = firstCode;
      currentTemp = 0;
      while (currentTemp < linesLength) {
        line = lines[currentTemp];
        if (line.prefixLength === currentLength) {
          line.prefixCode = currentCode;
          currentCode++;
        }
        currentTemp++;
      }
      currentLength++;
    }
  }
}
function decodeTablesSegment(data, start, end) {
  const flags = data[start];
  const lowestValue = readUint32(data, start + 1) & 0xffffffff;
  const highestValue = readUint32(data, start + 5) & 0xffffffff;
  const reader = new Reader(data, start + 9, end);
  const prefixSizeBits = (flags >> 1 & 7) + 1;
  const rangeSizeBits = (flags >> 4 & 7) + 1;
  const lines = [];
  let prefixLength,
    rangeLength,
    currentRangeLow = lowestValue;
  do {
    prefixLength = reader.readBits(prefixSizeBits);
    rangeLength = reader.readBits(rangeSizeBits);
    lines.push(new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]));
    currentRangeLow += 1 << rangeLength;
  } while (currentRangeLow < highestValue);
  prefixLength = reader.readBits(prefixSizeBits);
  lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, "lower"]));
  prefixLength = reader.readBits(prefixSizeBits);
  lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));
  if (flags & 1) {
    prefixLength = reader.readBits(prefixSizeBits);
    lines.push(new HuffmanLine([prefixLength, 0]));
  }
  return new HuffmanTable(lines, false);
}
const standardTablesCache = {};
function getStandardTable(number) {
  let table = standardTablesCache[number];
  if (table) {
    return table;
  }
  let lines;
  switch (number) {
    case 1:
      lines = [[0, 1, 4, 0x0], [16, 2, 8, 0x2], [272, 3, 16, 0x6], [65808, 3, 32, 0x7]];
      break;
    case 2:
      lines = [[0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [75, 6, 32, 0x3e], [6, 0x3f]];
      break;
    case 3:
      lines = [[-256, 8, 8, 0xfe], [0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [-257, 8, 32, 0xff, "lower"], [75, 7, 32, 0x7e], [6, 0x3e]];
      break;
    case 4:
      lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [76, 5, 32, 0x1f]];
      break;
    case 5:
      lines = [[-255, 7, 8, 0x7e], [1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [-256, 7, 32, 0x7f, "lower"], [76, 6, 32, 0x3e]];
      break;
    case 6:
      lines = [[-2048, 5, 10, 0x1c], [-1024, 4, 9, 0x8], [-512, 4, 8, 0x9], [-256, 4, 7, 0xa], [-128, 5, 6, 0x1d], [-64, 5, 5, 0x1e], [-32, 4, 5, 0xb], [0, 2, 7, 0x0], [128, 3, 7, 0x2], [256, 3, 8, 0x3], [512, 4, 9, 0xc], [1024, 4, 10, 0xd], [-2049, 6, 32, 0x3e, "lower"], [2048, 6, 32, 0x3f]];
      break;
    case 7:
      lines = [[-1024, 4, 9, 0x8], [-512, 3, 8, 0x0], [-256, 4, 7, 0x9], [-128, 5, 6, 0x1a], [-64, 5, 5, 0x1b], [-32, 4, 5, 0xa], [0, 4, 5, 0xb], [32, 5, 5, 0x1c], [64, 5, 6, 0x1d], [128, 4, 7, 0xc], [256, 3, 8, 0x1], [512, 3, 9, 0x2], [1024, 3, 10, 0x3], [-1025, 5, 32, 0x1e, "lower"], [2048, 5, 32, 0x1f]];
      break;
    case 8:
      lines = [[-15, 8, 3, 0xfc], [-7, 9, 1, 0x1fc], [-5, 8, 1, 0xfd], [-3, 9, 0, 0x1fd], [-2, 7, 0, 0x7c], [-1, 4, 0, 0xa], [0, 2, 1, 0x0], [2, 5, 0, 0x1a], [3, 6, 0, 0x3a], [4, 3, 4, 0x4], [20, 6, 1, 0x3b], [22, 4, 4, 0xb], [38, 4, 5, 0xc], [70, 5, 6, 0x1b], [134, 5, 7, 0x1c], [262, 6, 7, 0x3c], [390, 7, 8, 0x7d], [646, 6, 10, 0x3d], [-16, 9, 32, 0x1fe, "lower"], [1670, 9, 32, 0x1ff], [2, 0x1]];
      break;
    case 9:
      lines = [[-31, 8, 4, 0xfc], [-15, 9, 2, 0x1fc], [-11, 8, 2, 0xfd], [-7, 9, 1, 0x1fd], [-5, 7, 1, 0x7c], [-3, 4, 1, 0xa], [-1, 3, 1, 0x2], [1, 3, 1, 0x3], [3, 5, 1, 0x1a], [5, 6, 1, 0x3a], [7, 3, 5, 0x4], [39, 6, 2, 0x3b], [43, 4, 5, 0xb], [75, 4, 6, 0xc], [139, 5, 7, 0x1b], [267, 5, 8, 0x1c], [523, 6, 8, 0x3c], [779, 7, 9, 0x7d], [1291, 6, 11, 0x3d], [-32, 9, 32, 0x1fe, "lower"], [3339, 9, 32, 0x1ff], [2, 0x0]];
      break;
    case 10:
      lines = [[-21, 7, 4, 0x7a], [-5, 8, 0, 0xfc], [-4, 7, 0, 0x7b], [-3, 5, 0, 0x18], [-2, 2, 2, 0x0], [2, 5, 0, 0x19], [3, 6, 0, 0x36], [4, 7, 0, 0x7c], [5, 8, 0, 0xfd], [6, 2, 6, 0x1], [70, 5, 5, 0x1a], [102, 6, 5, 0x37], [134, 6, 6, 0x38], [198, 6, 7, 0x39], [326, 6, 8, 0x3a], [582, 6, 9, 0x3b], [1094, 6, 10, 0x3c], [2118, 7, 11, 0x7d], [-22, 8, 32, 0xfe, "lower"], [4166, 8, 32, 0xff], [2, 0x2]];
      break;
    case 11:
      lines = [[1, 1, 0, 0x0], [2, 2, 1, 0x2], [4, 4, 0, 0xc], [5, 4, 1, 0xd], [7, 5, 1, 0x1c], [9, 5, 2, 0x1d], [13, 6, 2, 0x3c], [17, 7, 2, 0x7a], [21, 7, 3, 0x7b], [29, 7, 4, 0x7c], [45, 7, 5, 0x7d], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];
      break;
    case 12:
      lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 1, 0x6], [5, 5, 0, 0x1c], [6, 5, 1, 0x1d], [8, 6, 1, 0x3c], [10, 7, 0, 0x7a], [11, 7, 1, 0x7b], [13, 7, 2, 0x7c], [17, 7, 3, 0x7d], [25, 7, 4, 0x7e], [41, 8, 5, 0xfe], [73, 8, 32, 0xff]];
      break;
    case 13:
      lines = [[1, 1, 0, 0x0], [2, 3, 0, 0x4], [3, 4, 0, 0xc], [4, 5, 0, 0x1c], [5, 4, 1, 0xd], [7, 3, 3, 0x5], [15, 6, 1, 0x3a], [17, 6, 2, 0x3b], [21, 6, 3, 0x3c], [29, 6, 4, 0x3d], [45, 6, 5, 0x3e], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];
      break;
    case 14:
      lines = [[-2, 3, 0, 0x4], [-1, 3, 0, 0x5], [0, 1, 0, 0x0], [1, 3, 0, 0x6], [2, 3, 0, 0x7]];
      break;
    case 15:
      lines = [[-24, 7, 4, 0x7c], [-8, 6, 2, 0x3c], [-4, 5, 1, 0x1c], [-2, 4, 0, 0xc], [-1, 3, 0, 0x4], [0, 1, 0, 0x0], [1, 3, 0, 0x5], [2, 4, 0, 0xd], [3, 5, 1, 0x1d], [5, 6, 2, 0x3d], [9, 7, 4, 0x7d], [-25, 7, 32, 0x7e, "lower"], [25, 7, 32, 0x7f]];
      break;
    default:
      throw new Jbig2Error(\`standard table B.\${number} does not exist\`);
  }
  for (let i = 0, ii = lines.length; i < ii; i++) {
    lines[i] = new HuffmanLine(lines[i]);
  }
  table = new HuffmanTable(lines, true);
  standardTablesCache[number] = table;
  return table;
}
class Reader {
  constructor(data, start, end) {
    this.data = data;
    this.start = start;
    this.end = end;
    this.position = start;
    this.shift = -1;
    this.currentByte = 0;
  }
  readBit() {
    if (this.shift < 0) {
      if (this.position >= this.end) {
        throw new Jbig2Error("end of data while reading bit");
      }
      this.currentByte = this.data[this.position++];
      this.shift = 7;
    }
    const bit = this.currentByte >> this.shift & 1;
    this.shift--;
    return bit;
  }
  readBits(numBits) {
    let result = 0,
      i;
    for (i = numBits - 1; i >= 0; i--) {
      result |= this.readBit() << i;
    }
    return result;
  }
  byteAlign() {
    this.shift = -1;
  }
  next() {
    if (this.position >= this.end) {
      return -1;
    }
    return this.data[this.position++];
  }
}
function getCustomHuffmanTable(index, referredTo, customTables) {
  let currentIndex = 0;
  for (let i = 0, ii = referredTo.length; i < ii; i++) {
    const table = customTables[referredTo[i]];
    if (table) {
      if (index === currentIndex) {
        return table;
      }
      currentIndex++;
    }
  }
  throw new Jbig2Error("can't find custom Huffman table");
}
function getTextRegionHuffmanTables(textRegion, referredTo, customTables, numberOfSymbols, reader) {
  const codes = [];
  for (let i = 0; i <= 34; i++) {
    const codeLength = reader.readBits(4);
    codes.push(new HuffmanLine([i, codeLength, 0, 0]));
  }
  const runCodesTable = new HuffmanTable(codes, false);
  codes.length = 0;
  for (let i = 0; i < numberOfSymbols;) {
    const codeLength = runCodesTable.decode(reader);
    if (codeLength >= 32) {
      let repeatedLength, numberOfRepeats, j;
      switch (codeLength) {
        case 32:
          if (i === 0) {
            throw new Jbig2Error("no previous value in symbol ID table");
          }
          numberOfRepeats = reader.readBits(2) + 3;
          repeatedLength = codes[i - 1].prefixLength;
          break;
        case 33:
          numberOfRepeats = reader.readBits(3) + 3;
          repeatedLength = 0;
          break;
        case 34:
          numberOfRepeats = reader.readBits(7) + 11;
          repeatedLength = 0;
          break;
        default:
          throw new Jbig2Error("invalid code length in symbol ID table");
      }
      for (j = 0; j < numberOfRepeats; j++) {
        codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));
        i++;
      }
    } else {
      codes.push(new HuffmanLine([i, codeLength, 0, 0]));
      i++;
    }
  }
  reader.byteAlign();
  const symbolIDTable = new HuffmanTable(codes, false);
  let customIndex = 0,
    tableFirstS,
    tableDeltaS,
    tableDeltaT;
  switch (textRegion.huffmanFS) {
    case 0:
    case 1:
      tableFirstS = getStandardTable(textRegion.huffmanFS + 6);
      break;
    case 3:
      tableFirstS = getCustomHuffmanTable(customIndex, referredTo, customTables);
      customIndex++;
      break;
    default:
      throw new Jbig2Error("invalid Huffman FS selector");
  }
  switch (textRegion.huffmanDS) {
    case 0:
    case 1:
    case 2:
      tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);
      break;
    case 3:
      tableDeltaS = getCustomHuffmanTable(customIndex, referredTo, customTables);
      customIndex++;
      break;
    default:
      throw new Jbig2Error("invalid Huffman DS selector");
  }
  switch (textRegion.huffmanDT) {
    case 0:
    case 1:
    case 2:
      tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);
      break;
    case 3:
      tableDeltaT = getCustomHuffmanTable(customIndex, referredTo, customTables);
      customIndex++;
      break;
    default:
      throw new Jbig2Error("invalid Huffman DT selector");
  }
  if (textRegion.refinement) {
    throw new Jbig2Error("refinement with Huffman is not supported");
  }
  return {
    symbolIDTable,
    tableFirstS,
    tableDeltaS,
    tableDeltaT
  };
}
function getSymbolDictionaryHuffmanTables(dictionary, referredTo, customTables) {
  let customIndex = 0,
    tableDeltaHeight,
    tableDeltaWidth;
  switch (dictionary.huffmanDHSelector) {
    case 0:
    case 1:
      tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);
      break;
    case 3:
      tableDeltaHeight = getCustomHuffmanTable(customIndex, referredTo, customTables);
      customIndex++;
      break;
    default:
      throw new Jbig2Error("invalid Huffman DH selector");
  }
  switch (dictionary.huffmanDWSelector) {
    case 0:
    case 1:
      tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);
      break;
    case 3:
      tableDeltaWidth = getCustomHuffmanTable(customIndex, referredTo, customTables);
      customIndex++;
      break;
    default:
      throw new Jbig2Error("invalid Huffman DW selector");
  }
  let tableBitmapSize, tableAggregateInstances;
  if (dictionary.bitmapSizeSelector) {
    tableBitmapSize = getCustomHuffmanTable(customIndex, referredTo, customTables);
    customIndex++;
  } else {
    tableBitmapSize = getStandardTable(1);
  }
  if (dictionary.aggregationInstancesSelector) {
    tableAggregateInstances = getCustomHuffmanTable(customIndex, referredTo, customTables);
  } else {
    tableAggregateInstances = getStandardTable(1);
  }
  return {
    tableDeltaHeight,
    tableDeltaWidth,
    tableBitmapSize,
    tableAggregateInstances
  };
}
function readUncompressedBitmap(reader, width, height) {
  const bitmap = [];
  for (let y = 0; y < height; y++) {
    const row = new Uint8Array(width);
    bitmap.push(row);
    for (let x = 0; x < width; x++) {
      row[x] = reader.readBit();
    }
    reader.byteAlign();
  }
  return bitmap;
}
function decodeMMRBitmap(input, width, height, endOfBlock) {
  const params = {
    K: -1,
    Columns: width,
    Rows: height,
    BlackIs1: true,
    EndOfBlock: endOfBlock
  };
  const decoder = new CCITTFaxDecoder(input, params);
  const bitmap = [];
  let currentByte,
    eof = false;
  for (let y = 0; y < height; y++) {
    const row = new Uint8Array(width);
    bitmap.push(row);
    let shift = -1;
    for (let x = 0; x < width; x++) {
      if (shift < 0) {
        currentByte = decoder.readNextChar();
        if (currentByte === -1) {
          currentByte = 0;
          eof = true;
        }
        shift = 7;
      }
      row[x] = currentByte >> shift & 1;
      shift--;
    }
  }
  if (endOfBlock && !eof) {
    const lookForEOFLimit = 5;
    for (let i = 0; i < lookForEOFLimit; i++) {
      if (decoder.readNextChar() === -1) {
        break;
      }
    }
  }
  return bitmap;
}
class Jbig2Image {
  parseChunks(chunks) {
    return parseJbig2Chunks(chunks);
  }
  parse(data) {
    throw new Error("Not implemented: Jbig2Image.parse");
  }
}

;// ./src/core/jbig2_stream.js





class Jbig2Stream extends DecodeStream {
  constructor(stream, maybeLength, params) {
    super(maybeLength);
    this.stream = stream;
    this.dict = stream.dict;
    this.maybeLength = maybeLength;
    this.params = params;
  }
  get bytes() {
    return shadow(this, "bytes", this.stream.getBytes(this.maybeLength));
  }
  ensureBuffer(requested) {}
  readBlock() {
    this.decodeImage();
  }
  decodeImage(bytes) {
    if (this.eof) {
      return this.buffer;
    }
    bytes ||= this.bytes;
    const jbig2Image = new Jbig2Image();
    const chunks = [];
    if (this.params instanceof Dict) {
      const globalsStream = this.params.get("JBIG2Globals");
      if (globalsStream instanceof BaseStream) {
        const globals = globalsStream.getBytes();
        chunks.push({
          data: globals,
          start: 0,
          end: globals.length
        });
      }
    }
    chunks.push({
      data: bytes,
      start: 0,
      end: bytes.length
    });
    const data = jbig2Image.parseChunks(chunks);
    const dataLength = data.length;
    for (let i = 0; i < dataLength; i++) {
      data[i] ^= 0xff;
    }
    this.buffer = data;
    this.bufferLength = dataLength;
    this.eof = true;
    return this.buffer;
  }
  get canAsyncDecodeImageFromBuffer() {
    return this.stream.isAsync;
  }
}

;// ./src/core/jpx_stream.js



class JpxStream extends DecodeStream {
  constructor(stream, maybeLength, params) {
    super(maybeLength);
    this.stream = stream;
    this.dict = stream.dict;
    this.maybeLength = maybeLength;
    this.params = params;
  }
  get bytes() {
    return shadow(this, "bytes", this.stream.getBytes(this.maybeLength));
  }
  ensureBuffer(requested) {}
  readBlock(decoderOptions) {
    unreachable("JpxStream.readBlock");
  }
  get isAsyncDecoder() {
    return true;
  }
  async decodeImage(bytes, decoderOptions) {
    if (this.eof) {
      return this.buffer;
    }
    bytes ||= this.bytes;
    this.buffer = await JpxImage.decode(bytes, decoderOptions);
    this.bufferLength = this.buffer.length;
    this.eof = true;
    return this.buffer;
  }
  get canAsyncDecodeImageFromBuffer() {
    return this.stream.isAsync;
  }
}

;// ./src/core/lzw_stream.js

class LZWStream extends DecodeStream {
  constructor(str, maybeLength, earlyChange) {
    super(maybeLength);
    this.str = str;
    this.dict = str.dict;
    this.cachedData = 0;
    this.bitsCached = 0;
    const maxLzwDictionarySize = 4096;
    const lzwState = {
      earlyChange,
      codeLength: 9,
      nextCode: 258,
      dictionaryValues: new Uint8Array(maxLzwDictionarySize),
      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),
      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),
      currentSequence: new Uint8Array(maxLzwDictionarySize),
      currentSequenceLength: 0
    };
    for (let i = 0; i < 256; ++i) {
      lzwState.dictionaryValues[i] = i;
      lzwState.dictionaryLengths[i] = 1;
    }
    this.lzwState = lzwState;
  }
  readBits(n) {
    let bitsCached = this.bitsCached;
    let cachedData = this.cachedData;
    while (bitsCached < n) {
      const c = this.str.getByte();
      if (c === -1) {
        this.eof = true;
        return null;
      }
      cachedData = cachedData << 8 | c;
      bitsCached += 8;
    }
    this.bitsCached = bitsCached -= n;
    this.cachedData = cachedData;
    this.lastCode = null;
    return cachedData >>> bitsCached & (1 << n) - 1;
  }
  readBlock() {
    const blockSize = 512,
      decodedSizeDelta = blockSize;
    let estimatedDecodedSize = blockSize * 2;
    let i, j, q;
    const lzwState = this.lzwState;
    if (!lzwState) {
      return;
    }
    const earlyChange = lzwState.earlyChange;
    let nextCode = lzwState.nextCode;
    const dictionaryValues = lzwState.dictionaryValues;
    const dictionaryLengths = lzwState.dictionaryLengths;
    const dictionaryPrevCodes = lzwState.dictionaryPrevCodes;
    let codeLength = lzwState.codeLength;
    let prevCode = lzwState.prevCode;
    const currentSequence = lzwState.currentSequence;
    let currentSequenceLength = lzwState.currentSequenceLength;
    let decodedLength = 0;
    let currentBufferLength = this.bufferLength;
    let buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);
    for (i = 0; i < blockSize; i++) {
      const code = this.readBits(codeLength);
      const hasPrev = currentSequenceLength > 0;
      if (code < 256) {
        currentSequence[0] = code;
        currentSequenceLength = 1;
      } else if (code >= 258) {
        if (code < nextCode) {
          currentSequenceLength = dictionaryLengths[code];
          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {
            currentSequence[j] = dictionaryValues[q];
            q = dictionaryPrevCodes[q];
          }
        } else {
          currentSequence[currentSequenceLength++] = currentSequence[0];
        }
      } else if (code === 256) {
        codeLength = 9;
        nextCode = 258;
        currentSequenceLength = 0;
        continue;
      } else {
        this.eof = true;
        delete this.lzwState;
        break;
      }
      if (hasPrev) {
        dictionaryPrevCodes[nextCode] = prevCode;
        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;
        dictionaryValues[nextCode] = currentSequence[0];
        nextCode++;
        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;
      }
      prevCode = code;
      decodedLength += currentSequenceLength;
      if (estimatedDecodedSize < decodedLength) {
        do {
          estimatedDecodedSize += decodedSizeDelta;
        } while (estimatedDecodedSize < decodedLength);
        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);
      }
      for (j = 0; j < currentSequenceLength; j++) {
        buffer[currentBufferLength++] = currentSequence[j];
      }
    }
    lzwState.nextCode = nextCode;
    lzwState.codeLength = codeLength;
    lzwState.prevCode = prevCode;
    lzwState.currentSequenceLength = currentSequenceLength;
    this.bufferLength = currentBufferLength;
  }
}

;// ./src/core/predictor_stream.js



class PredictorStream extends DecodeStream {
  constructor(str, maybeLength, params) {
    super(maybeLength);
    if (!(params instanceof Dict)) {
      return str;
    }
    const predictor = this.predictor = params.get("Predictor") || 1;
    if (predictor <= 1) {
      return str;
    }
    if (predictor !== 2 && (predictor < 10 || predictor > 15)) {
      throw new FormatError(\`Unsupported predictor: \${predictor}\`);
    }
    this.readBlock = predictor === 2 ? this.readBlockTiff : this.readBlockPng;
    this.str = str;
    this.dict = str.dict;
    const colors = this.colors = params.get("Colors") || 1;
    const bits = this.bits = params.get("BPC", "BitsPerComponent") || 8;
    const columns = this.columns = params.get("Columns") || 1;
    this.pixBytes = colors * bits + 7 >> 3;
    this.rowBytes = columns * colors * bits + 7 >> 3;
    return this;
  }
  readBlockTiff() {
    const rowBytes = this.rowBytes;
    const bufferLength = this.bufferLength;
    const buffer = this.ensureBuffer(bufferLength + rowBytes);
    const bits = this.bits;
    const colors = this.colors;
    const rawBytes = this.str.getBytes(rowBytes);
    this.eof = !rawBytes.length;
    if (this.eof) {
      return;
    }
    let inbuf = 0,
      outbuf = 0;
    let inbits = 0,
      outbits = 0;
    let pos = bufferLength;
    let i;
    if (bits === 1 && colors === 1) {
      for (i = 0; i < rowBytes; ++i) {
        let c = rawBytes[i] ^ inbuf;
        c ^= c >> 1;
        c ^= c >> 2;
        c ^= c >> 4;
        inbuf = (c & 1) << 7;
        buffer[pos++] = c;
      }
    } else if (bits === 8) {
      for (i = 0; i < colors; ++i) {
        buffer[pos++] = rawBytes[i];
      }
      for (; i < rowBytes; ++i) {
        buffer[pos] = buffer[pos - colors] + rawBytes[i];
        pos++;
      }
    } else if (bits === 16) {
      const bytesPerPixel = colors * 2;
      for (i = 0; i < bytesPerPixel; ++i) {
        buffer[pos++] = rawBytes[i];
      }
      for (; i < rowBytes; i += 2) {
        const sum = ((rawBytes[i] & 0xff) << 8) + (rawBytes[i + 1] & 0xff) + ((buffer[pos - bytesPerPixel] & 0xff) << 8) + (buffer[pos - bytesPerPixel + 1] & 0xff);
        buffer[pos++] = sum >> 8 & 0xff;
        buffer[pos++] = sum & 0xff;
      }
    } else {
      const compArray = new Uint8Array(colors + 1);
      const bitMask = (1 << bits) - 1;
      let j = 0,
        k = bufferLength;
      const columns = this.columns;
      for (i = 0; i < columns; ++i) {
        for (let kk = 0; kk < colors; ++kk) {
          if (inbits < bits) {
            inbuf = inbuf << 8 | rawBytes[j++] & 0xff;
            inbits += 8;
          }
          compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;
          inbits -= bits;
          outbuf = outbuf << bits | compArray[kk];
          outbits += bits;
          if (outbits >= 8) {
            buffer[k++] = outbuf >> outbits - 8 & 0xff;
            outbits -= 8;
          }
        }
      }
      if (outbits > 0) {
        buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);
      }
    }
    this.bufferLength += rowBytes;
  }
  readBlockPng() {
    const rowBytes = this.rowBytes;
    const pixBytes = this.pixBytes;
    const predictor = this.str.getByte();
    const rawBytes = this.str.getBytes(rowBytes);
    this.eof = !rawBytes.length;
    if (this.eof) {
      return;
    }
    const bufferLength = this.bufferLength;
    const buffer = this.ensureBuffer(bufferLength + rowBytes);
    let prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);
    if (prevRow.length === 0) {
      prevRow = new Uint8Array(rowBytes);
    }
    let i,
      j = bufferLength,
      up,
      c;
    switch (predictor) {
      case 0:
        for (i = 0; i < rowBytes; ++i) {
          buffer[j++] = rawBytes[i];
        }
        break;
      case 1:
        for (i = 0; i < pixBytes; ++i) {
          buffer[j++] = rawBytes[i];
        }
        for (; i < rowBytes; ++i) {
          buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 0xff;
          j++;
        }
        break;
      case 2:
        for (i = 0; i < rowBytes; ++i) {
          buffer[j++] = prevRow[i] + rawBytes[i] & 0xff;
        }
        break;
      case 3:
        for (i = 0; i < pixBytes; ++i) {
          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];
        }
        for (; i < rowBytes; ++i) {
          buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 0xff;
          j++;
        }
        break;
      case 4:
        for (i = 0; i < pixBytes; ++i) {
          up = prevRow[i];
          c = rawBytes[i];
          buffer[j++] = up + c;
        }
        for (; i < rowBytes; ++i) {
          up = prevRow[i];
          const upLeft = prevRow[i - pixBytes];
          const left = buffer[j - pixBytes];
          const p = left + up - upLeft;
          let pa = p - left;
          if (pa < 0) {
            pa = -pa;
          }
          let pb = p - up;
          if (pb < 0) {
            pb = -pb;
          }
          let pc = p - upLeft;
          if (pc < 0) {
            pc = -pc;
          }
          c = rawBytes[i];
          if (pa <= pb && pa <= pc) {
            buffer[j++] = left + c;
          } else if (pb <= pc) {
            buffer[j++] = up + c;
          } else {
            buffer[j++] = upLeft + c;
          }
        }
        break;
      default:
        throw new FormatError(\`Unsupported predictor: \${predictor}\`);
    }
    this.bufferLength += rowBytes;
  }
}

;// ./src/core/run_length_stream.js

class RunLengthStream extends DecodeStream {
  constructor(str, maybeLength) {
    super(maybeLength);
    this.str = str;
    this.dict = str.dict;
  }
  readBlock() {
    const repeatHeader = this.str.getBytes(2);
    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {
      this.eof = true;
      return;
    }
    let buffer;
    let bufferLength = this.bufferLength;
    let n = repeatHeader[0];
    if (n < 128) {
      buffer = this.ensureBuffer(bufferLength + n + 1);
      buffer[bufferLength++] = repeatHeader[1];
      if (n > 0) {
        const source = this.str.getBytes(n);
        buffer.set(source, bufferLength);
        bufferLength += n;
      }
    } else {
      n = 257 - n;
      buffer = this.ensureBuffer(bufferLength + n + 1);
      buffer.fill(repeatHeader[1], bufferLength, bufferLength + n);
      bufferLength += n;
    }
    this.bufferLength = bufferLength;
  }
}

;// ./src/core/parser.js














const MAX_LENGTH_TO_CACHE = 1000;
function getInlineImageCacheKey(bytes) {
  const strBuf = [],
    ii = bytes.length;
  let i = 0;
  while (i < ii - 1) {
    strBuf.push(bytes[i++] << 8 | bytes[i++]);
  }
  if (i < ii) {
    strBuf.push(bytes[i]);
  }
  return ii + "_" + String.fromCharCode.apply(null, strBuf);
}
class Parser {
  constructor({
    lexer,
    xref,
    allowStreams = false,
    recoveryMode = false
  }) {
    this.lexer = lexer;
    this.xref = xref;
    this.allowStreams = allowStreams;
    this.recoveryMode = recoveryMode;
    this.imageCache = Object.create(null);
    this._imageId = 0;
    this.refill();
  }
  refill() {
    this.buf1 = this.lexer.getObj();
    this.buf2 = this.lexer.getObj();
  }
  shift() {
    if (this.buf2 instanceof Cmd && this.buf2.cmd === "ID") {
      this.buf1 = this.buf2;
      this.buf2 = null;
    } else {
      this.buf1 = this.buf2;
      this.buf2 = this.lexer.getObj();
    }
  }
  tryShift() {
    try {
      this.shift();
      return true;
    } catch (e) {
      if (e instanceof MissingDataException) {
        throw e;
      }
      return false;
    }
  }
  getObj(cipherTransform = null) {
    const buf1 = this.buf1;
    this.shift();
    if (buf1 instanceof Cmd) {
      switch (buf1.cmd) {
        case "BI":
          return this.makeInlineImage(cipherTransform);
        case "[":
          const array = [];
          while (!isCmd(this.buf1, "]") && this.buf1 !== EOF) {
            array.push(this.getObj(cipherTransform));
          }
          if (this.buf1 === EOF) {
            if (this.recoveryMode) {
              return array;
            }
            throw new ParserEOFException("End of file inside array.");
          }
          this.shift();
          return array;
        case "<<":
          const dict = new Dict(this.xref);
          while (!isCmd(this.buf1, ">>") && this.buf1 !== EOF) {
            if (!(this.buf1 instanceof Name)) {
              info("Malformed dictionary: key must be a name object");
              this.shift();
              continue;
            }
            const key = this.buf1.name;
            this.shift();
            if (this.buf1 === EOF) {
              break;
            }
            dict.set(key, this.getObj(cipherTransform));
          }
          if (this.buf1 === EOF) {
            if (this.recoveryMode) {
              return dict;
            }
            throw new ParserEOFException("End of file inside dictionary.");
          }
          if (isCmd(this.buf2, "stream")) {
            return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;
          }
          this.shift();
          return dict;
        default:
          return buf1;
      }
    }
    if (Number.isInteger(buf1)) {
      if (Number.isInteger(this.buf1) && isCmd(this.buf2, "R")) {
        const ref = Ref.get(buf1, this.buf1);
        this.shift();
        this.shift();
        return ref;
      }
      return buf1;
    }
    if (typeof buf1 === "string") {
      if (cipherTransform) {
        return cipherTransform.decryptString(buf1);
      }
      return buf1;
    }
    return buf1;
  }
  findDefaultInlineStreamEnd(stream) {
    const E = 0x45,
      I = 0x49,
      SPACE = 0x20,
      LF = 0xa,
      CR = 0xd,
      NUL = 0x0;
    const {
        knownCommands
      } = this.lexer,
      startPos = stream.pos,
      n = 15;
    let state = 0,
      ch,
      maybeEIPos;
    while ((ch = stream.getByte()) !== -1) {
      if (state === 0) {
        state = ch === E ? 1 : 0;
      } else if (state === 1) {
        state = ch === I ? 2 : 0;
      } else {
        if (ch === SPACE || ch === LF || ch === CR) {
          maybeEIPos = stream.pos;
          const followingBytes = stream.peekBytes(n);
          const ii = followingBytes.length;
          if (ii === 0) {
            break;
          }
          for (let i = 0; i < ii; i++) {
            ch = followingBytes[i];
            if (ch === NUL && followingBytes[i + 1] !== NUL) {
              continue;
            }
            if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {
              state = 0;
              break;
            }
          }
          if (state !== 2) {
            continue;
          }
          if (!knownCommands) {
            warn("findDefaultInlineStreamEnd - \`lexer.knownCommands\` is undefined.");
            continue;
          }
          const tmpLexer = new Lexer(new Stream(stream.peekBytes(5 * n)), knownCommands);
          tmpLexer._hexStringWarn = () => {};
          let numArgs = 0;
          while (true) {
            const nextObj = tmpLexer.getObj();
            if (nextObj === EOF) {
              state = 0;
              break;
            }
            if (nextObj instanceof Cmd) {
              const knownCommand = knownCommands[nextObj.cmd];
              if (!knownCommand) {
                state = 0;
                break;
              } else if (knownCommand.variableArgs ? numArgs <= knownCommand.numArgs : numArgs === knownCommand.numArgs) {
                break;
              }
              numArgs = 0;
              continue;
            }
            numArgs++;
          }
          if (state === 2) {
            break;
          }
        } else {
          state = 0;
        }
      }
    }
    if (ch === -1) {
      warn("findDefaultInlineStreamEnd: " + "Reached the end of the stream without finding a valid EI marker");
      if (maybeEIPos) {
        warn('... trying to recover by using the last "EI" occurrence.');
        stream.skip(-(stream.pos - maybeEIPos));
      }
    }
    let endOffset = 4;
    stream.skip(-endOffset);
    ch = stream.peekByte();
    stream.skip(endOffset);
    if (!isWhiteSpace(ch)) {
      endOffset--;
    }
    return stream.pos - endOffset - startPos;
  }
  findDCTDecodeInlineStreamEnd(stream) {
    const startPos = stream.pos;
    let foundEOI = false,
      b,
      markerLength;
    while ((b = stream.getByte()) !== -1) {
      if (b !== 0xff) {
        continue;
      }
      switch (stream.getByte()) {
        case 0x00:
          break;
        case 0xff:
          stream.skip(-1);
          break;
        case 0xd9:
          foundEOI = true;
          break;
        case 0xc0:
        case 0xc1:
        case 0xc2:
        case 0xc3:
        case 0xc5:
        case 0xc6:
        case 0xc7:
        case 0xc9:
        case 0xca:
        case 0xcb:
        case 0xcd:
        case 0xce:
        case 0xcf:
        case 0xc4:
        case 0xcc:
        case 0xda:
        case 0xdb:
        case 0xdc:
        case 0xdd:
        case 0xde:
        case 0xdf:
        case 0xe0:
        case 0xe1:
        case 0xe2:
        case 0xe3:
        case 0xe4:
        case 0xe5:
        case 0xe6:
        case 0xe7:
        case 0xe8:
        case 0xe9:
        case 0xea:
        case 0xeb:
        case 0xec:
        case 0xed:
        case 0xee:
        case 0xef:
        case 0xfe:
          markerLength = stream.getUint16();
          if (markerLength > 2) {
            stream.skip(markerLength - 2);
          } else {
            stream.skip(-2);
          }
          break;
      }
      if (foundEOI) {
        break;
      }
    }
    const length = stream.pos - startPos;
    if (b === -1) {
      warn("Inline DCTDecode image stream: " + "EOI marker not found, searching for /EI/ instead.");
      stream.skip(-length);
      return this.findDefaultInlineStreamEnd(stream);
    }
    this.inlineStreamSkipEI(stream);
    return length;
  }
  findASCII85DecodeInlineStreamEnd(stream) {
    const TILDE = 0x7e,
      GT = 0x3e;
    const startPos = stream.pos;
    let ch;
    while ((ch = stream.getByte()) !== -1) {
      if (ch === TILDE) {
        const tildePos = stream.pos;
        ch = stream.peekByte();
        while (isWhiteSpace(ch)) {
          stream.skip();
          ch = stream.peekByte();
        }
        if (ch === GT) {
          stream.skip();
          break;
        }
        if (stream.pos > tildePos) {
          const maybeEI = stream.peekBytes(2);
          if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {
            break;
          }
        }
      }
    }
    const length = stream.pos - startPos;
    if (ch === -1) {
      warn("Inline ASCII85Decode image stream: " + "EOD marker not found, searching for /EI/ instead.");
      stream.skip(-length);
      return this.findDefaultInlineStreamEnd(stream);
    }
    this.inlineStreamSkipEI(stream);
    return length;
  }
  findASCIIHexDecodeInlineStreamEnd(stream) {
    const GT = 0x3e;
    const startPos = stream.pos;
    let ch;
    while ((ch = stream.getByte()) !== -1) {
      if (ch === GT) {
        break;
      }
    }
    const length = stream.pos - startPos;
    if (ch === -1) {
      warn("Inline ASCIIHexDecode image stream: " + "EOD marker not found, searching for /EI/ instead.");
      stream.skip(-length);
      return this.findDefaultInlineStreamEnd(stream);
    }
    this.inlineStreamSkipEI(stream);
    return length;
  }
  inlineStreamSkipEI(stream) {
    const E = 0x45,
      I = 0x49;
    let state = 0,
      ch;
    while ((ch = stream.getByte()) !== -1) {
      if (state === 0) {
        state = ch === E ? 1 : 0;
      } else if (state === 1) {
        state = ch === I ? 2 : 0;
      } else if (state === 2) {
        break;
      }
    }
  }
  makeInlineImage(cipherTransform) {
    const lexer = this.lexer;
    const stream = lexer.stream;
    const dictMap = Object.create(null);
    let dictLength;
    while (!isCmd(this.buf1, "ID") && this.buf1 !== EOF) {
      if (!(this.buf1 instanceof Name)) {
        throw new FormatError("Dictionary key must be a name object");
      }
      const key = this.buf1.name;
      this.shift();
      if (this.buf1 === EOF) {
        break;
      }
      dictMap[key] = this.getObj(cipherTransform);
    }
    if (lexer.beginInlineImagePos !== -1) {
      dictLength = stream.pos - lexer.beginInlineImagePos;
    }
    const filter = this.xref.fetchIfRef(dictMap.F || dictMap.Filter);
    let filterName;
    if (filter instanceof Name) {
      filterName = filter.name;
    } else if (Array.isArray(filter)) {
      const filterZero = this.xref.fetchIfRef(filter[0]);
      if (filterZero instanceof Name) {
        filterName = filterZero.name;
      }
    }
    const startPos = stream.pos;
    let length;
    switch (filterName) {
      case "DCT":
      case "DCTDecode":
        length = this.findDCTDecodeInlineStreamEnd(stream);
        break;
      case "A85":
      case "ASCII85Decode":
        length = this.findASCII85DecodeInlineStreamEnd(stream);
        break;
      case "AHx":
      case "ASCIIHexDecode":
        length = this.findASCIIHexDecodeInlineStreamEnd(stream);
        break;
      default:
        length = this.findDefaultInlineStreamEnd(stream);
    }
    let cacheKey;
    if (length < MAX_LENGTH_TO_CACHE && dictLength > 0) {
      const initialStreamPos = stream.pos;
      stream.pos = lexer.beginInlineImagePos;
      cacheKey = getInlineImageCacheKey(stream.getBytes(dictLength + length));
      stream.pos = initialStreamPos;
      const cacheEntry = this.imageCache[cacheKey];
      if (cacheEntry !== undefined) {
        this.buf2 = Cmd.get("EI");
        this.shift();
        cacheEntry.reset();
        return cacheEntry;
      }
    }
    const dict = new Dict(this.xref);
    for (const key in dictMap) {
      dict.set(key, dictMap[key]);
    }
    let imageStream = stream.makeSubStream(startPos, length, dict);
    if (cipherTransform) {
      imageStream = cipherTransform.createStream(imageStream, length);
    }
    imageStream = this.filter(imageStream, dict, length);
    imageStream.dict = dict;
    if (cacheKey !== undefined) {
      imageStream.cacheKey = \`inline_img_\${++this._imageId}\`;
      this.imageCache[cacheKey] = imageStream;
    }
    this.buf2 = Cmd.get("EI");
    this.shift();
    return imageStream;
  }
  #findStreamLength(startPos) {
    const {
      stream
    } = this.lexer;
    stream.pos = startPos;
    const SCAN_BLOCK_LENGTH = 2048;
    const signatureLength = "endstream".length;
    const END_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64]);
    const endLength = END_SIGNATURE.length;
    const PARTIAL_SIGNATURE = [new Uint8Array([0x73, 0x74, 0x72, 0x65, 0x61, 0x6d]), new Uint8Array([0x73, 0x74, 0x65, 0x61, 0x6d]), new Uint8Array([0x73, 0x74, 0x72, 0x65, 0x61])];
    const normalLength = signatureLength - endLength;
    while (stream.pos < stream.end) {
      const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
      const scanLength = scanBytes.length - signatureLength;
      if (scanLength <= 0) {
        break;
      }
      let pos = 0;
      while (pos < scanLength) {
        let j = 0;
        while (j < endLength && scanBytes[pos + j] === END_SIGNATURE[j]) {
          j++;
        }
        if (j >= endLength) {
          let found = false;
          for (const part of PARTIAL_SIGNATURE) {
            const partLen = part.length;
            let k = 0;
            while (k < partLen && scanBytes[pos + j + k] === part[k]) {
              k++;
            }
            if (k >= normalLength) {
              found = true;
              break;
            }
            if (k >= partLen) {
              const lastByte = scanBytes[pos + j + k];
              if (isWhiteSpace(lastByte)) {
                info(\`Found "\${bytesToString([...END_SIGNATURE, ...part])}" when \` + "searching for endstream command.");
                found = true;
              }
              break;
            }
          }
          if (found) {
            stream.pos += pos;
            return stream.pos - startPos;
          }
        }
        pos++;
      }
      stream.pos += scanLength;
    }
    return -1;
  }
  makeStream(dict, cipherTransform) {
    const lexer = this.lexer;
    let stream = lexer.stream;
    lexer.skipToNextLine();
    const startPos = stream.pos - 1;
    let length = dict.get("Length");
    if (!Number.isInteger(length)) {
      info(\`Bad length "\${length && length.toString()}" in stream.\`);
      length = 0;
    }
    stream.pos = startPos + length;
    lexer.nextChar();
    if (this.tryShift() && isCmd(this.buf2, "endstream")) {
      this.shift();
    } else {
      length = this.#findStreamLength(startPos);
      if (length < 0) {
        throw new FormatError("Missing endstream command.");
      }
      lexer.nextChar();
      this.shift();
      this.shift();
    }
    this.shift();
    stream = stream.makeSubStream(startPos, length, dict);
    if (cipherTransform) {
      stream = cipherTransform.createStream(stream, length);
    }
    stream = this.filter(stream, dict, length);
    stream.dict = dict;
    return stream;
  }
  filter(stream, dict, length) {
    let filter = dict.get("F", "Filter");
    let params = dict.get("DP", "DecodeParms");
    if (filter instanceof Name) {
      if (Array.isArray(params)) {
        warn("/DecodeParms should not be an Array, when /Filter is a Name.");
      }
      return this.makeFilter(stream, filter.name, length, params);
    }
    let maybeLength = length;
    if (Array.isArray(filter)) {
      const filterArray = filter;
      const paramsArray = params;
      for (let i = 0, ii = filterArray.length; i < ii; ++i) {
        filter = this.xref.fetchIfRef(filterArray[i]);
        if (!(filter instanceof Name)) {
          throw new FormatError(\`Bad filter name "\${filter}"\`);
        }
        params = null;
        if (Array.isArray(paramsArray) && i in paramsArray) {
          params = this.xref.fetchIfRef(paramsArray[i]);
        }
        stream = this.makeFilter(stream, filter.name, maybeLength, params);
        maybeLength = null;
      }
    }
    return stream;
  }
  makeFilter(stream, name, maybeLength, params) {
    if (maybeLength === 0) {
      warn(\`Empty "\${name}" stream.\`);
      return new NullStream();
    }
    try {
      switch (name) {
        case "Fl":
        case "FlateDecode":
          if (params) {
            return new PredictorStream(new FlateStream(stream, maybeLength), maybeLength, params);
          }
          return new FlateStream(stream, maybeLength);
        case "LZW":
        case "LZWDecode":
          let earlyChange = 1;
          if (params) {
            if (params.has("EarlyChange")) {
              earlyChange = params.get("EarlyChange");
            }
            return new PredictorStream(new LZWStream(stream, maybeLength, earlyChange), maybeLength, params);
          }
          return new LZWStream(stream, maybeLength, earlyChange);
        case "DCT":
        case "DCTDecode":
          return new JpegStream(stream, maybeLength, params);
        case "JPX":
        case "JPXDecode":
          return new JpxStream(stream, maybeLength, params);
        case "A85":
        case "ASCII85Decode":
          return new Ascii85Stream(stream, maybeLength);
        case "AHx":
        case "ASCIIHexDecode":
          return new AsciiHexStream(stream, maybeLength);
        case "CCF":
        case "CCITTFaxDecode":
          return new CCITTFaxStream(stream, maybeLength, params);
        case "RL":
        case "RunLengthDecode":
          return new RunLengthStream(stream, maybeLength);
        case "JBIG2Decode":
          return new Jbig2Stream(stream, maybeLength, params);
      }
      warn(\`Filter "\${name}" is not supported.\`);
      return stream;
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn(\`Invalid stream: "\${ex}"\`);
      return new NullStream();
    }
  }
}
const specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
function toHexDigit(ch) {
  if (ch >= 0x30 && ch <= 0x39) {
    return ch & 0x0f;
  }
  if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {
    return (ch & 0x0f) + 9;
  }
  return -1;
}
class Lexer {
  constructor(stream, knownCommands = null) {
    this.stream = stream;
    this.nextChar();
    this.strBuf = [];
    this.knownCommands = knownCommands;
    this._hexStringNumWarn = 0;
    this.beginInlineImagePos = -1;
  }
  nextChar() {
    return this.currentChar = this.stream.getByte();
  }
  peekChar() {
    return this.stream.peekByte();
  }
  getNumber() {
    let ch = this.currentChar;
    let eNotation = false;
    let divideBy = 0;
    let sign = 1;
    if (ch === 0x2d) {
      sign = -1;
      ch = this.nextChar();
      if (ch === 0x2d) {
        ch = this.nextChar();
      }
    } else if (ch === 0x2b) {
      ch = this.nextChar();
    }
    if (ch === 0x0a || ch === 0x0d) {
      do {
        ch = this.nextChar();
      } while (ch === 0x0a || ch === 0x0d);
    }
    if (ch === 0x2e) {
      divideBy = 10;
      ch = this.nextChar();
    }
    if (ch < 0x30 || ch > 0x39) {
      const msg = \`Invalid number: \${String.fromCharCode(ch)} (charCode \${ch})\`;
      if (isWhiteSpace(ch) || ch === 0x28 || ch === 0x3c || ch === -1) {
        info(\`Lexer.getNumber - "\${msg}".\`);
        return 0;
      }
      throw new FormatError(msg);
    }
    let baseValue = ch - 0x30;
    let powerValue = 0;
    let powerValueSign = 1;
    while ((ch = this.nextChar()) >= 0) {
      if (ch >= 0x30 && ch <= 0x39) {
        const currentDigit = ch - 0x30;
        if (eNotation) {
          powerValue = powerValue * 10 + currentDigit;
        } else {
          if (divideBy !== 0) {
            divideBy *= 10;
          }
          baseValue = baseValue * 10 + currentDigit;
        }
      } else if (ch === 0x2e) {
        if (divideBy === 0) {
          divideBy = 1;
        } else {
          break;
        }
      } else if (ch === 0x2d) {
        warn("Badly formatted number: minus sign in the middle");
      } else if (ch === 0x45 || ch === 0x65) {
        ch = this.peekChar();
        if (ch === 0x2b || ch === 0x2d) {
          powerValueSign = ch === 0x2d ? -1 : 1;
          this.nextChar();
        } else if (ch < 0x30 || ch > 0x39) {
          break;
        }
        eNotation = true;
      } else {
        break;
      }
    }
    if (divideBy !== 0) {
      baseValue /= divideBy;
    }
    if (eNotation) {
      baseValue *= 10 ** (powerValueSign * powerValue);
    }
    return sign * baseValue;
  }
  getString() {
    let numParen = 1;
    let done = false;
    const strBuf = this.strBuf;
    strBuf.length = 0;
    let ch = this.nextChar();
    while (true) {
      let charBuffered = false;
      switch (ch | 0) {
        case -1:
          warn("Unterminated string");
          done = true;
          break;
        case 0x28:
          ++numParen;
          strBuf.push("(");
          break;
        case 0x29:
          if (--numParen === 0) {
            this.nextChar();
            done = true;
          } else {
            strBuf.push(")");
          }
          break;
        case 0x5c:
          ch = this.nextChar();
          switch (ch) {
            case -1:
              warn("Unterminated string");
              done = true;
              break;
            case 0x6e:
              strBuf.push("\\n");
              break;
            case 0x72:
              strBuf.push("\\r");
              break;
            case 0x74:
              strBuf.push("\\t");
              break;
            case 0x62:
              strBuf.push("\\b");
              break;
            case 0x66:
              strBuf.push("\\f");
              break;
            case 0x5c:
            case 0x28:
            case 0x29:
              strBuf.push(String.fromCharCode(ch));
              break;
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
              let x = ch & 0x0f;
              ch = this.nextChar();
              charBuffered = true;
              if (ch >= 0x30 && ch <= 0x37) {
                x = (x << 3) + (ch & 0x0f);
                ch = this.nextChar();
                if (ch >= 0x30 && ch <= 0x37) {
                  charBuffered = false;
                  x = (x << 3) + (ch & 0x0f);
                }
              }
              strBuf.push(String.fromCharCode(x));
              break;
            case 0x0d:
              if (this.peekChar() === 0x0a) {
                this.nextChar();
              }
              break;
            case 0x0a:
              break;
            default:
              strBuf.push(String.fromCharCode(ch));
              break;
          }
          break;
        default:
          strBuf.push(String.fromCharCode(ch));
          break;
      }
      if (done) {
        break;
      }
      if (!charBuffered) {
        ch = this.nextChar();
      }
    }
    return strBuf.join("");
  }
  getName() {
    let ch, previousCh;
    const strBuf = this.strBuf;
    strBuf.length = 0;
    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
      if (ch === 0x23) {
        ch = this.nextChar();
        if (specialChars[ch]) {
          warn("Lexer_getName: " + "NUMBER SIGN (#) should be followed by a hexadecimal number.");
          strBuf.push("#");
          break;
        }
        const x = toHexDigit(ch);
        if (x !== -1) {
          previousCh = ch;
          ch = this.nextChar();
          const x2 = toHexDigit(ch);
          if (x2 === -1) {
            warn(\`Lexer_getName: Illegal digit (\${String.fromCharCode(ch)}) \` + "in hexadecimal number.");
            strBuf.push("#", String.fromCharCode(previousCh));
            if (specialChars[ch]) {
              break;
            }
            strBuf.push(String.fromCharCode(ch));
            continue;
          }
          strBuf.push(String.fromCharCode(x << 4 | x2));
        } else {
          strBuf.push("#", String.fromCharCode(ch));
        }
      } else {
        strBuf.push(String.fromCharCode(ch));
      }
    }
    if (strBuf.length > 127) {
      warn(\`Name token is longer than allowed by the spec: \${strBuf.length}\`);
    }
    return Name.get(strBuf.join(""));
  }
  _hexStringWarn(ch) {
    const MAX_HEX_STRING_NUM_WARN = 5;
    if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {
      warn("getHexString - ignoring additional invalid characters.");
      return;
    }
    if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {
      return;
    }
    warn(\`getHexString - ignoring invalid character: \${ch}\`);
  }
  getHexString() {
    const strBuf = this.strBuf;
    strBuf.length = 0;
    let ch = this.currentChar;
    let firstDigit = -1,
      digit = -1;
    this._hexStringNumWarn = 0;
    while (true) {
      if (ch < 0) {
        warn("Unterminated hex string");
        break;
      } else if (ch === 0x3e) {
        this.nextChar();
        break;
      } else if (specialChars[ch] === 1) {
        ch = this.nextChar();
        continue;
      } else {
        digit = toHexDigit(ch);
        if (digit === -1) {
          this._hexStringWarn(ch);
        } else if (firstDigit === -1) {
          firstDigit = digit;
        } else {
          strBuf.push(String.fromCharCode(firstDigit << 4 | digit));
          firstDigit = -1;
        }
        ch = this.nextChar();
      }
    }
    if (firstDigit !== -1) {
      strBuf.push(String.fromCharCode(firstDigit << 4));
    }
    return strBuf.join("");
  }
  getObj() {
    let comment = false;
    let ch = this.currentChar;
    while (true) {
      if (ch < 0) {
        return EOF;
      }
      if (comment) {
        if (ch === 0x0a || ch === 0x0d) {
          comment = false;
        }
      } else if (ch === 0x25) {
        comment = true;
      } else if (specialChars[ch] !== 1) {
        break;
      }
      ch = this.nextChar();
    }
    switch (ch | 0) {
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x2b:
      case 0x2d:
      case 0x2e:
        return this.getNumber();
      case 0x28:
        return this.getString();
      case 0x2f:
        return this.getName();
      case 0x5b:
        this.nextChar();
        return Cmd.get("[");
      case 0x5d:
        this.nextChar();
        return Cmd.get("]");
      case 0x3c:
        ch = this.nextChar();
        if (ch === 0x3c) {
          this.nextChar();
          return Cmd.get("<<");
        }
        return this.getHexString();
      case 0x3e:
        ch = this.nextChar();
        if (ch === 0x3e) {
          this.nextChar();
          return Cmd.get(">>");
        }
        return Cmd.get(">");
      case 0x7b:
        this.nextChar();
        return Cmd.get("{");
      case 0x7d:
        this.nextChar();
        return Cmd.get("}");
      case 0x29:
        this.nextChar();
        throw new FormatError(\`Illegal character: \${ch}\`);
    }
    let str = String.fromCharCode(ch);
    if (ch < 0x20 || ch > 0x7f) {
      const nextCh = this.peekChar();
      if (nextCh >= 0x20 && nextCh <= 0x7f) {
        this.nextChar();
        return Cmd.get(str);
      }
    }
    const knownCommands = this.knownCommands;
    let knownCommandFound = knownCommands?.[str] !== undefined;
    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
      const possibleCommand = str + String.fromCharCode(ch);
      if (knownCommandFound && knownCommands[possibleCommand] === undefined) {
        break;
      }
      if (str.length === 128) {
        throw new FormatError(\`Command token too long: \${str.length}\`);
      }
      str = possibleCommand;
      knownCommandFound = knownCommands?.[str] !== undefined;
    }
    if (str === "true") {
      return true;
    }
    if (str === "false") {
      return false;
    }
    if (str === "null") {
      return null;
    }
    if (str === "BI") {
      this.beginInlineImagePos = this.stream.pos;
    }
    return Cmd.get(str);
  }
  skipToNextLine() {
    let ch = this.currentChar;
    while (ch >= 0) {
      if (ch === 0x0d) {
        ch = this.nextChar();
        if (ch === 0x0a) {
          this.nextChar();
        }
        break;
      } else if (ch === 0x0a) {
        this.nextChar();
        break;
      }
      ch = this.nextChar();
    }
  }
}
class Linearization {
  static create(stream) {
    function getInt(linDict, name, allowZeroValue = false) {
      const obj = linDict.get(name);
      if (Number.isInteger(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {
        return obj;
      }
      throw new Error(\`The "\${name}" parameter in the linearization \` + "dictionary is invalid.");
    }
    function getHints(linDict) {
      const hints = linDict.get("H");
      let hintsLength;
      if (Array.isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {
        for (let index = 0; index < hintsLength; index++) {
          const hint = hints[index];
          if (!(Number.isInteger(hint) && hint > 0)) {
            throw new Error(\`Hint (\${index}) in the linearization dictionary is invalid.\`);
          }
        }
        return hints;
      }
      throw new Error("Hint array in the linearization dictionary is invalid.");
    }
    const parser = new Parser({
      lexer: new Lexer(stream),
      xref: null
    });
    const obj1 = parser.getObj();
    const obj2 = parser.getObj();
    const obj3 = parser.getObj();
    const linDict = parser.getObj();
    let obj, length;
    if (!(Number.isInteger(obj1) && Number.isInteger(obj2) && isCmd(obj3, "obj") && linDict instanceof Dict && typeof (obj = linDict.get("Linearized")) === "number" && obj > 0)) {
      return null;
    } else if ((length = getInt(linDict, "L")) !== stream.length) {
      throw new Error('The "L" parameter in the linearization dictionary ' + "does not equal the stream length.");
    }
    return {
      length,
      hints: getHints(linDict),
      objectNumberFirst: getInt(linDict, "O"),
      endFirst: getInt(linDict, "E"),
      numPages: getInt(linDict, "N"),
      mainXRefEntriesOffset: getInt(linDict, "T"),
      pageFirst: linDict.has("P") ? getInt(linDict, "P", true) : 0
    };
  }
}

;// ./src/core/cmap.js







const BUILT_IN_CMAPS = ["Adobe-GB1-UCS2", "Adobe-CNS1-UCS2", "Adobe-Japan1-UCS2", "Adobe-Korea1-UCS2", "78-EUC-H", "78-EUC-V", "78-H", "78-RKSJ-H", "78-RKSJ-V", "78-V", "78ms-RKSJ-H", "78ms-RKSJ-V", "83pv-RKSJ-H", "90ms-RKSJ-H", "90ms-RKSJ-V", "90msp-RKSJ-H", "90msp-RKSJ-V", "90pv-RKSJ-H", "90pv-RKSJ-V", "Add-H", "Add-RKSJ-H", "Add-RKSJ-V", "Add-V", "Adobe-CNS1-0", "Adobe-CNS1-1", "Adobe-CNS1-2", "Adobe-CNS1-3", "Adobe-CNS1-4", "Adobe-CNS1-5", "Adobe-CNS1-6", "Adobe-GB1-0", "Adobe-GB1-1", "Adobe-GB1-2", "Adobe-GB1-3", "Adobe-GB1-4", "Adobe-GB1-5", "Adobe-Japan1-0", "Adobe-Japan1-1", "Adobe-Japan1-2", "Adobe-Japan1-3", "Adobe-Japan1-4", "Adobe-Japan1-5", "Adobe-Japan1-6", "Adobe-Korea1-0", "Adobe-Korea1-1", "Adobe-Korea1-2", "B5-H", "B5-V", "B5pc-H", "B5pc-V", "CNS-EUC-H", "CNS-EUC-V", "CNS1-H", "CNS1-V", "CNS2-H", "CNS2-V", "ETHK-B5-H", "ETHK-B5-V", "ETen-B5-H", "ETen-B5-V", "ETenms-B5-H", "ETenms-B5-V", "EUC-H", "EUC-V", "Ext-H", "Ext-RKSJ-H", "Ext-RKSJ-V", "Ext-V", "GB-EUC-H", "GB-EUC-V", "GB-H", "GB-V", "GBK-EUC-H", "GBK-EUC-V", "GBK2K-H", "GBK2K-V", "GBKp-EUC-H", "GBKp-EUC-V", "GBT-EUC-H", "GBT-EUC-V", "GBT-H", "GBT-V", "GBTpc-EUC-H", "GBTpc-EUC-V", "GBpc-EUC-H", "GBpc-EUC-V", "H", "HKdla-B5-H", "HKdla-B5-V", "HKdlb-B5-H", "HKdlb-B5-V", "HKgccs-B5-H", "HKgccs-B5-V", "HKm314-B5-H", "HKm314-B5-V", "HKm471-B5-H", "HKm471-B5-V", "HKscs-B5-H", "HKscs-B5-V", "Hankaku", "Hiragana", "KSC-EUC-H", "KSC-EUC-V", "KSC-H", "KSC-Johab-H", "KSC-Johab-V", "KSC-V", "KSCms-UHC-H", "KSCms-UHC-HW-H", "KSCms-UHC-HW-V", "KSCms-UHC-V", "KSCpc-EUC-H", "KSCpc-EUC-V", "Katakana", "NWP-H", "NWP-V", "RKSJ-H", "RKSJ-V", "Roman", "UniCNS-UCS2-H", "UniCNS-UCS2-V", "UniCNS-UTF16-H", "UniCNS-UTF16-V", "UniCNS-UTF32-H", "UniCNS-UTF32-V", "UniCNS-UTF8-H", "UniCNS-UTF8-V", "UniGB-UCS2-H", "UniGB-UCS2-V", "UniGB-UTF16-H", "UniGB-UTF16-V", "UniGB-UTF32-H", "UniGB-UTF32-V", "UniGB-UTF8-H", "UniGB-UTF8-V", "UniJIS-UCS2-H", "UniJIS-UCS2-HW-H", "UniJIS-UCS2-HW-V", "UniJIS-UCS2-V", "UniJIS-UTF16-H", "UniJIS-UTF16-V", "UniJIS-UTF32-H", "UniJIS-UTF32-V", "UniJIS-UTF8-H", "UniJIS-UTF8-V", "UniJIS2004-UTF16-H", "UniJIS2004-UTF16-V", "UniJIS2004-UTF32-H", "UniJIS2004-UTF32-V", "UniJIS2004-UTF8-H", "UniJIS2004-UTF8-V", "UniJISPro-UCS2-HW-V", "UniJISPro-UCS2-V", "UniJISPro-UTF8-V", "UniJISX0213-UTF32-H", "UniJISX0213-UTF32-V", "UniJISX02132004-UTF32-H", "UniJISX02132004-UTF32-V", "UniKS-UCS2-H", "UniKS-UCS2-V", "UniKS-UTF16-H", "UniKS-UTF16-V", "UniKS-UTF32-H", "UniKS-UTF32-V", "UniKS-UTF8-H", "UniKS-UTF8-V", "V", "WP-Symbol"];
const MAX_MAP_RANGE = 2 ** 24 - 1;
class CMap {
  constructor(builtInCMap = false) {
    this.codespaceRanges = [[], [], [], []];
    this.numCodespaceRanges = 0;
    this._map = [];
    this.name = "";
    this.vertical = false;
    this.useCMap = null;
    this.builtInCMap = builtInCMap;
  }
  addCodespaceRange(n, low, high) {
    this.codespaceRanges[n - 1].push(low, high);
    this.numCodespaceRanges++;
  }
  mapCidRange(low, high, dstLow) {
    if (high - low > MAX_MAP_RANGE) {
      throw new Error("mapCidRange - ignoring data above MAX_MAP_RANGE.");
    }
    while (low <= high) {
      this._map[low++] = dstLow++;
    }
  }
  mapBfRange(low, high, dstLow) {
    if (high - low > MAX_MAP_RANGE) {
      throw new Error("mapBfRange - ignoring data above MAX_MAP_RANGE.");
    }
    const lastByte = dstLow.length - 1;
    while (low <= high) {
      this._map[low++] = dstLow;
      const nextCharCode = dstLow.charCodeAt(lastByte) + 1;
      if (nextCharCode > 0xff) {
        dstLow = dstLow.substring(0, lastByte - 1) + String.fromCharCode(dstLow.charCodeAt(lastByte - 1) + 1) + "\\x00";
        continue;
      }
      dstLow = dstLow.substring(0, lastByte) + String.fromCharCode(nextCharCode);
    }
  }
  mapBfRangeToArray(low, high, array) {
    if (high - low > MAX_MAP_RANGE) {
      throw new Error("mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.");
    }
    const ii = array.length;
    let i = 0;
    while (low <= high && i < ii) {
      this._map[low] = array[i++];
      ++low;
    }
  }
  mapOne(src, dst) {
    this._map[src] = dst;
  }
  lookup(code) {
    return this._map[code];
  }
  contains(code) {
    return this._map[code] !== undefined;
  }
  forEach(callback) {
    const map = this._map;
    const length = map.length;
    if (length <= 0x10000) {
      for (let i = 0; i < length; i++) {
        if (map[i] !== undefined) {
          callback(i, map[i]);
        }
      }
    } else {
      for (const i in map) {
        callback(i, map[i]);
      }
    }
  }
  charCodeOf(value) {
    const map = this._map;
    if (map.length <= 0x10000) {
      return map.indexOf(value);
    }
    for (const charCode in map) {
      if (map[charCode] === value) {
        return charCode | 0;
      }
    }
    return -1;
  }
  getMap() {
    return this._map;
  }
  readCharCode(str, offset, out) {
    let c = 0;
    const codespaceRanges = this.codespaceRanges;
    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {
      c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;
      const codespaceRange = codespaceRanges[n];
      for (let k = 0, kk = codespaceRange.length; k < kk;) {
        const low = codespaceRange[k++];
        const high = codespaceRange[k++];
        if (c >= low && c <= high) {
          out.charcode = c;
          out.length = n + 1;
          return;
        }
      }
    }
    out.charcode = 0;
    out.length = 1;
  }
  getCharCodeLength(charCode) {
    const codespaceRanges = this.codespaceRanges;
    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {
      const codespaceRange = codespaceRanges[n];
      for (let k = 0, kk = codespaceRange.length; k < kk;) {
        const low = codespaceRange[k++];
        const high = codespaceRange[k++];
        if (charCode >= low && charCode <= high) {
          return n + 1;
        }
      }
    }
    return 1;
  }
  get length() {
    return this._map.length;
  }
  get isIdentityCMap() {
    if (!(this.name === "Identity-H" || this.name === "Identity-V")) {
      return false;
    }
    if (this._map.length !== 0x10000) {
      return false;
    }
    for (let i = 0; i < 0x10000; i++) {
      if (this._map[i] !== i) {
        return false;
      }
    }
    return true;
  }
}
class IdentityCMap extends CMap {
  constructor(vertical, n) {
    super();
    this.vertical = vertical;
    this.addCodespaceRange(n, 0, 0xffff);
  }
  mapCidRange(low, high, dstLow) {
    unreachable("should not call mapCidRange");
  }
  mapBfRange(low, high, dstLow) {
    unreachable("should not call mapBfRange");
  }
  mapBfRangeToArray(low, high, array) {
    unreachable("should not call mapBfRangeToArray");
  }
  mapOne(src, dst) {
    unreachable("should not call mapCidOne");
  }
  lookup(code) {
    return Number.isInteger(code) && code <= 0xffff ? code : undefined;
  }
  contains(code) {
    return Number.isInteger(code) && code <= 0xffff;
  }
  forEach(callback) {
    for (let i = 0; i <= 0xffff; i++) {
      callback(i, i);
    }
  }
  charCodeOf(value) {
    return Number.isInteger(value) && value <= 0xffff ? value : -1;
  }
  getMap() {
    const map = new Array(0x10000);
    for (let i = 0; i <= 0xffff; i++) {
      map[i] = i;
    }
    return map;
  }
  get length() {
    return 0x10000;
  }
  get isIdentityCMap() {
    unreachable("should not access .isIdentityCMap");
  }
}
function strToInt(str) {
  let a = 0;
  for (let i = 0; i < str.length; i++) {
    a = a << 8 | str.charCodeAt(i);
  }
  return a >>> 0;
}
function expectString(obj) {
  if (typeof obj !== "string") {
    throw new FormatError("Malformed CMap: expected string.");
  }
}
function expectInt(obj) {
  if (!Number.isInteger(obj)) {
    throw new FormatError("Malformed CMap: expected int.");
  }
}
function parseBfChar(cMap, lexer) {
  while (true) {
    let obj = lexer.getObj();
    if (obj === EOF) {
      break;
    }
    if (isCmd(obj, "endbfchar")) {
      return;
    }
    expectString(obj);
    const src = strToInt(obj);
    obj = lexer.getObj();
    expectString(obj);
    const dst = obj;
    cMap.mapOne(src, dst);
  }
}
function parseBfRange(cMap, lexer) {
  while (true) {
    let obj = lexer.getObj();
    if (obj === EOF) {
      break;
    }
    if (isCmd(obj, "endbfrange")) {
      return;
    }
    expectString(obj);
    const low = strToInt(obj);
    obj = lexer.getObj();
    expectString(obj);
    const high = strToInt(obj);
    obj = lexer.getObj();
    if (Number.isInteger(obj) || typeof obj === "string") {
      const dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;
      cMap.mapBfRange(low, high, dstLow);
    } else if (isCmd(obj, "[")) {
      obj = lexer.getObj();
      const array = [];
      while (!isCmd(obj, "]") && obj !== EOF) {
        array.push(obj);
        obj = lexer.getObj();
      }
      cMap.mapBfRangeToArray(low, high, array);
    } else {
      break;
    }
  }
  throw new FormatError("Invalid bf range.");
}
function parseCidChar(cMap, lexer) {
  while (true) {
    let obj = lexer.getObj();
    if (obj === EOF) {
      break;
    }
    if (isCmd(obj, "endcidchar")) {
      return;
    }
    expectString(obj);
    const src = strToInt(obj);
    obj = lexer.getObj();
    expectInt(obj);
    const dst = obj;
    cMap.mapOne(src, dst);
  }
}
function parseCidRange(cMap, lexer) {
  while (true) {
    let obj = lexer.getObj();
    if (obj === EOF) {
      break;
    }
    if (isCmd(obj, "endcidrange")) {
      return;
    }
    expectString(obj);
    const low = strToInt(obj);
    obj = lexer.getObj();
    expectString(obj);
    const high = strToInt(obj);
    obj = lexer.getObj();
    expectInt(obj);
    const dstLow = obj;
    cMap.mapCidRange(low, high, dstLow);
  }
}
function parseCodespaceRange(cMap, lexer) {
  while (true) {
    let obj = lexer.getObj();
    if (obj === EOF) {
      break;
    }
    if (isCmd(obj, "endcodespacerange")) {
      return;
    }
    if (typeof obj !== "string") {
      break;
    }
    const low = strToInt(obj);
    obj = lexer.getObj();
    if (typeof obj !== "string") {
      break;
    }
    const high = strToInt(obj);
    cMap.addCodespaceRange(obj.length, low, high);
  }
  throw new FormatError("Invalid codespace range.");
}
function parseWMode(cMap, lexer) {
  const obj = lexer.getObj();
  if (Number.isInteger(obj)) {
    cMap.vertical = !!obj;
  }
}
function parseCMapName(cMap, lexer) {
  const obj = lexer.getObj();
  if (obj instanceof Name) {
    cMap.name = obj.name;
  }
}
async function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {
  let previous, embeddedUseCMap;
  objLoop: while (true) {
    try {
      const obj = lexer.getObj();
      if (obj === EOF) {
        break;
      } else if (obj instanceof Name) {
        if (obj.name === "WMode") {
          parseWMode(cMap, lexer);
        } else if (obj.name === "CMapName") {
          parseCMapName(cMap, lexer);
        }
        previous = obj;
      } else if (obj instanceof Cmd) {
        switch (obj.cmd) {
          case "endcmap":
            break objLoop;
          case "usecmap":
            if (previous instanceof Name) {
              embeddedUseCMap = previous.name;
            }
            break;
          case "begincodespacerange":
            parseCodespaceRange(cMap, lexer);
            break;
          case "beginbfchar":
            parseBfChar(cMap, lexer);
            break;
          case "begincidchar":
            parseCidChar(cMap, lexer);
            break;
          case "beginbfrange":
            parseBfRange(cMap, lexer);
            break;
          case "begincidrange":
            parseCidRange(cMap, lexer);
            break;
        }
      }
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn("Invalid cMap data: " + ex);
      continue;
    }
  }
  if (!useCMap && embeddedUseCMap) {
    useCMap = embeddedUseCMap;
  }
  if (useCMap) {
    return extendCMap(cMap, fetchBuiltInCMap, useCMap);
  }
  return cMap;
}
async function extendCMap(cMap, fetchBuiltInCMap, useCMap) {
  cMap.useCMap = await createBuiltInCMap(useCMap, fetchBuiltInCMap);
  if (cMap.numCodespaceRanges === 0) {
    const useCodespaceRanges = cMap.useCMap.codespaceRanges;
    for (let i = 0; i < useCodespaceRanges.length; i++) {
      cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();
    }
    cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;
  }
  cMap.useCMap.forEach(function (key, value) {
    if (!cMap.contains(key)) {
      cMap.mapOne(key, value);
    }
  });
  return cMap;
}
async function createBuiltInCMap(name, fetchBuiltInCMap) {
  if (name === "Identity-H") {
    return new IdentityCMap(false, 2);
  } else if (name === "Identity-V") {
    return new IdentityCMap(true, 2);
  }
  if (!BUILT_IN_CMAPS.includes(name)) {
    throw new Error("Unknown CMap name: " + name);
  }
  if (!fetchBuiltInCMap) {
    throw new Error("Built-in CMap parameters are not provided.");
  }
  const {
    cMapData,
    isCompressed
  } = await fetchBuiltInCMap(name);
  const cMap = new CMap(true);
  if (isCompressed) {
    return new BinaryCMapReader().process(cMapData, cMap, useCMap => extendCMap(cMap, fetchBuiltInCMap, useCMap));
  }
  const lexer = new Lexer(new Stream(cMapData));
  return parseCMap(cMap, lexer, fetchBuiltInCMap, null);
}
class CMapFactory {
  static async create({
    encoding,
    fetchBuiltInCMap,
    useCMap
  }) {
    if (encoding instanceof Name) {
      return createBuiltInCMap(encoding.name, fetchBuiltInCMap);
    } else if (encoding instanceof BaseStream) {
      const parsedCMap = await parseCMap(new CMap(), new Lexer(encoding), fetchBuiltInCMap, useCMap);
      if (parsedCMap.isIdentityCMap) {
        return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);
      }
      return parsedCMap;
    }
    throw new Error("Encoding required.");
  }
}

;// ./src/core/charsets.js
const ISOAdobeCharset = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron"];
const ExpertCharset = [".notdef", "space", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];
const ExpertSubsetCharset = [".notdef", "space", "dollaroldstyle", "dollarsuperior", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "hyphensuperior", "colonmonetary", "onefitted", "rupiah", "centoldstyle", "figuredash", "hypheninferior", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior"];

;// ./src/core/encodings.js
const ExpertEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];
const MacExpertEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "centoldstyle", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "", "threequartersemdash", "", "questionsmall", "", "", "", "", "Ethsmall", "", "", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "", "", "", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hypheninferior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "asuperior", "centsuperior", "", "", "", "", "Aacutesmall", "Agravesmall", "Acircumflexsmall", "Adieresissmall", "Atildesmall", "Aringsmall", "Ccedillasmall", "Eacutesmall", "Egravesmall", "Ecircumflexsmall", "Edieresissmall", "Iacutesmall", "Igravesmall", "Icircumflexsmall", "Idieresissmall", "Ntildesmall", "Oacutesmall", "Ogravesmall", "Ocircumflexsmall", "Odieresissmall", "Otildesmall", "Uacutesmall", "Ugravesmall", "Ucircumflexsmall", "Udieresissmall", "", "eightsuperior", "fourinferior", "threeinferior", "sixinferior", "eightinferior", "seveninferior", "Scaronsmall", "", "centinferior", "twoinferior", "", "Dieresissmall", "", "Caronsmall", "osuperior", "fiveinferior", "", "commainferior", "periodinferior", "Yacutesmall", "", "dollarinferior", "", "", "Thornsmall", "", "nineinferior", "zeroinferior", "Zcaronsmall", "AEsmall", "Oslashsmall", "questiondownsmall", "oneinferior", "Lslashsmall", "", "", "", "", "", "", "Cedillasmall", "", "", "", "", "", "OEsmall", "figuredash", "hyphensuperior", "", "", "", "", "exclamdownsmall", "", "Ydieresissmall", "", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "ninesuperior", "zerosuperior", "", "esuperior", "rsuperior", "tsuperior", "", "", "isuperior", "ssuperior", "dsuperior", "", "", "", "", "", "lsuperior", "Ogoneksmall", "Brevesmall", "Macronsmall", "bsuperior", "nsuperior", "msuperior", "commasuperior", "periodsuperior", "Dotaccentsmall", "Ringsmall", "", "", "", ""];
const MacRomanEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "space", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron"];
const StandardEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls", "", "", "", ""];
const WinAnsiEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "bullet", "Euro", "bullet", "quotesinglbase", "florin", "quotedblbase", "ellipsis", "dagger", "daggerdbl", "circumflex", "perthousand", "Scaron", "guilsinglleft", "OE", "bullet", "Zcaron", "bullet", "bullet", "quoteleft", "quoteright", "quotedblleft", "quotedblright", "bullet", "endash", "emdash", "tilde", "trademark", "scaron", "guilsinglright", "oe", "bullet", "zcaron", "Ydieresis", "space", "exclamdown", "cent", "sterling", "currency", "yen", "brokenbar", "section", "dieresis", "copyright", "ordfeminine", "guillemotleft", "logicalnot", "hyphen", "registered", "macron", "degree", "plusminus", "twosuperior", "threesuperior", "acute", "mu", "paragraph", "periodcentered", "cedilla", "onesuperior", "ordmasculine", "guillemotright", "onequarter", "onehalf", "threequarters", "questiondown", "Agrave", "Aacute", "Acircumflex", "Atilde", "Adieresis", "Aring", "AE", "Ccedilla", "Egrave", "Eacute", "Ecircumflex", "Edieresis", "Igrave", "Iacute", "Icircumflex", "Idieresis", "Eth", "Ntilde", "Ograve", "Oacute", "Ocircumflex", "Otilde", "Odieresis", "multiply", "Oslash", "Ugrave", "Uacute", "Ucircumflex", "Udieresis", "Yacute", "Thorn", "germandbls", "agrave", "aacute", "acircumflex", "atilde", "adieresis", "aring", "ae", "ccedilla", "egrave", "eacute", "ecircumflex", "edieresis", "igrave", "iacute", "icircumflex", "idieresis", "eth", "ntilde", "ograve", "oacute", "ocircumflex", "otilde", "odieresis", "divide", "oslash", "ugrave", "uacute", "ucircumflex", "udieresis", "yacute", "thorn", "ydieresis"];
const SymbolSetEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "universal", "numbersign", "existential", "percent", "ampersand", "suchthat", "parenleft", "parenright", "asteriskmath", "plus", "comma", "minus", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "congruent", "Alpha", "Beta", "Chi", "Delta", "Epsilon", "Phi", "Gamma", "Eta", "Iota", "theta1", "Kappa", "Lambda", "Mu", "Nu", "Omicron", "Pi", "Theta", "Rho", "Sigma", "Tau", "Upsilon", "sigma1", "Omega", "Xi", "Psi", "Zeta", "bracketleft", "therefore", "bracketright", "perpendicular", "underscore", "radicalex", "alpha", "beta", "chi", "delta", "epsilon", "phi", "gamma", "eta", "iota", "phi1", "kappa", "lambda", "mu", "nu", "omicron", "pi", "theta", "rho", "sigma", "tau", "upsilon", "omega1", "omega", "xi", "psi", "zeta", "braceleft", "bar", "braceright", "similar", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Euro", "Upsilon1", "minute", "lessequal", "fraction", "infinity", "florin", "club", "diamond", "heart", "spade", "arrowboth", "arrowleft", "arrowup", "arrowright", "arrowdown", "degree", "plusminus", "second", "greaterequal", "multiply", "proportional", "partialdiff", "bullet", "divide", "notequal", "equivalence", "approxequal", "ellipsis", "arrowvertex", "arrowhorizex", "carriagereturn", "aleph", "Ifraktur", "Rfraktur", "weierstrass", "circlemultiply", "circleplus", "emptyset", "intersection", "union", "propersuperset", "reflexsuperset", "notsubset", "propersubset", "reflexsubset", "element", "notelement", "angle", "gradient", "registerserif", "copyrightserif", "trademarkserif", "product", "radical", "dotmath", "logicalnot", "logicaland", "logicalor", "arrowdblboth", "arrowdblleft", "arrowdblup", "arrowdblright", "arrowdbldown", "lozenge", "angleleft", "registersans", "copyrightsans", "trademarksans", "summation", "parenlefttp", "parenleftex", "parenleftbt", "bracketlefttp", "bracketleftex", "bracketleftbt", "bracelefttp", "braceleftmid", "braceleftbt", "braceex", "", "angleright", "integral", "integraltp", "integralex", "integralbt", "parenrighttp", "parenrightex", "parenrightbt", "bracketrighttp", "bracketrightex", "bracketrightbt", "bracerighttp", "bracerightmid", "bracerightbt", ""];
const ZapfDingbatsEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "a1", "a2", "a202", "a3", "a4", "a5", "a119", "a118", "a117", "a11", "a12", "a13", "a14", "a15", "a16", "a105", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26", "a27", "a28", "a6", "a7", "a8", "a9", "a10", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a38", "a39", "a40", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", "a57", "a58", "a59", "a60", "a61", "a62", "a63", "a64", "a65", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a203", "a75", "a204", "a76", "a77", "a78", "a79", "a81", "a82", "a83", "a84", "a97", "a98", "a99", "a100", "", "a89", "a90", "a93", "a94", "a91", "a92", "a205", "a85", "a206", "a86", "a87", "a88", "a95", "a96", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "a101", "a102", "a103", "a104", "a106", "a107", "a108", "a112", "a111", "a110", "a109", "a120", "a121", "a122", "a123", "a124", "a125", "a126", "a127", "a128", "a129", "a130", "a131", "a132", "a133", "a134", "a135", "a136", "a137", "a138", "a139", "a140", "a141", "a142", "a143", "a144", "a145", "a146", "a147", "a148", "a149", "a150", "a151", "a152", "a153", "a154", "a155", "a156", "a157", "a158", "a159", "a160", "a161", "a163", "a164", "a196", "a165", "a192", "a166", "a167", "a168", "a169", "a170", "a171", "a172", "a173", "a162", "a174", "a175", "a176", "a177", "a178", "a179", "a193", "a180", "a199", "a181", "a200", "a182", "", "a201", "a183", "a184", "a197", "a185", "a194", "a198", "a186", "a195", "a187", "a188", "a189", "a190", "a191", ""];
function getEncoding(encodingName) {
  switch (encodingName) {
    case "WinAnsiEncoding":
      return WinAnsiEncoding;
    case "StandardEncoding":
      return StandardEncoding;
    case "MacRomanEncoding":
      return MacRomanEncoding;
    case "SymbolSetEncoding":
      return SymbolSetEncoding;
    case "ZapfDingbatsEncoding":
      return ZapfDingbatsEncoding;
    case "ExpertEncoding":
      return ExpertEncoding;
    case "MacExpertEncoding":
      return MacExpertEncoding;
    default:
      return null;
  }
}

;// ./src/core/cff_parser.js




const MAX_SUBR_NESTING = 10;
const CFFStandardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];
const NUM_STANDARD_CFF_STRINGS = 391;
const CharstringValidationData = [null, {
  id: "hstem",
  min: 2,
  stackClearing: true,
  stem: true
}, null, {
  id: "vstem",
  min: 2,
  stackClearing: true,
  stem: true
}, {
  id: "vmoveto",
  min: 1,
  stackClearing: true
}, {
  id: "rlineto",
  min: 2,
  resetStack: true
}, {
  id: "hlineto",
  min: 1,
  resetStack: true
}, {
  id: "vlineto",
  min: 1,
  resetStack: true
}, {
  id: "rrcurveto",
  min: 6,
  resetStack: true
}, null, {
  id: "callsubr",
  min: 1,
  undefStack: true
}, {
  id: "return",
  min: 0,
  undefStack: true
}, null, null, {
  id: "endchar",
  min: 0,
  stackClearing: true
}, null, null, null, {
  id: "hstemhm",
  min: 2,
  stackClearing: true,
  stem: true
}, {
  id: "hintmask",
  min: 0,
  stackClearing: true
}, {
  id: "cntrmask",
  min: 0,
  stackClearing: true
}, {
  id: "rmoveto",
  min: 2,
  stackClearing: true
}, {
  id: "hmoveto",
  min: 1,
  stackClearing: true
}, {
  id: "vstemhm",
  min: 2,
  stackClearing: true,
  stem: true
}, {
  id: "rcurveline",
  min: 8,
  resetStack: true
}, {
  id: "rlinecurve",
  min: 8,
  resetStack: true
}, {
  id: "vvcurveto",
  min: 4,
  resetStack: true
}, {
  id: "hhcurveto",
  min: 4,
  resetStack: true
}, null, {
  id: "callgsubr",
  min: 1,
  undefStack: true
}, {
  id: "vhcurveto",
  min: 4,
  resetStack: true
}, {
  id: "hvcurveto",
  min: 4,
  resetStack: true
}];
const CharstringValidationData12 = [null, null, null, {
  id: "and",
  min: 2,
  stackDelta: -1
}, {
  id: "or",
  min: 2,
  stackDelta: -1
}, {
  id: "not",
  min: 1,
  stackDelta: 0
}, null, null, null, {
  id: "abs",
  min: 1,
  stackDelta: 0
}, {
  id: "add",
  min: 2,
  stackDelta: -1,
  stackFn(stack, index) {
    stack[index - 2] = stack[index - 2] + stack[index - 1];
  }
}, {
  id: "sub",
  min: 2,
  stackDelta: -1,
  stackFn(stack, index) {
    stack[index - 2] = stack[index - 2] - stack[index - 1];
  }
}, {
  id: "div",
  min: 2,
  stackDelta: -1,
  stackFn(stack, index) {
    stack[index - 2] = stack[index - 2] / stack[index - 1];
  }
}, null, {
  id: "neg",
  min: 1,
  stackDelta: 0,
  stackFn(stack, index) {
    stack[index - 1] = -stack[index - 1];
  }
}, {
  id: "eq",
  min: 2,
  stackDelta: -1
}, null, null, {
  id: "drop",
  min: 1,
  stackDelta: -1
}, null, {
  id: "put",
  min: 2,
  stackDelta: -2
}, {
  id: "get",
  min: 1,
  stackDelta: 0
}, {
  id: "ifelse",
  min: 4,
  stackDelta: -3
}, {
  id: "random",
  min: 0,
  stackDelta: 1
}, {
  id: "mul",
  min: 2,
  stackDelta: -1,
  stackFn(stack, index) {
    stack[index - 2] = stack[index - 2] * stack[index - 1];
  }
}, null, {
  id: "sqrt",
  min: 1,
  stackDelta: 0
}, {
  id: "dup",
  min: 1,
  stackDelta: 1
}, {
  id: "exch",
  min: 2,
  stackDelta: 0
}, {
  id: "index",
  min: 2,
  stackDelta: 0
}, {
  id: "roll",
  min: 3,
  stackDelta: -2
}, null, null, null, {
  id: "hflex",
  min: 7,
  resetStack: true
}, {
  id: "flex",
  min: 13,
  resetStack: true
}, {
  id: "hflex1",
  min: 9,
  resetStack: true
}, {
  id: "flex1",
  min: 11,
  resetStack: true
}];
class CFFParser {
  constructor(file, properties, seacAnalysisEnabled) {
    this.bytes = file.getBytes();
    this.properties = properties;
    this.seacAnalysisEnabled = !!seacAnalysisEnabled;
  }
  parse() {
    const properties = this.properties;
    const cff = new CFF();
    this.cff = cff;
    const header = this.parseHeader();
    const nameIndex = this.parseIndex(header.endPos);
    const topDictIndex = this.parseIndex(nameIndex.endPos);
    const stringIndex = this.parseIndex(topDictIndex.endPos);
    const globalSubrIndex = this.parseIndex(stringIndex.endPos);
    const topDictParsed = this.parseDict(topDictIndex.obj.get(0));
    const topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);
    cff.header = header.obj;
    cff.names = this.parseNameIndex(nameIndex.obj);
    cff.strings = this.parseStringIndex(stringIndex.obj);
    cff.topDict = topDict;
    cff.globalSubrIndex = globalSubrIndex.obj;
    this.parsePrivateDict(cff.topDict);
    cff.isCIDFont = topDict.hasName("ROS");
    const charStringOffset = topDict.getByName("CharStrings");
    const charStringIndex = this.parseIndex(charStringOffset).obj;
    const fontMatrix = topDict.getByName("FontMatrix");
    if (fontMatrix) {
      properties.fontMatrix = fontMatrix;
    }
    const fontBBox = topDict.getByName("FontBBox");
    if (fontBBox) {
      properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
      properties.descent = Math.min(fontBBox[1], fontBBox[3]);
      properties.ascentScaled = true;
    }
    let charset, encoding;
    if (cff.isCIDFont) {
      const fdArrayIndex = this.parseIndex(topDict.getByName("FDArray")).obj;
      for (let i = 0, ii = fdArrayIndex.count; i < ii; ++i) {
        const dictRaw = fdArrayIndex.get(i);
        const fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);
        this.parsePrivateDict(fontDict);
        cff.fdArray.push(fontDict);
      }
      encoding = null;
      charset = this.parseCharsets(topDict.getByName("charset"), charStringIndex.count, cff.strings, true);
      cff.fdSelect = this.parseFDSelect(topDict.getByName("FDSelect"), charStringIndex.count);
    } else {
      charset = this.parseCharsets(topDict.getByName("charset"), charStringIndex.count, cff.strings, false);
      encoding = this.parseEncoding(topDict.getByName("Encoding"), properties, cff.strings, charset.charset);
    }
    cff.charset = charset;
    cff.encoding = encoding;
    const charStringsAndSeacs = this.parseCharStrings({
      charStrings: charStringIndex,
      localSubrIndex: topDict.privateDict.subrsIndex,
      globalSubrIndex: globalSubrIndex.obj,
      fdSelect: cff.fdSelect,
      fdArray: cff.fdArray,
      privateDict: topDict.privateDict
    });
    cff.charStrings = charStringsAndSeacs.charStrings;
    cff.seacs = charStringsAndSeacs.seacs;
    cff.widths = charStringsAndSeacs.widths;
    return cff;
  }
  parseHeader() {
    let bytes = this.bytes;
    const bytesLength = bytes.length;
    let offset = 0;
    while (offset < bytesLength && bytes[offset] !== 1) {
      ++offset;
    }
    if (offset >= bytesLength) {
      throw new FormatError("Invalid CFF header");
    }
    if (offset !== 0) {
      info("cff data is shifted");
      bytes = bytes.subarray(offset);
      this.bytes = bytes;
    }
    const major = bytes[0];
    const minor = bytes[1];
    const hdrSize = bytes[2];
    const offSize = bytes[3];
    const header = new CFFHeader(major, minor, hdrSize, offSize);
    return {
      obj: header,
      endPos: hdrSize
    };
  }
  parseDict(dict) {
    let pos = 0;
    function parseOperand() {
      let value = dict[pos++];
      if (value === 30) {
        return parseFloatOperand();
      } else if (value === 28) {
        value = readInt16(dict, pos);
        pos += 2;
        return value;
      } else if (value === 29) {
        value = dict[pos++];
        value = value << 8 | dict[pos++];
        value = value << 8 | dict[pos++];
        value = value << 8 | dict[pos++];
        return value;
      } else if (value >= 32 && value <= 246) {
        return value - 139;
      } else if (value >= 247 && value <= 250) {
        return (value - 247) * 256 + dict[pos++] + 108;
      } else if (value >= 251 && value <= 254) {
        return -((value - 251) * 256) - dict[pos++] - 108;
      }
      warn('CFFParser_parseDict: "' + value + '" is a reserved command.');
      return NaN;
    }
    function parseFloatOperand() {
      let str = "";
      const eof = 15;
      const lookup = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];
      const length = dict.length;
      while (pos < length) {
        const b = dict[pos++];
        const b1 = b >> 4;
        const b2 = b & 15;
        if (b1 === eof) {
          break;
        }
        str += lookup[b1];
        if (b2 === eof) {
          break;
        }
        str += lookup[b2];
      }
      return parseFloat(str);
    }
    let operands = [];
    const entries = [];
    pos = 0;
    const end = dict.length;
    while (pos < end) {
      let b = dict[pos];
      if (b <= 21) {
        if (b === 12) {
          b = b << 8 | dict[++pos];
        }
        entries.push([b, operands]);
        operands = [];
        ++pos;
      } else {
        operands.push(parseOperand());
      }
    }
    return entries;
  }
  parseIndex(pos) {
    const cffIndex = new CFFIndex();
    const bytes = this.bytes;
    const count = bytes[pos++] << 8 | bytes[pos++];
    const offsets = [];
    let end = pos;
    let i, ii;
    if (count !== 0) {
      const offsetSize = bytes[pos++];
      const startPos = pos + (count + 1) * offsetSize - 1;
      for (i = 0, ii = count + 1; i < ii; ++i) {
        let offset = 0;
        for (let j = 0; j < offsetSize; ++j) {
          offset <<= 8;
          offset += bytes[pos++];
        }
        offsets.push(startPos + offset);
      }
      end = offsets[count];
    }
    for (i = 0, ii = offsets.length - 1; i < ii; ++i) {
      const offsetStart = offsets[i];
      const offsetEnd = offsets[i + 1];
      cffIndex.add(bytes.subarray(offsetStart, offsetEnd));
    }
    return {
      obj: cffIndex,
      endPos: end
    };
  }
  parseNameIndex(index) {
    const names = [];
    for (let i = 0, ii = index.count; i < ii; ++i) {
      const name = index.get(i);
      names.push(bytesToString(name));
    }
    return names;
  }
  parseStringIndex(index) {
    const strings = new CFFStrings();
    for (let i = 0, ii = index.count; i < ii; ++i) {
      const data = index.get(i);
      strings.add(bytesToString(data));
    }
    return strings;
  }
  createDict(Type, dict, strings) {
    const cffDict = new Type(strings);
    for (const [key, value] of dict) {
      cffDict.setByKey(key, value);
    }
    return cffDict;
  }
  parseCharString(state, data, localSubrIndex, globalSubrIndex) {
    if (!data || state.callDepth > MAX_SUBR_NESTING) {
      return false;
    }
    let stackSize = state.stackSize;
    const stack = state.stack;
    let length = data.length;
    for (let j = 0; j < length;) {
      const value = data[j++];
      let validationCommand = null;
      if (value === 12) {
        const q = data[j++];
        if (q === 0) {
          data[j - 2] = 139;
          data[j - 1] = 22;
          stackSize = 0;
        } else {
          validationCommand = CharstringValidationData12[q];
        }
      } else if (value === 28) {
        stack[stackSize] = readInt16(data, j);
        j += 2;
        stackSize++;
      } else if (value === 14) {
        if (stackSize >= 4) {
          stackSize -= 4;
          if (this.seacAnalysisEnabled) {
            state.seac = stack.slice(stackSize, stackSize + 4);
            return false;
          }
        }
        validationCommand = CharstringValidationData[value];
      } else if (value >= 32 && value <= 246) {
        stack[stackSize] = value - 139;
        stackSize++;
      } else if (value >= 247 && value <= 254) {
        stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;
        j++;
        stackSize++;
      } else if (value === 255) {
        stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;
        j += 4;
        stackSize++;
      } else if (value === 19 || value === 20) {
        state.hints += stackSize >> 1;
        if (state.hints === 0) {
          data.copyWithin(j - 1, j, -1);
          j -= 1;
          length -= 1;
          continue;
        }
        j += state.hints + 7 >> 3;
        stackSize %= 2;
        validationCommand = CharstringValidationData[value];
      } else if (value === 10 || value === 29) {
        const subrsIndex = value === 10 ? localSubrIndex : globalSubrIndex;
        if (!subrsIndex) {
          validationCommand = CharstringValidationData[value];
          warn("Missing subrsIndex for " + validationCommand.id);
          return false;
        }
        let bias = 32768;
        if (subrsIndex.count < 1240) {
          bias = 107;
        } else if (subrsIndex.count < 33900) {
          bias = 1131;
        }
        const subrNumber = stack[--stackSize] + bias;
        if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {
          validationCommand = CharstringValidationData[value];
          warn("Out of bounds subrIndex for " + validationCommand.id);
          return false;
        }
        state.stackSize = stackSize;
        state.callDepth++;
        const valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);
        if (!valid) {
          return false;
        }
        state.callDepth--;
        stackSize = state.stackSize;
        continue;
      } else if (value === 11) {
        state.stackSize = stackSize;
        return true;
      } else if (value === 0 && j === data.length) {
        data[j - 1] = 14;
        validationCommand = CharstringValidationData[14];
      } else if (value === 9) {
        data.copyWithin(j - 1, j, -1);
        j -= 1;
        length -= 1;
        continue;
      } else {
        validationCommand = CharstringValidationData[value];
      }
      if (validationCommand) {
        if (validationCommand.stem) {
          state.hints += stackSize >> 1;
          if (value === 3 || value === 23) {
            state.hasVStems = true;
          } else if (state.hasVStems && (value === 1 || value === 18)) {
            warn("CFF stem hints are in wrong order");
            data[j - 1] = value === 1 ? 3 : 23;
          }
        }
        if ("min" in validationCommand) {
          if (!state.undefStack && stackSize < validationCommand.min) {
            warn("Not enough parameters for " + validationCommand.id + "; actual: " + stackSize + ", expected: " + validationCommand.min);
            if (stackSize === 0) {
              data[j - 1] = 14;
              return true;
            }
            return false;
          }
        }
        if (state.firstStackClearing && validationCommand.stackClearing) {
          state.firstStackClearing = false;
          stackSize -= validationCommand.min;
          if (stackSize >= 2 && validationCommand.stem) {
            stackSize %= 2;
          } else if (stackSize > 1) {
            warn("Found too many parameters for stack-clearing command");
          }
          if (stackSize > 0) {
            state.width = stack[stackSize - 1];
          }
        }
        if ("stackDelta" in validationCommand) {
          if ("stackFn" in validationCommand) {
            validationCommand.stackFn(stack, stackSize);
          }
          stackSize += validationCommand.stackDelta;
        } else if (validationCommand.stackClearing) {
          stackSize = 0;
        } else if (validationCommand.resetStack) {
          stackSize = 0;
          state.undefStack = false;
        } else if (validationCommand.undefStack) {
          stackSize = 0;
          state.undefStack = true;
          state.firstStackClearing = false;
        }
      }
    }
    if (length < data.length) {
      data.fill(14, length);
    }
    state.stackSize = stackSize;
    return true;
  }
  parseCharStrings({
    charStrings,
    localSubrIndex,
    globalSubrIndex,
    fdSelect,
    fdArray,
    privateDict
  }) {
    const seacs = [];
    const widths = [];
    const count = charStrings.count;
    for (let i = 0; i < count; i++) {
      const charstring = charStrings.get(i);
      const state = {
        callDepth: 0,
        stackSize: 0,
        stack: [],
        undefStack: true,
        hints: 0,
        firstStackClearing: true,
        seac: null,
        width: null,
        hasVStems: false
      };
      let valid = true;
      let localSubrToUse = null;
      let privateDictToUse = privateDict;
      if (fdSelect && fdArray.length) {
        const fdIndex = fdSelect.getFDIndex(i);
        if (fdIndex === -1) {
          warn("Glyph index is not in fd select.");
          valid = false;
        }
        if (fdIndex >= fdArray.length) {
          warn("Invalid fd index for glyph index.");
          valid = false;
        }
        if (valid) {
          privateDictToUse = fdArray[fdIndex].privateDict;
          localSubrToUse = privateDictToUse.subrsIndex;
        }
      } else if (localSubrIndex) {
        localSubrToUse = localSubrIndex;
      }
      if (valid) {
        valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);
      }
      if (state.width !== null) {
        const nominalWidth = privateDictToUse.getByName("nominalWidthX");
        widths[i] = nominalWidth + state.width;
      } else {
        const defaultWidth = privateDictToUse.getByName("defaultWidthX");
        widths[i] = defaultWidth;
      }
      if (state.seac !== null) {
        seacs[i] = state.seac;
      }
      if (!valid) {
        charStrings.set(i, new Uint8Array([14]));
      }
    }
    return {
      charStrings,
      seacs,
      widths
    };
  }
  emptyPrivateDictionary(parentDict) {
    const privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);
    parentDict.setByKey(18, [0, 0]);
    parentDict.privateDict = privateDict;
  }
  parsePrivateDict(parentDict) {
    if (!parentDict.hasName("Private")) {
      this.emptyPrivateDictionary(parentDict);
      return;
    }
    const privateOffset = parentDict.getByName("Private");
    if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {
      parentDict.removeByName("Private");
      return;
    }
    const size = privateOffset[0];
    const offset = privateOffset[1];
    if (size === 0 || offset >= this.bytes.length) {
      this.emptyPrivateDictionary(parentDict);
      return;
    }
    const privateDictEnd = offset + size;
    const dictData = this.bytes.subarray(offset, privateDictEnd);
    const dict = this.parseDict(dictData);
    const privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);
    parentDict.privateDict = privateDict;
    if (privateDict.getByName("ExpansionFactor") === 0) {
      privateDict.setByName("ExpansionFactor", 0.06);
    }
    if (!privateDict.getByName("Subrs")) {
      return;
    }
    const subrsOffset = privateDict.getByName("Subrs");
    const relativeOffset = offset + subrsOffset;
    if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {
      this.emptyPrivateDictionary(parentDict);
      return;
    }
    const subrsIndex = this.parseIndex(relativeOffset);
    privateDict.subrsIndex = subrsIndex.obj;
  }
  parseCharsets(pos, length, strings, cid) {
    if (pos === 0) {
      return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, ISOAdobeCharset);
    } else if (pos === 1) {
      return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, ExpertCharset);
    } else if (pos === 2) {
      return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, ExpertSubsetCharset);
    }
    const bytes = this.bytes;
    const start = pos;
    const format = bytes[pos++];
    const charset = [cid ? 0 : ".notdef"];
    let id, count, i;
    length -= 1;
    switch (format) {
      case 0:
        for (i = 0; i < length; i++) {
          id = bytes[pos++] << 8 | bytes[pos++];
          charset.push(cid ? id : strings.get(id));
        }
        break;
      case 1:
        while (charset.length <= length) {
          id = bytes[pos++] << 8 | bytes[pos++];
          count = bytes[pos++];
          for (i = 0; i <= count; i++) {
            charset.push(cid ? id++ : strings.get(id++));
          }
        }
        break;
      case 2:
        while (charset.length <= length) {
          id = bytes[pos++] << 8 | bytes[pos++];
          count = bytes[pos++] << 8 | bytes[pos++];
          for (i = 0; i <= count; i++) {
            charset.push(cid ? id++ : strings.get(id++));
          }
        }
        break;
      default:
        throw new FormatError("Unknown charset format");
    }
    const end = pos;
    const raw = bytes.subarray(start, end);
    return new CFFCharset(false, format, charset, raw);
  }
  parseEncoding(pos, properties, strings, charset) {
    const encoding = Object.create(null);
    const bytes = this.bytes;
    let predefined = false;
    let format, i, ii;
    let raw = null;
    function readSupplement() {
      const supplementsCount = bytes[pos++];
      for (i = 0; i < supplementsCount; i++) {
        const code = bytes[pos++];
        const sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);
        encoding[code] = charset.indexOf(strings.get(sid));
      }
    }
    if (pos === 0 || pos === 1) {
      predefined = true;
      format = pos;
      const baseEncoding = pos ? ExpertEncoding : StandardEncoding;
      for (i = 0, ii = charset.length; i < ii; i++) {
        const index = baseEncoding.indexOf(charset[i]);
        if (index !== -1) {
          encoding[index] = i;
        }
      }
    } else {
      const dataStart = pos;
      format = bytes[pos++];
      switch (format & 0x7f) {
        case 0:
          const glyphsCount = bytes[pos++];
          for (i = 1; i <= glyphsCount; i++) {
            encoding[bytes[pos++]] = i;
          }
          break;
        case 1:
          const rangesCount = bytes[pos++];
          let gid = 1;
          for (i = 0; i < rangesCount; i++) {
            const start = bytes[pos++];
            const left = bytes[pos++];
            for (let j = start; j <= start + left; j++) {
              encoding[j] = gid++;
            }
          }
          break;
        default:
          throw new FormatError(\`Unknown encoding format: \${format} in CFF\`);
      }
      const dataEnd = pos;
      if (format & 0x80) {
        bytes[dataStart] &= 0x7f;
        readSupplement();
      }
      raw = bytes.subarray(dataStart, dataEnd);
    }
    format &= 0x7f;
    return new CFFEncoding(predefined, format, encoding, raw);
  }
  parseFDSelect(pos, length) {
    const bytes = this.bytes;
    const format = bytes[pos++];
    const fdSelect = [];
    let i;
    switch (format) {
      case 0:
        for (i = 0; i < length; ++i) {
          const id = bytes[pos++];
          fdSelect.push(id);
        }
        break;
      case 3:
        const rangesCount = bytes[pos++] << 8 | bytes[pos++];
        for (i = 0; i < rangesCount; ++i) {
          let first = bytes[pos++] << 8 | bytes[pos++];
          if (i === 0 && first !== 0) {
            warn("parseFDSelect: The first range must have a first GID of 0" + " -- trying to recover.");
            first = 0;
          }
          const fdIndex = bytes[pos++];
          const next = bytes[pos] << 8 | bytes[pos + 1];
          for (let j = first; j < next; ++j) {
            fdSelect.push(fdIndex);
          }
        }
        pos += 2;
        break;
      default:
        throw new FormatError(\`parseFDSelect: Unknown format "\${format}".\`);
    }
    if (fdSelect.length !== length) {
      throw new FormatError("parseFDSelect: Invalid font data.");
    }
    return new CFFFDSelect(format, fdSelect);
  }
}
class CFF {
  constructor() {
    this.header = null;
    this.names = [];
    this.topDict = null;
    this.strings = new CFFStrings();
    this.globalSubrIndex = null;
    this.encoding = null;
    this.charset = null;
    this.charStrings = null;
    this.fdArray = [];
    this.fdSelect = null;
    this.isCIDFont = false;
  }
  duplicateFirstGlyph() {
    if (this.charStrings.count >= 65535) {
      warn("Not enough space in charstrings to duplicate first glyph.");
      return;
    }
    const glyphZero = this.charStrings.get(0);
    this.charStrings.add(glyphZero);
    if (this.isCIDFont) {
      this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);
    }
  }
  hasGlyphId(id) {
    if (id < 0 || id >= this.charStrings.count) {
      return false;
    }
    const glyph = this.charStrings.get(id);
    return glyph.length > 0;
  }
}
class CFFHeader {
  constructor(major, minor, hdrSize, offSize) {
    this.major = major;
    this.minor = minor;
    this.hdrSize = hdrSize;
    this.offSize = offSize;
  }
}
class CFFStrings {
  constructor() {
    this.strings = [];
  }
  get(index) {
    if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {
      return CFFStandardStrings[index];
    }
    if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {
      return this.strings[index - NUM_STANDARD_CFF_STRINGS];
    }
    return CFFStandardStrings[0];
  }
  getSID(str) {
    let index = CFFStandardStrings.indexOf(str);
    if (index !== -1) {
      return index;
    }
    index = this.strings.indexOf(str);
    if (index !== -1) {
      return index + NUM_STANDARD_CFF_STRINGS;
    }
    return -1;
  }
  add(value) {
    this.strings.push(value);
  }
  get count() {
    return this.strings.length;
  }
}
class CFFIndex {
  constructor() {
    this.objects = [];
    this.length = 0;
  }
  add(data) {
    this.length += data.length;
    this.objects.push(data);
  }
  set(index, data) {
    this.length += data.length - this.objects[index].length;
    this.objects[index] = data;
  }
  get(index) {
    return this.objects[index];
  }
  get count() {
    return this.objects.length;
  }
}
class CFFDict {
  constructor(tables, strings) {
    this.keyToNameMap = tables.keyToNameMap;
    this.nameToKeyMap = tables.nameToKeyMap;
    this.defaults = tables.defaults;
    this.types = tables.types;
    this.opcodes = tables.opcodes;
    this.order = tables.order;
    this.strings = strings;
    this.values = Object.create(null);
  }
  setByKey(key, value) {
    if (!(key in this.keyToNameMap)) {
      return false;
    }
    if (value.length === 0) {
      return true;
    }
    for (const val of value) {
      if (isNaN(val)) {
        warn(\`Invalid CFFDict value: "\${value}" for key "\${key}".\`);
        return true;
      }
    }
    const type = this.types[key];
    if (type === "num" || type === "sid" || type === "offset") {
      value = value[0];
    }
    this.values[key] = value;
    return true;
  }
  setByName(name, value) {
    if (!(name in this.nameToKeyMap)) {
      throw new FormatError(\`Invalid dictionary name "\${name}"\`);
    }
    this.values[this.nameToKeyMap[name]] = value;
  }
  hasName(name) {
    return this.nameToKeyMap[name] in this.values;
  }
  getByName(name) {
    if (!(name in this.nameToKeyMap)) {
      throw new FormatError(\`Invalid dictionary name \${name}"\`);
    }
    const key = this.nameToKeyMap[name];
    if (!(key in this.values)) {
      return this.defaults[key];
    }
    return this.values[key];
  }
  removeByName(name) {
    delete this.values[this.nameToKeyMap[name]];
  }
  static createTables(layout) {
    const tables = {
      keyToNameMap: {},
      nameToKeyMap: {},
      defaults: {},
      types: {},
      opcodes: {},
      order: []
    };
    for (const entry of layout) {
      const key = Array.isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];
      tables.keyToNameMap[key] = entry[1];
      tables.nameToKeyMap[entry[1]] = key;
      tables.types[key] = entry[2];
      tables.defaults[key] = entry[3];
      tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];
      tables.order.push(key);
    }
    return tables;
  }
}
const CFFTopDictLayout = [[[12, 30], "ROS", ["sid", "sid", "num"], null], [[12, 20], "SyntheticBase", "num", null], [0, "version", "sid", null], [1, "Notice", "sid", null], [[12, 0], "Copyright", "sid", null], [2, "FullName", "sid", null], [3, "FamilyName", "sid", null], [4, "Weight", "sid", null], [[12, 1], "isFixedPitch", "num", 0], [[12, 2], "ItalicAngle", "num", 0], [[12, 3], "UnderlinePosition", "num", -100], [[12, 4], "UnderlineThickness", "num", 50], [[12, 5], "PaintType", "num", 0], [[12, 6], "CharstringType", "num", 2], [[12, 7], "FontMatrix", ["num", "num", "num", "num", "num", "num"], [0.001, 0, 0, 0.001, 0, 0]], [13, "UniqueID", "num", null], [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]], [[12, 8], "StrokeWidth", "num", 0], [14, "XUID", "array", null], [15, "charset", "offset", 0], [16, "Encoding", "offset", 0], [17, "CharStrings", "offset", 0], [18, "Private", ["offset", "offset"], null], [[12, 21], "PostScript", "sid", null], [[12, 22], "BaseFontName", "sid", null], [[12, 23], "BaseFontBlend", "delta", null], [[12, 31], "CIDFontVersion", "num", 0], [[12, 32], "CIDFontRevision", "num", 0], [[12, 33], "CIDFontType", "num", 0], [[12, 34], "CIDCount", "num", 8720], [[12, 35], "UIDBase", "num", null], [[12, 37], "FDSelect", "offset", null], [[12, 36], "FDArray", "offset", null], [[12, 38], "FontName", "sid", null]];
class CFFTopDict extends CFFDict {
  static get tables() {
    return shadow(this, "tables", this.createTables(CFFTopDictLayout));
  }
  constructor(strings) {
    super(CFFTopDict.tables, strings);
    this.privateDict = null;
  }
}
const CFFPrivateDictLayout = [[6, "BlueValues", "delta", null], [7, "OtherBlues", "delta", null], [8, "FamilyBlues", "delta", null], [9, "FamilyOtherBlues", "delta", null], [[12, 9], "BlueScale", "num", 0.039625], [[12, 10], "BlueShift", "num", 7], [[12, 11], "BlueFuzz", "num", 1], [10, "StdHW", "num", null], [11, "StdVW", "num", null], [[12, 12], "StemSnapH", "delta", null], [[12, 13], "StemSnapV", "delta", null], [[12, 14], "ForceBold", "num", 0], [[12, 17], "LanguageGroup", "num", 0], [[12, 18], "ExpansionFactor", "num", 0.06], [[12, 19], "initialRandomSeed", "num", 0], [20, "defaultWidthX", "num", 0], [21, "nominalWidthX", "num", 0], [19, "Subrs", "offset", null]];
class CFFPrivateDict extends CFFDict {
  static get tables() {
    return shadow(this, "tables", this.createTables(CFFPrivateDictLayout));
  }
  constructor(strings) {
    super(CFFPrivateDict.tables, strings);
    this.subrsIndex = null;
  }
}
const CFFCharsetPredefinedTypes = {
  ISO_ADOBE: 0,
  EXPERT: 1,
  EXPERT_SUBSET: 2
};
class CFFCharset {
  constructor(predefined, format, charset, raw) {
    this.predefined = predefined;
    this.format = format;
    this.charset = charset;
    this.raw = raw;
  }
}
class CFFEncoding {
  constructor(predefined, format, encoding, raw) {
    this.predefined = predefined;
    this.format = format;
    this.encoding = encoding;
    this.raw = raw;
  }
}
class CFFFDSelect {
  constructor(format, fdSelect) {
    this.format = format;
    this.fdSelect = fdSelect;
  }
  getFDIndex(glyphIndex) {
    if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {
      return -1;
    }
    return this.fdSelect[glyphIndex];
  }
}
class CFFOffsetTracker {
  constructor() {
    this.offsets = Object.create(null);
  }
  isTracking(key) {
    return key in this.offsets;
  }
  track(key, location) {
    if (key in this.offsets) {
      throw new FormatError(\`Already tracking location of \${key}\`);
    }
    this.offsets[key] = location;
  }
  offset(value) {
    for (const key in this.offsets) {
      this.offsets[key] += value;
    }
  }
  setEntryLocation(key, values, output) {
    if (!(key in this.offsets)) {
      throw new FormatError(\`Not tracking location of \${key}\`);
    }
    const data = output.data;
    const dataOffset = this.offsets[key];
    const size = 5;
    for (let i = 0, ii = values.length; i < ii; ++i) {
      const offset0 = i * size + dataOffset;
      const offset1 = offset0 + 1;
      const offset2 = offset0 + 2;
      const offset3 = offset0 + 3;
      const offset4 = offset0 + 4;
      if (data[offset0] !== 0x1d || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {
        throw new FormatError("writing to an offset that is not empty");
      }
      const value = values[i];
      data[offset0] = 0x1d;
      data[offset1] = value >> 24 & 0xff;
      data[offset2] = value >> 16 & 0xff;
      data[offset3] = value >> 8 & 0xff;
      data[offset4] = value & 0xff;
    }
  }
}
class CFFCompiler {
  constructor(cff) {
    this.cff = cff;
  }
  compile() {
    const cff = this.cff;
    const output = {
      data: [],
      length: 0,
      add(data) {
        try {
          this.data.push(...data);
        } catch {
          this.data = this.data.concat(data);
        }
        this.length = this.data.length;
      }
    };
    const header = this.compileHeader(cff.header);
    output.add(header);
    const nameIndex = this.compileNameIndex(cff.names);
    output.add(nameIndex);
    if (cff.isCIDFont) {
      if (cff.topDict.hasName("FontMatrix")) {
        const base = cff.topDict.getByName("FontMatrix");
        cff.topDict.removeByName("FontMatrix");
        for (const subDict of cff.fdArray) {
          let matrix = base.slice(0);
          if (subDict.hasName("FontMatrix")) {
            matrix = Util.transform(matrix, subDict.getByName("FontMatrix"));
          }
          subDict.setByName("FontMatrix", matrix);
        }
      }
    }
    const xuid = cff.topDict.getByName("XUID");
    if (xuid?.length > 16) {
      cff.topDict.removeByName("XUID");
    }
    cff.topDict.setByName("charset", 0);
    let compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);
    output.add(compiled.output);
    const topDictTracker = compiled.trackers[0];
    const stringIndex = this.compileStringIndex(cff.strings.strings);
    output.add(stringIndex);
    const globalSubrIndex = this.compileIndex(cff.globalSubrIndex);
    output.add(globalSubrIndex);
    if (cff.encoding && cff.topDict.hasName("Encoding")) {
      if (cff.encoding.predefined) {
        topDictTracker.setEntryLocation("Encoding", [cff.encoding.format], output);
      } else {
        const encoding = this.compileEncoding(cff.encoding);
        topDictTracker.setEntryLocation("Encoding", [output.length], output);
        output.add(encoding);
      }
    }
    const charset = this.compileCharset(cff.charset, cff.charStrings.count, cff.strings, cff.isCIDFont);
    topDictTracker.setEntryLocation("charset", [output.length], output);
    output.add(charset);
    const charStrings = this.compileCharStrings(cff.charStrings);
    topDictTracker.setEntryLocation("CharStrings", [output.length], output);
    output.add(charStrings);
    if (cff.isCIDFont) {
      topDictTracker.setEntryLocation("FDSelect", [output.length], output);
      const fdSelect = this.compileFDSelect(cff.fdSelect);
      output.add(fdSelect);
      compiled = this.compileTopDicts(cff.fdArray, output.length, true);
      topDictTracker.setEntryLocation("FDArray", [output.length], output);
      output.add(compiled.output);
      const fontDictTrackers = compiled.trackers;
      this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);
    }
    this.compilePrivateDicts([cff.topDict], [topDictTracker], output);
    output.add([0]);
    return output.data;
  }
  encodeNumber(value) {
    if (Number.isInteger(value)) {
      return this.encodeInteger(value);
    }
    return this.encodeFloat(value);
  }
  static get EncodeFloatRegExp() {
    return shadow(this, "EncodeFloatRegExp", /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/);
  }
  encodeFloat(num) {
    let value = num.toString();
    const m = CFFCompiler.EncodeFloatRegExp.exec(value);
    if (m) {
      const epsilon = parseFloat("1e" + ((m[2] ? +m[2] : 0) + m[1].length));
      value = (Math.round(num * epsilon) / epsilon).toString();
    }
    let nibbles = "";
    let i, ii;
    for (i = 0, ii = value.length; i < ii; ++i) {
      const a = value[i];
      if (a === "e") {
        nibbles += value[++i] === "-" ? "c" : "b";
      } else if (a === ".") {
        nibbles += "a";
      } else if (a === "-") {
        nibbles += "e";
      } else {
        nibbles += a;
      }
    }
    nibbles += nibbles.length & 1 ? "f" : "ff";
    const out = [30];
    for (i = 0, ii = nibbles.length; i < ii; i += 2) {
      out.push(parseInt(nibbles.substring(i, i + 2), 16));
    }
    return out;
  }
  encodeInteger(value) {
    let code;
    if (value >= -107 && value <= 107) {
      code = [value + 139];
    } else if (value >= 108 && value <= 1131) {
      value -= 108;
      code = [(value >> 8) + 247, value & 0xff];
    } else if (value >= -1131 && value <= -108) {
      value = -value - 108;
      code = [(value >> 8) + 251, value & 0xff];
    } else if (value >= -32768 && value <= 32767) {
      code = [0x1c, value >> 8 & 0xff, value & 0xff];
    } else {
      code = [0x1d, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff];
    }
    return code;
  }
  compileHeader(header) {
    return [header.major, header.minor, 4, header.offSize];
  }
  compileNameIndex(names) {
    const nameIndex = new CFFIndex();
    for (const name of names) {
      const length = Math.min(name.length, 127);
      let sanitizedName = new Array(length);
      for (let j = 0; j < length; j++) {
        let char = name[j];
        if (char < "!" || char > "~" || char === "[" || char === "]" || char === "(" || char === ")" || char === "{" || char === "}" || char === "<" || char === ">" || char === "/" || char === "%") {
          char = "_";
        }
        sanitizedName[j] = char;
      }
      sanitizedName = sanitizedName.join("");
      if (sanitizedName === "") {
        sanitizedName = "Bad_Font_Name";
      }
      nameIndex.add(stringToBytes(sanitizedName));
    }
    return this.compileIndex(nameIndex);
  }
  compileTopDicts(dicts, length, removeCidKeys) {
    const fontDictTrackers = [];
    let fdArrayIndex = new CFFIndex();
    for (const fontDict of dicts) {
      if (removeCidKeys) {
        fontDict.removeByName("CIDFontVersion");
        fontDict.removeByName("CIDFontRevision");
        fontDict.removeByName("CIDFontType");
        fontDict.removeByName("CIDCount");
        fontDict.removeByName("UIDBase");
      }
      const fontDictTracker = new CFFOffsetTracker();
      const fontDictData = this.compileDict(fontDict, fontDictTracker);
      fontDictTrackers.push(fontDictTracker);
      fdArrayIndex.add(fontDictData);
      fontDictTracker.offset(length);
    }
    fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);
    return {
      trackers: fontDictTrackers,
      output: fdArrayIndex
    };
  }
  compilePrivateDicts(dicts, trackers, output) {
    for (let i = 0, ii = dicts.length; i < ii; ++i) {
      const fontDict = dicts[i];
      const privateDict = fontDict.privateDict;
      if (!privateDict || !fontDict.hasName("Private")) {
        throw new FormatError("There must be a private dictionary.");
      }
      const privateDictTracker = new CFFOffsetTracker();
      const privateDictData = this.compileDict(privateDict, privateDictTracker);
      let outputLength = output.length;
      privateDictTracker.offset(outputLength);
      if (!privateDictData.length) {
        outputLength = 0;
      }
      trackers[i].setEntryLocation("Private", [privateDictData.length, outputLength], output);
      output.add(privateDictData);
      if (privateDict.subrsIndex && privateDict.hasName("Subrs")) {
        const subrs = this.compileIndex(privateDict.subrsIndex);
        privateDictTracker.setEntryLocation("Subrs", [privateDictData.length], output);
        output.add(subrs);
      }
    }
  }
  compileDict(dict, offsetTracker) {
    const out = [];
    for (const key of dict.order) {
      if (!(key in dict.values)) {
        continue;
      }
      let values = dict.values[key];
      let types = dict.types[key];
      if (!Array.isArray(types)) {
        types = [types];
      }
      if (!Array.isArray(values)) {
        values = [values];
      }
      if (values.length === 0) {
        continue;
      }
      for (let j = 0, jj = types.length; j < jj; ++j) {
        const type = types[j];
        const value = values[j];
        switch (type) {
          case "num":
          case "sid":
            out.push(...this.encodeNumber(value));
            break;
          case "offset":
            const name = dict.keyToNameMap[key];
            if (!offsetTracker.isTracking(name)) {
              offsetTracker.track(name, out.length);
            }
            out.push(0x1d, 0, 0, 0, 0);
            break;
          case "array":
          case "delta":
            out.push(...this.encodeNumber(value));
            for (let k = 1, kk = values.length; k < kk; ++k) {
              out.push(...this.encodeNumber(values[k]));
            }
            break;
          default:
            throw new FormatError(\`Unknown data type of \${type}\`);
        }
      }
      out.push(...dict.opcodes[key]);
    }
    return out;
  }
  compileStringIndex(strings) {
    const stringIndex = new CFFIndex();
    for (const string of strings) {
      stringIndex.add(stringToBytes(string));
    }
    return this.compileIndex(stringIndex);
  }
  compileCharStrings(charStrings) {
    const charStringsIndex = new CFFIndex();
    for (let i = 0; i < charStrings.count; i++) {
      const glyph = charStrings.get(i);
      if (glyph.length === 0) {
        charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));
        continue;
      }
      charStringsIndex.add(glyph);
    }
    return this.compileIndex(charStringsIndex);
  }
  compileCharset(charset, numGlyphs, strings, isCIDFont) {
    let out;
    const numGlyphsLessNotDef = numGlyphs - 1;
    if (isCIDFont) {
      out = new Uint8Array([2, 0, 0, numGlyphsLessNotDef >> 8 & 0xff, numGlyphsLessNotDef & 0xff]);
    } else {
      const length = 1 + numGlyphsLessNotDef * 2;
      out = new Uint8Array(length);
      out[0] = 0;
      let charsetIndex = 0;
      const numCharsets = charset.charset.length;
      let warned = false;
      for (let i = 1; i < out.length; i += 2) {
        let sid = 0;
        if (charsetIndex < numCharsets) {
          const name = charset.charset[charsetIndex++];
          sid = strings.getSID(name);
          if (sid === -1) {
            sid = 0;
            if (!warned) {
              warned = true;
              warn(\`Couldn't find \${name} in CFF strings\`);
            }
          }
        }
        out[i] = sid >> 8 & 0xff;
        out[i + 1] = sid & 0xff;
      }
    }
    return this.compileTypedArray(out);
  }
  compileEncoding(encoding) {
    return this.compileTypedArray(encoding.raw);
  }
  compileFDSelect(fdSelect) {
    const format = fdSelect.format;
    let out, i;
    switch (format) {
      case 0:
        out = new Uint8Array(1 + fdSelect.fdSelect.length);
        out[0] = format;
        for (i = 0; i < fdSelect.fdSelect.length; i++) {
          out[i + 1] = fdSelect.fdSelect[i];
        }
        break;
      case 3:
        const start = 0;
        let lastFD = fdSelect.fdSelect[0];
        const ranges = [format, 0, 0, start >> 8 & 0xff, start & 0xff, lastFD];
        for (i = 1; i < fdSelect.fdSelect.length; i++) {
          const currentFD = fdSelect.fdSelect[i];
          if (currentFD !== lastFD) {
            ranges.push(i >> 8 & 0xff, i & 0xff, currentFD);
            lastFD = currentFD;
          }
        }
        const numRanges = (ranges.length - 3) / 3;
        ranges[1] = numRanges >> 8 & 0xff;
        ranges[2] = numRanges & 0xff;
        ranges.push(i >> 8 & 0xff, i & 0xff);
        out = new Uint8Array(ranges);
        break;
    }
    return this.compileTypedArray(out);
  }
  compileTypedArray(data) {
    return Array.from(data);
  }
  compileIndex(index, trackers = []) {
    const objects = index.objects;
    const count = objects.length;
    if (count === 0) {
      return [0, 0];
    }
    const data = [count >> 8 & 0xff, count & 0xff];
    let lastOffset = 1,
      i;
    for (i = 0; i < count; ++i) {
      lastOffset += objects[i].length;
    }
    let offsetSize;
    if (lastOffset < 0x100) {
      offsetSize = 1;
    } else if (lastOffset < 0x10000) {
      offsetSize = 2;
    } else if (lastOffset < 0x1000000) {
      offsetSize = 3;
    } else {
      offsetSize = 4;
    }
    data.push(offsetSize);
    let relativeOffset = 1;
    for (i = 0; i < count + 1; i++) {
      if (offsetSize === 1) {
        data.push(relativeOffset & 0xff);
      } else if (offsetSize === 2) {
        data.push(relativeOffset >> 8 & 0xff, relativeOffset & 0xff);
      } else if (offsetSize === 3) {
        data.push(relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);
      } else {
        data.push(relativeOffset >>> 24 & 0xff, relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);
      }
      if (objects[i]) {
        relativeOffset += objects[i].length;
      }
    }
    for (i = 0; i < count; i++) {
      if (trackers[i]) {
        trackers[i].offset(data.length);
      }
      data.push(...objects[i]);
    }
    return data;
  }
}

;// ./src/core/glyphlist.js

const getGlyphsUnicode = getLookupTableFactory(function (t) {
  t.A = 0x0041;
  t.AE = 0x00c6;
  t.AEacute = 0x01fc;
  t.AEmacron = 0x01e2;
  t.AEsmall = 0xf7e6;
  t.Aacute = 0x00c1;
  t.Aacutesmall = 0xf7e1;
  t.Abreve = 0x0102;
  t.Abreveacute = 0x1eae;
  t.Abrevecyrillic = 0x04d0;
  t.Abrevedotbelow = 0x1eb6;
  t.Abrevegrave = 0x1eb0;
  t.Abrevehookabove = 0x1eb2;
  t.Abrevetilde = 0x1eb4;
  t.Acaron = 0x01cd;
  t.Acircle = 0x24b6;
  t.Acircumflex = 0x00c2;
  t.Acircumflexacute = 0x1ea4;
  t.Acircumflexdotbelow = 0x1eac;
  t.Acircumflexgrave = 0x1ea6;
  t.Acircumflexhookabove = 0x1ea8;
  t.Acircumflexsmall = 0xf7e2;
  t.Acircumflextilde = 0x1eaa;
  t.Acute = 0xf6c9;
  t.Acutesmall = 0xf7b4;
  t.Acyrillic = 0x0410;
  t.Adblgrave = 0x0200;
  t.Adieresis = 0x00c4;
  t.Adieresiscyrillic = 0x04d2;
  t.Adieresismacron = 0x01de;
  t.Adieresissmall = 0xf7e4;
  t.Adotbelow = 0x1ea0;
  t.Adotmacron = 0x01e0;
  t.Agrave = 0x00c0;
  t.Agravesmall = 0xf7e0;
  t.Ahookabove = 0x1ea2;
  t.Aiecyrillic = 0x04d4;
  t.Ainvertedbreve = 0x0202;
  t.Alpha = 0x0391;
  t.Alphatonos = 0x0386;
  t.Amacron = 0x0100;
  t.Amonospace = 0xff21;
  t.Aogonek = 0x0104;
  t.Aring = 0x00c5;
  t.Aringacute = 0x01fa;
  t.Aringbelow = 0x1e00;
  t.Aringsmall = 0xf7e5;
  t.Asmall = 0xf761;
  t.Atilde = 0x00c3;
  t.Atildesmall = 0xf7e3;
  t.Aybarmenian = 0x0531;
  t.B = 0x0042;
  t.Bcircle = 0x24b7;
  t.Bdotaccent = 0x1e02;
  t.Bdotbelow = 0x1e04;
  t.Becyrillic = 0x0411;
  t.Benarmenian = 0x0532;
  t.Beta = 0x0392;
  t.Bhook = 0x0181;
  t.Blinebelow = 0x1e06;
  t.Bmonospace = 0xff22;
  t.Brevesmall = 0xf6f4;
  t.Bsmall = 0xf762;
  t.Btopbar = 0x0182;
  t.C = 0x0043;
  t.Caarmenian = 0x053e;
  t.Cacute = 0x0106;
  t.Caron = 0xf6ca;
  t.Caronsmall = 0xf6f5;
  t.Ccaron = 0x010c;
  t.Ccedilla = 0x00c7;
  t.Ccedillaacute = 0x1e08;
  t.Ccedillasmall = 0xf7e7;
  t.Ccircle = 0x24b8;
  t.Ccircumflex = 0x0108;
  t.Cdot = 0x010a;
  t.Cdotaccent = 0x010a;
  t.Cedillasmall = 0xf7b8;
  t.Chaarmenian = 0x0549;
  t.Cheabkhasiancyrillic = 0x04bc;
  t.Checyrillic = 0x0427;
  t.Chedescenderabkhasiancyrillic = 0x04be;
  t.Chedescendercyrillic = 0x04b6;
  t.Chedieresiscyrillic = 0x04f4;
  t.Cheharmenian = 0x0543;
  t.Chekhakassiancyrillic = 0x04cb;
  t.Cheverticalstrokecyrillic = 0x04b8;
  t.Chi = 0x03a7;
  t.Chook = 0x0187;
  t.Circumflexsmall = 0xf6f6;
  t.Cmonospace = 0xff23;
  t.Coarmenian = 0x0551;
  t.Csmall = 0xf763;
  t.D = 0x0044;
  t.DZ = 0x01f1;
  t.DZcaron = 0x01c4;
  t.Daarmenian = 0x0534;
  t.Dafrican = 0x0189;
  t.Dcaron = 0x010e;
  t.Dcedilla = 0x1e10;
  t.Dcircle = 0x24b9;
  t.Dcircumflexbelow = 0x1e12;
  t.Dcroat = 0x0110;
  t.Ddotaccent = 0x1e0a;
  t.Ddotbelow = 0x1e0c;
  t.Decyrillic = 0x0414;
  t.Deicoptic = 0x03ee;
  t.Delta = 0x2206;
  t.Deltagreek = 0x0394;
  t.Dhook = 0x018a;
  t.Dieresis = 0xf6cb;
  t.DieresisAcute = 0xf6cc;
  t.DieresisGrave = 0xf6cd;
  t.Dieresissmall = 0xf7a8;
  t.Digammagreek = 0x03dc;
  t.Djecyrillic = 0x0402;
  t.Dlinebelow = 0x1e0e;
  t.Dmonospace = 0xff24;
  t.Dotaccentsmall = 0xf6f7;
  t.Dslash = 0x0110;
  t.Dsmall = 0xf764;
  t.Dtopbar = 0x018b;
  t.Dz = 0x01f2;
  t.Dzcaron = 0x01c5;
  t.Dzeabkhasiancyrillic = 0x04e0;
  t.Dzecyrillic = 0x0405;
  t.Dzhecyrillic = 0x040f;
  t.E = 0x0045;
  t.Eacute = 0x00c9;
  t.Eacutesmall = 0xf7e9;
  t.Ebreve = 0x0114;
  t.Ecaron = 0x011a;
  t.Ecedillabreve = 0x1e1c;
  t.Echarmenian = 0x0535;
  t.Ecircle = 0x24ba;
  t.Ecircumflex = 0x00ca;
  t.Ecircumflexacute = 0x1ebe;
  t.Ecircumflexbelow = 0x1e18;
  t.Ecircumflexdotbelow = 0x1ec6;
  t.Ecircumflexgrave = 0x1ec0;
  t.Ecircumflexhookabove = 0x1ec2;
  t.Ecircumflexsmall = 0xf7ea;
  t.Ecircumflextilde = 0x1ec4;
  t.Ecyrillic = 0x0404;
  t.Edblgrave = 0x0204;
  t.Edieresis = 0x00cb;
  t.Edieresissmall = 0xf7eb;
  t.Edot = 0x0116;
  t.Edotaccent = 0x0116;
  t.Edotbelow = 0x1eb8;
  t.Efcyrillic = 0x0424;
  t.Egrave = 0x00c8;
  t.Egravesmall = 0xf7e8;
  t.Eharmenian = 0x0537;
  t.Ehookabove = 0x1eba;
  t.Eightroman = 0x2167;
  t.Einvertedbreve = 0x0206;
  t.Eiotifiedcyrillic = 0x0464;
  t.Elcyrillic = 0x041b;
  t.Elevenroman = 0x216a;
  t.Emacron = 0x0112;
  t.Emacronacute = 0x1e16;
  t.Emacrongrave = 0x1e14;
  t.Emcyrillic = 0x041c;
  t.Emonospace = 0xff25;
  t.Encyrillic = 0x041d;
  t.Endescendercyrillic = 0x04a2;
  t.Eng = 0x014a;
  t.Enghecyrillic = 0x04a4;
  t.Enhookcyrillic = 0x04c7;
  t.Eogonek = 0x0118;
  t.Eopen = 0x0190;
  t.Epsilon = 0x0395;
  t.Epsilontonos = 0x0388;
  t.Ercyrillic = 0x0420;
  t.Ereversed = 0x018e;
  t.Ereversedcyrillic = 0x042d;
  t.Escyrillic = 0x0421;
  t.Esdescendercyrillic = 0x04aa;
  t.Esh = 0x01a9;
  t.Esmall = 0xf765;
  t.Eta = 0x0397;
  t.Etarmenian = 0x0538;
  t.Etatonos = 0x0389;
  t.Eth = 0x00d0;
  t.Ethsmall = 0xf7f0;
  t.Etilde = 0x1ebc;
  t.Etildebelow = 0x1e1a;
  t.Euro = 0x20ac;
  t.Ezh = 0x01b7;
  t.Ezhcaron = 0x01ee;
  t.Ezhreversed = 0x01b8;
  t.F = 0x0046;
  t.Fcircle = 0x24bb;
  t.Fdotaccent = 0x1e1e;
  t.Feharmenian = 0x0556;
  t.Feicoptic = 0x03e4;
  t.Fhook = 0x0191;
  t.Fitacyrillic = 0x0472;
  t.Fiveroman = 0x2164;
  t.Fmonospace = 0xff26;
  t.Fourroman = 0x2163;
  t.Fsmall = 0xf766;
  t.G = 0x0047;
  t.GBsquare = 0x3387;
  t.Gacute = 0x01f4;
  t.Gamma = 0x0393;
  t.Gammaafrican = 0x0194;
  t.Gangiacoptic = 0x03ea;
  t.Gbreve = 0x011e;
  t.Gcaron = 0x01e6;
  t.Gcedilla = 0x0122;
  t.Gcircle = 0x24bc;
  t.Gcircumflex = 0x011c;
  t.Gcommaaccent = 0x0122;
  t.Gdot = 0x0120;
  t.Gdotaccent = 0x0120;
  t.Gecyrillic = 0x0413;
  t.Ghadarmenian = 0x0542;
  t.Ghemiddlehookcyrillic = 0x0494;
  t.Ghestrokecyrillic = 0x0492;
  t.Gheupturncyrillic = 0x0490;
  t.Ghook = 0x0193;
  t.Gimarmenian = 0x0533;
  t.Gjecyrillic = 0x0403;
  t.Gmacron = 0x1e20;
  t.Gmonospace = 0xff27;
  t.Grave = 0xf6ce;
  t.Gravesmall = 0xf760;
  t.Gsmall = 0xf767;
  t.Gsmallhook = 0x029b;
  t.Gstroke = 0x01e4;
  t.H = 0x0048;
  t.H18533 = 0x25cf;
  t.H18543 = 0x25aa;
  t.H18551 = 0x25ab;
  t.H22073 = 0x25a1;
  t.HPsquare = 0x33cb;
  t.Haabkhasiancyrillic = 0x04a8;
  t.Hadescendercyrillic = 0x04b2;
  t.Hardsigncyrillic = 0x042a;
  t.Hbar = 0x0126;
  t.Hbrevebelow = 0x1e2a;
  t.Hcedilla = 0x1e28;
  t.Hcircle = 0x24bd;
  t.Hcircumflex = 0x0124;
  t.Hdieresis = 0x1e26;
  t.Hdotaccent = 0x1e22;
  t.Hdotbelow = 0x1e24;
  t.Hmonospace = 0xff28;
  t.Hoarmenian = 0x0540;
  t.Horicoptic = 0x03e8;
  t.Hsmall = 0xf768;
  t.Hungarumlaut = 0xf6cf;
  t.Hungarumlautsmall = 0xf6f8;
  t.Hzsquare = 0x3390;
  t.I = 0x0049;
  t.IAcyrillic = 0x042f;
  t.IJ = 0x0132;
  t.IUcyrillic = 0x042e;
  t.Iacute = 0x00cd;
  t.Iacutesmall = 0xf7ed;
  t.Ibreve = 0x012c;
  t.Icaron = 0x01cf;
  t.Icircle = 0x24be;
  t.Icircumflex = 0x00ce;
  t.Icircumflexsmall = 0xf7ee;
  t.Icyrillic = 0x0406;
  t.Idblgrave = 0x0208;
  t.Idieresis = 0x00cf;
  t.Idieresisacute = 0x1e2e;
  t.Idieresiscyrillic = 0x04e4;
  t.Idieresissmall = 0xf7ef;
  t.Idot = 0x0130;
  t.Idotaccent = 0x0130;
  t.Idotbelow = 0x1eca;
  t.Iebrevecyrillic = 0x04d6;
  t.Iecyrillic = 0x0415;
  t.Ifraktur = 0x2111;
  t.Igrave = 0x00cc;
  t.Igravesmall = 0xf7ec;
  t.Ihookabove = 0x1ec8;
  t.Iicyrillic = 0x0418;
  t.Iinvertedbreve = 0x020a;
  t.Iishortcyrillic = 0x0419;
  t.Imacron = 0x012a;
  t.Imacroncyrillic = 0x04e2;
  t.Imonospace = 0xff29;
  t.Iniarmenian = 0x053b;
  t.Iocyrillic = 0x0401;
  t.Iogonek = 0x012e;
  t.Iota = 0x0399;
  t.Iotaafrican = 0x0196;
  t.Iotadieresis = 0x03aa;
  t.Iotatonos = 0x038a;
  t.Ismall = 0xf769;
  t.Istroke = 0x0197;
  t.Itilde = 0x0128;
  t.Itildebelow = 0x1e2c;
  t.Izhitsacyrillic = 0x0474;
  t.Izhitsadblgravecyrillic = 0x0476;
  t.J = 0x004a;
  t.Jaarmenian = 0x0541;
  t.Jcircle = 0x24bf;
  t.Jcircumflex = 0x0134;
  t.Jecyrillic = 0x0408;
  t.Jheharmenian = 0x054b;
  t.Jmonospace = 0xff2a;
  t.Jsmall = 0xf76a;
  t.K = 0x004b;
  t.KBsquare = 0x3385;
  t.KKsquare = 0x33cd;
  t.Kabashkircyrillic = 0x04a0;
  t.Kacute = 0x1e30;
  t.Kacyrillic = 0x041a;
  t.Kadescendercyrillic = 0x049a;
  t.Kahookcyrillic = 0x04c3;
  t.Kappa = 0x039a;
  t.Kastrokecyrillic = 0x049e;
  t.Kaverticalstrokecyrillic = 0x049c;
  t.Kcaron = 0x01e8;
  t.Kcedilla = 0x0136;
  t.Kcircle = 0x24c0;
  t.Kcommaaccent = 0x0136;
  t.Kdotbelow = 0x1e32;
  t.Keharmenian = 0x0554;
  t.Kenarmenian = 0x053f;
  t.Khacyrillic = 0x0425;
  t.Kheicoptic = 0x03e6;
  t.Khook = 0x0198;
  t.Kjecyrillic = 0x040c;
  t.Klinebelow = 0x1e34;
  t.Kmonospace = 0xff2b;
  t.Koppacyrillic = 0x0480;
  t.Koppagreek = 0x03de;
  t.Ksicyrillic = 0x046e;
  t.Ksmall = 0xf76b;
  t.L = 0x004c;
  t.LJ = 0x01c7;
  t.LL = 0xf6bf;
  t.Lacute = 0x0139;
  t.Lambda = 0x039b;
  t.Lcaron = 0x013d;
  t.Lcedilla = 0x013b;
  t.Lcircle = 0x24c1;
  t.Lcircumflexbelow = 0x1e3c;
  t.Lcommaaccent = 0x013b;
  t.Ldot = 0x013f;
  t.Ldotaccent = 0x013f;
  t.Ldotbelow = 0x1e36;
  t.Ldotbelowmacron = 0x1e38;
  t.Liwnarmenian = 0x053c;
  t.Lj = 0x01c8;
  t.Ljecyrillic = 0x0409;
  t.Llinebelow = 0x1e3a;
  t.Lmonospace = 0xff2c;
  t.Lslash = 0x0141;
  t.Lslashsmall = 0xf6f9;
  t.Lsmall = 0xf76c;
  t.M = 0x004d;
  t.MBsquare = 0x3386;
  t.Macron = 0xf6d0;
  t.Macronsmall = 0xf7af;
  t.Macute = 0x1e3e;
  t.Mcircle = 0x24c2;
  t.Mdotaccent = 0x1e40;
  t.Mdotbelow = 0x1e42;
  t.Menarmenian = 0x0544;
  t.Mmonospace = 0xff2d;
  t.Msmall = 0xf76d;
  t.Mturned = 0x019c;
  t.Mu = 0x039c;
  t.N = 0x004e;
  t.NJ = 0x01ca;
  t.Nacute = 0x0143;
  t.Ncaron = 0x0147;
  t.Ncedilla = 0x0145;
  t.Ncircle = 0x24c3;
  t.Ncircumflexbelow = 0x1e4a;
  t.Ncommaaccent = 0x0145;
  t.Ndotaccent = 0x1e44;
  t.Ndotbelow = 0x1e46;
  t.Nhookleft = 0x019d;
  t.Nineroman = 0x2168;
  t.Nj = 0x01cb;
  t.Njecyrillic = 0x040a;
  t.Nlinebelow = 0x1e48;
  t.Nmonospace = 0xff2e;
  t.Nowarmenian = 0x0546;
  t.Nsmall = 0xf76e;
  t.Ntilde = 0x00d1;
  t.Ntildesmall = 0xf7f1;
  t.Nu = 0x039d;
  t.O = 0x004f;
  t.OE = 0x0152;
  t.OEsmall = 0xf6fa;
  t.Oacute = 0x00d3;
  t.Oacutesmall = 0xf7f3;
  t.Obarredcyrillic = 0x04e8;
  t.Obarreddieresiscyrillic = 0x04ea;
  t.Obreve = 0x014e;
  t.Ocaron = 0x01d1;
  t.Ocenteredtilde = 0x019f;
  t.Ocircle = 0x24c4;
  t.Ocircumflex = 0x00d4;
  t.Ocircumflexacute = 0x1ed0;
  t.Ocircumflexdotbelow = 0x1ed8;
  t.Ocircumflexgrave = 0x1ed2;
  t.Ocircumflexhookabove = 0x1ed4;
  t.Ocircumflexsmall = 0xf7f4;
  t.Ocircumflextilde = 0x1ed6;
  t.Ocyrillic = 0x041e;
  t.Odblacute = 0x0150;
  t.Odblgrave = 0x020c;
  t.Odieresis = 0x00d6;
  t.Odieresiscyrillic = 0x04e6;
  t.Odieresissmall = 0xf7f6;
  t.Odotbelow = 0x1ecc;
  t.Ogoneksmall = 0xf6fb;
  t.Ograve = 0x00d2;
  t.Ogravesmall = 0xf7f2;
  t.Oharmenian = 0x0555;
  t.Ohm = 0x2126;
  t.Ohookabove = 0x1ece;
  t.Ohorn = 0x01a0;
  t.Ohornacute = 0x1eda;
  t.Ohorndotbelow = 0x1ee2;
  t.Ohorngrave = 0x1edc;
  t.Ohornhookabove = 0x1ede;
  t.Ohorntilde = 0x1ee0;
  t.Ohungarumlaut = 0x0150;
  t.Oi = 0x01a2;
  t.Oinvertedbreve = 0x020e;
  t.Omacron = 0x014c;
  t.Omacronacute = 0x1e52;
  t.Omacrongrave = 0x1e50;
  t.Omega = 0x2126;
  t.Omegacyrillic = 0x0460;
  t.Omegagreek = 0x03a9;
  t.Omegaroundcyrillic = 0x047a;
  t.Omegatitlocyrillic = 0x047c;
  t.Omegatonos = 0x038f;
  t.Omicron = 0x039f;
  t.Omicrontonos = 0x038c;
  t.Omonospace = 0xff2f;
  t.Oneroman = 0x2160;
  t.Oogonek = 0x01ea;
  t.Oogonekmacron = 0x01ec;
  t.Oopen = 0x0186;
  t.Oslash = 0x00d8;
  t.Oslashacute = 0x01fe;
  t.Oslashsmall = 0xf7f8;
  t.Osmall = 0xf76f;
  t.Ostrokeacute = 0x01fe;
  t.Otcyrillic = 0x047e;
  t.Otilde = 0x00d5;
  t.Otildeacute = 0x1e4c;
  t.Otildedieresis = 0x1e4e;
  t.Otildesmall = 0xf7f5;
  t.P = 0x0050;
  t.Pacute = 0x1e54;
  t.Pcircle = 0x24c5;
  t.Pdotaccent = 0x1e56;
  t.Pecyrillic = 0x041f;
  t.Peharmenian = 0x054a;
  t.Pemiddlehookcyrillic = 0x04a6;
  t.Phi = 0x03a6;
  t.Phook = 0x01a4;
  t.Pi = 0x03a0;
  t.Piwrarmenian = 0x0553;
  t.Pmonospace = 0xff30;
  t.Psi = 0x03a8;
  t.Psicyrillic = 0x0470;
  t.Psmall = 0xf770;
  t.Q = 0x0051;
  t.Qcircle = 0x24c6;
  t.Qmonospace = 0xff31;
  t.Qsmall = 0xf771;
  t.R = 0x0052;
  t.Raarmenian = 0x054c;
  t.Racute = 0x0154;
  t.Rcaron = 0x0158;
  t.Rcedilla = 0x0156;
  t.Rcircle = 0x24c7;
  t.Rcommaaccent = 0x0156;
  t.Rdblgrave = 0x0210;
  t.Rdotaccent = 0x1e58;
  t.Rdotbelow = 0x1e5a;
  t.Rdotbelowmacron = 0x1e5c;
  t.Reharmenian = 0x0550;
  t.Rfraktur = 0x211c;
  t.Rho = 0x03a1;
  t.Ringsmall = 0xf6fc;
  t.Rinvertedbreve = 0x0212;
  t.Rlinebelow = 0x1e5e;
  t.Rmonospace = 0xff32;
  t.Rsmall = 0xf772;
  t.Rsmallinverted = 0x0281;
  t.Rsmallinvertedsuperior = 0x02b6;
  t.S = 0x0053;
  t.SF010000 = 0x250c;
  t.SF020000 = 0x2514;
  t.SF030000 = 0x2510;
  t.SF040000 = 0x2518;
  t.SF050000 = 0x253c;
  t.SF060000 = 0x252c;
  t.SF070000 = 0x2534;
  t.SF080000 = 0x251c;
  t.SF090000 = 0x2524;
  t.SF100000 = 0x2500;
  t.SF110000 = 0x2502;
  t.SF190000 = 0x2561;
  t.SF200000 = 0x2562;
  t.SF210000 = 0x2556;
  t.SF220000 = 0x2555;
  t.SF230000 = 0x2563;
  t.SF240000 = 0x2551;
  t.SF250000 = 0x2557;
  t.SF260000 = 0x255d;
  t.SF270000 = 0x255c;
  t.SF280000 = 0x255b;
  t.SF360000 = 0x255e;
  t.SF370000 = 0x255f;
  t.SF380000 = 0x255a;
  t.SF390000 = 0x2554;
  t.SF400000 = 0x2569;
  t.SF410000 = 0x2566;
  t.SF420000 = 0x2560;
  t.SF430000 = 0x2550;
  t.SF440000 = 0x256c;
  t.SF450000 = 0x2567;
  t.SF460000 = 0x2568;
  t.SF470000 = 0x2564;
  t.SF480000 = 0x2565;
  t.SF490000 = 0x2559;
  t.SF500000 = 0x2558;
  t.SF510000 = 0x2552;
  t.SF520000 = 0x2553;
  t.SF530000 = 0x256b;
  t.SF540000 = 0x256a;
  t.Sacute = 0x015a;
  t.Sacutedotaccent = 0x1e64;
  t.Sampigreek = 0x03e0;
  t.Scaron = 0x0160;
  t.Scarondotaccent = 0x1e66;
  t.Scaronsmall = 0xf6fd;
  t.Scedilla = 0x015e;
  t.Schwa = 0x018f;
  t.Schwacyrillic = 0x04d8;
  t.Schwadieresiscyrillic = 0x04da;
  t.Scircle = 0x24c8;
  t.Scircumflex = 0x015c;
  t.Scommaaccent = 0x0218;
  t.Sdotaccent = 0x1e60;
  t.Sdotbelow = 0x1e62;
  t.Sdotbelowdotaccent = 0x1e68;
  t.Seharmenian = 0x054d;
  t.Sevenroman = 0x2166;
  t.Shaarmenian = 0x0547;
  t.Shacyrillic = 0x0428;
  t.Shchacyrillic = 0x0429;
  t.Sheicoptic = 0x03e2;
  t.Shhacyrillic = 0x04ba;
  t.Shimacoptic = 0x03ec;
  t.Sigma = 0x03a3;
  t.Sixroman = 0x2165;
  t.Smonospace = 0xff33;
  t.Softsigncyrillic = 0x042c;
  t.Ssmall = 0xf773;
  t.Stigmagreek = 0x03da;
  t.T = 0x0054;
  t.Tau = 0x03a4;
  t.Tbar = 0x0166;
  t.Tcaron = 0x0164;
  t.Tcedilla = 0x0162;
  t.Tcircle = 0x24c9;
  t.Tcircumflexbelow = 0x1e70;
  t.Tcommaaccent = 0x0162;
  t.Tdotaccent = 0x1e6a;
  t.Tdotbelow = 0x1e6c;
  t.Tecyrillic = 0x0422;
  t.Tedescendercyrillic = 0x04ac;
  t.Tenroman = 0x2169;
  t.Tetsecyrillic = 0x04b4;
  t.Theta = 0x0398;
  t.Thook = 0x01ac;
  t.Thorn = 0x00de;
  t.Thornsmall = 0xf7fe;
  t.Threeroman = 0x2162;
  t.Tildesmall = 0xf6fe;
  t.Tiwnarmenian = 0x054f;
  t.Tlinebelow = 0x1e6e;
  t.Tmonospace = 0xff34;
  t.Toarmenian = 0x0539;
  t.Tonefive = 0x01bc;
  t.Tonesix = 0x0184;
  t.Tonetwo = 0x01a7;
  t.Tretroflexhook = 0x01ae;
  t.Tsecyrillic = 0x0426;
  t.Tshecyrillic = 0x040b;
  t.Tsmall = 0xf774;
  t.Twelveroman = 0x216b;
  t.Tworoman = 0x2161;
  t.U = 0x0055;
  t.Uacute = 0x00da;
  t.Uacutesmall = 0xf7fa;
  t.Ubreve = 0x016c;
  t.Ucaron = 0x01d3;
  t.Ucircle = 0x24ca;
  t.Ucircumflex = 0x00db;
  t.Ucircumflexbelow = 0x1e76;
  t.Ucircumflexsmall = 0xf7fb;
  t.Ucyrillic = 0x0423;
  t.Udblacute = 0x0170;
  t.Udblgrave = 0x0214;
  t.Udieresis = 0x00dc;
  t.Udieresisacute = 0x01d7;
  t.Udieresisbelow = 0x1e72;
  t.Udieresiscaron = 0x01d9;
  t.Udieresiscyrillic = 0x04f0;
  t.Udieresisgrave = 0x01db;
  t.Udieresismacron = 0x01d5;
  t.Udieresissmall = 0xf7fc;
  t.Udotbelow = 0x1ee4;
  t.Ugrave = 0x00d9;
  t.Ugravesmall = 0xf7f9;
  t.Uhookabove = 0x1ee6;
  t.Uhorn = 0x01af;
  t.Uhornacute = 0x1ee8;
  t.Uhorndotbelow = 0x1ef0;
  t.Uhorngrave = 0x1eea;
  t.Uhornhookabove = 0x1eec;
  t.Uhorntilde = 0x1eee;
  t.Uhungarumlaut = 0x0170;
  t.Uhungarumlautcyrillic = 0x04f2;
  t.Uinvertedbreve = 0x0216;
  t.Ukcyrillic = 0x0478;
  t.Umacron = 0x016a;
  t.Umacroncyrillic = 0x04ee;
  t.Umacrondieresis = 0x1e7a;
  t.Umonospace = 0xff35;
  t.Uogonek = 0x0172;
  t.Upsilon = 0x03a5;
  t.Upsilon1 = 0x03d2;
  t.Upsilonacutehooksymbolgreek = 0x03d3;
  t.Upsilonafrican = 0x01b1;
  t.Upsilondieresis = 0x03ab;
  t.Upsilondieresishooksymbolgreek = 0x03d4;
  t.Upsilonhooksymbol = 0x03d2;
  t.Upsilontonos = 0x038e;
  t.Uring = 0x016e;
  t.Ushortcyrillic = 0x040e;
  t.Usmall = 0xf775;
  t.Ustraightcyrillic = 0x04ae;
  t.Ustraightstrokecyrillic = 0x04b0;
  t.Utilde = 0x0168;
  t.Utildeacute = 0x1e78;
  t.Utildebelow = 0x1e74;
  t.V = 0x0056;
  t.Vcircle = 0x24cb;
  t.Vdotbelow = 0x1e7e;
  t.Vecyrillic = 0x0412;
  t.Vewarmenian = 0x054e;
  t.Vhook = 0x01b2;
  t.Vmonospace = 0xff36;
  t.Voarmenian = 0x0548;
  t.Vsmall = 0xf776;
  t.Vtilde = 0x1e7c;
  t.W = 0x0057;
  t.Wacute = 0x1e82;
  t.Wcircle = 0x24cc;
  t.Wcircumflex = 0x0174;
  t.Wdieresis = 0x1e84;
  t.Wdotaccent = 0x1e86;
  t.Wdotbelow = 0x1e88;
  t.Wgrave = 0x1e80;
  t.Wmonospace = 0xff37;
  t.Wsmall = 0xf777;
  t.X = 0x0058;
  t.Xcircle = 0x24cd;
  t.Xdieresis = 0x1e8c;
  t.Xdotaccent = 0x1e8a;
  t.Xeharmenian = 0x053d;
  t.Xi = 0x039e;
  t.Xmonospace = 0xff38;
  t.Xsmall = 0xf778;
  t.Y = 0x0059;
  t.Yacute = 0x00dd;
  t.Yacutesmall = 0xf7fd;
  t.Yatcyrillic = 0x0462;
  t.Ycircle = 0x24ce;
  t.Ycircumflex = 0x0176;
  t.Ydieresis = 0x0178;
  t.Ydieresissmall = 0xf7ff;
  t.Ydotaccent = 0x1e8e;
  t.Ydotbelow = 0x1ef4;
  t.Yericyrillic = 0x042b;
  t.Yerudieresiscyrillic = 0x04f8;
  t.Ygrave = 0x1ef2;
  t.Yhook = 0x01b3;
  t.Yhookabove = 0x1ef6;
  t.Yiarmenian = 0x0545;
  t.Yicyrillic = 0x0407;
  t.Yiwnarmenian = 0x0552;
  t.Ymonospace = 0xff39;
  t.Ysmall = 0xf779;
  t.Ytilde = 0x1ef8;
  t.Yusbigcyrillic = 0x046a;
  t.Yusbigiotifiedcyrillic = 0x046c;
  t.Yuslittlecyrillic = 0x0466;
  t.Yuslittleiotifiedcyrillic = 0x0468;
  t.Z = 0x005a;
  t.Zaarmenian = 0x0536;
  t.Zacute = 0x0179;
  t.Zcaron = 0x017d;
  t.Zcaronsmall = 0xf6ff;
  t.Zcircle = 0x24cf;
  t.Zcircumflex = 0x1e90;
  t.Zdot = 0x017b;
  t.Zdotaccent = 0x017b;
  t.Zdotbelow = 0x1e92;
  t.Zecyrillic = 0x0417;
  t.Zedescendercyrillic = 0x0498;
  t.Zedieresiscyrillic = 0x04de;
  t.Zeta = 0x0396;
  t.Zhearmenian = 0x053a;
  t.Zhebrevecyrillic = 0x04c1;
  t.Zhecyrillic = 0x0416;
  t.Zhedescendercyrillic = 0x0496;
  t.Zhedieresiscyrillic = 0x04dc;
  t.Zlinebelow = 0x1e94;
  t.Zmonospace = 0xff3a;
  t.Zsmall = 0xf77a;
  t.Zstroke = 0x01b5;
  t.a = 0x0061;
  t.aabengali = 0x0986;
  t.aacute = 0x00e1;
  t.aadeva = 0x0906;
  t.aagujarati = 0x0a86;
  t.aagurmukhi = 0x0a06;
  t.aamatragurmukhi = 0x0a3e;
  t.aarusquare = 0x3303;
  t.aavowelsignbengali = 0x09be;
  t.aavowelsigndeva = 0x093e;
  t.aavowelsigngujarati = 0x0abe;
  t.abbreviationmarkarmenian = 0x055f;
  t.abbreviationsigndeva = 0x0970;
  t.abengali = 0x0985;
  t.abopomofo = 0x311a;
  t.abreve = 0x0103;
  t.abreveacute = 0x1eaf;
  t.abrevecyrillic = 0x04d1;
  t.abrevedotbelow = 0x1eb7;
  t.abrevegrave = 0x1eb1;
  t.abrevehookabove = 0x1eb3;
  t.abrevetilde = 0x1eb5;
  t.acaron = 0x01ce;
  t.acircle = 0x24d0;
  t.acircumflex = 0x00e2;
  t.acircumflexacute = 0x1ea5;
  t.acircumflexdotbelow = 0x1ead;
  t.acircumflexgrave = 0x1ea7;
  t.acircumflexhookabove = 0x1ea9;
  t.acircumflextilde = 0x1eab;
  t.acute = 0x00b4;
  t.acutebelowcmb = 0x0317;
  t.acutecmb = 0x0301;
  t.acutecomb = 0x0301;
  t.acutedeva = 0x0954;
  t.acutelowmod = 0x02cf;
  t.acutetonecmb = 0x0341;
  t.acyrillic = 0x0430;
  t.adblgrave = 0x0201;
  t.addakgurmukhi = 0x0a71;
  t.adeva = 0x0905;
  t.adieresis = 0x00e4;
  t.adieresiscyrillic = 0x04d3;
  t.adieresismacron = 0x01df;
  t.adotbelow = 0x1ea1;
  t.adotmacron = 0x01e1;
  t.ae = 0x00e6;
  t.aeacute = 0x01fd;
  t.aekorean = 0x3150;
  t.aemacron = 0x01e3;
  t.afii00208 = 0x2015;
  t.afii08941 = 0x20a4;
  t.afii10017 = 0x0410;
  t.afii10018 = 0x0411;
  t.afii10019 = 0x0412;
  t.afii10020 = 0x0413;
  t.afii10021 = 0x0414;
  t.afii10022 = 0x0415;
  t.afii10023 = 0x0401;
  t.afii10024 = 0x0416;
  t.afii10025 = 0x0417;
  t.afii10026 = 0x0418;
  t.afii10027 = 0x0419;
  t.afii10028 = 0x041a;
  t.afii10029 = 0x041b;
  t.afii10030 = 0x041c;
  t.afii10031 = 0x041d;
  t.afii10032 = 0x041e;
  t.afii10033 = 0x041f;
  t.afii10034 = 0x0420;
  t.afii10035 = 0x0421;
  t.afii10036 = 0x0422;
  t.afii10037 = 0x0423;
  t.afii10038 = 0x0424;
  t.afii10039 = 0x0425;
  t.afii10040 = 0x0426;
  t.afii10041 = 0x0427;
  t.afii10042 = 0x0428;
  t.afii10043 = 0x0429;
  t.afii10044 = 0x042a;
  t.afii10045 = 0x042b;
  t.afii10046 = 0x042c;
  t.afii10047 = 0x042d;
  t.afii10048 = 0x042e;
  t.afii10049 = 0x042f;
  t.afii10050 = 0x0490;
  t.afii10051 = 0x0402;
  t.afii10052 = 0x0403;
  t.afii10053 = 0x0404;
  t.afii10054 = 0x0405;
  t.afii10055 = 0x0406;
  t.afii10056 = 0x0407;
  t.afii10057 = 0x0408;
  t.afii10058 = 0x0409;
  t.afii10059 = 0x040a;
  t.afii10060 = 0x040b;
  t.afii10061 = 0x040c;
  t.afii10062 = 0x040e;
  t.afii10063 = 0xf6c4;
  t.afii10064 = 0xf6c5;
  t.afii10065 = 0x0430;
  t.afii10066 = 0x0431;
  t.afii10067 = 0x0432;
  t.afii10068 = 0x0433;
  t.afii10069 = 0x0434;
  t.afii10070 = 0x0435;
  t.afii10071 = 0x0451;
  t.afii10072 = 0x0436;
  t.afii10073 = 0x0437;
  t.afii10074 = 0x0438;
  t.afii10075 = 0x0439;
  t.afii10076 = 0x043a;
  t.afii10077 = 0x043b;
  t.afii10078 = 0x043c;
  t.afii10079 = 0x043d;
  t.afii10080 = 0x043e;
  t.afii10081 = 0x043f;
  t.afii10082 = 0x0440;
  t.afii10083 = 0x0441;
  t.afii10084 = 0x0442;
  t.afii10085 = 0x0443;
  t.afii10086 = 0x0444;
  t.afii10087 = 0x0445;
  t.afii10088 = 0x0446;
  t.afii10089 = 0x0447;
  t.afii10090 = 0x0448;
  t.afii10091 = 0x0449;
  t.afii10092 = 0x044a;
  t.afii10093 = 0x044b;
  t.afii10094 = 0x044c;
  t.afii10095 = 0x044d;
  t.afii10096 = 0x044e;
  t.afii10097 = 0x044f;
  t.afii10098 = 0x0491;
  t.afii10099 = 0x0452;
  t.afii10100 = 0x0453;
  t.afii10101 = 0x0454;
  t.afii10102 = 0x0455;
  t.afii10103 = 0x0456;
  t.afii10104 = 0x0457;
  t.afii10105 = 0x0458;
  t.afii10106 = 0x0459;
  t.afii10107 = 0x045a;
  t.afii10108 = 0x045b;
  t.afii10109 = 0x045c;
  t.afii10110 = 0x045e;
  t.afii10145 = 0x040f;
  t.afii10146 = 0x0462;
  t.afii10147 = 0x0472;
  t.afii10148 = 0x0474;
  t.afii10192 = 0xf6c6;
  t.afii10193 = 0x045f;
  t.afii10194 = 0x0463;
  t.afii10195 = 0x0473;
  t.afii10196 = 0x0475;
  t.afii10831 = 0xf6c7;
  t.afii10832 = 0xf6c8;
  t.afii10846 = 0x04d9;
  t.afii299 = 0x200e;
  t.afii300 = 0x200f;
  t.afii301 = 0x200d;
  t.afii57381 = 0x066a;
  t.afii57388 = 0x060c;
  t.afii57392 = 0x0660;
  t.afii57393 = 0x0661;
  t.afii57394 = 0x0662;
  t.afii57395 = 0x0663;
  t.afii57396 = 0x0664;
  t.afii57397 = 0x0665;
  t.afii57398 = 0x0666;
  t.afii57399 = 0x0667;
  t.afii57400 = 0x0668;
  t.afii57401 = 0x0669;
  t.afii57403 = 0x061b;
  t.afii57407 = 0x061f;
  t.afii57409 = 0x0621;
  t.afii57410 = 0x0622;
  t.afii57411 = 0x0623;
  t.afii57412 = 0x0624;
  t.afii57413 = 0x0625;
  t.afii57414 = 0x0626;
  t.afii57415 = 0x0627;
  t.afii57416 = 0x0628;
  t.afii57417 = 0x0629;
  t.afii57418 = 0x062a;
  t.afii57419 = 0x062b;
  t.afii57420 = 0x062c;
  t.afii57421 = 0x062d;
  t.afii57422 = 0x062e;
  t.afii57423 = 0x062f;
  t.afii57424 = 0x0630;
  t.afii57425 = 0x0631;
  t.afii57426 = 0x0632;
  t.afii57427 = 0x0633;
  t.afii57428 = 0x0634;
  t.afii57429 = 0x0635;
  t.afii57430 = 0x0636;
  t.afii57431 = 0x0637;
  t.afii57432 = 0x0638;
  t.afii57433 = 0x0639;
  t.afii57434 = 0x063a;
  t.afii57440 = 0x0640;
  t.afii57441 = 0x0641;
  t.afii57442 = 0x0642;
  t.afii57443 = 0x0643;
  t.afii57444 = 0x0644;
  t.afii57445 = 0x0645;
  t.afii57446 = 0x0646;
  t.afii57448 = 0x0648;
  t.afii57449 = 0x0649;
  t.afii57450 = 0x064a;
  t.afii57451 = 0x064b;
  t.afii57452 = 0x064c;
  t.afii57453 = 0x064d;
  t.afii57454 = 0x064e;
  t.afii57455 = 0x064f;
  t.afii57456 = 0x0650;
  t.afii57457 = 0x0651;
  t.afii57458 = 0x0652;
  t.afii57470 = 0x0647;
  t.afii57505 = 0x06a4;
  t.afii57506 = 0x067e;
  t.afii57507 = 0x0686;
  t.afii57508 = 0x0698;
  t.afii57509 = 0x06af;
  t.afii57511 = 0x0679;
  t.afii57512 = 0x0688;
  t.afii57513 = 0x0691;
  t.afii57514 = 0x06ba;
  t.afii57519 = 0x06d2;
  t.afii57534 = 0x06d5;
  t.afii57636 = 0x20aa;
  t.afii57645 = 0x05be;
  t.afii57658 = 0x05c3;
  t.afii57664 = 0x05d0;
  t.afii57665 = 0x05d1;
  t.afii57666 = 0x05d2;
  t.afii57667 = 0x05d3;
  t.afii57668 = 0x05d4;
  t.afii57669 = 0x05d5;
  t.afii57670 = 0x05d6;
  t.afii57671 = 0x05d7;
  t.afii57672 = 0x05d8;
  t.afii57673 = 0x05d9;
  t.afii57674 = 0x05da;
  t.afii57675 = 0x05db;
  t.afii57676 = 0x05dc;
  t.afii57677 = 0x05dd;
  t.afii57678 = 0x05de;
  t.afii57679 = 0x05df;
  t.afii57680 = 0x05e0;
  t.afii57681 = 0x05e1;
  t.afii57682 = 0x05e2;
  t.afii57683 = 0x05e3;
  t.afii57684 = 0x05e4;
  t.afii57685 = 0x05e5;
  t.afii57686 = 0x05e6;
  t.afii57687 = 0x05e7;
  t.afii57688 = 0x05e8;
  t.afii57689 = 0x05e9;
  t.afii57690 = 0x05ea;
  t.afii57694 = 0xfb2a;
  t.afii57695 = 0xfb2b;
  t.afii57700 = 0xfb4b;
  t.afii57705 = 0xfb1f;
  t.afii57716 = 0x05f0;
  t.afii57717 = 0x05f1;
  t.afii57718 = 0x05f2;
  t.afii57723 = 0xfb35;
  t.afii57793 = 0x05b4;
  t.afii57794 = 0x05b5;
  t.afii57795 = 0x05b6;
  t.afii57796 = 0x05bb;
  t.afii57797 = 0x05b8;
  t.afii57798 = 0x05b7;
  t.afii57799 = 0x05b0;
  t.afii57800 = 0x05b2;
  t.afii57801 = 0x05b1;
  t.afii57802 = 0x05b3;
  t.afii57803 = 0x05c2;
  t.afii57804 = 0x05c1;
  t.afii57806 = 0x05b9;
  t.afii57807 = 0x05bc;
  t.afii57839 = 0x05bd;
  t.afii57841 = 0x05bf;
  t.afii57842 = 0x05c0;
  t.afii57929 = 0x02bc;
  t.afii61248 = 0x2105;
  t.afii61289 = 0x2113;
  t.afii61352 = 0x2116;
  t.afii61573 = 0x202c;
  t.afii61574 = 0x202d;
  t.afii61575 = 0x202e;
  t.afii61664 = 0x200c;
  t.afii63167 = 0x066d;
  t.afii64937 = 0x02bd;
  t.agrave = 0x00e0;
  t.agujarati = 0x0a85;
  t.agurmukhi = 0x0a05;
  t.ahiragana = 0x3042;
  t.ahookabove = 0x1ea3;
  t.aibengali = 0x0990;
  t.aibopomofo = 0x311e;
  t.aideva = 0x0910;
  t.aiecyrillic = 0x04d5;
  t.aigujarati = 0x0a90;
  t.aigurmukhi = 0x0a10;
  t.aimatragurmukhi = 0x0a48;
  t.ainarabic = 0x0639;
  t.ainfinalarabic = 0xfeca;
  t.aininitialarabic = 0xfecb;
  t.ainmedialarabic = 0xfecc;
  t.ainvertedbreve = 0x0203;
  t.aivowelsignbengali = 0x09c8;
  t.aivowelsigndeva = 0x0948;
  t.aivowelsigngujarati = 0x0ac8;
  t.akatakana = 0x30a2;
  t.akatakanahalfwidth = 0xff71;
  t.akorean = 0x314f;
  t.alef = 0x05d0;
  t.alefarabic = 0x0627;
  t.alefdageshhebrew = 0xfb30;
  t.aleffinalarabic = 0xfe8e;
  t.alefhamzaabovearabic = 0x0623;
  t.alefhamzaabovefinalarabic = 0xfe84;
  t.alefhamzabelowarabic = 0x0625;
  t.alefhamzabelowfinalarabic = 0xfe88;
  t.alefhebrew = 0x05d0;
  t.aleflamedhebrew = 0xfb4f;
  t.alefmaddaabovearabic = 0x0622;
  t.alefmaddaabovefinalarabic = 0xfe82;
  t.alefmaksuraarabic = 0x0649;
  t.alefmaksurafinalarabic = 0xfef0;
  t.alefmaksurainitialarabic = 0xfef3;
  t.alefmaksuramedialarabic = 0xfef4;
  t.alefpatahhebrew = 0xfb2e;
  t.alefqamatshebrew = 0xfb2f;
  t.aleph = 0x2135;
  t.allequal = 0x224c;
  t.alpha = 0x03b1;
  t.alphatonos = 0x03ac;
  t.amacron = 0x0101;
  t.amonospace = 0xff41;
  t.ampersand = 0x0026;
  t.ampersandmonospace = 0xff06;
  t.ampersandsmall = 0xf726;
  t.amsquare = 0x33c2;
  t.anbopomofo = 0x3122;
  t.angbopomofo = 0x3124;
  t.angbracketleft = 0x3008;
  t.angbracketright = 0x3009;
  t.angkhankhuthai = 0x0e5a;
  t.angle = 0x2220;
  t.anglebracketleft = 0x3008;
  t.anglebracketleftvertical = 0xfe3f;
  t.anglebracketright = 0x3009;
  t.anglebracketrightvertical = 0xfe40;
  t.angleleft = 0x2329;
  t.angleright = 0x232a;
  t.angstrom = 0x212b;
  t.anoteleia = 0x0387;
  t.anudattadeva = 0x0952;
  t.anusvarabengali = 0x0982;
  t.anusvaradeva = 0x0902;
  t.anusvaragujarati = 0x0a82;
  t.aogonek = 0x0105;
  t.apaatosquare = 0x3300;
  t.aparen = 0x249c;
  t.apostrophearmenian = 0x055a;
  t.apostrophemod = 0x02bc;
  t.apple = 0xf8ff;
  t.approaches = 0x2250;
  t.approxequal = 0x2248;
  t.approxequalorimage = 0x2252;
  t.approximatelyequal = 0x2245;
  t.araeaekorean = 0x318e;
  t.araeakorean = 0x318d;
  t.arc = 0x2312;
  t.arighthalfring = 0x1e9a;
  t.aring = 0x00e5;
  t.aringacute = 0x01fb;
  t.aringbelow = 0x1e01;
  t.arrowboth = 0x2194;
  t.arrowdashdown = 0x21e3;
  t.arrowdashleft = 0x21e0;
  t.arrowdashright = 0x21e2;
  t.arrowdashup = 0x21e1;
  t.arrowdblboth = 0x21d4;
  t.arrowdbldown = 0x21d3;
  t.arrowdblleft = 0x21d0;
  t.arrowdblright = 0x21d2;
  t.arrowdblup = 0x21d1;
  t.arrowdown = 0x2193;
  t.arrowdownleft = 0x2199;
  t.arrowdownright = 0x2198;
  t.arrowdownwhite = 0x21e9;
  t.arrowheaddownmod = 0x02c5;
  t.arrowheadleftmod = 0x02c2;
  t.arrowheadrightmod = 0x02c3;
  t.arrowheadupmod = 0x02c4;
  t.arrowhorizex = 0xf8e7;
  t.arrowleft = 0x2190;
  t.arrowleftdbl = 0x21d0;
  t.arrowleftdblstroke = 0x21cd;
  t.arrowleftoverright = 0x21c6;
  t.arrowleftwhite = 0x21e6;
  t.arrowright = 0x2192;
  t.arrowrightdblstroke = 0x21cf;
  t.arrowrightheavy = 0x279e;
  t.arrowrightoverleft = 0x21c4;
  t.arrowrightwhite = 0x21e8;
  t.arrowtableft = 0x21e4;
  t.arrowtabright = 0x21e5;
  t.arrowup = 0x2191;
  t.arrowupdn = 0x2195;
  t.arrowupdnbse = 0x21a8;
  t.arrowupdownbase = 0x21a8;
  t.arrowupleft = 0x2196;
  t.arrowupleftofdown = 0x21c5;
  t.arrowupright = 0x2197;
  t.arrowupwhite = 0x21e7;
  t.arrowvertex = 0xf8e6;
  t.asciicircum = 0x005e;
  t.asciicircummonospace = 0xff3e;
  t.asciitilde = 0x007e;
  t.asciitildemonospace = 0xff5e;
  t.ascript = 0x0251;
  t.ascriptturned = 0x0252;
  t.asmallhiragana = 0x3041;
  t.asmallkatakana = 0x30a1;
  t.asmallkatakanahalfwidth = 0xff67;
  t.asterisk = 0x002a;
  t.asteriskaltonearabic = 0x066d;
  t.asteriskarabic = 0x066d;
  t.asteriskmath = 0x2217;
  t.asteriskmonospace = 0xff0a;
  t.asterisksmall = 0xfe61;
  t.asterism = 0x2042;
  t.asuperior = 0xf6e9;
  t.asymptoticallyequal = 0x2243;
  t.at = 0x0040;
  t.atilde = 0x00e3;
  t.atmonospace = 0xff20;
  t.atsmall = 0xfe6b;
  t.aturned = 0x0250;
  t.aubengali = 0x0994;
  t.aubopomofo = 0x3120;
  t.audeva = 0x0914;
  t.augujarati = 0x0a94;
  t.augurmukhi = 0x0a14;
  t.aulengthmarkbengali = 0x09d7;
  t.aumatragurmukhi = 0x0a4c;
  t.auvowelsignbengali = 0x09cc;
  t.auvowelsigndeva = 0x094c;
  t.auvowelsigngujarati = 0x0acc;
  t.avagrahadeva = 0x093d;
  t.aybarmenian = 0x0561;
  t.ayin = 0x05e2;
  t.ayinaltonehebrew = 0xfb20;
  t.ayinhebrew = 0x05e2;
  t.b = 0x0062;
  t.babengali = 0x09ac;
  t.backslash = 0x005c;
  t.backslashmonospace = 0xff3c;
  t.badeva = 0x092c;
  t.bagujarati = 0x0aac;
  t.bagurmukhi = 0x0a2c;
  t.bahiragana = 0x3070;
  t.bahtthai = 0x0e3f;
  t.bakatakana = 0x30d0;
  t.bar = 0x007c;
  t.barmonospace = 0xff5c;
  t.bbopomofo = 0x3105;
  t.bcircle = 0x24d1;
  t.bdotaccent = 0x1e03;
  t.bdotbelow = 0x1e05;
  t.beamedsixteenthnotes = 0x266c;
  t.because = 0x2235;
  t.becyrillic = 0x0431;
  t.beharabic = 0x0628;
  t.behfinalarabic = 0xfe90;
  t.behinitialarabic = 0xfe91;
  t.behiragana = 0x3079;
  t.behmedialarabic = 0xfe92;
  t.behmeeminitialarabic = 0xfc9f;
  t.behmeemisolatedarabic = 0xfc08;
  t.behnoonfinalarabic = 0xfc6d;
  t.bekatakana = 0x30d9;
  t.benarmenian = 0x0562;
  t.bet = 0x05d1;
  t.beta = 0x03b2;
  t.betasymbolgreek = 0x03d0;
  t.betdagesh = 0xfb31;
  t.betdageshhebrew = 0xfb31;
  t.bethebrew = 0x05d1;
  t.betrafehebrew = 0xfb4c;
  t.bhabengali = 0x09ad;
  t.bhadeva = 0x092d;
  t.bhagujarati = 0x0aad;
  t.bhagurmukhi = 0x0a2d;
  t.bhook = 0x0253;
  t.bihiragana = 0x3073;
  t.bikatakana = 0x30d3;
  t.bilabialclick = 0x0298;
  t.bindigurmukhi = 0x0a02;
  t.birusquare = 0x3331;
  t.blackcircle = 0x25cf;
  t.blackdiamond = 0x25c6;
  t.blackdownpointingtriangle = 0x25bc;
  t.blackleftpointingpointer = 0x25c4;
  t.blackleftpointingtriangle = 0x25c0;
  t.blacklenticularbracketleft = 0x3010;
  t.blacklenticularbracketleftvertical = 0xfe3b;
  t.blacklenticularbracketright = 0x3011;
  t.blacklenticularbracketrightvertical = 0xfe3c;
  t.blacklowerlefttriangle = 0x25e3;
  t.blacklowerrighttriangle = 0x25e2;
  t.blackrectangle = 0x25ac;
  t.blackrightpointingpointer = 0x25ba;
  t.blackrightpointingtriangle = 0x25b6;
  t.blacksmallsquare = 0x25aa;
  t.blacksmilingface = 0x263b;
  t.blacksquare = 0x25a0;
  t.blackstar = 0x2605;
  t.blackupperlefttriangle = 0x25e4;
  t.blackupperrighttriangle = 0x25e5;
  t.blackuppointingsmalltriangle = 0x25b4;
  t.blackuppointingtriangle = 0x25b2;
  t.blank = 0x2423;
  t.blinebelow = 0x1e07;
  t.block = 0x2588;
  t.bmonospace = 0xff42;
  t.bobaimaithai = 0x0e1a;
  t.bohiragana = 0x307c;
  t.bokatakana = 0x30dc;
  t.bparen = 0x249d;
  t.bqsquare = 0x33c3;
  t.braceex = 0xf8f4;
  t.braceleft = 0x007b;
  t.braceleftbt = 0xf8f3;
  t.braceleftmid = 0xf8f2;
  t.braceleftmonospace = 0xff5b;
  t.braceleftsmall = 0xfe5b;
  t.bracelefttp = 0xf8f1;
  t.braceleftvertical = 0xfe37;
  t.braceright = 0x007d;
  t.bracerightbt = 0xf8fe;
  t.bracerightmid = 0xf8fd;
  t.bracerightmonospace = 0xff5d;
  t.bracerightsmall = 0xfe5c;
  t.bracerighttp = 0xf8fc;
  t.bracerightvertical = 0xfe38;
  t.bracketleft = 0x005b;
  t.bracketleftbt = 0xf8f0;
  t.bracketleftex = 0xf8ef;
  t.bracketleftmonospace = 0xff3b;
  t.bracketlefttp = 0xf8ee;
  t.bracketright = 0x005d;
  t.bracketrightbt = 0xf8fb;
  t.bracketrightex = 0xf8fa;
  t.bracketrightmonospace = 0xff3d;
  t.bracketrighttp = 0xf8f9;
  t.breve = 0x02d8;
  t.brevebelowcmb = 0x032e;
  t.brevecmb = 0x0306;
  t.breveinvertedbelowcmb = 0x032f;
  t.breveinvertedcmb = 0x0311;
  t.breveinverteddoublecmb = 0x0361;
  t.bridgebelowcmb = 0x032a;
  t.bridgeinvertedbelowcmb = 0x033a;
  t.brokenbar = 0x00a6;
  t.bstroke = 0x0180;
  t.bsuperior = 0xf6ea;
  t.btopbar = 0x0183;
  t.buhiragana = 0x3076;
  t.bukatakana = 0x30d6;
  t.bullet = 0x2022;
  t.bulletinverse = 0x25d8;
  t.bulletoperator = 0x2219;
  t.bullseye = 0x25ce;
  t.c = 0x0063;
  t.caarmenian = 0x056e;
  t.cabengali = 0x099a;
  t.cacute = 0x0107;
  t.cadeva = 0x091a;
  t.cagujarati = 0x0a9a;
  t.cagurmukhi = 0x0a1a;
  t.calsquare = 0x3388;
  t.candrabindubengali = 0x0981;
  t.candrabinducmb = 0x0310;
  t.candrabindudeva = 0x0901;
  t.candrabindugujarati = 0x0a81;
  t.capslock = 0x21ea;
  t.careof = 0x2105;
  t.caron = 0x02c7;
  t.caronbelowcmb = 0x032c;
  t.caroncmb = 0x030c;
  t.carriagereturn = 0x21b5;
  t.cbopomofo = 0x3118;
  t.ccaron = 0x010d;
  t.ccedilla = 0x00e7;
  t.ccedillaacute = 0x1e09;
  t.ccircle = 0x24d2;
  t.ccircumflex = 0x0109;
  t.ccurl = 0x0255;
  t.cdot = 0x010b;
  t.cdotaccent = 0x010b;
  t.cdsquare = 0x33c5;
  t.cedilla = 0x00b8;
  t.cedillacmb = 0x0327;
  t.cent = 0x00a2;
  t.centigrade = 0x2103;
  t.centinferior = 0xf6df;
  t.centmonospace = 0xffe0;
  t.centoldstyle = 0xf7a2;
  t.centsuperior = 0xf6e0;
  t.chaarmenian = 0x0579;
  t.chabengali = 0x099b;
  t.chadeva = 0x091b;
  t.chagujarati = 0x0a9b;
  t.chagurmukhi = 0x0a1b;
  t.chbopomofo = 0x3114;
  t.cheabkhasiancyrillic = 0x04bd;
  t.checkmark = 0x2713;
  t.checyrillic = 0x0447;
  t.chedescenderabkhasiancyrillic = 0x04bf;
  t.chedescendercyrillic = 0x04b7;
  t.chedieresiscyrillic = 0x04f5;
  t.cheharmenian = 0x0573;
  t.chekhakassiancyrillic = 0x04cc;
  t.cheverticalstrokecyrillic = 0x04b9;
  t.chi = 0x03c7;
  t.chieuchacirclekorean = 0x3277;
  t.chieuchaparenkorean = 0x3217;
  t.chieuchcirclekorean = 0x3269;
  t.chieuchkorean = 0x314a;
  t.chieuchparenkorean = 0x3209;
  t.chochangthai = 0x0e0a;
  t.chochanthai = 0x0e08;
  t.chochingthai = 0x0e09;
  t.chochoethai = 0x0e0c;
  t.chook = 0x0188;
  t.cieucacirclekorean = 0x3276;
  t.cieucaparenkorean = 0x3216;
  t.cieuccirclekorean = 0x3268;
  t.cieuckorean = 0x3148;
  t.cieucparenkorean = 0x3208;
  t.cieucuparenkorean = 0x321c;
  t.circle = 0x25cb;
  t.circlecopyrt = 0x00a9;
  t.circlemultiply = 0x2297;
  t.circleot = 0x2299;
  t.circleplus = 0x2295;
  t.circlepostalmark = 0x3036;
  t.circlewithlefthalfblack = 0x25d0;
  t.circlewithrighthalfblack = 0x25d1;
  t.circumflex = 0x02c6;
  t.circumflexbelowcmb = 0x032d;
  t.circumflexcmb = 0x0302;
  t.clear = 0x2327;
  t.clickalveolar = 0x01c2;
  t.clickdental = 0x01c0;
  t.clicklateral = 0x01c1;
  t.clickretroflex = 0x01c3;
  t.club = 0x2663;
  t.clubsuitblack = 0x2663;
  t.clubsuitwhite = 0x2667;
  t.cmcubedsquare = 0x33a4;
  t.cmonospace = 0xff43;
  t.cmsquaredsquare = 0x33a0;
  t.coarmenian = 0x0581;
  t.colon = 0x003a;
  t.colonmonetary = 0x20a1;
  t.colonmonospace = 0xff1a;
  t.colonsign = 0x20a1;
  t.colonsmall = 0xfe55;
  t.colontriangularhalfmod = 0x02d1;
  t.colontriangularmod = 0x02d0;
  t.comma = 0x002c;
  t.commaabovecmb = 0x0313;
  t.commaaboverightcmb = 0x0315;
  t.commaaccent = 0xf6c3;
  t.commaarabic = 0x060c;
  t.commaarmenian = 0x055d;
  t.commainferior = 0xf6e1;
  t.commamonospace = 0xff0c;
  t.commareversedabovecmb = 0x0314;
  t.commareversedmod = 0x02bd;
  t.commasmall = 0xfe50;
  t.commasuperior = 0xf6e2;
  t.commaturnedabovecmb = 0x0312;
  t.commaturnedmod = 0x02bb;
  t.compass = 0x263c;
  t.congruent = 0x2245;
  t.contourintegral = 0x222e;
  t.control = 0x2303;
  t.controlACK = 0x0006;
  t.controlBEL = 0x0007;
  t.controlBS = 0x0008;
  t.controlCAN = 0x0018;
  t.controlCR = 0x000d;
  t.controlDC1 = 0x0011;
  t.controlDC2 = 0x0012;
  t.controlDC3 = 0x0013;
  t.controlDC4 = 0x0014;
  t.controlDEL = 0x007f;
  t.controlDLE = 0x0010;
  t.controlEM = 0x0019;
  t.controlENQ = 0x0005;
  t.controlEOT = 0x0004;
  t.controlESC = 0x001b;
  t.controlETB = 0x0017;
  t.controlETX = 0x0003;
  t.controlFF = 0x000c;
  t.controlFS = 0x001c;
  t.controlGS = 0x001d;
  t.controlHT = 0x0009;
  t.controlLF = 0x000a;
  t.controlNAK = 0x0015;
  t.controlNULL = 0x0000;
  t.controlRS = 0x001e;
  t.controlSI = 0x000f;
  t.controlSO = 0x000e;
  t.controlSOT = 0x0002;
  t.controlSTX = 0x0001;
  t.controlSUB = 0x001a;
  t.controlSYN = 0x0016;
  t.controlUS = 0x001f;
  t.controlVT = 0x000b;
  t.copyright = 0x00a9;
  t.copyrightsans = 0xf8e9;
  t.copyrightserif = 0xf6d9;
  t.cornerbracketleft = 0x300c;
  t.cornerbracketlefthalfwidth = 0xff62;
  t.cornerbracketleftvertical = 0xfe41;
  t.cornerbracketright = 0x300d;
  t.cornerbracketrighthalfwidth = 0xff63;
  t.cornerbracketrightvertical = 0xfe42;
  t.corporationsquare = 0x337f;
  t.cosquare = 0x33c7;
  t.coverkgsquare = 0x33c6;
  t.cparen = 0x249e;
  t.cruzeiro = 0x20a2;
  t.cstretched = 0x0297;
  t.curlyand = 0x22cf;
  t.curlyor = 0x22ce;
  t.currency = 0x00a4;
  t.cyrBreve = 0xf6d1;
  t.cyrFlex = 0xf6d2;
  t.cyrbreve = 0xf6d4;
  t.cyrflex = 0xf6d5;
  t.d = 0x0064;
  t.daarmenian = 0x0564;
  t.dabengali = 0x09a6;
  t.dadarabic = 0x0636;
  t.dadeva = 0x0926;
  t.dadfinalarabic = 0xfebe;
  t.dadinitialarabic = 0xfebf;
  t.dadmedialarabic = 0xfec0;
  t.dagesh = 0x05bc;
  t.dageshhebrew = 0x05bc;
  t.dagger = 0x2020;
  t.daggerdbl = 0x2021;
  t.dagujarati = 0x0aa6;
  t.dagurmukhi = 0x0a26;
  t.dahiragana = 0x3060;
  t.dakatakana = 0x30c0;
  t.dalarabic = 0x062f;
  t.dalet = 0x05d3;
  t.daletdagesh = 0xfb33;
  t.daletdageshhebrew = 0xfb33;
  t.dalethebrew = 0x05d3;
  t.dalfinalarabic = 0xfeaa;
  t.dammaarabic = 0x064f;
  t.dammalowarabic = 0x064f;
  t.dammatanaltonearabic = 0x064c;
  t.dammatanarabic = 0x064c;
  t.danda = 0x0964;
  t.dargahebrew = 0x05a7;
  t.dargalefthebrew = 0x05a7;
  t.dasiapneumatacyrilliccmb = 0x0485;
  t.dblGrave = 0xf6d3;
  t.dblanglebracketleft = 0x300a;
  t.dblanglebracketleftvertical = 0xfe3d;
  t.dblanglebracketright = 0x300b;
  t.dblanglebracketrightvertical = 0xfe3e;
  t.dblarchinvertedbelowcmb = 0x032b;
  t.dblarrowleft = 0x21d4;
  t.dblarrowright = 0x21d2;
  t.dbldanda = 0x0965;
  t.dblgrave = 0xf6d6;
  t.dblgravecmb = 0x030f;
  t.dblintegral = 0x222c;
  t.dbllowline = 0x2017;
  t.dbllowlinecmb = 0x0333;
  t.dbloverlinecmb = 0x033f;
  t.dblprimemod = 0x02ba;
  t.dblverticalbar = 0x2016;
  t.dblverticallineabovecmb = 0x030e;
  t.dbopomofo = 0x3109;
  t.dbsquare = 0x33c8;
  t.dcaron = 0x010f;
  t.dcedilla = 0x1e11;
  t.dcircle = 0x24d3;
  t.dcircumflexbelow = 0x1e13;
  t.dcroat = 0x0111;
  t.ddabengali = 0x09a1;
  t.ddadeva = 0x0921;
  t.ddagujarati = 0x0aa1;
  t.ddagurmukhi = 0x0a21;
  t.ddalarabic = 0x0688;
  t.ddalfinalarabic = 0xfb89;
  t.dddhadeva = 0x095c;
  t.ddhabengali = 0x09a2;
  t.ddhadeva = 0x0922;
  t.ddhagujarati = 0x0aa2;
  t.ddhagurmukhi = 0x0a22;
  t.ddotaccent = 0x1e0b;
  t.ddotbelow = 0x1e0d;
  t.decimalseparatorarabic = 0x066b;
  t.decimalseparatorpersian = 0x066b;
  t.decyrillic = 0x0434;
  t.degree = 0x00b0;
  t.dehihebrew = 0x05ad;
  t.dehiragana = 0x3067;
  t.deicoptic = 0x03ef;
  t.dekatakana = 0x30c7;
  t.deleteleft = 0x232b;
  t.deleteright = 0x2326;
  t.delta = 0x03b4;
  t.deltaturned = 0x018d;
  t.denominatorminusonenumeratorbengali = 0x09f8;
  t.dezh = 0x02a4;
  t.dhabengali = 0x09a7;
  t.dhadeva = 0x0927;
  t.dhagujarati = 0x0aa7;
  t.dhagurmukhi = 0x0a27;
  t.dhook = 0x0257;
  t.dialytikatonos = 0x0385;
  t.dialytikatonoscmb = 0x0344;
  t.diamond = 0x2666;
  t.diamondsuitwhite = 0x2662;
  t.dieresis = 0x00a8;
  t.dieresisacute = 0xf6d7;
  t.dieresisbelowcmb = 0x0324;
  t.dieresiscmb = 0x0308;
  t.dieresisgrave = 0xf6d8;
  t.dieresistonos = 0x0385;
  t.dihiragana = 0x3062;
  t.dikatakana = 0x30c2;
  t.dittomark = 0x3003;
  t.divide = 0x00f7;
  t.divides = 0x2223;
  t.divisionslash = 0x2215;
  t.djecyrillic = 0x0452;
  t.dkshade = 0x2593;
  t.dlinebelow = 0x1e0f;
  t.dlsquare = 0x3397;
  t.dmacron = 0x0111;
  t.dmonospace = 0xff44;
  t.dnblock = 0x2584;
  t.dochadathai = 0x0e0e;
  t.dodekthai = 0x0e14;
  t.dohiragana = 0x3069;
  t.dokatakana = 0x30c9;
  t.dollar = 0x0024;
  t.dollarinferior = 0xf6e3;
  t.dollarmonospace = 0xff04;
  t.dollaroldstyle = 0xf724;
  t.dollarsmall = 0xfe69;
  t.dollarsuperior = 0xf6e4;
  t.dong = 0x20ab;
  t.dorusquare = 0x3326;
  t.dotaccent = 0x02d9;
  t.dotaccentcmb = 0x0307;
  t.dotbelowcmb = 0x0323;
  t.dotbelowcomb = 0x0323;
  t.dotkatakana = 0x30fb;
  t.dotlessi = 0x0131;
  t.dotlessj = 0xf6be;
  t.dotlessjstrokehook = 0x0284;
  t.dotmath = 0x22c5;
  t.dottedcircle = 0x25cc;
  t.doubleyodpatah = 0xfb1f;
  t.doubleyodpatahhebrew = 0xfb1f;
  t.downtackbelowcmb = 0x031e;
  t.downtackmod = 0x02d5;
  t.dparen = 0x249f;
  t.dsuperior = 0xf6eb;
  t.dtail = 0x0256;
  t.dtopbar = 0x018c;
  t.duhiragana = 0x3065;
  t.dukatakana = 0x30c5;
  t.dz = 0x01f3;
  t.dzaltone = 0x02a3;
  t.dzcaron = 0x01c6;
  t.dzcurl = 0x02a5;
  t.dzeabkhasiancyrillic = 0x04e1;
  t.dzecyrillic = 0x0455;
  t.dzhecyrillic = 0x045f;
  t.e = 0x0065;
  t.eacute = 0x00e9;
  t.earth = 0x2641;
  t.ebengali = 0x098f;
  t.ebopomofo = 0x311c;
  t.ebreve = 0x0115;
  t.ecandradeva = 0x090d;
  t.ecandragujarati = 0x0a8d;
  t.ecandravowelsigndeva = 0x0945;
  t.ecandravowelsigngujarati = 0x0ac5;
  t.ecaron = 0x011b;
  t.ecedillabreve = 0x1e1d;
  t.echarmenian = 0x0565;
  t.echyiwnarmenian = 0x0587;
  t.ecircle = 0x24d4;
  t.ecircumflex = 0x00ea;
  t.ecircumflexacute = 0x1ebf;
  t.ecircumflexbelow = 0x1e19;
  t.ecircumflexdotbelow = 0x1ec7;
  t.ecircumflexgrave = 0x1ec1;
  t.ecircumflexhookabove = 0x1ec3;
  t.ecircumflextilde = 0x1ec5;
  t.ecyrillic = 0x0454;
  t.edblgrave = 0x0205;
  t.edeva = 0x090f;
  t.edieresis = 0x00eb;
  t.edot = 0x0117;
  t.edotaccent = 0x0117;
  t.edotbelow = 0x1eb9;
  t.eegurmukhi = 0x0a0f;
  t.eematragurmukhi = 0x0a47;
  t.efcyrillic = 0x0444;
  t.egrave = 0x00e8;
  t.egujarati = 0x0a8f;
  t.eharmenian = 0x0567;
  t.ehbopomofo = 0x311d;
  t.ehiragana = 0x3048;
  t.ehookabove = 0x1ebb;
  t.eibopomofo = 0x311f;
  t.eight = 0x0038;
  t.eightarabic = 0x0668;
  t.eightbengali = 0x09ee;
  t.eightcircle = 0x2467;
  t.eightcircleinversesansserif = 0x2791;
  t.eightdeva = 0x096e;
  t.eighteencircle = 0x2471;
  t.eighteenparen = 0x2485;
  t.eighteenperiod = 0x2499;
  t.eightgujarati = 0x0aee;
  t.eightgurmukhi = 0x0a6e;
  t.eighthackarabic = 0x0668;
  t.eighthangzhou = 0x3028;
  t.eighthnotebeamed = 0x266b;
  t.eightideographicparen = 0x3227;
  t.eightinferior = 0x2088;
  t.eightmonospace = 0xff18;
  t.eightoldstyle = 0xf738;
  t.eightparen = 0x247b;
  t.eightperiod = 0x248f;
  t.eightpersian = 0x06f8;
  t.eightroman = 0x2177;
  t.eightsuperior = 0x2078;
  t.eightthai = 0x0e58;
  t.einvertedbreve = 0x0207;
  t.eiotifiedcyrillic = 0x0465;
  t.ekatakana = 0x30a8;
  t.ekatakanahalfwidth = 0xff74;
  t.ekonkargurmukhi = 0x0a74;
  t.ekorean = 0x3154;
  t.elcyrillic = 0x043b;
  t.element = 0x2208;
  t.elevencircle = 0x246a;
  t.elevenparen = 0x247e;
  t.elevenperiod = 0x2492;
  t.elevenroman = 0x217a;
  t.ellipsis = 0x2026;
  t.ellipsisvertical = 0x22ee;
  t.emacron = 0x0113;
  t.emacronacute = 0x1e17;
  t.emacrongrave = 0x1e15;
  t.emcyrillic = 0x043c;
  t.emdash = 0x2014;
  t.emdashvertical = 0xfe31;
  t.emonospace = 0xff45;
  t.emphasismarkarmenian = 0x055b;
  t.emptyset = 0x2205;
  t.enbopomofo = 0x3123;
  t.encyrillic = 0x043d;
  t.endash = 0x2013;
  t.endashvertical = 0xfe32;
  t.endescendercyrillic = 0x04a3;
  t.eng = 0x014b;
  t.engbopomofo = 0x3125;
  t.enghecyrillic = 0x04a5;
  t.enhookcyrillic = 0x04c8;
  t.enspace = 0x2002;
  t.eogonek = 0x0119;
  t.eokorean = 0x3153;
  t.eopen = 0x025b;
  t.eopenclosed = 0x029a;
  t.eopenreversed = 0x025c;
  t.eopenreversedclosed = 0x025e;
  t.eopenreversedhook = 0x025d;
  t.eparen = 0x24a0;
  t.epsilon = 0x03b5;
  t.epsilontonos = 0x03ad;
  t.equal = 0x003d;
  t.equalmonospace = 0xff1d;
  t.equalsmall = 0xfe66;
  t.equalsuperior = 0x207c;
  t.equivalence = 0x2261;
  t.erbopomofo = 0x3126;
  t.ercyrillic = 0x0440;
  t.ereversed = 0x0258;
  t.ereversedcyrillic = 0x044d;
  t.escyrillic = 0x0441;
  t.esdescendercyrillic = 0x04ab;
  t.esh = 0x0283;
  t.eshcurl = 0x0286;
  t.eshortdeva = 0x090e;
  t.eshortvowelsigndeva = 0x0946;
  t.eshreversedloop = 0x01aa;
  t.eshsquatreversed = 0x0285;
  t.esmallhiragana = 0x3047;
  t.esmallkatakana = 0x30a7;
  t.esmallkatakanahalfwidth = 0xff6a;
  t.estimated = 0x212e;
  t.esuperior = 0xf6ec;
  t.eta = 0x03b7;
  t.etarmenian = 0x0568;
  t.etatonos = 0x03ae;
  t.eth = 0x00f0;
  t.etilde = 0x1ebd;
  t.etildebelow = 0x1e1b;
  t.etnahtafoukhhebrew = 0x0591;
  t.etnahtafoukhlefthebrew = 0x0591;
  t.etnahtahebrew = 0x0591;
  t.etnahtalefthebrew = 0x0591;
  t.eturned = 0x01dd;
  t.eukorean = 0x3161;
  t.euro = 0x20ac;
  t.evowelsignbengali = 0x09c7;
  t.evowelsigndeva = 0x0947;
  t.evowelsigngujarati = 0x0ac7;
  t.exclam = 0x0021;
  t.exclamarmenian = 0x055c;
  t.exclamdbl = 0x203c;
  t.exclamdown = 0x00a1;
  t.exclamdownsmall = 0xf7a1;
  t.exclammonospace = 0xff01;
  t.exclamsmall = 0xf721;
  t.existential = 0x2203;
  t.ezh = 0x0292;
  t.ezhcaron = 0x01ef;
  t.ezhcurl = 0x0293;
  t.ezhreversed = 0x01b9;
  t.ezhtail = 0x01ba;
  t.f = 0x0066;
  t.fadeva = 0x095e;
  t.fagurmukhi = 0x0a5e;
  t.fahrenheit = 0x2109;
  t.fathaarabic = 0x064e;
  t.fathalowarabic = 0x064e;
  t.fathatanarabic = 0x064b;
  t.fbopomofo = 0x3108;
  t.fcircle = 0x24d5;
  t.fdotaccent = 0x1e1f;
  t.feharabic = 0x0641;
  t.feharmenian = 0x0586;
  t.fehfinalarabic = 0xfed2;
  t.fehinitialarabic = 0xfed3;
  t.fehmedialarabic = 0xfed4;
  t.feicoptic = 0x03e5;
  t.female = 0x2640;
  t.ff = 0xfb00;
  t.f_f = 0xfb00;
  t.ffi = 0xfb03;
  t.f_f_i = 0xfb03;
  t.ffl = 0xfb04;
  t.f_f_l = 0xfb04;
  t.fi = 0xfb01;
  t.f_i = 0xfb01;
  t.fifteencircle = 0x246e;
  t.fifteenparen = 0x2482;
  t.fifteenperiod = 0x2496;
  t.figuredash = 0x2012;
  t.filledbox = 0x25a0;
  t.filledrect = 0x25ac;
  t.finalkaf = 0x05da;
  t.finalkafdagesh = 0xfb3a;
  t.finalkafdageshhebrew = 0xfb3a;
  t.finalkafhebrew = 0x05da;
  t.finalmem = 0x05dd;
  t.finalmemhebrew = 0x05dd;
  t.finalnun = 0x05df;
  t.finalnunhebrew = 0x05df;
  t.finalpe = 0x05e3;
  t.finalpehebrew = 0x05e3;
  t.finaltsadi = 0x05e5;
  t.finaltsadihebrew = 0x05e5;
  t.firsttonechinese = 0x02c9;
  t.fisheye = 0x25c9;
  t.fitacyrillic = 0x0473;
  t.five = 0x0035;
  t.fivearabic = 0x0665;
  t.fivebengali = 0x09eb;
  t.fivecircle = 0x2464;
  t.fivecircleinversesansserif = 0x278e;
  t.fivedeva = 0x096b;
  t.fiveeighths = 0x215d;
  t.fivegujarati = 0x0aeb;
  t.fivegurmukhi = 0x0a6b;
  t.fivehackarabic = 0x0665;
  t.fivehangzhou = 0x3025;
  t.fiveideographicparen = 0x3224;
  t.fiveinferior = 0x2085;
  t.fivemonospace = 0xff15;
  t.fiveoldstyle = 0xf735;
  t.fiveparen = 0x2478;
  t.fiveperiod = 0x248c;
  t.fivepersian = 0x06f5;
  t.fiveroman = 0x2174;
  t.fivesuperior = 0x2075;
  t.fivethai = 0x0e55;
  t.fl = 0xfb02;
  t.f_l = 0xfb02;
  t.florin = 0x0192;
  t.fmonospace = 0xff46;
  t.fmsquare = 0x3399;
  t.fofanthai = 0x0e1f;
  t.fofathai = 0x0e1d;
  t.fongmanthai = 0x0e4f;
  t.forall = 0x2200;
  t.four = 0x0034;
  t.fourarabic = 0x0664;
  t.fourbengali = 0x09ea;
  t.fourcircle = 0x2463;
  t.fourcircleinversesansserif = 0x278d;
  t.fourdeva = 0x096a;
  t.fourgujarati = 0x0aea;
  t.fourgurmukhi = 0x0a6a;
  t.fourhackarabic = 0x0664;
  t.fourhangzhou = 0x3024;
  t.fourideographicparen = 0x3223;
  t.fourinferior = 0x2084;
  t.fourmonospace = 0xff14;
  t.fournumeratorbengali = 0x09f7;
  t.fouroldstyle = 0xf734;
  t.fourparen = 0x2477;
  t.fourperiod = 0x248b;
  t.fourpersian = 0x06f4;
  t.fourroman = 0x2173;
  t.foursuperior = 0x2074;
  t.fourteencircle = 0x246d;
  t.fourteenparen = 0x2481;
  t.fourteenperiod = 0x2495;
  t.fourthai = 0x0e54;
  t.fourthtonechinese = 0x02cb;
  t.fparen = 0x24a1;
  t.fraction = 0x2044;
  t.franc = 0x20a3;
  t.g = 0x0067;
  t.gabengali = 0x0997;
  t.gacute = 0x01f5;
  t.gadeva = 0x0917;
  t.gafarabic = 0x06af;
  t.gaffinalarabic = 0xfb93;
  t.gafinitialarabic = 0xfb94;
  t.gafmedialarabic = 0xfb95;
  t.gagujarati = 0x0a97;
  t.gagurmukhi = 0x0a17;
  t.gahiragana = 0x304c;
  t.gakatakana = 0x30ac;
  t.gamma = 0x03b3;
  t.gammalatinsmall = 0x0263;
  t.gammasuperior = 0x02e0;
  t.gangiacoptic = 0x03eb;
  t.gbopomofo = 0x310d;
  t.gbreve = 0x011f;
  t.gcaron = 0x01e7;
  t.gcedilla = 0x0123;
  t.gcircle = 0x24d6;
  t.gcircumflex = 0x011d;
  t.gcommaaccent = 0x0123;
  t.gdot = 0x0121;
  t.gdotaccent = 0x0121;
  t.gecyrillic = 0x0433;
  t.gehiragana = 0x3052;
  t.gekatakana = 0x30b2;
  t.geometricallyequal = 0x2251;
  t.gereshaccenthebrew = 0x059c;
  t.gereshhebrew = 0x05f3;
  t.gereshmuqdamhebrew = 0x059d;
  t.germandbls = 0x00df;
  t.gershayimaccenthebrew = 0x059e;
  t.gershayimhebrew = 0x05f4;
  t.getamark = 0x3013;
  t.ghabengali = 0x0998;
  t.ghadarmenian = 0x0572;
  t.ghadeva = 0x0918;
  t.ghagujarati = 0x0a98;
  t.ghagurmukhi = 0x0a18;
  t.ghainarabic = 0x063a;
  t.ghainfinalarabic = 0xfece;
  t.ghaininitialarabic = 0xfecf;
  t.ghainmedialarabic = 0xfed0;
  t.ghemiddlehookcyrillic = 0x0495;
  t.ghestrokecyrillic = 0x0493;
  t.gheupturncyrillic = 0x0491;
  t.ghhadeva = 0x095a;
  t.ghhagurmukhi = 0x0a5a;
  t.ghook = 0x0260;
  t.ghzsquare = 0x3393;
  t.gihiragana = 0x304e;
  t.gikatakana = 0x30ae;
  t.gimarmenian = 0x0563;
  t.gimel = 0x05d2;
  t.gimeldagesh = 0xfb32;
  t.gimeldageshhebrew = 0xfb32;
  t.gimelhebrew = 0x05d2;
  t.gjecyrillic = 0x0453;
  t.glottalinvertedstroke = 0x01be;
  t.glottalstop = 0x0294;
  t.glottalstopinverted = 0x0296;
  t.glottalstopmod = 0x02c0;
  t.glottalstopreversed = 0x0295;
  t.glottalstopreversedmod = 0x02c1;
  t.glottalstopreversedsuperior = 0x02e4;
  t.glottalstopstroke = 0x02a1;
  t.glottalstopstrokereversed = 0x02a2;
  t.gmacron = 0x1e21;
  t.gmonospace = 0xff47;
  t.gohiragana = 0x3054;
  t.gokatakana = 0x30b4;
  t.gparen = 0x24a2;
  t.gpasquare = 0x33ac;
  t.gradient = 0x2207;
  t.grave = 0x0060;
  t.gravebelowcmb = 0x0316;
  t.gravecmb = 0x0300;
  t.gravecomb = 0x0300;
  t.gravedeva = 0x0953;
  t.gravelowmod = 0x02ce;
  t.gravemonospace = 0xff40;
  t.gravetonecmb = 0x0340;
  t.greater = 0x003e;
  t.greaterequal = 0x2265;
  t.greaterequalorless = 0x22db;
  t.greatermonospace = 0xff1e;
  t.greaterorequivalent = 0x2273;
  t.greaterorless = 0x2277;
  t.greateroverequal = 0x2267;
  t.greatersmall = 0xfe65;
  t.gscript = 0x0261;
  t.gstroke = 0x01e5;
  t.guhiragana = 0x3050;
  t.guillemotleft = 0x00ab;
  t.guillemotright = 0x00bb;
  t.guilsinglleft = 0x2039;
  t.guilsinglright = 0x203a;
  t.gukatakana = 0x30b0;
  t.guramusquare = 0x3318;
  t.gysquare = 0x33c9;
  t.h = 0x0068;
  t.haabkhasiancyrillic = 0x04a9;
  t.haaltonearabic = 0x06c1;
  t.habengali = 0x09b9;
  t.hadescendercyrillic = 0x04b3;
  t.hadeva = 0x0939;
  t.hagujarati = 0x0ab9;
  t.hagurmukhi = 0x0a39;
  t.haharabic = 0x062d;
  t.hahfinalarabic = 0xfea2;
  t.hahinitialarabic = 0xfea3;
  t.hahiragana = 0x306f;
  t.hahmedialarabic = 0xfea4;
  t.haitusquare = 0x332a;
  t.hakatakana = 0x30cf;
  t.hakatakanahalfwidth = 0xff8a;
  t.halantgurmukhi = 0x0a4d;
  t.hamzaarabic = 0x0621;
  t.hamzalowarabic = 0x0621;
  t.hangulfiller = 0x3164;
  t.hardsigncyrillic = 0x044a;
  t.harpoonleftbarbup = 0x21bc;
  t.harpoonrightbarbup = 0x21c0;
  t.hasquare = 0x33ca;
  t.hatafpatah = 0x05b2;
  t.hatafpatah16 = 0x05b2;
  t.hatafpatah23 = 0x05b2;
  t.hatafpatah2f = 0x05b2;
  t.hatafpatahhebrew = 0x05b2;
  t.hatafpatahnarrowhebrew = 0x05b2;
  t.hatafpatahquarterhebrew = 0x05b2;
  t.hatafpatahwidehebrew = 0x05b2;
  t.hatafqamats = 0x05b3;
  t.hatafqamats1b = 0x05b3;
  t.hatafqamats28 = 0x05b3;
  t.hatafqamats34 = 0x05b3;
  t.hatafqamatshebrew = 0x05b3;
  t.hatafqamatsnarrowhebrew = 0x05b3;
  t.hatafqamatsquarterhebrew = 0x05b3;
  t.hatafqamatswidehebrew = 0x05b3;
  t.hatafsegol = 0x05b1;
  t.hatafsegol17 = 0x05b1;
  t.hatafsegol24 = 0x05b1;
  t.hatafsegol30 = 0x05b1;
  t.hatafsegolhebrew = 0x05b1;
  t.hatafsegolnarrowhebrew = 0x05b1;
  t.hatafsegolquarterhebrew = 0x05b1;
  t.hatafsegolwidehebrew = 0x05b1;
  t.hbar = 0x0127;
  t.hbopomofo = 0x310f;
  t.hbrevebelow = 0x1e2b;
  t.hcedilla = 0x1e29;
  t.hcircle = 0x24d7;
  t.hcircumflex = 0x0125;
  t.hdieresis = 0x1e27;
  t.hdotaccent = 0x1e23;
  t.hdotbelow = 0x1e25;
  t.he = 0x05d4;
  t.heart = 0x2665;
  t.heartsuitblack = 0x2665;
  t.heartsuitwhite = 0x2661;
  t.hedagesh = 0xfb34;
  t.hedageshhebrew = 0xfb34;
  t.hehaltonearabic = 0x06c1;
  t.heharabic = 0x0647;
  t.hehebrew = 0x05d4;
  t.hehfinalaltonearabic = 0xfba7;
  t.hehfinalalttwoarabic = 0xfeea;
  t.hehfinalarabic = 0xfeea;
  t.hehhamzaabovefinalarabic = 0xfba5;
  t.hehhamzaaboveisolatedarabic = 0xfba4;
  t.hehinitialaltonearabic = 0xfba8;
  t.hehinitialarabic = 0xfeeb;
  t.hehiragana = 0x3078;
  t.hehmedialaltonearabic = 0xfba9;
  t.hehmedialarabic = 0xfeec;
  t.heiseierasquare = 0x337b;
  t.hekatakana = 0x30d8;
  t.hekatakanahalfwidth = 0xff8d;
  t.hekutaarusquare = 0x3336;
  t.henghook = 0x0267;
  t.herutusquare = 0x3339;
  t.het = 0x05d7;
  t.hethebrew = 0x05d7;
  t.hhook = 0x0266;
  t.hhooksuperior = 0x02b1;
  t.hieuhacirclekorean = 0x327b;
  t.hieuhaparenkorean = 0x321b;
  t.hieuhcirclekorean = 0x326d;
  t.hieuhkorean = 0x314e;
  t.hieuhparenkorean = 0x320d;
  t.hihiragana = 0x3072;
  t.hikatakana = 0x30d2;
  t.hikatakanahalfwidth = 0xff8b;
  t.hiriq = 0x05b4;
  t.hiriq14 = 0x05b4;
  t.hiriq21 = 0x05b4;
  t.hiriq2d = 0x05b4;
  t.hiriqhebrew = 0x05b4;
  t.hiriqnarrowhebrew = 0x05b4;
  t.hiriqquarterhebrew = 0x05b4;
  t.hiriqwidehebrew = 0x05b4;
  t.hlinebelow = 0x1e96;
  t.hmonospace = 0xff48;
  t.hoarmenian = 0x0570;
  t.hohipthai = 0x0e2b;
  t.hohiragana = 0x307b;
  t.hokatakana = 0x30db;
  t.hokatakanahalfwidth = 0xff8e;
  t.holam = 0x05b9;
  t.holam19 = 0x05b9;
  t.holam26 = 0x05b9;
  t.holam32 = 0x05b9;
  t.holamhebrew = 0x05b9;
  t.holamnarrowhebrew = 0x05b9;
  t.holamquarterhebrew = 0x05b9;
  t.holamwidehebrew = 0x05b9;
  t.honokhukthai = 0x0e2e;
  t.hookabovecomb = 0x0309;
  t.hookcmb = 0x0309;
  t.hookpalatalizedbelowcmb = 0x0321;
  t.hookretroflexbelowcmb = 0x0322;
  t.hoonsquare = 0x3342;
  t.horicoptic = 0x03e9;
  t.horizontalbar = 0x2015;
  t.horncmb = 0x031b;
  t.hotsprings = 0x2668;
  t.house = 0x2302;
  t.hparen = 0x24a3;
  t.hsuperior = 0x02b0;
  t.hturned = 0x0265;
  t.huhiragana = 0x3075;
  t.huiitosquare = 0x3333;
  t.hukatakana = 0x30d5;
  t.hukatakanahalfwidth = 0xff8c;
  t.hungarumlaut = 0x02dd;
  t.hungarumlautcmb = 0x030b;
  t.hv = 0x0195;
  t.hyphen = 0x002d;
  t.hypheninferior = 0xf6e5;
  t.hyphenmonospace = 0xff0d;
  t.hyphensmall = 0xfe63;
  t.hyphensuperior = 0xf6e6;
  t.hyphentwo = 0x2010;
  t.i = 0x0069;
  t.iacute = 0x00ed;
  t.iacyrillic = 0x044f;
  t.ibengali = 0x0987;
  t.ibopomofo = 0x3127;
  t.ibreve = 0x012d;
  t.icaron = 0x01d0;
  t.icircle = 0x24d8;
  t.icircumflex = 0x00ee;
  t.icyrillic = 0x0456;
  t.idblgrave = 0x0209;
  t.ideographearthcircle = 0x328f;
  t.ideographfirecircle = 0x328b;
  t.ideographicallianceparen = 0x323f;
  t.ideographiccallparen = 0x323a;
  t.ideographiccentrecircle = 0x32a5;
  t.ideographicclose = 0x3006;
  t.ideographiccomma = 0x3001;
  t.ideographiccommaleft = 0xff64;
  t.ideographiccongratulationparen = 0x3237;
  t.ideographiccorrectcircle = 0x32a3;
  t.ideographicearthparen = 0x322f;
  t.ideographicenterpriseparen = 0x323d;
  t.ideographicexcellentcircle = 0x329d;
  t.ideographicfestivalparen = 0x3240;
  t.ideographicfinancialcircle = 0x3296;
  t.ideographicfinancialparen = 0x3236;
  t.ideographicfireparen = 0x322b;
  t.ideographichaveparen = 0x3232;
  t.ideographichighcircle = 0x32a4;
  t.ideographiciterationmark = 0x3005;
  t.ideographiclaborcircle = 0x3298;
  t.ideographiclaborparen = 0x3238;
  t.ideographicleftcircle = 0x32a7;
  t.ideographiclowcircle = 0x32a6;
  t.ideographicmedicinecircle = 0x32a9;
  t.ideographicmetalparen = 0x322e;
  t.ideographicmoonparen = 0x322a;
  t.ideographicnameparen = 0x3234;
  t.ideographicperiod = 0x3002;
  t.ideographicprintcircle = 0x329e;
  t.ideographicreachparen = 0x3243;
  t.ideographicrepresentparen = 0x3239;
  t.ideographicresourceparen = 0x323e;
  t.ideographicrightcircle = 0x32a8;
  t.ideographicsecretcircle = 0x3299;
  t.ideographicselfparen = 0x3242;
  t.ideographicsocietyparen = 0x3233;
  t.ideographicspace = 0x3000;
  t.ideographicspecialparen = 0x3235;
  t.ideographicstockparen = 0x3231;
  t.ideographicstudyparen = 0x323b;
  t.ideographicsunparen = 0x3230;
  t.ideographicsuperviseparen = 0x323c;
  t.ideographicwaterparen = 0x322c;
  t.ideographicwoodparen = 0x322d;
  t.ideographiczero = 0x3007;
  t.ideographmetalcircle = 0x328e;
  t.ideographmooncircle = 0x328a;
  t.ideographnamecircle = 0x3294;
  t.ideographsuncircle = 0x3290;
  t.ideographwatercircle = 0x328c;
  t.ideographwoodcircle = 0x328d;
  t.ideva = 0x0907;
  t.idieresis = 0x00ef;
  t.idieresisacute = 0x1e2f;
  t.idieresiscyrillic = 0x04e5;
  t.idotbelow = 0x1ecb;
  t.iebrevecyrillic = 0x04d7;
  t.iecyrillic = 0x0435;
  t.ieungacirclekorean = 0x3275;
  t.ieungaparenkorean = 0x3215;
  t.ieungcirclekorean = 0x3267;
  t.ieungkorean = 0x3147;
  t.ieungparenkorean = 0x3207;
  t.igrave = 0x00ec;
  t.igujarati = 0x0a87;
  t.igurmukhi = 0x0a07;
  t.ihiragana = 0x3044;
  t.ihookabove = 0x1ec9;
  t.iibengali = 0x0988;
  t.iicyrillic = 0x0438;
  t.iideva = 0x0908;
  t.iigujarati = 0x0a88;
  t.iigurmukhi = 0x0a08;
  t.iimatragurmukhi = 0x0a40;
  t.iinvertedbreve = 0x020b;
  t.iishortcyrillic = 0x0439;
  t.iivowelsignbengali = 0x09c0;
  t.iivowelsigndeva = 0x0940;
  t.iivowelsigngujarati = 0x0ac0;
  t.ij = 0x0133;
  t.ikatakana = 0x30a4;
  t.ikatakanahalfwidth = 0xff72;
  t.ikorean = 0x3163;
  t.ilde = 0x02dc;
  t.iluyhebrew = 0x05ac;
  t.imacron = 0x012b;
  t.imacroncyrillic = 0x04e3;
  t.imageorapproximatelyequal = 0x2253;
  t.imatragurmukhi = 0x0a3f;
  t.imonospace = 0xff49;
  t.increment = 0x2206;
  t.infinity = 0x221e;
  t.iniarmenian = 0x056b;
  t.integral = 0x222b;
  t.integralbottom = 0x2321;
  t.integralbt = 0x2321;
  t.integralex = 0xf8f5;
  t.integraltop = 0x2320;
  t.integraltp = 0x2320;
  t.intersection = 0x2229;
  t.intisquare = 0x3305;
  t.invbullet = 0x25d8;
  t.invcircle = 0x25d9;
  t.invsmileface = 0x263b;
  t.iocyrillic = 0x0451;
  t.iogonek = 0x012f;
  t.iota = 0x03b9;
  t.iotadieresis = 0x03ca;
  t.iotadieresistonos = 0x0390;
  t.iotalatin = 0x0269;
  t.iotatonos = 0x03af;
  t.iparen = 0x24a4;
  t.irigurmukhi = 0x0a72;
  t.ismallhiragana = 0x3043;
  t.ismallkatakana = 0x30a3;
  t.ismallkatakanahalfwidth = 0xff68;
  t.issharbengali = 0x09fa;
  t.istroke = 0x0268;
  t.isuperior = 0xf6ed;
  t.iterationhiragana = 0x309d;
  t.iterationkatakana = 0x30fd;
  t.itilde = 0x0129;
  t.itildebelow = 0x1e2d;
  t.iubopomofo = 0x3129;
  t.iucyrillic = 0x044e;
  t.ivowelsignbengali = 0x09bf;
  t.ivowelsigndeva = 0x093f;
  t.ivowelsigngujarati = 0x0abf;
  t.izhitsacyrillic = 0x0475;
  t.izhitsadblgravecyrillic = 0x0477;
  t.j = 0x006a;
  t.jaarmenian = 0x0571;
  t.jabengali = 0x099c;
  t.jadeva = 0x091c;
  t.jagujarati = 0x0a9c;
  t.jagurmukhi = 0x0a1c;
  t.jbopomofo = 0x3110;
  t.jcaron = 0x01f0;
  t.jcircle = 0x24d9;
  t.jcircumflex = 0x0135;
  t.jcrossedtail = 0x029d;
  t.jdotlessstroke = 0x025f;
  t.jecyrillic = 0x0458;
  t.jeemarabic = 0x062c;
  t.jeemfinalarabic = 0xfe9e;
  t.jeeminitialarabic = 0xfe9f;
  t.jeemmedialarabic = 0xfea0;
  t.jeharabic = 0x0698;
  t.jehfinalarabic = 0xfb8b;
  t.jhabengali = 0x099d;
  t.jhadeva = 0x091d;
  t.jhagujarati = 0x0a9d;
  t.jhagurmukhi = 0x0a1d;
  t.jheharmenian = 0x057b;
  t.jis = 0x3004;
  t.jmonospace = 0xff4a;
  t.jparen = 0x24a5;
  t.jsuperior = 0x02b2;
  t.k = 0x006b;
  t.kabashkircyrillic = 0x04a1;
  t.kabengali = 0x0995;
  t.kacute = 0x1e31;
  t.kacyrillic = 0x043a;
  t.kadescendercyrillic = 0x049b;
  t.kadeva = 0x0915;
  t.kaf = 0x05db;
  t.kafarabic = 0x0643;
  t.kafdagesh = 0xfb3b;
  t.kafdageshhebrew = 0xfb3b;
  t.kaffinalarabic = 0xfeda;
  t.kafhebrew = 0x05db;
  t.kafinitialarabic = 0xfedb;
  t.kafmedialarabic = 0xfedc;
  t.kafrafehebrew = 0xfb4d;
  t.kagujarati = 0x0a95;
  t.kagurmukhi = 0x0a15;
  t.kahiragana = 0x304b;
  t.kahookcyrillic = 0x04c4;
  t.kakatakana = 0x30ab;
  t.kakatakanahalfwidth = 0xff76;
  t.kappa = 0x03ba;
  t.kappasymbolgreek = 0x03f0;
  t.kapyeounmieumkorean = 0x3171;
  t.kapyeounphieuphkorean = 0x3184;
  t.kapyeounpieupkorean = 0x3178;
  t.kapyeounssangpieupkorean = 0x3179;
  t.karoriisquare = 0x330d;
  t.kashidaautoarabic = 0x0640;
  t.kashidaautonosidebearingarabic = 0x0640;
  t.kasmallkatakana = 0x30f5;
  t.kasquare = 0x3384;
  t.kasraarabic = 0x0650;
  t.kasratanarabic = 0x064d;
  t.kastrokecyrillic = 0x049f;
  t.katahiraprolongmarkhalfwidth = 0xff70;
  t.kaverticalstrokecyrillic = 0x049d;
  t.kbopomofo = 0x310e;
  t.kcalsquare = 0x3389;
  t.kcaron = 0x01e9;
  t.kcedilla = 0x0137;
  t.kcircle = 0x24da;
  t.kcommaaccent = 0x0137;
  t.kdotbelow = 0x1e33;
  t.keharmenian = 0x0584;
  t.kehiragana = 0x3051;
  t.kekatakana = 0x30b1;
  t.kekatakanahalfwidth = 0xff79;
  t.kenarmenian = 0x056f;
  t.kesmallkatakana = 0x30f6;
  t.kgreenlandic = 0x0138;
  t.khabengali = 0x0996;
  t.khacyrillic = 0x0445;
  t.khadeva = 0x0916;
  t.khagujarati = 0x0a96;
  t.khagurmukhi = 0x0a16;
  t.khaharabic = 0x062e;
  t.khahfinalarabic = 0xfea6;
  t.khahinitialarabic = 0xfea7;
  t.khahmedialarabic = 0xfea8;
  t.kheicoptic = 0x03e7;
  t.khhadeva = 0x0959;
  t.khhagurmukhi = 0x0a59;
  t.khieukhacirclekorean = 0x3278;
  t.khieukhaparenkorean = 0x3218;
  t.khieukhcirclekorean = 0x326a;
  t.khieukhkorean = 0x314b;
  t.khieukhparenkorean = 0x320a;
  t.khokhaithai = 0x0e02;
  t.khokhonthai = 0x0e05;
  t.khokhuatthai = 0x0e03;
  t.khokhwaithai = 0x0e04;
  t.khomutthai = 0x0e5b;
  t.khook = 0x0199;
  t.khorakhangthai = 0x0e06;
  t.khzsquare = 0x3391;
  t.kihiragana = 0x304d;
  t.kikatakana = 0x30ad;
  t.kikatakanahalfwidth = 0xff77;
  t.kiroguramusquare = 0x3315;
  t.kiromeetorusquare = 0x3316;
  t.kirosquare = 0x3314;
  t.kiyeokacirclekorean = 0x326e;
  t.kiyeokaparenkorean = 0x320e;
  t.kiyeokcirclekorean = 0x3260;
  t.kiyeokkorean = 0x3131;
  t.kiyeokparenkorean = 0x3200;
  t.kiyeoksioskorean = 0x3133;
  t.kjecyrillic = 0x045c;
  t.klinebelow = 0x1e35;
  t.klsquare = 0x3398;
  t.kmcubedsquare = 0x33a6;
  t.kmonospace = 0xff4b;
  t.kmsquaredsquare = 0x33a2;
  t.kohiragana = 0x3053;
  t.kohmsquare = 0x33c0;
  t.kokaithai = 0x0e01;
  t.kokatakana = 0x30b3;
  t.kokatakanahalfwidth = 0xff7a;
  t.kooposquare = 0x331e;
  t.koppacyrillic = 0x0481;
  t.koreanstandardsymbol = 0x327f;
  t.koroniscmb = 0x0343;
  t.kparen = 0x24a6;
  t.kpasquare = 0x33aa;
  t.ksicyrillic = 0x046f;
  t.ktsquare = 0x33cf;
  t.kturned = 0x029e;
  t.kuhiragana = 0x304f;
  t.kukatakana = 0x30af;
  t.kukatakanahalfwidth = 0xff78;
  t.kvsquare = 0x33b8;
  t.kwsquare = 0x33be;
  t.l = 0x006c;
  t.labengali = 0x09b2;
  t.lacute = 0x013a;
  t.ladeva = 0x0932;
  t.lagujarati = 0x0ab2;
  t.lagurmukhi = 0x0a32;
  t.lakkhangyaothai = 0x0e45;
  t.lamaleffinalarabic = 0xfefc;
  t.lamalefhamzaabovefinalarabic = 0xfef8;
  t.lamalefhamzaaboveisolatedarabic = 0xfef7;
  t.lamalefhamzabelowfinalarabic = 0xfefa;
  t.lamalefhamzabelowisolatedarabic = 0xfef9;
  t.lamalefisolatedarabic = 0xfefb;
  t.lamalefmaddaabovefinalarabic = 0xfef6;
  t.lamalefmaddaaboveisolatedarabic = 0xfef5;
  t.lamarabic = 0x0644;
  t.lambda = 0x03bb;
  t.lambdastroke = 0x019b;
  t.lamed = 0x05dc;
  t.lameddagesh = 0xfb3c;
  t.lameddageshhebrew = 0xfb3c;
  t.lamedhebrew = 0x05dc;
  t.lamfinalarabic = 0xfede;
  t.lamhahinitialarabic = 0xfcca;
  t.laminitialarabic = 0xfedf;
  t.lamjeeminitialarabic = 0xfcc9;
  t.lamkhahinitialarabic = 0xfccb;
  t.lamlamhehisolatedarabic = 0xfdf2;
  t.lammedialarabic = 0xfee0;
  t.lammeemhahinitialarabic = 0xfd88;
  t.lammeeminitialarabic = 0xfccc;
  t.largecircle = 0x25ef;
  t.lbar = 0x019a;
  t.lbelt = 0x026c;
  t.lbopomofo = 0x310c;
  t.lcaron = 0x013e;
  t.lcedilla = 0x013c;
  t.lcircle = 0x24db;
  t.lcircumflexbelow = 0x1e3d;
  t.lcommaaccent = 0x013c;
  t.ldot = 0x0140;
  t.ldotaccent = 0x0140;
  t.ldotbelow = 0x1e37;
  t.ldotbelowmacron = 0x1e39;
  t.leftangleabovecmb = 0x031a;
  t.lefttackbelowcmb = 0x0318;
  t.less = 0x003c;
  t.lessequal = 0x2264;
  t.lessequalorgreater = 0x22da;
  t.lessmonospace = 0xff1c;
  t.lessorequivalent = 0x2272;
  t.lessorgreater = 0x2276;
  t.lessoverequal = 0x2266;
  t.lesssmall = 0xfe64;
  t.lezh = 0x026e;
  t.lfblock = 0x258c;
  t.lhookretroflex = 0x026d;
  t.lira = 0x20a4;
  t.liwnarmenian = 0x056c;
  t.lj = 0x01c9;
  t.ljecyrillic = 0x0459;
  t.ll = 0xf6c0;
  t.lladeva = 0x0933;
  t.llagujarati = 0x0ab3;
  t.llinebelow = 0x1e3b;
  t.llladeva = 0x0934;
  t.llvocalicbengali = 0x09e1;
  t.llvocalicdeva = 0x0961;
  t.llvocalicvowelsignbengali = 0x09e3;
  t.llvocalicvowelsigndeva = 0x0963;
  t.lmiddletilde = 0x026b;
  t.lmonospace = 0xff4c;
  t.lmsquare = 0x33d0;
  t.lochulathai = 0x0e2c;
  t.logicaland = 0x2227;
  t.logicalnot = 0x00ac;
  t.logicalnotreversed = 0x2310;
  t.logicalor = 0x2228;
  t.lolingthai = 0x0e25;
  t.longs = 0x017f;
  t.lowlinecenterline = 0xfe4e;
  t.lowlinecmb = 0x0332;
  t.lowlinedashed = 0xfe4d;
  t.lozenge = 0x25ca;
  t.lparen = 0x24a7;
  t.lslash = 0x0142;
  t.lsquare = 0x2113;
  t.lsuperior = 0xf6ee;
  t.ltshade = 0x2591;
  t.luthai = 0x0e26;
  t.lvocalicbengali = 0x098c;
  t.lvocalicdeva = 0x090c;
  t.lvocalicvowelsignbengali = 0x09e2;
  t.lvocalicvowelsigndeva = 0x0962;
  t.lxsquare = 0x33d3;
  t.m = 0x006d;
  t.mabengali = 0x09ae;
  t.macron = 0x00af;
  t.macronbelowcmb = 0x0331;
  t.macroncmb = 0x0304;
  t.macronlowmod = 0x02cd;
  t.macronmonospace = 0xffe3;
  t.macute = 0x1e3f;
  t.madeva = 0x092e;
  t.magujarati = 0x0aae;
  t.magurmukhi = 0x0a2e;
  t.mahapakhhebrew = 0x05a4;
  t.mahapakhlefthebrew = 0x05a4;
  t.mahiragana = 0x307e;
  t.maichattawalowleftthai = 0xf895;
  t.maichattawalowrightthai = 0xf894;
  t.maichattawathai = 0x0e4b;
  t.maichattawaupperleftthai = 0xf893;
  t.maieklowleftthai = 0xf88c;
  t.maieklowrightthai = 0xf88b;
  t.maiekthai = 0x0e48;
  t.maiekupperleftthai = 0xf88a;
  t.maihanakatleftthai = 0xf884;
  t.maihanakatthai = 0x0e31;
  t.maitaikhuleftthai = 0xf889;
  t.maitaikhuthai = 0x0e47;
  t.maitholowleftthai = 0xf88f;
  t.maitholowrightthai = 0xf88e;
  t.maithothai = 0x0e49;
  t.maithoupperleftthai = 0xf88d;
  t.maitrilowleftthai = 0xf892;
  t.maitrilowrightthai = 0xf891;
  t.maitrithai = 0x0e4a;
  t.maitriupperleftthai = 0xf890;
  t.maiyamokthai = 0x0e46;
  t.makatakana = 0x30de;
  t.makatakanahalfwidth = 0xff8f;
  t.male = 0x2642;
  t.mansyonsquare = 0x3347;
  t.maqafhebrew = 0x05be;
  t.mars = 0x2642;
  t.masoracirclehebrew = 0x05af;
  t.masquare = 0x3383;
  t.mbopomofo = 0x3107;
  t.mbsquare = 0x33d4;
  t.mcircle = 0x24dc;
  t.mcubedsquare = 0x33a5;
  t.mdotaccent = 0x1e41;
  t.mdotbelow = 0x1e43;
  t.meemarabic = 0x0645;
  t.meemfinalarabic = 0xfee2;
  t.meeminitialarabic = 0xfee3;
  t.meemmedialarabic = 0xfee4;
  t.meemmeeminitialarabic = 0xfcd1;
  t.meemmeemisolatedarabic = 0xfc48;
  t.meetorusquare = 0x334d;
  t.mehiragana = 0x3081;
  t.meizierasquare = 0x337e;
  t.mekatakana = 0x30e1;
  t.mekatakanahalfwidth = 0xff92;
  t.mem = 0x05de;
  t.memdagesh = 0xfb3e;
  t.memdageshhebrew = 0xfb3e;
  t.memhebrew = 0x05de;
  t.menarmenian = 0x0574;
  t.merkhahebrew = 0x05a5;
  t.merkhakefulahebrew = 0x05a6;
  t.merkhakefulalefthebrew = 0x05a6;
  t.merkhalefthebrew = 0x05a5;
  t.mhook = 0x0271;
  t.mhzsquare = 0x3392;
  t.middledotkatakanahalfwidth = 0xff65;
  t.middot = 0x00b7;
  t.mieumacirclekorean = 0x3272;
  t.mieumaparenkorean = 0x3212;
  t.mieumcirclekorean = 0x3264;
  t.mieumkorean = 0x3141;
  t.mieumpansioskorean = 0x3170;
  t.mieumparenkorean = 0x3204;
  t.mieumpieupkorean = 0x316e;
  t.mieumsioskorean = 0x316f;
  t.mihiragana = 0x307f;
  t.mikatakana = 0x30df;
  t.mikatakanahalfwidth = 0xff90;
  t.minus = 0x2212;
  t.minusbelowcmb = 0x0320;
  t.minuscircle = 0x2296;
  t.minusmod = 0x02d7;
  t.minusplus = 0x2213;
  t.minute = 0x2032;
  t.miribaarusquare = 0x334a;
  t.mirisquare = 0x3349;
  t.mlonglegturned = 0x0270;
  t.mlsquare = 0x3396;
  t.mmcubedsquare = 0x33a3;
  t.mmonospace = 0xff4d;
  t.mmsquaredsquare = 0x339f;
  t.mohiragana = 0x3082;
  t.mohmsquare = 0x33c1;
  t.mokatakana = 0x30e2;
  t.mokatakanahalfwidth = 0xff93;
  t.molsquare = 0x33d6;
  t.momathai = 0x0e21;
  t.moverssquare = 0x33a7;
  t.moverssquaredsquare = 0x33a8;
  t.mparen = 0x24a8;
  t.mpasquare = 0x33ab;
  t.mssquare = 0x33b3;
  t.msuperior = 0xf6ef;
  t.mturned = 0x026f;
  t.mu = 0x00b5;
  t.mu1 = 0x00b5;
  t.muasquare = 0x3382;
  t.muchgreater = 0x226b;
  t.muchless = 0x226a;
  t.mufsquare = 0x338c;
  t.mugreek = 0x03bc;
  t.mugsquare = 0x338d;
  t.muhiragana = 0x3080;
  t.mukatakana = 0x30e0;
  t.mukatakanahalfwidth = 0xff91;
  t.mulsquare = 0x3395;
  t.multiply = 0x00d7;
  t.mumsquare = 0x339b;
  t.munahhebrew = 0x05a3;
  t.munahlefthebrew = 0x05a3;
  t.musicalnote = 0x266a;
  t.musicalnotedbl = 0x266b;
  t.musicflatsign = 0x266d;
  t.musicsharpsign = 0x266f;
  t.mussquare = 0x33b2;
  t.muvsquare = 0x33b6;
  t.muwsquare = 0x33bc;
  t.mvmegasquare = 0x33b9;
  t.mvsquare = 0x33b7;
  t.mwmegasquare = 0x33bf;
  t.mwsquare = 0x33bd;
  t.n = 0x006e;
  t.nabengali = 0x09a8;
  t.nabla = 0x2207;
  t.nacute = 0x0144;
  t.nadeva = 0x0928;
  t.nagujarati = 0x0aa8;
  t.nagurmukhi = 0x0a28;
  t.nahiragana = 0x306a;
  t.nakatakana = 0x30ca;
  t.nakatakanahalfwidth = 0xff85;
  t.napostrophe = 0x0149;
  t.nasquare = 0x3381;
  t.nbopomofo = 0x310b;
  t.nbspace = 0x00a0;
  t.ncaron = 0x0148;
  t.ncedilla = 0x0146;
  t.ncircle = 0x24dd;
  t.ncircumflexbelow = 0x1e4b;
  t.ncommaaccent = 0x0146;
  t.ndotaccent = 0x1e45;
  t.ndotbelow = 0x1e47;
  t.nehiragana = 0x306d;
  t.nekatakana = 0x30cd;
  t.nekatakanahalfwidth = 0xff88;
  t.newsheqelsign = 0x20aa;
  t.nfsquare = 0x338b;
  t.ngabengali = 0x0999;
  t.ngadeva = 0x0919;
  t.ngagujarati = 0x0a99;
  t.ngagurmukhi = 0x0a19;
  t.ngonguthai = 0x0e07;
  t.nhiragana = 0x3093;
  t.nhookleft = 0x0272;
  t.nhookretroflex = 0x0273;
  t.nieunacirclekorean = 0x326f;
  t.nieunaparenkorean = 0x320f;
  t.nieuncieuckorean = 0x3135;
  t.nieuncirclekorean = 0x3261;
  t.nieunhieuhkorean = 0x3136;
  t.nieunkorean = 0x3134;
  t.nieunpansioskorean = 0x3168;
  t.nieunparenkorean = 0x3201;
  t.nieunsioskorean = 0x3167;
  t.nieuntikeutkorean = 0x3166;
  t.nihiragana = 0x306b;
  t.nikatakana = 0x30cb;
  t.nikatakanahalfwidth = 0xff86;
  t.nikhahitleftthai = 0xf899;
  t.nikhahitthai = 0x0e4d;
  t.nine = 0x0039;
  t.ninearabic = 0x0669;
  t.ninebengali = 0x09ef;
  t.ninecircle = 0x2468;
  t.ninecircleinversesansserif = 0x2792;
  t.ninedeva = 0x096f;
  t.ninegujarati = 0x0aef;
  t.ninegurmukhi = 0x0a6f;
  t.ninehackarabic = 0x0669;
  t.ninehangzhou = 0x3029;
  t.nineideographicparen = 0x3228;
  t.nineinferior = 0x2089;
  t.ninemonospace = 0xff19;
  t.nineoldstyle = 0xf739;
  t.nineparen = 0x247c;
  t.nineperiod = 0x2490;
  t.ninepersian = 0x06f9;
  t.nineroman = 0x2178;
  t.ninesuperior = 0x2079;
  t.nineteencircle = 0x2472;
  t.nineteenparen = 0x2486;
  t.nineteenperiod = 0x249a;
  t.ninethai = 0x0e59;
  t.nj = 0x01cc;
  t.njecyrillic = 0x045a;
  t.nkatakana = 0x30f3;
  t.nkatakanahalfwidth = 0xff9d;
  t.nlegrightlong = 0x019e;
  t.nlinebelow = 0x1e49;
  t.nmonospace = 0xff4e;
  t.nmsquare = 0x339a;
  t.nnabengali = 0x09a3;
  t.nnadeva = 0x0923;
  t.nnagujarati = 0x0aa3;
  t.nnagurmukhi = 0x0a23;
  t.nnnadeva = 0x0929;
  t.nohiragana = 0x306e;
  t.nokatakana = 0x30ce;
  t.nokatakanahalfwidth = 0xff89;
  t.nonbreakingspace = 0x00a0;
  t.nonenthai = 0x0e13;
  t.nonuthai = 0x0e19;
  t.noonarabic = 0x0646;
  t.noonfinalarabic = 0xfee6;
  t.noonghunnaarabic = 0x06ba;
  t.noonghunnafinalarabic = 0xfb9f;
  t.nooninitialarabic = 0xfee7;
  t.noonjeeminitialarabic = 0xfcd2;
  t.noonjeemisolatedarabic = 0xfc4b;
  t.noonmedialarabic = 0xfee8;
  t.noonmeeminitialarabic = 0xfcd5;
  t.noonmeemisolatedarabic = 0xfc4e;
  t.noonnoonfinalarabic = 0xfc8d;
  t.notcontains = 0x220c;
  t.notelement = 0x2209;
  t.notelementof = 0x2209;
  t.notequal = 0x2260;
  t.notgreater = 0x226f;
  t.notgreaternorequal = 0x2271;
  t.notgreaternorless = 0x2279;
  t.notidentical = 0x2262;
  t.notless = 0x226e;
  t.notlessnorequal = 0x2270;
  t.notparallel = 0x2226;
  t.notprecedes = 0x2280;
  t.notsubset = 0x2284;
  t.notsucceeds = 0x2281;
  t.notsuperset = 0x2285;
  t.nowarmenian = 0x0576;
  t.nparen = 0x24a9;
  t.nssquare = 0x33b1;
  t.nsuperior = 0x207f;
  t.ntilde = 0x00f1;
  t.nu = 0x03bd;
  t.nuhiragana = 0x306c;
  t.nukatakana = 0x30cc;
  t.nukatakanahalfwidth = 0xff87;
  t.nuktabengali = 0x09bc;
  t.nuktadeva = 0x093c;
  t.nuktagujarati = 0x0abc;
  t.nuktagurmukhi = 0x0a3c;
  t.numbersign = 0x0023;
  t.numbersignmonospace = 0xff03;
  t.numbersignsmall = 0xfe5f;
  t.numeralsigngreek = 0x0374;
  t.numeralsignlowergreek = 0x0375;
  t.numero = 0x2116;
  t.nun = 0x05e0;
  t.nundagesh = 0xfb40;
  t.nundageshhebrew = 0xfb40;
  t.nunhebrew = 0x05e0;
  t.nvsquare = 0x33b5;
  t.nwsquare = 0x33bb;
  t.nyabengali = 0x099e;
  t.nyadeva = 0x091e;
  t.nyagujarati = 0x0a9e;
  t.nyagurmukhi = 0x0a1e;
  t.o = 0x006f;
  t.oacute = 0x00f3;
  t.oangthai = 0x0e2d;
  t.obarred = 0x0275;
  t.obarredcyrillic = 0x04e9;
  t.obarreddieresiscyrillic = 0x04eb;
  t.obengali = 0x0993;
  t.obopomofo = 0x311b;
  t.obreve = 0x014f;
  t.ocandradeva = 0x0911;
  t.ocandragujarati = 0x0a91;
  t.ocandravowelsigndeva = 0x0949;
  t.ocandravowelsigngujarati = 0x0ac9;
  t.ocaron = 0x01d2;
  t.ocircle = 0x24de;
  t.ocircumflex = 0x00f4;
  t.ocircumflexacute = 0x1ed1;
  t.ocircumflexdotbelow = 0x1ed9;
  t.ocircumflexgrave = 0x1ed3;
  t.ocircumflexhookabove = 0x1ed5;
  t.ocircumflextilde = 0x1ed7;
  t.ocyrillic = 0x043e;
  t.odblacute = 0x0151;
  t.odblgrave = 0x020d;
  t.odeva = 0x0913;
  t.odieresis = 0x00f6;
  t.odieresiscyrillic = 0x04e7;
  t.odotbelow = 0x1ecd;
  t.oe = 0x0153;
  t.oekorean = 0x315a;
  t.ogonek = 0x02db;
  t.ogonekcmb = 0x0328;
  t.ograve = 0x00f2;
  t.ogujarati = 0x0a93;
  t.oharmenian = 0x0585;
  t.ohiragana = 0x304a;
  t.ohookabove = 0x1ecf;
  t.ohorn = 0x01a1;
  t.ohornacute = 0x1edb;
  t.ohorndotbelow = 0x1ee3;
  t.ohorngrave = 0x1edd;
  t.ohornhookabove = 0x1edf;
  t.ohorntilde = 0x1ee1;
  t.ohungarumlaut = 0x0151;
  t.oi = 0x01a3;
  t.oinvertedbreve = 0x020f;
  t.okatakana = 0x30aa;
  t.okatakanahalfwidth = 0xff75;
  t.okorean = 0x3157;
  t.olehebrew = 0x05ab;
  t.omacron = 0x014d;
  t.omacronacute = 0x1e53;
  t.omacrongrave = 0x1e51;
  t.omdeva = 0x0950;
  t.omega = 0x03c9;
  t.omega1 = 0x03d6;
  t.omegacyrillic = 0x0461;
  t.omegalatinclosed = 0x0277;
  t.omegaroundcyrillic = 0x047b;
  t.omegatitlocyrillic = 0x047d;
  t.omegatonos = 0x03ce;
  t.omgujarati = 0x0ad0;
  t.omicron = 0x03bf;
  t.omicrontonos = 0x03cc;
  t.omonospace = 0xff4f;
  t.one = 0x0031;
  t.onearabic = 0x0661;
  t.onebengali = 0x09e7;
  t.onecircle = 0x2460;
  t.onecircleinversesansserif = 0x278a;
  t.onedeva = 0x0967;
  t.onedotenleader = 0x2024;
  t.oneeighth = 0x215b;
  t.onefitted = 0xf6dc;
  t.onegujarati = 0x0ae7;
  t.onegurmukhi = 0x0a67;
  t.onehackarabic = 0x0661;
  t.onehalf = 0x00bd;
  t.onehangzhou = 0x3021;
  t.oneideographicparen = 0x3220;
  t.oneinferior = 0x2081;
  t.onemonospace = 0xff11;
  t.onenumeratorbengali = 0x09f4;
  t.oneoldstyle = 0xf731;
  t.oneparen = 0x2474;
  t.oneperiod = 0x2488;
  t.onepersian = 0x06f1;
  t.onequarter = 0x00bc;
  t.oneroman = 0x2170;
  t.onesuperior = 0x00b9;
  t.onethai = 0x0e51;
  t.onethird = 0x2153;
  t.oogonek = 0x01eb;
  t.oogonekmacron = 0x01ed;
  t.oogurmukhi = 0x0a13;
  t.oomatragurmukhi = 0x0a4b;
  t.oopen = 0x0254;
  t.oparen = 0x24aa;
  t.openbullet = 0x25e6;
  t.option = 0x2325;
  t.ordfeminine = 0x00aa;
  t.ordmasculine = 0x00ba;
  t.orthogonal = 0x221f;
  t.oshortdeva = 0x0912;
  t.oshortvowelsigndeva = 0x094a;
  t.oslash = 0x00f8;
  t.oslashacute = 0x01ff;
  t.osmallhiragana = 0x3049;
  t.osmallkatakana = 0x30a9;
  t.osmallkatakanahalfwidth = 0xff6b;
  t.ostrokeacute = 0x01ff;
  t.osuperior = 0xf6f0;
  t.otcyrillic = 0x047f;
  t.otilde = 0x00f5;
  t.otildeacute = 0x1e4d;
  t.otildedieresis = 0x1e4f;
  t.oubopomofo = 0x3121;
  t.overline = 0x203e;
  t.overlinecenterline = 0xfe4a;
  t.overlinecmb = 0x0305;
  t.overlinedashed = 0xfe49;
  t.overlinedblwavy = 0xfe4c;
  t.overlinewavy = 0xfe4b;
  t.overscore = 0x00af;
  t.ovowelsignbengali = 0x09cb;
  t.ovowelsigndeva = 0x094b;
  t.ovowelsigngujarati = 0x0acb;
  t.p = 0x0070;
  t.paampssquare = 0x3380;
  t.paasentosquare = 0x332b;
  t.pabengali = 0x09aa;
  t.pacute = 0x1e55;
  t.padeva = 0x092a;
  t.pagedown = 0x21df;
  t.pageup = 0x21de;
  t.pagujarati = 0x0aaa;
  t.pagurmukhi = 0x0a2a;
  t.pahiragana = 0x3071;
  t.paiyannoithai = 0x0e2f;
  t.pakatakana = 0x30d1;
  t.palatalizationcyrilliccmb = 0x0484;
  t.palochkacyrillic = 0x04c0;
  t.pansioskorean = 0x317f;
  t.paragraph = 0x00b6;
  t.parallel = 0x2225;
  t.parenleft = 0x0028;
  t.parenleftaltonearabic = 0xfd3e;
  t.parenleftbt = 0xf8ed;
  t.parenleftex = 0xf8ec;
  t.parenleftinferior = 0x208d;
  t.parenleftmonospace = 0xff08;
  t.parenleftsmall = 0xfe59;
  t.parenleftsuperior = 0x207d;
  t.parenlefttp = 0xf8eb;
  t.parenleftvertical = 0xfe35;
  t.parenright = 0x0029;
  t.parenrightaltonearabic = 0xfd3f;
  t.parenrightbt = 0xf8f8;
  t.parenrightex = 0xf8f7;
  t.parenrightinferior = 0x208e;
  t.parenrightmonospace = 0xff09;
  t.parenrightsmall = 0xfe5a;
  t.parenrightsuperior = 0x207e;
  t.parenrighttp = 0xf8f6;
  t.parenrightvertical = 0xfe36;
  t.partialdiff = 0x2202;
  t.paseqhebrew = 0x05c0;
  t.pashtahebrew = 0x0599;
  t.pasquare = 0x33a9;
  t.patah = 0x05b7;
  t.patah11 = 0x05b7;
  t.patah1d = 0x05b7;
  t.patah2a = 0x05b7;
  t.patahhebrew = 0x05b7;
  t.patahnarrowhebrew = 0x05b7;
  t.patahquarterhebrew = 0x05b7;
  t.patahwidehebrew = 0x05b7;
  t.pazerhebrew = 0x05a1;
  t.pbopomofo = 0x3106;
  t.pcircle = 0x24df;
  t.pdotaccent = 0x1e57;
  t.pe = 0x05e4;
  t.pecyrillic = 0x043f;
  t.pedagesh = 0xfb44;
  t.pedageshhebrew = 0xfb44;
  t.peezisquare = 0x333b;
  t.pefinaldageshhebrew = 0xfb43;
  t.peharabic = 0x067e;
  t.peharmenian = 0x057a;
  t.pehebrew = 0x05e4;
  t.pehfinalarabic = 0xfb57;
  t.pehinitialarabic = 0xfb58;
  t.pehiragana = 0x307a;
  t.pehmedialarabic = 0xfb59;
  t.pekatakana = 0x30da;
  t.pemiddlehookcyrillic = 0x04a7;
  t.perafehebrew = 0xfb4e;
  t.percent = 0x0025;
  t.percentarabic = 0x066a;
  t.percentmonospace = 0xff05;
  t.percentsmall = 0xfe6a;
  t.period = 0x002e;
  t.periodarmenian = 0x0589;
  t.periodcentered = 0x00b7;
  t.periodhalfwidth = 0xff61;
  t.periodinferior = 0xf6e7;
  t.periodmonospace = 0xff0e;
  t.periodsmall = 0xfe52;
  t.periodsuperior = 0xf6e8;
  t.perispomenigreekcmb = 0x0342;
  t.perpendicular = 0x22a5;
  t.perthousand = 0x2030;
  t.peseta = 0x20a7;
  t.pfsquare = 0x338a;
  t.phabengali = 0x09ab;
  t.phadeva = 0x092b;
  t.phagujarati = 0x0aab;
  t.phagurmukhi = 0x0a2b;
  t.phi = 0x03c6;
  t.phi1 = 0x03d5;
  t.phieuphacirclekorean = 0x327a;
  t.phieuphaparenkorean = 0x321a;
  t.phieuphcirclekorean = 0x326c;
  t.phieuphkorean = 0x314d;
  t.phieuphparenkorean = 0x320c;
  t.philatin = 0x0278;
  t.phinthuthai = 0x0e3a;
  t.phisymbolgreek = 0x03d5;
  t.phook = 0x01a5;
  t.phophanthai = 0x0e1e;
  t.phophungthai = 0x0e1c;
  t.phosamphaothai = 0x0e20;
  t.pi = 0x03c0;
  t.pieupacirclekorean = 0x3273;
  t.pieupaparenkorean = 0x3213;
  t.pieupcieuckorean = 0x3176;
  t.pieupcirclekorean = 0x3265;
  t.pieupkiyeokkorean = 0x3172;
  t.pieupkorean = 0x3142;
  t.pieupparenkorean = 0x3205;
  t.pieupsioskiyeokkorean = 0x3174;
  t.pieupsioskorean = 0x3144;
  t.pieupsiostikeutkorean = 0x3175;
  t.pieupthieuthkorean = 0x3177;
  t.pieuptikeutkorean = 0x3173;
  t.pihiragana = 0x3074;
  t.pikatakana = 0x30d4;
  t.pisymbolgreek = 0x03d6;
  t.piwrarmenian = 0x0583;
  t.planckover2pi = 0x210f;
  t.planckover2pi1 = 0x210f;
  t.plus = 0x002b;
  t.plusbelowcmb = 0x031f;
  t.pluscircle = 0x2295;
  t.plusminus = 0x00b1;
  t.plusmod = 0x02d6;
  t.plusmonospace = 0xff0b;
  t.plussmall = 0xfe62;
  t.plussuperior = 0x207a;
  t.pmonospace = 0xff50;
  t.pmsquare = 0x33d8;
  t.pohiragana = 0x307d;
  t.pointingindexdownwhite = 0x261f;
  t.pointingindexleftwhite = 0x261c;
  t.pointingindexrightwhite = 0x261e;
  t.pointingindexupwhite = 0x261d;
  t.pokatakana = 0x30dd;
  t.poplathai = 0x0e1b;
  t.postalmark = 0x3012;
  t.postalmarkface = 0x3020;
  t.pparen = 0x24ab;
  t.precedes = 0x227a;
  t.prescription = 0x211e;
  t.primemod = 0x02b9;
  t.primereversed = 0x2035;
  t.product = 0x220f;
  t.projective = 0x2305;
  t.prolongedkana = 0x30fc;
  t.propellor = 0x2318;
  t.propersubset = 0x2282;
  t.propersuperset = 0x2283;
  t.proportion = 0x2237;
  t.proportional = 0x221d;
  t.psi = 0x03c8;
  t.psicyrillic = 0x0471;
  t.psilipneumatacyrilliccmb = 0x0486;
  t.pssquare = 0x33b0;
  t.puhiragana = 0x3077;
  t.pukatakana = 0x30d7;
  t.pvsquare = 0x33b4;
  t.pwsquare = 0x33ba;
  t.q = 0x0071;
  t.qadeva = 0x0958;
  t.qadmahebrew = 0x05a8;
  t.qafarabic = 0x0642;
  t.qaffinalarabic = 0xfed6;
  t.qafinitialarabic = 0xfed7;
  t.qafmedialarabic = 0xfed8;
  t.qamats = 0x05b8;
  t.qamats10 = 0x05b8;
  t.qamats1a = 0x05b8;
  t.qamats1c = 0x05b8;
  t.qamats27 = 0x05b8;
  t.qamats29 = 0x05b8;
  t.qamats33 = 0x05b8;
  t.qamatsde = 0x05b8;
  t.qamatshebrew = 0x05b8;
  t.qamatsnarrowhebrew = 0x05b8;
  t.qamatsqatanhebrew = 0x05b8;
  t.qamatsqatannarrowhebrew = 0x05b8;
  t.qamatsqatanquarterhebrew = 0x05b8;
  t.qamatsqatanwidehebrew = 0x05b8;
  t.qamatsquarterhebrew = 0x05b8;
  t.qamatswidehebrew = 0x05b8;
  t.qarneyparahebrew = 0x059f;
  t.qbopomofo = 0x3111;
  t.qcircle = 0x24e0;
  t.qhook = 0x02a0;
  t.qmonospace = 0xff51;
  t.qof = 0x05e7;
  t.qofdagesh = 0xfb47;
  t.qofdageshhebrew = 0xfb47;
  t.qofhebrew = 0x05e7;
  t.qparen = 0x24ac;
  t.quarternote = 0x2669;
  t.qubuts = 0x05bb;
  t.qubuts18 = 0x05bb;
  t.qubuts25 = 0x05bb;
  t.qubuts31 = 0x05bb;
  t.qubutshebrew = 0x05bb;
  t.qubutsnarrowhebrew = 0x05bb;
  t.qubutsquarterhebrew = 0x05bb;
  t.qubutswidehebrew = 0x05bb;
  t.question = 0x003f;
  t.questionarabic = 0x061f;
  t.questionarmenian = 0x055e;
  t.questiondown = 0x00bf;
  t.questiondownsmall = 0xf7bf;
  t.questiongreek = 0x037e;
  t.questionmonospace = 0xff1f;
  t.questionsmall = 0xf73f;
  t.quotedbl = 0x0022;
  t.quotedblbase = 0x201e;
  t.quotedblleft = 0x201c;
  t.quotedblmonospace = 0xff02;
  t.quotedblprime = 0x301e;
  t.quotedblprimereversed = 0x301d;
  t.quotedblright = 0x201d;
  t.quoteleft = 0x2018;
  t.quoteleftreversed = 0x201b;
  t.quotereversed = 0x201b;
  t.quoteright = 0x2019;
  t.quoterightn = 0x0149;
  t.quotesinglbase = 0x201a;
  t.quotesingle = 0x0027;
  t.quotesinglemonospace = 0xff07;
  t.r = 0x0072;
  t.raarmenian = 0x057c;
  t.rabengali = 0x09b0;
  t.racute = 0x0155;
  t.radeva = 0x0930;
  t.radical = 0x221a;
  t.radicalex = 0xf8e5;
  t.radoverssquare = 0x33ae;
  t.radoverssquaredsquare = 0x33af;
  t.radsquare = 0x33ad;
  t.rafe = 0x05bf;
  t.rafehebrew = 0x05bf;
  t.ragujarati = 0x0ab0;
  t.ragurmukhi = 0x0a30;
  t.rahiragana = 0x3089;
  t.rakatakana = 0x30e9;
  t.rakatakanahalfwidth = 0xff97;
  t.ralowerdiagonalbengali = 0x09f1;
  t.ramiddlediagonalbengali = 0x09f0;
  t.ramshorn = 0x0264;
  t.ratio = 0x2236;
  t.rbopomofo = 0x3116;
  t.rcaron = 0x0159;
  t.rcedilla = 0x0157;
  t.rcircle = 0x24e1;
  t.rcommaaccent = 0x0157;
  t.rdblgrave = 0x0211;
  t.rdotaccent = 0x1e59;
  t.rdotbelow = 0x1e5b;
  t.rdotbelowmacron = 0x1e5d;
  t.referencemark = 0x203b;
  t.reflexsubset = 0x2286;
  t.reflexsuperset = 0x2287;
  t.registered = 0x00ae;
  t.registersans = 0xf8e8;
  t.registerserif = 0xf6da;
  t.reharabic = 0x0631;
  t.reharmenian = 0x0580;
  t.rehfinalarabic = 0xfeae;
  t.rehiragana = 0x308c;
  t.rekatakana = 0x30ec;
  t.rekatakanahalfwidth = 0xff9a;
  t.resh = 0x05e8;
  t.reshdageshhebrew = 0xfb48;
  t.reshhebrew = 0x05e8;
  t.reversedtilde = 0x223d;
  t.reviahebrew = 0x0597;
  t.reviamugrashhebrew = 0x0597;
  t.revlogicalnot = 0x2310;
  t.rfishhook = 0x027e;
  t.rfishhookreversed = 0x027f;
  t.rhabengali = 0x09dd;
  t.rhadeva = 0x095d;
  t.rho = 0x03c1;
  t.rhook = 0x027d;
  t.rhookturned = 0x027b;
  t.rhookturnedsuperior = 0x02b5;
  t.rhosymbolgreek = 0x03f1;
  t.rhotichookmod = 0x02de;
  t.rieulacirclekorean = 0x3271;
  t.rieulaparenkorean = 0x3211;
  t.rieulcirclekorean = 0x3263;
  t.rieulhieuhkorean = 0x3140;
  t.rieulkiyeokkorean = 0x313a;
  t.rieulkiyeoksioskorean = 0x3169;
  t.rieulkorean = 0x3139;
  t.rieulmieumkorean = 0x313b;
  t.rieulpansioskorean = 0x316c;
  t.rieulparenkorean = 0x3203;
  t.rieulphieuphkorean = 0x313f;
  t.rieulpieupkorean = 0x313c;
  t.rieulpieupsioskorean = 0x316b;
  t.rieulsioskorean = 0x313d;
  t.rieulthieuthkorean = 0x313e;
  t.rieultikeutkorean = 0x316a;
  t.rieulyeorinhieuhkorean = 0x316d;
  t.rightangle = 0x221f;
  t.righttackbelowcmb = 0x0319;
  t.righttriangle = 0x22bf;
  t.rihiragana = 0x308a;
  t.rikatakana = 0x30ea;
  t.rikatakanahalfwidth = 0xff98;
  t.ring = 0x02da;
  t.ringbelowcmb = 0x0325;
  t.ringcmb = 0x030a;
  t.ringhalfleft = 0x02bf;
  t.ringhalfleftarmenian = 0x0559;
  t.ringhalfleftbelowcmb = 0x031c;
  t.ringhalfleftcentered = 0x02d3;
  t.ringhalfright = 0x02be;
  t.ringhalfrightbelowcmb = 0x0339;
  t.ringhalfrightcentered = 0x02d2;
  t.rinvertedbreve = 0x0213;
  t.rittorusquare = 0x3351;
  t.rlinebelow = 0x1e5f;
  t.rlongleg = 0x027c;
  t.rlonglegturned = 0x027a;
  t.rmonospace = 0xff52;
  t.rohiragana = 0x308d;
  t.rokatakana = 0x30ed;
  t.rokatakanahalfwidth = 0xff9b;
  t.roruathai = 0x0e23;
  t.rparen = 0x24ad;
  t.rrabengali = 0x09dc;
  t.rradeva = 0x0931;
  t.rragurmukhi = 0x0a5c;
  t.rreharabic = 0x0691;
  t.rrehfinalarabic = 0xfb8d;
  t.rrvocalicbengali = 0x09e0;
  t.rrvocalicdeva = 0x0960;
  t.rrvocalicgujarati = 0x0ae0;
  t.rrvocalicvowelsignbengali = 0x09c4;
  t.rrvocalicvowelsigndeva = 0x0944;
  t.rrvocalicvowelsigngujarati = 0x0ac4;
  t.rsuperior = 0xf6f1;
  t.rtblock = 0x2590;
  t.rturned = 0x0279;
  t.rturnedsuperior = 0x02b4;
  t.ruhiragana = 0x308b;
  t.rukatakana = 0x30eb;
  t.rukatakanahalfwidth = 0xff99;
  t.rupeemarkbengali = 0x09f2;
  t.rupeesignbengali = 0x09f3;
  t.rupiah = 0xf6dd;
  t.ruthai = 0x0e24;
  t.rvocalicbengali = 0x098b;
  t.rvocalicdeva = 0x090b;
  t.rvocalicgujarati = 0x0a8b;
  t.rvocalicvowelsignbengali = 0x09c3;
  t.rvocalicvowelsigndeva = 0x0943;
  t.rvocalicvowelsigngujarati = 0x0ac3;
  t.s = 0x0073;
  t.sabengali = 0x09b8;
  t.sacute = 0x015b;
  t.sacutedotaccent = 0x1e65;
  t.sadarabic = 0x0635;
  t.sadeva = 0x0938;
  t.sadfinalarabic = 0xfeba;
  t.sadinitialarabic = 0xfebb;
  t.sadmedialarabic = 0xfebc;
  t.sagujarati = 0x0ab8;
  t.sagurmukhi = 0x0a38;
  t.sahiragana = 0x3055;
  t.sakatakana = 0x30b5;
  t.sakatakanahalfwidth = 0xff7b;
  t.sallallahoualayhewasallamarabic = 0xfdfa;
  t.samekh = 0x05e1;
  t.samekhdagesh = 0xfb41;
  t.samekhdageshhebrew = 0xfb41;
  t.samekhhebrew = 0x05e1;
  t.saraaathai = 0x0e32;
  t.saraaethai = 0x0e41;
  t.saraaimaimalaithai = 0x0e44;
  t.saraaimaimuanthai = 0x0e43;
  t.saraamthai = 0x0e33;
  t.saraathai = 0x0e30;
  t.saraethai = 0x0e40;
  t.saraiileftthai = 0xf886;
  t.saraiithai = 0x0e35;
  t.saraileftthai = 0xf885;
  t.saraithai = 0x0e34;
  t.saraothai = 0x0e42;
  t.saraueeleftthai = 0xf888;
  t.saraueethai = 0x0e37;
  t.saraueleftthai = 0xf887;
  t.sarauethai = 0x0e36;
  t.sarauthai = 0x0e38;
  t.sarauuthai = 0x0e39;
  t.sbopomofo = 0x3119;
  t.scaron = 0x0161;
  t.scarondotaccent = 0x1e67;
  t.scedilla = 0x015f;
  t.schwa = 0x0259;
  t.schwacyrillic = 0x04d9;
  t.schwadieresiscyrillic = 0x04db;
  t.schwahook = 0x025a;
  t.scircle = 0x24e2;
  t.scircumflex = 0x015d;
  t.scommaaccent = 0x0219;
  t.sdotaccent = 0x1e61;
  t.sdotbelow = 0x1e63;
  t.sdotbelowdotaccent = 0x1e69;
  t.seagullbelowcmb = 0x033c;
  t.second = 0x2033;
  t.secondtonechinese = 0x02ca;
  t.section = 0x00a7;
  t.seenarabic = 0x0633;
  t.seenfinalarabic = 0xfeb2;
  t.seeninitialarabic = 0xfeb3;
  t.seenmedialarabic = 0xfeb4;
  t.segol = 0x05b6;
  t.segol13 = 0x05b6;
  t.segol1f = 0x05b6;
  t.segol2c = 0x05b6;
  t.segolhebrew = 0x05b6;
  t.segolnarrowhebrew = 0x05b6;
  t.segolquarterhebrew = 0x05b6;
  t.segoltahebrew = 0x0592;
  t.segolwidehebrew = 0x05b6;
  t.seharmenian = 0x057d;
  t.sehiragana = 0x305b;
  t.sekatakana = 0x30bb;
  t.sekatakanahalfwidth = 0xff7e;
  t.semicolon = 0x003b;
  t.semicolonarabic = 0x061b;
  t.semicolonmonospace = 0xff1b;
  t.semicolonsmall = 0xfe54;
  t.semivoicedmarkkana = 0x309c;
  t.semivoicedmarkkanahalfwidth = 0xff9f;
  t.sentisquare = 0x3322;
  t.sentosquare = 0x3323;
  t.seven = 0x0037;
  t.sevenarabic = 0x0667;
  t.sevenbengali = 0x09ed;
  t.sevencircle = 0x2466;
  t.sevencircleinversesansserif = 0x2790;
  t.sevendeva = 0x096d;
  t.seveneighths = 0x215e;
  t.sevengujarati = 0x0aed;
  t.sevengurmukhi = 0x0a6d;
  t.sevenhackarabic = 0x0667;
  t.sevenhangzhou = 0x3027;
  t.sevenideographicparen = 0x3226;
  t.seveninferior = 0x2087;
  t.sevenmonospace = 0xff17;
  t.sevenoldstyle = 0xf737;
  t.sevenparen = 0x247a;
  t.sevenperiod = 0x248e;
  t.sevenpersian = 0x06f7;
  t.sevenroman = 0x2176;
  t.sevensuperior = 0x2077;
  t.seventeencircle = 0x2470;
  t.seventeenparen = 0x2484;
  t.seventeenperiod = 0x2498;
  t.seventhai = 0x0e57;
  t.sfthyphen = 0x00ad;
  t.shaarmenian = 0x0577;
  t.shabengali = 0x09b6;
  t.shacyrillic = 0x0448;
  t.shaddaarabic = 0x0651;
  t.shaddadammaarabic = 0xfc61;
  t.shaddadammatanarabic = 0xfc5e;
  t.shaddafathaarabic = 0xfc60;
  t.shaddakasraarabic = 0xfc62;
  t.shaddakasratanarabic = 0xfc5f;
  t.shade = 0x2592;
  t.shadedark = 0x2593;
  t.shadelight = 0x2591;
  t.shademedium = 0x2592;
  t.shadeva = 0x0936;
  t.shagujarati = 0x0ab6;
  t.shagurmukhi = 0x0a36;
  t.shalshelethebrew = 0x0593;
  t.shbopomofo = 0x3115;
  t.shchacyrillic = 0x0449;
  t.sheenarabic = 0x0634;
  t.sheenfinalarabic = 0xfeb6;
  t.sheeninitialarabic = 0xfeb7;
  t.sheenmedialarabic = 0xfeb8;
  t.sheicoptic = 0x03e3;
  t.sheqel = 0x20aa;
  t.sheqelhebrew = 0x20aa;
  t.sheva = 0x05b0;
  t.sheva115 = 0x05b0;
  t.sheva15 = 0x05b0;
  t.sheva22 = 0x05b0;
  t.sheva2e = 0x05b0;
  t.shevahebrew = 0x05b0;
  t.shevanarrowhebrew = 0x05b0;
  t.shevaquarterhebrew = 0x05b0;
  t.shevawidehebrew = 0x05b0;
  t.shhacyrillic = 0x04bb;
  t.shimacoptic = 0x03ed;
  t.shin = 0x05e9;
  t.shindagesh = 0xfb49;
  t.shindageshhebrew = 0xfb49;
  t.shindageshshindot = 0xfb2c;
  t.shindageshshindothebrew = 0xfb2c;
  t.shindageshsindot = 0xfb2d;
  t.shindageshsindothebrew = 0xfb2d;
  t.shindothebrew = 0x05c1;
  t.shinhebrew = 0x05e9;
  t.shinshindot = 0xfb2a;
  t.shinshindothebrew = 0xfb2a;
  t.shinsindot = 0xfb2b;
  t.shinsindothebrew = 0xfb2b;
  t.shook = 0x0282;
  t.sigma = 0x03c3;
  t.sigma1 = 0x03c2;
  t.sigmafinal = 0x03c2;
  t.sigmalunatesymbolgreek = 0x03f2;
  t.sihiragana = 0x3057;
  t.sikatakana = 0x30b7;
  t.sikatakanahalfwidth = 0xff7c;
  t.siluqhebrew = 0x05bd;
  t.siluqlefthebrew = 0x05bd;
  t.similar = 0x223c;
  t.sindothebrew = 0x05c2;
  t.siosacirclekorean = 0x3274;
  t.siosaparenkorean = 0x3214;
  t.sioscieuckorean = 0x317e;
  t.sioscirclekorean = 0x3266;
  t.sioskiyeokkorean = 0x317a;
  t.sioskorean = 0x3145;
  t.siosnieunkorean = 0x317b;
  t.siosparenkorean = 0x3206;
  t.siospieupkorean = 0x317d;
  t.siostikeutkorean = 0x317c;
  t.six = 0x0036;
  t.sixarabic = 0x0666;
  t.sixbengali = 0x09ec;
  t.sixcircle = 0x2465;
  t.sixcircleinversesansserif = 0x278f;
  t.sixdeva = 0x096c;
  t.sixgujarati = 0x0aec;
  t.sixgurmukhi = 0x0a6c;
  t.sixhackarabic = 0x0666;
  t.sixhangzhou = 0x3026;
  t.sixideographicparen = 0x3225;
  t.sixinferior = 0x2086;
  t.sixmonospace = 0xff16;
  t.sixoldstyle = 0xf736;
  t.sixparen = 0x2479;
  t.sixperiod = 0x248d;
  t.sixpersian = 0x06f6;
  t.sixroman = 0x2175;
  t.sixsuperior = 0x2076;
  t.sixteencircle = 0x246f;
  t.sixteencurrencydenominatorbengali = 0x09f9;
  t.sixteenparen = 0x2483;
  t.sixteenperiod = 0x2497;
  t.sixthai = 0x0e56;
  t.slash = 0x002f;
  t.slashmonospace = 0xff0f;
  t.slong = 0x017f;
  t.slongdotaccent = 0x1e9b;
  t.smileface = 0x263a;
  t.smonospace = 0xff53;
  t.sofpasuqhebrew = 0x05c3;
  t.softhyphen = 0x00ad;
  t.softsigncyrillic = 0x044c;
  t.sohiragana = 0x305d;
  t.sokatakana = 0x30bd;
  t.sokatakanahalfwidth = 0xff7f;
  t.soliduslongoverlaycmb = 0x0338;
  t.solidusshortoverlaycmb = 0x0337;
  t.sorusithai = 0x0e29;
  t.sosalathai = 0x0e28;
  t.sosothai = 0x0e0b;
  t.sosuathai = 0x0e2a;
  t.space = 0x0020;
  t.spacehackarabic = 0x0020;
  t.spade = 0x2660;
  t.spadesuitblack = 0x2660;
  t.spadesuitwhite = 0x2664;
  t.sparen = 0x24ae;
  t.squarebelowcmb = 0x033b;
  t.squarecc = 0x33c4;
  t.squarecm = 0x339d;
  t.squarediagonalcrosshatchfill = 0x25a9;
  t.squarehorizontalfill = 0x25a4;
  t.squarekg = 0x338f;
  t.squarekm = 0x339e;
  t.squarekmcapital = 0x33ce;
  t.squareln = 0x33d1;
  t.squarelog = 0x33d2;
  t.squaremg = 0x338e;
  t.squaremil = 0x33d5;
  t.squaremm = 0x339c;
  t.squaremsquared = 0x33a1;
  t.squareorthogonalcrosshatchfill = 0x25a6;
  t.squareupperlefttolowerrightfill = 0x25a7;
  t.squareupperrighttolowerleftfill = 0x25a8;
  t.squareverticalfill = 0x25a5;
  t.squarewhitewithsmallblack = 0x25a3;
  t.srsquare = 0x33db;
  t.ssabengali = 0x09b7;
  t.ssadeva = 0x0937;
  t.ssagujarati = 0x0ab7;
  t.ssangcieuckorean = 0x3149;
  t.ssanghieuhkorean = 0x3185;
  t.ssangieungkorean = 0x3180;
  t.ssangkiyeokkorean = 0x3132;
  t.ssangnieunkorean = 0x3165;
  t.ssangpieupkorean = 0x3143;
  t.ssangsioskorean = 0x3146;
  t.ssangtikeutkorean = 0x3138;
  t.ssuperior = 0xf6f2;
  t.sterling = 0x00a3;
  t.sterlingmonospace = 0xffe1;
  t.strokelongoverlaycmb = 0x0336;
  t.strokeshortoverlaycmb = 0x0335;
  t.subset = 0x2282;
  t.subsetnotequal = 0x228a;
  t.subsetorequal = 0x2286;
  t.succeeds = 0x227b;
  t.suchthat = 0x220b;
  t.suhiragana = 0x3059;
  t.sukatakana = 0x30b9;
  t.sukatakanahalfwidth = 0xff7d;
  t.sukunarabic = 0x0652;
  t.summation = 0x2211;
  t.sun = 0x263c;
  t.superset = 0x2283;
  t.supersetnotequal = 0x228b;
  t.supersetorequal = 0x2287;
  t.svsquare = 0x33dc;
  t.syouwaerasquare = 0x337c;
  t.t = 0x0074;
  t.tabengali = 0x09a4;
  t.tackdown = 0x22a4;
  t.tackleft = 0x22a3;
  t.tadeva = 0x0924;
  t.tagujarati = 0x0aa4;
  t.tagurmukhi = 0x0a24;
  t.taharabic = 0x0637;
  t.tahfinalarabic = 0xfec2;
  t.tahinitialarabic = 0xfec3;
  t.tahiragana = 0x305f;
  t.tahmedialarabic = 0xfec4;
  t.taisyouerasquare = 0x337d;
  t.takatakana = 0x30bf;
  t.takatakanahalfwidth = 0xff80;
  t.tatweelarabic = 0x0640;
  t.tau = 0x03c4;
  t.tav = 0x05ea;
  t.tavdages = 0xfb4a;
  t.tavdagesh = 0xfb4a;
  t.tavdageshhebrew = 0xfb4a;
  t.tavhebrew = 0x05ea;
  t.tbar = 0x0167;
  t.tbopomofo = 0x310a;
  t.tcaron = 0x0165;
  t.tccurl = 0x02a8;
  t.tcedilla = 0x0163;
  t.tcheharabic = 0x0686;
  t.tchehfinalarabic = 0xfb7b;
  t.tchehinitialarabic = 0xfb7c;
  t.tchehmedialarabic = 0xfb7d;
  t.tcircle = 0x24e3;
  t.tcircumflexbelow = 0x1e71;
  t.tcommaaccent = 0x0163;
  t.tdieresis = 0x1e97;
  t.tdotaccent = 0x1e6b;
  t.tdotbelow = 0x1e6d;
  t.tecyrillic = 0x0442;
  t.tedescendercyrillic = 0x04ad;
  t.teharabic = 0x062a;
  t.tehfinalarabic = 0xfe96;
  t.tehhahinitialarabic = 0xfca2;
  t.tehhahisolatedarabic = 0xfc0c;
  t.tehinitialarabic = 0xfe97;
  t.tehiragana = 0x3066;
  t.tehjeeminitialarabic = 0xfca1;
  t.tehjeemisolatedarabic = 0xfc0b;
  t.tehmarbutaarabic = 0x0629;
  t.tehmarbutafinalarabic = 0xfe94;
  t.tehmedialarabic = 0xfe98;
  t.tehmeeminitialarabic = 0xfca4;
  t.tehmeemisolatedarabic = 0xfc0e;
  t.tehnoonfinalarabic = 0xfc73;
  t.tekatakana = 0x30c6;
  t.tekatakanahalfwidth = 0xff83;
  t.telephone = 0x2121;
  t.telephoneblack = 0x260e;
  t.telishagedolahebrew = 0x05a0;
  t.telishaqetanahebrew = 0x05a9;
  t.tencircle = 0x2469;
  t.tenideographicparen = 0x3229;
  t.tenparen = 0x247d;
  t.tenperiod = 0x2491;
  t.tenroman = 0x2179;
  t.tesh = 0x02a7;
  t.tet = 0x05d8;
  t.tetdagesh = 0xfb38;
  t.tetdageshhebrew = 0xfb38;
  t.tethebrew = 0x05d8;
  t.tetsecyrillic = 0x04b5;
  t.tevirhebrew = 0x059b;
  t.tevirlefthebrew = 0x059b;
  t.thabengali = 0x09a5;
  t.thadeva = 0x0925;
  t.thagujarati = 0x0aa5;
  t.thagurmukhi = 0x0a25;
  t.thalarabic = 0x0630;
  t.thalfinalarabic = 0xfeac;
  t.thanthakhatlowleftthai = 0xf898;
  t.thanthakhatlowrightthai = 0xf897;
  t.thanthakhatthai = 0x0e4c;
  t.thanthakhatupperleftthai = 0xf896;
  t.theharabic = 0x062b;
  t.thehfinalarabic = 0xfe9a;
  t.thehinitialarabic = 0xfe9b;
  t.thehmedialarabic = 0xfe9c;
  t.thereexists = 0x2203;
  t.therefore = 0x2234;
  t.theta = 0x03b8;
  t.theta1 = 0x03d1;
  t.thetasymbolgreek = 0x03d1;
  t.thieuthacirclekorean = 0x3279;
  t.thieuthaparenkorean = 0x3219;
  t.thieuthcirclekorean = 0x326b;
  t.thieuthkorean = 0x314c;
  t.thieuthparenkorean = 0x320b;
  t.thirteencircle = 0x246c;
  t.thirteenparen = 0x2480;
  t.thirteenperiod = 0x2494;
  t.thonangmonthothai = 0x0e11;
  t.thook = 0x01ad;
  t.thophuthaothai = 0x0e12;
  t.thorn = 0x00fe;
  t.thothahanthai = 0x0e17;
  t.thothanthai = 0x0e10;
  t.thothongthai = 0x0e18;
  t.thothungthai = 0x0e16;
  t.thousandcyrillic = 0x0482;
  t.thousandsseparatorarabic = 0x066c;
  t.thousandsseparatorpersian = 0x066c;
  t.three = 0x0033;
  t.threearabic = 0x0663;
  t.threebengali = 0x09e9;
  t.threecircle = 0x2462;
  t.threecircleinversesansserif = 0x278c;
  t.threedeva = 0x0969;
  t.threeeighths = 0x215c;
  t.threegujarati = 0x0ae9;
  t.threegurmukhi = 0x0a69;
  t.threehackarabic = 0x0663;
  t.threehangzhou = 0x3023;
  t.threeideographicparen = 0x3222;
  t.threeinferior = 0x2083;
  t.threemonospace = 0xff13;
  t.threenumeratorbengali = 0x09f6;
  t.threeoldstyle = 0xf733;
  t.threeparen = 0x2476;
  t.threeperiod = 0x248a;
  t.threepersian = 0x06f3;
  t.threequarters = 0x00be;
  t.threequartersemdash = 0xf6de;
  t.threeroman = 0x2172;
  t.threesuperior = 0x00b3;
  t.threethai = 0x0e53;
  t.thzsquare = 0x3394;
  t.tihiragana = 0x3061;
  t.tikatakana = 0x30c1;
  t.tikatakanahalfwidth = 0xff81;
  t.tikeutacirclekorean = 0x3270;
  t.tikeutaparenkorean = 0x3210;
  t.tikeutcirclekorean = 0x3262;
  t.tikeutkorean = 0x3137;
  t.tikeutparenkorean = 0x3202;
  t.tilde = 0x02dc;
  t.tildebelowcmb = 0x0330;
  t.tildecmb = 0x0303;
  t.tildecomb = 0x0303;
  t.tildedoublecmb = 0x0360;
  t.tildeoperator = 0x223c;
  t.tildeoverlaycmb = 0x0334;
  t.tildeverticalcmb = 0x033e;
  t.timescircle = 0x2297;
  t.tipehahebrew = 0x0596;
  t.tipehalefthebrew = 0x0596;
  t.tippigurmukhi = 0x0a70;
  t.titlocyrilliccmb = 0x0483;
  t.tiwnarmenian = 0x057f;
  t.tlinebelow = 0x1e6f;
  t.tmonospace = 0xff54;
  t.toarmenian = 0x0569;
  t.tohiragana = 0x3068;
  t.tokatakana = 0x30c8;
  t.tokatakanahalfwidth = 0xff84;
  t.tonebarextrahighmod = 0x02e5;
  t.tonebarextralowmod = 0x02e9;
  t.tonebarhighmod = 0x02e6;
  t.tonebarlowmod = 0x02e8;
  t.tonebarmidmod = 0x02e7;
  t.tonefive = 0x01bd;
  t.tonesix = 0x0185;
  t.tonetwo = 0x01a8;
  t.tonos = 0x0384;
  t.tonsquare = 0x3327;
  t.topatakthai = 0x0e0f;
  t.tortoiseshellbracketleft = 0x3014;
  t.tortoiseshellbracketleftsmall = 0xfe5d;
  t.tortoiseshellbracketleftvertical = 0xfe39;
  t.tortoiseshellbracketright = 0x3015;
  t.tortoiseshellbracketrightsmall = 0xfe5e;
  t.tortoiseshellbracketrightvertical = 0xfe3a;
  t.totaothai = 0x0e15;
  t.tpalatalhook = 0x01ab;
  t.tparen = 0x24af;
  t.trademark = 0x2122;
  t.trademarksans = 0xf8ea;
  t.trademarkserif = 0xf6db;
  t.tretroflexhook = 0x0288;
  t.triagdn = 0x25bc;
  t.triaglf = 0x25c4;
  t.triagrt = 0x25ba;
  t.triagup = 0x25b2;
  t.ts = 0x02a6;
  t.tsadi = 0x05e6;
  t.tsadidagesh = 0xfb46;
  t.tsadidageshhebrew = 0xfb46;
  t.tsadihebrew = 0x05e6;
  t.tsecyrillic = 0x0446;
  t.tsere = 0x05b5;
  t.tsere12 = 0x05b5;
  t.tsere1e = 0x05b5;
  t.tsere2b = 0x05b5;
  t.tserehebrew = 0x05b5;
  t.tserenarrowhebrew = 0x05b5;
  t.tserequarterhebrew = 0x05b5;
  t.tserewidehebrew = 0x05b5;
  t.tshecyrillic = 0x045b;
  t.tsuperior = 0xf6f3;
  t.ttabengali = 0x099f;
  t.ttadeva = 0x091f;
  t.ttagujarati = 0x0a9f;
  t.ttagurmukhi = 0x0a1f;
  t.tteharabic = 0x0679;
  t.ttehfinalarabic = 0xfb67;
  t.ttehinitialarabic = 0xfb68;
  t.ttehmedialarabic = 0xfb69;
  t.tthabengali = 0x09a0;
  t.tthadeva = 0x0920;
  t.tthagujarati = 0x0aa0;
  t.tthagurmukhi = 0x0a20;
  t.tturned = 0x0287;
  t.tuhiragana = 0x3064;
  t.tukatakana = 0x30c4;
  t.tukatakanahalfwidth = 0xff82;
  t.tusmallhiragana = 0x3063;
  t.tusmallkatakana = 0x30c3;
  t.tusmallkatakanahalfwidth = 0xff6f;
  t.twelvecircle = 0x246b;
  t.twelveparen = 0x247f;
  t.twelveperiod = 0x2493;
  t.twelveroman = 0x217b;
  t.twentycircle = 0x2473;
  t.twentyhangzhou = 0x5344;
  t.twentyparen = 0x2487;
  t.twentyperiod = 0x249b;
  t.two = 0x0032;
  t.twoarabic = 0x0662;
  t.twobengali = 0x09e8;
  t.twocircle = 0x2461;
  t.twocircleinversesansserif = 0x278b;
  t.twodeva = 0x0968;
  t.twodotenleader = 0x2025;
  t.twodotleader = 0x2025;
  t.twodotleadervertical = 0xfe30;
  t.twogujarati = 0x0ae8;
  t.twogurmukhi = 0x0a68;
  t.twohackarabic = 0x0662;
  t.twohangzhou = 0x3022;
  t.twoideographicparen = 0x3221;
  t.twoinferior = 0x2082;
  t.twomonospace = 0xff12;
  t.twonumeratorbengali = 0x09f5;
  t.twooldstyle = 0xf732;
  t.twoparen = 0x2475;
  t.twoperiod = 0x2489;
  t.twopersian = 0x06f2;
  t.tworoman = 0x2171;
  t.twostroke = 0x01bb;
  t.twosuperior = 0x00b2;
  t.twothai = 0x0e52;
  t.twothirds = 0x2154;
  t.u = 0x0075;
  t.uacute = 0x00fa;
  t.ubar = 0x0289;
  t.ubengali = 0x0989;
  t.ubopomofo = 0x3128;
  t.ubreve = 0x016d;
  t.ucaron = 0x01d4;
  t.ucircle = 0x24e4;
  t.ucircumflex = 0x00fb;
  t.ucircumflexbelow = 0x1e77;
  t.ucyrillic = 0x0443;
  t.udattadeva = 0x0951;
  t.udblacute = 0x0171;
  t.udblgrave = 0x0215;
  t.udeva = 0x0909;
  t.udieresis = 0x00fc;
  t.udieresisacute = 0x01d8;
  t.udieresisbelow = 0x1e73;
  t.udieresiscaron = 0x01da;
  t.udieresiscyrillic = 0x04f1;
  t.udieresisgrave = 0x01dc;
  t.udieresismacron = 0x01d6;
  t.udotbelow = 0x1ee5;
  t.ugrave = 0x00f9;
  t.ugujarati = 0x0a89;
  t.ugurmukhi = 0x0a09;
  t.uhiragana = 0x3046;
  t.uhookabove = 0x1ee7;
  t.uhorn = 0x01b0;
  t.uhornacute = 0x1ee9;
  t.uhorndotbelow = 0x1ef1;
  t.uhorngrave = 0x1eeb;
  t.uhornhookabove = 0x1eed;
  t.uhorntilde = 0x1eef;
  t.uhungarumlaut = 0x0171;
  t.uhungarumlautcyrillic = 0x04f3;
  t.uinvertedbreve = 0x0217;
  t.ukatakana = 0x30a6;
  t.ukatakanahalfwidth = 0xff73;
  t.ukcyrillic = 0x0479;
  t.ukorean = 0x315c;
  t.umacron = 0x016b;
  t.umacroncyrillic = 0x04ef;
  t.umacrondieresis = 0x1e7b;
  t.umatragurmukhi = 0x0a41;
  t.umonospace = 0xff55;
  t.underscore = 0x005f;
  t.underscoredbl = 0x2017;
  t.underscoremonospace = 0xff3f;
  t.underscorevertical = 0xfe33;
  t.underscorewavy = 0xfe4f;
  t.union = 0x222a;
  t.universal = 0x2200;
  t.uogonek = 0x0173;
  t.uparen = 0x24b0;
  t.upblock = 0x2580;
  t.upperdothebrew = 0x05c4;
  t.upsilon = 0x03c5;
  t.upsilondieresis = 0x03cb;
  t.upsilondieresistonos = 0x03b0;
  t.upsilonlatin = 0x028a;
  t.upsilontonos = 0x03cd;
  t.uptackbelowcmb = 0x031d;
  t.uptackmod = 0x02d4;
  t.uragurmukhi = 0x0a73;
  t.uring = 0x016f;
  t.ushortcyrillic = 0x045e;
  t.usmallhiragana = 0x3045;
  t.usmallkatakana = 0x30a5;
  t.usmallkatakanahalfwidth = 0xff69;
  t.ustraightcyrillic = 0x04af;
  t.ustraightstrokecyrillic = 0x04b1;
  t.utilde = 0x0169;
  t.utildeacute = 0x1e79;
  t.utildebelow = 0x1e75;
  t.uubengali = 0x098a;
  t.uudeva = 0x090a;
  t.uugujarati = 0x0a8a;
  t.uugurmukhi = 0x0a0a;
  t.uumatragurmukhi = 0x0a42;
  t.uuvowelsignbengali = 0x09c2;
  t.uuvowelsigndeva = 0x0942;
  t.uuvowelsigngujarati = 0x0ac2;
  t.uvowelsignbengali = 0x09c1;
  t.uvowelsigndeva = 0x0941;
  t.uvowelsigngujarati = 0x0ac1;
  t.v = 0x0076;
  t.vadeva = 0x0935;
  t.vagujarati = 0x0ab5;
  t.vagurmukhi = 0x0a35;
  t.vakatakana = 0x30f7;
  t.vav = 0x05d5;
  t.vavdagesh = 0xfb35;
  t.vavdagesh65 = 0xfb35;
  t.vavdageshhebrew = 0xfb35;
  t.vavhebrew = 0x05d5;
  t.vavholam = 0xfb4b;
  t.vavholamhebrew = 0xfb4b;
  t.vavvavhebrew = 0x05f0;
  t.vavyodhebrew = 0x05f1;
  t.vcircle = 0x24e5;
  t.vdotbelow = 0x1e7f;
  t.vecyrillic = 0x0432;
  t.veharabic = 0x06a4;
  t.vehfinalarabic = 0xfb6b;
  t.vehinitialarabic = 0xfb6c;
  t.vehmedialarabic = 0xfb6d;
  t.vekatakana = 0x30f9;
  t.venus = 0x2640;
  t.verticalbar = 0x007c;
  t.verticallineabovecmb = 0x030d;
  t.verticallinebelowcmb = 0x0329;
  t.verticallinelowmod = 0x02cc;
  t.verticallinemod = 0x02c8;
  t.vewarmenian = 0x057e;
  t.vhook = 0x028b;
  t.vikatakana = 0x30f8;
  t.viramabengali = 0x09cd;
  t.viramadeva = 0x094d;
  t.viramagujarati = 0x0acd;
  t.visargabengali = 0x0983;
  t.visargadeva = 0x0903;
  t.visargagujarati = 0x0a83;
  t.vmonospace = 0xff56;
  t.voarmenian = 0x0578;
  t.voicediterationhiragana = 0x309e;
  t.voicediterationkatakana = 0x30fe;
  t.voicedmarkkana = 0x309b;
  t.voicedmarkkanahalfwidth = 0xff9e;
  t.vokatakana = 0x30fa;
  t.vparen = 0x24b1;
  t.vtilde = 0x1e7d;
  t.vturned = 0x028c;
  t.vuhiragana = 0x3094;
  t.vukatakana = 0x30f4;
  t.w = 0x0077;
  t.wacute = 0x1e83;
  t.waekorean = 0x3159;
  t.wahiragana = 0x308f;
  t.wakatakana = 0x30ef;
  t.wakatakanahalfwidth = 0xff9c;
  t.wakorean = 0x3158;
  t.wasmallhiragana = 0x308e;
  t.wasmallkatakana = 0x30ee;
  t.wattosquare = 0x3357;
  t.wavedash = 0x301c;
  t.wavyunderscorevertical = 0xfe34;
  t.wawarabic = 0x0648;
  t.wawfinalarabic = 0xfeee;
  t.wawhamzaabovearabic = 0x0624;
  t.wawhamzaabovefinalarabic = 0xfe86;
  t.wbsquare = 0x33dd;
  t.wcircle = 0x24e6;
  t.wcircumflex = 0x0175;
  t.wdieresis = 0x1e85;
  t.wdotaccent = 0x1e87;
  t.wdotbelow = 0x1e89;
  t.wehiragana = 0x3091;
  t.weierstrass = 0x2118;
  t.wekatakana = 0x30f1;
  t.wekorean = 0x315e;
  t.weokorean = 0x315d;
  t.wgrave = 0x1e81;
  t.whitebullet = 0x25e6;
  t.whitecircle = 0x25cb;
  t.whitecircleinverse = 0x25d9;
  t.whitecornerbracketleft = 0x300e;
  t.whitecornerbracketleftvertical = 0xfe43;
  t.whitecornerbracketright = 0x300f;
  t.whitecornerbracketrightvertical = 0xfe44;
  t.whitediamond = 0x25c7;
  t.whitediamondcontainingblacksmalldiamond = 0x25c8;
  t.whitedownpointingsmalltriangle = 0x25bf;
  t.whitedownpointingtriangle = 0x25bd;
  t.whiteleftpointingsmalltriangle = 0x25c3;
  t.whiteleftpointingtriangle = 0x25c1;
  t.whitelenticularbracketleft = 0x3016;
  t.whitelenticularbracketright = 0x3017;
  t.whiterightpointingsmalltriangle = 0x25b9;
  t.whiterightpointingtriangle = 0x25b7;
  t.whitesmallsquare = 0x25ab;
  t.whitesmilingface = 0x263a;
  t.whitesquare = 0x25a1;
  t.whitestar = 0x2606;
  t.whitetelephone = 0x260f;
  t.whitetortoiseshellbracketleft = 0x3018;
  t.whitetortoiseshellbracketright = 0x3019;
  t.whiteuppointingsmalltriangle = 0x25b5;
  t.whiteuppointingtriangle = 0x25b3;
  t.wihiragana = 0x3090;
  t.wikatakana = 0x30f0;
  t.wikorean = 0x315f;
  t.wmonospace = 0xff57;
  t.wohiragana = 0x3092;
  t.wokatakana = 0x30f2;
  t.wokatakanahalfwidth = 0xff66;
  t.won = 0x20a9;
  t.wonmonospace = 0xffe6;
  t.wowaenthai = 0x0e27;
  t.wparen = 0x24b2;
  t.wring = 0x1e98;
  t.wsuperior = 0x02b7;
  t.wturned = 0x028d;
  t.wynn = 0x01bf;
  t.x = 0x0078;
  t.xabovecmb = 0x033d;
  t.xbopomofo = 0x3112;
  t.xcircle = 0x24e7;
  t.xdieresis = 0x1e8d;
  t.xdotaccent = 0x1e8b;
  t.xeharmenian = 0x056d;
  t.xi = 0x03be;
  t.xmonospace = 0xff58;
  t.xparen = 0x24b3;
  t.xsuperior = 0x02e3;
  t.y = 0x0079;
  t.yaadosquare = 0x334e;
  t.yabengali = 0x09af;
  t.yacute = 0x00fd;
  t.yadeva = 0x092f;
  t.yaekorean = 0x3152;
  t.yagujarati = 0x0aaf;
  t.yagurmukhi = 0x0a2f;
  t.yahiragana = 0x3084;
  t.yakatakana = 0x30e4;
  t.yakatakanahalfwidth = 0xff94;
  t.yakorean = 0x3151;
  t.yamakkanthai = 0x0e4e;
  t.yasmallhiragana = 0x3083;
  t.yasmallkatakana = 0x30e3;
  t.yasmallkatakanahalfwidth = 0xff6c;
  t.yatcyrillic = 0x0463;
  t.ycircle = 0x24e8;
  t.ycircumflex = 0x0177;
  t.ydieresis = 0x00ff;
  t.ydotaccent = 0x1e8f;
  t.ydotbelow = 0x1ef5;
  t.yeharabic = 0x064a;
  t.yehbarreearabic = 0x06d2;
  t.yehbarreefinalarabic = 0xfbaf;
  t.yehfinalarabic = 0xfef2;
  t.yehhamzaabovearabic = 0x0626;
  t.yehhamzaabovefinalarabic = 0xfe8a;
  t.yehhamzaaboveinitialarabic = 0xfe8b;
  t.yehhamzaabovemedialarabic = 0xfe8c;
  t.yehinitialarabic = 0xfef3;
  t.yehmedialarabic = 0xfef4;
  t.yehmeeminitialarabic = 0xfcdd;
  t.yehmeemisolatedarabic = 0xfc58;
  t.yehnoonfinalarabic = 0xfc94;
  t.yehthreedotsbelowarabic = 0x06d1;
  t.yekorean = 0x3156;
  t.yen = 0x00a5;
  t.yenmonospace = 0xffe5;
  t.yeokorean = 0x3155;
  t.yeorinhieuhkorean = 0x3186;
  t.yerahbenyomohebrew = 0x05aa;
  t.yerahbenyomolefthebrew = 0x05aa;
  t.yericyrillic = 0x044b;
  t.yerudieresiscyrillic = 0x04f9;
  t.yesieungkorean = 0x3181;
  t.yesieungpansioskorean = 0x3183;
  t.yesieungsioskorean = 0x3182;
  t.yetivhebrew = 0x059a;
  t.ygrave = 0x1ef3;
  t.yhook = 0x01b4;
  t.yhookabove = 0x1ef7;
  t.yiarmenian = 0x0575;
  t.yicyrillic = 0x0457;
  t.yikorean = 0x3162;
  t.yinyang = 0x262f;
  t.yiwnarmenian = 0x0582;
  t.ymonospace = 0xff59;
  t.yod = 0x05d9;
  t.yoddagesh = 0xfb39;
  t.yoddageshhebrew = 0xfb39;
  t.yodhebrew = 0x05d9;
  t.yodyodhebrew = 0x05f2;
  t.yodyodpatahhebrew = 0xfb1f;
  t.yohiragana = 0x3088;
  t.yoikorean = 0x3189;
  t.yokatakana = 0x30e8;
  t.yokatakanahalfwidth = 0xff96;
  t.yokorean = 0x315b;
  t.yosmallhiragana = 0x3087;
  t.yosmallkatakana = 0x30e7;
  t.yosmallkatakanahalfwidth = 0xff6e;
  t.yotgreek = 0x03f3;
  t.yoyaekorean = 0x3188;
  t.yoyakorean = 0x3187;
  t.yoyakthai = 0x0e22;
  t.yoyingthai = 0x0e0d;
  t.yparen = 0x24b4;
  t.ypogegrammeni = 0x037a;
  t.ypogegrammenigreekcmb = 0x0345;
  t.yr = 0x01a6;
  t.yring = 0x1e99;
  t.ysuperior = 0x02b8;
  t.ytilde = 0x1ef9;
  t.yturned = 0x028e;
  t.yuhiragana = 0x3086;
  t.yuikorean = 0x318c;
  t.yukatakana = 0x30e6;
  t.yukatakanahalfwidth = 0xff95;
  t.yukorean = 0x3160;
  t.yusbigcyrillic = 0x046b;
  t.yusbigiotifiedcyrillic = 0x046d;
  t.yuslittlecyrillic = 0x0467;
  t.yuslittleiotifiedcyrillic = 0x0469;
  t.yusmallhiragana = 0x3085;
  t.yusmallkatakana = 0x30e5;
  t.yusmallkatakanahalfwidth = 0xff6d;
  t.yuyekorean = 0x318b;
  t.yuyeokorean = 0x318a;
  t.yyabengali = 0x09df;
  t.yyadeva = 0x095f;
  t.z = 0x007a;
  t.zaarmenian = 0x0566;
  t.zacute = 0x017a;
  t.zadeva = 0x095b;
  t.zagurmukhi = 0x0a5b;
  t.zaharabic = 0x0638;
  t.zahfinalarabic = 0xfec6;
  t.zahinitialarabic = 0xfec7;
  t.zahiragana = 0x3056;
  t.zahmedialarabic = 0xfec8;
  t.zainarabic = 0x0632;
  t.zainfinalarabic = 0xfeb0;
  t.zakatakana = 0x30b6;
  t.zaqefgadolhebrew = 0x0595;
  t.zaqefqatanhebrew = 0x0594;
  t.zarqahebrew = 0x0598;
  t.zayin = 0x05d6;
  t.zayindagesh = 0xfb36;
  t.zayindageshhebrew = 0xfb36;
  t.zayinhebrew = 0x05d6;
  t.zbopomofo = 0x3117;
  t.zcaron = 0x017e;
  t.zcircle = 0x24e9;
  t.zcircumflex = 0x1e91;
  t.zcurl = 0x0291;
  t.zdot = 0x017c;
  t.zdotaccent = 0x017c;
  t.zdotbelow = 0x1e93;
  t.zecyrillic = 0x0437;
  t.zedescendercyrillic = 0x0499;
  t.zedieresiscyrillic = 0x04df;
  t.zehiragana = 0x305c;
  t.zekatakana = 0x30bc;
  t.zero = 0x0030;
  t.zeroarabic = 0x0660;
  t.zerobengali = 0x09e6;
  t.zerodeva = 0x0966;
  t.zerogujarati = 0x0ae6;
  t.zerogurmukhi = 0x0a66;
  t.zerohackarabic = 0x0660;
  t.zeroinferior = 0x2080;
  t.zeromonospace = 0xff10;
  t.zerooldstyle = 0xf730;
  t.zeropersian = 0x06f0;
  t.zerosuperior = 0x2070;
  t.zerothai = 0x0e50;
  t.zerowidthjoiner = 0xfeff;
  t.zerowidthnonjoiner = 0x200c;
  t.zerowidthspace = 0x200b;
  t.zeta = 0x03b6;
  t.zhbopomofo = 0x3113;
  t.zhearmenian = 0x056a;
  t.zhebrevecyrillic = 0x04c2;
  t.zhecyrillic = 0x0436;
  t.zhedescendercyrillic = 0x0497;
  t.zhedieresiscyrillic = 0x04dd;
  t.zihiragana = 0x3058;
  t.zikatakana = 0x30b8;
  t.zinorhebrew = 0x05ae;
  t.zlinebelow = 0x1e95;
  t.zmonospace = 0xff5a;
  t.zohiragana = 0x305e;
  t.zokatakana = 0x30be;
  t.zparen = 0x24b5;
  t.zretroflexhook = 0x0290;
  t.zstroke = 0x01b6;
  t.zuhiragana = 0x305a;
  t.zukatakana = 0x30ba;
  t[".notdef"] = 0x0000;
  t.angbracketleftbig = 0x2329;
  t.angbracketleftBig = 0x2329;
  t.angbracketleftbigg = 0x2329;
  t.angbracketleftBigg = 0x2329;
  t.angbracketrightBig = 0x232a;
  t.angbracketrightbig = 0x232a;
  t.angbracketrightBigg = 0x232a;
  t.angbracketrightbigg = 0x232a;
  t.arrowhookleft = 0x21aa;
  t.arrowhookright = 0x21a9;
  t.arrowlefttophalf = 0x21bc;
  t.arrowleftbothalf = 0x21bd;
  t.arrownortheast = 0x2197;
  t.arrownorthwest = 0x2196;
  t.arrowrighttophalf = 0x21c0;
  t.arrowrightbothalf = 0x21c1;
  t.arrowsoutheast = 0x2198;
  t.arrowsouthwest = 0x2199;
  t.backslashbig = 0x2216;
  t.backslashBig = 0x2216;
  t.backslashBigg = 0x2216;
  t.backslashbigg = 0x2216;
  t.bardbl = 0x2016;
  t.bracehtipdownleft = 0xfe37;
  t.bracehtipdownright = 0xfe37;
  t.bracehtipupleft = 0xfe38;
  t.bracehtipupright = 0xfe38;
  t.braceleftBig = 0x007b;
  t.braceleftbig = 0x007b;
  t.braceleftbigg = 0x007b;
  t.braceleftBigg = 0x007b;
  t.bracerightBig = 0x007d;
  t.bracerightbig = 0x007d;
  t.bracerightbigg = 0x007d;
  t.bracerightBigg = 0x007d;
  t.bracketleftbig = 0x005b;
  t.bracketleftBig = 0x005b;
  t.bracketleftbigg = 0x005b;
  t.bracketleftBigg = 0x005b;
  t.bracketrightBig = 0x005d;
  t.bracketrightbig = 0x005d;
  t.bracketrightbigg = 0x005d;
  t.bracketrightBigg = 0x005d;
  t.ceilingleftbig = 0x2308;
  t.ceilingleftBig = 0x2308;
  t.ceilingleftBigg = 0x2308;
  t.ceilingleftbigg = 0x2308;
  t.ceilingrightbig = 0x2309;
  t.ceilingrightBig = 0x2309;
  t.ceilingrightbigg = 0x2309;
  t.ceilingrightBigg = 0x2309;
  t.circledotdisplay = 0x2299;
  t.circledottext = 0x2299;
  t.circlemultiplydisplay = 0x2297;
  t.circlemultiplytext = 0x2297;
  t.circleplusdisplay = 0x2295;
  t.circleplustext = 0x2295;
  t.contintegraldisplay = 0x222e;
  t.contintegraltext = 0x222e;
  t.coproductdisplay = 0x2210;
  t.coproducttext = 0x2210;
  t.floorleftBig = 0x230a;
  t.floorleftbig = 0x230a;
  t.floorleftbigg = 0x230a;
  t.floorleftBigg = 0x230a;
  t.floorrightbig = 0x230b;
  t.floorrightBig = 0x230b;
  t.floorrightBigg = 0x230b;
  t.floorrightbigg = 0x230b;
  t.hatwide = 0x0302;
  t.hatwider = 0x0302;
  t.hatwidest = 0x0302;
  t.intercal = 0x1d40;
  t.integraldisplay = 0x222b;
  t.integraltext = 0x222b;
  t.intersectiondisplay = 0x22c2;
  t.intersectiontext = 0x22c2;
  t.logicalanddisplay = 0x2227;
  t.logicalandtext = 0x2227;
  t.logicalordisplay = 0x2228;
  t.logicalortext = 0x2228;
  t.parenleftBig = 0x0028;
  t.parenleftbig = 0x0028;
  t.parenleftBigg = 0x0028;
  t.parenleftbigg = 0x0028;
  t.parenrightBig = 0x0029;
  t.parenrightbig = 0x0029;
  t.parenrightBigg = 0x0029;
  t.parenrightbigg = 0x0029;
  t.prime = 0x2032;
  t.productdisplay = 0x220f;
  t.producttext = 0x220f;
  t.radicalbig = 0x221a;
  t.radicalBig = 0x221a;
  t.radicalBigg = 0x221a;
  t.radicalbigg = 0x221a;
  t.radicalbt = 0x221a;
  t.radicaltp = 0x221a;
  t.radicalvertex = 0x221a;
  t.slashbig = 0x002f;
  t.slashBig = 0x002f;
  t.slashBigg = 0x002f;
  t.slashbigg = 0x002f;
  t.summationdisplay = 0x2211;
  t.summationtext = 0x2211;
  t.tildewide = 0x02dc;
  t.tildewider = 0x02dc;
  t.tildewidest = 0x02dc;
  t.uniondisplay = 0x22c3;
  t.unionmultidisplay = 0x228e;
  t.unionmultitext = 0x228e;
  t.unionsqdisplay = 0x2294;
  t.unionsqtext = 0x2294;
  t.uniontext = 0x22c3;
  t.vextenddouble = 0x2225;
  t.vextendsingle = 0x2223;
});
const getDingbatsGlyphsUnicode = getLookupTableFactory(function (t) {
  t.space = 0x0020;
  t.a1 = 0x2701;
  t.a2 = 0x2702;
  t.a202 = 0x2703;
  t.a3 = 0x2704;
  t.a4 = 0x260e;
  t.a5 = 0x2706;
  t.a119 = 0x2707;
  t.a118 = 0x2708;
  t.a117 = 0x2709;
  t.a11 = 0x261b;
  t.a12 = 0x261e;
  t.a13 = 0x270c;
  t.a14 = 0x270d;
  t.a15 = 0x270e;
  t.a16 = 0x270f;
  t.a105 = 0x2710;
  t.a17 = 0x2711;
  t.a18 = 0x2712;
  t.a19 = 0x2713;
  t.a20 = 0x2714;
  t.a21 = 0x2715;
  t.a22 = 0x2716;
  t.a23 = 0x2717;
  t.a24 = 0x2718;
  t.a25 = 0x2719;
  t.a26 = 0x271a;
  t.a27 = 0x271b;
  t.a28 = 0x271c;
  t.a6 = 0x271d;
  t.a7 = 0x271e;
  t.a8 = 0x271f;
  t.a9 = 0x2720;
  t.a10 = 0x2721;
  t.a29 = 0x2722;
  t.a30 = 0x2723;
  t.a31 = 0x2724;
  t.a32 = 0x2725;
  t.a33 = 0x2726;
  t.a34 = 0x2727;
  t.a35 = 0x2605;
  t.a36 = 0x2729;
  t.a37 = 0x272a;
  t.a38 = 0x272b;
  t.a39 = 0x272c;
  t.a40 = 0x272d;
  t.a41 = 0x272e;
  t.a42 = 0x272f;
  t.a43 = 0x2730;
  t.a44 = 0x2731;
  t.a45 = 0x2732;
  t.a46 = 0x2733;
  t.a47 = 0x2734;
  t.a48 = 0x2735;
  t.a49 = 0x2736;
  t.a50 = 0x2737;
  t.a51 = 0x2738;
  t.a52 = 0x2739;
  t.a53 = 0x273a;
  t.a54 = 0x273b;
  t.a55 = 0x273c;
  t.a56 = 0x273d;
  t.a57 = 0x273e;
  t.a58 = 0x273f;
  t.a59 = 0x2740;
  t.a60 = 0x2741;
  t.a61 = 0x2742;
  t.a62 = 0x2743;
  t.a63 = 0x2744;
  t.a64 = 0x2745;
  t.a65 = 0x2746;
  t.a66 = 0x2747;
  t.a67 = 0x2748;
  t.a68 = 0x2749;
  t.a69 = 0x274a;
  t.a70 = 0x274b;
  t.a71 = 0x25cf;
  t.a72 = 0x274d;
  t.a73 = 0x25a0;
  t.a74 = 0x274f;
  t.a203 = 0x2750;
  t.a75 = 0x2751;
  t.a204 = 0x2752;
  t.a76 = 0x25b2;
  t.a77 = 0x25bc;
  t.a78 = 0x25c6;
  t.a79 = 0x2756;
  t.a81 = 0x25d7;
  t.a82 = 0x2758;
  t.a83 = 0x2759;
  t.a84 = 0x275a;
  t.a97 = 0x275b;
  t.a98 = 0x275c;
  t.a99 = 0x275d;
  t.a100 = 0x275e;
  t.a101 = 0x2761;
  t.a102 = 0x2762;
  t.a103 = 0x2763;
  t.a104 = 0x2764;
  t.a106 = 0x2765;
  t.a107 = 0x2766;
  t.a108 = 0x2767;
  t.a112 = 0x2663;
  t.a111 = 0x2666;
  t.a110 = 0x2665;
  t.a109 = 0x2660;
  t.a120 = 0x2460;
  t.a121 = 0x2461;
  t.a122 = 0x2462;
  t.a123 = 0x2463;
  t.a124 = 0x2464;
  t.a125 = 0x2465;
  t.a126 = 0x2466;
  t.a127 = 0x2467;
  t.a128 = 0x2468;
  t.a129 = 0x2469;
  t.a130 = 0x2776;
  t.a131 = 0x2777;
  t.a132 = 0x2778;
  t.a133 = 0x2779;
  t.a134 = 0x277a;
  t.a135 = 0x277b;
  t.a136 = 0x277c;
  t.a137 = 0x277d;
  t.a138 = 0x277e;
  t.a139 = 0x277f;
  t.a140 = 0x2780;
  t.a141 = 0x2781;
  t.a142 = 0x2782;
  t.a143 = 0x2783;
  t.a144 = 0x2784;
  t.a145 = 0x2785;
  t.a146 = 0x2786;
  t.a147 = 0x2787;
  t.a148 = 0x2788;
  t.a149 = 0x2789;
  t.a150 = 0x278a;
  t.a151 = 0x278b;
  t.a152 = 0x278c;
  t.a153 = 0x278d;
  t.a154 = 0x278e;
  t.a155 = 0x278f;
  t.a156 = 0x2790;
  t.a157 = 0x2791;
  t.a158 = 0x2792;
  t.a159 = 0x2793;
  t.a160 = 0x2794;
  t.a161 = 0x2192;
  t.a163 = 0x2194;
  t.a164 = 0x2195;
  t.a196 = 0x2798;
  t.a165 = 0x2799;
  t.a192 = 0x279a;
  t.a166 = 0x279b;
  t.a167 = 0x279c;
  t.a168 = 0x279d;
  t.a169 = 0x279e;
  t.a170 = 0x279f;
  t.a171 = 0x27a0;
  t.a172 = 0x27a1;
  t.a173 = 0x27a2;
  t.a162 = 0x27a3;
  t.a174 = 0x27a4;
  t.a175 = 0x27a5;
  t.a176 = 0x27a6;
  t.a177 = 0x27a7;
  t.a178 = 0x27a8;
  t.a179 = 0x27a9;
  t.a193 = 0x27aa;
  t.a180 = 0x27ab;
  t.a199 = 0x27ac;
  t.a181 = 0x27ad;
  t.a200 = 0x27ae;
  t.a182 = 0x27af;
  t.a201 = 0x27b1;
  t.a183 = 0x27b2;
  t.a184 = 0x27b3;
  t.a197 = 0x27b4;
  t.a185 = 0x27b5;
  t.a194 = 0x27b6;
  t.a198 = 0x27b7;
  t.a186 = 0x27b8;
  t.a195 = 0x27b9;
  t.a187 = 0x27ba;
  t.a188 = 0x27bb;
  t.a189 = 0x27bc;
  t.a190 = 0x27bd;
  t.a191 = 0x27be;
  t.a89 = 0x2768;
  t.a90 = 0x2769;
  t.a93 = 0x276a;
  t.a94 = 0x276b;
  t.a91 = 0x276c;
  t.a92 = 0x276d;
  t.a205 = 0x276e;
  t.a85 = 0x276f;
  t.a206 = 0x2770;
  t.a86 = 0x2771;
  t.a87 = 0x2772;
  t.a88 = 0x2773;
  t.a95 = 0x2774;
  t.a96 = 0x2775;
  t[".notdef"] = 0x0000;
});

;// ./src/core/unicode.js

const getSpecialPUASymbols = getLookupTableFactory(function (t) {
  t[63721] = 0x00a9;
  t[63193] = 0x00a9;
  t[63720] = 0x00ae;
  t[63194] = 0x00ae;
  t[63722] = 0x2122;
  t[63195] = 0x2122;
  t[63729] = 0x23a7;
  t[63730] = 0x23a8;
  t[63731] = 0x23a9;
  t[63740] = 0x23ab;
  t[63741] = 0x23ac;
  t[63742] = 0x23ad;
  t[63726] = 0x23a1;
  t[63727] = 0x23a2;
  t[63728] = 0x23a3;
  t[63737] = 0x23a4;
  t[63738] = 0x23a5;
  t[63739] = 0x23a6;
  t[63723] = 0x239b;
  t[63724] = 0x239c;
  t[63725] = 0x239d;
  t[63734] = 0x239e;
  t[63735] = 0x239f;
  t[63736] = 0x23a0;
});
function mapSpecialUnicodeValues(code) {
  if (code >= 0xfff0 && code <= 0xffff) {
    return 0;
  } else if (code >= 0xf600 && code <= 0xf8ff) {
    return getSpecialPUASymbols()[code] || code;
  } else if (code === 0x00ad) {
    return 0x002d;
  }
  return code;
}
function getUnicodeForGlyph(name, glyphsUnicodeMap) {
  let unicode = glyphsUnicodeMap[name];
  if (unicode !== undefined) {
    return unicode;
  }
  if (!name) {
    return -1;
  }
  if (name[0] === "u") {
    const nameLen = name.length;
    let hexStr;
    if (nameLen === 7 && name[1] === "n" && name[2] === "i") {
      hexStr = name.substring(3);
    } else if (nameLen >= 5 && nameLen <= 7) {
      hexStr = name.substring(1);
    } else {
      return -1;
    }
    if (hexStr === hexStr.toUpperCase()) {
      unicode = parseInt(hexStr, 16);
      if (unicode >= 0) {
        return unicode;
      }
    }
  }
  return -1;
}
const UnicodeRanges = [[0x0000, 0x007f], [0x0080, 0x00ff], [0x0100, 0x017f], [0x0180, 0x024f], [0x0250, 0x02af, 0x1d00, 0x1d7f, 0x1d80, 0x1dbf], [0x02b0, 0x02ff, 0xa700, 0xa71f], [0x0300, 0x036f, 0x1dc0, 0x1dff], [0x0370, 0x03ff], [0x2c80, 0x2cff], [0x0400, 0x04ff, 0x0500, 0x052f, 0x2de0, 0x2dff, 0xa640, 0xa69f], [0x0530, 0x058f], [0x0590, 0x05ff], [0xa500, 0xa63f], [0x0600, 0x06ff, 0x0750, 0x077f], [0x07c0, 0x07ff], [0x0900, 0x097f], [0x0980, 0x09ff], [0x0a00, 0x0a7f], [0x0a80, 0x0aff], [0x0b00, 0x0b7f], [0x0b80, 0x0bff], [0x0c00, 0x0c7f], [0x0c80, 0x0cff], [0x0d00, 0x0d7f], [0x0e00, 0x0e7f], [0x0e80, 0x0eff], [0x10a0, 0x10ff, 0x2d00, 0x2d2f], [0x1b00, 0x1b7f], [0x1100, 0x11ff], [0x1e00, 0x1eff, 0x2c60, 0x2c7f, 0xa720, 0xa7ff], [0x1f00, 0x1fff], [0x2000, 0x206f, 0x2e00, 0x2e7f], [0x2070, 0x209f], [0x20a0, 0x20cf], [0x20d0, 0x20ff], [0x2100, 0x214f], [0x2150, 0x218f], [0x2190, 0x21ff, 0x27f0, 0x27ff, 0x2900, 0x297f, 0x2b00, 0x2bff], [0x2200, 0x22ff, 0x2a00, 0x2aff, 0x27c0, 0x27ef, 0x2980, 0x29ff], [0x2300, 0x23ff], [0x2400, 0x243f], [0x2440, 0x245f], [0x2460, 0x24ff], [0x2500, 0x257f], [0x2580, 0x259f], [0x25a0, 0x25ff], [0x2600, 0x26ff], [0x2700, 0x27bf], [0x3000, 0x303f], [0x3040, 0x309f], [0x30a0, 0x30ff, 0x31f0, 0x31ff], [0x3100, 0x312f, 0x31a0, 0x31bf], [0x3130, 0x318f], [0xa840, 0xa87f], [0x3200, 0x32ff], [0x3300, 0x33ff], [0xac00, 0xd7af], [0xd800, 0xdfff], [0x10900, 0x1091f], [0x4e00, 0x9fff, 0x2e80, 0x2eff, 0x2f00, 0x2fdf, 0x2ff0, 0x2fff, 0x3400, 0x4dbf, 0x20000, 0x2a6df, 0x3190, 0x319f], [0xe000, 0xf8ff], [0x31c0, 0x31ef, 0xf900, 0xfaff, 0x2f800, 0x2fa1f], [0xfb00, 0xfb4f], [0xfb50, 0xfdff], [0xfe20, 0xfe2f], [0xfe10, 0xfe1f], [0xfe50, 0xfe6f], [0xfe70, 0xfeff], [0xff00, 0xffef], [0xfff0, 0xffff], [0x0f00, 0x0fff], [0x0700, 0x074f], [0x0780, 0x07bf], [0x0d80, 0x0dff], [0x1000, 0x109f], [0x1200, 0x137f, 0x1380, 0x139f, 0x2d80, 0x2ddf], [0x13a0, 0x13ff], [0x1400, 0x167f], [0x1680, 0x169f], [0x16a0, 0x16ff], [0x1780, 0x17ff], [0x1800, 0x18af], [0x2800, 0x28ff], [0xa000, 0xa48f], [0x1700, 0x171f, 0x1720, 0x173f, 0x1740, 0x175f, 0x1760, 0x177f], [0x10300, 0x1032f], [0x10330, 0x1034f], [0x10400, 0x1044f], [0x1d000, 0x1d0ff, 0x1d100, 0x1d1ff, 0x1d200, 0x1d24f], [0x1d400, 0x1d7ff], [0xff000, 0xffffd], [0xfe00, 0xfe0f, 0xe0100, 0xe01ef], [0xe0000, 0xe007f], [0x1900, 0x194f], [0x1950, 0x197f], [0x1980, 0x19df], [0x1a00, 0x1a1f], [0x2c00, 0x2c5f], [0x2d30, 0x2d7f], [0x4dc0, 0x4dff], [0xa800, 0xa82f], [0x10000, 0x1007f, 0x10080, 0x100ff, 0x10100, 0x1013f], [0x10140, 0x1018f], [0x10380, 0x1039f], [0x103a0, 0x103df], [0x10450, 0x1047f], [0x10480, 0x104af], [0x10800, 0x1083f], [0x10a00, 0x10a5f], [0x1d300, 0x1d35f], [0x12000, 0x123ff, 0x12400, 0x1247f], [0x1d360, 0x1d37f], [0x1b80, 0x1bbf], [0x1c00, 0x1c4f], [0x1c50, 0x1c7f], [0xa880, 0xa8df], [0xa900, 0xa92f], [0xa930, 0xa95f], [0xaa00, 0xaa5f], [0x10190, 0x101cf], [0x101d0, 0x101ff], [0x102a0, 0x102df, 0x10280, 0x1029f, 0x10920, 0x1093f], [0x1f030, 0x1f09f, 0x1f000, 0x1f02f]];
function getUnicodeRangeFor(value, lastPosition = -1) {
  if (lastPosition !== -1) {
    const range = UnicodeRanges[lastPosition];
    for (let i = 0, ii = range.length; i < ii; i += 2) {
      if (value >= range[i] && value <= range[i + 1]) {
        return lastPosition;
      }
    }
  }
  for (let i = 0, ii = UnicodeRanges.length; i < ii; i++) {
    const range = UnicodeRanges[i];
    for (let j = 0, jj = range.length; j < jj; j += 2) {
      if (value >= range[j] && value <= range[j + 1]) {
        return i;
      }
    }
  }
  return -1;
}
const SpecialCharRegExp = new RegExp("^(\\\\s)|(\\\\p{Mn})|(\\\\p{Cf})$", "u");
const CategoryCache = new Map();
function getCharUnicodeCategory(char) {
  const cachedCategory = CategoryCache.get(char);
  if (cachedCategory) {
    return cachedCategory;
  }
  const groups = char.match(SpecialCharRegExp);
  const category = {
    isWhitespace: !!groups?.[1],
    isZeroWidthDiacritic: !!groups?.[2],
    isInvisibleFormatMark: !!groups?.[3]
  };
  CategoryCache.set(char, category);
  return category;
}
function clearUnicodeCaches() {
  CategoryCache.clear();
}

;// ./src/core/fonts_utils.js





const SEAC_ANALYSIS_ENABLED = true;
const FontFlags = {
  FixedPitch: 1,
  Serif: 2,
  Symbolic: 4,
  Script: 8,
  Nonsymbolic: 32,
  Italic: 64,
  AllCap: 65536,
  SmallCap: 131072,
  ForceBold: 262144
};
const MacStandardGlyphOrdering = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];
function recoverGlyphName(name, glyphsUnicodeMap) {
  if (glyphsUnicodeMap[name] !== undefined) {
    return name;
  }
  const unicode = getUnicodeForGlyph(name, glyphsUnicodeMap);
  if (unicode !== -1) {
    for (const key in glyphsUnicodeMap) {
      if (glyphsUnicodeMap[key] === unicode) {
        return key;
      }
    }
  }
  info("Unable to recover a standard glyph name for: " + name);
  return name;
}
function type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {
  const charCodeToGlyphId = Object.create(null);
  let glyphId, charCode, baseEncoding;
  const isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
  if (properties.isInternalFont) {
    baseEncoding = builtInEncoding;
    for (charCode = 0; charCode < baseEncoding.length; charCode++) {
      glyphId = glyphNames.indexOf(baseEncoding[charCode]);
      charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
    }
  } else if (properties.baseEncodingName) {
    baseEncoding = getEncoding(properties.baseEncodingName);
    for (charCode = 0; charCode < baseEncoding.length; charCode++) {
      glyphId = glyphNames.indexOf(baseEncoding[charCode]);
      charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
    }
  } else if (isSymbolicFont) {
    for (charCode in builtInEncoding) {
      charCodeToGlyphId[charCode] = builtInEncoding[charCode];
    }
  } else {
    baseEncoding = StandardEncoding;
    for (charCode = 0; charCode < baseEncoding.length; charCode++) {
      glyphId = glyphNames.indexOf(baseEncoding[charCode]);
      charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
    }
  }
  const differences = properties.differences;
  let glyphsUnicodeMap;
  if (differences) {
    for (charCode in differences) {
      const glyphName = differences[charCode];
      glyphId = glyphNames.indexOf(glyphName);
      if (glyphId === -1) {
        if (!glyphsUnicodeMap) {
          glyphsUnicodeMap = getGlyphsUnicode();
        }
        const standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);
        if (standardGlyphName !== glyphName) {
          glyphId = glyphNames.indexOf(standardGlyphName);
        }
      }
      charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
    }
  }
  return charCodeToGlyphId;
}
function normalizeFontName(name) {
  return name.replaceAll(/[,_]/g, "-").replaceAll(/\\s/g, "");
}
const getVerticalPresentationForm = getLookupTableFactory(t => {
  t[0x2013] = 0xfe32;
  t[0x2014] = 0xfe31;
  t[0x2025] = 0xfe30;
  t[0x2026] = 0xfe19;
  t[0x3001] = 0xfe11;
  t[0x3002] = 0xfe12;
  t[0x3008] = 0xfe3f;
  t[0x3009] = 0xfe40;
  t[0x300a] = 0xfe3d;
  t[0x300b] = 0xfe3e;
  t[0x300c] = 0xfe41;
  t[0x300d] = 0xfe42;
  t[0x300e] = 0xfe43;
  t[0x300f] = 0xfe44;
  t[0x3010] = 0xfe3b;
  t[0x3011] = 0xfe3c;
  t[0x3014] = 0xfe39;
  t[0x3015] = 0xfe3a;
  t[0x3016] = 0xfe17;
  t[0x3017] = 0xfe18;
  t[0xfe4f] = 0xfe34;
  t[0xff01] = 0xfe15;
  t[0xff08] = 0xfe35;
  t[0xff09] = 0xfe36;
  t[0xff0c] = 0xfe10;
  t[0xff1a] = 0xfe13;
  t[0xff1b] = 0xfe14;
  t[0xff1f] = 0xfe16;
  t[0xff3b] = 0xfe47;
  t[0xff3d] = 0xfe48;
  t[0xff3f] = 0xfe33;
  t[0xff5b] = 0xfe37;
  t[0xff5d] = 0xfe38;
});

;// ./src/core/standard_fonts.js


const getStdFontMap = getLookupTableFactory(function (t) {
  t["Times-Roman"] = "Times-Roman";
  t.Helvetica = "Helvetica";
  t.Courier = "Courier";
  t.Symbol = "Symbol";
  t["Times-Bold"] = "Times-Bold";
  t["Helvetica-Bold"] = "Helvetica-Bold";
  t["Courier-Bold"] = "Courier-Bold";
  t.ZapfDingbats = "ZapfDingbats";
  t["Times-Italic"] = "Times-Italic";
  t["Helvetica-Oblique"] = "Helvetica-Oblique";
  t["Courier-Oblique"] = "Courier-Oblique";
  t["Times-BoldItalic"] = "Times-BoldItalic";
  t["Helvetica-BoldOblique"] = "Helvetica-BoldOblique";
  t["Courier-BoldOblique"] = "Courier-BoldOblique";
  t.ArialNarrow = "Helvetica";
  t["ArialNarrow-Bold"] = "Helvetica-Bold";
  t["ArialNarrow-BoldItalic"] = "Helvetica-BoldOblique";
  t["ArialNarrow-Italic"] = "Helvetica-Oblique";
  t.ArialBlack = "Helvetica";
  t["ArialBlack-Bold"] = "Helvetica-Bold";
  t["ArialBlack-BoldItalic"] = "Helvetica-BoldOblique";
  t["ArialBlack-Italic"] = "Helvetica-Oblique";
  t["Arial-Black"] = "Helvetica";
  t["Arial-Black-Bold"] = "Helvetica-Bold";
  t["Arial-Black-BoldItalic"] = "Helvetica-BoldOblique";
  t["Arial-Black-Italic"] = "Helvetica-Oblique";
  t.Arial = "Helvetica";
  t["Arial-Bold"] = "Helvetica-Bold";
  t["Arial-BoldItalic"] = "Helvetica-BoldOblique";
  t["Arial-Italic"] = "Helvetica-Oblique";
  t.ArialMT = "Helvetica";
  t["Arial-BoldItalicMT"] = "Helvetica-BoldOblique";
  t["Arial-BoldMT"] = "Helvetica-Bold";
  t["Arial-ItalicMT"] = "Helvetica-Oblique";
  t["Arial-BoldItalicMT-BoldItalic"] = "Helvetica-BoldOblique";
  t["Arial-BoldMT-Bold"] = "Helvetica-Bold";
  t["Arial-ItalicMT-Italic"] = "Helvetica-Oblique";
  t.ArialUnicodeMS = "Helvetica";
  t["ArialUnicodeMS-Bold"] = "Helvetica-Bold";
  t["ArialUnicodeMS-BoldItalic"] = "Helvetica-BoldOblique";
  t["ArialUnicodeMS-Italic"] = "Helvetica-Oblique";
  t["Courier-BoldItalic"] = "Courier-BoldOblique";
  t["Courier-Italic"] = "Courier-Oblique";
  t.CourierNew = "Courier";
  t["CourierNew-Bold"] = "Courier-Bold";
  t["CourierNew-BoldItalic"] = "Courier-BoldOblique";
  t["CourierNew-Italic"] = "Courier-Oblique";
  t["CourierNewPS-BoldItalicMT"] = "Courier-BoldOblique";
  t["CourierNewPS-BoldMT"] = "Courier-Bold";
  t["CourierNewPS-ItalicMT"] = "Courier-Oblique";
  t.CourierNewPSMT = "Courier";
  t["Helvetica-BoldItalic"] = "Helvetica-BoldOblique";
  t["Helvetica-Italic"] = "Helvetica-Oblique";
  t["HelveticaLTStd-Bold"] = "Helvetica-Bold";
  t["Symbol-Bold"] = "Symbol";
  t["Symbol-BoldItalic"] = "Symbol";
  t["Symbol-Italic"] = "Symbol";
  t.TimesNewRoman = "Times-Roman";
  t["TimesNewRoman-Bold"] = "Times-Bold";
  t["TimesNewRoman-BoldItalic"] = "Times-BoldItalic";
  t["TimesNewRoman-Italic"] = "Times-Italic";
  t.TimesNewRomanPS = "Times-Roman";
  t["TimesNewRomanPS-Bold"] = "Times-Bold";
  t["TimesNewRomanPS-BoldItalic"] = "Times-BoldItalic";
  t["TimesNewRomanPS-BoldItalicMT"] = "Times-BoldItalic";
  t["TimesNewRomanPS-BoldMT"] = "Times-Bold";
  t["TimesNewRomanPS-Italic"] = "Times-Italic";
  t["TimesNewRomanPS-ItalicMT"] = "Times-Italic";
  t.TimesNewRomanPSMT = "Times-Roman";
  t["TimesNewRomanPSMT-Bold"] = "Times-Bold";
  t["TimesNewRomanPSMT-BoldItalic"] = "Times-BoldItalic";
  t["TimesNewRomanPSMT-Italic"] = "Times-Italic";
});
const getFontNameToFileMap = getLookupTableFactory(function (t) {
  t.Courier = "FoxitFixed.pfb";
  t["Courier-Bold"] = "FoxitFixedBold.pfb";
  t["Courier-BoldOblique"] = "FoxitFixedBoldItalic.pfb";
  t["Courier-Oblique"] = "FoxitFixedItalic.pfb";
  t.Helvetica = "LiberationSans-Regular.ttf";
  t["Helvetica-Bold"] = "LiberationSans-Bold.ttf";
  t["Helvetica-BoldOblique"] = "LiberationSans-BoldItalic.ttf";
  t["Helvetica-Oblique"] = "LiberationSans-Italic.ttf";
  t["Times-Roman"] = "FoxitSerif.pfb";
  t["Times-Bold"] = "FoxitSerifBold.pfb";
  t["Times-BoldItalic"] = "FoxitSerifBoldItalic.pfb";
  t["Times-Italic"] = "FoxitSerifItalic.pfb";
  t.Symbol = "FoxitSymbol.pfb";
  t.ZapfDingbats = "FoxitDingbats.pfb";
  t["LiberationSans-Regular"] = "LiberationSans-Regular.ttf";
  t["LiberationSans-Bold"] = "LiberationSans-Bold.ttf";
  t["LiberationSans-Italic"] = "LiberationSans-Italic.ttf";
  t["LiberationSans-BoldItalic"] = "LiberationSans-BoldItalic.ttf";
});
const getNonStdFontMap = getLookupTableFactory(function (t) {
  t.Calibri = "Helvetica";
  t["Calibri-Bold"] = "Helvetica-Bold";
  t["Calibri-BoldItalic"] = "Helvetica-BoldOblique";
  t["Calibri-Italic"] = "Helvetica-Oblique";
  t.CenturyGothic = "Helvetica";
  t["CenturyGothic-Bold"] = "Helvetica-Bold";
  t["CenturyGothic-BoldItalic"] = "Helvetica-BoldOblique";
  t["CenturyGothic-Italic"] = "Helvetica-Oblique";
  t.ComicSansMS = "Comic Sans MS";
  t["ComicSansMS-Bold"] = "Comic Sans MS-Bold";
  t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic";
  t["ComicSansMS-Italic"] = "Comic Sans MS-Italic";
  t.GillSansMT = "Helvetica";
  t["GillSansMT-Bold"] = "Helvetica-Bold";
  t["GillSansMT-BoldItalic"] = "Helvetica-BoldOblique";
  t["GillSansMT-Italic"] = "Helvetica-Oblique";
  t.Impact = "Helvetica";
  t["ItcSymbol-Bold"] = "Helvetica-Bold";
  t["ItcSymbol-BoldItalic"] = "Helvetica-BoldOblique";
  t["ItcSymbol-Book"] = "Helvetica";
  t["ItcSymbol-BookItalic"] = "Helvetica-Oblique";
  t["ItcSymbol-Medium"] = "Helvetica";
  t["ItcSymbol-MediumItalic"] = "Helvetica-Oblique";
  t.LucidaConsole = "Courier";
  t["LucidaConsole-Bold"] = "Courier-Bold";
  t["LucidaConsole-BoldItalic"] = "Courier-BoldOblique";
  t["LucidaConsole-Italic"] = "Courier-Oblique";
  t["LucidaSans-Demi"] = "Helvetica-Bold";
  t["MS-Gothic"] = "MS Gothic";
  t["MS-Gothic-Bold"] = "MS Gothic-Bold";
  t["MS-Gothic-BoldItalic"] = "MS Gothic-BoldItalic";
  t["MS-Gothic-Italic"] = "MS Gothic-Italic";
  t["MS-Mincho"] = "MS Mincho";
  t["MS-Mincho-Bold"] = "MS Mincho-Bold";
  t["MS-Mincho-BoldItalic"] = "MS Mincho-BoldItalic";
  t["MS-Mincho-Italic"] = "MS Mincho-Italic";
  t["MS-PGothic"] = "MS PGothic";
  t["MS-PGothic-Bold"] = "MS PGothic-Bold";
  t["MS-PGothic-BoldItalic"] = "MS PGothic-BoldItalic";
  t["MS-PGothic-Italic"] = "MS PGothic-Italic";
  t["MS-PMincho"] = "MS PMincho";
  t["MS-PMincho-Bold"] = "MS PMincho-Bold";
  t["MS-PMincho-BoldItalic"] = "MS PMincho-BoldItalic";
  t["MS-PMincho-Italic"] = "MS PMincho-Italic";
  t.NuptialScript = "Times-Italic";
  t.SegoeUISymbol = "Helvetica";
});
const getSerifFonts = getLookupTableFactory(function (t) {
  t["Adobe Jenson"] = true;
  t["Adobe Text"] = true;
  t.Albertus = true;
  t.Aldus = true;
  t.Alexandria = true;
  t.Algerian = true;
  t["American Typewriter"] = true;
  t.Antiqua = true;
  t.Apex = true;
  t.Arno = true;
  t.Aster = true;
  t.Aurora = true;
  t.Baskerville = true;
  t.Bell = true;
  t.Bembo = true;
  t["Bembo Schoolbook"] = true;
  t.Benguiat = true;
  t["Berkeley Old Style"] = true;
  t["Bernhard Modern"] = true;
  t["Berthold City"] = true;
  t.Bodoni = true;
  t["Bauer Bodoni"] = true;
  t["Book Antiqua"] = true;
  t.Bookman = true;
  t["Bordeaux Roman"] = true;
  t["Californian FB"] = true;
  t.Calisto = true;
  t.Calvert = true;
  t.Capitals = true;
  t.Cambria = true;
  t.Cartier = true;
  t.Caslon = true;
  t.Catull = true;
  t.Centaur = true;
  t["Century Old Style"] = true;
  t["Century Schoolbook"] = true;
  t.Chaparral = true;
  t["Charis SIL"] = true;
  t.Cheltenham = true;
  t["Cholla Slab"] = true;
  t.Clarendon = true;
  t.Clearface = true;
  t.Cochin = true;
  t.Colonna = true;
  t["Computer Modern"] = true;
  t["Concrete Roman"] = true;
  t.Constantia = true;
  t["Cooper Black"] = true;
  t.Corona = true;
  t.Ecotype = true;
  t.Egyptienne = true;
  t.Elephant = true;
  t.Excelsior = true;
  t.Fairfield = true;
  t["FF Scala"] = true;
  t.Folkard = true;
  t.Footlight = true;
  t.FreeSerif = true;
  t["Friz Quadrata"] = true;
  t.Garamond = true;
  t.Gentium = true;
  t.Georgia = true;
  t.Gloucester = true;
  t["Goudy Old Style"] = true;
  t["Goudy Schoolbook"] = true;
  t["Goudy Pro Font"] = true;
  t.Granjon = true;
  t["Guardian Egyptian"] = true;
  t.Heather = true;
  t.Hercules = true;
  t["High Tower Text"] = true;
  t.Hiroshige = true;
  t["Hoefler Text"] = true;
  t["Humana Serif"] = true;
  t.Imprint = true;
  t["Ionic No. 5"] = true;
  t.Janson = true;
  t.Joanna = true;
  t.Korinna = true;
  t.Lexicon = true;
  t.LiberationSerif = true;
  t["Liberation Serif"] = true;
  t["Linux Libertine"] = true;
  t.Literaturnaya = true;
  t.Lucida = true;
  t["Lucida Bright"] = true;
  t.Melior = true;
  t.Memphis = true;
  t.Miller = true;
  t.Minion = true;
  t.Modern = true;
  t["Mona Lisa"] = true;
  t["Mrs Eaves"] = true;
  t["MS Serif"] = true;
  t["Museo Slab"] = true;
  t["New York"] = true;
  t["Nimbus Roman"] = true;
  t["NPS Rawlinson Roadway"] = true;
  t.NuptialScript = true;
  t.Palatino = true;
  t.Perpetua = true;
  t.Plantin = true;
  t["Plantin Schoolbook"] = true;
  t.Playbill = true;
  t["Poor Richard"] = true;
  t["Rawlinson Roadway"] = true;
  t.Renault = true;
  t.Requiem = true;
  t.Rockwell = true;
  t.Roman = true;
  t["Rotis Serif"] = true;
  t.Sabon = true;
  t.Scala = true;
  t.Seagull = true;
  t.Sistina = true;
  t.Souvenir = true;
  t.STIX = true;
  t["Stone Informal"] = true;
  t["Stone Serif"] = true;
  t.Sylfaen = true;
  t.Times = true;
  t.Trajan = true;
  t["Trinité"] = true;
  t["Trump Mediaeval"] = true;
  t.Utopia = true;
  t["Vale Type"] = true;
  t["Bitstream Vera"] = true;
  t["Vera Serif"] = true;
  t.Versailles = true;
  t.Wanted = true;
  t.Weiss = true;
  t["Wide Latin"] = true;
  t.Windsor = true;
  t.XITS = true;
});
const getSymbolsFonts = getLookupTableFactory(function (t) {
  t.Dingbats = true;
  t.Symbol = true;
  t.ZapfDingbats = true;
  t.Wingdings = true;
  t["Wingdings-Bold"] = true;
  t["Wingdings-Regular"] = true;
});
const getGlyphMapForStandardFonts = getLookupTableFactory(function (t) {
  t[2] = 10;
  t[3] = 32;
  t[4] = 33;
  t[5] = 34;
  t[6] = 35;
  t[7] = 36;
  t[8] = 37;
  t[9] = 38;
  t[10] = 39;
  t[11] = 40;
  t[12] = 41;
  t[13] = 42;
  t[14] = 43;
  t[15] = 44;
  t[16] = 45;
  t[17] = 46;
  t[18] = 47;
  t[19] = 48;
  t[20] = 49;
  t[21] = 50;
  t[22] = 51;
  t[23] = 52;
  t[24] = 53;
  t[25] = 54;
  t[26] = 55;
  t[27] = 56;
  t[28] = 57;
  t[29] = 58;
  t[30] = 894;
  t[31] = 60;
  t[32] = 61;
  t[33] = 62;
  t[34] = 63;
  t[35] = 64;
  t[36] = 65;
  t[37] = 66;
  t[38] = 67;
  t[39] = 68;
  t[40] = 69;
  t[41] = 70;
  t[42] = 71;
  t[43] = 72;
  t[44] = 73;
  t[45] = 74;
  t[46] = 75;
  t[47] = 76;
  t[48] = 77;
  t[49] = 78;
  t[50] = 79;
  t[51] = 80;
  t[52] = 81;
  t[53] = 82;
  t[54] = 83;
  t[55] = 84;
  t[56] = 85;
  t[57] = 86;
  t[58] = 87;
  t[59] = 88;
  t[60] = 89;
  t[61] = 90;
  t[62] = 91;
  t[63] = 92;
  t[64] = 93;
  t[65] = 94;
  t[66] = 95;
  t[67] = 96;
  t[68] = 97;
  t[69] = 98;
  t[70] = 99;
  t[71] = 100;
  t[72] = 101;
  t[73] = 102;
  t[74] = 103;
  t[75] = 104;
  t[76] = 105;
  t[77] = 106;
  t[78] = 107;
  t[79] = 108;
  t[80] = 109;
  t[81] = 110;
  t[82] = 111;
  t[83] = 112;
  t[84] = 113;
  t[85] = 114;
  t[86] = 115;
  t[87] = 116;
  t[88] = 117;
  t[89] = 118;
  t[90] = 119;
  t[91] = 120;
  t[92] = 121;
  t[93] = 122;
  t[94] = 123;
  t[95] = 124;
  t[96] = 125;
  t[97] = 126;
  t[98] = 196;
  t[99] = 197;
  t[100] = 199;
  t[101] = 201;
  t[102] = 209;
  t[103] = 214;
  t[104] = 220;
  t[105] = 225;
  t[106] = 224;
  t[107] = 226;
  t[108] = 228;
  t[109] = 227;
  t[110] = 229;
  t[111] = 231;
  t[112] = 233;
  t[113] = 232;
  t[114] = 234;
  t[115] = 235;
  t[116] = 237;
  t[117] = 236;
  t[118] = 238;
  t[119] = 239;
  t[120] = 241;
  t[121] = 243;
  t[122] = 242;
  t[123] = 244;
  t[124] = 246;
  t[125] = 245;
  t[126] = 250;
  t[127] = 249;
  t[128] = 251;
  t[129] = 252;
  t[130] = 8224;
  t[131] = 176;
  t[132] = 162;
  t[133] = 163;
  t[134] = 167;
  t[135] = 8226;
  t[136] = 182;
  t[137] = 223;
  t[138] = 174;
  t[139] = 169;
  t[140] = 8482;
  t[141] = 180;
  t[142] = 168;
  t[143] = 8800;
  t[144] = 198;
  t[145] = 216;
  t[146] = 8734;
  t[147] = 177;
  t[148] = 8804;
  t[149] = 8805;
  t[150] = 165;
  t[151] = 181;
  t[152] = 8706;
  t[153] = 8721;
  t[154] = 8719;
  t[156] = 8747;
  t[157] = 170;
  t[158] = 186;
  t[159] = 8486;
  t[160] = 230;
  t[161] = 248;
  t[162] = 191;
  t[163] = 161;
  t[164] = 172;
  t[165] = 8730;
  t[166] = 402;
  t[167] = 8776;
  t[168] = 8710;
  t[169] = 171;
  t[170] = 187;
  t[171] = 8230;
  t[179] = 8220;
  t[180] = 8221;
  t[181] = 8216;
  t[182] = 8217;
  t[200] = 193;
  t[203] = 205;
  t[207] = 211;
  t[210] = 218;
  t[223] = 711;
  t[224] = 321;
  t[225] = 322;
  t[226] = 352;
  t[227] = 353;
  t[228] = 381;
  t[229] = 382;
  t[233] = 221;
  t[234] = 253;
  t[252] = 263;
  t[253] = 268;
  t[254] = 269;
  t[258] = 258;
  t[260] = 260;
  t[261] = 261;
  t[265] = 280;
  t[266] = 281;
  t[267] = 282;
  t[268] = 283;
  t[269] = 313;
  t[275] = 323;
  t[276] = 324;
  t[278] = 328;
  t[283] = 344;
  t[284] = 345;
  t[285] = 346;
  t[286] = 347;
  t[292] = 367;
  t[295] = 377;
  t[296] = 378;
  t[298] = 380;
  t[305] = 963;
  t[306] = 964;
  t[307] = 966;
  t[308] = 8215;
  t[309] = 8252;
  t[310] = 8319;
  t[311] = 8359;
  t[312] = 8592;
  t[313] = 8593;
  t[337] = 9552;
  t[493] = 1039;
  t[494] = 1040;
  t[570] = 1040;
  t[571] = 1041;
  t[572] = 1042;
  t[573] = 1043;
  t[574] = 1044;
  t[575] = 1045;
  t[576] = 1046;
  t[577] = 1047;
  t[578] = 1048;
  t[579] = 1049;
  t[580] = 1050;
  t[581] = 1051;
  t[582] = 1052;
  t[583] = 1053;
  t[584] = 1054;
  t[585] = 1055;
  t[586] = 1056;
  t[587] = 1057;
  t[588] = 1058;
  t[589] = 1059;
  t[590] = 1060;
  t[591] = 1061;
  t[592] = 1062;
  t[593] = 1063;
  t[594] = 1064;
  t[595] = 1065;
  t[596] = 1066;
  t[597] = 1067;
  t[598] = 1068;
  t[599] = 1069;
  t[600] = 1070;
  t[672] = 1488;
  t[673] = 1489;
  t[674] = 1490;
  t[675] = 1491;
  t[676] = 1492;
  t[677] = 1493;
  t[678] = 1494;
  t[679] = 1495;
  t[680] = 1496;
  t[681] = 1497;
  t[682] = 1498;
  t[683] = 1499;
  t[684] = 1500;
  t[685] = 1501;
  t[686] = 1502;
  t[687] = 1503;
  t[688] = 1504;
  t[689] = 1505;
  t[690] = 1506;
  t[691] = 1507;
  t[692] = 1508;
  t[693] = 1509;
  t[694] = 1510;
  t[695] = 1511;
  t[696] = 1512;
  t[697] = 1513;
  t[698] = 1514;
  t[705] = 1524;
  t[706] = 8362;
  t[710] = 64288;
  t[711] = 64298;
  t[759] = 1617;
  t[761] = 1776;
  t[763] = 1778;
  t[775] = 1652;
  t[777] = 1764;
  t[778] = 1780;
  t[779] = 1781;
  t[780] = 1782;
  t[782] = 771;
  t[783] = 64726;
  t[786] = 8363;
  t[788] = 8532;
  t[790] = 768;
  t[791] = 769;
  t[792] = 768;
  t[795] = 803;
  t[797] = 64336;
  t[798] = 64337;
  t[799] = 64342;
  t[800] = 64343;
  t[801] = 64344;
  t[802] = 64345;
  t[803] = 64362;
  t[804] = 64363;
  t[805] = 64364;
  t[2424] = 7821;
  t[2425] = 7822;
  t[2426] = 7823;
  t[2427] = 7824;
  t[2428] = 7825;
  t[2429] = 7826;
  t[2430] = 7827;
  t[2433] = 7682;
  t[2678] = 8045;
  t[2679] = 8046;
  t[2830] = 1552;
  t[2838] = 686;
  t[2840] = 751;
  t[2842] = 753;
  t[2843] = 754;
  t[2844] = 755;
  t[2846] = 757;
  t[2856] = 767;
  t[2857] = 848;
  t[2858] = 849;
  t[2862] = 853;
  t[2863] = 854;
  t[2864] = 855;
  t[2865] = 861;
  t[2866] = 862;
  t[2906] = 7460;
  t[2908] = 7462;
  t[2909] = 7463;
  t[2910] = 7464;
  t[2912] = 7466;
  t[2913] = 7467;
  t[2914] = 7468;
  t[2916] = 7470;
  t[2917] = 7471;
  t[2918] = 7472;
  t[2920] = 7474;
  t[2921] = 7475;
  t[2922] = 7476;
  t[2924] = 7478;
  t[2925] = 7479;
  t[2926] = 7480;
  t[2928] = 7482;
  t[2929] = 7483;
  t[2930] = 7484;
  t[2932] = 7486;
  t[2933] = 7487;
  t[2934] = 7488;
  t[2936] = 7490;
  t[2937] = 7491;
  t[2938] = 7492;
  t[2940] = 7494;
  t[2941] = 7495;
  t[2942] = 7496;
  t[2944] = 7498;
  t[2946] = 7500;
  t[2948] = 7502;
  t[2950] = 7504;
  t[2951] = 7505;
  t[2952] = 7506;
  t[2954] = 7508;
  t[2955] = 7509;
  t[2956] = 7510;
  t[2958] = 7512;
  t[2959] = 7513;
  t[2960] = 7514;
  t[2962] = 7516;
  t[2963] = 7517;
  t[2964] = 7518;
  t[2966] = 7520;
  t[2967] = 7521;
  t[2968] = 7522;
  t[2970] = 7524;
  t[2971] = 7525;
  t[2972] = 7526;
  t[2974] = 7528;
  t[2975] = 7529;
  t[2976] = 7530;
  t[2978] = 1537;
  t[2979] = 1538;
  t[2980] = 1539;
  t[2982] = 1549;
  t[2983] = 1551;
  t[2984] = 1552;
  t[2986] = 1554;
  t[2987] = 1555;
  t[2988] = 1556;
  t[2990] = 1623;
  t[2991] = 1624;
  t[2995] = 1775;
  t[2999] = 1791;
  t[3002] = 64290;
  t[3003] = 64291;
  t[3004] = 64292;
  t[3006] = 64294;
  t[3007] = 64295;
  t[3008] = 64296;
  t[3011] = 1900;
  t[3014] = 8223;
  t[3015] = 8244;
  t[3017] = 7532;
  t[3018] = 7533;
  t[3019] = 7534;
  t[3075] = 7590;
  t[3076] = 7591;
  t[3079] = 7594;
  t[3080] = 7595;
  t[3083] = 7598;
  t[3084] = 7599;
  t[3087] = 7602;
  t[3088] = 7603;
  t[3091] = 7606;
  t[3092] = 7607;
  t[3095] = 7610;
  t[3096] = 7611;
  t[3099] = 7614;
  t[3100] = 7615;
  t[3103] = 7618;
  t[3104] = 7619;
  t[3107] = 8337;
  t[3108] = 8338;
  t[3116] = 1884;
  t[3119] = 1885;
  t[3120] = 1885;
  t[3123] = 1886;
  t[3124] = 1886;
  t[3127] = 1887;
  t[3128] = 1887;
  t[3131] = 1888;
  t[3132] = 1888;
  t[3135] = 1889;
  t[3136] = 1889;
  t[3139] = 1890;
  t[3140] = 1890;
  t[3143] = 1891;
  t[3144] = 1891;
  t[3147] = 1892;
  t[3148] = 1892;
  t[3153] = 580;
  t[3154] = 581;
  t[3157] = 584;
  t[3158] = 585;
  t[3161] = 588;
  t[3162] = 589;
  t[3165] = 891;
  t[3166] = 892;
  t[3169] = 1274;
  t[3170] = 1275;
  t[3173] = 1278;
  t[3174] = 1279;
  t[3181] = 7622;
  t[3182] = 7623;
  t[3282] = 11799;
  t[3316] = 578;
  t[3379] = 42785;
  t[3393] = 1159;
  t[3416] = 8377;
});
const getSupplementalGlyphMapForArialBlack = getLookupTableFactory(function (t) {
  t[227] = 322;
  t[264] = 261;
  t[291] = 346;
});
const getSupplementalGlyphMapForCalibri = getLookupTableFactory(function (t) {
  t[1] = 32;
  t[4] = 65;
  t[5] = 192;
  t[6] = 193;
  t[9] = 196;
  t[17] = 66;
  t[18] = 67;
  t[21] = 268;
  t[24] = 68;
  t[28] = 69;
  t[29] = 200;
  t[30] = 201;
  t[32] = 282;
  t[38] = 70;
  t[39] = 71;
  t[44] = 72;
  t[47] = 73;
  t[48] = 204;
  t[49] = 205;
  t[58] = 74;
  t[60] = 75;
  t[62] = 76;
  t[68] = 77;
  t[69] = 78;
  t[75] = 79;
  t[76] = 210;
  t[80] = 214;
  t[87] = 80;
  t[89] = 81;
  t[90] = 82;
  t[92] = 344;
  t[94] = 83;
  t[97] = 352;
  t[100] = 84;
  t[104] = 85;
  t[109] = 220;
  t[115] = 86;
  t[116] = 87;
  t[121] = 88;
  t[122] = 89;
  t[124] = 221;
  t[127] = 90;
  t[129] = 381;
  t[258] = 97;
  t[259] = 224;
  t[260] = 225;
  t[263] = 228;
  t[268] = 261;
  t[271] = 98;
  t[272] = 99;
  t[273] = 263;
  t[275] = 269;
  t[282] = 100;
  t[286] = 101;
  t[287] = 232;
  t[288] = 233;
  t[290] = 283;
  t[295] = 281;
  t[296] = 102;
  t[336] = 103;
  t[346] = 104;
  t[349] = 105;
  t[350] = 236;
  t[351] = 237;
  t[361] = 106;
  t[364] = 107;
  t[367] = 108;
  t[371] = 322;
  t[373] = 109;
  t[374] = 110;
  t[381] = 111;
  t[382] = 242;
  t[383] = 243;
  t[386] = 246;
  t[393] = 112;
  t[395] = 113;
  t[396] = 114;
  t[398] = 345;
  t[400] = 115;
  t[401] = 347;
  t[403] = 353;
  t[410] = 116;
  t[437] = 117;
  t[442] = 252;
  t[448] = 118;
  t[449] = 119;
  t[454] = 120;
  t[455] = 121;
  t[457] = 253;
  t[460] = 122;
  t[462] = 382;
  t[463] = 380;
  t[853] = 44;
  t[855] = 58;
  t[856] = 46;
  t[876] = 47;
  t[878] = 45;
  t[882] = 45;
  t[894] = 40;
  t[895] = 41;
  t[896] = 91;
  t[897] = 93;
  t[923] = 64;
  t[940] = 163;
  t[1004] = 48;
  t[1005] = 49;
  t[1006] = 50;
  t[1007] = 51;
  t[1008] = 52;
  t[1009] = 53;
  t[1010] = 54;
  t[1011] = 55;
  t[1012] = 56;
  t[1013] = 57;
  t[1081] = 37;
  t[1085] = 43;
  t[1086] = 45;
});
function getStandardFontName(name) {
  const fontName = normalizeFontName(name);
  const stdFontMap = getStdFontMap();
  return stdFontMap[fontName];
}
function isKnownFontName(name) {
  const fontName = normalizeFontName(name);
  return !!(getStdFontMap()[fontName] || getNonStdFontMap()[fontName] || getSerifFonts()[fontName] || getSymbolsFonts()[fontName]);
}

;// ./src/core/to_unicode_map.js

class ToUnicodeMap {
  constructor(cmap = []) {
    this._map = cmap;
  }
  get length() {
    return this._map.length;
  }
  forEach(callback) {
    for (const charCode in this._map) {
      callback(charCode, this._map[charCode].codePointAt(0));
    }
  }
  has(i) {
    return this._map[i] !== undefined;
  }
  get(i) {
    return this._map[i];
  }
  charCodeOf(value) {
    const map = this._map;
    if (map.length <= 0x10000) {
      return map.indexOf(value);
    }
    for (const charCode in map) {
      if (map[charCode] === value) {
        return charCode | 0;
      }
    }
    return -1;
  }
  amend(map) {
    for (const charCode in map) {
      this._map[charCode] = map[charCode];
    }
  }
}
class IdentityToUnicodeMap {
  constructor(firstChar, lastChar) {
    this.firstChar = firstChar;
    this.lastChar = lastChar;
  }
  get length() {
    return this.lastChar + 1 - this.firstChar;
  }
  forEach(callback) {
    for (let i = this.firstChar, ii = this.lastChar; i <= ii; i++) {
      callback(i, i);
    }
  }
  has(i) {
    return this.firstChar <= i && i <= this.lastChar;
  }
  get(i) {
    if (this.firstChar <= i && i <= this.lastChar) {
      return String.fromCharCode(i);
    }
    return undefined;
  }
  charCodeOf(v) {
    return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;
  }
  amend(map) {
    unreachable("Should not call amend()");
  }
}

;// ./src/core/cff_font.js



class CFFFont {
  constructor(file, properties) {
    this.properties = properties;
    const parser = new CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);
    this.cff = parser.parse();
    this.cff.duplicateFirstGlyph();
    const compiler = new CFFCompiler(this.cff);
    this.seacs = this.cff.seacs;
    try {
      this.data = compiler.compile();
    } catch {
      warn("Failed to compile font " + properties.loadedName);
      this.data = file;
    }
    this._createBuiltInEncoding();
  }
  get numGlyphs() {
    return this.cff.charStrings.count;
  }
  getCharset() {
    return this.cff.charset.charset;
  }
  getGlyphMapping() {
    const cff = this.cff;
    const properties = this.properties;
    const {
      cidToGidMap,
      cMap
    } = properties;
    const charsets = cff.charset.charset;
    let charCodeToGlyphId;
    let glyphId;
    if (properties.composite) {
      let invCidToGidMap;
      if (cidToGidMap?.length > 0) {
        invCidToGidMap = Object.create(null);
        for (let i = 0, ii = cidToGidMap.length; i < ii; i++) {
          const gid = cidToGidMap[i];
          if (gid !== undefined) {
            invCidToGidMap[gid] = i;
          }
        }
      }
      charCodeToGlyphId = Object.create(null);
      let charCode;
      if (cff.isCIDFont) {
        for (glyphId = 0; glyphId < charsets.length; glyphId++) {
          const cid = charsets[glyphId];
          charCode = cMap.charCodeOf(cid);
          if (invCidToGidMap?.[charCode] !== undefined) {
            charCode = invCidToGidMap[charCode];
          }
          charCodeToGlyphId[charCode] = glyphId;
        }
      } else {
        for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {
          charCode = cMap.charCodeOf(glyphId);
          charCodeToGlyphId[charCode] = glyphId;
        }
      }
      return charCodeToGlyphId;
    }
    let encoding = cff.encoding ? cff.encoding.encoding : null;
    if (properties.isInternalFont) {
      encoding = properties.defaultEncoding;
    }
    charCodeToGlyphId = type1FontGlyphMapping(properties, encoding, charsets);
    return charCodeToGlyphId;
  }
  hasGlyphId(id) {
    return this.cff.hasGlyphId(id);
  }
  _createBuiltInEncoding() {
    const {
      charset,
      encoding
    } = this.cff;
    if (!charset || !encoding) {
      return;
    }
    const charsets = charset.charset,
      encodings = encoding.encoding;
    const map = [];
    for (const charCode in encodings) {
      const glyphId = encodings[charCode];
      if (glyphId >= 0) {
        const glyphName = charsets[glyphId];
        if (glyphName) {
          map[charCode] = glyphName;
        }
      }
    }
    if (map.length > 0) {
      this.properties.builtInEncoding = map;
    }
  }
}

;// ./src/core/font_renderer.js






function getFloat214(data, offset) {
  return readInt16(data, offset) / 16384;
}
function getSubroutineBias(subrs) {
  const numSubrs = subrs.length;
  let bias = 32768;
  if (numSubrs < 1240) {
    bias = 107;
  } else if (numSubrs < 33900) {
    bias = 1131;
  }
  return bias;
}
function parseCmap(data, start, end) {
  const offset = readUint16(data, start + 2) === 1 ? readUint32(data, start + 8) : readUint32(data, start + 16);
  const format = readUint16(data, start + offset);
  let ranges, p, i;
  if (format === 4) {
    readUint16(data, start + offset + 2);
    const segCount = readUint16(data, start + offset + 6) >> 1;
    p = start + offset + 14;
    ranges = [];
    for (i = 0; i < segCount; i++, p += 2) {
      ranges[i] = {
        end: readUint16(data, p)
      };
    }
    p += 2;
    for (i = 0; i < segCount; i++, p += 2) {
      ranges[i].start = readUint16(data, p);
    }
    for (i = 0; i < segCount; i++, p += 2) {
      ranges[i].idDelta = readUint16(data, p);
    }
    for (i = 0; i < segCount; i++, p += 2) {
      let idOffset = readUint16(data, p);
      if (idOffset === 0) {
        continue;
      }
      ranges[i].ids = [];
      for (let j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {
        ranges[i].ids[j] = readUint16(data, p + idOffset);
        idOffset += 2;
      }
    }
    return ranges;
  } else if (format === 12) {
    const groups = readUint32(data, start + offset + 12);
    p = start + offset + 16;
    ranges = [];
    for (i = 0; i < groups; i++) {
      start = readUint32(data, p);
      ranges.push({
        start,
        end: readUint32(data, p + 4),
        idDelta: readUint32(data, p + 8) - start
      });
      p += 12;
    }
    return ranges;
  }
  throw new FormatError(\`unsupported cmap: \${format}\`);
}
function parseCff(data, start, end, seacAnalysisEnabled) {
  const properties = {};
  const parser = new CFFParser(new Stream(data, start, end - start), properties, seacAnalysisEnabled);
  const cff = parser.parse();
  return {
    glyphs: cff.charStrings.objects,
    subrs: cff.topDict.privateDict?.subrsIndex?.objects,
    gsubrs: cff.globalSubrIndex?.objects,
    isCFFCIDFont: cff.isCIDFont,
    fdSelect: cff.fdSelect,
    fdArray: cff.fdArray
  };
}
function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {
  let itemSize, itemDecode;
  if (isGlyphLocationsLong) {
    itemSize = 4;
    itemDecode = readUint32;
  } else {
    itemSize = 2;
    itemDecode = (data, offset) => 2 * readUint16(data, offset);
  }
  const glyphs = [];
  let startOffset = itemDecode(loca, 0);
  for (let j = itemSize; j < loca.length; j += itemSize) {
    const endOffset = itemDecode(loca, j);
    glyphs.push(glyf.subarray(startOffset, endOffset));
    startOffset = endOffset;
  }
  return glyphs;
}
function lookupCmap(ranges, unicode) {
  const code = unicode.codePointAt(0);
  let gid = 0,
    l = 0,
    r = ranges.length - 1;
  while (l < r) {
    const c = l + r + 1 >> 1;
    if (code < ranges[c].start) {
      r = c - 1;
    } else {
      l = c;
    }
  }
  if (ranges[l].start <= code && code <= ranges[l].end) {
    gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 0xffff;
  }
  return {
    charCode: code,
    glyphId: gid
  };
}
function compileGlyf(code, cmds, font) {
  function moveTo(x, y) {
    if (firstPoint) {
      cmds.add("L", firstPoint);
    }
    firstPoint = [x, y];
    cmds.add("M", [x, y]);
  }
  function lineTo(x, y) {
    cmds.add("L", [x, y]);
  }
  function quadraticCurveTo(xa, ya, x, y) {
    cmds.add("Q", [xa, ya, x, y]);
  }
  let i = 0;
  const numberOfContours = readInt16(code, i);
  let flags;
  let firstPoint = null;
  let x = 0,
    y = 0;
  i += 10;
  if (numberOfContours < 0) {
    do {
      flags = readUint16(code, i);
      const glyphIndex = readUint16(code, i + 2);
      i += 4;
      let arg1, arg2;
      if (flags & 0x01) {
        if (flags & 0x02) {
          arg1 = readInt16(code, i);
          arg2 = readInt16(code, i + 2);
        } else {
          arg1 = readUint16(code, i);
          arg2 = readUint16(code, i + 2);
        }
        i += 4;
      } else if (flags & 0x02) {
        arg1 = readInt8(code, i++);
        arg2 = readInt8(code, i++);
      } else {
        arg1 = code[i++];
        arg2 = code[i++];
      }
      if (flags & 0x02) {
        x = arg1;
        y = arg2;
      } else {
        x = 0;
        y = 0;
      }
      let scaleX = 1,
        scaleY = 1,
        scale01 = 0,
        scale10 = 0;
      if (flags & 0x08) {
        scaleX = scaleY = getFloat214(code, i);
        i += 2;
      } else if (flags & 0x40) {
        scaleX = getFloat214(code, i);
        scaleY = getFloat214(code, i + 2);
        i += 4;
      } else if (flags & 0x80) {
        scaleX = getFloat214(code, i);
        scale01 = getFloat214(code, i + 2);
        scale10 = getFloat214(code, i + 4);
        scaleY = getFloat214(code, i + 6);
        i += 8;
      }
      const subglyph = font.glyphs[glyphIndex];
      if (subglyph) {
        cmds.save();
        cmds.transform([scaleX, scale01, scale10, scaleY, x, y]);
        if (!(flags & 0x02)) {}
        compileGlyf(subglyph, cmds, font);
        cmds.restore();
      }
    } while (flags & 0x20);
  } else {
    const endPtsOfContours = [];
    let j, jj;
    for (j = 0; j < numberOfContours; j++) {
      endPtsOfContours.push(readUint16(code, i));
      i += 2;
    }
    const instructionLength = readUint16(code, i);
    i += 2 + instructionLength;
    const numberOfPoints = endPtsOfContours.at(-1) + 1;
    const points = [];
    while (points.length < numberOfPoints) {
      flags = code[i++];
      let repeat = 1;
      if (flags & 0x08) {
        repeat += code[i++];
      }
      while (repeat-- > 0) {
        points.push({
          flags
        });
      }
    }
    for (j = 0; j < numberOfPoints; j++) {
      switch (points[j].flags & 0x12) {
        case 0x00:
          x += readInt16(code, i);
          i += 2;
          break;
        case 0x02:
          x -= code[i++];
          break;
        case 0x12:
          x += code[i++];
          break;
      }
      points[j].x = x;
    }
    for (j = 0; j < numberOfPoints; j++) {
      switch (points[j].flags & 0x24) {
        case 0x00:
          y += readInt16(code, i);
          i += 2;
          break;
        case 0x04:
          y -= code[i++];
          break;
        case 0x24:
          y += code[i++];
          break;
      }
      points[j].y = y;
    }
    let startPoint = 0;
    for (i = 0; i < numberOfContours; i++) {
      const endPoint = endPtsOfContours[i];
      const contour = points.slice(startPoint, endPoint + 1);
      if (contour[0].flags & 1) {
        contour.push(contour[0]);
      } else if (contour.at(-1).flags & 1) {
        contour.unshift(contour.at(-1));
      } else {
        const p = {
          flags: 1,
          x: (contour[0].x + contour.at(-1).x) / 2,
          y: (contour[0].y + contour.at(-1).y) / 2
        };
        contour.unshift(p);
        contour.push(p);
      }
      moveTo(contour[0].x, contour[0].y);
      for (j = 1, jj = contour.length; j < jj; j++) {
        if (contour[j].flags & 1) {
          lineTo(contour[j].x, contour[j].y);
        } else if (contour[j + 1].flags & 1) {
          quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);
          j++;
        } else {
          quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);
        }
      }
      startPoint = endPoint + 1;
    }
  }
}
function compileCharString(charStringCode, cmds, font, glyphId) {
  function moveTo(x, y) {
    if (firstPoint) {
      cmds.add("L", firstPoint);
    }
    firstPoint = [x, y];
    cmds.add("M", [x, y]);
  }
  function lineTo(x, y) {
    cmds.add("L", [x, y]);
  }
  function bezierCurveTo(x1, y1, x2, y2, x, y) {
    cmds.add("C", [x1, y1, x2, y2, x, y]);
  }
  const stack = [];
  let x = 0,
    y = 0;
  let stems = 0;
  let firstPoint = null;
  function parse(code) {
    let i = 0;
    while (i < code.length) {
      let stackClean = false;
      let v = code[i++];
      let xa, xb, ya, yb, y1, y2, y3, n, subrCode;
      switch (v) {
        case 1:
          stems += stack.length >> 1;
          stackClean = true;
          break;
        case 3:
          stems += stack.length >> 1;
          stackClean = true;
          break;
        case 4:
          y += stack.pop();
          moveTo(x, y);
          stackClean = true;
          break;
        case 5:
          while (stack.length > 0) {
            x += stack.shift();
            y += stack.shift();
            lineTo(x, y);
          }
          break;
        case 6:
          while (stack.length > 0) {
            x += stack.shift();
            lineTo(x, y);
            if (stack.length === 0) {
              break;
            }
            y += stack.shift();
            lineTo(x, y);
          }
          break;
        case 7:
          while (stack.length > 0) {
            y += stack.shift();
            lineTo(x, y);
            if (stack.length === 0) {
              break;
            }
            x += stack.shift();
            lineTo(x, y);
          }
          break;
        case 8:
          while (stack.length > 0) {
            xa = x + stack.shift();
            ya = y + stack.shift();
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            x = xb + stack.shift();
            y = yb + stack.shift();
            bezierCurveTo(xa, ya, xb, yb, x, y);
          }
          break;
        case 10:
          n = stack.pop();
          subrCode = null;
          if (font.isCFFCIDFont) {
            const fdIndex = font.fdSelect.getFDIndex(glyphId);
            if (fdIndex >= 0 && fdIndex < font.fdArray.length) {
              const fontDict = font.fdArray[fdIndex];
              let subrs;
              if (fontDict.privateDict?.subrsIndex) {
                subrs = fontDict.privateDict.subrsIndex.objects;
              }
              if (subrs) {
                n += getSubroutineBias(subrs);
                subrCode = subrs[n];
              }
            } else {
              warn("Invalid fd index for glyph index.");
            }
          } else {
            subrCode = font.subrs[n + font.subrsBias];
          }
          if (subrCode) {
            parse(subrCode);
          }
          break;
        case 11:
          return;
        case 12:
          v = code[i++];
          switch (v) {
            case 34:
              xa = x + stack.shift();
              xb = xa + stack.shift();
              y1 = y + stack.shift();
              x = xb + stack.shift();
              bezierCurveTo(xa, y, xb, y1, x, y1);
              xa = x + stack.shift();
              xb = xa + stack.shift();
              x = xb + stack.shift();
              bezierCurveTo(xa, y1, xb, y, x, y);
              break;
            case 35:
              xa = x + stack.shift();
              ya = y + stack.shift();
              xb = xa + stack.shift();
              yb = ya + stack.shift();
              x = xb + stack.shift();
              y = yb + stack.shift();
              bezierCurveTo(xa, ya, xb, yb, x, y);
              xa = x + stack.shift();
              ya = y + stack.shift();
              xb = xa + stack.shift();
              yb = ya + stack.shift();
              x = xb + stack.shift();
              y = yb + stack.shift();
              bezierCurveTo(xa, ya, xb, yb, x, y);
              stack.pop();
              break;
            case 36:
              xa = x + stack.shift();
              y1 = y + stack.shift();
              xb = xa + stack.shift();
              y2 = y1 + stack.shift();
              x = xb + stack.shift();
              bezierCurveTo(xa, y1, xb, y2, x, y2);
              xa = x + stack.shift();
              xb = xa + stack.shift();
              y3 = y2 + stack.shift();
              x = xb + stack.shift();
              bezierCurveTo(xa, y2, xb, y3, x, y);
              break;
            case 37:
              const x0 = x,
                y0 = y;
              xa = x + stack.shift();
              ya = y + stack.shift();
              xb = xa + stack.shift();
              yb = ya + stack.shift();
              x = xb + stack.shift();
              y = yb + stack.shift();
              bezierCurveTo(xa, ya, xb, yb, x, y);
              xa = x + stack.shift();
              ya = y + stack.shift();
              xb = xa + stack.shift();
              yb = ya + stack.shift();
              x = xb;
              y = yb;
              if (Math.abs(x - x0) > Math.abs(y - y0)) {
                x += stack.shift();
              } else {
                y += stack.shift();
              }
              bezierCurveTo(xa, ya, xb, yb, x, y);
              break;
            default:
              throw new FormatError(\`unknown operator: 12 \${v}\`);
          }
          break;
        case 14:
          if (stack.length >= 4) {
            const achar = stack.pop();
            const bchar = stack.pop();
            y = stack.pop();
            x = stack.pop();
            cmds.save();
            cmds.translate(x, y);
            let cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[StandardEncoding[achar]]));
            compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);
            cmds.restore();
            cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[StandardEncoding[bchar]]));
            compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);
          }
          return;
        case 18:
          stems += stack.length >> 1;
          stackClean = true;
          break;
        case 19:
          stems += stack.length >> 1;
          i += stems + 7 >> 3;
          stackClean = true;
          break;
        case 20:
          stems += stack.length >> 1;
          i += stems + 7 >> 3;
          stackClean = true;
          break;
        case 21:
          y += stack.pop();
          x += stack.pop();
          moveTo(x, y);
          stackClean = true;
          break;
        case 22:
          x += stack.pop();
          moveTo(x, y);
          stackClean = true;
          break;
        case 23:
          stems += stack.length >> 1;
          stackClean = true;
          break;
        case 24:
          while (stack.length > 2) {
            xa = x + stack.shift();
            ya = y + stack.shift();
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            x = xb + stack.shift();
            y = yb + stack.shift();
            bezierCurveTo(xa, ya, xb, yb, x, y);
          }
          x += stack.shift();
          y += stack.shift();
          lineTo(x, y);
          break;
        case 25:
          while (stack.length > 6) {
            x += stack.shift();
            y += stack.shift();
            lineTo(x, y);
          }
          xa = x + stack.shift();
          ya = y + stack.shift();
          xb = xa + stack.shift();
          yb = ya + stack.shift();
          x = xb + stack.shift();
          y = yb + stack.shift();
          bezierCurveTo(xa, ya, xb, yb, x, y);
          break;
        case 26:
          if (stack.length % 2) {
            x += stack.shift();
          }
          while (stack.length > 0) {
            xa = x;
            ya = y + stack.shift();
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            x = xb;
            y = yb + stack.shift();
            bezierCurveTo(xa, ya, xb, yb, x, y);
          }
          break;
        case 27:
          if (stack.length % 2) {
            y += stack.shift();
          }
          while (stack.length > 0) {
            xa = x + stack.shift();
            ya = y;
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            x = xb + stack.shift();
            y = yb;
            bezierCurveTo(xa, ya, xb, yb, x, y);
          }
          break;
        case 28:
          stack.push(readInt16(code, i));
          i += 2;
          break;
        case 29:
          n = stack.pop() + font.gsubrsBias;
          subrCode = font.gsubrs[n];
          if (subrCode) {
            parse(subrCode);
          }
          break;
        case 30:
          while (stack.length > 0) {
            xa = x;
            ya = y + stack.shift();
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            x = xb + stack.shift();
            y = yb + (stack.length === 1 ? stack.shift() : 0);
            bezierCurveTo(xa, ya, xb, yb, x, y);
            if (stack.length === 0) {
              break;
            }
            xa = x + stack.shift();
            ya = y;
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            y = yb + stack.shift();
            x = xb + (stack.length === 1 ? stack.shift() : 0);
            bezierCurveTo(xa, ya, xb, yb, x, y);
          }
          break;
        case 31:
          while (stack.length > 0) {
            xa = x + stack.shift();
            ya = y;
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            y = yb + stack.shift();
            x = xb + (stack.length === 1 ? stack.shift() : 0);
            bezierCurveTo(xa, ya, xb, yb, x, y);
            if (stack.length === 0) {
              break;
            }
            xa = x;
            ya = y + stack.shift();
            xb = xa + stack.shift();
            yb = ya + stack.shift();
            x = xb + stack.shift();
            y = yb + (stack.length === 1 ? stack.shift() : 0);
            bezierCurveTo(xa, ya, xb, yb, x, y);
          }
          break;
        default:
          if (v < 32) {
            throw new FormatError(\`unknown operator: \${v}\`);
          }
          if (v < 247) {
            stack.push(v - 139);
          } else if (v < 251) {
            stack.push((v - 247) * 256 + code[i++] + 108);
          } else if (v < 255) {
            stack.push(-(v - 251) * 256 - code[i++] - 108);
          } else {
            stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);
            i += 4;
          }
          break;
      }
      if (stackClean) {
        stack.length = 0;
      }
    }
  }
  parse(charStringCode);
}
const NOOP = "";
class Commands {
  cmds = [];
  transformStack = [];
  currentTransform = [1, 0, 0, 1, 0, 0];
  add(cmd, args) {
    if (args) {
      const [a, b, c, d, e, f] = this.currentTransform;
      for (let i = 0, ii = args.length; i < ii; i += 2) {
        const x = args[i];
        const y = args[i + 1];
        args[i] = a * x + c * y + e;
        args[i + 1] = b * x + d * y + f;
      }
      this.cmds.push(\`\${cmd}\${args.join(" ")}\`);
    } else {
      this.cmds.push(cmd);
    }
  }
  transform(transf) {
    this.currentTransform = Util.transform(this.currentTransform, transf);
  }
  translate(x, y) {
    this.transform([1, 0, 0, 1, x, y]);
  }
  save() {
    this.transformStack.push(this.currentTransform.slice());
  }
  restore() {
    this.currentTransform = this.transformStack.pop() || [1, 0, 0, 1, 0, 0];
  }
  getSVG() {
    return this.cmds.join("");
  }
}
class CompiledFont {
  constructor(fontMatrix) {
    this.fontMatrix = fontMatrix;
    this.compiledGlyphs = Object.create(null);
    this.compiledCharCodeToGlyphId = Object.create(null);
  }
  getPathJs(unicode) {
    const {
      charCode,
      glyphId
    } = lookupCmap(this.cmap, unicode);
    let fn = this.compiledGlyphs[glyphId],
      compileEx;
    if (fn === undefined) {
      try {
        fn = this.compileGlyph(this.glyphs[glyphId], glyphId);
      } catch (ex) {
        fn = NOOP;
        compileEx = ex;
      }
      this.compiledGlyphs[glyphId] = fn;
    }
    this.compiledCharCodeToGlyphId[charCode] ??= glyphId;
    if (compileEx) {
      throw compileEx;
    }
    return fn;
  }
  compileGlyph(code, glyphId) {
    if (!code?.length || code[0] === 14) {
      return NOOP;
    }
    let fontMatrix = this.fontMatrix;
    if (this.isCFFCIDFont) {
      const fdIndex = this.fdSelect.getFDIndex(glyphId);
      if (fdIndex >= 0 && fdIndex < this.fdArray.length) {
        const fontDict = this.fdArray[fdIndex];
        fontMatrix = fontDict.getByName("FontMatrix") || FONT_IDENTITY_MATRIX;
      } else {
        warn("Invalid fd index for glyph index.");
      }
    }
    assert(isNumberArray(fontMatrix, 6), "Expected a valid fontMatrix.");
    const cmds = new Commands();
    cmds.transform(fontMatrix.slice());
    this.compileGlyphImpl(code, cmds, glyphId);
    cmds.add("Z");
    return cmds.getSVG();
  }
  compileGlyphImpl() {
    unreachable("Children classes should implement this.");
  }
  hasBuiltPath(unicode) {
    const {
      charCode,
      glyphId
    } = lookupCmap(this.cmap, unicode);
    return this.compiledGlyphs[glyphId] !== undefined && this.compiledCharCodeToGlyphId[charCode] !== undefined;
  }
}
class TrueTypeCompiled extends CompiledFont {
  constructor(glyphs, cmap, fontMatrix) {
    super(fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0]);
    this.glyphs = glyphs;
    this.cmap = cmap;
  }
  compileGlyphImpl(code, cmds) {
    compileGlyf(code, cmds, this);
  }
}
class Type2Compiled extends CompiledFont {
  constructor(cffInfo, cmap, fontMatrix) {
    super(fontMatrix || [0.001, 0, 0, 0.001, 0, 0]);
    this.glyphs = cffInfo.glyphs;
    this.gsubrs = cffInfo.gsubrs || [];
    this.subrs = cffInfo.subrs || [];
    this.cmap = cmap;
    this.glyphNameMap = getGlyphsUnicode();
    this.gsubrsBias = getSubroutineBias(this.gsubrs);
    this.subrsBias = getSubroutineBias(this.subrs);
    this.isCFFCIDFont = cffInfo.isCFFCIDFont;
    this.fdSelect = cffInfo.fdSelect;
    this.fdArray = cffInfo.fdArray;
  }
  compileGlyphImpl(code, cmds, glyphId) {
    compileCharString(code, cmds, this, glyphId);
  }
}
class FontRendererFactory {
  static create(font, seacAnalysisEnabled) {
    const data = new Uint8Array(font.data);
    let cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;
    const numTables = readUint16(data, 4);
    for (let i = 0, p = 12; i < numTables; i++, p += 16) {
      const tag = bytesToString(data.subarray(p, p + 4));
      const offset = readUint32(data, p + 8);
      const length = readUint32(data, p + 12);
      switch (tag) {
        case "cmap":
          cmap = parseCmap(data, offset, offset + length);
          break;
        case "glyf":
          glyf = data.subarray(offset, offset + length);
          break;
        case "loca":
          loca = data.subarray(offset, offset + length);
          break;
        case "head":
          unitsPerEm = readUint16(data, offset + 18);
          indexToLocFormat = readUint16(data, offset + 50);
          break;
        case "CFF ":
          cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);
          break;
      }
    }
    if (glyf) {
      const fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];
      return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);
    }
    return new Type2Compiled(cff, cmap, font.fontMatrix);
  }
}

;// ./src/core/metrics.js

const getMetrics = getLookupTableFactory(function (t) {
  t.Courier = 600;
  t["Courier-Bold"] = 600;
  t["Courier-BoldOblique"] = 600;
  t["Courier-Oblique"] = 600;
  t.Helvetica = getLookupTableFactory(function (t) {
    t.space = 278;
    t.exclam = 278;
    t.quotedbl = 355;
    t.numbersign = 556;
    t.dollar = 556;
    t.percent = 889;
    t.ampersand = 667;
    t.quoteright = 222;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 389;
    t.plus = 584;
    t.comma = 278;
    t.hyphen = 333;
    t.period = 278;
    t.slash = 278;
    t.zero = 556;
    t.one = 556;
    t.two = 556;
    t.three = 556;
    t.four = 556;
    t.five = 556;
    t.six = 556;
    t.seven = 556;
    t.eight = 556;
    t.nine = 556;
    t.colon = 278;
    t.semicolon = 278;
    t.less = 584;
    t.equal = 584;
    t.greater = 584;
    t.question = 556;
    t.at = 1015;
    t.A = 667;
    t.B = 667;
    t.C = 722;
    t.D = 722;
    t.E = 667;
    t.F = 611;
    t.G = 778;
    t.H = 722;
    t.I = 278;
    t.J = 500;
    t.K = 667;
    t.L = 556;
    t.M = 833;
    t.N = 722;
    t.O = 778;
    t.P = 667;
    t.Q = 778;
    t.R = 722;
    t.S = 667;
    t.T = 611;
    t.U = 722;
    t.V = 667;
    t.W = 944;
    t.X = 667;
    t.Y = 667;
    t.Z = 611;
    t.bracketleft = 278;
    t.backslash = 278;
    t.bracketright = 278;
    t.asciicircum = 469;
    t.underscore = 556;
    t.quoteleft = 222;
    t.a = 556;
    t.b = 556;
    t.c = 500;
    t.d = 556;
    t.e = 556;
    t.f = 278;
    t.g = 556;
    t.h = 556;
    t.i = 222;
    t.j = 222;
    t.k = 500;
    t.l = 222;
    t.m = 833;
    t.n = 556;
    t.o = 556;
    t.p = 556;
    t.q = 556;
    t.r = 333;
    t.s = 500;
    t.t = 278;
    t.u = 556;
    t.v = 500;
    t.w = 722;
    t.x = 500;
    t.y = 500;
    t.z = 500;
    t.braceleft = 334;
    t.bar = 260;
    t.braceright = 334;
    t.asciitilde = 584;
    t.exclamdown = 333;
    t.cent = 556;
    t.sterling = 556;
    t.fraction = 167;
    t.yen = 556;
    t.florin = 556;
    t.section = 556;
    t.currency = 556;
    t.quotesingle = 191;
    t.quotedblleft = 333;
    t.guillemotleft = 556;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 500;
    t.fl = 500;
    t.endash = 556;
    t.dagger = 556;
    t.daggerdbl = 556;
    t.periodcentered = 278;
    t.paragraph = 537;
    t.bullet = 350;
    t.quotesinglbase = 222;
    t.quotedblbase = 333;
    t.quotedblright = 333;
    t.guillemotright = 556;
    t.ellipsis = 1000;
    t.perthousand = 1000;
    t.questiondown = 611;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 1000;
    t.AE = 1000;
    t.ordfeminine = 370;
    t.Lslash = 556;
    t.Oslash = 778;
    t.OE = 1000;
    t.ordmasculine = 365;
    t.ae = 889;
    t.dotlessi = 278;
    t.lslash = 222;
    t.oslash = 611;
    t.oe = 944;
    t.germandbls = 611;
    t.Idieresis = 278;
    t.eacute = 556;
    t.abreve = 556;
    t.uhungarumlaut = 556;
    t.ecaron = 556;
    t.Ydieresis = 667;
    t.divide = 584;
    t.Yacute = 667;
    t.Acircumflex = 667;
    t.aacute = 556;
    t.Ucircumflex = 722;
    t.yacute = 500;
    t.scommaaccent = 500;
    t.ecircumflex = 556;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 556;
    t.Uacute = 722;
    t.uogonek = 556;
    t.Edieresis = 667;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 737;
    t.Emacron = 667;
    t.ccaron = 500;
    t.aring = 556;
    t.Ncommaaccent = 722;
    t.lacute = 222;
    t.agrave = 556;
    t.Tcommaaccent = 611;
    t.Cacute = 722;
    t.atilde = 556;
    t.Edotaccent = 667;
    t.scaron = 500;
    t.scedilla = 500;
    t.iacute = 278;
    t.lozenge = 471;
    t.Rcaron = 722;
    t.Gcommaaccent = 778;
    t.ucircumflex = 556;
    t.acircumflex = 556;
    t.Amacron = 667;
    t.rcaron = 333;
    t.ccedilla = 500;
    t.Zdotaccent = 611;
    t.Thorn = 667;
    t.Omacron = 778;
    t.Racute = 722;
    t.Sacute = 667;
    t.dcaron = 643;
    t.Umacron = 722;
    t.uring = 556;
    t.threesuperior = 333;
    t.Ograve = 778;
    t.Agrave = 667;
    t.Abreve = 667;
    t.multiply = 584;
    t.uacute = 556;
    t.Tcaron = 611;
    t.partialdiff = 476;
    t.ydieresis = 500;
    t.Nacute = 722;
    t.icircumflex = 278;
    t.Ecircumflex = 667;
    t.adieresis = 556;
    t.edieresis = 556;
    t.cacute = 500;
    t.nacute = 556;
    t.umacron = 556;
    t.Ncaron = 722;
    t.Iacute = 278;
    t.plusminus = 584;
    t.brokenbar = 260;
    t.registered = 737;
    t.Gbreve = 778;
    t.Idotaccent = 278;
    t.summation = 600;
    t.Egrave = 667;
    t.racute = 333;
    t.omacron = 556;
    t.Zacute = 611;
    t.Zcaron = 611;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 722;
    t.lcommaaccent = 222;
    t.tcaron = 317;
    t.eogonek = 556;
    t.Uogonek = 722;
    t.Aacute = 667;
    t.Adieresis = 667;
    t.egrave = 556;
    t.zacute = 500;
    t.iogonek = 222;
    t.Oacute = 778;
    t.oacute = 556;
    t.amacron = 556;
    t.sacute = 500;
    t.idieresis = 278;
    t.Ocircumflex = 778;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 556;
    t.twosuperior = 333;
    t.Odieresis = 778;
    t.mu = 556;
    t.igrave = 278;
    t.ohungarumlaut = 556;
    t.Eogonek = 667;
    t.dcroat = 556;
    t.threequarters = 834;
    t.Scedilla = 667;
    t.lcaron = 299;
    t.Kcommaaccent = 667;
    t.Lacute = 556;
    t.trademark = 1000;
    t.edotaccent = 556;
    t.Igrave = 278;
    t.Imacron = 278;
    t.Lcaron = 556;
    t.onehalf = 834;
    t.lessequal = 549;
    t.ocircumflex = 556;
    t.ntilde = 556;
    t.Uhungarumlaut = 722;
    t.Eacute = 667;
    t.emacron = 556;
    t.gbreve = 556;
    t.onequarter = 834;
    t.Scaron = 667;
    t.Scommaaccent = 667;
    t.Ohungarumlaut = 778;
    t.degree = 400;
    t.ograve = 556;
    t.Ccaron = 722;
    t.ugrave = 556;
    t.radical = 453;
    t.Dcaron = 722;
    t.rcommaaccent = 333;
    t.Ntilde = 722;
    t.otilde = 556;
    t.Rcommaaccent = 722;
    t.Lcommaaccent = 556;
    t.Atilde = 667;
    t.Aogonek = 667;
    t.Aring = 667;
    t.Otilde = 778;
    t.zdotaccent = 500;
    t.Ecaron = 667;
    t.Iogonek = 278;
    t.kcommaaccent = 500;
    t.minus = 584;
    t.Icircumflex = 278;
    t.ncaron = 556;
    t.tcommaaccent = 278;
    t.logicalnot = 584;
    t.odieresis = 556;
    t.udieresis = 556;
    t.notequal = 549;
    t.gcommaaccent = 556;
    t.eth = 556;
    t.zcaron = 500;
    t.ncommaaccent = 556;
    t.onesuperior = 333;
    t.imacron = 278;
    t.Euro = 556;
  });
  t["Helvetica-Bold"] = getLookupTableFactory(function (t) {
    t.space = 278;
    t.exclam = 333;
    t.quotedbl = 474;
    t.numbersign = 556;
    t.dollar = 556;
    t.percent = 889;
    t.ampersand = 722;
    t.quoteright = 278;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 389;
    t.plus = 584;
    t.comma = 278;
    t.hyphen = 333;
    t.period = 278;
    t.slash = 278;
    t.zero = 556;
    t.one = 556;
    t.two = 556;
    t.three = 556;
    t.four = 556;
    t.five = 556;
    t.six = 556;
    t.seven = 556;
    t.eight = 556;
    t.nine = 556;
    t.colon = 333;
    t.semicolon = 333;
    t.less = 584;
    t.equal = 584;
    t.greater = 584;
    t.question = 611;
    t.at = 975;
    t.A = 722;
    t.B = 722;
    t.C = 722;
    t.D = 722;
    t.E = 667;
    t.F = 611;
    t.G = 778;
    t.H = 722;
    t.I = 278;
    t.J = 556;
    t.K = 722;
    t.L = 611;
    t.M = 833;
    t.N = 722;
    t.O = 778;
    t.P = 667;
    t.Q = 778;
    t.R = 722;
    t.S = 667;
    t.T = 611;
    t.U = 722;
    t.V = 667;
    t.W = 944;
    t.X = 667;
    t.Y = 667;
    t.Z = 611;
    t.bracketleft = 333;
    t.backslash = 278;
    t.bracketright = 333;
    t.asciicircum = 584;
    t.underscore = 556;
    t.quoteleft = 278;
    t.a = 556;
    t.b = 611;
    t.c = 556;
    t.d = 611;
    t.e = 556;
    t.f = 333;
    t.g = 611;
    t.h = 611;
    t.i = 278;
    t.j = 278;
    t.k = 556;
    t.l = 278;
    t.m = 889;
    t.n = 611;
    t.o = 611;
    t.p = 611;
    t.q = 611;
    t.r = 389;
    t.s = 556;
    t.t = 333;
    t.u = 611;
    t.v = 556;
    t.w = 778;
    t.x = 556;
    t.y = 556;
    t.z = 500;
    t.braceleft = 389;
    t.bar = 280;
    t.braceright = 389;
    t.asciitilde = 584;
    t.exclamdown = 333;
    t.cent = 556;
    t.sterling = 556;
    t.fraction = 167;
    t.yen = 556;
    t.florin = 556;
    t.section = 556;
    t.currency = 556;
    t.quotesingle = 238;
    t.quotedblleft = 500;
    t.guillemotleft = 556;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 611;
    t.fl = 611;
    t.endash = 556;
    t.dagger = 556;
    t.daggerdbl = 556;
    t.periodcentered = 278;
    t.paragraph = 556;
    t.bullet = 350;
    t.quotesinglbase = 278;
    t.quotedblbase = 500;
    t.quotedblright = 500;
    t.guillemotright = 556;
    t.ellipsis = 1000;
    t.perthousand = 1000;
    t.questiondown = 611;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 1000;
    t.AE = 1000;
    t.ordfeminine = 370;
    t.Lslash = 611;
    t.Oslash = 778;
    t.OE = 1000;
    t.ordmasculine = 365;
    t.ae = 889;
    t.dotlessi = 278;
    t.lslash = 278;
    t.oslash = 611;
    t.oe = 944;
    t.germandbls = 611;
    t.Idieresis = 278;
    t.eacute = 556;
    t.abreve = 556;
    t.uhungarumlaut = 611;
    t.ecaron = 556;
    t.Ydieresis = 667;
    t.divide = 584;
    t.Yacute = 667;
    t.Acircumflex = 722;
    t.aacute = 556;
    t.Ucircumflex = 722;
    t.yacute = 556;
    t.scommaaccent = 556;
    t.ecircumflex = 556;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 556;
    t.Uacute = 722;
    t.uogonek = 611;
    t.Edieresis = 667;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 737;
    t.Emacron = 667;
    t.ccaron = 556;
    t.aring = 556;
    t.Ncommaaccent = 722;
    t.lacute = 278;
    t.agrave = 556;
    t.Tcommaaccent = 611;
    t.Cacute = 722;
    t.atilde = 556;
    t.Edotaccent = 667;
    t.scaron = 556;
    t.scedilla = 556;
    t.iacute = 278;
    t.lozenge = 494;
    t.Rcaron = 722;
    t.Gcommaaccent = 778;
    t.ucircumflex = 611;
    t.acircumflex = 556;
    t.Amacron = 722;
    t.rcaron = 389;
    t.ccedilla = 556;
    t.Zdotaccent = 611;
    t.Thorn = 667;
    t.Omacron = 778;
    t.Racute = 722;
    t.Sacute = 667;
    t.dcaron = 743;
    t.Umacron = 722;
    t.uring = 611;
    t.threesuperior = 333;
    t.Ograve = 778;
    t.Agrave = 722;
    t.Abreve = 722;
    t.multiply = 584;
    t.uacute = 611;
    t.Tcaron = 611;
    t.partialdiff = 494;
    t.ydieresis = 556;
    t.Nacute = 722;
    t.icircumflex = 278;
    t.Ecircumflex = 667;
    t.adieresis = 556;
    t.edieresis = 556;
    t.cacute = 556;
    t.nacute = 611;
    t.umacron = 611;
    t.Ncaron = 722;
    t.Iacute = 278;
    t.plusminus = 584;
    t.brokenbar = 280;
    t.registered = 737;
    t.Gbreve = 778;
    t.Idotaccent = 278;
    t.summation = 600;
    t.Egrave = 667;
    t.racute = 389;
    t.omacron = 611;
    t.Zacute = 611;
    t.Zcaron = 611;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 722;
    t.lcommaaccent = 278;
    t.tcaron = 389;
    t.eogonek = 556;
    t.Uogonek = 722;
    t.Aacute = 722;
    t.Adieresis = 722;
    t.egrave = 556;
    t.zacute = 500;
    t.iogonek = 278;
    t.Oacute = 778;
    t.oacute = 611;
    t.amacron = 556;
    t.sacute = 556;
    t.idieresis = 278;
    t.Ocircumflex = 778;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 611;
    t.twosuperior = 333;
    t.Odieresis = 778;
    t.mu = 611;
    t.igrave = 278;
    t.ohungarumlaut = 611;
    t.Eogonek = 667;
    t.dcroat = 611;
    t.threequarters = 834;
    t.Scedilla = 667;
    t.lcaron = 400;
    t.Kcommaaccent = 722;
    t.Lacute = 611;
    t.trademark = 1000;
    t.edotaccent = 556;
    t.Igrave = 278;
    t.Imacron = 278;
    t.Lcaron = 611;
    t.onehalf = 834;
    t.lessequal = 549;
    t.ocircumflex = 611;
    t.ntilde = 611;
    t.Uhungarumlaut = 722;
    t.Eacute = 667;
    t.emacron = 556;
    t.gbreve = 611;
    t.onequarter = 834;
    t.Scaron = 667;
    t.Scommaaccent = 667;
    t.Ohungarumlaut = 778;
    t.degree = 400;
    t.ograve = 611;
    t.Ccaron = 722;
    t.ugrave = 611;
    t.radical = 549;
    t.Dcaron = 722;
    t.rcommaaccent = 389;
    t.Ntilde = 722;
    t.otilde = 611;
    t.Rcommaaccent = 722;
    t.Lcommaaccent = 611;
    t.Atilde = 722;
    t.Aogonek = 722;
    t.Aring = 722;
    t.Otilde = 778;
    t.zdotaccent = 500;
    t.Ecaron = 667;
    t.Iogonek = 278;
    t.kcommaaccent = 556;
    t.minus = 584;
    t.Icircumflex = 278;
    t.ncaron = 611;
    t.tcommaaccent = 333;
    t.logicalnot = 584;
    t.odieresis = 611;
    t.udieresis = 611;
    t.notequal = 549;
    t.gcommaaccent = 611;
    t.eth = 611;
    t.zcaron = 500;
    t.ncommaaccent = 611;
    t.onesuperior = 333;
    t.imacron = 278;
    t.Euro = 556;
  });
  t["Helvetica-BoldOblique"] = getLookupTableFactory(function (t) {
    t.space = 278;
    t.exclam = 333;
    t.quotedbl = 474;
    t.numbersign = 556;
    t.dollar = 556;
    t.percent = 889;
    t.ampersand = 722;
    t.quoteright = 278;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 389;
    t.plus = 584;
    t.comma = 278;
    t.hyphen = 333;
    t.period = 278;
    t.slash = 278;
    t.zero = 556;
    t.one = 556;
    t.two = 556;
    t.three = 556;
    t.four = 556;
    t.five = 556;
    t.six = 556;
    t.seven = 556;
    t.eight = 556;
    t.nine = 556;
    t.colon = 333;
    t.semicolon = 333;
    t.less = 584;
    t.equal = 584;
    t.greater = 584;
    t.question = 611;
    t.at = 975;
    t.A = 722;
    t.B = 722;
    t.C = 722;
    t.D = 722;
    t.E = 667;
    t.F = 611;
    t.G = 778;
    t.H = 722;
    t.I = 278;
    t.J = 556;
    t.K = 722;
    t.L = 611;
    t.M = 833;
    t.N = 722;
    t.O = 778;
    t.P = 667;
    t.Q = 778;
    t.R = 722;
    t.S = 667;
    t.T = 611;
    t.U = 722;
    t.V = 667;
    t.W = 944;
    t.X = 667;
    t.Y = 667;
    t.Z = 611;
    t.bracketleft = 333;
    t.backslash = 278;
    t.bracketright = 333;
    t.asciicircum = 584;
    t.underscore = 556;
    t.quoteleft = 278;
    t.a = 556;
    t.b = 611;
    t.c = 556;
    t.d = 611;
    t.e = 556;
    t.f = 333;
    t.g = 611;
    t.h = 611;
    t.i = 278;
    t.j = 278;
    t.k = 556;
    t.l = 278;
    t.m = 889;
    t.n = 611;
    t.o = 611;
    t.p = 611;
    t.q = 611;
    t.r = 389;
    t.s = 556;
    t.t = 333;
    t.u = 611;
    t.v = 556;
    t.w = 778;
    t.x = 556;
    t.y = 556;
    t.z = 500;
    t.braceleft = 389;
    t.bar = 280;
    t.braceright = 389;
    t.asciitilde = 584;
    t.exclamdown = 333;
    t.cent = 556;
    t.sterling = 556;
    t.fraction = 167;
    t.yen = 556;
    t.florin = 556;
    t.section = 556;
    t.currency = 556;
    t.quotesingle = 238;
    t.quotedblleft = 500;
    t.guillemotleft = 556;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 611;
    t.fl = 611;
    t.endash = 556;
    t.dagger = 556;
    t.daggerdbl = 556;
    t.periodcentered = 278;
    t.paragraph = 556;
    t.bullet = 350;
    t.quotesinglbase = 278;
    t.quotedblbase = 500;
    t.quotedblright = 500;
    t.guillemotright = 556;
    t.ellipsis = 1000;
    t.perthousand = 1000;
    t.questiondown = 611;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 1000;
    t.AE = 1000;
    t.ordfeminine = 370;
    t.Lslash = 611;
    t.Oslash = 778;
    t.OE = 1000;
    t.ordmasculine = 365;
    t.ae = 889;
    t.dotlessi = 278;
    t.lslash = 278;
    t.oslash = 611;
    t.oe = 944;
    t.germandbls = 611;
    t.Idieresis = 278;
    t.eacute = 556;
    t.abreve = 556;
    t.uhungarumlaut = 611;
    t.ecaron = 556;
    t.Ydieresis = 667;
    t.divide = 584;
    t.Yacute = 667;
    t.Acircumflex = 722;
    t.aacute = 556;
    t.Ucircumflex = 722;
    t.yacute = 556;
    t.scommaaccent = 556;
    t.ecircumflex = 556;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 556;
    t.Uacute = 722;
    t.uogonek = 611;
    t.Edieresis = 667;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 737;
    t.Emacron = 667;
    t.ccaron = 556;
    t.aring = 556;
    t.Ncommaaccent = 722;
    t.lacute = 278;
    t.agrave = 556;
    t.Tcommaaccent = 611;
    t.Cacute = 722;
    t.atilde = 556;
    t.Edotaccent = 667;
    t.scaron = 556;
    t.scedilla = 556;
    t.iacute = 278;
    t.lozenge = 494;
    t.Rcaron = 722;
    t.Gcommaaccent = 778;
    t.ucircumflex = 611;
    t.acircumflex = 556;
    t.Amacron = 722;
    t.rcaron = 389;
    t.ccedilla = 556;
    t.Zdotaccent = 611;
    t.Thorn = 667;
    t.Omacron = 778;
    t.Racute = 722;
    t.Sacute = 667;
    t.dcaron = 743;
    t.Umacron = 722;
    t.uring = 611;
    t.threesuperior = 333;
    t.Ograve = 778;
    t.Agrave = 722;
    t.Abreve = 722;
    t.multiply = 584;
    t.uacute = 611;
    t.Tcaron = 611;
    t.partialdiff = 494;
    t.ydieresis = 556;
    t.Nacute = 722;
    t.icircumflex = 278;
    t.Ecircumflex = 667;
    t.adieresis = 556;
    t.edieresis = 556;
    t.cacute = 556;
    t.nacute = 611;
    t.umacron = 611;
    t.Ncaron = 722;
    t.Iacute = 278;
    t.plusminus = 584;
    t.brokenbar = 280;
    t.registered = 737;
    t.Gbreve = 778;
    t.Idotaccent = 278;
    t.summation = 600;
    t.Egrave = 667;
    t.racute = 389;
    t.omacron = 611;
    t.Zacute = 611;
    t.Zcaron = 611;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 722;
    t.lcommaaccent = 278;
    t.tcaron = 389;
    t.eogonek = 556;
    t.Uogonek = 722;
    t.Aacute = 722;
    t.Adieresis = 722;
    t.egrave = 556;
    t.zacute = 500;
    t.iogonek = 278;
    t.Oacute = 778;
    t.oacute = 611;
    t.amacron = 556;
    t.sacute = 556;
    t.idieresis = 278;
    t.Ocircumflex = 778;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 611;
    t.twosuperior = 333;
    t.Odieresis = 778;
    t.mu = 611;
    t.igrave = 278;
    t.ohungarumlaut = 611;
    t.Eogonek = 667;
    t.dcroat = 611;
    t.threequarters = 834;
    t.Scedilla = 667;
    t.lcaron = 400;
    t.Kcommaaccent = 722;
    t.Lacute = 611;
    t.trademark = 1000;
    t.edotaccent = 556;
    t.Igrave = 278;
    t.Imacron = 278;
    t.Lcaron = 611;
    t.onehalf = 834;
    t.lessequal = 549;
    t.ocircumflex = 611;
    t.ntilde = 611;
    t.Uhungarumlaut = 722;
    t.Eacute = 667;
    t.emacron = 556;
    t.gbreve = 611;
    t.onequarter = 834;
    t.Scaron = 667;
    t.Scommaaccent = 667;
    t.Ohungarumlaut = 778;
    t.degree = 400;
    t.ograve = 611;
    t.Ccaron = 722;
    t.ugrave = 611;
    t.radical = 549;
    t.Dcaron = 722;
    t.rcommaaccent = 389;
    t.Ntilde = 722;
    t.otilde = 611;
    t.Rcommaaccent = 722;
    t.Lcommaaccent = 611;
    t.Atilde = 722;
    t.Aogonek = 722;
    t.Aring = 722;
    t.Otilde = 778;
    t.zdotaccent = 500;
    t.Ecaron = 667;
    t.Iogonek = 278;
    t.kcommaaccent = 556;
    t.minus = 584;
    t.Icircumflex = 278;
    t.ncaron = 611;
    t.tcommaaccent = 333;
    t.logicalnot = 584;
    t.odieresis = 611;
    t.udieresis = 611;
    t.notequal = 549;
    t.gcommaaccent = 611;
    t.eth = 611;
    t.zcaron = 500;
    t.ncommaaccent = 611;
    t.onesuperior = 333;
    t.imacron = 278;
    t.Euro = 556;
  });
  t["Helvetica-Oblique"] = getLookupTableFactory(function (t) {
    t.space = 278;
    t.exclam = 278;
    t.quotedbl = 355;
    t.numbersign = 556;
    t.dollar = 556;
    t.percent = 889;
    t.ampersand = 667;
    t.quoteright = 222;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 389;
    t.plus = 584;
    t.comma = 278;
    t.hyphen = 333;
    t.period = 278;
    t.slash = 278;
    t.zero = 556;
    t.one = 556;
    t.two = 556;
    t.three = 556;
    t.four = 556;
    t.five = 556;
    t.six = 556;
    t.seven = 556;
    t.eight = 556;
    t.nine = 556;
    t.colon = 278;
    t.semicolon = 278;
    t.less = 584;
    t.equal = 584;
    t.greater = 584;
    t.question = 556;
    t.at = 1015;
    t.A = 667;
    t.B = 667;
    t.C = 722;
    t.D = 722;
    t.E = 667;
    t.F = 611;
    t.G = 778;
    t.H = 722;
    t.I = 278;
    t.J = 500;
    t.K = 667;
    t.L = 556;
    t.M = 833;
    t.N = 722;
    t.O = 778;
    t.P = 667;
    t.Q = 778;
    t.R = 722;
    t.S = 667;
    t.T = 611;
    t.U = 722;
    t.V = 667;
    t.W = 944;
    t.X = 667;
    t.Y = 667;
    t.Z = 611;
    t.bracketleft = 278;
    t.backslash = 278;
    t.bracketright = 278;
    t.asciicircum = 469;
    t.underscore = 556;
    t.quoteleft = 222;
    t.a = 556;
    t.b = 556;
    t.c = 500;
    t.d = 556;
    t.e = 556;
    t.f = 278;
    t.g = 556;
    t.h = 556;
    t.i = 222;
    t.j = 222;
    t.k = 500;
    t.l = 222;
    t.m = 833;
    t.n = 556;
    t.o = 556;
    t.p = 556;
    t.q = 556;
    t.r = 333;
    t.s = 500;
    t.t = 278;
    t.u = 556;
    t.v = 500;
    t.w = 722;
    t.x = 500;
    t.y = 500;
    t.z = 500;
    t.braceleft = 334;
    t.bar = 260;
    t.braceright = 334;
    t.asciitilde = 584;
    t.exclamdown = 333;
    t.cent = 556;
    t.sterling = 556;
    t.fraction = 167;
    t.yen = 556;
    t.florin = 556;
    t.section = 556;
    t.currency = 556;
    t.quotesingle = 191;
    t.quotedblleft = 333;
    t.guillemotleft = 556;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 500;
    t.fl = 500;
    t.endash = 556;
    t.dagger = 556;
    t.daggerdbl = 556;
    t.periodcentered = 278;
    t.paragraph = 537;
    t.bullet = 350;
    t.quotesinglbase = 222;
    t.quotedblbase = 333;
    t.quotedblright = 333;
    t.guillemotright = 556;
    t.ellipsis = 1000;
    t.perthousand = 1000;
    t.questiondown = 611;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 1000;
    t.AE = 1000;
    t.ordfeminine = 370;
    t.Lslash = 556;
    t.Oslash = 778;
    t.OE = 1000;
    t.ordmasculine = 365;
    t.ae = 889;
    t.dotlessi = 278;
    t.lslash = 222;
    t.oslash = 611;
    t.oe = 944;
    t.germandbls = 611;
    t.Idieresis = 278;
    t.eacute = 556;
    t.abreve = 556;
    t.uhungarumlaut = 556;
    t.ecaron = 556;
    t.Ydieresis = 667;
    t.divide = 584;
    t.Yacute = 667;
    t.Acircumflex = 667;
    t.aacute = 556;
    t.Ucircumflex = 722;
    t.yacute = 500;
    t.scommaaccent = 500;
    t.ecircumflex = 556;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 556;
    t.Uacute = 722;
    t.uogonek = 556;
    t.Edieresis = 667;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 737;
    t.Emacron = 667;
    t.ccaron = 500;
    t.aring = 556;
    t.Ncommaaccent = 722;
    t.lacute = 222;
    t.agrave = 556;
    t.Tcommaaccent = 611;
    t.Cacute = 722;
    t.atilde = 556;
    t.Edotaccent = 667;
    t.scaron = 500;
    t.scedilla = 500;
    t.iacute = 278;
    t.lozenge = 471;
    t.Rcaron = 722;
    t.Gcommaaccent = 778;
    t.ucircumflex = 556;
    t.acircumflex = 556;
    t.Amacron = 667;
    t.rcaron = 333;
    t.ccedilla = 500;
    t.Zdotaccent = 611;
    t.Thorn = 667;
    t.Omacron = 778;
    t.Racute = 722;
    t.Sacute = 667;
    t.dcaron = 643;
    t.Umacron = 722;
    t.uring = 556;
    t.threesuperior = 333;
    t.Ograve = 778;
    t.Agrave = 667;
    t.Abreve = 667;
    t.multiply = 584;
    t.uacute = 556;
    t.Tcaron = 611;
    t.partialdiff = 476;
    t.ydieresis = 500;
    t.Nacute = 722;
    t.icircumflex = 278;
    t.Ecircumflex = 667;
    t.adieresis = 556;
    t.edieresis = 556;
    t.cacute = 500;
    t.nacute = 556;
    t.umacron = 556;
    t.Ncaron = 722;
    t.Iacute = 278;
    t.plusminus = 584;
    t.brokenbar = 260;
    t.registered = 737;
    t.Gbreve = 778;
    t.Idotaccent = 278;
    t.summation = 600;
    t.Egrave = 667;
    t.racute = 333;
    t.omacron = 556;
    t.Zacute = 611;
    t.Zcaron = 611;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 722;
    t.lcommaaccent = 222;
    t.tcaron = 317;
    t.eogonek = 556;
    t.Uogonek = 722;
    t.Aacute = 667;
    t.Adieresis = 667;
    t.egrave = 556;
    t.zacute = 500;
    t.iogonek = 222;
    t.Oacute = 778;
    t.oacute = 556;
    t.amacron = 556;
    t.sacute = 500;
    t.idieresis = 278;
    t.Ocircumflex = 778;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 556;
    t.twosuperior = 333;
    t.Odieresis = 778;
    t.mu = 556;
    t.igrave = 278;
    t.ohungarumlaut = 556;
    t.Eogonek = 667;
    t.dcroat = 556;
    t.threequarters = 834;
    t.Scedilla = 667;
    t.lcaron = 299;
    t.Kcommaaccent = 667;
    t.Lacute = 556;
    t.trademark = 1000;
    t.edotaccent = 556;
    t.Igrave = 278;
    t.Imacron = 278;
    t.Lcaron = 556;
    t.onehalf = 834;
    t.lessequal = 549;
    t.ocircumflex = 556;
    t.ntilde = 556;
    t.Uhungarumlaut = 722;
    t.Eacute = 667;
    t.emacron = 556;
    t.gbreve = 556;
    t.onequarter = 834;
    t.Scaron = 667;
    t.Scommaaccent = 667;
    t.Ohungarumlaut = 778;
    t.degree = 400;
    t.ograve = 556;
    t.Ccaron = 722;
    t.ugrave = 556;
    t.radical = 453;
    t.Dcaron = 722;
    t.rcommaaccent = 333;
    t.Ntilde = 722;
    t.otilde = 556;
    t.Rcommaaccent = 722;
    t.Lcommaaccent = 556;
    t.Atilde = 667;
    t.Aogonek = 667;
    t.Aring = 667;
    t.Otilde = 778;
    t.zdotaccent = 500;
    t.Ecaron = 667;
    t.Iogonek = 278;
    t.kcommaaccent = 500;
    t.minus = 584;
    t.Icircumflex = 278;
    t.ncaron = 556;
    t.tcommaaccent = 278;
    t.logicalnot = 584;
    t.odieresis = 556;
    t.udieresis = 556;
    t.notequal = 549;
    t.gcommaaccent = 556;
    t.eth = 556;
    t.zcaron = 500;
    t.ncommaaccent = 556;
    t.onesuperior = 333;
    t.imacron = 278;
    t.Euro = 556;
  });
  t.Symbol = getLookupTableFactory(function (t) {
    t.space = 250;
    t.exclam = 333;
    t.universal = 713;
    t.numbersign = 500;
    t.existential = 549;
    t.percent = 833;
    t.ampersand = 778;
    t.suchthat = 439;
    t.parenleft = 333;
    t.parenright = 333;
    t.asteriskmath = 500;
    t.plus = 549;
    t.comma = 250;
    t.minus = 549;
    t.period = 250;
    t.slash = 278;
    t.zero = 500;
    t.one = 500;
    t.two = 500;
    t.three = 500;
    t.four = 500;
    t.five = 500;
    t.six = 500;
    t.seven = 500;
    t.eight = 500;
    t.nine = 500;
    t.colon = 278;
    t.semicolon = 278;
    t.less = 549;
    t.equal = 549;
    t.greater = 549;
    t.question = 444;
    t.congruent = 549;
    t.Alpha = 722;
    t.Beta = 667;
    t.Chi = 722;
    t.Delta = 612;
    t.Epsilon = 611;
    t.Phi = 763;
    t.Gamma = 603;
    t.Eta = 722;
    t.Iota = 333;
    t.theta1 = 631;
    t.Kappa = 722;
    t.Lambda = 686;
    t.Mu = 889;
    t.Nu = 722;
    t.Omicron = 722;
    t.Pi = 768;
    t.Theta = 741;
    t.Rho = 556;
    t.Sigma = 592;
    t.Tau = 611;
    t.Upsilon = 690;
    t.sigma1 = 439;
    t.Omega = 768;
    t.Xi = 645;
    t.Psi = 795;
    t.Zeta = 611;
    t.bracketleft = 333;
    t.therefore = 863;
    t.bracketright = 333;
    t.perpendicular = 658;
    t.underscore = 500;
    t.radicalex = 500;
    t.alpha = 631;
    t.beta = 549;
    t.chi = 549;
    t.delta = 494;
    t.epsilon = 439;
    t.phi = 521;
    t.gamma = 411;
    t.eta = 603;
    t.iota = 329;
    t.phi1 = 603;
    t.kappa = 549;
    t.lambda = 549;
    t.mu = 576;
    t.nu = 521;
    t.omicron = 549;
    t.pi = 549;
    t.theta = 521;
    t.rho = 549;
    t.sigma = 603;
    t.tau = 439;
    t.upsilon = 576;
    t.omega1 = 713;
    t.omega = 686;
    t.xi = 493;
    t.psi = 686;
    t.zeta = 494;
    t.braceleft = 480;
    t.bar = 200;
    t.braceright = 480;
    t.similar = 549;
    t.Euro = 750;
    t.Upsilon1 = 620;
    t.minute = 247;
    t.lessequal = 549;
    t.fraction = 167;
    t.infinity = 713;
    t.florin = 500;
    t.club = 753;
    t.diamond = 753;
    t.heart = 753;
    t.spade = 753;
    t.arrowboth = 1042;
    t.arrowleft = 987;
    t.arrowup = 603;
    t.arrowright = 987;
    t.arrowdown = 603;
    t.degree = 400;
    t.plusminus = 549;
    t.second = 411;
    t.greaterequal = 549;
    t.multiply = 549;
    t.proportional = 713;
    t.partialdiff = 494;
    t.bullet = 460;
    t.divide = 549;
    t.notequal = 549;
    t.equivalence = 549;
    t.approxequal = 549;
    t.ellipsis = 1000;
    t.arrowvertex = 603;
    t.arrowhorizex = 1000;
    t.carriagereturn = 658;
    t.aleph = 823;
    t.Ifraktur = 686;
    t.Rfraktur = 795;
    t.weierstrass = 987;
    t.circlemultiply = 768;
    t.circleplus = 768;
    t.emptyset = 823;
    t.intersection = 768;
    t.union = 768;
    t.propersuperset = 713;
    t.reflexsuperset = 713;
    t.notsubset = 713;
    t.propersubset = 713;
    t.reflexsubset = 713;
    t.element = 713;
    t.notelement = 713;
    t.angle = 768;
    t.gradient = 713;
    t.registerserif = 790;
    t.copyrightserif = 790;
    t.trademarkserif = 890;
    t.product = 823;
    t.radical = 549;
    t.dotmath = 250;
    t.logicalnot = 713;
    t.logicaland = 603;
    t.logicalor = 603;
    t.arrowdblboth = 1042;
    t.arrowdblleft = 987;
    t.arrowdblup = 603;
    t.arrowdblright = 987;
    t.arrowdbldown = 603;
    t.lozenge = 494;
    t.angleleft = 329;
    t.registersans = 790;
    t.copyrightsans = 790;
    t.trademarksans = 786;
    t.summation = 713;
    t.parenlefttp = 384;
    t.parenleftex = 384;
    t.parenleftbt = 384;
    t.bracketlefttp = 384;
    t.bracketleftex = 384;
    t.bracketleftbt = 384;
    t.bracelefttp = 494;
    t.braceleftmid = 494;
    t.braceleftbt = 494;
    t.braceex = 494;
    t.angleright = 329;
    t.integral = 274;
    t.integraltp = 686;
    t.integralex = 686;
    t.integralbt = 686;
    t.parenrighttp = 384;
    t.parenrightex = 384;
    t.parenrightbt = 384;
    t.bracketrighttp = 384;
    t.bracketrightex = 384;
    t.bracketrightbt = 384;
    t.bracerighttp = 494;
    t.bracerightmid = 494;
    t.bracerightbt = 494;
    t.apple = 790;
  });
  t["Times-Roman"] = getLookupTableFactory(function (t) {
    t.space = 250;
    t.exclam = 333;
    t.quotedbl = 408;
    t.numbersign = 500;
    t.dollar = 500;
    t.percent = 833;
    t.ampersand = 778;
    t.quoteright = 333;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 500;
    t.plus = 564;
    t.comma = 250;
    t.hyphen = 333;
    t.period = 250;
    t.slash = 278;
    t.zero = 500;
    t.one = 500;
    t.two = 500;
    t.three = 500;
    t.four = 500;
    t.five = 500;
    t.six = 500;
    t.seven = 500;
    t.eight = 500;
    t.nine = 500;
    t.colon = 278;
    t.semicolon = 278;
    t.less = 564;
    t.equal = 564;
    t.greater = 564;
    t.question = 444;
    t.at = 921;
    t.A = 722;
    t.B = 667;
    t.C = 667;
    t.D = 722;
    t.E = 611;
    t.F = 556;
    t.G = 722;
    t.H = 722;
    t.I = 333;
    t.J = 389;
    t.K = 722;
    t.L = 611;
    t.M = 889;
    t.N = 722;
    t.O = 722;
    t.P = 556;
    t.Q = 722;
    t.R = 667;
    t.S = 556;
    t.T = 611;
    t.U = 722;
    t.V = 722;
    t.W = 944;
    t.X = 722;
    t.Y = 722;
    t.Z = 611;
    t.bracketleft = 333;
    t.backslash = 278;
    t.bracketright = 333;
    t.asciicircum = 469;
    t.underscore = 500;
    t.quoteleft = 333;
    t.a = 444;
    t.b = 500;
    t.c = 444;
    t.d = 500;
    t.e = 444;
    t.f = 333;
    t.g = 500;
    t.h = 500;
    t.i = 278;
    t.j = 278;
    t.k = 500;
    t.l = 278;
    t.m = 778;
    t.n = 500;
    t.o = 500;
    t.p = 500;
    t.q = 500;
    t.r = 333;
    t.s = 389;
    t.t = 278;
    t.u = 500;
    t.v = 500;
    t.w = 722;
    t.x = 500;
    t.y = 500;
    t.z = 444;
    t.braceleft = 480;
    t.bar = 200;
    t.braceright = 480;
    t.asciitilde = 541;
    t.exclamdown = 333;
    t.cent = 500;
    t.sterling = 500;
    t.fraction = 167;
    t.yen = 500;
    t.florin = 500;
    t.section = 500;
    t.currency = 500;
    t.quotesingle = 180;
    t.quotedblleft = 444;
    t.guillemotleft = 500;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 556;
    t.fl = 556;
    t.endash = 500;
    t.dagger = 500;
    t.daggerdbl = 500;
    t.periodcentered = 250;
    t.paragraph = 453;
    t.bullet = 350;
    t.quotesinglbase = 333;
    t.quotedblbase = 444;
    t.quotedblright = 444;
    t.guillemotright = 500;
    t.ellipsis = 1000;
    t.perthousand = 1000;
    t.questiondown = 444;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 1000;
    t.AE = 889;
    t.ordfeminine = 276;
    t.Lslash = 611;
    t.Oslash = 722;
    t.OE = 889;
    t.ordmasculine = 310;
    t.ae = 667;
    t.dotlessi = 278;
    t.lslash = 278;
    t.oslash = 500;
    t.oe = 722;
    t.germandbls = 500;
    t.Idieresis = 333;
    t.eacute = 444;
    t.abreve = 444;
    t.uhungarumlaut = 500;
    t.ecaron = 444;
    t.Ydieresis = 722;
    t.divide = 564;
    t.Yacute = 722;
    t.Acircumflex = 722;
    t.aacute = 444;
    t.Ucircumflex = 722;
    t.yacute = 500;
    t.scommaaccent = 389;
    t.ecircumflex = 444;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 444;
    t.Uacute = 722;
    t.uogonek = 500;
    t.Edieresis = 611;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 760;
    t.Emacron = 611;
    t.ccaron = 444;
    t.aring = 444;
    t.Ncommaaccent = 722;
    t.lacute = 278;
    t.agrave = 444;
    t.Tcommaaccent = 611;
    t.Cacute = 667;
    t.atilde = 444;
    t.Edotaccent = 611;
    t.scaron = 389;
    t.scedilla = 389;
    t.iacute = 278;
    t.lozenge = 471;
    t.Rcaron = 667;
    t.Gcommaaccent = 722;
    t.ucircumflex = 500;
    t.acircumflex = 444;
    t.Amacron = 722;
    t.rcaron = 333;
    t.ccedilla = 444;
    t.Zdotaccent = 611;
    t.Thorn = 556;
    t.Omacron = 722;
    t.Racute = 667;
    t.Sacute = 556;
    t.dcaron = 588;
    t.Umacron = 722;
    t.uring = 500;
    t.threesuperior = 300;
    t.Ograve = 722;
    t.Agrave = 722;
    t.Abreve = 722;
    t.multiply = 564;
    t.uacute = 500;
    t.Tcaron = 611;
    t.partialdiff = 476;
    t.ydieresis = 500;
    t.Nacute = 722;
    t.icircumflex = 278;
    t.Ecircumflex = 611;
    t.adieresis = 444;
    t.edieresis = 444;
    t.cacute = 444;
    t.nacute = 500;
    t.umacron = 500;
    t.Ncaron = 722;
    t.Iacute = 333;
    t.plusminus = 564;
    t.brokenbar = 200;
    t.registered = 760;
    t.Gbreve = 722;
    t.Idotaccent = 333;
    t.summation = 600;
    t.Egrave = 611;
    t.racute = 333;
    t.omacron = 500;
    t.Zacute = 611;
    t.Zcaron = 611;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 667;
    t.lcommaaccent = 278;
    t.tcaron = 326;
    t.eogonek = 444;
    t.Uogonek = 722;
    t.Aacute = 722;
    t.Adieresis = 722;
    t.egrave = 444;
    t.zacute = 444;
    t.iogonek = 278;
    t.Oacute = 722;
    t.oacute = 500;
    t.amacron = 444;
    t.sacute = 389;
    t.idieresis = 278;
    t.Ocircumflex = 722;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 500;
    t.twosuperior = 300;
    t.Odieresis = 722;
    t.mu = 500;
    t.igrave = 278;
    t.ohungarumlaut = 500;
    t.Eogonek = 611;
    t.dcroat = 500;
    t.threequarters = 750;
    t.Scedilla = 556;
    t.lcaron = 344;
    t.Kcommaaccent = 722;
    t.Lacute = 611;
    t.trademark = 980;
    t.edotaccent = 444;
    t.Igrave = 333;
    t.Imacron = 333;
    t.Lcaron = 611;
    t.onehalf = 750;
    t.lessequal = 549;
    t.ocircumflex = 500;
    t.ntilde = 500;
    t.Uhungarumlaut = 722;
    t.Eacute = 611;
    t.emacron = 444;
    t.gbreve = 500;
    t.onequarter = 750;
    t.Scaron = 556;
    t.Scommaaccent = 556;
    t.Ohungarumlaut = 722;
    t.degree = 400;
    t.ograve = 500;
    t.Ccaron = 667;
    t.ugrave = 500;
    t.radical = 453;
    t.Dcaron = 722;
    t.rcommaaccent = 333;
    t.Ntilde = 722;
    t.otilde = 500;
    t.Rcommaaccent = 667;
    t.Lcommaaccent = 611;
    t.Atilde = 722;
    t.Aogonek = 722;
    t.Aring = 722;
    t.Otilde = 722;
    t.zdotaccent = 444;
    t.Ecaron = 611;
    t.Iogonek = 333;
    t.kcommaaccent = 500;
    t.minus = 564;
    t.Icircumflex = 333;
    t.ncaron = 500;
    t.tcommaaccent = 278;
    t.logicalnot = 564;
    t.odieresis = 500;
    t.udieresis = 500;
    t.notequal = 549;
    t.gcommaaccent = 500;
    t.eth = 500;
    t.zcaron = 444;
    t.ncommaaccent = 500;
    t.onesuperior = 300;
    t.imacron = 278;
    t.Euro = 500;
  });
  t["Times-Bold"] = getLookupTableFactory(function (t) {
    t.space = 250;
    t.exclam = 333;
    t.quotedbl = 555;
    t.numbersign = 500;
    t.dollar = 500;
    t.percent = 1000;
    t.ampersand = 833;
    t.quoteright = 333;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 500;
    t.plus = 570;
    t.comma = 250;
    t.hyphen = 333;
    t.period = 250;
    t.slash = 278;
    t.zero = 500;
    t.one = 500;
    t.two = 500;
    t.three = 500;
    t.four = 500;
    t.five = 500;
    t.six = 500;
    t.seven = 500;
    t.eight = 500;
    t.nine = 500;
    t.colon = 333;
    t.semicolon = 333;
    t.less = 570;
    t.equal = 570;
    t.greater = 570;
    t.question = 500;
    t.at = 930;
    t.A = 722;
    t.B = 667;
    t.C = 722;
    t.D = 722;
    t.E = 667;
    t.F = 611;
    t.G = 778;
    t.H = 778;
    t.I = 389;
    t.J = 500;
    t.K = 778;
    t.L = 667;
    t.M = 944;
    t.N = 722;
    t.O = 778;
    t.P = 611;
    t.Q = 778;
    t.R = 722;
    t.S = 556;
    t.T = 667;
    t.U = 722;
    t.V = 722;
    t.W = 1000;
    t.X = 722;
    t.Y = 722;
    t.Z = 667;
    t.bracketleft = 333;
    t.backslash = 278;
    t.bracketright = 333;
    t.asciicircum = 581;
    t.underscore = 500;
    t.quoteleft = 333;
    t.a = 500;
    t.b = 556;
    t.c = 444;
    t.d = 556;
    t.e = 444;
    t.f = 333;
    t.g = 500;
    t.h = 556;
    t.i = 278;
    t.j = 333;
    t.k = 556;
    t.l = 278;
    t.m = 833;
    t.n = 556;
    t.o = 500;
    t.p = 556;
    t.q = 556;
    t.r = 444;
    t.s = 389;
    t.t = 333;
    t.u = 556;
    t.v = 500;
    t.w = 722;
    t.x = 500;
    t.y = 500;
    t.z = 444;
    t.braceleft = 394;
    t.bar = 220;
    t.braceright = 394;
    t.asciitilde = 520;
    t.exclamdown = 333;
    t.cent = 500;
    t.sterling = 500;
    t.fraction = 167;
    t.yen = 500;
    t.florin = 500;
    t.section = 500;
    t.currency = 500;
    t.quotesingle = 278;
    t.quotedblleft = 500;
    t.guillemotleft = 500;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 556;
    t.fl = 556;
    t.endash = 500;
    t.dagger = 500;
    t.daggerdbl = 500;
    t.periodcentered = 250;
    t.paragraph = 540;
    t.bullet = 350;
    t.quotesinglbase = 333;
    t.quotedblbase = 500;
    t.quotedblright = 500;
    t.guillemotright = 500;
    t.ellipsis = 1000;
    t.perthousand = 1000;
    t.questiondown = 500;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 1000;
    t.AE = 1000;
    t.ordfeminine = 300;
    t.Lslash = 667;
    t.Oslash = 778;
    t.OE = 1000;
    t.ordmasculine = 330;
    t.ae = 722;
    t.dotlessi = 278;
    t.lslash = 278;
    t.oslash = 500;
    t.oe = 722;
    t.germandbls = 556;
    t.Idieresis = 389;
    t.eacute = 444;
    t.abreve = 500;
    t.uhungarumlaut = 556;
    t.ecaron = 444;
    t.Ydieresis = 722;
    t.divide = 570;
    t.Yacute = 722;
    t.Acircumflex = 722;
    t.aacute = 500;
    t.Ucircumflex = 722;
    t.yacute = 500;
    t.scommaaccent = 389;
    t.ecircumflex = 444;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 500;
    t.Uacute = 722;
    t.uogonek = 556;
    t.Edieresis = 667;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 747;
    t.Emacron = 667;
    t.ccaron = 444;
    t.aring = 500;
    t.Ncommaaccent = 722;
    t.lacute = 278;
    t.agrave = 500;
    t.Tcommaaccent = 667;
    t.Cacute = 722;
    t.atilde = 500;
    t.Edotaccent = 667;
    t.scaron = 389;
    t.scedilla = 389;
    t.iacute = 278;
    t.lozenge = 494;
    t.Rcaron = 722;
    t.Gcommaaccent = 778;
    t.ucircumflex = 556;
    t.acircumflex = 500;
    t.Amacron = 722;
    t.rcaron = 444;
    t.ccedilla = 444;
    t.Zdotaccent = 667;
    t.Thorn = 611;
    t.Omacron = 778;
    t.Racute = 722;
    t.Sacute = 556;
    t.dcaron = 672;
    t.Umacron = 722;
    t.uring = 556;
    t.threesuperior = 300;
    t.Ograve = 778;
    t.Agrave = 722;
    t.Abreve = 722;
    t.multiply = 570;
    t.uacute = 556;
    t.Tcaron = 667;
    t.partialdiff = 494;
    t.ydieresis = 500;
    t.Nacute = 722;
    t.icircumflex = 278;
    t.Ecircumflex = 667;
    t.adieresis = 500;
    t.edieresis = 444;
    t.cacute = 444;
    t.nacute = 556;
    t.umacron = 556;
    t.Ncaron = 722;
    t.Iacute = 389;
    t.plusminus = 570;
    t.brokenbar = 220;
    t.registered = 747;
    t.Gbreve = 778;
    t.Idotaccent = 389;
    t.summation = 600;
    t.Egrave = 667;
    t.racute = 444;
    t.omacron = 500;
    t.Zacute = 667;
    t.Zcaron = 667;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 722;
    t.lcommaaccent = 278;
    t.tcaron = 416;
    t.eogonek = 444;
    t.Uogonek = 722;
    t.Aacute = 722;
    t.Adieresis = 722;
    t.egrave = 444;
    t.zacute = 444;
    t.iogonek = 278;
    t.Oacute = 778;
    t.oacute = 500;
    t.amacron = 500;
    t.sacute = 389;
    t.idieresis = 278;
    t.Ocircumflex = 778;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 556;
    t.twosuperior = 300;
    t.Odieresis = 778;
    t.mu = 556;
    t.igrave = 278;
    t.ohungarumlaut = 500;
    t.Eogonek = 667;
    t.dcroat = 556;
    t.threequarters = 750;
    t.Scedilla = 556;
    t.lcaron = 394;
    t.Kcommaaccent = 778;
    t.Lacute = 667;
    t.trademark = 1000;
    t.edotaccent = 444;
    t.Igrave = 389;
    t.Imacron = 389;
    t.Lcaron = 667;
    t.onehalf = 750;
    t.lessequal = 549;
    t.ocircumflex = 500;
    t.ntilde = 556;
    t.Uhungarumlaut = 722;
    t.Eacute = 667;
    t.emacron = 444;
    t.gbreve = 500;
    t.onequarter = 750;
    t.Scaron = 556;
    t.Scommaaccent = 556;
    t.Ohungarumlaut = 778;
    t.degree = 400;
    t.ograve = 500;
    t.Ccaron = 722;
    t.ugrave = 556;
    t.radical = 549;
    t.Dcaron = 722;
    t.rcommaaccent = 444;
    t.Ntilde = 722;
    t.otilde = 500;
    t.Rcommaaccent = 722;
    t.Lcommaaccent = 667;
    t.Atilde = 722;
    t.Aogonek = 722;
    t.Aring = 722;
    t.Otilde = 778;
    t.zdotaccent = 444;
    t.Ecaron = 667;
    t.Iogonek = 389;
    t.kcommaaccent = 556;
    t.minus = 570;
    t.Icircumflex = 389;
    t.ncaron = 556;
    t.tcommaaccent = 333;
    t.logicalnot = 570;
    t.odieresis = 500;
    t.udieresis = 556;
    t.notequal = 549;
    t.gcommaaccent = 500;
    t.eth = 500;
    t.zcaron = 444;
    t.ncommaaccent = 556;
    t.onesuperior = 300;
    t.imacron = 278;
    t.Euro = 500;
  });
  t["Times-BoldItalic"] = getLookupTableFactory(function (t) {
    t.space = 250;
    t.exclam = 389;
    t.quotedbl = 555;
    t.numbersign = 500;
    t.dollar = 500;
    t.percent = 833;
    t.ampersand = 778;
    t.quoteright = 333;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 500;
    t.plus = 570;
    t.comma = 250;
    t.hyphen = 333;
    t.period = 250;
    t.slash = 278;
    t.zero = 500;
    t.one = 500;
    t.two = 500;
    t.three = 500;
    t.four = 500;
    t.five = 500;
    t.six = 500;
    t.seven = 500;
    t.eight = 500;
    t.nine = 500;
    t.colon = 333;
    t.semicolon = 333;
    t.less = 570;
    t.equal = 570;
    t.greater = 570;
    t.question = 500;
    t.at = 832;
    t.A = 667;
    t.B = 667;
    t.C = 667;
    t.D = 722;
    t.E = 667;
    t.F = 667;
    t.G = 722;
    t.H = 778;
    t.I = 389;
    t.J = 500;
    t.K = 667;
    t.L = 611;
    t.M = 889;
    t.N = 722;
    t.O = 722;
    t.P = 611;
    t.Q = 722;
    t.R = 667;
    t.S = 556;
    t.T = 611;
    t.U = 722;
    t.V = 667;
    t.W = 889;
    t.X = 667;
    t.Y = 611;
    t.Z = 611;
    t.bracketleft = 333;
    t.backslash = 278;
    t.bracketright = 333;
    t.asciicircum = 570;
    t.underscore = 500;
    t.quoteleft = 333;
    t.a = 500;
    t.b = 500;
    t.c = 444;
    t.d = 500;
    t.e = 444;
    t.f = 333;
    t.g = 500;
    t.h = 556;
    t.i = 278;
    t.j = 278;
    t.k = 500;
    t.l = 278;
    t.m = 778;
    t.n = 556;
    t.o = 500;
    t.p = 500;
    t.q = 500;
    t.r = 389;
    t.s = 389;
    t.t = 278;
    t.u = 556;
    t.v = 444;
    t.w = 667;
    t.x = 500;
    t.y = 444;
    t.z = 389;
    t.braceleft = 348;
    t.bar = 220;
    t.braceright = 348;
    t.asciitilde = 570;
    t.exclamdown = 389;
    t.cent = 500;
    t.sterling = 500;
    t.fraction = 167;
    t.yen = 500;
    t.florin = 500;
    t.section = 500;
    t.currency = 500;
    t.quotesingle = 278;
    t.quotedblleft = 500;
    t.guillemotleft = 500;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 556;
    t.fl = 556;
    t.endash = 500;
    t.dagger = 500;
    t.daggerdbl = 500;
    t.periodcentered = 250;
    t.paragraph = 500;
    t.bullet = 350;
    t.quotesinglbase = 333;
    t.quotedblbase = 500;
    t.quotedblright = 500;
    t.guillemotright = 500;
    t.ellipsis = 1000;
    t.perthousand = 1000;
    t.questiondown = 500;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 1000;
    t.AE = 944;
    t.ordfeminine = 266;
    t.Lslash = 611;
    t.Oslash = 722;
    t.OE = 944;
    t.ordmasculine = 300;
    t.ae = 722;
    t.dotlessi = 278;
    t.lslash = 278;
    t.oslash = 500;
    t.oe = 722;
    t.germandbls = 500;
    t.Idieresis = 389;
    t.eacute = 444;
    t.abreve = 500;
    t.uhungarumlaut = 556;
    t.ecaron = 444;
    t.Ydieresis = 611;
    t.divide = 570;
    t.Yacute = 611;
    t.Acircumflex = 667;
    t.aacute = 500;
    t.Ucircumflex = 722;
    t.yacute = 444;
    t.scommaaccent = 389;
    t.ecircumflex = 444;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 500;
    t.Uacute = 722;
    t.uogonek = 556;
    t.Edieresis = 667;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 747;
    t.Emacron = 667;
    t.ccaron = 444;
    t.aring = 500;
    t.Ncommaaccent = 722;
    t.lacute = 278;
    t.agrave = 500;
    t.Tcommaaccent = 611;
    t.Cacute = 667;
    t.atilde = 500;
    t.Edotaccent = 667;
    t.scaron = 389;
    t.scedilla = 389;
    t.iacute = 278;
    t.lozenge = 494;
    t.Rcaron = 667;
    t.Gcommaaccent = 722;
    t.ucircumflex = 556;
    t.acircumflex = 500;
    t.Amacron = 667;
    t.rcaron = 389;
    t.ccedilla = 444;
    t.Zdotaccent = 611;
    t.Thorn = 611;
    t.Omacron = 722;
    t.Racute = 667;
    t.Sacute = 556;
    t.dcaron = 608;
    t.Umacron = 722;
    t.uring = 556;
    t.threesuperior = 300;
    t.Ograve = 722;
    t.Agrave = 667;
    t.Abreve = 667;
    t.multiply = 570;
    t.uacute = 556;
    t.Tcaron = 611;
    t.partialdiff = 494;
    t.ydieresis = 444;
    t.Nacute = 722;
    t.icircumflex = 278;
    t.Ecircumflex = 667;
    t.adieresis = 500;
    t.edieresis = 444;
    t.cacute = 444;
    t.nacute = 556;
    t.umacron = 556;
    t.Ncaron = 722;
    t.Iacute = 389;
    t.plusminus = 570;
    t.brokenbar = 220;
    t.registered = 747;
    t.Gbreve = 722;
    t.Idotaccent = 389;
    t.summation = 600;
    t.Egrave = 667;
    t.racute = 389;
    t.omacron = 500;
    t.Zacute = 611;
    t.Zcaron = 611;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 667;
    t.lcommaaccent = 278;
    t.tcaron = 366;
    t.eogonek = 444;
    t.Uogonek = 722;
    t.Aacute = 667;
    t.Adieresis = 667;
    t.egrave = 444;
    t.zacute = 389;
    t.iogonek = 278;
    t.Oacute = 722;
    t.oacute = 500;
    t.amacron = 500;
    t.sacute = 389;
    t.idieresis = 278;
    t.Ocircumflex = 722;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 500;
    t.twosuperior = 300;
    t.Odieresis = 722;
    t.mu = 576;
    t.igrave = 278;
    t.ohungarumlaut = 500;
    t.Eogonek = 667;
    t.dcroat = 500;
    t.threequarters = 750;
    t.Scedilla = 556;
    t.lcaron = 382;
    t.Kcommaaccent = 667;
    t.Lacute = 611;
    t.trademark = 1000;
    t.edotaccent = 444;
    t.Igrave = 389;
    t.Imacron = 389;
    t.Lcaron = 611;
    t.onehalf = 750;
    t.lessequal = 549;
    t.ocircumflex = 500;
    t.ntilde = 556;
    t.Uhungarumlaut = 722;
    t.Eacute = 667;
    t.emacron = 444;
    t.gbreve = 500;
    t.onequarter = 750;
    t.Scaron = 556;
    t.Scommaaccent = 556;
    t.Ohungarumlaut = 722;
    t.degree = 400;
    t.ograve = 500;
    t.Ccaron = 667;
    t.ugrave = 556;
    t.radical = 549;
    t.Dcaron = 722;
    t.rcommaaccent = 389;
    t.Ntilde = 722;
    t.otilde = 500;
    t.Rcommaaccent = 667;
    t.Lcommaaccent = 611;
    t.Atilde = 667;
    t.Aogonek = 667;
    t.Aring = 667;
    t.Otilde = 722;
    t.zdotaccent = 389;
    t.Ecaron = 667;
    t.Iogonek = 389;
    t.kcommaaccent = 500;
    t.minus = 606;
    t.Icircumflex = 389;
    t.ncaron = 556;
    t.tcommaaccent = 278;
    t.logicalnot = 606;
    t.odieresis = 500;
    t.udieresis = 556;
    t.notequal = 549;
    t.gcommaaccent = 500;
    t.eth = 500;
    t.zcaron = 389;
    t.ncommaaccent = 556;
    t.onesuperior = 300;
    t.imacron = 278;
    t.Euro = 500;
  });
  t["Times-Italic"] = getLookupTableFactory(function (t) {
    t.space = 250;
    t.exclam = 333;
    t.quotedbl = 420;
    t.numbersign = 500;
    t.dollar = 500;
    t.percent = 833;
    t.ampersand = 778;
    t.quoteright = 333;
    t.parenleft = 333;
    t.parenright = 333;
    t.asterisk = 500;
    t.plus = 675;
    t.comma = 250;
    t.hyphen = 333;
    t.period = 250;
    t.slash = 278;
    t.zero = 500;
    t.one = 500;
    t.two = 500;
    t.three = 500;
    t.four = 500;
    t.five = 500;
    t.six = 500;
    t.seven = 500;
    t.eight = 500;
    t.nine = 500;
    t.colon = 333;
    t.semicolon = 333;
    t.less = 675;
    t.equal = 675;
    t.greater = 675;
    t.question = 500;
    t.at = 920;
    t.A = 611;
    t.B = 611;
    t.C = 667;
    t.D = 722;
    t.E = 611;
    t.F = 611;
    t.G = 722;
    t.H = 722;
    t.I = 333;
    t.J = 444;
    t.K = 667;
    t.L = 556;
    t.M = 833;
    t.N = 667;
    t.O = 722;
    t.P = 611;
    t.Q = 722;
    t.R = 611;
    t.S = 500;
    t.T = 556;
    t.U = 722;
    t.V = 611;
    t.W = 833;
    t.X = 611;
    t.Y = 556;
    t.Z = 556;
    t.bracketleft = 389;
    t.backslash = 278;
    t.bracketright = 389;
    t.asciicircum = 422;
    t.underscore = 500;
    t.quoteleft = 333;
    t.a = 500;
    t.b = 500;
    t.c = 444;
    t.d = 500;
    t.e = 444;
    t.f = 278;
    t.g = 500;
    t.h = 500;
    t.i = 278;
    t.j = 278;
    t.k = 444;
    t.l = 278;
    t.m = 722;
    t.n = 500;
    t.o = 500;
    t.p = 500;
    t.q = 500;
    t.r = 389;
    t.s = 389;
    t.t = 278;
    t.u = 500;
    t.v = 444;
    t.w = 667;
    t.x = 444;
    t.y = 444;
    t.z = 389;
    t.braceleft = 400;
    t.bar = 275;
    t.braceright = 400;
    t.asciitilde = 541;
    t.exclamdown = 389;
    t.cent = 500;
    t.sterling = 500;
    t.fraction = 167;
    t.yen = 500;
    t.florin = 500;
    t.section = 500;
    t.currency = 500;
    t.quotesingle = 214;
    t.quotedblleft = 556;
    t.guillemotleft = 500;
    t.guilsinglleft = 333;
    t.guilsinglright = 333;
    t.fi = 500;
    t.fl = 500;
    t.endash = 500;
    t.dagger = 500;
    t.daggerdbl = 500;
    t.periodcentered = 250;
    t.paragraph = 523;
    t.bullet = 350;
    t.quotesinglbase = 333;
    t.quotedblbase = 556;
    t.quotedblright = 556;
    t.guillemotright = 500;
    t.ellipsis = 889;
    t.perthousand = 1000;
    t.questiondown = 500;
    t.grave = 333;
    t.acute = 333;
    t.circumflex = 333;
    t.tilde = 333;
    t.macron = 333;
    t.breve = 333;
    t.dotaccent = 333;
    t.dieresis = 333;
    t.ring = 333;
    t.cedilla = 333;
    t.hungarumlaut = 333;
    t.ogonek = 333;
    t.caron = 333;
    t.emdash = 889;
    t.AE = 889;
    t.ordfeminine = 276;
    t.Lslash = 556;
    t.Oslash = 722;
    t.OE = 944;
    t.ordmasculine = 310;
    t.ae = 667;
    t.dotlessi = 278;
    t.lslash = 278;
    t.oslash = 500;
    t.oe = 667;
    t.germandbls = 500;
    t.Idieresis = 333;
    t.eacute = 444;
    t.abreve = 500;
    t.uhungarumlaut = 500;
    t.ecaron = 444;
    t.Ydieresis = 556;
    t.divide = 675;
    t.Yacute = 556;
    t.Acircumflex = 611;
    t.aacute = 500;
    t.Ucircumflex = 722;
    t.yacute = 444;
    t.scommaaccent = 389;
    t.ecircumflex = 444;
    t.Uring = 722;
    t.Udieresis = 722;
    t.aogonek = 500;
    t.Uacute = 722;
    t.uogonek = 500;
    t.Edieresis = 611;
    t.Dcroat = 722;
    t.commaaccent = 250;
    t.copyright = 760;
    t.Emacron = 611;
    t.ccaron = 444;
    t.aring = 500;
    t.Ncommaaccent = 667;
    t.lacute = 278;
    t.agrave = 500;
    t.Tcommaaccent = 556;
    t.Cacute = 667;
    t.atilde = 500;
    t.Edotaccent = 611;
    t.scaron = 389;
    t.scedilla = 389;
    t.iacute = 278;
    t.lozenge = 471;
    t.Rcaron = 611;
    t.Gcommaaccent = 722;
    t.ucircumflex = 500;
    t.acircumflex = 500;
    t.Amacron = 611;
    t.rcaron = 389;
    t.ccedilla = 444;
    t.Zdotaccent = 556;
    t.Thorn = 611;
    t.Omacron = 722;
    t.Racute = 611;
    t.Sacute = 500;
    t.dcaron = 544;
    t.Umacron = 722;
    t.uring = 500;
    t.threesuperior = 300;
    t.Ograve = 722;
    t.Agrave = 611;
    t.Abreve = 611;
    t.multiply = 675;
    t.uacute = 500;
    t.Tcaron = 556;
    t.partialdiff = 476;
    t.ydieresis = 444;
    t.Nacute = 667;
    t.icircumflex = 278;
    t.Ecircumflex = 611;
    t.adieresis = 500;
    t.edieresis = 444;
    t.cacute = 444;
    t.nacute = 500;
    t.umacron = 500;
    t.Ncaron = 667;
    t.Iacute = 333;
    t.plusminus = 675;
    t.brokenbar = 275;
    t.registered = 760;
    t.Gbreve = 722;
    t.Idotaccent = 333;
    t.summation = 600;
    t.Egrave = 611;
    t.racute = 389;
    t.omacron = 500;
    t.Zacute = 556;
    t.Zcaron = 556;
    t.greaterequal = 549;
    t.Eth = 722;
    t.Ccedilla = 667;
    t.lcommaaccent = 278;
    t.tcaron = 300;
    t.eogonek = 444;
    t.Uogonek = 722;
    t.Aacute = 611;
    t.Adieresis = 611;
    t.egrave = 444;
    t.zacute = 389;
    t.iogonek = 278;
    t.Oacute = 722;
    t.oacute = 500;
    t.amacron = 500;
    t.sacute = 389;
    t.idieresis = 278;
    t.Ocircumflex = 722;
    t.Ugrave = 722;
    t.Delta = 612;
    t.thorn = 500;
    t.twosuperior = 300;
    t.Odieresis = 722;
    t.mu = 500;
    t.igrave = 278;
    t.ohungarumlaut = 500;
    t.Eogonek = 611;
    t.dcroat = 500;
    t.threequarters = 750;
    t.Scedilla = 500;
    t.lcaron = 300;
    t.Kcommaaccent = 667;
    t.Lacute = 556;
    t.trademark = 980;
    t.edotaccent = 444;
    t.Igrave = 333;
    t.Imacron = 333;
    t.Lcaron = 611;
    t.onehalf = 750;
    t.lessequal = 549;
    t.ocircumflex = 500;
    t.ntilde = 500;
    t.Uhungarumlaut = 722;
    t.Eacute = 611;
    t.emacron = 444;
    t.gbreve = 500;
    t.onequarter = 750;
    t.Scaron = 500;
    t.Scommaaccent = 500;
    t.Ohungarumlaut = 722;
    t.degree = 400;
    t.ograve = 500;
    t.Ccaron = 667;
    t.ugrave = 500;
    t.radical = 453;
    t.Dcaron = 722;
    t.rcommaaccent = 389;
    t.Ntilde = 667;
    t.otilde = 500;
    t.Rcommaaccent = 611;
    t.Lcommaaccent = 556;
    t.Atilde = 611;
    t.Aogonek = 611;
    t.Aring = 611;
    t.Otilde = 722;
    t.zdotaccent = 389;
    t.Ecaron = 611;
    t.Iogonek = 333;
    t.kcommaaccent = 444;
    t.minus = 675;
    t.Icircumflex = 333;
    t.ncaron = 500;
    t.tcommaaccent = 278;
    t.logicalnot = 675;
    t.odieresis = 500;
    t.udieresis = 500;
    t.notequal = 549;
    t.gcommaaccent = 500;
    t.eth = 500;
    t.zcaron = 389;
    t.ncommaaccent = 500;
    t.onesuperior = 300;
    t.imacron = 278;
    t.Euro = 500;
  });
  t.ZapfDingbats = getLookupTableFactory(function (t) {
    t.space = 278;
    t.a1 = 974;
    t.a2 = 961;
    t.a202 = 974;
    t.a3 = 980;
    t.a4 = 719;
    t.a5 = 789;
    t.a119 = 790;
    t.a118 = 791;
    t.a117 = 690;
    t.a11 = 960;
    t.a12 = 939;
    t.a13 = 549;
    t.a14 = 855;
    t.a15 = 911;
    t.a16 = 933;
    t.a105 = 911;
    t.a17 = 945;
    t.a18 = 974;
    t.a19 = 755;
    t.a20 = 846;
    t.a21 = 762;
    t.a22 = 761;
    t.a23 = 571;
    t.a24 = 677;
    t.a25 = 763;
    t.a26 = 760;
    t.a27 = 759;
    t.a28 = 754;
    t.a6 = 494;
    t.a7 = 552;
    t.a8 = 537;
    t.a9 = 577;
    t.a10 = 692;
    t.a29 = 786;
    t.a30 = 788;
    t.a31 = 788;
    t.a32 = 790;
    t.a33 = 793;
    t.a34 = 794;
    t.a35 = 816;
    t.a36 = 823;
    t.a37 = 789;
    t.a38 = 841;
    t.a39 = 823;
    t.a40 = 833;
    t.a41 = 816;
    t.a42 = 831;
    t.a43 = 923;
    t.a44 = 744;
    t.a45 = 723;
    t.a46 = 749;
    t.a47 = 790;
    t.a48 = 792;
    t.a49 = 695;
    t.a50 = 776;
    t.a51 = 768;
    t.a52 = 792;
    t.a53 = 759;
    t.a54 = 707;
    t.a55 = 708;
    t.a56 = 682;
    t.a57 = 701;
    t.a58 = 826;
    t.a59 = 815;
    t.a60 = 789;
    t.a61 = 789;
    t.a62 = 707;
    t.a63 = 687;
    t.a64 = 696;
    t.a65 = 689;
    t.a66 = 786;
    t.a67 = 787;
    t.a68 = 713;
    t.a69 = 791;
    t.a70 = 785;
    t.a71 = 791;
    t.a72 = 873;
    t.a73 = 761;
    t.a74 = 762;
    t.a203 = 762;
    t.a75 = 759;
    t.a204 = 759;
    t.a76 = 892;
    t.a77 = 892;
    t.a78 = 788;
    t.a79 = 784;
    t.a81 = 438;
    t.a82 = 138;
    t.a83 = 277;
    t.a84 = 415;
    t.a97 = 392;
    t.a98 = 392;
    t.a99 = 668;
    t.a100 = 668;
    t.a89 = 390;
    t.a90 = 390;
    t.a93 = 317;
    t.a94 = 317;
    t.a91 = 276;
    t.a92 = 276;
    t.a205 = 509;
    t.a85 = 509;
    t.a206 = 410;
    t.a86 = 410;
    t.a87 = 234;
    t.a88 = 234;
    t.a95 = 334;
    t.a96 = 334;
    t.a101 = 732;
    t.a102 = 544;
    t.a103 = 544;
    t.a104 = 910;
    t.a106 = 667;
    t.a107 = 760;
    t.a108 = 760;
    t.a112 = 776;
    t.a111 = 595;
    t.a110 = 694;
    t.a109 = 626;
    t.a120 = 788;
    t.a121 = 788;
    t.a122 = 788;
    t.a123 = 788;
    t.a124 = 788;
    t.a125 = 788;
    t.a126 = 788;
    t.a127 = 788;
    t.a128 = 788;
    t.a129 = 788;
    t.a130 = 788;
    t.a131 = 788;
    t.a132 = 788;
    t.a133 = 788;
    t.a134 = 788;
    t.a135 = 788;
    t.a136 = 788;
    t.a137 = 788;
    t.a138 = 788;
    t.a139 = 788;
    t.a140 = 788;
    t.a141 = 788;
    t.a142 = 788;
    t.a143 = 788;
    t.a144 = 788;
    t.a145 = 788;
    t.a146 = 788;
    t.a147 = 788;
    t.a148 = 788;
    t.a149 = 788;
    t.a150 = 788;
    t.a151 = 788;
    t.a152 = 788;
    t.a153 = 788;
    t.a154 = 788;
    t.a155 = 788;
    t.a156 = 788;
    t.a157 = 788;
    t.a158 = 788;
    t.a159 = 788;
    t.a160 = 894;
    t.a161 = 838;
    t.a163 = 1016;
    t.a164 = 458;
    t.a196 = 748;
    t.a165 = 924;
    t.a192 = 748;
    t.a166 = 918;
    t.a167 = 927;
    t.a168 = 928;
    t.a169 = 928;
    t.a170 = 834;
    t.a171 = 873;
    t.a172 = 828;
    t.a173 = 924;
    t.a162 = 924;
    t.a174 = 917;
    t.a175 = 930;
    t.a176 = 931;
    t.a177 = 463;
    t.a178 = 883;
    t.a179 = 836;
    t.a193 = 836;
    t.a180 = 867;
    t.a199 = 867;
    t.a181 = 696;
    t.a200 = 696;
    t.a182 = 874;
    t.a201 = 874;
    t.a183 = 760;
    t.a184 = 946;
    t.a197 = 771;
    t.a185 = 865;
    t.a194 = 771;
    t.a198 = 888;
    t.a186 = 967;
    t.a195 = 888;
    t.a187 = 831;
    t.a188 = 873;
    t.a189 = 927;
    t.a190 = 970;
    t.a191 = 918;
  });
});
const getFontBasicMetrics = getLookupTableFactory(function (t) {
  t.Courier = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: -426
  };
  t["Courier-Bold"] = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: 439
  };
  t["Courier-Oblique"] = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: 426
  };
  t["Courier-BoldOblique"] = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: 426
  };
  t.Helvetica = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 523
  };
  t["Helvetica-Bold"] = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 532
  };
  t["Helvetica-Oblique"] = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 523
  };
  t["Helvetica-BoldOblique"] = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 532
  };
  t["Times-Roman"] = {
    ascent: 683,
    descent: -217,
    capHeight: 662,
    xHeight: 450
  };
  t["Times-Bold"] = {
    ascent: 683,
    descent: -217,
    capHeight: 676,
    xHeight: 461
  };
  t["Times-Italic"] = {
    ascent: 683,
    descent: -217,
    capHeight: 653,
    xHeight: 441
  };
  t["Times-BoldItalic"] = {
    ascent: 683,
    descent: -217,
    capHeight: 669,
    xHeight: 462
  };
  t.Symbol = {
    ascent: Math.NaN,
    descent: Math.NaN,
    capHeight: Math.NaN,
    xHeight: Math.NaN
  };
  t.ZapfDingbats = {
    ascent: Math.NaN,
    descent: Math.NaN,
    capHeight: Math.NaN,
    xHeight: Math.NaN
  };
});

;// ./src/core/glyf.js
const ON_CURVE_POINT = 1 << 0;
const X_SHORT_VECTOR = 1 << 1;
const Y_SHORT_VECTOR = 1 << 2;
const REPEAT_FLAG = 1 << 3;
const X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR = 1 << 4;
const Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR = 1 << 5;
const OVERLAP_SIMPLE = 1 << 6;
const ARG_1_AND_2_ARE_WORDS = 1 << 0;
const ARGS_ARE_XY_VALUES = 1 << 1;
const WE_HAVE_A_SCALE = 1 << 3;
const MORE_COMPONENTS = 1 << 5;
const WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;
const WE_HAVE_A_TWO_BY_TWO = 1 << 7;
const WE_HAVE_INSTRUCTIONS = 1 << 8;
class GlyfTable {
  constructor({
    glyfTable,
    isGlyphLocationsLong,
    locaTable,
    numGlyphs
  }) {
    this.glyphs = [];
    const loca = new DataView(locaTable.buffer, locaTable.byteOffset, locaTable.byteLength);
    const glyf = new DataView(glyfTable.buffer, glyfTable.byteOffset, glyfTable.byteLength);
    const offsetSize = isGlyphLocationsLong ? 4 : 2;
    let prev = isGlyphLocationsLong ? loca.getUint32(0) : 2 * loca.getUint16(0);
    let pos = 0;
    for (let i = 0; i < numGlyphs; i++) {
      pos += offsetSize;
      const next = isGlyphLocationsLong ? loca.getUint32(pos) : 2 * loca.getUint16(pos);
      if (next === prev) {
        this.glyphs.push(new Glyph({}));
        continue;
      }
      const glyph = Glyph.parse(prev, glyf);
      this.glyphs.push(glyph);
      prev = next;
    }
  }
  getSize() {
    return Math.sumPrecise(this.glyphs.map(g => g.getSize() + 3 & ~3));
  }
  write() {
    const totalSize = this.getSize();
    const glyfTable = new DataView(new ArrayBuffer(totalSize));
    const isLocationLong = totalSize > 0x1fffe;
    const offsetSize = isLocationLong ? 4 : 2;
    const locaTable = new DataView(new ArrayBuffer((this.glyphs.length + 1) * offsetSize));
    if (isLocationLong) {
      locaTable.setUint32(0, 0);
    } else {
      locaTable.setUint16(0, 0);
    }
    let pos = 0;
    let locaIndex = 0;
    for (const glyph of this.glyphs) {
      pos += glyph.write(pos, glyfTable);
      pos = pos + 3 & ~3;
      locaIndex += offsetSize;
      if (isLocationLong) {
        locaTable.setUint32(locaIndex, pos);
      } else {
        locaTable.setUint16(locaIndex, pos >> 1);
      }
    }
    return {
      isLocationLong,
      loca: new Uint8Array(locaTable.buffer),
      glyf: new Uint8Array(glyfTable.buffer)
    };
  }
  scale(factors) {
    for (let i = 0, ii = this.glyphs.length; i < ii; i++) {
      this.glyphs[i].scale(factors[i]);
    }
  }
}
class Glyph {
  constructor({
    header = null,
    simple = null,
    composites = null
  }) {
    this.header = header;
    this.simple = simple;
    this.composites = composites;
  }
  static parse(pos, glyf) {
    const [read, header] = GlyphHeader.parse(pos, glyf);
    pos += read;
    if (header.numberOfContours < 0) {
      const composites = [];
      while (true) {
        const [n, composite] = CompositeGlyph.parse(pos, glyf);
        pos += n;
        composites.push(composite);
        if (!(composite.flags & MORE_COMPONENTS)) {
          break;
        }
      }
      return new Glyph({
        header,
        composites
      });
    }
    const simple = SimpleGlyph.parse(pos, glyf, header.numberOfContours);
    return new Glyph({
      header,
      simple
    });
  }
  getSize() {
    if (!this.header) {
      return 0;
    }
    const size = this.simple ? this.simple.getSize() : Math.sumPrecise(this.composites.map(c => c.getSize()));
    return this.header.getSize() + size;
  }
  write(pos, buf) {
    if (!this.header) {
      return 0;
    }
    const spos = pos;
    pos += this.header.write(pos, buf);
    if (this.simple) {
      pos += this.simple.write(pos, buf);
    } else {
      for (const composite of this.composites) {
        pos += composite.write(pos, buf);
      }
    }
    return pos - spos;
  }
  scale(factor) {
    if (!this.header) {
      return;
    }
    const xMiddle = (this.header.xMin + this.header.xMax) / 2;
    this.header.scale(xMiddle, factor);
    if (this.simple) {
      this.simple.scale(xMiddle, factor);
    } else {
      for (const composite of this.composites) {
        composite.scale(xMiddle, factor);
      }
    }
  }
}
class GlyphHeader {
  constructor({
    numberOfContours,
    xMin,
    yMin,
    xMax,
    yMax
  }) {
    this.numberOfContours = numberOfContours;
    this.xMin = xMin;
    this.yMin = yMin;
    this.xMax = xMax;
    this.yMax = yMax;
  }
  static parse(pos, glyf) {
    return [10, new GlyphHeader({
      numberOfContours: glyf.getInt16(pos),
      xMin: glyf.getInt16(pos + 2),
      yMin: glyf.getInt16(pos + 4),
      xMax: glyf.getInt16(pos + 6),
      yMax: glyf.getInt16(pos + 8)
    })];
  }
  getSize() {
    return 10;
  }
  write(pos, buf) {
    buf.setInt16(pos, this.numberOfContours);
    buf.setInt16(pos + 2, this.xMin);
    buf.setInt16(pos + 4, this.yMin);
    buf.setInt16(pos + 6, this.xMax);
    buf.setInt16(pos + 8, this.yMax);
    return 10;
  }
  scale(x, factor) {
    this.xMin = Math.round(x + (this.xMin - x) * factor);
    this.xMax = Math.round(x + (this.xMax - x) * factor);
  }
}
class Contour {
  constructor({
    flags,
    xCoordinates,
    yCoordinates
  }) {
    this.xCoordinates = xCoordinates;
    this.yCoordinates = yCoordinates;
    this.flags = flags;
  }
}
class SimpleGlyph {
  constructor({
    contours,
    instructions
  }) {
    this.contours = contours;
    this.instructions = instructions;
  }
  static parse(pos, glyf, numberOfContours) {
    const endPtsOfContours = [];
    for (let i = 0; i < numberOfContours; i++) {
      const endPt = glyf.getUint16(pos);
      pos += 2;
      endPtsOfContours.push(endPt);
    }
    const numberOfPt = endPtsOfContours[numberOfContours - 1] + 1;
    const instructionLength = glyf.getUint16(pos);
    pos += 2;
    const instructions = new Uint8Array(glyf).slice(pos, pos + instructionLength);
    pos += instructionLength;
    const flags = [];
    for (let i = 0; i < numberOfPt; pos++, i++) {
      let flag = glyf.getUint8(pos);
      flags.push(flag);
      if (flag & REPEAT_FLAG) {
        const count = glyf.getUint8(++pos);
        flag ^= REPEAT_FLAG;
        for (let m = 0; m < count; m++) {
          flags.push(flag);
        }
        i += count;
      }
    }
    const allXCoordinates = [];
    let xCoordinates = [];
    let yCoordinates = [];
    let pointFlags = [];
    const contours = [];
    let endPtsOfContoursIndex = 0;
    let lastCoordinate = 0;
    for (let i = 0; i < numberOfPt; i++) {
      const flag = flags[i];
      if (flag & X_SHORT_VECTOR) {
        const x = glyf.getUint8(pos++);
        lastCoordinate += flag & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR ? x : -x;
        xCoordinates.push(lastCoordinate);
      } else if (flag & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR) {
        xCoordinates.push(lastCoordinate);
      } else {
        lastCoordinate += glyf.getInt16(pos);
        pos += 2;
        xCoordinates.push(lastCoordinate);
      }
      if (endPtsOfContours[endPtsOfContoursIndex] === i) {
        endPtsOfContoursIndex++;
        allXCoordinates.push(xCoordinates);
        xCoordinates = [];
      }
    }
    lastCoordinate = 0;
    endPtsOfContoursIndex = 0;
    for (let i = 0; i < numberOfPt; i++) {
      const flag = flags[i];
      if (flag & Y_SHORT_VECTOR) {
        const y = glyf.getUint8(pos++);
        lastCoordinate += flag & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR ? y : -y;
        yCoordinates.push(lastCoordinate);
      } else if (flag & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR) {
        yCoordinates.push(lastCoordinate);
      } else {
        lastCoordinate += glyf.getInt16(pos);
        pos += 2;
        yCoordinates.push(lastCoordinate);
      }
      pointFlags.push(flag & ON_CURVE_POINT | flag & OVERLAP_SIMPLE);
      if (endPtsOfContours[endPtsOfContoursIndex] === i) {
        xCoordinates = allXCoordinates[endPtsOfContoursIndex];
        endPtsOfContoursIndex++;
        contours.push(new Contour({
          flags: pointFlags,
          xCoordinates,
          yCoordinates
        }));
        yCoordinates = [];
        pointFlags = [];
      }
    }
    return new SimpleGlyph({
      contours,
      instructions
    });
  }
  getSize() {
    let size = this.contours.length * 2 + 2 + this.instructions.length;
    let lastX = 0;
    let lastY = 0;
    for (const contour of this.contours) {
      size += contour.flags.length;
      for (let i = 0, ii = contour.xCoordinates.length; i < ii; i++) {
        const x = contour.xCoordinates[i];
        const y = contour.yCoordinates[i];
        let abs = Math.abs(x - lastX);
        if (abs > 255) {
          size += 2;
        } else if (abs > 0) {
          size += 1;
        }
        lastX = x;
        abs = Math.abs(y - lastY);
        if (abs > 255) {
          size += 2;
        } else if (abs > 0) {
          size += 1;
        }
        lastY = y;
      }
    }
    return size;
  }
  write(pos, buf) {
    const spos = pos;
    const xCoordinates = [];
    const yCoordinates = [];
    const flags = [];
    let lastX = 0;
    let lastY = 0;
    for (const contour of this.contours) {
      for (let i = 0, ii = contour.xCoordinates.length; i < ii; i++) {
        let flag = contour.flags[i];
        const x = contour.xCoordinates[i];
        let delta = x - lastX;
        if (delta === 0) {
          flag |= X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR;
          xCoordinates.push(0);
        } else {
          const abs = Math.abs(delta);
          if (abs <= 255) {
            flag |= delta >= 0 ? X_SHORT_VECTOR | X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR : X_SHORT_VECTOR;
            xCoordinates.push(abs);
          } else {
            xCoordinates.push(delta);
          }
        }
        lastX = x;
        const y = contour.yCoordinates[i];
        delta = y - lastY;
        if (delta === 0) {
          flag |= Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR;
          yCoordinates.push(0);
        } else {
          const abs = Math.abs(delta);
          if (abs <= 255) {
            flag |= delta >= 0 ? Y_SHORT_VECTOR | Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR : Y_SHORT_VECTOR;
            yCoordinates.push(abs);
          } else {
            yCoordinates.push(delta);
          }
        }
        lastY = y;
        flags.push(flag);
      }
      buf.setUint16(pos, xCoordinates.length - 1);
      pos += 2;
    }
    buf.setUint16(pos, this.instructions.length);
    pos += 2;
    if (this.instructions.length) {
      new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(this.instructions, pos);
      pos += this.instructions.length;
    }
    for (const flag of flags) {
      buf.setUint8(pos++, flag);
    }
    for (let i = 0, ii = xCoordinates.length; i < ii; i++) {
      const x = xCoordinates[i];
      const flag = flags[i];
      if (flag & X_SHORT_VECTOR) {
        buf.setUint8(pos++, x);
      } else if (!(flag & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR)) {
        buf.setInt16(pos, x);
        pos += 2;
      }
    }
    for (let i = 0, ii = yCoordinates.length; i < ii; i++) {
      const y = yCoordinates[i];
      const flag = flags[i];
      if (flag & Y_SHORT_VECTOR) {
        buf.setUint8(pos++, y);
      } else if (!(flag & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR)) {
        buf.setInt16(pos, y);
        pos += 2;
      }
    }
    return pos - spos;
  }
  scale(x, factor) {
    for (const contour of this.contours) {
      if (contour.xCoordinates.length === 0) {
        continue;
      }
      for (let i = 0, ii = contour.xCoordinates.length; i < ii; i++) {
        contour.xCoordinates[i] = Math.round(x + (contour.xCoordinates[i] - x) * factor);
      }
    }
  }
}
class CompositeGlyph {
  constructor({
    flags,
    glyphIndex,
    argument1,
    argument2,
    transf,
    instructions
  }) {
    this.flags = flags;
    this.glyphIndex = glyphIndex;
    this.argument1 = argument1;
    this.argument2 = argument2;
    this.transf = transf;
    this.instructions = instructions;
  }
  static parse(pos, glyf) {
    const spos = pos;
    const transf = [];
    let flags = glyf.getUint16(pos);
    const glyphIndex = glyf.getUint16(pos + 2);
    pos += 4;
    let argument1, argument2;
    if (flags & ARG_1_AND_2_ARE_WORDS) {
      if (flags & ARGS_ARE_XY_VALUES) {
        argument1 = glyf.getInt16(pos);
        argument2 = glyf.getInt16(pos + 2);
      } else {
        argument1 = glyf.getUint16(pos);
        argument2 = glyf.getUint16(pos + 2);
      }
      pos += 4;
      flags ^= ARG_1_AND_2_ARE_WORDS;
    } else {
      if (flags & ARGS_ARE_XY_VALUES) {
        argument1 = glyf.getInt8(pos);
        argument2 = glyf.getInt8(pos + 1);
      } else {
        argument1 = glyf.getUint8(pos);
        argument2 = glyf.getUint8(pos + 1);
      }
      pos += 2;
    }
    if (flags & WE_HAVE_A_SCALE) {
      transf.push(glyf.getUint16(pos));
      pos += 2;
    } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
      transf.push(glyf.getUint16(pos), glyf.getUint16(pos + 2));
      pos += 4;
    } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
      transf.push(glyf.getUint16(pos), glyf.getUint16(pos + 2), glyf.getUint16(pos + 4), glyf.getUint16(pos + 6));
      pos += 8;
    }
    let instructions = null;
    if (flags & WE_HAVE_INSTRUCTIONS) {
      const instructionLength = glyf.getUint16(pos);
      pos += 2;
      instructions = new Uint8Array(glyf).slice(pos, pos + instructionLength);
      pos += instructionLength;
    }
    return [pos - spos, new CompositeGlyph({
      flags,
      glyphIndex,
      argument1,
      argument2,
      transf,
      instructions
    })];
  }
  getSize() {
    let size = 2 + 2 + this.transf.length * 2;
    if (this.flags & WE_HAVE_INSTRUCTIONS) {
      size += 2 + this.instructions.length;
    }
    size += 2;
    if (this.flags & 2) {
      if (!(this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127)) {
        size += 2;
      }
    } else if (!(this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255)) {
      size += 2;
    }
    return size;
  }
  write(pos, buf) {
    const spos = pos;
    if (this.flags & ARGS_ARE_XY_VALUES) {
      if (!(this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127)) {
        this.flags |= ARG_1_AND_2_ARE_WORDS;
      }
    } else if (!(this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255)) {
      this.flags |= ARG_1_AND_2_ARE_WORDS;
    }
    buf.setUint16(pos, this.flags);
    buf.setUint16(pos + 2, this.glyphIndex);
    pos += 4;
    if (this.flags & ARG_1_AND_2_ARE_WORDS) {
      if (this.flags & ARGS_ARE_XY_VALUES) {
        buf.setInt16(pos, this.argument1);
        buf.setInt16(pos + 2, this.argument2);
      } else {
        buf.setUint16(pos, this.argument1);
        buf.setUint16(pos + 2, this.argument2);
      }
      pos += 4;
    } else {
      buf.setUint8(pos, this.argument1);
      buf.setUint8(pos + 1, this.argument2);
      pos += 2;
    }
    if (this.flags & WE_HAVE_INSTRUCTIONS) {
      buf.setUint16(pos, this.instructions.length);
      pos += 2;
      if (this.instructions.length) {
        new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(this.instructions, pos);
        pos += this.instructions.length;
      }
    }
    return pos - spos;
  }
  scale(x, factor) {}
}

;// ./src/core/opentype_file_builder.js


function writeInt16(dest, offset, num) {
  dest[offset] = num >> 8 & 0xff;
  dest[offset + 1] = num & 0xff;
}
function writeInt32(dest, offset, num) {
  dest[offset] = num >> 24 & 0xff;
  dest[offset + 1] = num >> 16 & 0xff;
  dest[offset + 2] = num >> 8 & 0xff;
  dest[offset + 3] = num & 0xff;
}
function writeData(dest, offset, data) {
  if (data instanceof Uint8Array) {
    dest.set(data, offset);
  } else if (typeof data === "string") {
    for (let i = 0, ii = data.length; i < ii; i++) {
      dest[offset++] = data.charCodeAt(i) & 0xff;
    }
  } else {
    for (const num of data) {
      dest[offset++] = num & 0xff;
    }
  }
}
const OTF_HEADER_SIZE = 12;
const OTF_TABLE_ENTRY_SIZE = 16;
class OpenTypeFileBuilder {
  constructor(sfnt) {
    this.sfnt = sfnt;
    this.tables = Object.create(null);
  }
  static getSearchParams(entriesCount, entrySize) {
    let maxPower2 = 1,
      log2 = 0;
    while ((maxPower2 ^ entriesCount) > maxPower2) {
      maxPower2 <<= 1;
      log2++;
    }
    const searchRange = maxPower2 * entrySize;
    return {
      range: searchRange,
      entry: log2,
      rangeShift: entrySize * entriesCount - searchRange
    };
  }
  toArray() {
    let sfnt = this.sfnt;
    const tables = this.tables;
    const tablesNames = Object.keys(tables);
    tablesNames.sort();
    const numTables = tablesNames.length;
    let i, j, jj, table, tableName;
    let offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;
    const tableOffsets = [offset];
    for (i = 0; i < numTables; i++) {
      table = tables[tablesNames[i]];
      const paddedLength = (table.length + 3 & ~3) >>> 0;
      offset += paddedLength;
      tableOffsets.push(offset);
    }
    const file = new Uint8Array(offset);
    for (i = 0; i < numTables; i++) {
      table = tables[tablesNames[i]];
      writeData(file, tableOffsets[i], table);
    }
    if (sfnt === "true") {
      sfnt = string32(0x00010000);
    }
    file[0] = sfnt.charCodeAt(0) & 0xff;
    file[1] = sfnt.charCodeAt(1) & 0xff;
    file[2] = sfnt.charCodeAt(2) & 0xff;
    file[3] = sfnt.charCodeAt(3) & 0xff;
    writeInt16(file, 4, numTables);
    const searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);
    writeInt16(file, 6, searchParams.range);
    writeInt16(file, 8, searchParams.entry);
    writeInt16(file, 10, searchParams.rangeShift);
    offset = OTF_HEADER_SIZE;
    for (i = 0; i < numTables; i++) {
      tableName = tablesNames[i];
      file[offset] = tableName.charCodeAt(0) & 0xff;
      file[offset + 1] = tableName.charCodeAt(1) & 0xff;
      file[offset + 2] = tableName.charCodeAt(2) & 0xff;
      file[offset + 3] = tableName.charCodeAt(3) & 0xff;
      let checksum = 0;
      for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {
        const quad = readUint32(file, j);
        checksum = checksum + quad >>> 0;
      }
      writeInt32(file, offset + 4, checksum);
      writeInt32(file, offset + 8, tableOffsets[i]);
      writeInt32(file, offset + 12, tables[tableName].length);
      offset += OTF_TABLE_ENTRY_SIZE;
    }
    return file;
  }
  addTable(tag, data) {
    if (tag in this.tables) {
      throw new Error("Table " + tag + " already exists");
    }
    this.tables[tag] = data;
  }
}

;// ./src/core/type1_parser.js




const HINTING_ENABLED = false;
const COMMAND_MAP = {
  hstem: [1],
  vstem: [3],
  vmoveto: [4],
  rlineto: [5],
  hlineto: [6],
  vlineto: [7],
  rrcurveto: [8],
  callsubr: [10],
  flex: [12, 35],
  drop: [12, 18],
  endchar: [14],
  rmoveto: [21],
  hmoveto: [22],
  vhcurveto: [30],
  hvcurveto: [31]
};
class Type1CharString {
  constructor() {
    this.width = 0;
    this.lsb = 0;
    this.flexing = false;
    this.output = [];
    this.stack = [];
  }
  convert(encoded, subrs, seacAnalysisEnabled) {
    const count = encoded.length;
    let error = false;
    let wx, sbx, subrNumber;
    for (let i = 0; i < count; i++) {
      let value = encoded[i];
      if (value < 32) {
        if (value === 12) {
          value = (value << 8) + encoded[++i];
        }
        switch (value) {
          case 1:
            if (!HINTING_ENABLED) {
              this.stack = [];
              break;
            }
            error = this.executeCommand(2, COMMAND_MAP.hstem);
            break;
          case 3:
            if (!HINTING_ENABLED) {
              this.stack = [];
              break;
            }
            error = this.executeCommand(2, COMMAND_MAP.vstem);
            break;
          case 4:
            if (this.flexing) {
              if (this.stack.length < 1) {
                error = true;
                break;
              }
              const dy = this.stack.pop();
              this.stack.push(0, dy);
              break;
            }
            error = this.executeCommand(1, COMMAND_MAP.vmoveto);
            break;
          case 5:
            error = this.executeCommand(2, COMMAND_MAP.rlineto);
            break;
          case 6:
            error = this.executeCommand(1, COMMAND_MAP.hlineto);
            break;
          case 7:
            error = this.executeCommand(1, COMMAND_MAP.vlineto);
            break;
          case 8:
            error = this.executeCommand(6, COMMAND_MAP.rrcurveto);
            break;
          case 9:
            this.stack = [];
            break;
          case 10:
            if (this.stack.length < 1) {
              error = true;
              break;
            }
            subrNumber = this.stack.pop();
            if (!subrs[subrNumber]) {
              error = true;
              break;
            }
            error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);
            break;
          case 11:
            return error;
          case 13:
            if (this.stack.length < 2) {
              error = true;
              break;
            }
            wx = this.stack.pop();
            sbx = this.stack.pop();
            this.lsb = sbx;
            this.width = wx;
            this.stack.push(wx, sbx);
            error = this.executeCommand(2, COMMAND_MAP.hmoveto);
            break;
          case 14:
            this.output.push(COMMAND_MAP.endchar[0]);
            break;
          case 21:
            if (this.flexing) {
              break;
            }
            error = this.executeCommand(2, COMMAND_MAP.rmoveto);
            break;
          case 22:
            if (this.flexing) {
              this.stack.push(0);
              break;
            }
            error = this.executeCommand(1, COMMAND_MAP.hmoveto);
            break;
          case 30:
            error = this.executeCommand(4, COMMAND_MAP.vhcurveto);
            break;
          case 31:
            error = this.executeCommand(4, COMMAND_MAP.hvcurveto);
            break;
          case (12 << 8) + 0:
            this.stack = [];
            break;
          case (12 << 8) + 1:
            if (!HINTING_ENABLED) {
              this.stack = [];
              break;
            }
            error = this.executeCommand(2, COMMAND_MAP.vstem);
            break;
          case (12 << 8) + 2:
            if (!HINTING_ENABLED) {
              this.stack = [];
              break;
            }
            error = this.executeCommand(2, COMMAND_MAP.hstem);
            break;
          case (12 << 8) + 6:
            if (seacAnalysisEnabled) {
              const asb = this.stack.at(-5);
              this.seac = this.stack.splice(-4, 4);
              this.seac[0] += this.lsb - asb;
              error = this.executeCommand(0, COMMAND_MAP.endchar);
            } else {
              error = this.executeCommand(4, COMMAND_MAP.endchar);
            }
            break;
          case (12 << 8) + 7:
            if (this.stack.length < 4) {
              error = true;
              break;
            }
            this.stack.pop();
            wx = this.stack.pop();
            const sby = this.stack.pop();
            sbx = this.stack.pop();
            this.lsb = sbx;
            this.width = wx;
            this.stack.push(wx, sbx, sby);
            error = this.executeCommand(3, COMMAND_MAP.rmoveto);
            break;
          case (12 << 8) + 12:
            if (this.stack.length < 2) {
              error = true;
              break;
            }
            const num2 = this.stack.pop();
            const num1 = this.stack.pop();
            this.stack.push(num1 / num2);
            break;
          case (12 << 8) + 16:
            if (this.stack.length < 2) {
              error = true;
              break;
            }
            subrNumber = this.stack.pop();
            const numArgs = this.stack.pop();
            if (subrNumber === 0 && numArgs === 3) {
              const flexArgs = this.stack.splice(-17, 17);
              this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);
              error = this.executeCommand(13, COMMAND_MAP.flex, true);
              this.flexing = false;
              this.stack.push(flexArgs[15], flexArgs[16]);
            } else if (subrNumber === 1 && numArgs === 0) {
              this.flexing = true;
            }
            break;
          case (12 << 8) + 17:
            break;
          case (12 << 8) + 33:
            this.stack = [];
            break;
          default:
            warn('Unknown type 1 charstring command of "' + value + '"');
            break;
        }
        if (error) {
          break;
        }
        continue;
      } else if (value <= 246) {
        value -= 139;
      } else if (value <= 250) {
        value = (value - 247) * 256 + encoded[++i] + 108;
      } else if (value <= 254) {
        value = -((value - 251) * 256) - encoded[++i] - 108;
      } else {
        value = (encoded[++i] & 0xff) << 24 | (encoded[++i] & 0xff) << 16 | (encoded[++i] & 0xff) << 8 | (encoded[++i] & 0xff) << 0;
      }
      this.stack.push(value);
    }
    return error;
  }
  executeCommand(howManyArgs, command, keepStack) {
    const stackLength = this.stack.length;
    if (howManyArgs > stackLength) {
      return true;
    }
    const start = stackLength - howManyArgs;
    for (let i = start; i < stackLength; i++) {
      let value = this.stack[i];
      if (Number.isInteger(value)) {
        this.output.push(28, value >> 8 & 0xff, value & 0xff);
      } else {
        value = 65536 * value | 0;
        this.output.push(255, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
      }
    }
    this.output.push(...command);
    if (keepStack) {
      this.stack.splice(start, howManyArgs);
    } else {
      this.stack.length = 0;
    }
    return false;
  }
}
const EEXEC_ENCRYPT_KEY = 55665;
const CHAR_STRS_ENCRYPT_KEY = 4330;
function isHexDigit(code) {
  return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;
}
function decrypt(data, key, discardNumber) {
  if (discardNumber >= data.length) {
    return new Uint8Array(0);
  }
  const c1 = 52845,
    c2 = 22719;
  let r = key | 0,
    i,
    j;
  for (i = 0; i < discardNumber; i++) {
    r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;
  }
  const count = data.length - discardNumber;
  const decrypted = new Uint8Array(count);
  for (i = discardNumber, j = 0; j < count; i++, j++) {
    const value = data[i];
    decrypted[j] = value ^ r >> 8;
    r = (value + r) * c1 + c2 & (1 << 16) - 1;
  }
  return decrypted;
}
function decryptAscii(data, key, discardNumber) {
  const c1 = 52845,
    c2 = 22719;
  let r = key | 0;
  const count = data.length,
    maybeLength = count >>> 1;
  const decrypted = new Uint8Array(maybeLength);
  let i, j;
  for (i = 0, j = 0; i < count; i++) {
    const digit1 = data[i];
    if (!isHexDigit(digit1)) {
      continue;
    }
    i++;
    let digit2;
    while (i < count && !isHexDigit(digit2 = data[i])) {
      i++;
    }
    if (i < count) {
      const value = parseInt(String.fromCharCode(digit1, digit2), 16);
      decrypted[j++] = value ^ r >> 8;
      r = (value + r) * c1 + c2 & (1 << 16) - 1;
    }
  }
  return decrypted.slice(discardNumber, j);
}
function isSpecial(c) {
  return c === 0x2f || c === 0x5b || c === 0x5d || c === 0x7b || c === 0x7d || c === 0x28 || c === 0x29;
}
class Type1Parser {
  constructor(stream, encrypted, seacAnalysisEnabled) {
    if (encrypted) {
      const data = stream.getBytes();
      const isBinary = !((isHexDigit(data[0]) || isWhiteSpace(data[0])) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]) && isHexDigit(data[4]) && isHexDigit(data[5]) && isHexDigit(data[6]) && isHexDigit(data[7]));
      stream = new Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));
    }
    this.seacAnalysisEnabled = !!seacAnalysisEnabled;
    this.stream = stream;
    this.nextChar();
  }
  readNumberArray() {
    this.getToken();
    const array = [];
    while (true) {
      const token = this.getToken();
      if (token === null || token === "]" || token === "}") {
        break;
      }
      array.push(parseFloat(token || 0));
    }
    return array;
  }
  readNumber() {
    const token = this.getToken();
    return parseFloat(token || 0);
  }
  readInt() {
    const token = this.getToken();
    return parseInt(token || 0, 10) | 0;
  }
  readBoolean() {
    const token = this.getToken();
    return token === "true" ? 1 : 0;
  }
  nextChar() {
    return this.currentChar = this.stream.getByte();
  }
  prevChar() {
    this.stream.skip(-2);
    return this.currentChar = this.stream.getByte();
  }
  getToken() {
    let comment = false;
    let ch = this.currentChar;
    while (true) {
      if (ch === -1) {
        return null;
      }
      if (comment) {
        if (ch === 0x0a || ch === 0x0d) {
          comment = false;
        }
      } else if (ch === 0x25) {
        comment = true;
      } else if (!isWhiteSpace(ch)) {
        break;
      }
      ch = this.nextChar();
    }
    if (isSpecial(ch)) {
      this.nextChar();
      return String.fromCharCode(ch);
    }
    let token = "";
    do {
      token += String.fromCharCode(ch);
      ch = this.nextChar();
    } while (ch >= 0 && !isWhiteSpace(ch) && !isSpecial(ch));
    return token;
  }
  readCharStrings(bytes, lenIV) {
    if (lenIV === -1) {
      return bytes;
    }
    return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);
  }
  extractFontProgram(properties) {
    const stream = this.stream;
    const subrs = [],
      charstrings = [];
    const privateData = Object.create(null);
    privateData.lenIV = 4;
    const program = {
      subrs: [],
      charstrings: [],
      properties: {
        privateData
      }
    };
    let token, length, data, lenIV;
    while ((token = this.getToken()) !== null) {
      if (token !== "/") {
        continue;
      }
      token = this.getToken();
      switch (token) {
        case "CharStrings":
          this.getToken();
          this.getToken();
          this.getToken();
          this.getToken();
          while (true) {
            token = this.getToken();
            if (token === null || token === "end") {
              break;
            }
            if (token !== "/") {
              continue;
            }
            const glyph = this.getToken();
            length = this.readInt();
            this.getToken();
            data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);
            lenIV = program.properties.privateData.lenIV;
            const encoded = this.readCharStrings(data, lenIV);
            this.nextChar();
            token = this.getToken();
            if (token === "noaccess") {
              this.getToken();
            } else if (token === "/") {
              this.prevChar();
            }
            charstrings.push({
              glyph,
              encoded
            });
          }
          break;
        case "Subrs":
          this.readInt();
          this.getToken();
          while (this.getToken() === "dup") {
            const index = this.readInt();
            length = this.readInt();
            this.getToken();
            data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);
            lenIV = program.properties.privateData.lenIV;
            const encoded = this.readCharStrings(data, lenIV);
            this.nextChar();
            token = this.getToken();
            if (token === "noaccess") {
              this.getToken();
            }
            subrs[index] = encoded;
          }
          break;
        case "BlueValues":
        case "OtherBlues":
        case "FamilyBlues":
        case "FamilyOtherBlues":
          const blueArray = this.readNumberArray();
          if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {
            program.properties.privateData[token] = blueArray;
          }
          break;
        case "StemSnapH":
        case "StemSnapV":
          program.properties.privateData[token] = this.readNumberArray();
          break;
        case "StdHW":
        case "StdVW":
          program.properties.privateData[token] = this.readNumberArray()[0];
          break;
        case "BlueShift":
        case "lenIV":
        case "BlueFuzz":
        case "BlueScale":
        case "LanguageGroup":
          program.properties.privateData[token] = this.readNumber();
          break;
        case "ExpansionFactor":
          program.properties.privateData[token] = this.readNumber() || 0.06;
          break;
        case "ForceBold":
          program.properties.privateData[token] = this.readBoolean();
          break;
      }
    }
    for (const {
      encoded,
      glyph
    } of charstrings) {
      const charString = new Type1CharString();
      const error = charString.convert(encoded, subrs, this.seacAnalysisEnabled);
      let output = charString.output;
      if (error) {
        output = [14];
      }
      const charStringObject = {
        glyphName: glyph,
        charstring: output,
        width: charString.width,
        lsb: charString.lsb,
        seac: charString.seac
      };
      if (glyph === ".notdef") {
        program.charstrings.unshift(charStringObject);
      } else {
        program.charstrings.push(charStringObject);
      }
      if (properties.builtInEncoding) {
        const index = properties.builtInEncoding.indexOf(glyph);
        if (index > -1 && properties.widths[index] === undefined && index >= properties.firstChar && index <= properties.lastChar) {
          properties.widths[index] = charString.width;
        }
      }
    }
    return program;
  }
  extractFontHeader(properties) {
    let token;
    while ((token = this.getToken()) !== null) {
      if (token !== "/") {
        continue;
      }
      token = this.getToken();
      switch (token) {
        case "FontMatrix":
          const matrix = this.readNumberArray();
          properties.fontMatrix = matrix;
          break;
        case "Encoding":
          const encodingArg = this.getToken();
          let encoding;
          if (!/^\\d+$/.test(encodingArg)) {
            encoding = getEncoding(encodingArg);
          } else {
            encoding = [];
            const size = parseInt(encodingArg, 10) | 0;
            this.getToken();
            for (let j = 0; j < size; j++) {
              token = this.getToken();
              while (token !== "dup" && token !== "def") {
                token = this.getToken();
                if (token === null) {
                  return;
                }
              }
              if (token === "def") {
                break;
              }
              const index = this.readInt();
              this.getToken();
              const glyph = this.getToken();
              encoding[index] = glyph;
              this.getToken();
            }
          }
          properties.builtInEncoding = encoding;
          break;
        case "FontBBox":
          const fontBBox = this.readNumberArray();
          properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
          properties.descent = Math.min(fontBBox[1], fontBBox[3]);
          properties.ascentScaled = true;
          break;
      }
    }
  }
}

;// ./src/core/type1_font.js






function findBlock(streamBytes, signature, startIndex) {
  const streamBytesLength = streamBytes.length;
  const signatureLength = signature.length;
  const scanLength = streamBytesLength - signatureLength;
  let i = startIndex,
    found = false;
  while (i < scanLength) {
    let j = 0;
    while (j < signatureLength && streamBytes[i + j] === signature[j]) {
      j++;
    }
    if (j >= signatureLength) {
      i += j;
      while (i < streamBytesLength && isWhiteSpace(streamBytes[i])) {
        i++;
      }
      found = true;
      break;
    }
    i++;
  }
  return {
    found,
    length: i
  };
}
function getHeaderBlock(stream, suggestedLength) {
  const EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];
  const streamStartPos = stream.pos;
  let headerBytes, headerBytesLength, block;
  try {
    headerBytes = stream.getBytes(suggestedLength);
    headerBytesLength = headerBytes.length;
  } catch {}
  if (headerBytesLength === suggestedLength) {
    block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);
    if (block.found && block.length === suggestedLength) {
      return {
        stream: new Stream(headerBytes),
        length: suggestedLength
      };
    }
  }
  warn('Invalid "Length1" property in Type1 font -- trying to recover.');
  stream.pos = streamStartPos;
  const SCAN_BLOCK_LENGTH = 2048;
  let actualLength;
  while (true) {
    const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
    block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);
    if (block.length === 0) {
      break;
    }
    stream.pos += block.length;
    if (block.found) {
      actualLength = stream.pos - streamStartPos;
      break;
    }
  }
  stream.pos = streamStartPos;
  if (actualLength) {
    return {
      stream: new Stream(stream.getBytes(actualLength)),
      length: actualLength
    };
  }
  warn('Unable to recover "Length1" property in Type1 font -- using as is.');
  return {
    stream: new Stream(stream.getBytes(suggestedLength)),
    length: suggestedLength
  };
}
function getEexecBlock(stream, suggestedLength) {
  const eexecBytes = stream.getBytes();
  if (eexecBytes.length === 0) {
    throw new FormatError("getEexecBlock - no font program found.");
  }
  return {
    stream: new Stream(eexecBytes),
    length: eexecBytes.length
  };
}
class Type1Font {
  constructor(name, file, properties) {
    const PFB_HEADER_SIZE = 6;
    let headerBlockLength = properties.length1;
    let eexecBlockLength = properties.length2;
    let pfbHeader = file.peekBytes(PFB_HEADER_SIZE);
    const pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;
    if (pfbHeaderPresent) {
      file.skip(PFB_HEADER_SIZE);
      headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];
    }
    const headerBlock = getHeaderBlock(file, headerBlockLength);
    const headerBlockParser = new Type1Parser(headerBlock.stream, false, SEAC_ANALYSIS_ENABLED);
    headerBlockParser.extractFontHeader(properties);
    if (pfbHeaderPresent) {
      pfbHeader = file.getBytes(PFB_HEADER_SIZE);
      eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];
    }
    const eexecBlock = getEexecBlock(file, eexecBlockLength);
    const eexecBlockParser = new Type1Parser(eexecBlock.stream, true, SEAC_ANALYSIS_ENABLED);
    const data = eexecBlockParser.extractFontProgram(properties);
    for (const key in data.properties) {
      properties[key] = data.properties[key];
    }
    const charstrings = data.charstrings;
    const type2Charstrings = this.getType2Charstrings(charstrings);
    const subrs = this.getType2Subrs(data.subrs);
    this.charstrings = charstrings;
    this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);
    this.seacs = this.getSeacs(data.charstrings);
  }
  get numGlyphs() {
    return this.charstrings.length + 1;
  }
  getCharset() {
    const charset = [".notdef"];
    for (const {
      glyphName
    } of this.charstrings) {
      charset.push(glyphName);
    }
    return charset;
  }
  getGlyphMapping(properties) {
    const charstrings = this.charstrings;
    if (properties.composite) {
      const charCodeToGlyphId = Object.create(null);
      for (let glyphId = 0, charstringsLen = charstrings.length; glyphId < charstringsLen; glyphId++) {
        const charCode = properties.cMap.charCodeOf(glyphId);
        charCodeToGlyphId[charCode] = glyphId + 1;
      }
      return charCodeToGlyphId;
    }
    const glyphNames = [".notdef"];
    let builtInEncoding, glyphId;
    for (glyphId = 0; glyphId < charstrings.length; glyphId++) {
      glyphNames.push(charstrings[glyphId].glyphName);
    }
    const encoding = properties.builtInEncoding;
    if (encoding) {
      builtInEncoding = Object.create(null);
      for (const charCode in encoding) {
        glyphId = glyphNames.indexOf(encoding[charCode]);
        if (glyphId >= 0) {
          builtInEncoding[charCode] = glyphId;
        }
      }
    }
    return type1FontGlyphMapping(properties, builtInEncoding, glyphNames);
  }
  hasGlyphId(id) {
    if (id < 0 || id >= this.numGlyphs) {
      return false;
    }
    if (id === 0) {
      return true;
    }
    const glyph = this.charstrings[id - 1];
    return glyph.charstring.length > 0;
  }
  getSeacs(charstrings) {
    const seacMap = [];
    for (let i = 0, ii = charstrings.length; i < ii; i++) {
      const charstring = charstrings[i];
      if (charstring.seac) {
        seacMap[i + 1] = charstring.seac;
      }
    }
    return seacMap;
  }
  getType2Charstrings(type1Charstrings) {
    const type2Charstrings = [];
    for (const type1Charstring of type1Charstrings) {
      type2Charstrings.push(type1Charstring.charstring);
    }
    return type2Charstrings;
  }
  getType2Subrs(type1Subrs) {
    let bias = 0;
    const count = type1Subrs.length;
    if (count < 1133) {
      bias = 107;
    } else if (count < 33769) {
      bias = 1131;
    } else {
      bias = 32768;
    }
    const type2Subrs = [];
    let i;
    for (i = 0; i < bias; i++) {
      type2Subrs.push([0x0b]);
    }
    for (i = 0; i < count; i++) {
      type2Subrs.push(type1Subrs[i]);
    }
    return type2Subrs;
  }
  wrap(name, glyphs, charstrings, subrs, properties) {
    const cff = new CFF();
    cff.header = new CFFHeader(1, 0, 4, 4);
    cff.names = [name];
    const topDict = new CFFTopDict();
    topDict.setByName("version", 391);
    topDict.setByName("Notice", 392);
    topDict.setByName("FullName", 393);
    topDict.setByName("FamilyName", 394);
    topDict.setByName("Weight", 395);
    topDict.setByName("Encoding", null);
    topDict.setByName("FontMatrix", properties.fontMatrix);
    topDict.setByName("FontBBox", properties.bbox);
    topDict.setByName("charset", null);
    topDict.setByName("CharStrings", null);
    topDict.setByName("Private", null);
    cff.topDict = topDict;
    const strings = new CFFStrings();
    strings.add("Version 0.11");
    strings.add("See original notice");
    strings.add(name);
    strings.add(name);
    strings.add("Medium");
    cff.strings = strings;
    cff.globalSubrIndex = new CFFIndex();
    const count = glyphs.length;
    const charsetArray = [".notdef"];
    let i, ii;
    for (i = 0; i < count; i++) {
      const glyphName = charstrings[i].glyphName;
      const index = CFFStandardStrings.indexOf(glyphName);
      if (index === -1) {
        strings.add(glyphName);
      }
      charsetArray.push(glyphName);
    }
    cff.charset = new CFFCharset(false, 0, charsetArray);
    const charStringsIndex = new CFFIndex();
    charStringsIndex.add([0x8b, 0x0e]);
    for (i = 0; i < count; i++) {
      charStringsIndex.add(glyphs[i]);
    }
    cff.charStrings = charStringsIndex;
    const privateDict = new CFFPrivateDict();
    privateDict.setByName("Subrs", null);
    const fields = ["BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StemSnapH", "StemSnapV", "BlueShift", "BlueFuzz", "BlueScale", "LanguageGroup", "ExpansionFactor", "ForceBold", "StdHW", "StdVW"];
    for (i = 0, ii = fields.length; i < ii; i++) {
      const field = fields[i];
      if (!(field in properties.privateData)) {
        continue;
      }
      const value = properties.privateData[field];
      if (Array.isArray(value)) {
        for (let j = value.length - 1; j > 0; j--) {
          value[j] -= value[j - 1];
        }
      }
      privateDict.setByName(field, value);
    }
    cff.topDict.privateDict = privateDict;
    const subrIndex = new CFFIndex();
    for (i = 0, ii = subrs.length; i < ii; i++) {
      subrIndex.add(subrs[i]);
    }
    privateDict.subrsIndex = subrIndex;
    const compiler = new CFFCompiler(cff);
    return compiler.compile();
  }
}

;// ./src/core/fonts.js

















const PRIVATE_USE_AREAS = [[0xe000, 0xf8ff], [0x100000, 0x10fffd]];
const PDF_GLYPH_SPACE_UNITS = 1000;
const EXPORT_DATA_PROPERTIES = ["ascent", "bbox", "black", "bold", "charProcOperatorList", "cssFontInfo", "data", "defaultVMetrics", "defaultWidth", "descent", "disableFontFace", "fallbackName", "fontExtraProperties", "fontMatrix", "isInvalidPDFjsFont", "isType3Font", "italic", "loadedName", "mimetype", "missingFile", "name", "remeasure", "systemFontInfo", "vertical"];
const EXPORT_DATA_EXTRA_PROPERTIES = ["cMap", "composite", "defaultEncoding", "differences", "isMonospace", "isSerifFont", "isSymbolicFont", "seacMap", "subtype", "toFontChar", "toUnicode", "type", "vmetrics", "widths"];
function adjustWidths(properties) {
  if (!properties.fontMatrix) {
    return;
  }
  if (properties.fontMatrix[0] === FONT_IDENTITY_MATRIX[0]) {
    return;
  }
  const scale = 0.001 / properties.fontMatrix[0];
  const glyphsWidths = properties.widths;
  for (const glyph in glyphsWidths) {
    glyphsWidths[glyph] *= scale;
  }
  properties.defaultWidth *= scale;
}
function adjustTrueTypeToUnicode(properties, isSymbolicFont, nameRecords) {
  if (properties.isInternalFont) {
    return;
  }
  if (properties.hasIncludedToUnicodeMap) {
    return;
  }
  if (properties.hasEncoding) {
    return;
  }
  if (properties.toUnicode instanceof IdentityToUnicodeMap) {
    return;
  }
  if (!isSymbolicFont) {
    return;
  }
  if (nameRecords.length === 0) {
    return;
  }
  if (properties.defaultEncoding === WinAnsiEncoding) {
    return;
  }
  for (const r of nameRecords) {
    if (!isWinNameRecord(r)) {
      return;
    }
  }
  const encoding = WinAnsiEncoding;
  const toUnicode = [],
    glyphsUnicodeMap = getGlyphsUnicode();
  for (const charCode in encoding) {
    const glyphName = encoding[charCode];
    if (glyphName === "") {
      continue;
    }
    const unicode = glyphsUnicodeMap[glyphName];
    if (unicode === undefined) {
      continue;
    }
    toUnicode[charCode] = String.fromCharCode(unicode);
  }
  if (toUnicode.length > 0) {
    properties.toUnicode.amend(toUnicode);
  }
}
function adjustType1ToUnicode(properties, builtInEncoding) {
  if (properties.isInternalFont) {
    return;
  }
  if (properties.hasIncludedToUnicodeMap) {
    return;
  }
  if (builtInEncoding === properties.defaultEncoding) {
    return;
  }
  if (properties.toUnicode instanceof IdentityToUnicodeMap) {
    return;
  }
  const toUnicode = [],
    glyphsUnicodeMap = getGlyphsUnicode();
  for (const charCode in builtInEncoding) {
    if (properties.hasEncoding) {
      if (properties.baseEncodingName || properties.differences[charCode] !== undefined) {
        continue;
      }
    }
    const glyphName = builtInEncoding[charCode];
    const unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
    if (unicode !== -1) {
      toUnicode[charCode] = String.fromCharCode(unicode);
    }
  }
  if (toUnicode.length > 0) {
    properties.toUnicode.amend(toUnicode);
  }
}
function amendFallbackToUnicode(properties) {
  if (!properties.fallbackToUnicode) {
    return;
  }
  if (properties.toUnicode instanceof IdentityToUnicodeMap) {
    return;
  }
  const toUnicode = [];
  for (const charCode in properties.fallbackToUnicode) {
    if (properties.toUnicode.has(charCode)) {
      continue;
    }
    toUnicode[charCode] = properties.fallbackToUnicode[charCode];
  }
  if (toUnicode.length > 0) {
    properties.toUnicode.amend(toUnicode);
  }
}
class fonts_Glyph {
  constructor(originalCharCode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {
    this.originalCharCode = originalCharCode;
    this.fontChar = fontChar;
    this.unicode = unicode;
    this.accent = accent;
    this.width = width;
    this.vmetric = vmetric;
    this.operatorListId = operatorListId;
    this.isSpace = isSpace;
    this.isInFont = isInFont;
  }
  get category() {
    return shadow(this, "category", getCharUnicodeCategory(this.unicode), true);
  }
}
function int16(b0, b1) {
  return (b0 << 8) + b1;
}
function writeSignedInt16(bytes, index, value) {
  bytes[index + 1] = value;
  bytes[index] = value >>> 8;
}
function signedInt16(b0, b1) {
  const value = (b0 << 8) + b1;
  return value & 1 << 15 ? value - 0x10000 : value;
}
function writeUint32(bytes, index, value) {
  bytes[index + 3] = value & 0xff;
  bytes[index + 2] = value >>> 8;
  bytes[index + 1] = value >>> 16;
  bytes[index] = value >>> 24;
}
function int32(b0, b1, b2, b3) {
  return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
}
function string16(value) {
  return String.fromCharCode(value >> 8 & 0xff, value & 0xff);
}
function safeString16(value) {
  if (value > 0x7fff) {
    value = 0x7fff;
  } else if (value < -0x8000) {
    value = -0x8000;
  }
  return String.fromCharCode(value >> 8 & 0xff, value & 0xff);
}
function isTrueTypeFile(file) {
  const header = file.peekBytes(4);
  return readUint32(header, 0) === 0x00010000 || bytesToString(header) === "true";
}
function isTrueTypeCollectionFile(file) {
  const header = file.peekBytes(4);
  return bytesToString(header) === "ttcf";
}
function isOpenTypeFile(file) {
  const header = file.peekBytes(4);
  return bytesToString(header) === "OTTO";
}
function isType1File(file) {
  const header = file.peekBytes(2);
  if (header[0] === 0x25 && header[1] === 0x21) {
    return true;
  }
  if (header[0] === 0x80 && header[1] === 0x01) {
    return true;
  }
  return false;
}
function isCFFFile(file) {
  const header = file.peekBytes(4);
  if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {
    return true;
  }
  return false;
}
function getFontFileType(file, {
  type,
  subtype,
  composite
}) {
  let fileType, fileSubtype;
  if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {
    fileType = composite ? "CIDFontType2" : "TrueType";
  } else if (isOpenTypeFile(file)) {
    fileType = composite ? "CIDFontType2" : "OpenType";
  } else if (isType1File(file)) {
    if (composite) {
      fileType = "CIDFontType0";
    } else {
      fileType = type === "MMType1" ? "MMType1" : "Type1";
    }
  } else if (isCFFFile(file)) {
    if (composite) {
      fileType = "CIDFontType0";
      fileSubtype = "CIDFontType0C";
    } else {
      fileType = type === "MMType1" ? "MMType1" : "Type1";
      fileSubtype = "Type1C";
    }
  } else {
    warn("getFontFileType: Unable to detect correct font file Type/Subtype.");
    fileType = type;
    fileSubtype = subtype;
  }
  return [fileType, fileSubtype];
}
function applyStandardFontGlyphMap(map, glyphMap) {
  for (const charCode in glyphMap) {
    map[+charCode] = glyphMap[charCode];
  }
}
function buildToFontChar(encoding, glyphsUnicodeMap, differences) {
  const toFontChar = [];
  let unicode;
  for (let i = 0, ii = encoding.length; i < ii; i++) {
    unicode = getUnicodeForGlyph(encoding[i], glyphsUnicodeMap);
    if (unicode !== -1) {
      toFontChar[i] = unicode;
    }
  }
  for (const charCode in differences) {
    unicode = getUnicodeForGlyph(differences[charCode], glyphsUnicodeMap);
    if (unicode !== -1) {
      toFontChar[+charCode] = unicode;
    }
  }
  return toFontChar;
}
function isMacNameRecord(r) {
  return r.platform === 1 && r.encoding === 0 && r.language === 0;
}
function isWinNameRecord(r) {
  return r.platform === 3 && r.encoding === 1 && r.language === 0x409;
}
function convertCidString(charCode, cid, shouldThrow = false) {
  switch (cid.length) {
    case 1:
      return cid.charCodeAt(0);
    case 2:
      return cid.charCodeAt(0) << 8 | cid.charCodeAt(1);
  }
  const msg = \`Unsupported CID string (charCode \${charCode}): "\${cid}".\`;
  if (shouldThrow) {
    throw new FormatError(msg);
  }
  warn(msg);
  return cid;
}
function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId, toUnicode) {
  const newMap = Object.create(null);
  const toUnicodeExtraMap = new Map();
  const toFontChar = [];
  const usedGlyphIds = new Set();
  let privateUseAreaIndex = 0;
  const privateUseOffetStart = PRIVATE_USE_AREAS[privateUseAreaIndex][0];
  let nextAvailableFontCharCode = privateUseOffetStart;
  let privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
  const isInPrivateArea = code => PRIVATE_USE_AREAS[0][0] <= code && code <= PRIVATE_USE_AREAS[0][1] || PRIVATE_USE_AREAS[1][0] <= code && code <= PRIVATE_USE_AREAS[1][1];
  let LIGATURE_TO_UNICODE = null;
  for (const originalCharCode in charCodeToGlyphId) {
    let glyphId = charCodeToGlyphId[originalCharCode];
    if (!hasGlyph(glyphId)) {
      continue;
    }
    if (nextAvailableFontCharCode > privateUseOffetEnd) {
      privateUseAreaIndex++;
      if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {
        warn("Ran out of space in font private use area.");
        break;
      }
      nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];
      privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
    }
    const fontCharCode = nextAvailableFontCharCode++;
    if (glyphId === 0) {
      glyphId = newGlyphZeroId;
    }
    let unicode = toUnicode.get(originalCharCode);
    if (typeof unicode === "string") {
      if (unicode.length === 1) {
        unicode = unicode.codePointAt(0);
      } else {
        if (!LIGATURE_TO_UNICODE) {
          LIGATURE_TO_UNICODE = new Map();
          for (let i = 0xfb00; i <= 0xfb4f; i++) {
            const normalized = String.fromCharCode(i).normalize("NFKD");
            if (normalized.length > 1) {
              LIGATURE_TO_UNICODE.set(normalized, i);
            }
          }
        }
        unicode = LIGATURE_TO_UNICODE.get(unicode) || unicode.codePointAt(0);
      }
    }
    if (unicode && !isInPrivateArea(unicode) && !usedGlyphIds.has(glyphId)) {
      toUnicodeExtraMap.set(unicode, glyphId);
      usedGlyphIds.add(glyphId);
    }
    newMap[fontCharCode] = glyphId;
    toFontChar[originalCharCode] = fontCharCode;
  }
  return {
    toFontChar,
    charCodeToGlyphId: newMap,
    toUnicodeExtraMap,
    nextAvailableFontCharCode
  };
}
function getRanges(glyphs, toUnicodeExtraMap, numGlyphs) {
  const codes = [];
  for (const charCode in glyphs) {
    if (glyphs[charCode] >= numGlyphs) {
      continue;
    }
    codes.push({
      fontCharCode: charCode | 0,
      glyphId: glyphs[charCode]
    });
  }
  if (toUnicodeExtraMap) {
    for (const [unicode, glyphId] of toUnicodeExtraMap) {
      if (glyphId >= numGlyphs) {
        continue;
      }
      codes.push({
        fontCharCode: unicode,
        glyphId
      });
    }
  }
  if (codes.length === 0) {
    codes.push({
      fontCharCode: 0,
      glyphId: 0
    });
  }
  codes.sort((a, b) => a.fontCharCode - b.fontCharCode);
  const ranges = [];
  const length = codes.length;
  for (let n = 0; n < length;) {
    const start = codes[n].fontCharCode;
    const codeIndices = [codes[n].glyphId];
    ++n;
    let end = start;
    while (n < length && end + 1 === codes[n].fontCharCode) {
      codeIndices.push(codes[n].glyphId);
      ++end;
      ++n;
      if (end === 0xffff) {
        break;
      }
    }
    ranges.push([start, end, codeIndices]);
  }
  return ranges;
}
function createCmapTable(glyphs, toUnicodeExtraMap, numGlyphs) {
  const ranges = getRanges(glyphs, toUnicodeExtraMap, numGlyphs);
  const numTables = ranges.at(-1)[1] > 0xffff ? 2 : 1;
  let cmap = "\\x00\\x00" + string16(numTables) + "\\x00\\x03" + "\\x00\\x01" + string32(4 + numTables * 8);
  let i, ii, j, jj;
  for (i = ranges.length - 1; i >= 0; --i) {
    if (ranges[i][0] <= 0xffff) {
      break;
    }
  }
  const bmpLength = i + 1;
  if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {
    ranges[i][1] = 0xfffe;
  }
  const trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;
  const segCount = bmpLength + trailingRangesCount;
  const searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);
  let startCount = "";
  let endCount = "";
  let idDeltas = "";
  let idRangeOffsets = "";
  let glyphsIds = "";
  let bias = 0;
  let range, start, end, codes;
  for (i = 0, ii = bmpLength; i < ii; i++) {
    range = ranges[i];
    start = range[0];
    end = range[1];
    startCount += string16(start);
    endCount += string16(end);
    codes = range[2];
    let contiguous = true;
    for (j = 1, jj = codes.length; j < jj; ++j) {
      if (codes[j] !== codes[j - 1] + 1) {
        contiguous = false;
        break;
      }
    }
    if (!contiguous) {
      const offset = (segCount - i) * 2 + bias * 2;
      bias += end - start + 1;
      idDeltas += string16(0);
      idRangeOffsets += string16(offset);
      for (j = 0, jj = codes.length; j < jj; ++j) {
        glyphsIds += string16(codes[j]);
      }
    } else {
      const startCode = codes[0];
      idDeltas += string16(startCode - start & 0xffff);
      idRangeOffsets += string16(0);
    }
  }
  if (trailingRangesCount > 0) {
    endCount += "\\xFF\\xFF";
    startCount += "\\xFF\\xFF";
    idDeltas += "\\x00\\x01";
    idRangeOffsets += "\\x00\\x00";
  }
  const format314 = "\\x00\\x00" + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + "\\x00\\x00" + startCount + idDeltas + idRangeOffsets + glyphsIds;
  let format31012 = "";
  let header31012 = "";
  if (numTables > 1) {
    cmap += "\\x00\\x03" + "\\x00\\x0A" + string32(4 + numTables * 8 + 4 + format314.length);
    format31012 = "";
    for (i = 0, ii = ranges.length; i < ii; i++) {
      range = ranges[i];
      start = range[0];
      codes = range[2];
      let code = codes[0];
      for (j = 1, jj = codes.length; j < jj; ++j) {
        if (codes[j] !== codes[j - 1] + 1) {
          end = range[0] + j - 1;
          format31012 += string32(start) + string32(end) + string32(code);
          start = end + 1;
          code = codes[j];
        }
      }
      format31012 += string32(start) + string32(range[1]) + string32(code);
    }
    header31012 = "\\x00\\x0C" + "\\x00\\x00" + string32(format31012.length + 16) + "\\x00\\x00\\x00\\x00" + string32(format31012.length / 12);
  }
  return cmap + "\\x00\\x04" + string16(format314.length + 4) + format314 + header31012 + format31012;
}
function validateOS2Table(os2, file) {
  file.pos = (file.start || 0) + os2.offset;
  const version = file.getUint16();
  file.skip(60);
  const selection = file.getUint16();
  if (version < 4 && selection & 0x0300) {
    return false;
  }
  const firstChar = file.getUint16();
  const lastChar = file.getUint16();
  if (firstChar > lastChar) {
    return false;
  }
  file.skip(6);
  const usWinAscent = file.getUint16();
  if (usWinAscent === 0) {
    return false;
  }
  os2.data[8] = os2.data[9] = 0;
  return true;
}
function createOS2Table(properties, charstrings, override) {
  override ||= {
    unitsPerEm: 0,
    yMax: 0,
    yMin: 0,
    ascent: 0,
    descent: 0
  };
  let ulUnicodeRange1 = 0;
  let ulUnicodeRange2 = 0;
  let ulUnicodeRange3 = 0;
  let ulUnicodeRange4 = 0;
  let firstCharIndex = null;
  let lastCharIndex = 0;
  let position = -1;
  if (charstrings) {
    for (let code in charstrings) {
      code |= 0;
      if (firstCharIndex > code || !firstCharIndex) {
        firstCharIndex = code;
      }
      if (lastCharIndex < code) {
        lastCharIndex = code;
      }
      position = getUnicodeRangeFor(code, position);
      if (position < 32) {
        ulUnicodeRange1 |= 1 << position;
      } else if (position < 64) {
        ulUnicodeRange2 |= 1 << position - 32;
      } else if (position < 96) {
        ulUnicodeRange3 |= 1 << position - 64;
      } else if (position < 123) {
        ulUnicodeRange4 |= 1 << position - 96;
      } else {
        throw new FormatError("Unicode ranges Bits > 123 are reserved for internal usage");
      }
    }
    if (lastCharIndex > 0xffff) {
      lastCharIndex = 0xffff;
    }
  } else {
    firstCharIndex = 0;
    lastCharIndex = 255;
  }
  const bbox = properties.bbox || [0, 0, 0, 0];
  const unitsPerEm = override.unitsPerEm || (properties.fontMatrix ? 1 / Math.max(...properties.fontMatrix.slice(0, 4).map(Math.abs)) : 1000);
  const scale = properties.ascentScaled ? 1.0 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;
  const typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));
  let typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));
  if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {
    typoDescent = -typoDescent;
  }
  const winAscent = override.yMax || typoAscent;
  const winDescent = -override.yMin || -typoDescent;
  return "\\x00\\x03" + "\\x02\\x24" + "\\x01\\xF4" + "\\x00\\x05" + "\\x00\\x00" + "\\x02\\x8A" + "\\x02\\xBB" + "\\x00\\x00" + "\\x00\\x8C" + "\\x02\\x8A" + "\\x02\\xBB" + "\\x00\\x00" + "\\x01\\xDF" + "\\x00\\x31" + "\\x01\\x02" + "\\x00\\x00" + "\\x00\\x00\\x06" + String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) + "\\x00\\x00\\x00\\x00\\x00\\x00" + string32(ulUnicodeRange1) + string32(ulUnicodeRange2) + string32(ulUnicodeRange3) + string32(ulUnicodeRange4) + "\\x2A\\x32\\x31\\x2A" + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + "\\x00\\x64" + string16(winAscent) + string16(winDescent) + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00" + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + "\\x00\\x03";
}
function createPostTable(properties) {
  const angle = Math.floor(properties.italicAngle * 2 ** 16);
  return "\\x00\\x03\\x00\\x00" + string32(angle) + "\\x00\\x00" + "\\x00\\x00" + string32(properties.fixedPitch ? 1 : 0) + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00";
}
function createPostscriptName(name) {
  return name.replaceAll(/[^\\x21-\\x7E]|[[\\](){}<>/%]/g, "").slice(0, 63);
}
function createNameTable(name, proto) {
  if (!proto) {
    proto = [[], []];
  }
  const strings = [proto[0][0] || "Original licence", proto[0][1] || name, proto[0][2] || "Unknown", proto[0][3] || "uniqueID", proto[0][4] || name, proto[0][5] || "Version 0.11", proto[0][6] || createPostscriptName(name), proto[0][7] || "Unknown", proto[0][8] || "Unknown", proto[0][9] || "Unknown"];
  const stringsUnicode = [];
  let i, ii, j, jj, str;
  for (i = 0, ii = strings.length; i < ii; i++) {
    str = proto[1][i] || strings[i];
    const strBufUnicode = [];
    for (j = 0, jj = str.length; j < jj; j++) {
      strBufUnicode.push(string16(str.charCodeAt(j)));
    }
    stringsUnicode.push(strBufUnicode.join(""));
  }
  const names = [strings, stringsUnicode];
  const platforms = ["\\x00\\x01", "\\x00\\x03"];
  const encodings = ["\\x00\\x00", "\\x00\\x01"];
  const languages = ["\\x00\\x00", "\\x04\\x09"];
  const namesRecordCount = strings.length * platforms.length;
  let nameTable = "\\x00\\x00" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);
  let strOffset = 0;
  for (i = 0, ii = platforms.length; i < ii; i++) {
    const strs = names[i];
    for (j = 0, jj = strs.length; j < jj; j++) {
      str = strs[j];
      const nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);
      nameTable += nameRecord;
      strOffset += str.length;
    }
  }
  nameTable += strings.join("") + stringsUnicode.join("");
  return nameTable;
}
class Font {
  constructor(name, file, properties, evaluatorOptions) {
    this.name = name;
    this.psName = null;
    this.mimetype = null;
    this.disableFontFace = evaluatorOptions.disableFontFace;
    this.fontExtraProperties = evaluatorOptions.fontExtraProperties;
    this.loadedName = properties.loadedName;
    this.isType3Font = properties.isType3Font;
    this.missingFile = false;
    this.cssFontInfo = properties.cssFontInfo;
    this._charsCache = Object.create(null);
    this._glyphCache = Object.create(null);
    let isSerifFont = !!(properties.flags & FontFlags.Serif);
    if (!isSerifFont && !properties.isSimulatedFlags) {
      const baseName = name.replaceAll(/[,_]/g, "-").split("-", 1)[0],
        serifFonts = getSerifFonts();
      for (const namePart of baseName.split("+")) {
        if (serifFonts[namePart]) {
          isSerifFont = true;
          break;
        }
      }
    }
    this.isSerifFont = isSerifFont;
    this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
    this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);
    let {
      type,
      subtype
    } = properties;
    this.type = type;
    this.subtype = subtype;
    this.systemFontInfo = properties.systemFontInfo;
    const matches = name.match(/^InvalidPDFjsFont_(.*)_\\d+$/);
    this.isInvalidPDFjsFont = !!matches;
    if (this.isInvalidPDFjsFont) {
      this.fallbackName = matches[1];
    } else if (this.isMonospace) {
      this.fallbackName = "monospace";
    } else if (this.isSerifFont) {
      this.fallbackName = "serif";
    } else {
      this.fallbackName = "sans-serif";
    }
    if (this.systemFontInfo?.guessFallback) {
      this.systemFontInfo.guessFallback = false;
      this.systemFontInfo.css += \`,\${this.fallbackName}\`;
    }
    this.differences = properties.differences;
    this.widths = properties.widths;
    this.defaultWidth = properties.defaultWidth;
    this.composite = properties.composite;
    this.cMap = properties.cMap;
    this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;
    this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;
    this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;
    this.lineHeight = this.ascent - this.descent;
    this.fontMatrix = properties.fontMatrix;
    this.bbox = properties.bbox;
    this.defaultEncoding = properties.defaultEncoding;
    this.toUnicode = properties.toUnicode;
    this.toFontChar = [];
    if (properties.type === "Type3") {
      for (let charCode = 0; charCode < 256; charCode++) {
        this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];
      }
      return;
    }
    this.cidEncoding = properties.cidEncoding || "";
    this.vertical = !!properties.vertical;
    if (this.vertical) {
      this.vmetrics = properties.vmetrics;
      this.defaultVMetrics = properties.defaultVMetrics;
    }
    if (!file || file.isEmpty) {
      if (file) {
        warn('Font file is empty in "' + name + '" (' + this.loadedName + ")");
      }
      this.fallbackToSystemFont(properties);
      return;
    }
    [type, subtype] = getFontFileType(file, properties);
    if (type !== this.type || subtype !== this.subtype) {
      info("Inconsistent font file Type/SubType, expected: " + \`\${this.type}/\${this.subtype} but found: \${type}/\${subtype}.\`);
    }
    let data;
    try {
      switch (type) {
        case "MMType1":
          info("MMType1 font (" + name + "), falling back to Type1.");
        case "Type1":
        case "CIDFontType0":
          this.mimetype = "font/opentype";
          const cff = subtype === "Type1C" || subtype === "CIDFontType0C" ? new CFFFont(file, properties) : new Type1Font(name, file, properties);
          adjustWidths(properties);
          data = this.convert(name, cff, properties);
          break;
        case "OpenType":
        case "TrueType":
        case "CIDFontType2":
          this.mimetype = "font/opentype";
          data = this.checkAndRepair(name, file, properties);
          if (this.isOpenType) {
            adjustWidths(properties);
            type = "OpenType";
          }
          break;
        default:
          throw new FormatError(\`Font \${type} is not supported\`);
      }
    } catch (e) {
      warn(e);
      this.fallbackToSystemFont(properties);
      return;
    }
    amendFallbackToUnicode(properties);
    this.data = data;
    this.type = type;
    this.subtype = subtype;
    this.fontMatrix = properties.fontMatrix;
    this.widths = properties.widths;
    this.defaultWidth = properties.defaultWidth;
    this.toUnicode = properties.toUnicode;
    this.seacMap = properties.seacMap;
  }
  get renderer() {
    const renderer = FontRendererFactory.create(this, SEAC_ANALYSIS_ENABLED);
    return shadow(this, "renderer", renderer);
  }
  exportData() {
    const exportDataProps = this.fontExtraProperties ? [...EXPORT_DATA_PROPERTIES, ...EXPORT_DATA_EXTRA_PROPERTIES] : EXPORT_DATA_PROPERTIES;
    const data = Object.create(null);
    for (const prop of exportDataProps) {
      const value = this[prop];
      if (value !== undefined) {
        data[prop] = value;
      }
    }
    return data;
  }
  fallbackToSystemFont(properties) {
    this.missingFile = true;
    const {
      name,
      type
    } = this;
    let fontName = normalizeFontName(name);
    const stdFontMap = getStdFontMap(),
      nonStdFontMap = getNonStdFontMap();
    const isStandardFont = !!stdFontMap[fontName];
    const isMappedToStandardFont = !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);
    fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;
    const fontBasicMetricsMap = getFontBasicMetrics();
    const metrics = fontBasicMetricsMap[fontName];
    if (metrics) {
      if (isNaN(this.ascent)) {
        this.ascent = metrics.ascent / PDF_GLYPH_SPACE_UNITS;
      }
      if (isNaN(this.descent)) {
        this.descent = metrics.descent / PDF_GLYPH_SPACE_UNITS;
      }
      if (isNaN(this.capHeight)) {
        this.capHeight = metrics.capHeight / PDF_GLYPH_SPACE_UNITS;
      }
    }
    this.bold = /bold/gi.test(fontName);
    this.italic = /oblique|italic/gi.test(fontName);
    this.black = /Black/g.test(name);
    const isNarrow = /Narrow/g.test(name);
    this.remeasure = (!isStandardFont || isNarrow) && Object.keys(this.widths).length > 0;
    if ((isStandardFont || isMappedToStandardFont) && type === "CIDFontType2" && this.cidEncoding.startsWith("Identity-")) {
      const cidToGidMap = properties.cidToGidMap;
      const map = [];
      applyStandardFontGlyphMap(map, getGlyphMapForStandardFonts());
      if (/Arial-?Black/i.test(name)) {
        applyStandardFontGlyphMap(map, getSupplementalGlyphMapForArialBlack());
      } else if (/Calibri/i.test(name)) {
        applyStandardFontGlyphMap(map, getSupplementalGlyphMapForCalibri());
      }
      if (cidToGidMap) {
        for (const charCode in map) {
          const cid = map[charCode];
          if (cidToGidMap[cid] !== undefined) {
            map[+charCode] = cidToGidMap[cid];
          }
        }
        if (cidToGidMap.length !== this.toUnicode.length && properties.hasIncludedToUnicodeMap && this.toUnicode instanceof IdentityToUnicodeMap) {
          this.toUnicode.forEach(function (charCode, unicodeCharCode) {
            const cid = map[charCode];
            if (cidToGidMap[cid] === undefined) {
              map[+charCode] = unicodeCharCode;
            }
          });
        }
      }
      if (!(this.toUnicode instanceof IdentityToUnicodeMap)) {
        this.toUnicode.forEach(function (charCode, unicodeCharCode) {
          map[+charCode] = unicodeCharCode;
        });
      }
      this.toFontChar = map;
      this.toUnicode = new ToUnicodeMap(map);
    } else if (/Symbol/i.test(fontName)) {
      this.toFontChar = buildToFontChar(SymbolSetEncoding, getGlyphsUnicode(), this.differences);
    } else if (/Dingbats/i.test(fontName)) {
      this.toFontChar = buildToFontChar(ZapfDingbatsEncoding, getDingbatsGlyphsUnicode(), this.differences);
    } else if (isStandardFont || isMappedToStandardFont) {
      const map = buildToFontChar(this.defaultEncoding, getGlyphsUnicode(), this.differences);
      if (type === "CIDFontType2" && !this.cidEncoding.startsWith("Identity-") && !(this.toUnicode instanceof IdentityToUnicodeMap)) {
        this.toUnicode.forEach(function (charCode, unicodeCharCode) {
          map[+charCode] = unicodeCharCode;
        });
      }
      this.toFontChar = map;
    } else {
      const glyphsUnicodeMap = getGlyphsUnicode();
      const map = [];
      this.toUnicode.forEach((charCode, unicodeCharCode) => {
        if (!this.composite) {
          const glyphName = this.differences[charCode] || this.defaultEncoding[charCode];
          const unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
          if (unicode !== -1) {
            unicodeCharCode = unicode;
          }
        }
        map[+charCode] = unicodeCharCode;
      });
      if (this.composite && this.toUnicode instanceof IdentityToUnicodeMap) {
        if (/Tahoma|Verdana/i.test(name)) {
          applyStandardFontGlyphMap(map, getGlyphMapForStandardFonts());
        }
      }
      this.toFontChar = map;
    }
    amendFallbackToUnicode(properties);
    this.loadedName = fontName.split("-", 1)[0];
  }
  checkAndRepair(name, font, properties) {
    const VALID_TABLES = ["OS/2", "cmap", "head", "hhea", "hmtx", "maxp", "name", "post", "loca", "glyf", "fpgm", "prep", "cvt ", "CFF "];
    function readTables(file, numTables) {
      const tables = Object.create(null);
      tables["OS/2"] = null;
      tables.cmap = null;
      tables.head = null;
      tables.hhea = null;
      tables.hmtx = null;
      tables.maxp = null;
      tables.name = null;
      tables.post = null;
      for (let i = 0; i < numTables; i++) {
        const table = readTableEntry(file);
        if (!VALID_TABLES.includes(table.tag)) {
          continue;
        }
        if (table.length === 0) {
          continue;
        }
        tables[table.tag] = table;
      }
      return tables;
    }
    function readTableEntry(file) {
      const tag = file.getString(4);
      const checksum = file.getInt32() >>> 0;
      const offset = file.getInt32() >>> 0;
      const length = file.getInt32() >>> 0;
      const previousPosition = file.pos;
      file.pos = file.start || 0;
      file.skip(offset);
      const data = file.getBytes(length);
      file.pos = previousPosition;
      if (tag === "head") {
        data[8] = data[9] = data[10] = data[11] = 0;
        data[17] |= 0x20;
      }
      return {
        tag,
        checksum,
        length,
        offset,
        data
      };
    }
    function readOpenTypeHeader(ttf) {
      return {
        version: ttf.getString(4),
        numTables: ttf.getUint16(),
        searchRange: ttf.getUint16(),
        entrySelector: ttf.getUint16(),
        rangeShift: ttf.getUint16()
      };
    }
    function readTrueTypeCollectionHeader(ttc) {
      const ttcTag = ttc.getString(4);
      assert(ttcTag === "ttcf", "Must be a TrueType Collection font.");
      const majorVersion = ttc.getUint16();
      const minorVersion = ttc.getUint16();
      const numFonts = ttc.getInt32() >>> 0;
      const offsetTable = [];
      for (let i = 0; i < numFonts; i++) {
        offsetTable.push(ttc.getInt32() >>> 0);
      }
      const header = {
        ttcTag,
        majorVersion,
        minorVersion,
        numFonts,
        offsetTable
      };
      switch (majorVersion) {
        case 1:
          return header;
        case 2:
          header.dsigTag = ttc.getInt32() >>> 0;
          header.dsigLength = ttc.getInt32() >>> 0;
          header.dsigOffset = ttc.getInt32() >>> 0;
          return header;
      }
      throw new FormatError(\`Invalid TrueType Collection majorVersion: \${majorVersion}.\`);
    }
    function readTrueTypeCollectionData(ttc, fontName) {
      const {
        numFonts,
        offsetTable
      } = readTrueTypeCollectionHeader(ttc);
      const fontNameParts = fontName.split("+");
      let fallbackData;
      for (let i = 0; i < numFonts; i++) {
        ttc.pos = (ttc.start || 0) + offsetTable[i];
        const potentialHeader = readOpenTypeHeader(ttc);
        const potentialTables = readTables(ttc, potentialHeader.numTables);
        if (!potentialTables.name) {
          throw new FormatError('TrueType Collection font must contain a "name" table.');
        }
        const [nameTable] = readNameTable(potentialTables.name);
        for (let j = 0, jj = nameTable.length; j < jj; j++) {
          for (let k = 0, kk = nameTable[j].length; k < kk; k++) {
            const nameEntry = nameTable[j][k]?.replaceAll(/\\s/g, "");
            if (!nameEntry) {
              continue;
            }
            if (nameEntry === fontName) {
              return {
                header: potentialHeader,
                tables: potentialTables
              };
            }
            if (fontNameParts.length < 2) {
              continue;
            }
            for (const part of fontNameParts) {
              if (nameEntry === part) {
                fallbackData = {
                  name: part,
                  header: potentialHeader,
                  tables: potentialTables
                };
              }
            }
          }
        }
      }
      if (fallbackData) {
        warn(\`TrueType Collection does not contain "\${fontName}" font, \` + \`falling back to "\${fallbackData.name}" font instead.\`);
        return {
          header: fallbackData.header,
          tables: fallbackData.tables
        };
      }
      throw new FormatError(\`TrueType Collection does not contain "\${fontName}" font.\`);
    }
    function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {
      if (!cmap) {
        warn("No cmap table available.");
        return {
          platformId: -1,
          encodingId: -1,
          mappings: [],
          hasShortCmap: false
        };
      }
      let segment;
      let start = (file.start || 0) + cmap.offset;
      file.pos = start;
      file.skip(2);
      const numTables = file.getUint16();
      let potentialTable;
      let canBreak = false;
      for (let i = 0; i < numTables; i++) {
        const platformId = file.getUint16();
        const encodingId = file.getUint16();
        const offset = file.getInt32() >>> 0;
        let useTable = false;
        if (potentialTable?.platformId === platformId && potentialTable?.encodingId === encodingId) {
          continue;
        }
        if (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 3)) {
          useTable = true;
        } else if (platformId === 1 && encodingId === 0) {
          useTable = true;
        } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {
          useTable = true;
          if (!isSymbolicFont) {
            canBreak = true;
          }
        } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {
          useTable = true;
          let correctlySorted = true;
          if (i < numTables - 1) {
            const nextBytes = file.peekBytes(2),
              nextPlatformId = int16(nextBytes[0], nextBytes[1]);
            if (nextPlatformId < platformId) {
              correctlySorted = false;
            }
          }
          if (correctlySorted) {
            canBreak = true;
          }
        }
        if (useTable) {
          potentialTable = {
            platformId,
            encodingId,
            offset
          };
        }
        if (canBreak) {
          break;
        }
      }
      if (potentialTable) {
        file.pos = start + potentialTable.offset;
      }
      if (!potentialTable || file.peekByte() === -1) {
        warn("Could not find a preferred cmap table.");
        return {
          platformId: -1,
          encodingId: -1,
          mappings: [],
          hasShortCmap: false
        };
      }
      const format = file.getUint16();
      let hasShortCmap = false;
      const mappings = [];
      let j, glyphId;
      if (format === 0) {
        file.skip(2 + 2);
        for (j = 0; j < 256; j++) {
          const index = file.getByte();
          if (!index) {
            continue;
          }
          mappings.push({
            charCode: j,
            glyphId: index
          });
        }
        hasShortCmap = true;
      } else if (format === 2) {
        file.skip(2 + 2);
        const subHeaderKeys = [];
        let maxSubHeaderKey = 0;
        for (let i = 0; i < 256; i++) {
          const subHeaderKey = file.getUint16() >> 3;
          subHeaderKeys.push(subHeaderKey);
          maxSubHeaderKey = Math.max(subHeaderKey, maxSubHeaderKey);
        }
        const subHeaders = [];
        for (let i = 0; i <= maxSubHeaderKey; i++) {
          subHeaders.push({
            firstCode: file.getUint16(),
            entryCount: file.getUint16(),
            idDelta: signedInt16(file.getByte(), file.getByte()),
            idRangePos: file.pos + file.getUint16()
          });
        }
        for (let i = 0; i < 256; i++) {
          if (subHeaderKeys[i] === 0) {
            file.pos = subHeaders[0].idRangePos + 2 * i;
            glyphId = file.getUint16();
            mappings.push({
              charCode: i,
              glyphId
            });
          } else {
            const s = subHeaders[subHeaderKeys[i]];
            for (j = 0; j < s.entryCount; j++) {
              const charCode = (i << 8) + j + s.firstCode;
              file.pos = s.idRangePos + 2 * j;
              glyphId = file.getUint16();
              if (glyphId !== 0) {
                glyphId = (glyphId + s.idDelta) % 65536;
              }
              mappings.push({
                charCode,
                glyphId
              });
            }
          }
        }
      } else if (format === 4) {
        file.skip(2 + 2);
        const segCount = file.getUint16() >> 1;
        file.skip(6);
        const segments = [];
        let segIndex;
        for (segIndex = 0; segIndex < segCount; segIndex++) {
          segments.push({
            end: file.getUint16()
          });
        }
        file.skip(2);
        for (segIndex = 0; segIndex < segCount; segIndex++) {
          segments[segIndex].start = file.getUint16();
        }
        for (segIndex = 0; segIndex < segCount; segIndex++) {
          segments[segIndex].delta = file.getUint16();
        }
        let offsetsCount = 0,
          offsetIndex;
        for (segIndex = 0; segIndex < segCount; segIndex++) {
          segment = segments[segIndex];
          const rangeOffset = file.getUint16();
          if (!rangeOffset) {
            segment.offsetIndex = -1;
            continue;
          }
          offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);
          segment.offsetIndex = offsetIndex;
          offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);
        }
        const offsets = [];
        for (j = 0; j < offsetsCount; j++) {
          offsets.push(file.getUint16());
        }
        for (segIndex = 0; segIndex < segCount; segIndex++) {
          segment = segments[segIndex];
          start = segment.start;
          const end = segment.end;
          const delta = segment.delta;
          offsetIndex = segment.offsetIndex;
          for (j = start; j <= end; j++) {
            if (j === 0xffff) {
              continue;
            }
            glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];
            glyphId = glyphId + delta & 0xffff;
            mappings.push({
              charCode: j,
              glyphId
            });
          }
        }
      } else if (format === 6) {
        file.skip(2 + 2);
        const firstCode = file.getUint16();
        const entryCount = file.getUint16();
        for (j = 0; j < entryCount; j++) {
          glyphId = file.getUint16();
          const charCode = firstCode + j;
          mappings.push({
            charCode,
            glyphId
          });
        }
      } else if (format === 12) {
        file.skip(2 + 4 + 4);
        const nGroups = file.getInt32() >>> 0;
        for (j = 0; j < nGroups; j++) {
          const startCharCode = file.getInt32() >>> 0;
          const endCharCode = file.getInt32() >>> 0;
          let glyphCode = file.getInt32() >>> 0;
          for (let charCode = startCharCode; charCode <= endCharCode; charCode++) {
            mappings.push({
              charCode,
              glyphId: glyphCode++
            });
          }
        }
      } else {
        warn("cmap table has unsupported format: " + format);
        return {
          platformId: -1,
          encodingId: -1,
          mappings: [],
          hasShortCmap: false
        };
      }
      mappings.sort((a, b) => a.charCode - b.charCode);
      const finalMappings = [],
        seenCharCodes = new Set();
      for (const map of mappings) {
        const {
          charCode
        } = map;
        if (seenCharCodes.has(charCode)) {
          continue;
        }
        seenCharCodes.add(charCode);
        finalMappings.push(map);
      }
      return {
        platformId: potentialTable.platformId,
        encodingId: potentialTable.encodingId,
        mappings: finalMappings,
        hasShortCmap
      };
    }
    function sanitizeMetrics(file, header, metrics, headTable, numGlyphs, dupFirstEntry) {
      if (!header) {
        if (metrics) {
          metrics.data = null;
        }
        return;
      }
      file.pos = (file.start || 0) + header.offset;
      file.pos += 4;
      file.pos += 2;
      file.pos += 2;
      file.pos += 2;
      file.pos += 2;
      file.pos += 2;
      file.pos += 2;
      file.pos += 2;
      file.pos += 2;
      file.pos += 2;
      const caretOffset = file.getUint16();
      file.pos += 8;
      file.pos += 2;
      let numOfMetrics = file.getUint16();
      if (caretOffset !== 0) {
        const macStyle = int16(headTable.data[44], headTable.data[45]);
        if (!(macStyle & 2)) {
          header.data[22] = 0;
          header.data[23] = 0;
        }
      }
      if (numOfMetrics > numGlyphs) {
        info(\`The numOfMetrics (\${numOfMetrics}) should not be \` + \`greater than the numGlyphs (\${numGlyphs}).\`);
        numOfMetrics = numGlyphs;
        header.data[34] = (numOfMetrics & 0xff00) >> 8;
        header.data[35] = numOfMetrics & 0x00ff;
      }
      const numOfSidebearings = numGlyphs - numOfMetrics;
      const numMissing = numOfSidebearings - (metrics.length - numOfMetrics * 4 >> 1);
      if (numMissing > 0) {
        const entries = new Uint8Array(metrics.length + numMissing * 2);
        entries.set(metrics.data);
        if (dupFirstEntry) {
          entries[metrics.length] = metrics.data[2];
          entries[metrics.length + 1] = metrics.data[3];
        }
        metrics.data = entries;
      }
    }
    function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid) {
      const glyphProfile = {
        length: 0,
        sizeOfInstructions: 0
      };
      if (sourceStart < 0 || sourceStart >= source.length || sourceEnd > source.length || sourceEnd - sourceStart <= 12) {
        return glyphProfile;
      }
      const glyf = source.subarray(sourceStart, sourceEnd);
      const xMin = signedInt16(glyf[2], glyf[3]);
      const yMin = signedInt16(glyf[4], glyf[5]);
      const xMax = signedInt16(glyf[6], glyf[7]);
      const yMax = signedInt16(glyf[8], glyf[9]);
      if (xMin > xMax) {
        writeSignedInt16(glyf, 2, xMax);
        writeSignedInt16(glyf, 6, xMin);
      }
      if (yMin > yMax) {
        writeSignedInt16(glyf, 4, yMax);
        writeSignedInt16(glyf, 8, yMin);
      }
      const contoursCount = signedInt16(glyf[0], glyf[1]);
      if (contoursCount < 0) {
        if (contoursCount < -1) {
          return glyphProfile;
        }
        dest.set(glyf, destStart);
        glyphProfile.length = glyf.length;
        return glyphProfile;
      }
      let i,
        j = 10,
        flagsCount = 0;
      for (i = 0; i < contoursCount; i++) {
        const endPoint = glyf[j] << 8 | glyf[j + 1];
        flagsCount = endPoint + 1;
        j += 2;
      }
      const instructionsStart = j;
      const instructionsLength = glyf[j] << 8 | glyf[j + 1];
      glyphProfile.sizeOfInstructions = instructionsLength;
      j += 2 + instructionsLength;
      const instructionsEnd = j;
      let coordinatesLength = 0;
      for (i = 0; i < flagsCount; i++) {
        const flag = glyf[j++];
        if (flag & 0xc0) {
          glyf[j - 1] = flag & 0x3f;
        }
        let xLength = 2;
        if (flag & 2) {
          xLength = 1;
        } else if (flag & 16) {
          xLength = 0;
        }
        let yLength = 2;
        if (flag & 4) {
          yLength = 1;
        } else if (flag & 32) {
          yLength = 0;
        }
        const xyLength = xLength + yLength;
        coordinatesLength += xyLength;
        if (flag & 8) {
          const repeat = glyf[j++];
          if (repeat === 0) {
            glyf[j - 1] ^= 8;
          }
          i += repeat;
          coordinatesLength += repeat * xyLength;
        }
      }
      if (coordinatesLength === 0) {
        return glyphProfile;
      }
      let glyphDataLength = j + coordinatesLength;
      if (glyphDataLength > glyf.length) {
        return glyphProfile;
      }
      if (!hintsValid && instructionsLength > 0) {
        dest.set(glyf.subarray(0, instructionsStart), destStart);
        dest.set([0, 0], destStart + instructionsStart);
        dest.set(glyf.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);
        glyphDataLength -= instructionsLength;
        if (glyf.length - glyphDataLength > 3) {
          glyphDataLength = glyphDataLength + 3 & ~3;
        }
        glyphProfile.length = glyphDataLength;
        return glyphProfile;
      }
      if (glyf.length - glyphDataLength > 3) {
        glyphDataLength = glyphDataLength + 3 & ~3;
        dest.set(glyf.subarray(0, glyphDataLength), destStart);
        glyphProfile.length = glyphDataLength;
        return glyphProfile;
      }
      dest.set(glyf, destStart);
      glyphProfile.length = glyf.length;
      return glyphProfile;
    }
    function sanitizeHead(head, numGlyphs, locaLength) {
      const data = head.data;
      const version = int32(data[0], data[1], data[2], data[3]);
      if (version >> 16 !== 1) {
        info("Attempting to fix invalid version in head table: " + version);
        data[0] = 0;
        data[1] = 1;
        data[2] = 0;
        data[3] = 0;
      }
      const indexToLocFormat = int16(data[50], data[51]);
      if (indexToLocFormat < 0 || indexToLocFormat > 1) {
        info("Attempting to fix invalid indexToLocFormat in head table: " + indexToLocFormat);
        const numGlyphsPlusOne = numGlyphs + 1;
        if (locaLength === numGlyphsPlusOne << 1) {
          data[50] = 0;
          data[51] = 0;
        } else if (locaLength === numGlyphsPlusOne << 2) {
          data[50] = 0;
          data[51] = 1;
        } else {
          throw new FormatError("Could not fix indexToLocFormat: " + indexToLocFormat);
        }
      }
    }
    function sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions) {
      let itemSize, itemDecode, itemEncode;
      if (isGlyphLocationsLong) {
        itemSize = 4;
        itemDecode = function fontItemDecodeLong(data, offset) {
          return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
        };
        itemEncode = function fontItemEncodeLong(data, offset, value) {
          data[offset] = value >>> 24 & 0xff;
          data[offset + 1] = value >> 16 & 0xff;
          data[offset + 2] = value >> 8 & 0xff;
          data[offset + 3] = value & 0xff;
        };
      } else {
        itemSize = 2;
        itemDecode = function fontItemDecode(data, offset) {
          return data[offset] << 9 | data[offset + 1] << 1;
        };
        itemEncode = function fontItemEncode(data, offset, value) {
          data[offset] = value >> 9 & 0xff;
          data[offset + 1] = value >> 1 & 0xff;
        };
      }
      const numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;
      const locaDataSize = itemSize * (1 + numGlyphsOut);
      const locaData = new Uint8Array(locaDataSize);
      locaData.set(loca.data.subarray(0, locaDataSize));
      loca.data = locaData;
      const oldGlyfData = glyf.data;
      const oldGlyfDataLength = oldGlyfData.length;
      const newGlyfData = new Uint8Array(oldGlyfDataLength);
      let i, j;
      const locaEntries = [];
      for (i = 0, j = 0; i < numGlyphs + 1; i++, j += itemSize) {
        let offset = itemDecode(locaData, j);
        if (offset > oldGlyfDataLength) {
          offset = oldGlyfDataLength;
        }
        locaEntries.push({
          index: i,
          offset,
          endOffset: 0
        });
      }
      locaEntries.sort((a, b) => a.offset - b.offset);
      for (i = 0; i < numGlyphs; i++) {
        locaEntries[i].endOffset = locaEntries[i + 1].offset;
      }
      locaEntries.sort((a, b) => a.index - b.index);
      for (i = 0; i < numGlyphs; i++) {
        const {
          offset,
          endOffset
        } = locaEntries[i];
        if (offset !== 0 || endOffset !== 0) {
          break;
        }
        const nextOffset = locaEntries[i + 1].offset;
        if (nextOffset === 0) {
          continue;
        }
        locaEntries[i].endOffset = nextOffset;
        break;
      }
      const last = locaEntries.at(-2);
      if (last.offset !== 0 && last.endOffset === 0) {
        last.endOffset = oldGlyfDataLength;
      }
      const missingGlyphs = Object.create(null);
      let writeOffset = 0;
      itemEncode(locaData, 0, writeOffset);
      for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {
        const glyphProfile = sanitizeGlyph(oldGlyfData, locaEntries[i].offset, locaEntries[i].endOffset, newGlyfData, writeOffset, hintsValid);
        const newLength = glyphProfile.length;
        if (newLength === 0) {
          missingGlyphs[i] = true;
        }
        if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {
          maxSizeOfInstructions = glyphProfile.sizeOfInstructions;
        }
        writeOffset += newLength;
        itemEncode(locaData, j, writeOffset);
      }
      if (writeOffset === 0) {
        const simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);
        for (i = 0, j = itemSize; i < numGlyphsOut; i++, j += itemSize) {
          itemEncode(locaData, j, simpleGlyph.length);
        }
        glyf.data = simpleGlyph;
      } else if (dupFirstEntry) {
        const firstEntryLength = itemDecode(locaData, itemSize);
        if (newGlyfData.length > firstEntryLength + writeOffset) {
          glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);
        } else {
          glyf.data = new Uint8Array(firstEntryLength + writeOffset);
          glyf.data.set(newGlyfData.subarray(0, writeOffset));
        }
        glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);
        itemEncode(loca.data, locaData.length - itemSize, writeOffset + firstEntryLength);
      } else {
        glyf.data = newGlyfData.subarray(0, writeOffset);
      }
      return {
        missingGlyphs,
        maxSizeOfInstructions
      };
    }
    function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {
      const start = (font.start || 0) + post.offset;
      font.pos = start;
      const length = post.length,
        end = start + length;
      const version = font.getInt32();
      font.skip(28);
      let glyphNames;
      let valid = true;
      let i;
      switch (version) {
        case 0x00010000:
          glyphNames = MacStandardGlyphOrdering;
          break;
        case 0x00020000:
          const numGlyphs = font.getUint16();
          if (numGlyphs !== maxpNumGlyphs) {
            valid = false;
            break;
          }
          const glyphNameIndexes = [];
          for (i = 0; i < numGlyphs; ++i) {
            const index = font.getUint16();
            if (index >= 32768) {
              valid = false;
              break;
            }
            glyphNameIndexes.push(index);
          }
          if (!valid) {
            break;
          }
          const customNames = [],
            strBuf = [];
          while (font.pos < end) {
            const stringLength = font.getByte();
            strBuf.length = stringLength;
            for (i = 0; i < stringLength; ++i) {
              strBuf[i] = String.fromCharCode(font.getByte());
            }
            customNames.push(strBuf.join(""));
          }
          glyphNames = [];
          for (i = 0; i < numGlyphs; ++i) {
            const j = glyphNameIndexes[i];
            if (j < 258) {
              glyphNames.push(MacStandardGlyphOrdering[j]);
              continue;
            }
            glyphNames.push(customNames[j - 258]);
          }
          break;
        case 0x00030000:
          break;
        default:
          warn("Unknown/unsupported post table version " + version);
          valid = false;
          if (propertiesObj.defaultEncoding) {
            glyphNames = propertiesObj.defaultEncoding;
          }
          break;
      }
      propertiesObj.glyphNames = glyphNames;
      return valid;
    }
    function readNameTable(nameTable) {
      const start = (font.start || 0) + nameTable.offset;
      font.pos = start;
      const names = [[], []],
        records = [];
      const length = nameTable.length,
        end = start + length;
      const format = font.getUint16();
      const FORMAT_0_HEADER_LENGTH = 6;
      if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {
        return [names, records];
      }
      const numRecords = font.getUint16();
      const stringsStart = font.getUint16();
      const NAME_RECORD_LENGTH = 12;
      let i, ii;
      for (i = 0; i < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i++) {
        const r = {
          platform: font.getUint16(),
          encoding: font.getUint16(),
          language: font.getUint16(),
          name: font.getUint16(),
          length: font.getUint16(),
          offset: font.getUint16()
        };
        if (isMacNameRecord(r) || isWinNameRecord(r)) {
          records.push(r);
        }
      }
      for (i = 0, ii = records.length; i < ii; i++) {
        const record = records[i];
        if (record.length <= 0) {
          continue;
        }
        const pos = start + stringsStart + record.offset;
        if (pos + record.length > end) {
          continue;
        }
        font.pos = pos;
        const nameIndex = record.name;
        if (record.encoding) {
          let str = "";
          for (let j = 0, jj = record.length; j < jj; j += 2) {
            str += String.fromCharCode(font.getUint16());
          }
          names[1][nameIndex] = str;
        } else {
          names[0][nameIndex] = font.getString(record.length);
        }
      }
      return [names, records];
    }
    const TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];
    function sanitizeTTProgram(table, ttContext) {
      let data = table.data;
      let i = 0,
        j,
        n,
        b,
        funcId,
        pc,
        lastEndf = 0,
        lastDeff = 0;
      const stack = [];
      const callstack = [];
      const functionsCalled = [];
      let tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;
      let inFDEF = false,
        ifLevel = 0,
        inELSE = 0;
      for (let ii = data.length; i < ii;) {
        const op = data[i++];
        if (op === 0x40) {
          n = data[i++];
          if (inFDEF || inELSE) {
            i += n;
          } else {
            for (j = 0; j < n; j++) {
              stack.push(data[i++]);
            }
          }
        } else if (op === 0x41) {
          n = data[i++];
          if (inFDEF || inELSE) {
            i += n * 2;
          } else {
            for (j = 0; j < n; j++) {
              b = data[i++];
              stack.push(b << 8 | data[i++]);
            }
          }
        } else if ((op & 0xf8) === 0xb0) {
          n = op - 0xb0 + 1;
          if (inFDEF || inELSE) {
            i += n;
          } else {
            for (j = 0; j < n; j++) {
              stack.push(data[i++]);
            }
          }
        } else if ((op & 0xf8) === 0xb8) {
          n = op - 0xb8 + 1;
          if (inFDEF || inELSE) {
            i += n * 2;
          } else {
            for (j = 0; j < n; j++) {
              b = data[i++];
              stack.push(signedInt16(b, data[i++]));
            }
          }
        } else if (op === 0x2b && !tooComplexToFollowFunctions) {
          if (!inFDEF && !inELSE) {
            funcId = stack.at(-1);
            if (isNaN(funcId)) {
              info("TT: CALL empty stack (or invalid entry).");
            } else {
              ttContext.functionsUsed[funcId] = true;
              if (funcId in ttContext.functionsStackDeltas) {
                const newStackLength = stack.length + ttContext.functionsStackDeltas[funcId];
                if (newStackLength < 0) {
                  warn("TT: CALL invalid functions stack delta.");
                  ttContext.hintsValid = false;
                  return;
                }
                stack.length = newStackLength;
              } else if (funcId in ttContext.functionsDefined && !functionsCalled.includes(funcId)) {
                callstack.push({
                  data,
                  i,
                  stackTop: stack.length - 1
                });
                functionsCalled.push(funcId);
                pc = ttContext.functionsDefined[funcId];
                if (!pc) {
                  warn("TT: CALL non-existent function");
                  ttContext.hintsValid = false;
                  return;
                }
                data = pc.data;
                i = pc.i;
              }
            }
          }
        } else if (op === 0x2c && !tooComplexToFollowFunctions) {
          if (inFDEF || inELSE) {
            warn("TT: nested FDEFs not allowed");
            tooComplexToFollowFunctions = true;
          }
          inFDEF = true;
          lastDeff = i;
          funcId = stack.pop();
          ttContext.functionsDefined[funcId] = {
            data,
            i
          };
        } else if (op === 0x2d) {
          if (inFDEF) {
            inFDEF = false;
            lastEndf = i;
          } else {
            pc = callstack.pop();
            if (!pc) {
              warn("TT: ENDF bad stack");
              ttContext.hintsValid = false;
              return;
            }
            funcId = functionsCalled.pop();
            data = pc.data;
            i = pc.i;
            ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;
          }
        } else if (op === 0x89) {
          if (inFDEF || inELSE) {
            warn("TT: nested IDEFs not allowed");
            tooComplexToFollowFunctions = true;
          }
          inFDEF = true;
          lastDeff = i;
        } else if (op === 0x58) {
          ++ifLevel;
        } else if (op === 0x1b) {
          inELSE = ifLevel;
        } else if (op === 0x59) {
          if (inELSE === ifLevel) {
            inELSE = 0;
          }
          --ifLevel;
        } else if (op === 0x1c) {
          if (!inFDEF && !inELSE) {
            const offset = stack.at(-1);
            if (offset > 0) {
              i += offset - 1;
            }
          }
        }
        if (!inFDEF && !inELSE) {
          let stackDelta = 0;
          if (op <= 0x8e) {
            stackDelta = TTOpsStackDeltas[op];
          } else if (op >= 0xc0 && op <= 0xdf) {
            stackDelta = -1;
          } else if (op >= 0xe0) {
            stackDelta = -2;
          }
          if (op >= 0x71 && op <= 0x75) {
            n = stack.pop();
            if (!isNaN(n)) {
              stackDelta = -n * 2;
            }
          }
          while (stackDelta < 0 && stack.length > 0) {
            stack.pop();
            stackDelta++;
          }
          while (stackDelta > 0) {
            stack.push(NaN);
            stackDelta--;
          }
        }
      }
      ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;
      const content = [data];
      if (i > data.length) {
        content.push(new Uint8Array(i - data.length));
      }
      if (lastDeff > lastEndf) {
        warn("TT: complementing a missing function tail");
        content.push(new Uint8Array([0x22, 0x2d]));
      }
      foldTTTable(table, content);
    }
    function checkInvalidFunctions(ttContext, maxFunctionDefs) {
      if (ttContext.tooComplexToFollowFunctions) {
        return;
      }
      if (ttContext.functionsDefined.length > maxFunctionDefs) {
        warn("TT: more functions defined than expected");
        ttContext.hintsValid = false;
        return;
      }
      for (let j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {
        if (j > maxFunctionDefs) {
          warn("TT: invalid function id: " + j);
          ttContext.hintsValid = false;
          return;
        }
        if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {
          warn("TT: undefined function: " + j);
          ttContext.hintsValid = false;
          return;
        }
      }
    }
    function foldTTTable(table, content) {
      if (content.length > 1) {
        let newLength = 0;
        let j, jj;
        for (j = 0, jj = content.length; j < jj; j++) {
          newLength += content[j].length;
        }
        newLength = newLength + 3 & ~3;
        const result = new Uint8Array(newLength);
        let pos = 0;
        for (j = 0, jj = content.length; j < jj; j++) {
          result.set(content[j], pos);
          pos += content[j].length;
        }
        table.data = result;
        table.length = newLength;
      }
    }
    function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {
      const ttContext = {
        functionsDefined: [],
        functionsUsed: [],
        functionsStackDeltas: [],
        tooComplexToFollowFunctions: false,
        hintsValid: true
      };
      if (fpgm) {
        sanitizeTTProgram(fpgm, ttContext);
      }
      if (prep) {
        sanitizeTTProgram(prep, ttContext);
      }
      if (fpgm) {
        checkInvalidFunctions(ttContext, maxFunctionDefs);
      }
      if (cvt && cvt.length & 1) {
        const cvtData = new Uint8Array(cvt.length + 1);
        cvtData.set(cvt.data);
        cvt.data = cvtData;
      }
      return ttContext.hintsValid;
    }
    font = new Stream(new Uint8Array(font.getBytes()));
    let header, tables;
    if (isTrueTypeCollectionFile(font)) {
      const ttcData = readTrueTypeCollectionData(font, this.name);
      header = ttcData.header;
      tables = ttcData.tables;
    } else {
      header = readOpenTypeHeader(font);
      tables = readTables(font, header.numTables);
    }
    let cff, cffFile;
    const isTrueType = !tables["CFF "];
    if (!isTrueType) {
      const isComposite = properties.composite && (properties.cidToGidMap?.length > 0 || !(properties.cMap instanceof IdentityCMap));
      if (header.version === "OTTO" && !isComposite || !tables.head || !tables.hhea || !tables.maxp || !tables.post) {
        cffFile = new Stream(tables["CFF "].data);
        cff = new CFFFont(cffFile, properties);
        adjustWidths(properties);
        return this.convert(name, cff, properties);
      }
      delete tables.glyf;
      delete tables.loca;
      delete tables.fpgm;
      delete tables.prep;
      delete tables["cvt "];
      this.isOpenType = true;
    } else {
      if (!tables.loca) {
        throw new FormatError('Required "loca" table is not found');
      }
      if (!tables.glyf) {
        warn('Required "glyf" table is not found -- trying to recover.');
        tables.glyf = {
          tag: "glyf",
          data: new Uint8Array(0)
        };
      }
      this.isOpenType = false;
    }
    if (!tables.maxp) {
      throw new FormatError('Required "maxp" table is not found');
    }
    font.pos = (font.start || 0) + tables.maxp.offset;
    let version = font.getInt32();
    const numGlyphs = font.getUint16();
    if (version !== 0x00010000 && version !== 0x00005000) {
      if (tables.maxp.length === 6) {
        version = 0x0005000;
      } else if (tables.maxp.length >= 32) {
        version = 0x00010000;
      } else {
        throw new FormatError(\`"maxp" table has a wrong version number\`);
      }
      writeUint32(tables.maxp.data, 0, version);
    }
    if (properties.scaleFactors?.length === numGlyphs && isTrueType) {
      const {
        scaleFactors
      } = properties;
      const isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);
      const glyphs = new GlyfTable({
        glyfTable: tables.glyf.data,
        isGlyphLocationsLong,
        locaTable: tables.loca.data,
        numGlyphs
      });
      glyphs.scale(scaleFactors);
      const {
        glyf,
        loca,
        isLocationLong
      } = glyphs.write();
      tables.glyf.data = glyf;
      tables.loca.data = loca;
      if (isLocationLong !== !!isGlyphLocationsLong) {
        tables.head.data[50] = 0;
        tables.head.data[51] = isLocationLong ? 1 : 0;
      }
      const metrics = tables.hmtx.data;
      for (let i = 0; i < numGlyphs; i++) {
        const j = 4 * i;
        const advanceWidth = Math.round(scaleFactors[i] * int16(metrics[j], metrics[j + 1]));
        metrics[j] = advanceWidth >> 8 & 0xff;
        metrics[j + 1] = advanceWidth & 0xff;
        const lsb = Math.round(scaleFactors[i] * signedInt16(metrics[j + 2], metrics[j + 3]));
        writeSignedInt16(metrics, j + 2, lsb);
      }
    }
    let numGlyphsOut = numGlyphs + 1;
    let dupFirstEntry = true;
    if (numGlyphsOut > 0xffff) {
      dupFirstEntry = false;
      numGlyphsOut = numGlyphs;
      warn("Not enough space in glyfs to duplicate first glyph.");
    }
    let maxFunctionDefs = 0;
    let maxSizeOfInstructions = 0;
    if (version >= 0x00010000 && tables.maxp.length >= 32) {
      font.pos += 8;
      const maxZones = font.getUint16();
      if (maxZones > 2) {
        tables.maxp.data[14] = 0;
        tables.maxp.data[15] = 2;
      }
      font.pos += 4;
      maxFunctionDefs = font.getUint16();
      font.pos += 4;
      maxSizeOfInstructions = font.getUint16();
    }
    tables.maxp.data[4] = numGlyphsOut >> 8;
    tables.maxp.data[5] = numGlyphsOut & 255;
    const hintsValid = sanitizeTTPrograms(tables.fpgm, tables.prep, tables["cvt "], maxFunctionDefs);
    if (!hintsValid) {
      delete tables.fpgm;
      delete tables.prep;
      delete tables["cvt "];
    }
    sanitizeMetrics(font, tables.hhea, tables.hmtx, tables.head, numGlyphsOut, dupFirstEntry);
    if (!tables.head) {
      throw new FormatError('Required "head" table is not found');
    }
    sanitizeHead(tables.head, numGlyphs, isTrueType ? tables.loca.length : 0);
    let missingGlyphs = Object.create(null);
    if (isTrueType) {
      const isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);
      const glyphsInfo = sanitizeGlyphLocations(tables.loca, tables.glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions);
      missingGlyphs = glyphsInfo.missingGlyphs;
      if (version >= 0x00010000 && tables.maxp.length >= 32) {
        tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;
        tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;
      }
    }
    if (!tables.hhea) {
      throw new FormatError('Required "hhea" table is not found');
    }
    if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {
      tables.hhea.data[10] = 0xff;
      tables.hhea.data[11] = 0xff;
    }
    const metricsOverride = {
      unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),
      yMax: signedInt16(tables.head.data[42], tables.head.data[43]),
      yMin: signedInt16(tables.head.data[38], tables.head.data[39]),
      ascent: signedInt16(tables.hhea.data[4], tables.hhea.data[5]),
      descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7]),
      lineGap: signedInt16(tables.hhea.data[8], tables.hhea.data[9])
    };
    this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;
    this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;
    this.lineGap = metricsOverride.lineGap / metricsOverride.unitsPerEm;
    if (this.cssFontInfo?.lineHeight) {
      this.lineHeight = this.cssFontInfo.metrics.lineHeight;
      this.lineGap = this.cssFontInfo.metrics.lineGap;
    } else {
      this.lineHeight = this.ascent - this.descent + this.lineGap;
    }
    if (tables.post) {
      readPostScriptTable(tables.post, properties, numGlyphs);
    }
    tables.post = {
      tag: "post",
      data: createPostTable(properties)
    };
    const charCodeToGlyphId = Object.create(null);
    function hasGlyph(glyphId) {
      return !missingGlyphs[glyphId];
    }
    if (properties.composite) {
      const cidToGidMap = properties.cidToGidMap || [];
      const isCidToGidMapEmpty = cidToGidMap.length === 0;
      properties.cMap.forEach(function (charCode, cid) {
        if (typeof cid === "string") {
          cid = convertCidString(charCode, cid, true);
        }
        if (cid > 0xffff) {
          throw new FormatError("Max size of CID is 65,535");
        }
        let glyphId = -1;
        if (isCidToGidMapEmpty) {
          glyphId = cid;
        } else if (cidToGidMap[cid] !== undefined) {
          glyphId = cidToGidMap[cid];
        }
        if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {
          charCodeToGlyphId[charCode] = glyphId;
        }
      });
    } else {
      const cmapTable = readCmapTable(tables.cmap, font, this.isSymbolicFont, properties.hasEncoding);
      const cmapPlatformId = cmapTable.platformId;
      const cmapEncodingId = cmapTable.encodingId;
      const cmapMappings = cmapTable.mappings;
      let baseEncoding = [],
        forcePostTable = false;
      if (properties.hasEncoding && (properties.baseEncodingName === "MacRomanEncoding" || properties.baseEncodingName === "WinAnsiEncoding")) {
        baseEncoding = getEncoding(properties.baseEncodingName);
      }
      if (properties.hasEncoding && !this.isSymbolicFont && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0)) {
        const glyphsUnicodeMap = getGlyphsUnicode();
        for (let charCode = 0; charCode < 256; charCode++) {
          let glyphName;
          if (this.differences[charCode] !== undefined) {
            glyphName = this.differences[charCode];
          } else if (baseEncoding.length && baseEncoding[charCode] !== "") {
            glyphName = baseEncoding[charCode];
          } else {
            glyphName = StandardEncoding[charCode];
          }
          if (!glyphName) {
            continue;
          }
          const standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);
          let unicodeOrCharCode;
          if (cmapPlatformId === 3 && cmapEncodingId === 1) {
            unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];
          } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {
            unicodeOrCharCode = MacRomanEncoding.indexOf(standardGlyphName);
          }
          if (unicodeOrCharCode === undefined) {
            if (!properties.glyphNames && properties.hasIncludedToUnicodeMap && !(this.toUnicode instanceof IdentityToUnicodeMap)) {
              const unicode = this.toUnicode.get(charCode);
              if (unicode) {
                unicodeOrCharCode = unicode.codePointAt(0);
              }
            }
            if (unicodeOrCharCode === undefined) {
              continue;
            }
          }
          for (const mapping of cmapMappings) {
            if (mapping.charCode !== unicodeOrCharCode) {
              continue;
            }
            charCodeToGlyphId[charCode] = mapping.glyphId;
            break;
          }
        }
      } else if (cmapPlatformId === 0) {
        for (const mapping of cmapMappings) {
          charCodeToGlyphId[mapping.charCode] = mapping.glyphId;
        }
        forcePostTable = true;
      } else if (cmapPlatformId === 3 && cmapEncodingId === 0) {
        for (const mapping of cmapMappings) {
          let charCode = mapping.charCode;
          if (charCode >= 0xf000 && charCode <= 0xf0ff) {
            charCode &= 0xff;
          }
          charCodeToGlyphId[charCode] = mapping.glyphId;
        }
      } else {
        for (const mapping of cmapMappings) {
          charCodeToGlyphId[mapping.charCode] = mapping.glyphId;
        }
      }
      if (properties.glyphNames && (baseEncoding.length || this.differences.length)) {
        for (let i = 0; i < 256; ++i) {
          if (!forcePostTable && charCodeToGlyphId[i] !== undefined) {
            continue;
          }
          const glyphName = this.differences[i] || baseEncoding[i];
          if (!glyphName) {
            continue;
          }
          const glyphId = properties.glyphNames.indexOf(glyphName);
          if (glyphId > 0 && hasGlyph(glyphId)) {
            charCodeToGlyphId[i] = glyphId;
          }
        }
      }
    }
    if (charCodeToGlyphId.length === 0) {
      charCodeToGlyphId[0] = 0;
    }
    let glyphZeroId = numGlyphsOut - 1;
    if (!dupFirstEntry) {
      glyphZeroId = 0;
    }
    if (!properties.cssFontInfo) {
      const newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId, this.toUnicode);
      this.toFontChar = newMapping.toFontChar;
      tables.cmap = {
        tag: "cmap",
        data: createCmapTable(newMapping.charCodeToGlyphId, newMapping.toUnicodeExtraMap, numGlyphsOut)
      };
      if (!tables["OS/2"] || !validateOS2Table(tables["OS/2"], font)) {
        tables["OS/2"] = {
          tag: "OS/2",
          data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)
        };
      }
    }
    if (!isTrueType) {
      try {
        cffFile = new Stream(tables["CFF "].data);
        const parser = new CFFParser(cffFile, properties, SEAC_ANALYSIS_ENABLED);
        cff = parser.parse();
        cff.duplicateFirstGlyph();
        const compiler = new CFFCompiler(cff);
        tables["CFF "].data = compiler.compile();
      } catch {
        warn("Failed to compile font " + properties.loadedName);
      }
    }
    if (!tables.name) {
      tables.name = {
        tag: "name",
        data: createNameTable(this.name)
      };
    } else {
      const [namePrototype, nameRecords] = readNameTable(tables.name);
      tables.name.data = createNameTable(name, namePrototype);
      this.psName = namePrototype[0][6] || null;
      if (!properties.composite) {
        adjustTrueTypeToUnicode(properties, this.isSymbolicFont, nameRecords);
      }
    }
    const builder = new OpenTypeFileBuilder(header.version);
    for (const tableTag in tables) {
      builder.addTable(tableTag, tables[tableTag].data);
    }
    return builder.toArray();
  }
  convert(fontName, font, properties) {
    properties.fixedPitch = false;
    if (properties.builtInEncoding) {
      adjustType1ToUnicode(properties, properties.builtInEncoding);
    }
    let glyphZeroId = 1;
    if (font instanceof CFFFont) {
      glyphZeroId = font.numGlyphs - 1;
    }
    const mapping = font.getGlyphMapping(properties);
    let newMapping = null;
    let newCharCodeToGlyphId = mapping;
    let toUnicodeExtraMap = null;
    if (!properties.cssFontInfo) {
      newMapping = adjustMapping(mapping, font.hasGlyphId.bind(font), glyphZeroId, this.toUnicode);
      this.toFontChar = newMapping.toFontChar;
      newCharCodeToGlyphId = newMapping.charCodeToGlyphId;
      toUnicodeExtraMap = newMapping.toUnicodeExtraMap;
    }
    const numGlyphs = font.numGlyphs;
    function getCharCodes(charCodeToGlyphId, glyphId) {
      let charCodes = null;
      for (const charCode in charCodeToGlyphId) {
        if (glyphId === charCodeToGlyphId[charCode]) {
          (charCodes ||= []).push(charCode | 0);
        }
      }
      return charCodes;
    }
    function createCharCode(charCodeToGlyphId, glyphId) {
      for (const charCode in charCodeToGlyphId) {
        if (glyphId === charCodeToGlyphId[charCode]) {
          return charCode | 0;
        }
      }
      newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId;
      return newMapping.nextAvailableFontCharCode++;
    }
    const seacs = font.seacs;
    if (newMapping && SEAC_ANALYSIS_ENABLED && seacs?.length) {
      const matrix = properties.fontMatrix || FONT_IDENTITY_MATRIX;
      const charset = font.getCharset();
      const seacMap = Object.create(null);
      for (let glyphId in seacs) {
        glyphId |= 0;
        const seac = seacs[glyphId];
        const baseGlyphName = StandardEncoding[seac[2]];
        const accentGlyphName = StandardEncoding[seac[3]];
        const baseGlyphId = charset.indexOf(baseGlyphName);
        const accentGlyphId = charset.indexOf(accentGlyphName);
        if (baseGlyphId < 0 || accentGlyphId < 0) {
          continue;
        }
        const accentOffset = {
          x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],
          y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]
        };
        const charCodes = getCharCodes(mapping, glyphId);
        if (!charCodes) {
          continue;
        }
        for (const charCode of charCodes) {
          const charCodeToGlyphId = newMapping.charCodeToGlyphId;
          const baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);
          const accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);
          seacMap[charCode] = {
            baseFontCharCode,
            accentFontCharCode,
            accentOffset
          };
        }
      }
      properties.seacMap = seacMap;
    }
    const unitsPerEm = properties.fontMatrix ? 1 / Math.max(...properties.fontMatrix.slice(0, 4).map(Math.abs)) : 1000;
    const builder = new OpenTypeFileBuilder("\\x4F\\x54\\x54\\x4F");
    builder.addTable("CFF ", font.data);
    builder.addTable("OS/2", createOS2Table(properties, newCharCodeToGlyphId));
    builder.addTable("cmap", createCmapTable(newCharCodeToGlyphId, toUnicodeExtraMap, numGlyphs));
    builder.addTable("head", "\\x00\\x01\\x00\\x00" + "\\x00\\x00\\x10\\x00" + "\\x00\\x00\\x00\\x00" + "\\x5F\\x0F\\x3C\\xF5" + "\\x00\\x00" + safeString16(unitsPerEm) + "\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27" + "\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27" + "\\x00\\x00" + safeString16(properties.descent) + "\\x0F\\xFF" + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + "\\x00\\x11" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00");
    builder.addTable("hhea", "\\x00\\x01\\x00\\x00" + safeString16(properties.ascent) + safeString16(properties.descent) + "\\x00\\x00" + "\\xFF\\xFF" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + string16(numGlyphs));
    builder.addTable("hmtx", function fontFieldsHmtx() {
      const charstrings = font.charstrings;
      const cffWidths = font.cff ? font.cff.widths : null;
      let hmtx = "\\x00\\x00\\x00\\x00";
      for (let i = 1, ii = numGlyphs; i < ii; i++) {
        let width = 0;
        if (charstrings) {
          const charstring = charstrings[i - 1];
          width = "width" in charstring ? charstring.width : 0;
        } else if (cffWidths) {
          width = Math.ceil(cffWidths[i] || 0);
        }
        hmtx += string16(width) + string16(0);
      }
      return hmtx;
    }());
    builder.addTable("maxp", "\\x00\\x00\\x50\\x00" + string16(numGlyphs));
    builder.addTable("name", createNameTable(fontName));
    builder.addTable("post", createPostTable(properties));
    return builder.toArray();
  }
  get _spaceWidth() {
    const possibleSpaceReplacements = ["space", "minus", "one", "i", "I"];
    let width;
    for (const glyphName of possibleSpaceReplacements) {
      if (glyphName in this.widths) {
        width = this.widths[glyphName];
        break;
      }
      const glyphsUnicodeMap = getGlyphsUnicode();
      const glyphUnicode = glyphsUnicodeMap[glyphName];
      let charcode = 0;
      if (this.composite && this.cMap.contains(glyphUnicode)) {
        charcode = this.cMap.lookup(glyphUnicode);
        if (typeof charcode === "string") {
          charcode = convertCidString(glyphUnicode, charcode);
        }
      }
      if (!charcode && this.toUnicode) {
        charcode = this.toUnicode.charCodeOf(glyphUnicode);
      }
      if (charcode <= 0) {
        charcode = glyphUnicode;
      }
      width = this.widths[charcode];
      if (width) {
        break;
      }
    }
    return shadow(this, "_spaceWidth", width || this.defaultWidth);
  }
  _charToGlyph(charcode, isSpace = false) {
    let glyph = this._glyphCache[charcode];
    if (glyph?.isSpace === isSpace) {
      return glyph;
    }
    let fontCharCode, width, operatorListId;
    let widthCode = charcode;
    if (this.cMap?.contains(charcode)) {
      widthCode = this.cMap.lookup(charcode);
      if (typeof widthCode === "string") {
        widthCode = convertCidString(charcode, widthCode);
      }
    }
    width = this.widths[widthCode];
    if (typeof width !== "number") {
      width = this.defaultWidth;
    }
    const vmetric = this.vmetrics?.[widthCode];
    let unicode = this.toUnicode.get(charcode) || charcode;
    if (typeof unicode === "number") {
      unicode = String.fromCharCode(unicode);
    }
    let isInFont = this.toFontChar[charcode] !== undefined;
    fontCharCode = this.toFontChar[charcode] || charcode;
    if (this.missingFile) {
      const glyphName = this.differences[charcode] || this.defaultEncoding[charcode];
      if ((glyphName === ".notdef" || glyphName === "") && this.type === "Type1") {
        fontCharCode = 0x20;
        if (glyphName === "") {
          width ||= this._spaceWidth;
          unicode = String.fromCharCode(fontCharCode);
        }
      }
      fontCharCode = mapSpecialUnicodeValues(fontCharCode);
    }
    if (this.isType3Font) {
      operatorListId = fontCharCode;
    }
    let accent = null;
    if (this.seacMap?.[charcode]) {
      isInFont = true;
      const seac = this.seacMap[charcode];
      fontCharCode = seac.baseFontCharCode;
      accent = {
        fontChar: String.fromCodePoint(seac.accentFontCharCode),
        offset: seac.accentOffset
      };
    }
    let fontChar = "";
    if (typeof fontCharCode === "number") {
      if (fontCharCode <= 0x10ffff) {
        fontChar = String.fromCodePoint(fontCharCode);
      } else {
        warn(\`charToGlyph - invalid fontCharCode: \${fontCharCode}\`);
      }
    }
    if (this.missingFile && this.vertical && fontChar.length === 1) {
      const vertical = getVerticalPresentationForm()[fontChar.charCodeAt(0)];
      if (vertical) {
        fontChar = unicode = String.fromCharCode(vertical);
      }
    }
    glyph = new fonts_Glyph(charcode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);
    return this._glyphCache[charcode] = glyph;
  }
  charsToGlyphs(chars) {
    let glyphs = this._charsCache[chars];
    if (glyphs) {
      return glyphs;
    }
    glyphs = [];
    if (this.cMap) {
      const c = Object.create(null),
        ii = chars.length;
      let i = 0;
      while (i < ii) {
        this.cMap.readCharCode(chars, i, c);
        const {
          charcode,
          length
        } = c;
        i += length;
        const glyph = this._charToGlyph(charcode, length === 1 && chars.charCodeAt(i - 1) === 0x20);
        glyphs.push(glyph);
      }
    } else {
      for (let i = 0, ii = chars.length; i < ii; ++i) {
        const charcode = chars.charCodeAt(i);
        const glyph = this._charToGlyph(charcode, charcode === 0x20);
        glyphs.push(glyph);
      }
    }
    return this._charsCache[chars] = glyphs;
  }
  getCharPositions(chars) {
    const positions = [];
    if (this.cMap) {
      const c = Object.create(null);
      let i = 0;
      while (i < chars.length) {
        this.cMap.readCharCode(chars, i, c);
        const length = c.length;
        positions.push([i, i + length]);
        i += length;
      }
    } else {
      for (let i = 0, ii = chars.length; i < ii; ++i) {
        positions.push([i, i + 1]);
      }
    }
    return positions;
  }
  get glyphCacheValues() {
    return Object.values(this._glyphCache);
  }
  encodeString(str) {
    const buffers = [];
    const currentBuf = [];
    const hasCurrentBufErrors = () => buffers.length % 2 === 1;
    const getCharCode = this.toUnicode instanceof IdentityToUnicodeMap ? unicode => this.toUnicode.charCodeOf(unicode) : unicode => this.toUnicode.charCodeOf(String.fromCodePoint(unicode));
    for (let i = 0, ii = str.length; i < ii; i++) {
      const unicode = str.codePointAt(i);
      if (unicode > 0xd7ff && (unicode < 0xe000 || unicode > 0xfffd)) {
        i++;
      }
      if (this.toUnicode) {
        const charCode = getCharCode(unicode);
        if (charCode !== -1) {
          if (hasCurrentBufErrors()) {
            buffers.push(currentBuf.join(""));
            currentBuf.length = 0;
          }
          const charCodeLength = this.cMap ? this.cMap.getCharCodeLength(charCode) : 1;
          for (let j = charCodeLength - 1; j >= 0; j--) {
            currentBuf.push(String.fromCharCode(charCode >> 8 * j & 0xff));
          }
          continue;
        }
      }
      if (!hasCurrentBufErrors()) {
        buffers.push(currentBuf.join(""));
        currentBuf.length = 0;
      }
      currentBuf.push(String.fromCodePoint(unicode));
    }
    buffers.push(currentBuf.join(""));
    return buffers;
  }
}
class ErrorFont {
  constructor(error) {
    this.error = error;
    this.loadedName = "g_font_error";
    this.missingFile = true;
  }
  charsToGlyphs() {
    return [];
  }
  encodeString(chars) {
    return [chars];
  }
  exportData() {
    return {
      error: this.error
    };
  }
}

;// ./src/core/pattern.js




const ShadingType = {
  FUNCTION_BASED: 1,
  AXIAL: 2,
  RADIAL: 3,
  FREE_FORM_MESH: 4,
  LATTICE_FORM_MESH: 5,
  COONS_PATCH_MESH: 6,
  TENSOR_PATCH_MESH: 7
};
class Pattern {
  constructor() {
    unreachable("Cannot initialize Pattern.");
  }
  static parseShading(shading, xref, res, pdfFunctionFactory, globalColorSpaceCache, localColorSpaceCache) {
    const dict = shading instanceof BaseStream ? shading.dict : shading;
    const type = dict.get("ShadingType");
    try {
      switch (type) {
        case ShadingType.AXIAL:
        case ShadingType.RADIAL:
          return new RadialAxialShading(dict, xref, res, pdfFunctionFactory, globalColorSpaceCache, localColorSpaceCache);
        case ShadingType.FREE_FORM_MESH:
        case ShadingType.LATTICE_FORM_MESH:
        case ShadingType.COONS_PATCH_MESH:
        case ShadingType.TENSOR_PATCH_MESH:
          return new MeshShading(shading, xref, res, pdfFunctionFactory, globalColorSpaceCache, localColorSpaceCache);
        default:
          throw new FormatError("Unsupported ShadingType: " + type);
      }
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn(ex);
      return new DummyShading();
    }
  }
}
class BaseShading {
  static SMALL_NUMBER = 1e-6;
  getIR() {
    unreachable("Abstract method \`getIR\` called.");
  }
}
class RadialAxialShading extends BaseShading {
  constructor(dict, xref, resources, pdfFunctionFactory, globalColorSpaceCache, localColorSpaceCache) {
    super();
    this.shadingType = dict.get("ShadingType");
    let coordsLen = 0;
    if (this.shadingType === ShadingType.AXIAL) {
      coordsLen = 4;
    } else if (this.shadingType === ShadingType.RADIAL) {
      coordsLen = 6;
    }
    this.coordsArr = dict.getArray("Coords");
    if (!isNumberArray(this.coordsArr, coordsLen)) {
      throw new FormatError("RadialAxialShading: Invalid /Coords array.");
    }
    const cs = ColorSpaceUtils.parse({
      cs: dict.getRaw("CS") || dict.getRaw("ColorSpace"),
      xref,
      resources,
      pdfFunctionFactory,
      globalColorSpaceCache,
      localColorSpaceCache
    });
    this.bbox = lookupNormalRect(dict.getArray("BBox"), null);
    let t0 = 0.0,
      t1 = 1.0;
    const domainArr = dict.getArray("Domain");
    if (isNumberArray(domainArr, 2)) {
      [t0, t1] = domainArr;
    }
    let extendStart = false,
      extendEnd = false;
    const extendArr = dict.getArray("Extend");
    if (isBooleanArray(extendArr, 2)) {
      [extendStart, extendEnd] = extendArr;
    }
    if (this.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {
      const [x1, y1, r1, x2, y2, r2] = this.coordsArr;
      const distance = Math.hypot(x1 - x2, y1 - y2);
      if (r1 <= r2 + distance && r2 <= r1 + distance) {
        warn("Unsupported radial gradient.");
      }
    }
    this.extendStart = extendStart;
    this.extendEnd = extendEnd;
    const fnObj = dict.getRaw("Function");
    const fn = pdfFunctionFactory.create(fnObj, true);
    const NUMBER_OF_SAMPLES = 840;
    const step = (t1 - t0) / NUMBER_OF_SAMPLES;
    const colorStops = this.colorStops = [];
    if (t0 >= t1 || step <= 0) {
      info("Bad shading domain.");
      return;
    }
    const color = new Float32Array(cs.numComps),
      ratio = new Float32Array(1);
    let rgbColor;
    let iBase = 0;
    ratio[0] = t0;
    fn(ratio, 0, color, 0);
    let rgbBase = cs.getRgb(color, 0);
    const cssColorBase = Util.makeHexColor(rgbBase[0], rgbBase[1], rgbBase[2]);
    colorStops.push([0, cssColorBase]);
    let iPrev = 1;
    ratio[0] = t0 + step;
    fn(ratio, 0, color, 0);
    let rgbPrev = cs.getRgb(color, 0);
    let maxSlopeR = rgbPrev[0] - rgbBase[0] + 1;
    let maxSlopeG = rgbPrev[1] - rgbBase[1] + 1;
    let maxSlopeB = rgbPrev[2] - rgbBase[2] + 1;
    let minSlopeR = rgbPrev[0] - rgbBase[0] - 1;
    let minSlopeG = rgbPrev[1] - rgbBase[1] - 1;
    let minSlopeB = rgbPrev[2] - rgbBase[2] - 1;
    for (let i = 2; i < NUMBER_OF_SAMPLES; i++) {
      ratio[0] = t0 + i * step;
      fn(ratio, 0, color, 0);
      rgbColor = cs.getRgb(color, 0);
      const run = i - iBase;
      maxSlopeR = Math.min(maxSlopeR, (rgbColor[0] - rgbBase[0] + 1) / run);
      maxSlopeG = Math.min(maxSlopeG, (rgbColor[1] - rgbBase[1] + 1) / run);
      maxSlopeB = Math.min(maxSlopeB, (rgbColor[2] - rgbBase[2] + 1) / run);
      minSlopeR = Math.max(minSlopeR, (rgbColor[0] - rgbBase[0] - 1) / run);
      minSlopeG = Math.max(minSlopeG, (rgbColor[1] - rgbBase[1] - 1) / run);
      minSlopeB = Math.max(minSlopeB, (rgbColor[2] - rgbBase[2] - 1) / run);
      const slopesExist = minSlopeR <= maxSlopeR && minSlopeG <= maxSlopeG && minSlopeB <= maxSlopeB;
      if (!slopesExist) {
        const cssColor = Util.makeHexColor(rgbPrev[0], rgbPrev[1], rgbPrev[2]);
        colorStops.push([iPrev / NUMBER_OF_SAMPLES, cssColor]);
        maxSlopeR = rgbColor[0] - rgbPrev[0] + 1;
        maxSlopeG = rgbColor[1] - rgbPrev[1] + 1;
        maxSlopeB = rgbColor[2] - rgbPrev[2] + 1;
        minSlopeR = rgbColor[0] - rgbPrev[0] - 1;
        minSlopeG = rgbColor[1] - rgbPrev[1] - 1;
        minSlopeB = rgbColor[2] - rgbPrev[2] - 1;
        iBase = iPrev;
        rgbBase = rgbPrev;
      }
      iPrev = i;
      rgbPrev = rgbColor;
    }
    const cssColor = Util.makeHexColor(rgbPrev[0], rgbPrev[1], rgbPrev[2]);
    colorStops.push([1, cssColor]);
    let background = "transparent";
    if (dict.has("Background")) {
      rgbColor = cs.getRgb(dict.get("Background"), 0);
      background = Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);
    }
    if (!extendStart) {
      colorStops.unshift([0, background]);
      colorStops[1][0] += BaseShading.SMALL_NUMBER;
    }
    if (!extendEnd) {
      colorStops.at(-1)[0] -= BaseShading.SMALL_NUMBER;
      colorStops.push([1, background]);
    }
    this.colorStops = colorStops;
  }
  getIR() {
    const {
      coordsArr,
      shadingType
    } = this;
    let type, p0, p1, r0, r1;
    if (shadingType === ShadingType.AXIAL) {
      p0 = [coordsArr[0], coordsArr[1]];
      p1 = [coordsArr[2], coordsArr[3]];
      r0 = null;
      r1 = null;
      type = "axial";
    } else if (shadingType === ShadingType.RADIAL) {
      p0 = [coordsArr[0], coordsArr[1]];
      p1 = [coordsArr[3], coordsArr[4]];
      r0 = coordsArr[2];
      r1 = coordsArr[5];
      type = "radial";
    } else {
      unreachable(\`getPattern type unknown: \${shadingType}\`);
    }
    return ["RadialAxial", type, this.bbox, this.colorStops, p0, p1, r0, r1];
  }
}
class MeshStreamReader {
  constructor(stream, context) {
    this.stream = stream;
    this.context = context;
    this.buffer = 0;
    this.bufferLength = 0;
    const numComps = context.numComps;
    this.tmpCompsBuf = new Float32Array(numComps);
    const csNumComps = context.colorSpace.numComps;
    this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;
  }
  get hasData() {
    if (this.stream.end) {
      return this.stream.pos < this.stream.end;
    }
    if (this.bufferLength > 0) {
      return true;
    }
    const nextByte = this.stream.getByte();
    if (nextByte < 0) {
      return false;
    }
    this.buffer = nextByte;
    this.bufferLength = 8;
    return true;
  }
  readBits(n) {
    const {
      stream
    } = this;
    let {
      buffer,
      bufferLength
    } = this;
    if (n === 32) {
      if (bufferLength === 0) {
        return stream.getInt32() >>> 0;
      }
      buffer = buffer << 24 | stream.getByte() << 16 | stream.getByte() << 8 | stream.getByte();
      const nextByte = stream.getByte();
      this.buffer = nextByte & (1 << bufferLength) - 1;
      return (buffer << 8 - bufferLength | (nextByte & 0xff) >> bufferLength) >>> 0;
    }
    if (n === 8 && bufferLength === 0) {
      return stream.getByte();
    }
    while (bufferLength < n) {
      buffer = buffer << 8 | stream.getByte();
      bufferLength += 8;
    }
    bufferLength -= n;
    this.bufferLength = bufferLength;
    this.buffer = buffer & (1 << bufferLength) - 1;
    return buffer >> bufferLength;
  }
  align() {
    this.buffer = 0;
    this.bufferLength = 0;
  }
  readFlag() {
    return this.readBits(this.context.bitsPerFlag);
  }
  readCoordinate() {
    const {
      bitsPerCoordinate,
      decode
    } = this.context;
    const xi = this.readBits(bitsPerCoordinate);
    const yi = this.readBits(bitsPerCoordinate);
    const scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 2.3283064365386963e-10;
    return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];
  }
  readComponents() {
    const {
      bitsPerComponent,
      colorFn,
      colorSpace,
      decode,
      numComps
    } = this.context;
    const scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 2.3283064365386963e-10;
    const components = this.tmpCompsBuf;
    for (let i = 0, j = 4; i < numComps; i++, j += 2) {
      const ci = this.readBits(bitsPerComponent);
      components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];
    }
    const color = this.tmpCsCompsBuf;
    colorFn?.(components, 0, color, 0);
    return colorSpace.getRgb(color, 0);
  }
}
let bCache = Object.create(null);
function buildB(count) {
  const lut = [];
  for (let i = 0; i <= count; i++) {
    const t = i / count,
      t_ = 1 - t;
    lut.push(new Float32Array([t_ ** 3, 3 * t * t_ ** 2, 3 * t ** 2 * t_, t ** 3]));
  }
  return lut;
}
function getB(count) {
  return bCache[count] ||= buildB(count);
}
function clearPatternCaches() {
  bCache = Object.create(null);
}
class MeshShading extends BaseShading {
  static MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;
  static MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;
  static TRIANGLE_DENSITY = 20;
  constructor(stream, xref, resources, pdfFunctionFactory, globalColorSpaceCache, localColorSpaceCache) {
    super();
    if (!(stream instanceof BaseStream)) {
      throw new FormatError("Mesh data is not a stream");
    }
    const dict = stream.dict;
    this.shadingType = dict.get("ShadingType");
    this.bbox = lookupNormalRect(dict.getArray("BBox"), null);
    const cs = ColorSpaceUtils.parse({
      cs: dict.getRaw("CS") || dict.getRaw("ColorSpace"),
      xref,
      resources,
      pdfFunctionFactory,
      globalColorSpaceCache,
      localColorSpaceCache
    });
    this.background = dict.has("Background") ? cs.getRgb(dict.get("Background"), 0) : null;
    const fnObj = dict.getRaw("Function");
    const fn = fnObj ? pdfFunctionFactory.create(fnObj, true) : null;
    this.coords = [];
    this.colors = [];
    this.figures = [];
    const decodeContext = {
      bitsPerCoordinate: dict.get("BitsPerCoordinate"),
      bitsPerComponent: dict.get("BitsPerComponent"),
      bitsPerFlag: dict.get("BitsPerFlag"),
      decode: dict.getArray("Decode"),
      colorFn: fn,
      colorSpace: cs,
      numComps: fn ? 1 : cs.numComps
    };
    const reader = new MeshStreamReader(stream, decodeContext);
    let patchMesh = false;
    switch (this.shadingType) {
      case ShadingType.FREE_FORM_MESH:
        this._decodeType4Shading(reader);
        break;
      case ShadingType.LATTICE_FORM_MESH:
        const verticesPerRow = dict.get("VerticesPerRow") | 0;
        if (verticesPerRow < 2) {
          throw new FormatError("Invalid VerticesPerRow");
        }
        this._decodeType5Shading(reader, verticesPerRow);
        break;
      case ShadingType.COONS_PATCH_MESH:
        this._decodeType6Shading(reader);
        patchMesh = true;
        break;
      case ShadingType.TENSOR_PATCH_MESH:
        this._decodeType7Shading(reader);
        patchMesh = true;
        break;
      default:
        unreachable("Unsupported mesh type.");
        break;
    }
    if (patchMesh) {
      this._updateBounds();
      for (let i = 0, ii = this.figures.length; i < ii; i++) {
        this._buildFigureFromPatch(i);
      }
    }
    this._updateBounds();
    this._packData();
  }
  _decodeType4Shading(reader) {
    const coords = this.coords;
    const colors = this.colors;
    const operators = [];
    const ps = [];
    let verticesLeft = 0;
    while (reader.hasData) {
      const f = reader.readFlag();
      const coord = reader.readCoordinate();
      const color = reader.readComponents();
      if (verticesLeft === 0) {
        if (!(0 <= f && f <= 2)) {
          throw new FormatError("Unknown type4 flag");
        }
        switch (f) {
          case 0:
            verticesLeft = 3;
            break;
          case 1:
            ps.push(ps.at(-2), ps.at(-1));
            verticesLeft = 1;
            break;
          case 2:
            ps.push(ps.at(-3), ps.at(-1));
            verticesLeft = 1;
            break;
        }
        operators.push(f);
      }
      ps.push(coords.length);
      coords.push(coord);
      colors.push(color);
      verticesLeft--;
      reader.align();
    }
    this.figures.push({
      type: "triangles",
      coords: new Int32Array(ps),
      colors: new Int32Array(ps)
    });
  }
  _decodeType5Shading(reader, verticesPerRow) {
    const coords = this.coords;
    const colors = this.colors;
    const ps = [];
    while (reader.hasData) {
      const coord = reader.readCoordinate();
      const color = reader.readComponents();
      ps.push(coords.length);
      coords.push(coord);
      colors.push(color);
    }
    this.figures.push({
      type: "lattice",
      coords: new Int32Array(ps),
      colors: new Int32Array(ps),
      verticesPerRow
    });
  }
  _decodeType6Shading(reader) {
    const coords = this.coords;
    const colors = this.colors;
    const ps = new Int32Array(16);
    const cs = new Int32Array(4);
    while (reader.hasData) {
      const f = reader.readFlag();
      if (!(0 <= f && f <= 3)) {
        throw new FormatError("Unknown type6 flag");
      }
      const pi = coords.length;
      for (let i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {
        coords.push(reader.readCoordinate());
      }
      const ci = colors.length;
      for (let i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
        colors.push(reader.readComponents());
      }
      let tmp1, tmp2, tmp3, tmp4;
      switch (f) {
        case 0:
          ps[12] = pi + 3;
          ps[13] = pi + 4;
          ps[14] = pi + 5;
          ps[15] = pi + 6;
          ps[8] = pi + 2;
          ps[11] = pi + 7;
          ps[4] = pi + 1;
          ps[7] = pi + 8;
          ps[0] = pi;
          ps[1] = pi + 11;
          ps[2] = pi + 10;
          ps[3] = pi + 9;
          cs[2] = ci + 1;
          cs[3] = ci + 2;
          cs[0] = ci;
          cs[1] = ci + 3;
          break;
        case 1:
          tmp1 = ps[12];
          tmp2 = ps[13];
          tmp3 = ps[14];
          tmp4 = ps[15];
          ps[12] = tmp4;
          ps[13] = pi + 0;
          ps[14] = pi + 1;
          ps[15] = pi + 2;
          ps[8] = tmp3;
          ps[11] = pi + 3;
          ps[4] = tmp2;
          ps[7] = pi + 4;
          ps[0] = tmp1;
          ps[1] = pi + 7;
          ps[2] = pi + 6;
          ps[3] = pi + 5;
          tmp1 = cs[2];
          tmp2 = cs[3];
          cs[2] = tmp2;
          cs[3] = ci;
          cs[0] = tmp1;
          cs[1] = ci + 1;
          break;
        case 2:
          tmp1 = ps[15];
          tmp2 = ps[11];
          ps[12] = ps[3];
          ps[13] = pi + 0;
          ps[14] = pi + 1;
          ps[15] = pi + 2;
          ps[8] = ps[7];
          ps[11] = pi + 3;
          ps[4] = tmp2;
          ps[7] = pi + 4;
          ps[0] = tmp1;
          ps[1] = pi + 7;
          ps[2] = pi + 6;
          ps[3] = pi + 5;
          tmp1 = cs[3];
          cs[2] = cs[1];
          cs[3] = ci;
          cs[0] = tmp1;
          cs[1] = ci + 1;
          break;
        case 3:
          ps[12] = ps[0];
          ps[13] = pi + 0;
          ps[14] = pi + 1;
          ps[15] = pi + 2;
          ps[8] = ps[1];
          ps[11] = pi + 3;
          ps[4] = ps[2];
          ps[7] = pi + 4;
          ps[0] = ps[3];
          ps[1] = pi + 7;
          ps[2] = pi + 6;
          ps[3] = pi + 5;
          cs[2] = cs[0];
          cs[3] = ci;
          cs[0] = cs[1];
          cs[1] = ci + 1;
          break;
      }
      ps[5] = coords.length;
      coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);
      ps[6] = coords.length;
      coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);
      ps[9] = coords.length;
      coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);
      ps[10] = coords.length;
      coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);
      this.figures.push({
        type: "patch",
        coords: new Int32Array(ps),
        colors: new Int32Array(cs)
      });
    }
  }
  _decodeType7Shading(reader) {
    const coords = this.coords;
    const colors = this.colors;
    const ps = new Int32Array(16);
    const cs = new Int32Array(4);
    while (reader.hasData) {
      const f = reader.readFlag();
      if (!(0 <= f && f <= 3)) {
        throw new FormatError("Unknown type7 flag");
      }
      const pi = coords.length;
      for (let i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {
        coords.push(reader.readCoordinate());
      }
      const ci = colors.length;
      for (let i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
        colors.push(reader.readComponents());
      }
      let tmp1, tmp2, tmp3, tmp4;
      switch (f) {
        case 0:
          ps[12] = pi + 3;
          ps[13] = pi + 4;
          ps[14] = pi + 5;
          ps[15] = pi + 6;
          ps[8] = pi + 2;
          ps[9] = pi + 13;
          ps[10] = pi + 14;
          ps[11] = pi + 7;
          ps[4] = pi + 1;
          ps[5] = pi + 12;
          ps[6] = pi + 15;
          ps[7] = pi + 8;
          ps[0] = pi;
          ps[1] = pi + 11;
          ps[2] = pi + 10;
          ps[3] = pi + 9;
          cs[2] = ci + 1;
          cs[3] = ci + 2;
          cs[0] = ci;
          cs[1] = ci + 3;
          break;
        case 1:
          tmp1 = ps[12];
          tmp2 = ps[13];
          tmp3 = ps[14];
          tmp4 = ps[15];
          ps[12] = tmp4;
          ps[13] = pi + 0;
          ps[14] = pi + 1;
          ps[15] = pi + 2;
          ps[8] = tmp3;
          ps[9] = pi + 9;
          ps[10] = pi + 10;
          ps[11] = pi + 3;
          ps[4] = tmp2;
          ps[5] = pi + 8;
          ps[6] = pi + 11;
          ps[7] = pi + 4;
          ps[0] = tmp1;
          ps[1] = pi + 7;
          ps[2] = pi + 6;
          ps[3] = pi + 5;
          tmp1 = cs[2];
          tmp2 = cs[3];
          cs[2] = tmp2;
          cs[3] = ci;
          cs[0] = tmp1;
          cs[1] = ci + 1;
          break;
        case 2:
          tmp1 = ps[15];
          tmp2 = ps[11];
          ps[12] = ps[3];
          ps[13] = pi + 0;
          ps[14] = pi + 1;
          ps[15] = pi + 2;
          ps[8] = ps[7];
          ps[9] = pi + 9;
          ps[10] = pi + 10;
          ps[11] = pi + 3;
          ps[4] = tmp2;
          ps[5] = pi + 8;
          ps[6] = pi + 11;
          ps[7] = pi + 4;
          ps[0] = tmp1;
          ps[1] = pi + 7;
          ps[2] = pi + 6;
          ps[3] = pi + 5;
          tmp1 = cs[3];
          cs[2] = cs[1];
          cs[3] = ci;
          cs[0] = tmp1;
          cs[1] = ci + 1;
          break;
        case 3:
          ps[12] = ps[0];
          ps[13] = pi + 0;
          ps[14] = pi + 1;
          ps[15] = pi + 2;
          ps[8] = ps[1];
          ps[9] = pi + 9;
          ps[10] = pi + 10;
          ps[11] = pi + 3;
          ps[4] = ps[2];
          ps[5] = pi + 8;
          ps[6] = pi + 11;
          ps[7] = pi + 4;
          ps[0] = ps[3];
          ps[1] = pi + 7;
          ps[2] = pi + 6;
          ps[3] = pi + 5;
          cs[2] = cs[0];
          cs[3] = ci;
          cs[0] = cs[1];
          cs[1] = ci + 1;
          break;
      }
      this.figures.push({
        type: "patch",
        coords: new Int32Array(ps),
        colors: new Int32Array(cs)
      });
    }
  }
  _buildFigureFromPatch(index) {
    const figure = this.figures[index];
    assert(figure.type === "patch", "Unexpected patch mesh figure");
    const coords = this.coords,
      colors = this.colors;
    const pi = figure.coords;
    const ci = figure.colors;
    const figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);
    const figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);
    const figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);
    const figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);
    let splitXBy = Math.ceil((figureMaxX - figureMinX) * MeshShading.TRIANGLE_DENSITY / (this.bounds[2] - this.bounds[0]));
    splitXBy = MathClamp(splitXBy, MeshShading.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, MeshShading.MAX_SPLIT_PATCH_CHUNKS_AMOUNT);
    let splitYBy = Math.ceil((figureMaxY - figureMinY) * MeshShading.TRIANGLE_DENSITY / (this.bounds[3] - this.bounds[1]));
    splitYBy = MathClamp(splitYBy, MeshShading.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, MeshShading.MAX_SPLIT_PATCH_CHUNKS_AMOUNT);
    const verticesPerRow = splitXBy + 1;
    const figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);
    const figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);
    let k = 0;
    const cl = new Uint8Array(3),
      cr = new Uint8Array(3);
    const c0 = colors[ci[0]],
      c1 = colors[ci[1]],
      c2 = colors[ci[2]],
      c3 = colors[ci[3]];
    const bRow = getB(splitYBy),
      bCol = getB(splitXBy);
    for (let row = 0; row <= splitYBy; row++) {
      cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;
      cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;
      cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;
      cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;
      cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;
      cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;
      for (let col = 0; col <= splitXBy; col++, k++) {
        if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {
          continue;
        }
        let x = 0,
          y = 0;
        let q = 0;
        for (let i = 0; i <= 3; i++) {
          for (let j = 0; j <= 3; j++, q++) {
            const m = bRow[row][i] * bCol[col][j];
            x += coords[pi[q]][0] * m;
            y += coords[pi[q]][1] * m;
          }
        }
        figureCoords[k] = coords.length;
        coords.push([x, y]);
        figureColors[k] = colors.length;
        const newColor = new Uint8Array(3);
        newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;
        newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;
        newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;
        colors.push(newColor);
      }
    }
    figureCoords[0] = pi[0];
    figureColors[0] = ci[0];
    figureCoords[splitXBy] = pi[3];
    figureColors[splitXBy] = ci[1];
    figureCoords[verticesPerRow * splitYBy] = pi[12];
    figureColors[verticesPerRow * splitYBy] = ci[2];
    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];
    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];
    this.figures[index] = {
      type: "lattice",
      coords: figureCoords,
      colors: figureColors,
      verticesPerRow
    };
  }
  _updateBounds() {
    let minX = this.coords[0][0],
      minY = this.coords[0][1],
      maxX = minX,
      maxY = minY;
    for (let i = 1, ii = this.coords.length; i < ii; i++) {
      const x = this.coords[i][0],
        y = this.coords[i][1];
      minX = minX > x ? x : minX;
      minY = minY > y ? y : minY;
      maxX = maxX < x ? x : maxX;
      maxY = maxY < y ? y : maxY;
    }
    this.bounds = [minX, minY, maxX, maxY];
  }
  _packData() {
    let i, ii, j, jj;
    const coords = this.coords;
    const coordsPacked = new Float32Array(coords.length * 2);
    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {
      const xy = coords[i];
      coordsPacked[j++] = xy[0];
      coordsPacked[j++] = xy[1];
    }
    this.coords = coordsPacked;
    const colors = this.colors;
    const colorsPacked = new Uint8Array(colors.length * 3);
    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {
      const c = colors[i];
      colorsPacked[j++] = c[0];
      colorsPacked[j++] = c[1];
      colorsPacked[j++] = c[2];
    }
    this.colors = colorsPacked;
    const figures = this.figures;
    for (i = 0, ii = figures.length; i < ii; i++) {
      const figure = figures[i],
        ps = figure.coords,
        cs = figure.colors;
      for (j = 0, jj = ps.length; j < jj; j++) {
        ps[j] *= 2;
        cs[j] *= 3;
      }
    }
  }
  getIR() {
    const {
      bounds
    } = this;
    if (bounds[2] - bounds[0] === 0 || bounds[3] - bounds[1] === 0) {
      throw new FormatError(\`Invalid MeshShading bounds: [\${bounds}].\`);
    }
    return ["Mesh", this.shadingType, this.coords, this.colors, this.figures, bounds, this.bbox, this.background];
  }
}
class DummyShading extends BaseShading {
  getIR() {
    return ["Dummy"];
  }
}
function getTilingPatternIR(operatorList, dict, color) {
  const matrix = lookupMatrix(dict.getArray("Matrix"), IDENTITY_MATRIX);
  const bbox = lookupNormalRect(dict.getArray("BBox"), null);
  if (!bbox || bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {
    throw new FormatError(\`Invalid getTilingPatternIR /BBox array.\`);
  }
  const xstep = dict.get("XStep");
  if (typeof xstep !== "number") {
    throw new FormatError(\`Invalid getTilingPatternIR /XStep value.\`);
  }
  const ystep = dict.get("YStep");
  if (typeof ystep !== "number") {
    throw new FormatError(\`Invalid getTilingPatternIR /YStep value.\`);
  }
  const paintType = dict.get("PaintType");
  if (!Number.isInteger(paintType)) {
    throw new FormatError(\`Invalid getTilingPatternIR /PaintType value.\`);
  }
  const tilingType = dict.get("TilingType");
  if (!Number.isInteger(tilingType)) {
    throw new FormatError(\`Invalid getTilingPatternIR /TilingType value.\`);
  }
  return ["TilingPattern", color, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];
}

;// ./src/core/calibri_factors.js
const CalibriBoldFactors = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.54657, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.73293, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.9121, 0.86943, 0.79795, 0.88198, 0.77958, 0.70864, 0.81055, 0.90399, 0.88653, 0.96017, 0.82577, 0.77892, 0.78257, 0.97507, 1.54657, 0.97507, 0.85284, 0.89552, 0.90176, 0.88762, 0.8785, 0.75241, 0.8785, 0.90518, 0.95015, 0.77618, 0.8785, 0.88401, 0.91916, 0.86304, 0.88401, 0.91488, 0.8785, 0.8801, 0.8785, 0.8785, 0.91343, 0.7173, 1.04106, 0.8785, 0.85075, 0.95794, 0.82616, 0.85162, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.12401, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.73293, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.9121, 0.86943, 0.86943, 0.86943, 0.86943, 0.86943, 0.85284, 0.87508, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.8715, 0.75241, 0.90518, 0.90518, 0.90518, 0.90518, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.8785, 0.8801, 0.8801, 0.8801, 0.8801, 0.8801, 0.90747, 0.89049, 0.8785, 0.8785, 0.8785, 0.8785, 0.85162, 0.8785, 0.85162, 0.83908, 0.88762, 0.83908, 0.88762, 0.83908, 0.88762, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.87289, 0.83016, 0.88506, 0.93125, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.81921, 0.77618, 0.81921, 0.77618, 0.81921, 0.77618, 1, 1, 0.87356, 0.8785, 0.91075, 0.89608, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76229, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.79468, 0.91926, 0.88175, 0.70823, 0.94903, 0.9121, 0.8785, 1, 1, 0.9121, 0.8785, 0.87802, 0.88656, 0.8785, 0.86943, 0.8801, 0.86943, 0.8801, 0.86943, 0.8801, 0.87402, 0.89291, 0.77958, 0.91343, 1, 1, 0.77958, 0.91343, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.96017, 0.95794, 0.77892, 0.85162, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.88762, 0.77539, 0.8715, 0.87508, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70674, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.06303, 0.83908, 0.80352, 0.57184, 0.6965, 0.56289, 0.82001, 0.56029, 0.81235, 1.02988, 0.83908, 0.7762, 0.68156, 0.80367, 0.73133, 0.78257, 0.87356, 0.86943, 0.95958, 0.75727, 0.89019, 1.04924, 0.9121, 0.7648, 0.86943, 0.87356, 0.79795, 0.78275, 0.81055, 0.77892, 0.9762, 0.82577, 0.99819, 0.84896, 0.95958, 0.77892, 0.96108, 1.01407, 0.89049, 1.02988, 0.94211, 0.96108, 0.8936, 0.84021, 0.87842, 0.96399, 0.79109, 0.89049, 1.00813, 1.02988, 0.86077, 0.87445, 0.92099, 0.84723, 0.86513, 0.8801, 0.75638, 0.85714, 0.78216, 0.79586, 0.87965, 0.94211, 0.97747, 0.78287, 0.97926, 0.84971, 1.02988, 0.94211, 0.8801, 0.94211, 0.84971, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90264, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90518, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90548, 1, 1, 1, 1, 1, 1, 0.96017, 0.95794, 0.96017, 0.95794, 0.96017, 0.95794, 0.77892, 0.85162, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.92794, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71143, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.93835, 0.83406, 0.91133, 0.84107, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90527, 1.81055, 0.90527, 1.81055, 1.31006, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const CalibriBoldMetrics = {
  lineHeight: 1.2207,
  lineGap: 0.2207
};
const CalibriBoldItalicFactors = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.56239, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.71805, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.90872, 0.85938, 0.79795, 0.87068, 0.77958, 0.69766, 0.81055, 0.90399, 0.88653, 0.96068, 0.82577, 0.77892, 0.78257, 0.97507, 1.529, 0.97507, 0.85284, 0.89552, 0.90176, 0.94908, 0.86411, 0.74012, 0.86411, 0.88323, 0.95015, 0.86411, 0.86331, 0.88401, 0.91916, 0.86304, 0.88401, 0.9039, 0.86331, 0.86331, 0.86411, 0.86411, 0.90464, 0.70852, 1.04106, 0.86331, 0.84372, 0.95794, 0.82616, 0.84548, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.19129, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.71805, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.90872, 0.85938, 0.85938, 0.85938, 0.85938, 0.85938, 0.85284, 0.87068, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.85887, 0.74012, 0.88323, 0.88323, 0.88323, 0.88323, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.90747, 0.89049, 0.86331, 0.86331, 0.86331, 0.86331, 0.84548, 0.86411, 0.84548, 0.83908, 0.94908, 0.83908, 0.94908, 0.83908, 0.94908, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.87289, 0.79538, 0.88506, 0.92726, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.81921, 0.86411, 0.81921, 0.86411, 0.81921, 0.86411, 1, 1, 0.87356, 0.86331, 0.91075, 0.8777, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76467, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.77312, 0.91926, 0.88175, 0.70823, 0.94903, 0.90872, 0.86331, 1, 1, 0.90872, 0.86331, 0.86906, 0.88116, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.87402, 0.86549, 0.77958, 0.90464, 1, 1, 0.77958, 0.90464, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.96068, 0.95794, 0.77892, 0.84548, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.94908, 0.77539, 0.85887, 0.87068, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70088, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.48387, 0.83908, 0.80352, 0.57118, 0.6965, 0.56347, 0.79179, 0.55853, 0.80346, 1.02988, 0.83908, 0.7762, 0.67174, 0.86036, 0.73133, 0.78257, 0.87356, 0.86441, 0.95958, 0.75727, 0.89019, 1.04924, 0.90872, 0.74889, 0.85938, 0.87891, 0.79795, 0.7957, 0.81055, 0.77892, 0.97447, 0.82577, 0.97466, 0.87179, 0.95958, 0.77892, 0.94252, 0.95612, 0.8753, 1.02988, 0.92733, 0.94252, 0.87411, 0.84021, 0.8728, 0.95612, 0.74081, 0.8753, 1.02189, 1.02988, 0.84814, 0.87445, 0.91822, 0.84723, 0.85668, 0.86331, 0.81344, 0.87581, 0.76422, 0.82046, 0.96057, 0.92733, 0.99375, 0.78022, 0.95452, 0.86015, 1.02988, 0.92733, 0.86331, 0.92733, 0.86015, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90631, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88323, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85174, 1, 1, 1, 1, 1, 1, 0.96068, 0.95794, 0.96068, 0.95794, 0.96068, 0.95794, 0.77892, 0.84548, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.89807, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71094, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.92972, 0.83406, 0.91133, 0.83326, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90616, 1.81055, 0.90527, 1.81055, 1.3107, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const CalibriBoldItalicMetrics = {
  lineHeight: 1.2207,
  lineGap: 0.2207
};
const CalibriItalicFactors = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39543, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.72346, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89249, 0.84118, 0.77452, 0.85374, 0.75186, 0.67789, 0.79776, 0.88844, 0.85066, 0.94309, 0.77818, 0.7306, 0.76659, 1.10369, 1.38313, 1.10369, 1.06139, 0.89552, 0.8739, 0.9245, 0.9245, 0.83203, 0.9245, 0.85865, 1.09842, 0.9245, 0.9245, 1.03297, 1.07692, 0.90918, 1.03297, 0.94959, 0.9245, 0.92274, 0.9245, 0.9245, 1.02933, 0.77832, 1.20562, 0.9245, 0.8916, 0.98986, 0.86621, 0.89453, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.16359, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.72346, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89249, 0.84118, 0.84118, 0.84118, 0.84118, 0.84118, 0.85284, 0.84557, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.84843, 0.83203, 0.85865, 0.85865, 0.85865, 0.85865, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.9245, 0.92274, 0.92274, 0.92274, 0.92274, 0.92274, 0.90747, 0.86651, 0.9245, 0.9245, 0.9245, 0.9245, 0.89453, 0.9245, 0.89453, 0.8675, 0.9245, 0.8675, 0.9245, 0.8675, 0.9245, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.85193, 0.8875, 0.86477, 0.99034, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.81105, 0.9245, 0.81105, 0.9245, 0.81105, 0.9245, 1, 1, 0.86275, 0.9245, 0.90872, 0.93591, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77896, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.9375, 0.98156, 0.93407, 0.77261, 1.11429, 0.89249, 0.9245, 1, 1, 0.89249, 0.9245, 0.92534, 0.86698, 0.9245, 0.84118, 0.92274, 0.84118, 0.92274, 0.84118, 0.92274, 0.8667, 0.86291, 0.75186, 1.02933, 1, 1, 0.75186, 1.02933, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 1, 1, 0.79776, 0.97655, 0.79776, 1.23023, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.94309, 0.98986, 0.7306, 0.89453, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.9245, 0.76318, 0.84843, 0.84557, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67009, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.8675, 0.90861, 0.6192, 0.7363, 0.64824, 0.82411, 0.56321, 0.85696, 1.23516, 0.8675, 0.81552, 0.7286, 0.84134, 0.73206, 0.76659, 0.86275, 0.84369, 0.90685, 0.77892, 0.85871, 1.02638, 0.89249, 0.75828, 0.84118, 0.85984, 0.77452, 0.76466, 0.79776, 0.7306, 0.90782, 0.77818, 0.903, 0.87291, 0.90685, 0.7306, 0.99058, 1.03667, 0.94635, 1.23516, 0.9849, 0.99058, 0.92393, 0.8916, 0.942, 1.03667, 0.75026, 0.94635, 1.0297, 1.23516, 0.90918, 0.94048, 0.98217, 0.89746, 0.84153, 0.92274, 0.82507, 0.88832, 0.84438, 0.88178, 1.03525, 0.9849, 1.00225, 0.78086, 0.97248, 0.89404, 1.23516, 0.9849, 0.92274, 0.9849, 0.89404, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89693, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85865, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90933, 1, 1, 1, 1, 1, 1, 0.94309, 0.98986, 0.94309, 0.98986, 0.94309, 0.98986, 0.7306, 0.89453, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.68994, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.97858, 0.82616, 0.91133, 0.83437, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90572, 1.81055, 0.90749, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85284, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const CalibriItalicMetrics = {
  lineHeight: 1.2207,
  lineGap: 0.2207
};
const CalibriRegularFactors = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39016, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.73834, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89385, 0.85122, 0.77452, 0.86503, 0.75186, 0.68887, 0.79776, 0.88844, 0.85066, 0.94258, 0.77818, 0.7306, 0.76659, 1.10369, 1.39016, 1.10369, 1.06139, 0.89552, 0.8739, 0.86128, 0.94469, 0.8457, 0.94469, 0.89464, 1.09842, 0.84636, 0.94469, 1.03297, 1.07692, 0.90918, 1.03297, 0.95897, 0.94469, 0.9482, 0.94469, 0.94469, 1.04692, 0.78223, 1.20562, 0.94469, 0.90332, 0.98986, 0.86621, 0.90527, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.08707, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.73834, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89385, 0.85122, 0.85122, 0.85122, 0.85122, 0.85122, 0.85284, 0.85311, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.8693, 0.8457, 0.89464, 0.89464, 0.89464, 0.89464, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.94469, 0.9482, 0.9482, 0.9482, 0.9482, 0.9482, 0.90747, 0.86651, 0.94469, 0.94469, 0.94469, 0.94469, 0.90527, 0.94469, 0.90527, 0.8675, 0.86128, 0.8675, 0.86128, 0.8675, 0.86128, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.85193, 0.92454, 0.86477, 0.9921, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.81105, 0.84636, 0.81105, 0.84636, 0.81105, 0.84636, 1, 1, 0.86275, 0.94469, 0.90872, 0.95786, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77741, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.90452, 0.98156, 1.11842, 0.77261, 1.11429, 0.89385, 0.94469, 1, 1, 0.89385, 0.94469, 0.95877, 0.86901, 0.94469, 0.85122, 0.9482, 0.85122, 0.9482, 0.85122, 0.9482, 0.8667, 0.90016, 0.75186, 1.04692, 1, 1, 0.75186, 1.04692, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 1, 1, 0.79776, 0.92188, 0.79776, 1.23023, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.94258, 0.98986, 0.7306, 0.90527, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.86128, 0.76318, 0.8693, 0.85311, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67742, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.86686, 0.90861, 0.62267, 0.74359, 0.65649, 0.85498, 0.56963, 0.88254, 1.23516, 0.8675, 0.81552, 0.75443, 0.84503, 0.73206, 0.76659, 0.86275, 0.85122, 0.90685, 0.77892, 0.85746, 1.02638, 0.89385, 0.75657, 0.85122, 0.86275, 0.77452, 0.74171, 0.79776, 0.7306, 0.95165, 0.77818, 0.89772, 0.88831, 0.90685, 0.7306, 0.98142, 1.02191, 0.96576, 1.23516, 0.99018, 0.98142, 0.9236, 0.89258, 0.94035, 1.02191, 0.78848, 0.96576, 0.9561, 1.23516, 0.90918, 0.92578, 0.95424, 0.89746, 0.83969, 0.9482, 0.80113, 0.89442, 0.85208, 0.86155, 0.98022, 0.99018, 1.00452, 0.81209, 0.99247, 0.89181, 1.23516, 0.99018, 0.9482, 0.99018, 0.89181, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88844, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89464, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96766, 1, 1, 1, 1, 1, 1, 0.94258, 0.98986, 0.94258, 0.98986, 0.94258, 0.98986, 0.7306, 0.90527, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.69043, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.99331, 0.82616, 0.91133, 0.84286, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90527, 1.81055, 0.90527, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1.07185, 0.99413, 0.96334, 1.08065, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const CalibriRegularMetrics = {
  lineHeight: 1.2207,
  lineGap: 0.2207
};

;// ./src/core/helvetica_factors.js
const HelveticaBoldFactors = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.03374, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.00042, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.03828, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00034, 0.99977, 1, 0.99997, 1.00026, 1.00078, 1.00036, 0.99973, 1.00013, 1.0006, 0.99977, 0.99977, 0.99988, 0.85148, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 1.00069, 1.00022, 0.99977, 1.00001, 0.99984, 1.00026, 1.00001, 1.00024, 1.00001, 0.9999, 1, 1.0006, 1.00001, 1.00041, 0.99962, 1.00026, 1.0006, 0.99995, 1.00041, 0.99942, 0.99973, 0.99927, 1.00082, 0.99902, 1.00026, 1.00087, 1.0006, 1.00069, 0.99973, 0.99867, 0.99973, 0.9993, 1.00026, 1.00049, 1.00056, 1, 0.99988, 0.99935, 0.99995, 0.99954, 1.00055, 0.99945, 1.00032, 1.0006, 0.99995, 1.00026, 0.99995, 1.00032, 1.00001, 1.00008, 0.99971, 1.00019, 0.9994, 1.00001, 1.0006, 1.00044, 0.99973, 1.00023, 1.00047, 1, 0.99942, 0.99561, 0.99989, 1.00035, 0.99977, 1.00035, 0.99977, 1.00019, 0.99944, 1.00001, 1.00021, 0.99926, 1.00035, 1.00035, 0.99942, 1.00048, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.99989, 1.00057, 1.00001, 0.99936, 1.00052, 1.00012, 0.99996, 1.00043, 1, 1.00035, 0.9994, 0.99976, 1.00035, 0.99973, 1.00052, 1.00041, 1.00119, 1.00037, 0.99973, 1.00002, 0.99986, 1.00041, 1.00041, 0.99902, 0.9996, 1.00034, 0.99999, 1.00026, 0.99999, 1.00026, 0.99973, 1.00052, 0.99973, 1, 0.99973, 1.00041, 1.00075, 0.9994, 1.0003, 0.99999, 1, 1.00041, 0.99955, 1, 0.99915, 0.99973, 0.99973, 1.00026, 1.00119, 0.99955, 0.99973, 1.0006, 0.99911, 1.0006, 1.00026, 0.99972, 1.00026, 0.99902, 1.00041, 0.99973, 0.99999, 1, 1, 1.00038, 1.0005, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 1.00047, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const HelveticaBoldMetrics = {
  lineHeight: 1.2,
  lineGap: 0.2
};
const HelveticaBoldItalicFactors = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.0044, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99971, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.01011, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99977, 1, 1, 1.00026, 0.99969, 0.99972, 0.99981, 0.9998, 1.0006, 0.99977, 0.99977, 1.00022, 0.91155, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 0.99966, 1.00022, 1.00032, 1.00001, 0.99944, 1.00026, 1.00001, 0.99968, 1.00001, 1.00047, 1, 1.0006, 1.00001, 0.99981, 1.00101, 1.00026, 1.0006, 0.99948, 0.99981, 1.00064, 0.99973, 0.99942, 1.00101, 1.00061, 1.00026, 1.00069, 1.0006, 1.00014, 0.99973, 1.01322, 0.99973, 1.00065, 1.00026, 1.00012, 0.99923, 1, 1.00064, 1.00076, 0.99948, 1.00055, 1.00063, 1.00007, 0.99943, 1.0006, 0.99948, 1.00026, 0.99948, 0.99943, 1.00001, 1.00001, 1.00029, 1.00038, 1.00035, 1.00001, 1.0006, 1.0006, 0.99973, 0.99978, 1.00001, 1.00057, 0.99989, 0.99967, 0.99964, 0.99967, 0.99977, 0.99999, 0.99977, 1.00038, 0.99977, 1.00001, 0.99973, 1.00066, 0.99967, 0.99967, 1.00041, 0.99998, 0.99999, 0.99977, 1.00022, 0.99967, 1.00001, 0.99977, 1.00026, 0.99964, 1.00031, 1.00001, 0.99999, 0.99999, 1, 1.00023, 1, 1, 0.99999, 1.00035, 1.00001, 0.99999, 0.99973, 0.99977, 0.99999, 1.00058, 0.99973, 0.99973, 0.99955, 0.9995, 1.00026, 1.00026, 1.00032, 0.99989, 1.00034, 0.99999, 1.00026, 1.00026, 1.00026, 0.99973, 0.45998, 0.99973, 1.00026, 0.99973, 1.00001, 0.99999, 0.99982, 0.99994, 0.99996, 1, 1.00042, 1.00044, 1.00029, 1.00023, 0.99973, 0.99973, 1.00026, 0.99949, 1.00002, 0.99973, 1.0006, 1.0006, 1.0006, 0.99975, 1.00026, 1.00026, 1.00032, 0.98685, 0.99973, 1.00026, 1, 1, 0.99966, 1.00044, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1, 0.99973, 0.99971, 0.99978, 1, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00098, 1, 1, 1, 1.00049, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const HelveticaBoldItalicMetrics = {
  lineHeight: 1.35,
  lineGap: 0.2
};
const HelveticaItalicFactors = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.0288, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 0.99946, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.06311, 0.99973, 1.00024, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00041, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.89547, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00001, 1, 1.00054, 0.99977, 1.00084, 1.00007, 0.99973, 1.00013, 0.99924, 1.00001, 1.00001, 0.99945, 0.91221, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00001, 0.99999, 0.99977, 0.99933, 1.00022, 1.00054, 1.00001, 1.00065, 1.00026, 1.00001, 1.0001, 1.00001, 1.00052, 1, 1.0006, 1.00001, 0.99945, 0.99897, 0.99968, 0.99924, 1.00036, 0.99945, 0.99949, 1, 1.0006, 0.99897, 0.99918, 0.99968, 0.99911, 0.99924, 1, 0.99962, 1.01487, 1, 1.0005, 0.99973, 1.00012, 1.00043, 1, 0.99995, 0.99994, 1.00036, 0.99947, 1.00019, 1.00063, 1.00025, 0.99924, 1.00036, 0.99973, 1.00036, 1.00025, 1.00001, 1.00001, 1.00027, 1.0001, 1.00068, 1.00001, 1.0006, 1.0006, 1, 1.00008, 0.99957, 0.99972, 0.9994, 0.99954, 0.99975, 1.00051, 1.00001, 1.00019, 1.00001, 1.0001, 0.99986, 1.00001, 1.00001, 1.00038, 0.99954, 0.99954, 0.9994, 1.00066, 0.99999, 0.99977, 1.00022, 1.00054, 1.00001, 0.99977, 1.00026, 0.99975, 1.0001, 1.00001, 0.99993, 0.9995, 0.99955, 1.00016, 0.99978, 0.99974, 1.00019, 1.00022, 0.99955, 1.00053, 0.99973, 1.00089, 1.00005, 0.99967, 1.00048, 0.99973, 1.00002, 1.00034, 0.99973, 0.99973, 0.99964, 1.00006, 1.00066, 0.99947, 0.99973, 0.98894, 0.99973, 1, 0.44898, 1, 0.99946, 1, 1.00039, 1.00082, 0.99991, 0.99991, 0.99985, 1.00022, 1.00023, 1.00061, 1.00006, 0.99966, 0.99973, 0.99973, 0.99973, 1.00019, 1.0008, 1, 0.99924, 0.99924, 0.99924, 0.99983, 1.00044, 0.99973, 0.99964, 0.98332, 1, 0.99973, 1, 1, 0.99962, 0.99895, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 1.00423, 0.99925, 0.99999, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00049, 1, 1.00245, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 1.00003, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const HelveticaItalicMetrics = {
  lineHeight: 1.35,
  lineGap: 0.2
};
const HelveticaRegularFactors = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.04596, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 1.00019, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.02572, 0.99973, 1.00005, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99999, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.84533, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99928, 1, 0.99977, 1.00013, 1.00055, 0.99947, 0.99945, 0.99941, 0.99924, 1.00001, 1.00001, 1.0004, 0.91621, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00005, 0.99999, 0.99977, 1.00015, 1.00022, 0.99977, 1.00001, 0.99973, 1.00026, 1.00001, 1.00019, 1.00001, 0.99946, 1, 1.0006, 1.00001, 0.99978, 1.00045, 0.99973, 0.99924, 1.00023, 0.99978, 0.99966, 1, 1.00065, 1.00045, 1.00019, 0.99973, 0.99973, 0.99924, 1, 1, 0.96499, 1, 1.00055, 0.99973, 1.00008, 1.00027, 1, 0.9997, 0.99995, 1.00023, 0.99933, 1.00019, 1.00015, 1.00031, 0.99924, 1.00023, 0.99973, 1.00023, 1.00031, 1.00001, 0.99928, 1.00029, 1.00092, 1.00035, 1.00001, 1.0006, 1.0006, 1, 0.99988, 0.99975, 1, 1.00082, 0.99561, 0.9996, 1.00035, 1.00001, 0.99962, 1.00001, 1.00092, 0.99964, 1.00001, 0.99963, 0.99999, 1.00035, 1.00035, 1.00082, 0.99962, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.9996, 0.99967, 1.00001, 1.00034, 1.00074, 1.00054, 1.00053, 1.00063, 0.99971, 0.99962, 1.00035, 0.99975, 0.99977, 0.99973, 1.00043, 0.99953, 1.0007, 0.99915, 0.99973, 1.00008, 0.99892, 1.00073, 1.00073, 1.00114, 0.99915, 1.00073, 0.99955, 0.99973, 1.00092, 0.99973, 1, 0.99998, 1, 1.0003, 1, 1.00043, 1.00001, 0.99969, 1.0003, 1, 1.00035, 1.00001, 0.9995, 1, 1.00092, 0.99973, 0.99973, 0.99973, 1.0007, 0.9995, 1, 0.99924, 1.0006, 0.99924, 0.99972, 1.00062, 0.99973, 1.00114, 1.00073, 1, 0.99955, 1, 1, 1.00047, 0.99968, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 0.99925, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const HelveticaRegularMetrics = {
  lineHeight: 1.2,
  lineGap: 0.2
};

;// ./src/core/liberationsans_widths.js
const LiberationSansBoldWidths = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 719, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 785, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 385, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1000, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1000, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 465, 722, 333, 853, 906, 474, 825, 927, 838, 278, 722, 722, 601, 719, 667, 611, 722, 778, 278, 722, 667, 833, 722, 644, 778, 722, 667, 600, 611, 667, 821, 667, 809, 802, 278, 667, 615, 451, 611, 278, 582, 615, 610, 556, 606, 475, 460, 611, 541, 278, 558, 556, 612, 556, 445, 611, 766, 619, 520, 684, 446, 582, 715, 576, 753, 845, 278, 582, 611, 582, 845, 667, 669, 885, 567, 711, 667, 278, 276, 556, 1094, 1062, 875, 610, 722, 622, 719, 722, 719, 722, 567, 712, 667, 904, 626, 719, 719, 610, 702, 833, 722, 778, 719, 667, 722, 611, 622, 854, 667, 730, 703, 1005, 1019, 870, 979, 719, 711, 1031, 719, 556, 618, 615, 417, 635, 556, 709, 497, 615, 615, 500, 635, 740, 604, 611, 604, 611, 556, 490, 556, 875, 556, 615, 581, 833, 844, 729, 854, 615, 552, 854, 583, 556, 556, 611, 417, 552, 556, 278, 281, 278, 969, 906, 611, 500, 615, 556, 604, 778, 611, 487, 447, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1000, 1000, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1000, 1000, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1094, 556, 885, 489, 1115, 1000, 768, 600, 834, 834, 834, 834, 1000, 500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333];
const LiberationSansBoldMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
const LiberationSansBoldItalicWidths = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 740, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 782, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 396, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1000, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1000, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 722, 333, 854, 906, 473, 844, 930, 847, 278, 722, 722, 610, 671, 667, 611, 722, 778, 278, 722, 667, 833, 722, 657, 778, 718, 667, 590, 611, 667, 822, 667, 829, 781, 278, 667, 620, 479, 611, 278, 591, 620, 621, 556, 610, 479, 492, 611, 558, 278, 566, 556, 603, 556, 450, 611, 712, 605, 532, 664, 409, 591, 704, 578, 773, 834, 278, 591, 611, 591, 834, 667, 667, 886, 614, 719, 667, 278, 278, 556, 1094, 1042, 854, 622, 719, 677, 719, 722, 708, 722, 614, 722, 667, 927, 643, 719, 719, 615, 687, 833, 722, 778, 719, 667, 722, 611, 677, 781, 667, 729, 708, 979, 989, 854, 1000, 708, 719, 1042, 729, 556, 619, 604, 534, 618, 556, 736, 510, 611, 611, 507, 622, 740, 604, 611, 611, 611, 556, 889, 556, 885, 556, 646, 583, 889, 935, 707, 854, 594, 552, 865, 589, 556, 556, 611, 469, 563, 556, 278, 278, 278, 969, 906, 611, 507, 619, 556, 611, 778, 611, 575, 467, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1000, 1000, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1000, 1000, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1104, 556, 885, 516, 1146, 1000, 768, 600, 834, 834, 834, 834, 999, 500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333];
const LiberationSansBoldItalicMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
const LiberationSansItalicWidths = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 625, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 733, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 281, 556, 400, 556, 222, 722, 556, 722, 556, 722, 556, 615, 723, 556, 778, 556, 778, 556, 778, 556, 1000, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 354, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1000, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 789, 846, 389, 794, 865, 775, 222, 667, 667, 570, 671, 667, 611, 722, 778, 278, 667, 667, 833, 722, 648, 778, 725, 667, 600, 611, 667, 837, 667, 831, 761, 278, 667, 570, 439, 555, 222, 550, 570, 571, 500, 556, 439, 463, 555, 542, 222, 500, 492, 548, 500, 447, 556, 670, 573, 486, 603, 374, 550, 652, 546, 728, 779, 222, 550, 556, 550, 779, 667, 667, 843, 544, 708, 667, 278, 278, 500, 1066, 982, 844, 589, 715, 639, 724, 667, 651, 667, 544, 704, 667, 917, 614, 715, 715, 589, 686, 833, 722, 778, 725, 667, 722, 611, 639, 795, 667, 727, 673, 920, 923, 805, 886, 651, 694, 1022, 682, 556, 562, 522, 493, 553, 556, 688, 465, 556, 556, 472, 564, 686, 550, 556, 556, 556, 500, 833, 500, 835, 500, 572, 518, 830, 851, 621, 736, 526, 492, 752, 534, 556, 556, 556, 378, 496, 500, 222, 222, 222, 910, 828, 556, 472, 565, 500, 556, 778, 556, 492, 339, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1000, 1000, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1000, 1000, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1083, 1000, 768, 600, 834, 834, 834, 834, 1000, 500, 998, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 584, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285];
const LiberationSansItalicMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
const LiberationSansRegularWidths = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 615, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 735, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 292, 556, 334, 556, 222, 722, 556, 722, 556, 722, 556, 604, 723, 556, 778, 556, 778, 556, 778, 556, 1000, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 375, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1000, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 784, 838, 384, 774, 855, 752, 222, 667, 667, 551, 668, 667, 611, 722, 778, 278, 667, 668, 833, 722, 650, 778, 722, 667, 618, 611, 667, 798, 667, 835, 748, 278, 667, 578, 446, 556, 222, 547, 578, 575, 500, 557, 446, 441, 556, 556, 222, 500, 500, 576, 500, 448, 556, 690, 569, 482, 617, 395, 547, 648, 525, 713, 781, 222, 547, 556, 547, 781, 667, 667, 865, 542, 719, 667, 278, 278, 500, 1057, 1010, 854, 583, 722, 635, 719, 667, 656, 667, 542, 677, 667, 923, 604, 719, 719, 583, 656, 833, 722, 778, 719, 667, 722, 611, 635, 760, 667, 740, 667, 917, 938, 792, 885, 656, 719, 1010, 722, 556, 573, 531, 365, 583, 556, 669, 458, 559, 559, 438, 583, 688, 552, 556, 542, 556, 500, 458, 500, 823, 500, 573, 521, 802, 823, 625, 719, 521, 510, 750, 542, 556, 556, 556, 365, 510, 500, 222, 278, 222, 906, 812, 556, 438, 559, 500, 552, 778, 556, 489, 411, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1000, 1000, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1000, 1000, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1073, 1000, 768, 600, 834, 834, 834, 834, 1000, 500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285];
const LiberationSansRegularMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];

;// ./src/core/myriadpro_factors.js
const MyriadProBoldFactors = [1.36898, 1, 1, 0.72706, 0.80479, 0.83734, 0.98894, 0.99793, 0.9897, 0.93884, 0.86209, 0.94292, 0.94292, 1.16661, 1.02058, 0.93582, 0.96694, 0.93582, 1.19137, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.72851, 0.78966, 0.90838, 0.83637, 0.82391, 0.96376, 0.80061, 0.86275, 0.8768, 0.95407, 1.0258, 0.73901, 0.85022, 0.83655, 1.0156, 0.95546, 0.92179, 0.87107, 0.92179, 0.82114, 0.8096, 0.89713, 0.94438, 0.95353, 0.94083, 0.91905, 0.90406, 0.9446, 0.94292, 1.18777, 0.94292, 1.02058, 0.89903, 0.90088, 0.94938, 0.97898, 0.81093, 0.97571, 0.94938, 1.024, 0.9577, 0.95933, 0.98621, 1.0474, 0.97455, 0.98981, 0.9672, 0.95933, 0.9446, 0.97898, 0.97407, 0.97646, 0.78036, 1.10208, 0.95442, 0.95298, 0.97579, 0.9332, 0.94039, 0.938, 0.80687, 1.01149, 0.80687, 1.02058, 0.80479, 0.99793, 0.99793, 0.99793, 0.99793, 1.01149, 1.00872, 0.90088, 0.91882, 1.0213, 0.8361, 1.02058, 0.62295, 0.54324, 0.89022, 1.08595, 1, 1, 0.90088, 1, 0.97455, 0.93582, 0.90088, 1, 1.05686, 0.8361, 0.99642, 0.99642, 0.99642, 0.72851, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.868, 0.82391, 0.80061, 0.80061, 0.80061, 0.80061, 1.0258, 1.0258, 1.0258, 1.0258, 0.97484, 0.95546, 0.92179, 0.92179, 0.92179, 0.92179, 0.92179, 1.02058, 0.92179, 0.94438, 0.94438, 0.94438, 0.94438, 0.90406, 0.86958, 0.98225, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.9031, 0.81093, 0.94938, 0.94938, 0.94938, 0.94938, 0.98621, 0.98621, 0.98621, 0.98621, 0.93969, 0.95933, 0.9446, 0.9446, 0.9446, 0.9446, 0.9446, 1.08595, 0.9446, 0.95442, 0.95442, 0.95442, 0.95442, 0.94039, 0.97898, 0.94039, 0.90838, 0.94938, 0.90838, 0.94938, 0.90838, 0.94938, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.96376, 0.84313, 0.97484, 0.97571, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.8768, 0.9577, 0.8768, 0.9577, 0.8768, 0.9577, 1, 1, 0.95407, 0.95933, 0.97069, 0.95933, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 0.887, 1.01591, 0.73901, 1.0474, 1, 1, 0.97455, 0.83655, 0.98981, 1, 1, 0.83655, 0.73977, 0.83655, 0.73903, 0.84638, 1.033, 0.95546, 0.95933, 1, 1, 0.95546, 0.95933, 0.8271, 0.95417, 0.95933, 0.92179, 0.9446, 0.92179, 0.9446, 0.92179, 0.9446, 0.936, 0.91964, 0.82114, 0.97646, 1, 1, 0.82114, 0.97646, 0.8096, 0.78036, 0.8096, 0.78036, 1, 1, 0.8096, 0.78036, 1, 1, 0.89713, 0.77452, 0.89713, 1.10208, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94083, 0.97579, 0.90406, 0.94039, 0.90406, 0.9446, 0.938, 0.9446, 0.938, 0.9446, 0.938, 1, 0.99793, 0.90838, 0.94938, 0.868, 0.9031, 0.92179, 0.9446, 1, 1, 0.89713, 1.10208, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90989, 0.9358, 0.91945, 0.83181, 0.75261, 0.87992, 0.82976, 0.96034, 0.83689, 0.97268, 1.0078, 0.90838, 0.83637, 0.8019, 0.90157, 0.80061, 0.9446, 0.95407, 0.92436, 1.0258, 0.85022, 0.97153, 1.0156, 0.95546, 0.89192, 0.92179, 0.92361, 0.87107, 0.96318, 0.89713, 0.93704, 0.95638, 0.91905, 0.91709, 0.92796, 1.0258, 0.93704, 0.94836, 1.0373, 0.95933, 1.0078, 0.95871, 0.94836, 0.96174, 0.92601, 0.9498, 0.98607, 0.95776, 0.95933, 1.05453, 1.0078, 0.98275, 0.9314, 0.95617, 0.91701, 1.05993, 0.9446, 0.78367, 0.9553, 1, 0.86832, 1.0128, 0.95871, 0.99394, 0.87548, 0.96361, 0.86774, 1.0078, 0.95871, 0.9446, 0.95871, 0.86774, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.94083, 0.97579, 0.94083, 0.97579, 0.94083, 0.97579, 0.90406, 0.94039, 0.96694, 1, 0.89903, 1, 1, 1, 0.93582, 0.93582, 0.93582, 1, 0.908, 0.908, 0.918, 0.94219, 0.94219, 0.96544, 1, 1.285, 1, 1, 0.81079, 0.81079, 1, 1, 0.74854, 1, 1, 1, 1, 0.99793, 1, 1, 1, 0.65, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.17173, 1, 0.80535, 0.76169, 1.02058, 1.0732, 1.05486, 1, 1, 1.30692, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.16161, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const MyriadProBoldMetrics = {
  lineHeight: 1.2,
  lineGap: 0.2
};
const MyriadProBoldItalicFactors = [1.36898, 1, 1, 0.66227, 0.80779, 0.81625, 0.97276, 0.97276, 0.97733, 0.92222, 0.83266, 0.94292, 0.94292, 1.16148, 1.02058, 0.93582, 0.96694, 0.93582, 1.17337, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.71541, 0.76813, 0.85576, 0.80591, 0.80729, 0.94299, 0.77512, 0.83655, 0.86523, 0.92222, 0.98621, 0.71743, 0.81698, 0.79726, 0.98558, 0.92222, 0.90637, 0.83809, 0.90637, 0.80729, 0.76463, 0.86275, 0.90699, 0.91605, 0.9154, 0.85308, 0.85458, 0.90531, 0.94292, 1.21296, 0.94292, 1.02058, 0.89903, 1.18616, 0.99613, 0.91677, 0.78216, 0.91677, 0.90083, 0.98796, 0.9135, 0.92168, 0.95381, 0.98981, 0.95298, 0.95381, 0.93459, 0.92168, 0.91513, 0.92004, 0.91677, 0.95077, 0.748, 1.04502, 0.91677, 0.92061, 0.94236, 0.89544, 0.89364, 0.9, 0.80687, 0.8578, 0.80687, 1.02058, 0.80779, 0.97276, 0.97276, 0.97276, 0.97276, 0.8578, 0.99973, 1.18616, 0.91339, 1.08074, 0.82891, 1.02058, 0.55509, 0.71526, 0.89022, 1.08595, 1, 1, 1.18616, 1, 0.96736, 0.93582, 1.18616, 1, 1.04864, 0.82711, 0.99043, 0.99043, 0.99043, 0.71541, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.845, 0.80729, 0.77512, 0.77512, 0.77512, 0.77512, 0.98621, 0.98621, 0.98621, 0.98621, 0.95961, 0.92222, 0.90637, 0.90637, 0.90637, 0.90637, 0.90637, 1.02058, 0.90251, 0.90699, 0.90699, 0.90699, 0.90699, 0.85458, 0.83659, 0.94951, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.85811, 0.78216, 0.90083, 0.90083, 0.90083, 0.90083, 0.95381, 0.95381, 0.95381, 0.95381, 0.9135, 0.92168, 0.91513, 0.91513, 0.91513, 0.91513, 0.91513, 1.08595, 0.91677, 0.91677, 0.91677, 0.91677, 0.91677, 0.89364, 0.92332, 0.89364, 0.85576, 0.99613, 0.85576, 0.99613, 0.85576, 0.99613, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.94299, 0.76783, 0.95961, 0.91677, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.86523, 0.9135, 0.86523, 0.9135, 0.86523, 0.9135, 1, 1, 0.92222, 0.92168, 0.92222, 0.92168, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.86036, 0.97096, 0.71743, 0.98981, 1, 1, 0.95298, 0.79726, 0.95381, 1, 1, 0.79726, 0.6894, 0.79726, 0.74321, 0.81691, 1.0006, 0.92222, 0.92168, 1, 1, 0.92222, 0.92168, 0.79464, 0.92098, 0.92168, 0.90637, 0.91513, 0.90637, 0.91513, 0.90637, 0.91513, 0.909, 0.87514, 0.80729, 0.95077, 1, 1, 0.80729, 0.95077, 0.76463, 0.748, 0.76463, 0.748, 1, 1, 0.76463, 0.748, 1, 1, 0.86275, 0.72651, 0.86275, 1.04502, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.9154, 0.94236, 0.85458, 0.89364, 0.85458, 0.90531, 0.9, 0.90531, 0.9, 0.90531, 0.9, 1, 0.97276, 0.85576, 0.99613, 0.845, 0.85811, 0.90251, 0.91677, 1, 1, 0.86275, 1.04502, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.00899, 1.30628, 0.85576, 0.80178, 0.66862, 0.7927, 0.69323, 0.88127, 0.72459, 0.89711, 0.95381, 0.85576, 0.80591, 0.7805, 0.94729, 0.77512, 0.90531, 0.92222, 0.90637, 0.98621, 0.81698, 0.92655, 0.98558, 0.92222, 0.85359, 0.90637, 0.90976, 0.83809, 0.94523, 0.86275, 0.83509, 0.93157, 0.85308, 0.83392, 0.92346, 0.98621, 0.83509, 0.92886, 0.91324, 0.92168, 0.95381, 0.90646, 0.92886, 0.90557, 0.86847, 0.90276, 0.91324, 0.86842, 0.92168, 0.99531, 0.95381, 0.9224, 0.85408, 0.92699, 0.86847, 1.0051, 0.91513, 0.80487, 0.93481, 1, 0.88159, 1.05214, 0.90646, 0.97355, 0.81539, 0.89398, 0.85923, 0.95381, 0.90646, 0.91513, 0.90646, 0.85923, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9154, 0.94236, 0.9154, 0.94236, 0.9154, 0.94236, 0.85458, 0.89364, 0.96694, 1, 0.89903, 1, 1, 1, 0.91782, 0.91782, 0.91782, 1, 0.896, 0.896, 0.896, 0.9332, 0.9332, 0.95973, 1, 1.26, 1, 1, 0.80479, 0.80178, 1, 1, 0.85633, 1, 1, 1, 1, 0.97276, 1, 1, 1, 0.698, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.14542, 1, 0.79199, 0.78694, 1.02058, 1.03493, 1.05486, 1, 1, 1.23026, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.20006, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const MyriadProBoldItalicMetrics = {
  lineHeight: 1.2,
  lineGap: 0.2
};
const MyriadProItalicFactors = [1.36898, 1, 1, 0.65507, 0.84943, 0.85639, 0.88465, 0.88465, 0.86936, 0.88307, 0.86948, 0.85283, 0.85283, 1.06383, 1.02058, 0.75945, 0.9219, 0.75945, 1.17337, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.75945, 0.75945, 1.02058, 1.02058, 1.02058, 0.69046, 0.70926, 0.85158, 0.77812, 0.76852, 0.89591, 0.70466, 0.76125, 0.80094, 0.86822, 0.83864, 0.728, 0.77212, 0.79475, 0.93637, 0.87514, 0.8588, 0.76013, 0.8588, 0.72421, 0.69866, 0.77598, 0.85991, 0.80811, 0.87832, 0.78112, 0.77512, 0.8562, 1.0222, 1.18417, 1.0222, 1.27014, 0.89903, 1.15012, 0.93859, 0.94399, 0.846, 0.94399, 0.81453, 1.0186, 0.94219, 0.96017, 1.03075, 1.02175, 0.912, 1.03075, 0.96998, 0.96017, 0.93859, 0.94399, 0.94399, 0.95493, 0.746, 1.12658, 0.94578, 0.91, 0.979, 0.882, 0.882, 0.83, 0.85034, 0.83537, 0.85034, 1.02058, 0.70869, 0.88465, 0.88465, 0.88465, 0.88465, 0.83537, 0.90083, 1.15012, 0.9161, 0.94565, 0.73541, 1.02058, 0.53609, 0.69353, 0.79519, 1.08595, 1, 1, 1.15012, 1, 0.91974, 0.75945, 1.15012, 1, 0.9446, 0.73361, 0.9005, 0.9005, 0.9005, 0.62864, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.773, 0.76852, 0.70466, 0.70466, 0.70466, 0.70466, 0.83864, 0.83864, 0.83864, 0.83864, 0.90561, 0.87514, 0.8588, 0.8588, 0.8588, 0.8588, 0.8588, 1.02058, 0.85751, 0.85991, 0.85991, 0.85991, 0.85991, 0.77512, 0.76013, 0.88075, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.8075, 0.846, 0.81453, 0.81453, 0.81453, 0.81453, 0.82424, 0.82424, 0.82424, 0.82424, 0.9278, 0.96017, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 1.08595, 0.8562, 0.94578, 0.94578, 0.94578, 0.94578, 0.882, 0.94578, 0.882, 0.85158, 0.93859, 0.85158, 0.93859, 0.85158, 0.93859, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.89591, 0.8544, 0.90561, 0.94399, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.80094, 0.94219, 0.80094, 0.94219, 0.80094, 0.94219, 1, 1, 0.86822, 0.96017, 0.86822, 0.96017, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 1.03075, 0.83864, 0.82424, 0.81402, 1.02738, 0.728, 1.02175, 1, 1, 0.912, 0.79475, 1.03075, 1, 1, 0.79475, 0.83911, 0.79475, 0.66266, 0.80553, 1.06676, 0.87514, 0.96017, 1, 1, 0.87514, 0.96017, 0.86865, 0.87396, 0.96017, 0.8588, 0.93859, 0.8588, 0.93859, 0.8588, 0.93859, 0.867, 0.84759, 0.72421, 0.95493, 1, 1, 0.72421, 0.95493, 0.69866, 0.746, 0.69866, 0.746, 1, 1, 0.69866, 0.746, 1, 1, 0.77598, 0.88417, 0.77598, 1.12658, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.87832, 0.979, 0.77512, 0.882, 0.77512, 0.8562, 0.83, 0.8562, 0.83, 0.8562, 0.83, 1, 0.88465, 0.85158, 0.93859, 0.773, 0.8075, 0.85751, 0.8562, 1, 1, 0.77598, 1.12658, 1.15012, 1.15012, 1.15012, 1.15012, 1.15012, 1.15313, 1.15012, 1.15012, 1.15012, 1.08106, 1.03901, 0.85158, 0.77025, 0.62264, 0.7646, 0.65351, 0.86026, 0.69461, 0.89947, 1.03075, 0.85158, 0.77812, 0.76449, 0.88836, 0.70466, 0.8562, 0.86822, 0.8588, 0.83864, 0.77212, 0.85308, 0.93637, 0.87514, 0.82352, 0.8588, 0.85701, 0.76013, 0.89058, 0.77598, 0.8156, 0.82565, 0.78112, 0.77899, 0.89386, 0.83864, 0.8156, 0.9486, 0.92388, 0.96186, 1.03075, 0.91123, 0.9486, 0.93298, 0.878, 0.93942, 0.92388, 0.84596, 0.96186, 0.95119, 1.03075, 0.922, 0.88787, 0.95829, 0.88, 0.93559, 0.93859, 0.78815, 0.93758, 1, 0.89217, 1.03737, 0.91123, 0.93969, 0.77487, 0.85769, 0.86799, 1.03075, 0.91123, 0.93859, 0.91123, 0.86799, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87832, 0.979, 0.87832, 0.979, 0.87832, 0.979, 0.77512, 0.882, 0.9219, 1, 0.89903, 1, 1, 1, 0.87321, 0.87321, 0.87321, 1, 1.027, 1.027, 1.027, 0.86847, 0.86847, 0.79121, 1, 1.124, 1, 1, 0.73572, 0.73572, 1, 1, 0.85034, 1, 1, 1, 1, 0.88465, 1, 1, 1, 0.669, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04828, 1, 0.74948, 0.75187, 1.02058, 0.98391, 1.02119, 1, 1, 1.06233, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05233, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const MyriadProItalicMetrics = {
  lineHeight: 1.2,
  lineGap: 0.2
};
const MyriadProRegularFactors = [1.36898, 1, 1, 0.76305, 0.82784, 0.94935, 0.89364, 0.92241, 0.89073, 0.90706, 0.98472, 0.85283, 0.85283, 1.0664, 1.02058, 0.74505, 0.9219, 0.74505, 1.23456, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.74505, 0.74505, 1.02058, 1.02058, 1.02058, 0.73002, 0.72601, 0.91755, 0.8126, 0.80314, 0.92222, 0.73764, 0.79726, 0.83051, 0.90284, 0.86023, 0.74, 0.8126, 0.84869, 0.96518, 0.91115, 0.8858, 0.79761, 0.8858, 0.74498, 0.73914, 0.81363, 0.89591, 0.83659, 0.89633, 0.85608, 0.8111, 0.90531, 1.0222, 1.22736, 1.0222, 1.27014, 0.89903, 0.90088, 0.86667, 1.0231, 0.896, 1.01411, 0.90083, 1.05099, 1.00512, 0.99793, 1.05326, 1.09377, 0.938, 1.06226, 1.00119, 0.99793, 0.98714, 1.0231, 1.01231, 0.98196, 0.792, 1.19137, 0.99074, 0.962, 1.01915, 0.926, 0.942, 0.856, 0.85034, 0.92006, 0.85034, 1.02058, 0.69067, 0.92241, 0.92241, 0.92241, 0.92241, 0.92006, 0.9332, 0.90088, 0.91882, 0.93484, 0.75339, 1.02058, 0.56866, 0.54324, 0.79519, 1.08595, 1, 1, 0.90088, 1, 0.95325, 0.74505, 0.90088, 1, 0.97198, 0.75339, 0.91009, 0.91009, 0.91009, 0.66466, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.788, 0.80314, 0.73764, 0.73764, 0.73764, 0.73764, 0.86023, 0.86023, 0.86023, 0.86023, 0.92915, 0.91115, 0.8858, 0.8858, 0.8858, 0.8858, 0.8858, 1.02058, 0.8858, 0.89591, 0.89591, 0.89591, 0.89591, 0.8111, 0.79611, 0.89713, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86936, 0.896, 0.90083, 0.90083, 0.90083, 0.90083, 0.84224, 0.84224, 0.84224, 0.84224, 0.97276, 0.99793, 0.98714, 0.98714, 0.98714, 0.98714, 0.98714, 1.08595, 0.89876, 0.99074, 0.99074, 0.99074, 0.99074, 0.942, 1.0231, 0.942, 0.91755, 0.86667, 0.91755, 0.86667, 0.91755, 0.86667, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.92222, 0.93372, 0.92915, 1.01411, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.83051, 1.00512, 0.83051, 1.00512, 0.83051, 1.00512, 1, 1, 0.90284, 0.99793, 0.90976, 0.99793, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 1.05326, 0.86023, 0.84224, 0.82873, 1.07469, 0.74, 1.09377, 1, 1, 0.938, 0.84869, 1.06226, 1, 1, 0.84869, 0.83704, 0.84869, 0.81441, 0.85588, 1.08927, 0.91115, 0.99793, 1, 1, 0.91115, 0.99793, 0.91887, 0.90991, 0.99793, 0.8858, 0.98714, 0.8858, 0.98714, 0.8858, 0.98714, 0.894, 0.91434, 0.74498, 0.98196, 1, 1, 0.74498, 0.98196, 0.73914, 0.792, 0.73914, 0.792, 1, 1, 0.73914, 0.792, 1, 1, 0.81363, 0.904, 0.81363, 1.19137, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89633, 1.01915, 0.8111, 0.942, 0.8111, 0.90531, 0.856, 0.90531, 0.856, 0.90531, 0.856, 1, 0.92241, 0.91755, 0.86667, 0.788, 0.86936, 0.8858, 0.89876, 1, 1, 0.81363, 1.19137, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90388, 1.03901, 0.92138, 0.78105, 0.7154, 0.86169, 0.80513, 0.94007, 0.82528, 0.98612, 1.06226, 0.91755, 0.8126, 0.81884, 0.92819, 0.73764, 0.90531, 0.90284, 0.8858, 0.86023, 0.8126, 0.91172, 0.96518, 0.91115, 0.83089, 0.8858, 0.87791, 0.79761, 0.89297, 0.81363, 0.88157, 0.89992, 0.85608, 0.81992, 0.94307, 0.86023, 0.88157, 0.95308, 0.98699, 0.99793, 1.06226, 0.95817, 0.95308, 0.97358, 0.928, 0.98088, 0.98699, 0.92761, 0.99793, 0.96017, 1.06226, 0.986, 0.944, 0.95978, 0.938, 0.96705, 0.98714, 0.80442, 0.98972, 1, 0.89762, 1.04552, 0.95817, 0.99007, 0.87064, 0.91879, 0.88888, 1.06226, 0.95817, 0.98714, 0.95817, 0.88888, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89633, 1.01915, 0.89633, 1.01915, 0.89633, 1.01915, 0.8111, 0.942, 0.9219, 1, 0.89903, 1, 1, 1, 0.93173, 0.93173, 0.93173, 1, 1.06304, 1.06304, 1.06904, 0.89903, 0.89903, 0.80549, 1, 1.156, 1, 1, 0.76575, 0.76575, 1, 1, 0.72458, 1, 1, 1, 1, 0.92241, 1, 1, 1, 0.619, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.07257, 1, 0.74705, 0.71119, 1.02058, 1.024, 1.02119, 1, 1, 1.1536, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05638, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const MyriadProRegularMetrics = {
  lineHeight: 1.2,
  lineGap: 0.2
};

;// ./src/core/segoeui_factors.js
const SegoeuiBoldFactors = [1.76738, 1, 1, 0.99297, 0.9824, 1.04016, 1.06497, 1.03424, 0.97529, 1.17647, 1.23203, 1.1085, 1.1085, 1.16939, 1.2107, 0.9754, 1.21408, 0.9754, 1.59578, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 0.81378, 0.81378, 1.2107, 1.2107, 1.2107, 0.71703, 0.97847, 0.97363, 0.88776, 0.8641, 1.02096, 0.79795, 0.85132, 0.914, 1.06085, 1.1406, 0.8007, 0.89858, 0.83693, 1.14889, 1.09398, 0.97489, 0.92094, 0.97489, 0.90399, 0.84041, 0.95923, 1.00135, 1, 1.06467, 0.98243, 0.90996, 0.99361, 1.1085, 1.56942, 1.1085, 1.2107, 0.74627, 0.94282, 0.96752, 1.01519, 0.86304, 1.01359, 0.97278, 1.15103, 1.01359, 0.98561, 1.02285, 1.02285, 1.00527, 1.02285, 1.0302, 0.99041, 1.0008, 1.01519, 1.01359, 1.02258, 0.79104, 1.16862, 0.99041, 0.97454, 1.02511, 0.99298, 0.96752, 0.95801, 0.94856, 1.16579, 0.94856, 1.2107, 0.9824, 1.03424, 1.03424, 1, 1.03424, 1.16579, 0.8727, 1.3871, 1.18622, 1.10818, 1.04478, 1.2107, 1.18622, 0.75155, 0.94994, 1.28826, 1.21408, 1.21408, 0.91056, 1, 0.91572, 0.9754, 0.64663, 1.18328, 1.24866, 1.04478, 1.14169, 1.15749, 1.17389, 0.71703, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.93506, 0.8641, 0.79795, 0.79795, 0.79795, 0.79795, 1.1406, 1.1406, 1.1406, 1.1406, 1.02096, 1.09398, 0.97426, 0.97426, 0.97426, 0.97426, 0.97426, 1.2107, 0.97489, 1.00135, 1.00135, 1.00135, 1.00135, 0.90996, 0.92094, 1.02798, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.93136, 0.86304, 0.97278, 0.97278, 0.97278, 0.97278, 1.02285, 1.02285, 1.02285, 1.02285, 0.97122, 0.99041, 1, 1, 1, 1, 1, 1.28826, 1.0008, 0.99041, 0.99041, 0.99041, 0.99041, 0.96752, 1.01519, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 1.02096, 1.03057, 1.02096, 1.03517, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.914, 1.01359, 0.914, 1.01359, 0.914, 1.01359, 1, 1, 1.06085, 0.98561, 1.06085, 1.00879, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 0.97138, 1.08692, 0.8007, 1.02285, 1, 1, 1.00527, 0.83693, 1.02285, 1, 1, 0.83693, 0.9455, 0.83693, 0.90418, 0.83693, 1.13005, 1.09398, 0.99041, 1, 1, 1.09398, 0.99041, 0.96692, 1.09251, 0.99041, 0.97489, 1.0008, 0.97489, 1.0008, 0.97489, 1.0008, 0.93994, 0.97931, 0.90399, 1.02258, 1, 1, 0.90399, 1.02258, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 1, 1, 0.95923, 1.07034, 0.95923, 1.16862, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.06467, 1.02511, 0.90996, 0.96752, 0.90996, 0.99361, 0.95801, 0.99361, 0.95801, 0.99361, 0.95801, 1.07733, 1.03424, 0.97363, 0.96752, 0.93506, 0.93136, 0.97489, 1.0008, 1, 1, 0.95923, 1.16862, 1.15103, 1.15103, 1.01173, 1.03959, 0.75953, 0.81378, 0.79912, 1.15103, 1.21994, 0.95161, 0.87815, 1.01149, 0.81525, 0.7676, 0.98167, 1.01134, 1.02546, 0.84097, 1.03089, 1.18102, 0.97363, 0.88776, 0.85134, 0.97826, 0.79795, 0.99361, 1.06085, 0.97489, 1.1406, 0.89858, 1.0388, 1.14889, 1.09398, 0.86039, 0.97489, 1.0595, 0.92094, 0.94793, 0.95923, 0.90996, 0.99346, 0.98243, 1.02112, 0.95493, 1.1406, 0.90996, 1.03574, 1.02597, 1.0008, 1.18102, 1.06628, 1.03574, 1.0192, 1.01932, 1.00886, 0.97531, 1.0106, 1.0008, 1.13189, 1.18102, 1.02277, 0.98683, 1.0016, 0.99561, 1.07237, 1.0008, 0.90434, 0.99921, 0.93803, 0.8965, 1.23085, 1.06628, 1.04983, 0.96268, 1.0499, 0.98439, 1.18102, 1.06628, 1.0008, 1.06628, 0.98439, 0.79795, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09466, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.97278, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.02065, 1, 1, 1, 1, 1, 1, 1.06467, 1.02511, 1.06467, 1.02511, 1.06467, 1.02511, 0.90996, 0.96752, 1, 1.21408, 0.89903, 1, 1, 0.75155, 1.04394, 1.04394, 1.04394, 1.04394, 0.98633, 0.98633, 0.98633, 0.73047, 0.73047, 1.20642, 0.91211, 1.25635, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.12454, 0.93503, 1.03424, 1.19687, 1.03424, 1, 1, 1, 0.771, 1, 1, 1.15749, 1.15749, 1.15749, 1.10948, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.16897, 1, 0.96085, 0.90137, 1.2107, 1.18416, 1.13973, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21172, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18874, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.09193, 1.09193, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const SegoeuiBoldMetrics = {
  lineHeight: 1.33008,
  lineGap: 0
};
const SegoeuiBoldItalicFactors = [1.76738, 1, 1, 0.98946, 1.03959, 1.04016, 1.02809, 1.036, 0.97639, 1.10953, 1.23203, 1.11144, 1.11144, 1.16939, 1.21237, 0.9754, 1.21261, 0.9754, 1.59754, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 0.81378, 0.81378, 1.21237, 1.21237, 1.21237, 0.73541, 0.97847, 0.97363, 0.89723, 0.87897, 1.0426, 0.79429, 0.85292, 0.91149, 1.05815, 1.1406, 0.79631, 0.90128, 0.83853, 1.04396, 1.10615, 0.97552, 0.94436, 0.97552, 0.88641, 0.80527, 0.96083, 1.00135, 1, 1.06777, 0.9817, 0.91142, 0.99361, 1.11144, 1.57293, 1.11144, 1.21237, 0.74627, 1.31818, 1.06585, 0.97042, 0.83055, 0.97042, 0.93503, 1.1261, 0.97042, 0.97922, 1.14236, 0.94552, 1.01054, 1.14236, 1.02471, 0.97922, 0.94165, 0.97042, 0.97042, 1.0276, 0.78929, 1.1261, 0.97922, 0.95874, 1.02197, 0.98507, 0.96752, 0.97168, 0.95107, 1.16579, 0.95107, 1.21237, 1.03959, 1.036, 1.036, 1, 1.036, 1.16579, 0.87357, 1.31818, 1.18754, 1.26781, 1.05356, 1.21237, 1.18622, 0.79487, 0.94994, 1.29004, 1.24047, 1.24047, 1.31818, 1, 0.91484, 0.9754, 1.31818, 1.1349, 1.24866, 1.05356, 1.13934, 1.15574, 1.17389, 0.73541, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.94385, 0.87897, 0.79429, 0.79429, 0.79429, 0.79429, 1.1406, 1.1406, 1.1406, 1.1406, 1.0426, 1.10615, 0.97552, 0.97552, 0.97552, 0.97552, 0.97552, 1.21237, 0.97552, 1.00135, 1.00135, 1.00135, 1.00135, 0.91142, 0.94436, 0.98721, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 0.96705, 0.83055, 0.93503, 0.93503, 0.93503, 0.93503, 1.14236, 1.14236, 1.14236, 1.14236, 0.93125, 0.97922, 0.94165, 0.94165, 0.94165, 0.94165, 0.94165, 1.29004, 0.94165, 0.97922, 0.97922, 0.97922, 0.97922, 0.96752, 0.97042, 0.96752, 0.97363, 1.06585, 0.97363, 1.06585, 0.97363, 1.06585, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 1.0426, 1.0033, 1.0426, 0.97042, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.91149, 0.97042, 0.91149, 0.97042, 0.91149, 0.97042, 1, 1, 1.05815, 0.97922, 1.05815, 0.97922, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 0.97441, 1.04302, 0.79631, 1.01582, 1, 1, 1.01054, 0.83853, 1.14236, 1, 1, 0.83853, 1.09125, 0.83853, 0.90418, 0.83853, 1.19508, 1.10615, 0.97922, 1, 1, 1.10615, 0.97922, 1.01034, 1.10466, 0.97922, 0.97552, 0.94165, 0.97552, 0.94165, 0.97552, 0.94165, 0.91602, 0.91981, 0.88641, 1.0276, 1, 1, 0.88641, 1.0276, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 1, 1, 0.96083, 1.05403, 0.95923, 1.16862, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.06777, 1.02197, 0.91142, 0.96752, 0.91142, 0.99361, 0.97168, 0.99361, 0.97168, 0.99361, 0.97168, 1.23199, 1.036, 0.97363, 1.06585, 0.94385, 0.96705, 0.97552, 0.94165, 1, 1, 0.96083, 1.1261, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 0.95161, 1.27126, 1.00811, 0.83284, 0.77702, 0.99137, 0.95253, 1.0347, 0.86142, 1.07205, 1.14236, 0.97363, 0.89723, 0.86869, 1.09818, 0.79429, 0.99361, 1.05815, 0.97552, 1.1406, 0.90128, 1.06662, 1.04396, 1.10615, 0.84918, 0.97552, 1.04694, 0.94436, 0.98015, 0.96083, 0.91142, 1.00356, 0.9817, 1.01945, 0.98999, 1.1406, 0.91142, 1.04961, 0.9898, 1.00639, 1.14236, 1.07514, 1.04961, 0.99607, 1.02897, 1.008, 0.9898, 0.95134, 1.00639, 1.11121, 1.14236, 1.00518, 0.97981, 1.02186, 1, 1.08578, 0.94165, 0.99314, 0.98387, 0.93028, 0.93377, 1.35125, 1.07514, 1.10687, 0.93491, 1.04232, 1.00351, 1.14236, 1.07514, 0.94165, 1.07514, 1.00351, 0.79429, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09097, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.93503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96609, 1, 1, 1, 1, 1, 1, 1.06777, 1.02197, 1.06777, 1.02197, 1.06777, 1.02197, 0.91142, 0.96752, 1, 1.21261, 0.89903, 1, 1, 0.75155, 1.04745, 1.04745, 1.04745, 1.04394, 0.98633, 0.98633, 0.98633, 0.72959, 0.72959, 1.20502, 0.91406, 1.26514, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.09125, 0.93327, 1.03336, 1.16541, 1.036, 1, 1, 1, 0.771, 1, 1, 1.15574, 1.15574, 1.15574, 1.15574, 0.86364, 0.94434, 0.86279, 0.94434, 0.86224, 1, 1, 1.16798, 1, 0.96085, 0.90068, 1.21237, 1.18416, 1.13904, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21339, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18775, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.13269, 1.13269, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const SegoeuiBoldItalicMetrics = {
  lineHeight: 1.33008,
  lineGap: 0
};
const SegoeuiItalicFactors = [1.76738, 1, 1, 0.98946, 1.14763, 1.05365, 1.06234, 0.96927, 0.92586, 1.15373, 1.18414, 0.91349, 0.91349, 1.07403, 1.17308, 0.78383, 1.20088, 0.78383, 1.42531, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78383, 0.78383, 1.17308, 1.17308, 1.17308, 0.77349, 0.94565, 0.94729, 0.85944, 0.88506, 0.9858, 0.74817, 0.80016, 0.88449, 0.98039, 0.95782, 0.69238, 0.89898, 0.83231, 0.98183, 1.03989, 0.96924, 0.86237, 0.96924, 0.80595, 0.74524, 0.86091, 0.95402, 0.94143, 0.98448, 0.8858, 0.83089, 0.93285, 1.0949, 1.39016, 1.0949, 1.45994, 0.74627, 1.04839, 0.97454, 0.97454, 0.87207, 0.97454, 0.87533, 1.06151, 0.97454, 1.00176, 1.16484, 1.08132, 0.98047, 1.16484, 1.02989, 1.01054, 0.96225, 0.97454, 0.97454, 1.06598, 0.79004, 1.16344, 1.00351, 0.94629, 0.9973, 0.91016, 0.96777, 0.9043, 0.91082, 0.92481, 0.91082, 1.17308, 0.95748, 0.96927, 0.96927, 1, 0.96927, 0.92481, 0.80597, 1.04839, 1.23393, 1.1781, 0.9245, 1.17308, 1.20808, 0.63218, 0.94261, 1.24822, 1.09971, 1.09971, 1.04839, 1, 0.85273, 0.78032, 1.04839, 1.09971, 1.22326, 0.9245, 1.09836, 1.13525, 1.15222, 0.70424, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.85498, 0.88506, 0.74817, 0.74817, 0.74817, 0.74817, 0.95782, 0.95782, 0.95782, 0.95782, 0.9858, 1.03989, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.17308, 0.96924, 0.95402, 0.95402, 0.95402, 0.95402, 0.83089, 0.86237, 0.88409, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.92916, 0.87207, 0.87533, 0.87533, 0.87533, 0.87533, 0.93146, 0.93146, 0.93146, 0.93146, 0.93854, 1.01054, 0.96225, 0.96225, 0.96225, 0.96225, 0.96225, 1.24822, 0.8761, 1.00351, 1.00351, 1.00351, 1.00351, 0.96777, 0.97454, 0.96777, 0.94729, 0.97454, 0.94729, 0.97454, 0.94729, 0.97454, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.9858, 0.95391, 0.9858, 0.97454, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.88449, 0.97454, 0.88449, 0.97454, 0.88449, 0.97454, 1, 1, 0.98039, 1.00176, 0.98039, 1.00176, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 1.16484, 0.95782, 0.93146, 0.84421, 1.12761, 0.69238, 1.08132, 1, 1, 0.98047, 0.83231, 1.16484, 1, 1, 0.84723, 1.04861, 0.84723, 0.78755, 0.83231, 1.23736, 1.03989, 1.01054, 1, 1, 1.03989, 1.01054, 0.9857, 1.03849, 1.01054, 0.96924, 0.96225, 0.96924, 0.96225, 0.96924, 0.96225, 0.92383, 0.90171, 0.80595, 1.06598, 1, 1, 0.80595, 1.06598, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 1, 1, 0.86091, 1.02759, 0.85771, 1.16344, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.98448, 0.9973, 0.83089, 0.96777, 0.83089, 0.93285, 0.9043, 0.93285, 0.9043, 0.93285, 0.9043, 1.31868, 0.96927, 0.94729, 0.97454, 0.85498, 0.92916, 0.96924, 0.8761, 1, 1, 0.86091, 1.16344, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 0.81965, 0.81965, 0.94729, 0.78032, 0.71022, 0.90883, 0.84171, 0.99877, 0.77596, 1.05734, 1.2, 0.94729, 0.85944, 0.82791, 0.9607, 0.74817, 0.93285, 0.98039, 0.96924, 0.95782, 0.89898, 0.98316, 0.98183, 1.03989, 0.78614, 0.96924, 0.97642, 0.86237, 0.86075, 0.86091, 0.83089, 0.90082, 0.8858, 0.97296, 1.01284, 0.95782, 0.83089, 1.0976, 1.04, 1.03342, 1.2, 1.0675, 1.0976, 0.98205, 1.03809, 1.05097, 1.04, 0.95364, 1.03342, 1.05401, 1.2, 1.02148, 1.0119, 1.04724, 1.0127, 1.02732, 0.96225, 0.8965, 0.97783, 0.93574, 0.94818, 1.30679, 1.0675, 1.11826, 0.99821, 1.0557, 1.0326, 1.2, 1.0675, 0.96225, 1.0675, 1.0326, 0.74817, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03754, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87533, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.98705, 1, 1, 1, 1, 1, 1, 0.98448, 0.9973, 0.98448, 0.9973, 0.98448, 0.9973, 0.83089, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 0.94945, 0.94945, 0.94945, 0.94945, 1.12317, 1.12317, 1.12317, 0.67603, 0.67603, 1.15621, 0.73584, 1.21191, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87709, 0.96927, 1.01473, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.09836, 1.09836, 1.09836, 1.01522, 0.86321, 0.94434, 0.8649, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86438, 1.17308, 1.18416, 1.14589, 0.69825, 0.97622, 1.96791, 1.24822, 1.24822, 1.17308, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.17984, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10742, 1.10742, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const SegoeuiItalicMetrics = {
  lineHeight: 1.33008,
  lineGap: 0
};
const SegoeuiRegularFactors = [1.76738, 1, 1, 0.98594, 1.02285, 1.10454, 1.06234, 0.96927, 0.92037, 1.19985, 1.2046, 0.90616, 0.90616, 1.07152, 1.1714, 0.78032, 1.20088, 0.78032, 1.40246, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78032, 0.78032, 1.1714, 1.1714, 1.1714, 0.80597, 0.94084, 0.96706, 0.85944, 0.85734, 0.97093, 0.75842, 0.79936, 0.88198, 0.9831, 0.95782, 0.71387, 0.86969, 0.84636, 1.07796, 1.03584, 0.96924, 0.83968, 0.96924, 0.82826, 0.79649, 0.85771, 0.95132, 0.93119, 0.98965, 0.88433, 0.8287, 0.93365, 1.08612, 1.3638, 1.08612, 1.45786, 0.74627, 0.80499, 0.91484, 1.05707, 0.92383, 1.05882, 0.9403, 1.12654, 1.05882, 1.01756, 1.09011, 1.09011, 0.99414, 1.09011, 1.034, 1.01756, 1.05356, 1.05707, 1.05882, 1.04399, 0.84863, 1.21968, 1.01756, 0.95801, 1.00068, 0.91797, 0.96777, 0.9043, 0.90351, 0.92105, 0.90351, 1.1714, 0.85337, 0.96927, 0.96927, 0.99912, 0.96927, 0.92105, 0.80597, 1.2434, 1.20808, 1.05937, 0.90957, 1.1714, 1.20808, 0.75155, 0.94261, 1.24644, 1.09971, 1.09971, 0.84751, 1, 0.85273, 0.78032, 0.61584, 1.05425, 1.17914, 0.90957, 1.08665, 1.11593, 1.14169, 0.73381, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.86035, 0.85734, 0.75842, 0.75842, 0.75842, 0.75842, 0.95782, 0.95782, 0.95782, 0.95782, 0.97093, 1.03584, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.1714, 0.96924, 0.95132, 0.95132, 0.95132, 0.95132, 0.8287, 0.83968, 0.89049, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.93575, 0.92383, 0.9403, 0.9403, 0.9403, 0.9403, 0.8717, 0.8717, 0.8717, 0.8717, 1.00527, 1.01756, 1.05356, 1.05356, 1.05356, 1.05356, 1.05356, 1.24644, 0.95923, 1.01756, 1.01756, 1.01756, 1.01756, 0.96777, 1.05707, 0.96777, 0.96706, 0.91484, 0.96706, 0.91484, 0.96706, 0.91484, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.97093, 1.0969, 0.97093, 1.05882, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.88198, 1.05882, 0.88198, 1.05882, 0.88198, 1.05882, 1, 1, 0.9831, 1.01756, 0.9831, 1.01756, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 1.09011, 0.95782, 0.8717, 0.84784, 1.11551, 0.71387, 1.09011, 1, 1, 0.99414, 0.84636, 1.09011, 1, 1, 0.84636, 1.0536, 0.84636, 0.94298, 0.84636, 1.23297, 1.03584, 1.01756, 1, 1, 1.03584, 1.01756, 1.00323, 1.03444, 1.01756, 0.96924, 1.05356, 0.96924, 1.05356, 0.96924, 1.05356, 0.93066, 0.98293, 0.82826, 1.04399, 1, 1, 0.82826, 1.04399, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 1, 1, 0.85771, 1.17318, 0.85771, 1.21968, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.98965, 1.00068, 0.8287, 0.96777, 0.8287, 0.93365, 0.9043, 0.93365, 0.9043, 0.93365, 0.9043, 1.08571, 0.96927, 0.96706, 0.91484, 0.86035, 0.93575, 0.96924, 0.95923, 1, 1, 0.85771, 1.21968, 1.11437, 1.11437, 0.93109, 0.91202, 0.60411, 0.84164, 0.55572, 1.01173, 0.97361, 0.81818, 0.81818, 0.96635, 0.78032, 0.72727, 0.92366, 0.98601, 1.03405, 0.77968, 1.09799, 1.2, 0.96706, 0.85944, 0.85638, 0.96491, 0.75842, 0.93365, 0.9831, 0.96924, 0.95782, 0.86969, 0.94152, 1.07796, 1.03584, 0.78437, 0.96924, 0.98715, 0.83968, 0.83491, 0.85771, 0.8287, 0.94492, 0.88433, 0.9287, 1.0098, 0.95782, 0.8287, 1.0625, 0.98248, 1.03424, 1.2, 1.01071, 1.0625, 0.95246, 1.03809, 1.04912, 0.98248, 1.00221, 1.03424, 1.05443, 1.2, 1.04785, 0.99609, 1.00169, 1.05176, 0.99346, 1.05356, 0.9087, 1.03004, 0.95542, 0.93117, 1.23362, 1.01071, 1.07831, 1.02512, 1.05205, 1.03502, 1.2, 1.01071, 1.05356, 1.01071, 1.03502, 0.75842, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03719, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9403, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04021, 1, 1, 1, 1, 1, 1, 0.98965, 1.00068, 0.98965, 1.00068, 0.98965, 1.00068, 0.8287, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 1.03077, 1.03077, 1.03077, 1.03077, 1.13196, 1.13196, 1.13196, 0.67428, 0.67428, 1.16039, 0.73291, 1.20996, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87796, 0.96927, 1.01518, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.10539, 1.10539, 1.11358, 1.06967, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86507, 1.1714, 1.18416, 1.14589, 0.69825, 0.97622, 1.9697, 1.24822, 1.24822, 1.17238, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18083, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10938, 1.10938, 1, 1, 1, 1.05425, 1.09971, 1.09971, 1.09971, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
const SegoeuiRegularMetrics = {
  lineHeight: 1.33008,
  lineGap: 0
};

;// ./src/core/xfa_fonts.js








const getXFAFontMap = getLookupTableFactory(function (t) {
  t["MyriadPro-Regular"] = t["PdfJS-Fallback-Regular"] = {
    name: "LiberationSans-Regular",
    factors: MyriadProRegularFactors,
    baseWidths: LiberationSansRegularWidths,
    baseMapping: LiberationSansRegularMapping,
    metrics: MyriadProRegularMetrics
  };
  t["MyriadPro-Bold"] = t["PdfJS-Fallback-Bold"] = {
    name: "LiberationSans-Bold",
    factors: MyriadProBoldFactors,
    baseWidths: LiberationSansBoldWidths,
    baseMapping: LiberationSansBoldMapping,
    metrics: MyriadProBoldMetrics
  };
  t["MyriadPro-It"] = t["MyriadPro-Italic"] = t["PdfJS-Fallback-Italic"] = {
    name: "LiberationSans-Italic",
    factors: MyriadProItalicFactors,
    baseWidths: LiberationSansItalicWidths,
    baseMapping: LiberationSansItalicMapping,
    metrics: MyriadProItalicMetrics
  };
  t["MyriadPro-BoldIt"] = t["MyriadPro-BoldItalic"] = t["PdfJS-Fallback-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: MyriadProBoldItalicFactors,
    baseWidths: LiberationSansBoldItalicWidths,
    baseMapping: LiberationSansBoldItalicMapping,
    metrics: MyriadProBoldItalicMetrics
  };
  t.ArialMT = t.Arial = t["Arial-Regular"] = {
    name: "LiberationSans-Regular",
    baseWidths: LiberationSansRegularWidths,
    baseMapping: LiberationSansRegularMapping
  };
  t["Arial-BoldMT"] = t["Arial-Bold"] = {
    name: "LiberationSans-Bold",
    baseWidths: LiberationSansBoldWidths,
    baseMapping: LiberationSansBoldMapping
  };
  t["Arial-ItalicMT"] = t["Arial-Italic"] = {
    name: "LiberationSans-Italic",
    baseWidths: LiberationSansItalicWidths,
    baseMapping: LiberationSansItalicMapping
  };
  t["Arial-BoldItalicMT"] = t["Arial-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    baseWidths: LiberationSansBoldItalicWidths,
    baseMapping: LiberationSansBoldItalicMapping
  };
  t["Calibri-Regular"] = {
    name: "LiberationSans-Regular",
    factors: CalibriRegularFactors,
    baseWidths: LiberationSansRegularWidths,
    baseMapping: LiberationSansRegularMapping,
    metrics: CalibriRegularMetrics
  };
  t["Calibri-Bold"] = {
    name: "LiberationSans-Bold",
    factors: CalibriBoldFactors,
    baseWidths: LiberationSansBoldWidths,
    baseMapping: LiberationSansBoldMapping,
    metrics: CalibriBoldMetrics
  };
  t["Calibri-Italic"] = {
    name: "LiberationSans-Italic",
    factors: CalibriItalicFactors,
    baseWidths: LiberationSansItalicWidths,
    baseMapping: LiberationSansItalicMapping,
    metrics: CalibriItalicMetrics
  };
  t["Calibri-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: CalibriBoldItalicFactors,
    baseWidths: LiberationSansBoldItalicWidths,
    baseMapping: LiberationSansBoldItalicMapping,
    metrics: CalibriBoldItalicMetrics
  };
  t["Segoeui-Regular"] = {
    name: "LiberationSans-Regular",
    factors: SegoeuiRegularFactors,
    baseWidths: LiberationSansRegularWidths,
    baseMapping: LiberationSansRegularMapping,
    metrics: SegoeuiRegularMetrics
  };
  t["Segoeui-Bold"] = {
    name: "LiberationSans-Bold",
    factors: SegoeuiBoldFactors,
    baseWidths: LiberationSansBoldWidths,
    baseMapping: LiberationSansBoldMapping,
    metrics: SegoeuiBoldMetrics
  };
  t["Segoeui-Italic"] = {
    name: "LiberationSans-Italic",
    factors: SegoeuiItalicFactors,
    baseWidths: LiberationSansItalicWidths,
    baseMapping: LiberationSansItalicMapping,
    metrics: SegoeuiItalicMetrics
  };
  t["Segoeui-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: SegoeuiBoldItalicFactors,
    baseWidths: LiberationSansBoldItalicWidths,
    baseMapping: LiberationSansBoldItalicMapping,
    metrics: SegoeuiBoldItalicMetrics
  };
  t["Helvetica-Regular"] = t.Helvetica = {
    name: "LiberationSans-Regular",
    factors: HelveticaRegularFactors,
    baseWidths: LiberationSansRegularWidths,
    baseMapping: LiberationSansRegularMapping,
    metrics: HelveticaRegularMetrics
  };
  t["Helvetica-Bold"] = {
    name: "LiberationSans-Bold",
    factors: HelveticaBoldFactors,
    baseWidths: LiberationSansBoldWidths,
    baseMapping: LiberationSansBoldMapping,
    metrics: HelveticaBoldMetrics
  };
  t["Helvetica-Italic"] = {
    name: "LiberationSans-Italic",
    factors: HelveticaItalicFactors,
    baseWidths: LiberationSansItalicWidths,
    baseMapping: LiberationSansItalicMapping,
    metrics: HelveticaItalicMetrics
  };
  t["Helvetica-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: HelveticaBoldItalicFactors,
    baseWidths: LiberationSansBoldItalicWidths,
    baseMapping: LiberationSansBoldItalicMapping,
    metrics: HelveticaBoldItalicMetrics
  };
});
function getXfaFontName(name) {
  const fontName = normalizeFontName(name);
  const fontMap = getXFAFontMap();
  return fontMap[fontName];
}
function getXfaFontWidths(name) {
  const info = getXfaFontName(name);
  if (!info) {
    return null;
  }
  const {
    baseWidths,
    baseMapping,
    factors
  } = info;
  const rescaledBaseWidths = !factors ? baseWidths : baseWidths.map((w, i) => w * factors[i]);
  let currentCode = -2;
  let currentArray;
  const newWidths = [];
  for (const [unicode, glyphIndex] of baseMapping.map((charUnicode, index) => [charUnicode, index]).sort(([unicode1], [unicode2]) => unicode1 - unicode2)) {
    if (unicode === -1) {
      continue;
    }
    if (unicode === currentCode + 1) {
      currentArray.push(rescaledBaseWidths[glyphIndex]);
      currentCode += 1;
    } else {
      currentCode = unicode;
      currentArray = [rescaledBaseWidths[glyphIndex]];
      newWidths.push(unicode, currentArray);
    }
  }
  return newWidths;
}
function getXfaFontDict(name) {
  const widths = getXfaFontWidths(name);
  const dict = new Dict(null);
  dict.set("BaseFont", Name.get(name));
  dict.set("Type", Name.get("Font"));
  dict.set("Subtype", Name.get("CIDFontType2"));
  dict.set("Encoding", Name.get("Identity-H"));
  dict.set("CIDToGIDMap", Name.get("Identity"));
  dict.set("W", widths);
  dict.set("FirstChar", widths[0]);
  dict.set("LastChar", widths.at(-2) + widths.at(-1).length - 1);
  const descriptor = new Dict(null);
  dict.set("FontDescriptor", descriptor);
  const systemInfo = new Dict(null);
  systemInfo.set("Ordering", "Identity");
  systemInfo.set("Registry", "Adobe");
  systemInfo.set("Supplement", 0);
  dict.set("CIDSystemInfo", systemInfo);
  return dict;
}

;// ./src/core/ps_parser.js



class PostScriptParser {
  constructor(lexer) {
    this.lexer = lexer;
    this.operators = [];
    this.token = null;
    this.prev = null;
  }
  nextToken() {
    this.prev = this.token;
    this.token = this.lexer.getToken();
  }
  accept(type) {
    if (this.token.type === type) {
      this.nextToken();
      return true;
    }
    return false;
  }
  expect(type) {
    if (this.accept(type)) {
      return true;
    }
    throw new FormatError(\`Unexpected symbol: found \${this.token.type} expected \${type}.\`);
  }
  parse() {
    this.nextToken();
    this.expect(PostScriptTokenTypes.LBRACE);
    this.parseBlock();
    this.expect(PostScriptTokenTypes.RBRACE);
    return this.operators;
  }
  parseBlock() {
    while (true) {
      if (this.accept(PostScriptTokenTypes.NUMBER)) {
        this.operators.push(this.prev.value);
      } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {
        this.operators.push(this.prev.value);
      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
        this.parseCondition();
      } else {
        return;
      }
    }
  }
  parseCondition() {
    const conditionLocation = this.operators.length;
    this.operators.push(null, null);
    this.parseBlock();
    this.expect(PostScriptTokenTypes.RBRACE);
    if (this.accept(PostScriptTokenTypes.IF)) {
      this.operators[conditionLocation] = this.operators.length;
      this.operators[conditionLocation + 1] = "jz";
    } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
      const jumpLocation = this.operators.length;
      this.operators.push(null, null);
      const endOfTrue = this.operators.length;
      this.parseBlock();
      this.expect(PostScriptTokenTypes.RBRACE);
      this.expect(PostScriptTokenTypes.IFELSE);
      this.operators[jumpLocation] = this.operators.length;
      this.operators[jumpLocation + 1] = "j";
      this.operators[conditionLocation] = endOfTrue;
      this.operators[conditionLocation + 1] = "jz";
    } else {
      throw new FormatError("PS Function: error parsing conditional.");
    }
  }
}
const PostScriptTokenTypes = {
  LBRACE: 0,
  RBRACE: 1,
  NUMBER: 2,
  OPERATOR: 3,
  IF: 4,
  IFELSE: 5
};
class PostScriptToken {
  static get opCache() {
    return shadow(this, "opCache", Object.create(null));
  }
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  static getOperator(op) {
    return PostScriptToken.opCache[op] ||= new PostScriptToken(PostScriptTokenTypes.OPERATOR, op);
  }
  static get LBRACE() {
    return shadow(this, "LBRACE", new PostScriptToken(PostScriptTokenTypes.LBRACE, "{"));
  }
  static get RBRACE() {
    return shadow(this, "RBRACE", new PostScriptToken(PostScriptTokenTypes.RBRACE, "}"));
  }
  static get IF() {
    return shadow(this, "IF", new PostScriptToken(PostScriptTokenTypes.IF, "IF"));
  }
  static get IFELSE() {
    return shadow(this, "IFELSE", new PostScriptToken(PostScriptTokenTypes.IFELSE, "IFELSE"));
  }
}
class PostScriptLexer {
  constructor(stream) {
    this.stream = stream;
    this.nextChar();
    this.strBuf = [];
  }
  nextChar() {
    return this.currentChar = this.stream.getByte();
  }
  getToken() {
    let comment = false;
    let ch = this.currentChar;
    while (true) {
      if (ch < 0) {
        return EOF;
      }
      if (comment) {
        if (ch === 0x0a || ch === 0x0d) {
          comment = false;
        }
      } else if (ch === 0x25) {
        comment = true;
      } else if (!isWhiteSpace(ch)) {
        break;
      }
      ch = this.nextChar();
    }
    switch (ch | 0) {
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x2b:
      case 0x2d:
      case 0x2e:
        return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());
      case 0x7b:
        this.nextChar();
        return PostScriptToken.LBRACE;
      case 0x7d:
        this.nextChar();
        return PostScriptToken.RBRACE;
    }
    const strBuf = this.strBuf;
    strBuf.length = 0;
    strBuf[0] = String.fromCharCode(ch);
    while ((ch = this.nextChar()) >= 0 && (ch >= 0x41 && ch <= 0x5a || ch >= 0x61 && ch <= 0x7a)) {
      strBuf.push(String.fromCharCode(ch));
    }
    const str = strBuf.join("");
    switch (str.toLowerCase()) {
      case "if":
        return PostScriptToken.IF;
      case "ifelse":
        return PostScriptToken.IFELSE;
      default:
        return PostScriptToken.getOperator(str);
    }
  }
  getNumber() {
    let ch = this.currentChar;
    const strBuf = this.strBuf;
    strBuf.length = 0;
    strBuf[0] = String.fromCharCode(ch);
    while ((ch = this.nextChar()) >= 0) {
      if (ch >= 0x30 && ch <= 0x39 || ch === 0x2d || ch === 0x2e) {
        strBuf.push(String.fromCharCode(ch));
      } else {
        break;
      }
    }
    const value = parseFloat(strBuf.join(""));
    if (isNaN(value)) {
      throw new FormatError(\`Invalid floating point number: \${value}\`);
    }
    return value;
  }
}

;// ./src/core/image_utils.js


class BaseLocalCache {
  constructor(options) {
    this._onlyRefs = options?.onlyRefs === true;
    if (!this._onlyRefs) {
      this._nameRefMap = new Map();
      this._imageMap = new Map();
    }
    this._imageCache = new RefSetCache();
  }
  getByName(name) {
    if (this._onlyRefs) {
      unreachable("Should not call \`getByName\` method.");
    }
    const ref = this._nameRefMap.get(name);
    if (ref) {
      return this.getByRef(ref);
    }
    return this._imageMap.get(name) || null;
  }
  getByRef(ref) {
    return this._imageCache.get(ref) || null;
  }
  set(name, ref, data) {
    unreachable("Abstract method \`set\` called.");
  }
}
class LocalImageCache extends BaseLocalCache {
  set(name, ref = null, data) {
    if (typeof name !== "string") {
      throw new Error('LocalImageCache.set - expected "name" argument.');
    }
    if (ref) {
      if (this._imageCache.has(ref)) {
        return;
      }
      this._nameRefMap.set(name, ref);
      this._imageCache.put(ref, data);
      return;
    }
    if (this._imageMap.has(name)) {
      return;
    }
    this._imageMap.set(name, data);
  }
}
class LocalColorSpaceCache extends BaseLocalCache {
  set(name = null, ref = null, data) {
    if (typeof name !== "string" && !ref) {
      throw new Error('LocalColorSpaceCache.set - expected "name" and/or "ref" argument.');
    }
    if (ref) {
      if (this._imageCache.has(ref)) {
        return;
      }
      if (name !== null) {
        this._nameRefMap.set(name, ref);
      }
      this._imageCache.put(ref, data);
      return;
    }
    if (this._imageMap.has(name)) {
      return;
    }
    this._imageMap.set(name, data);
  }
}
class LocalFunctionCache extends BaseLocalCache {
  constructor(options) {
    super({
      onlyRefs: true
    });
  }
  set(name = null, ref, data) {
    if (!ref) {
      throw new Error('LocalFunctionCache.set - expected "ref" argument.');
    }
    if (this._imageCache.has(ref)) {
      return;
    }
    this._imageCache.put(ref, data);
  }
}
class LocalGStateCache extends BaseLocalCache {
  set(name, ref = null, data) {
    if (typeof name !== "string") {
      throw new Error('LocalGStateCache.set - expected "name" argument.');
    }
    if (ref) {
      if (this._imageCache.has(ref)) {
        return;
      }
      this._nameRefMap.set(name, ref);
      this._imageCache.put(ref, data);
      return;
    }
    if (this._imageMap.has(name)) {
      return;
    }
    this._imageMap.set(name, data);
  }
}
class LocalTilingPatternCache extends BaseLocalCache {
  constructor(options) {
    super({
      onlyRefs: true
    });
  }
  set(name = null, ref, data) {
    if (!ref) {
      throw new Error('LocalTilingPatternCache.set - expected "ref" argument.');
    }
    if (this._imageCache.has(ref)) {
      return;
    }
    this._imageCache.put(ref, data);
  }
}
class RegionalImageCache extends BaseLocalCache {
  constructor(options) {
    super({
      onlyRefs: true
    });
  }
  set(name = null, ref, data) {
    if (!ref) {
      throw new Error('RegionalImageCache.set - expected "ref" argument.');
    }
    if (this._imageCache.has(ref)) {
      return;
    }
    this._imageCache.put(ref, data);
  }
}
class GlobalColorSpaceCache extends BaseLocalCache {
  constructor(options) {
    super({
      onlyRefs: true
    });
  }
  set(name = null, ref, data) {
    if (!ref) {
      throw new Error('GlobalColorSpaceCache.set - expected "ref" argument.');
    }
    if (this._imageCache.has(ref)) {
      return;
    }
    this._imageCache.put(ref, data);
  }
  clear() {
    this._imageCache.clear();
  }
}
class GlobalImageCache {
  static NUM_PAGES_THRESHOLD = 2;
  static MIN_IMAGES_TO_CACHE = 10;
  static MAX_BYTE_SIZE = 5e7;
  #decodeFailedSet = new RefSet();
  constructor() {
    this._refCache = new RefSetCache();
    this._imageCache = new RefSetCache();
  }
  get #byteSize() {
    let byteSize = 0;
    for (const imageData of this._imageCache) {
      byteSize += imageData.byteSize;
    }
    return byteSize;
  }
  get #cacheLimitReached() {
    if (this._imageCache.size < GlobalImageCache.MIN_IMAGES_TO_CACHE) {
      return false;
    }
    if (this.#byteSize < GlobalImageCache.MAX_BYTE_SIZE) {
      return false;
    }
    return true;
  }
  shouldCache(ref, pageIndex) {
    let pageIndexSet = this._refCache.get(ref);
    if (!pageIndexSet) {
      pageIndexSet = new Set();
      this._refCache.put(ref, pageIndexSet);
    }
    pageIndexSet.add(pageIndex);
    if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {
      return false;
    }
    if (!this._imageCache.has(ref) && this.#cacheLimitReached) {
      return false;
    }
    return true;
  }
  addDecodeFailed(ref) {
    this.#decodeFailedSet.put(ref);
  }
  hasDecodeFailed(ref) {
    return this.#decodeFailedSet.has(ref);
  }
  addByteSize(ref, byteSize) {
    const imageData = this._imageCache.get(ref);
    if (!imageData) {
      return;
    }
    if (imageData.byteSize) {
      return;
    }
    imageData.byteSize = byteSize;
  }
  getData(ref, pageIndex) {
    const pageIndexSet = this._refCache.get(ref);
    if (!pageIndexSet) {
      return null;
    }
    if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {
      return null;
    }
    const imageData = this._imageCache.get(ref);
    if (!imageData) {
      return null;
    }
    pageIndexSet.add(pageIndex);
    return imageData;
  }
  setData(ref, data) {
    if (!this._refCache.has(ref)) {
      throw new Error('GlobalImageCache.setData - expected "shouldCache" to have been called.');
    }
    if (this._imageCache.has(ref)) {
      return;
    }
    if (this.#cacheLimitReached) {
      warn("GlobalImageCache.setData - cache limit reached.");
      return;
    }
    this._imageCache.put(ref, data);
  }
  clear(onlyData = false) {
    if (!onlyData) {
      this.#decodeFailedSet.clear();
      this._refCache.clear();
    }
    this._imageCache.clear();
  }
}

;// ./src/core/function.js






class PDFFunctionFactory {
  constructor({
    xref,
    isEvalSupported = true
  }) {
    this.xref = xref;
    this.isEvalSupported = isEvalSupported !== false;
  }
  create(fn, parseArray = false) {
    let fnRef, parsedFn;
    if (fn instanceof Ref) {
      fnRef = fn;
    } else if (fn instanceof Dict) {
      fnRef = fn.objId;
    } else if (fn instanceof BaseStream) {
      fnRef = fn.dict?.objId;
    }
    if (fnRef) {
      const cachedFn = this._localFunctionCache.getByRef(fnRef);
      if (cachedFn) {
        return cachedFn;
      }
    }
    const fnObj = this.xref.fetchIfRef(fn);
    if (Array.isArray(fnObj)) {
      if (!parseArray) {
        throw new Error('PDFFunctionFactory.create - expected "parseArray" argument.');
      }
      parsedFn = PDFFunction.parseArray(this, fnObj);
    } else {
      parsedFn = PDFFunction.parse(this, fnObj);
    }
    if (fnRef) {
      this._localFunctionCache.set(null, fnRef, parsedFn);
    }
    return parsedFn;
  }
  get _localFunctionCache() {
    return shadow(this, "_localFunctionCache", new LocalFunctionCache());
  }
}
function toNumberArray(arr) {
  if (!Array.isArray(arr)) {
    return null;
  }
  if (!isNumberArray(arr, null)) {
    return arr.map(x => +x);
  }
  return arr;
}
class PDFFunction {
  static getSampleArray(size, outputSize, bps, stream) {
    let i, ii;
    let length = 1;
    for (i = 0, ii = size.length; i < ii; i++) {
      length *= size[i];
    }
    length *= outputSize;
    const array = new Array(length);
    let codeSize = 0;
    let codeBuf = 0;
    const sampleMul = 1.0 / (2.0 ** bps - 1);
    const strBytes = stream.getBytes((length * bps + 7) / 8);
    let strIdx = 0;
    for (i = 0; i < length; i++) {
      while (codeSize < bps) {
        codeBuf <<= 8;
        codeBuf |= strBytes[strIdx++];
        codeSize += 8;
      }
      codeSize -= bps;
      array[i] = (codeBuf >> codeSize) * sampleMul;
      codeBuf &= (1 << codeSize) - 1;
    }
    return array;
  }
  static parse(factory, fn) {
    const dict = fn.dict || fn;
    const typeNum = dict.get("FunctionType");
    switch (typeNum) {
      case 0:
        return this.constructSampled(factory, fn, dict);
      case 1:
        break;
      case 2:
        return this.constructInterpolated(factory, dict);
      case 3:
        return this.constructStiched(factory, dict);
      case 4:
        return this.constructPostScript(factory, fn, dict);
    }
    throw new FormatError("Unknown type of function");
  }
  static parseArray(factory, fnObj) {
    const {
      xref
    } = factory;
    const fnArray = [];
    for (const fn of fnObj) {
      fnArray.push(this.parse(factory, xref.fetchIfRef(fn)));
    }
    return function (src, srcOffset, dest, destOffset) {
      for (let i = 0, ii = fnArray.length; i < ii; i++) {
        fnArray[i](src, srcOffset, dest, destOffset + i);
      }
    };
  }
  static constructSampled(factory, fn, dict) {
    function toMultiArray(arr) {
      const inputLength = arr.length;
      const out = [];
      let index = 0;
      for (let i = 0; i < inputLength; i += 2) {
        out[index++] = [arr[i], arr[i + 1]];
      }
      return out;
    }
    function interpolate(x, xmin, xmax, ymin, ymax) {
      return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));
    }
    let domain = toNumberArray(dict.getArray("Domain"));
    let range = toNumberArray(dict.getArray("Range"));
    if (!domain || !range) {
      throw new FormatError("No domain or range");
    }
    const inputSize = domain.length / 2;
    const outputSize = range.length / 2;
    domain = toMultiArray(domain);
    range = toMultiArray(range);
    const size = toNumberArray(dict.getArray("Size"));
    const bps = dict.get("BitsPerSample");
    const order = dict.get("Order") || 1;
    if (order !== 1) {
      info("No support for cubic spline interpolation: " + order);
    }
    let encode = toNumberArray(dict.getArray("Encode"));
    if (!encode) {
      encode = [];
      for (let i = 0; i < inputSize; ++i) {
        encode.push([0, size[i] - 1]);
      }
    } else {
      encode = toMultiArray(encode);
    }
    let decode = toNumberArray(dict.getArray("Decode"));
    decode = !decode ? range : toMultiArray(decode);
    const samples = this.getSampleArray(size, outputSize, bps, fn);
    return function constructSampledFn(src, srcOffset, dest, destOffset) {
      const cubeVertices = 1 << inputSize;
      const cubeN = new Float64Array(cubeVertices).fill(1);
      const cubeVertex = new Uint32Array(cubeVertices);
      let i, j;
      let k = outputSize,
        pos = 1;
      for (i = 0; i < inputSize; ++i) {
        const domain_2i = domain[i][0];
        const domain_2i_1 = domain[i][1];
        const xi = MathClamp(src[srcOffset + i], domain_2i, domain_2i_1);
        let e = interpolate(xi, domain_2i, domain_2i_1, encode[i][0], encode[i][1]);
        const size_i = size[i];
        e = MathClamp(e, 0, size_i - 1);
        const e0 = e < size_i - 1 ? Math.floor(e) : e - 1;
        const n0 = e0 + 1 - e;
        const n1 = e - e0;
        const offset0 = e0 * k;
        const offset1 = offset0 + k;
        for (j = 0; j < cubeVertices; j++) {
          if (j & pos) {
            cubeN[j] *= n1;
            cubeVertex[j] += offset1;
          } else {
            cubeN[j] *= n0;
            cubeVertex[j] += offset0;
          }
        }
        k *= size_i;
        pos <<= 1;
      }
      for (j = 0; j < outputSize; ++j) {
        let rj = 0;
        for (i = 0; i < cubeVertices; i++) {
          rj += samples[cubeVertex[i] + j] * cubeN[i];
        }
        rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);
        dest[destOffset + j] = MathClamp(rj, range[j][0], range[j][1]);
      }
    };
  }
  static constructInterpolated(factory, dict) {
    const c0 = toNumberArray(dict.getArray("C0")) || [0];
    const c1 = toNumberArray(dict.getArray("C1")) || [1];
    const n = dict.get("N");
    const diff = [];
    for (let i = 0, ii = c0.length; i < ii; ++i) {
      diff.push(c1[i] - c0[i]);
    }
    const length = diff.length;
    return function constructInterpolatedFn(src, srcOffset, dest, destOffset) {
      const x = n === 1 ? src[srcOffset] : src[srcOffset] ** n;
      for (let j = 0; j < length; ++j) {
        dest[destOffset + j] = c0[j] + x * diff[j];
      }
    };
  }
  static constructStiched(factory, dict) {
    const domain = toNumberArray(dict.getArray("Domain"));
    if (!domain) {
      throw new FormatError("No domain");
    }
    const inputSize = domain.length / 2;
    if (inputSize !== 1) {
      throw new FormatError("Bad domain for stiched function");
    }
    const {
      xref
    } = factory;
    const fns = [];
    for (const fn of dict.get("Functions")) {
      fns.push(this.parse(factory, xref.fetchIfRef(fn)));
    }
    const bounds = toNumberArray(dict.getArray("Bounds"));
    const encode = toNumberArray(dict.getArray("Encode"));
    const tmpBuf = new Float32Array(1);
    return function constructStichedFn(src, srcOffset, dest, destOffset) {
      const v = MathClamp(src[srcOffset], domain[0], domain[1]);
      const length = bounds.length;
      let i;
      for (i = 0; i < length; ++i) {
        if (v < bounds[i]) {
          break;
        }
      }
      let dmin = domain[0];
      if (i > 0) {
        dmin = bounds[i - 1];
      }
      let dmax = domain[1];
      if (i < bounds.length) {
        dmax = bounds[i];
      }
      const rmin = encode[2 * i];
      const rmax = encode[2 * i + 1];
      tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);
      fns[i](tmpBuf, 0, dest, destOffset);
    };
  }
  static constructPostScript(factory, fn, dict) {
    const domain = toNumberArray(dict.getArray("Domain"));
    const range = toNumberArray(dict.getArray("Range"));
    if (!domain) {
      throw new FormatError("No domain.");
    }
    if (!range) {
      throw new FormatError("No range.");
    }
    const lexer = new PostScriptLexer(fn);
    const parser = new PostScriptParser(lexer);
    const code = parser.parse();
    if (factory.isEvalSupported && FeatureTest.isEvalSupported) {
      const compiled = new PostScriptCompiler().compile(code, domain, range);
      if (compiled) {
        return new Function("src", "srcOffset", "dest", "destOffset", compiled);
      }
    }
    info("Unable to compile PS function");
    const numOutputs = range.length >> 1;
    const numInputs = domain.length >> 1;
    const evaluator = new PostScriptEvaluator(code);
    const cache = Object.create(null);
    const MAX_CACHE_SIZE = 2048 * 4;
    let cache_available = MAX_CACHE_SIZE;
    const tmpBuf = new Float32Array(numInputs);
    return function constructPostScriptFn(src, srcOffset, dest, destOffset) {
      let i, value;
      let key = "";
      const input = tmpBuf;
      for (i = 0; i < numInputs; i++) {
        value = src[srcOffset + i];
        input[i] = value;
        key += value + "_";
      }
      const cachedValue = cache[key];
      if (cachedValue !== undefined) {
        dest.set(cachedValue, destOffset);
        return;
      }
      const output = new Float32Array(numOutputs);
      const stack = evaluator.execute(input);
      const stackIndex = stack.length - numOutputs;
      for (i = 0; i < numOutputs; i++) {
        value = stack[stackIndex + i];
        let bound = range[i * 2];
        if (value < bound) {
          value = bound;
        } else {
          bound = range[i * 2 + 1];
          if (value > bound) {
            value = bound;
          }
        }
        output[i] = value;
      }
      if (cache_available > 0) {
        cache_available--;
        cache[key] = output;
      }
      dest.set(output, destOffset);
    };
  }
}
function isPDFFunction(v) {
  let fnDict;
  if (v instanceof Dict) {
    fnDict = v;
  } else if (v instanceof BaseStream) {
    fnDict = v.dict;
  } else {
    return false;
  }
  return fnDict.has("FunctionType");
}
class PostScriptStack {
  static MAX_STACK_SIZE = 100;
  constructor(initialStack) {
    this.stack = initialStack ? Array.from(initialStack) : [];
  }
  push(value) {
    if (this.stack.length >= PostScriptStack.MAX_STACK_SIZE) {
      throw new Error("PostScript function stack overflow.");
    }
    this.stack.push(value);
  }
  pop() {
    if (this.stack.length <= 0) {
      throw new Error("PostScript function stack underflow.");
    }
    return this.stack.pop();
  }
  copy(n) {
    if (this.stack.length + n >= PostScriptStack.MAX_STACK_SIZE) {
      throw new Error("PostScript function stack overflow.");
    }
    const stack = this.stack;
    for (let i = stack.length - n, j = n - 1; j >= 0; j--, i++) {
      stack.push(stack[i]);
    }
  }
  index(n) {
    this.push(this.stack[this.stack.length - n - 1]);
  }
  roll(n, p) {
    const stack = this.stack;
    const l = stack.length - n;
    const r = stack.length - 1;
    const c = l + (p - Math.floor(p / n) * n);
    for (let i = l, j = r; i < j; i++, j--) {
      const t = stack[i];
      stack[i] = stack[j];
      stack[j] = t;
    }
    for (let i = l, j = c - 1; i < j; i++, j--) {
      const t = stack[i];
      stack[i] = stack[j];
      stack[j] = t;
    }
    for (let i = c, j = r; i < j; i++, j--) {
      const t = stack[i];
      stack[i] = stack[j];
      stack[j] = t;
    }
  }
}
class PostScriptEvaluator {
  constructor(operators) {
    this.operators = operators;
  }
  execute(initialStack) {
    const stack = new PostScriptStack(initialStack);
    let counter = 0;
    const operators = this.operators;
    const length = operators.length;
    let operator, a, b;
    while (counter < length) {
      operator = operators[counter++];
      if (typeof operator === "number") {
        stack.push(operator);
        continue;
      }
      switch (operator) {
        case "jz":
          b = stack.pop();
          a = stack.pop();
          if (!a) {
            counter = b;
          }
          break;
        case "j":
          a = stack.pop();
          counter = a;
          break;
        case "abs":
          a = stack.pop();
          stack.push(Math.abs(a));
          break;
        case "add":
          b = stack.pop();
          a = stack.pop();
          stack.push(a + b);
          break;
        case "and":
          b = stack.pop();
          a = stack.pop();
          if (typeof a === "boolean" && typeof b === "boolean") {
            stack.push(a && b);
          } else {
            stack.push(a & b);
          }
          break;
        case "atan":
          b = stack.pop();
          a = stack.pop();
          a = Math.atan2(a, b) / Math.PI * 180;
          if (a < 0) {
            a += 360;
          }
          stack.push(a);
          break;
        case "bitshift":
          b = stack.pop();
          a = stack.pop();
          if (a > 0) {
            stack.push(a << b);
          } else {
            stack.push(a >> b);
          }
          break;
        case "ceiling":
          a = stack.pop();
          stack.push(Math.ceil(a));
          break;
        case "copy":
          a = stack.pop();
          stack.copy(a);
          break;
        case "cos":
          a = stack.pop();
          stack.push(Math.cos(a % 360 / 180 * Math.PI));
          break;
        case "cvi":
          a = stack.pop() | 0;
          stack.push(a);
          break;
        case "cvr":
          break;
        case "div":
          b = stack.pop();
          a = stack.pop();
          stack.push(a / b);
          break;
        case "dup":
          stack.copy(1);
          break;
        case "eq":
          b = stack.pop();
          a = stack.pop();
          stack.push(a === b);
          break;
        case "exch":
          stack.roll(2, 1);
          break;
        case "exp":
          b = stack.pop();
          a = stack.pop();
          stack.push(a ** b);
          break;
        case "false":
          stack.push(false);
          break;
        case "floor":
          a = stack.pop();
          stack.push(Math.floor(a));
          break;
        case "ge":
          b = stack.pop();
          a = stack.pop();
          stack.push(a >= b);
          break;
        case "gt":
          b = stack.pop();
          a = stack.pop();
          stack.push(a > b);
          break;
        case "idiv":
          b = stack.pop();
          a = stack.pop();
          stack.push(a / b | 0);
          break;
        case "index":
          a = stack.pop();
          stack.index(a);
          break;
        case "le":
          b = stack.pop();
          a = stack.pop();
          stack.push(a <= b);
          break;
        case "ln":
          a = stack.pop();
          stack.push(Math.log(a));
          break;
        case "log":
          a = stack.pop();
          stack.push(Math.log10(a));
          break;
        case "lt":
          b = stack.pop();
          a = stack.pop();
          stack.push(a < b);
          break;
        case "mod":
          b = stack.pop();
          a = stack.pop();
          stack.push(a % b);
          break;
        case "mul":
          b = stack.pop();
          a = stack.pop();
          stack.push(a * b);
          break;
        case "ne":
          b = stack.pop();
          a = stack.pop();
          stack.push(a !== b);
          break;
        case "neg":
          a = stack.pop();
          stack.push(-a);
          break;
        case "not":
          a = stack.pop();
          if (typeof a === "boolean") {
            stack.push(!a);
          } else {
            stack.push(~a);
          }
          break;
        case "or":
          b = stack.pop();
          a = stack.pop();
          if (typeof a === "boolean" && typeof b === "boolean") {
            stack.push(a || b);
          } else {
            stack.push(a | b);
          }
          break;
        case "pop":
          stack.pop();
          break;
        case "roll":
          b = stack.pop();
          a = stack.pop();
          stack.roll(a, b);
          break;
        case "round":
          a = stack.pop();
          stack.push(Math.round(a));
          break;
        case "sin":
          a = stack.pop();
          stack.push(Math.sin(a % 360 / 180 * Math.PI));
          break;
        case "sqrt":
          a = stack.pop();
          stack.push(Math.sqrt(a));
          break;
        case "sub":
          b = stack.pop();
          a = stack.pop();
          stack.push(a - b);
          break;
        case "true":
          stack.push(true);
          break;
        case "truncate":
          a = stack.pop();
          a = a < 0 ? Math.ceil(a) : Math.floor(a);
          stack.push(a);
          break;
        case "xor":
          b = stack.pop();
          a = stack.pop();
          if (typeof a === "boolean" && typeof b === "boolean") {
            stack.push(a !== b);
          } else {
            stack.push(a ^ b);
          }
          break;
        default:
          throw new FormatError(\`Unknown operator \${operator}\`);
      }
    }
    return stack.stack;
  }
}
class AstNode {
  constructor(type) {
    this.type = type;
  }
  visit(visitor) {
    unreachable("abstract method");
  }
}
class AstArgument extends AstNode {
  constructor(index, min, max) {
    super("args");
    this.index = index;
    this.min = min;
    this.max = max;
  }
  visit(visitor) {
    visitor.visitArgument(this);
  }
}
class AstLiteral extends AstNode {
  constructor(number) {
    super("literal");
    this.number = number;
    this.min = number;
    this.max = number;
  }
  visit(visitor) {
    visitor.visitLiteral(this);
  }
}
class AstBinaryOperation extends AstNode {
  constructor(op, arg1, arg2, min, max) {
    super("binary");
    this.op = op;
    this.arg1 = arg1;
    this.arg2 = arg2;
    this.min = min;
    this.max = max;
  }
  visit(visitor) {
    visitor.visitBinaryOperation(this);
  }
}
class AstMin extends AstNode {
  constructor(arg, max) {
    super("max");
    this.arg = arg;
    this.min = arg.min;
    this.max = max;
  }
  visit(visitor) {
    visitor.visitMin(this);
  }
}
class AstVariable extends AstNode {
  constructor(index, min, max) {
    super("var");
    this.index = index;
    this.min = min;
    this.max = max;
  }
  visit(visitor) {
    visitor.visitVariable(this);
  }
}
class AstVariableDefinition extends AstNode {
  constructor(variable, arg) {
    super("definition");
    this.variable = variable;
    this.arg = arg;
  }
  visit(visitor) {
    visitor.visitVariableDefinition(this);
  }
}
class ExpressionBuilderVisitor {
  constructor() {
    this.parts = [];
  }
  visitArgument(arg) {
    this.parts.push("Math.max(", arg.min, ", Math.min(", arg.max, ", src[srcOffset + ", arg.index, "]))");
  }
  visitVariable(variable) {
    this.parts.push("v", variable.index);
  }
  visitLiteral(literal) {
    this.parts.push(literal.number);
  }
  visitBinaryOperation(operation) {
    this.parts.push("(");
    operation.arg1.visit(this);
    this.parts.push(" ", operation.op, " ");
    operation.arg2.visit(this);
    this.parts.push(")");
  }
  visitVariableDefinition(definition) {
    this.parts.push("var ");
    definition.variable.visit(this);
    this.parts.push(" = ");
    definition.arg.visit(this);
    this.parts.push(";");
  }
  visitMin(max) {
    this.parts.push("Math.min(");
    max.arg.visit(this);
    this.parts.push(", ", max.max, ")");
  }
  toString() {
    return this.parts.join("");
  }
}
function buildAddOperation(num1, num2) {
  if (num2.type === "literal" && num2.number === 0) {
    return num1;
  }
  if (num1.type === "literal" && num1.number === 0) {
    return num2;
  }
  if (num2.type === "literal" && num1.type === "literal") {
    return new AstLiteral(num1.number + num2.number);
  }
  return new AstBinaryOperation("+", num1, num2, num1.min + num2.min, num1.max + num2.max);
}
function buildMulOperation(num1, num2) {
  if (num2.type === "literal") {
    if (num2.number === 0) {
      return new AstLiteral(0);
    } else if (num2.number === 1) {
      return num1;
    } else if (num1.type === "literal") {
      return new AstLiteral(num1.number * num2.number);
    }
  }
  if (num1.type === "literal") {
    if (num1.number === 0) {
      return new AstLiteral(0);
    } else if (num1.number === 1) {
      return num2;
    }
  }
  const min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);
  const max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);
  return new AstBinaryOperation("*", num1, num2, min, max);
}
function buildSubOperation(num1, num2) {
  if (num2.type === "literal") {
    if (num2.number === 0) {
      return num1;
    } else if (num1.type === "literal") {
      return new AstLiteral(num1.number - num2.number);
    }
  }
  if (num2.type === "binary" && num2.op === "-" && num1.type === "literal" && num1.number === 1 && num2.arg1.type === "literal" && num2.arg1.number === 1) {
    return num2.arg2;
  }
  return new AstBinaryOperation("-", num1, num2, num1.min - num2.max, num1.max - num2.min);
}
function buildMinOperation(num1, max) {
  if (num1.min >= max) {
    return new AstLiteral(max);
  } else if (num1.max <= max) {
    return num1;
  }
  return new AstMin(num1, max);
}
class PostScriptCompiler {
  compile(code, domain, range) {
    const stack = [];
    const instructions = [];
    const inputSize = domain.length >> 1,
      outputSize = range.length >> 1;
    let lastRegister = 0;
    let n, j;
    let num1, num2, ast1, ast2, tmpVar, item;
    for (let i = 0; i < inputSize; i++) {
      stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));
    }
    for (let i = 0, ii = code.length; i < ii; i++) {
      item = code[i];
      if (typeof item === "number") {
        stack.push(new AstLiteral(item));
        continue;
      }
      switch (item) {
        case "add":
          if (stack.length < 2) {
            return null;
          }
          num2 = stack.pop();
          num1 = stack.pop();
          stack.push(buildAddOperation(num1, num2));
          break;
        case "cvr":
          if (stack.length < 1) {
            return null;
          }
          break;
        case "mul":
          if (stack.length < 2) {
            return null;
          }
          num2 = stack.pop();
          num1 = stack.pop();
          stack.push(buildMulOperation(num1, num2));
          break;
        case "sub":
          if (stack.length < 2) {
            return null;
          }
          num2 = stack.pop();
          num1 = stack.pop();
          stack.push(buildSubOperation(num1, num2));
          break;
        case "exch":
          if (stack.length < 2) {
            return null;
          }
          ast1 = stack.pop();
          ast2 = stack.pop();
          stack.push(ast1, ast2);
          break;
        case "pop":
          if (stack.length < 1) {
            return null;
          }
          stack.pop();
          break;
        case "index":
          if (stack.length < 1) {
            return null;
          }
          num1 = stack.pop();
          if (num1.type !== "literal") {
            return null;
          }
          n = num1.number;
          if (n < 0 || !Number.isInteger(n) || stack.length < n) {
            return null;
          }
          ast1 = stack[stack.length - n - 1];
          if (ast1.type === "literal" || ast1.type === "var") {
            stack.push(ast1);
            break;
          }
          tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
          stack[stack.length - n - 1] = tmpVar;
          stack.push(tmpVar);
          instructions.push(new AstVariableDefinition(tmpVar, ast1));
          break;
        case "dup":
          if (stack.length < 1) {
            return null;
          }
          if (typeof code[i + 1] === "number" && code[i + 2] === "gt" && code[i + 3] === i + 7 && code[i + 4] === "jz" && code[i + 5] === "pop" && code[i + 6] === code[i + 1]) {
            num1 = stack.pop();
            stack.push(buildMinOperation(num1, code[i + 1]));
            i += 6;
            break;
          }
          ast1 = stack.at(-1);
          if (ast1.type === "literal" || ast1.type === "var") {
            stack.push(ast1);
            break;
          }
          tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
          stack[stack.length - 1] = tmpVar;
          stack.push(tmpVar);
          instructions.push(new AstVariableDefinition(tmpVar, ast1));
          break;
        case "roll":
          if (stack.length < 2) {
            return null;
          }
          num2 = stack.pop();
          num1 = stack.pop();
          if (num2.type !== "literal" || num1.type !== "literal") {
            return null;
          }
          j = num2.number;
          n = num1.number;
          if (n <= 0 || !Number.isInteger(n) || !Number.isInteger(j) || stack.length < n) {
            return null;
          }
          j = (j % n + n) % n;
          if (j === 0) {
            break;
          }
          stack.push(...stack.splice(stack.length - n, n - j));
          break;
        default:
          return null;
      }
    }
    if (stack.length !== outputSize) {
      return null;
    }
    const result = [];
    for (const instruction of instructions) {
      const statementBuilder = new ExpressionBuilderVisitor();
      instruction.visit(statementBuilder);
      result.push(statementBuilder.toString());
    }
    for (let i = 0, ii = stack.length; i < ii; i++) {
      const expr = stack[i],
        statementBuilder = new ExpressionBuilderVisitor();
      expr.visit(statementBuilder);
      const min = range[i * 2],
        max = range[i * 2 + 1];
      const out = [statementBuilder.toString()];
      if (min > expr.min) {
        out.unshift("Math.max(", min, ", ");
        out.push(")");
      }
      if (max < expr.max) {
        out.unshift("Math.min(", max, ", ");
        out.push(")");
      }
      out.unshift("dest[destOffset + ", i, "] = ");
      out.push(";");
      result.push(out.join(""));
    }
    return result.join("\\n");
  }
}

;// ./src/core/bidi.js

const baseTypes = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "ON", "ON", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "ON", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "ON", "ET", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "L", "ON", "ON", "BN", "ON", "ON", "ET", "ET", "EN", "EN", "ON", "L", "ON", "ON", "ON", "EN", "L", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L"];
const arabicTypes = ["AN", "AN", "AN", "AN", "AN", "AN", "ON", "ON", "AL", "ET", "ET", "AL", "CS", "AL", "ON", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "ON", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL"];
function isOdd(i) {
  return (i & 1) !== 0;
}
function isEven(i) {
  return (i & 1) === 0;
}
function findUnequal(arr, start, value) {
  let j, jj;
  for (j = start, jj = arr.length; j < jj; ++j) {
    if (arr[j] !== value) {
      return j;
    }
  }
  return j;
}
function reverseValues(arr, start, end) {
  for (let i = start, j = end - 1; i < j; ++i, --j) {
    const temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
}
function createBidiText(str, isLTR, vertical = false) {
  let dir = "ltr";
  if (vertical) {
    dir = "ttb";
  } else if (!isLTR) {
    dir = "rtl";
  }
  return {
    str,
    dir
  };
}
const chars = [];
const types = [];
function bidi(str, startLevel = -1, vertical = false) {
  let isLTR = true;
  const strLength = str.length;
  if (strLength === 0 || vertical) {
    return createBidiText(str, isLTR, vertical);
  }
  chars.length = strLength;
  types.length = strLength;
  let numBidi = 0;
  let i, ii;
  for (i = 0; i < strLength; ++i) {
    chars[i] = str.charAt(i);
    const charCode = str.charCodeAt(i);
    let charType = "L";
    if (charCode <= 0x00ff) {
      charType = baseTypes[charCode];
    } else if (0x0590 <= charCode && charCode <= 0x05f4) {
      charType = "R";
    } else if (0x0600 <= charCode && charCode <= 0x06ff) {
      charType = arabicTypes[charCode & 0xff];
      if (!charType) {
        warn("Bidi: invalid Unicode character " + charCode.toString(16));
      }
    } else if (0x0700 <= charCode && charCode <= 0x08ac || 0xfb50 <= charCode && charCode <= 0xfdff || 0xfe70 <= charCode && charCode <= 0xfeff) {
      charType = "AL";
    }
    if (charType === "R" || charType === "AL" || charType === "AN") {
      numBidi++;
    }
    types[i] = charType;
  }
  if (numBidi === 0) {
    isLTR = true;
    return createBidiText(str, isLTR);
  }
  if (startLevel === -1) {
    if (numBidi / strLength < 0.3 && strLength > 4) {
      isLTR = true;
      startLevel = 0;
    } else {
      isLTR = false;
      startLevel = 1;
    }
  }
  const levels = [];
  for (i = 0; i < strLength; ++i) {
    levels[i] = startLevel;
  }
  const e = isOdd(startLevel) ? "R" : "L";
  const sor = e;
  const eor = sor;
  let lastType = sor;
  for (i = 0; i < strLength; ++i) {
    if (types[i] === "NSM") {
      types[i] = lastType;
    } else {
      lastType = types[i];
    }
  }
  lastType = sor;
  let t;
  for (i = 0; i < strLength; ++i) {
    t = types[i];
    if (t === "EN") {
      types[i] = lastType === "AL" ? "AN" : "EN";
    } else if (t === "R" || t === "L" || t === "AL") {
      lastType = t;
    }
  }
  for (i = 0; i < strLength; ++i) {
    t = types[i];
    if (t === "AL") {
      types[i] = "R";
    }
  }
  for (i = 1; i < strLength - 1; ++i) {
    if (types[i] === "ES" && types[i - 1] === "EN" && types[i + 1] === "EN") {
      types[i] = "EN";
    }
    if (types[i] === "CS" && (types[i - 1] === "EN" || types[i - 1] === "AN") && types[i + 1] === types[i - 1]) {
      types[i] = types[i - 1];
    }
  }
  for (i = 0; i < strLength; ++i) {
    if (types[i] === "EN") {
      for (let j = i - 1; j >= 0; --j) {
        if (types[j] !== "ET") {
          break;
        }
        types[j] = "EN";
      }
      for (let j = i + 1; j < strLength; ++j) {
        if (types[j] !== "ET") {
          break;
        }
        types[j] = "EN";
      }
    }
  }
  for (i = 0; i < strLength; ++i) {
    t = types[i];
    if (t === "WS" || t === "ES" || t === "ET" || t === "CS") {
      types[i] = "ON";
    }
  }
  lastType = sor;
  for (i = 0; i < strLength; ++i) {
    t = types[i];
    if (t === "EN") {
      types[i] = lastType === "L" ? "L" : "EN";
    } else if (t === "R" || t === "L") {
      lastType = t;
    }
  }
  for (i = 0; i < strLength; ++i) {
    if (types[i] === "ON") {
      const end = findUnequal(types, i + 1, "ON");
      let before = sor;
      if (i > 0) {
        before = types[i - 1];
      }
      let after = eor;
      if (end + 1 < strLength) {
        after = types[end + 1];
      }
      if (before !== "L") {
        before = "R";
      }
      if (after !== "L") {
        after = "R";
      }
      if (before === after) {
        types.fill(before, i, end);
      }
      i = end - 1;
    }
  }
  for (i = 0; i < strLength; ++i) {
    if (types[i] === "ON") {
      types[i] = e;
    }
  }
  for (i = 0; i < strLength; ++i) {
    t = types[i];
    if (isEven(levels[i])) {
      if (t === "R") {
        levels[i] += 1;
      } else if (t === "AN" || t === "EN") {
        levels[i] += 2;
      }
    } else if (t === "L" || t === "AN" || t === "EN") {
      levels[i] += 1;
    }
  }
  let highestLevel = -1;
  let lowestOddLevel = 99;
  let level;
  for (i = 0, ii = levels.length; i < ii; ++i) {
    level = levels[i];
    if (highestLevel < level) {
      highestLevel = level;
    }
    if (lowestOddLevel > level && isOdd(level)) {
      lowestOddLevel = level;
    }
  }
  for (level = highestLevel; level >= lowestOddLevel; --level) {
    let start = -1;
    for (i = 0, ii = levels.length; i < ii; ++i) {
      if (levels[i] < level) {
        if (start >= 0) {
          reverseValues(chars, start, i);
          start = -1;
        }
      } else if (start < 0) {
        start = i;
      }
    }
    if (start >= 0) {
      reverseValues(chars, start, levels.length);
    }
  }
  for (i = 0, ii = chars.length; i < ii; ++i) {
    const ch = chars[i];
    if (ch === "<" || ch === ">") {
      chars[i] = "";
    }
  }
  return createBidiText(chars.join(""), isLTR);
}

;// ./src/core/font_substitutions.js



const NORMAL = {
  style: "normal",
  weight: "normal"
};
const BOLD = {
  style: "normal",
  weight: "bold"
};
const ITALIC = {
  style: "italic",
  weight: "normal"
};
const BOLDITALIC = {
  style: "italic",
  weight: "bold"
};
const substitutionMap = new Map([["Times-Roman", {
  local: ["Times New Roman", "Times-Roman", "Times", "Liberation Serif", "Nimbus Roman", "Nimbus Roman L", "Tinos", "Thorndale", "TeX Gyre Termes", "FreeSerif", "Linux Libertine O", "Libertinus Serif", "DejaVu Serif", "Bitstream Vera Serif", "Ubuntu"],
  style: NORMAL,
  ultimate: "serif"
}], ["Times-Bold", {
  alias: "Times-Roman",
  style: BOLD,
  ultimate: "serif"
}], ["Times-Italic", {
  alias: "Times-Roman",
  style: ITALIC,
  ultimate: "serif"
}], ["Times-BoldItalic", {
  alias: "Times-Roman",
  style: BOLDITALIC,
  ultimate: "serif"
}], ["Helvetica", {
  local: ["Helvetica", "Helvetica Neue", "Arial", "Arial Nova", "Liberation Sans", "Arimo", "Nimbus Sans", "Nimbus Sans L", "A030", "TeX Gyre Heros", "FreeSans", "DejaVu Sans", "Albany", "Bitstream Vera Sans", "Arial Unicode MS", "Microsoft Sans Serif", "Apple Symbols", "Cantarell"],
  path: "LiberationSans-Regular.ttf",
  style: NORMAL,
  ultimate: "sans-serif"
}], ["Helvetica-Bold", {
  alias: "Helvetica",
  path: "LiberationSans-Bold.ttf",
  style: BOLD,
  ultimate: "sans-serif"
}], ["Helvetica-Oblique", {
  alias: "Helvetica",
  path: "LiberationSans-Italic.ttf",
  style: ITALIC,
  ultimate: "sans-serif"
}], ["Helvetica-BoldOblique", {
  alias: "Helvetica",
  path: "LiberationSans-BoldItalic.ttf",
  style: BOLDITALIC,
  ultimate: "sans-serif"
}], ["Courier", {
  local: ["Courier", "Courier New", "Liberation Mono", "Nimbus Mono", "Nimbus Mono L", "Cousine", "Cumberland", "TeX Gyre Cursor", "FreeMono", "Linux Libertine Mono O", "Libertinus Mono"],
  style: NORMAL,
  ultimate: "monospace"
}], ["Courier-Bold", {
  alias: "Courier",
  style: BOLD,
  ultimate: "monospace"
}], ["Courier-Oblique", {
  alias: "Courier",
  style: ITALIC,
  ultimate: "monospace"
}], ["Courier-BoldOblique", {
  alias: "Courier",
  style: BOLDITALIC,
  ultimate: "monospace"
}], ["ArialBlack", {
  local: ["Arial Black"],
  style: {
    style: "normal",
    weight: "900"
  },
  fallback: "Helvetica-Bold"
}], ["ArialBlack-Bold", {
  alias: "ArialBlack"
}], ["ArialBlack-Italic", {
  alias: "ArialBlack",
  style: {
    style: "italic",
    weight: "900"
  },
  fallback: "Helvetica-BoldOblique"
}], ["ArialBlack-BoldItalic", {
  alias: "ArialBlack-Italic"
}], ["ArialNarrow", {
  local: ["Arial Narrow", "Liberation Sans Narrow", "Helvetica Condensed", "Nimbus Sans Narrow", "TeX Gyre Heros Cn"],
  style: NORMAL,
  fallback: "Helvetica"
}], ["ArialNarrow-Bold", {
  alias: "ArialNarrow",
  style: BOLD,
  fallback: "Helvetica-Bold"
}], ["ArialNarrow-Italic", {
  alias: "ArialNarrow",
  style: ITALIC,
  fallback: "Helvetica-Oblique"
}], ["ArialNarrow-BoldItalic", {
  alias: "ArialNarrow",
  style: BOLDITALIC,
  fallback: "Helvetica-BoldOblique"
}], ["Calibri", {
  local: ["Calibri", "Carlito"],
  style: NORMAL,
  fallback: "Helvetica"
}], ["Calibri-Bold", {
  alias: "Calibri",
  style: BOLD,
  fallback: "Helvetica-Bold"
}], ["Calibri-Italic", {
  alias: "Calibri",
  style: ITALIC,
  fallback: "Helvetica-Oblique"
}], ["Calibri-BoldItalic", {
  alias: "Calibri",
  style: BOLDITALIC,
  fallback: "Helvetica-BoldOblique"
}], ["Wingdings", {
  local: ["Wingdings", "URW Dingbats"],
  style: NORMAL
}], ["Wingdings-Regular", {
  alias: "Wingdings"
}], ["Wingdings-Bold", {
  alias: "Wingdings"
}]]);
const fontAliases = new Map([["Arial-Black", "ArialBlack"]]);
function getStyleToAppend(style) {
  switch (style) {
    case BOLD:
      return "Bold";
    case ITALIC:
      return "Italic";
    case BOLDITALIC:
      return "Bold Italic";
    default:
      if (style?.weight === "bold") {
        return "Bold";
      }
      if (style?.style === "italic") {
        return "Italic";
      }
  }
  return "";
}
function getFamilyName(str) {
  const keywords = new Set(["thin", "extralight", "ultralight", "demilight", "semilight", "light", "book", "regular", "normal", "medium", "demibold", "semibold", "bold", "extrabold", "ultrabold", "black", "heavy", "extrablack", "ultrablack", "roman", "italic", "oblique", "ultracondensed", "extracondensed", "condensed", "semicondensed", "normal", "semiexpanded", "expanded", "extraexpanded", "ultraexpanded", "bolditalic"]);
  return str.split(/[- ,+]+/g).filter(tok => !keywords.has(tok.toLowerCase())).join(" ");
}
function generateFont({
  alias,
  local,
  path,
  fallback,
  style,
  ultimate
}, src, localFontPath, useFallback = true, usePath = true, append = "") {
  const result = {
    style: null,
    ultimate: null
  };
  if (local) {
    const extra = append ? \` \${append}\` : "";
    for (const name of local) {
      src.push(\`local(\${name}\${extra})\`);
    }
  }
  if (alias) {
    const substitution = substitutionMap.get(alias);
    const aliasAppend = append || getStyleToAppend(style);
    Object.assign(result, generateFont(substitution, src, localFontPath, useFallback && !fallback, usePath && !path, aliasAppend));
  }
  if (style) {
    result.style = style;
  }
  if (ultimate) {
    result.ultimate = ultimate;
  }
  if (useFallback && fallback) {
    const fallbackInfo = substitutionMap.get(fallback);
    const {
      ultimate: fallbackUltimate
    } = generateFont(fallbackInfo, src, localFontPath, useFallback, usePath && !path, append);
    result.ultimate ||= fallbackUltimate;
  }
  if (usePath && path && localFontPath) {
    src.push(\`url(\${localFontPath}\${path})\`);
  }
  return result;
}
function getFontSubstitution(systemFontCache, idFactory, localFontPath, baseFontName, standardFontName, type) {
  if (baseFontName.startsWith("InvalidPDFjsFont_")) {
    return null;
  }
  if ((type === "TrueType" || type === "Type1") && /^[A-Z]{6}\\+/.test(baseFontName)) {
    baseFontName = baseFontName.slice(7);
  }
  baseFontName = normalizeFontName(baseFontName);
  const key = baseFontName;
  let substitutionInfo = systemFontCache.get(key);
  if (substitutionInfo) {
    return substitutionInfo;
  }
  let substitution = substitutionMap.get(baseFontName);
  if (!substitution) {
    for (const [alias, subst] of fontAliases) {
      if (baseFontName.startsWith(alias)) {
        baseFontName = \`\${subst}\${baseFontName.substring(alias.length)}\`;
        substitution = substitutionMap.get(baseFontName);
        break;
      }
    }
  }
  let mustAddBaseFont = false;
  if (!substitution) {
    substitution = substitutionMap.get(standardFontName);
    mustAddBaseFont = true;
  }
  const loadedName = \`\${idFactory.getDocId()}_s\${idFactory.createFontId()}\`;
  if (!substitution) {
    if (!validateFontName(baseFontName)) {
      warn(\`Cannot substitute the font because of its name: \${baseFontName}\`);
      systemFontCache.set(key, null);
      return null;
    }
    const bold = /bold/gi.test(baseFontName);
    const italic = /oblique|italic/gi.test(baseFontName);
    const style = bold && italic && BOLDITALIC || bold && BOLD || italic && ITALIC || NORMAL;
    substitutionInfo = {
      css: \`"\${getFamilyName(baseFontName)}",\${loadedName}\`,
      guessFallback: true,
      loadedName,
      baseFontName,
      src: \`local(\${baseFontName})\`,
      style
    };
    systemFontCache.set(key, substitutionInfo);
    return substitutionInfo;
  }
  const src = [];
  if (mustAddBaseFont && validateFontName(baseFontName)) {
    src.push(\`local(\${baseFontName})\`);
  }
  const {
    style,
    ultimate
  } = generateFont(substitution, src, localFontPath);
  const guessFallback = ultimate === null;
  const fallback = guessFallback ? "" : \`,\${ultimate}\`;
  substitutionInfo = {
    css: \`"\${getFamilyName(baseFontName)}",\${loadedName}\${fallback}\`,
    guessFallback,
    loadedName,
    baseFontName,
    src: src.join(","),
    style
  };
  systemFontCache.set(key, substitutionInfo);
  return substitutionInfo;
}

;// ./src/shared/murmurhash3.js
const SEED = 0xc3d2e1f0;
const MASK_HIGH = 0xffff0000;
const MASK_LOW = 0xffff;
class MurmurHash3_64 {
  constructor(seed) {
    this.h1 = seed ? seed & 0xffffffff : SEED;
    this.h2 = seed ? seed & 0xffffffff : SEED;
  }
  update(input) {
    let data, length;
    if (typeof input === "string") {
      data = new Uint8Array(input.length * 2);
      length = 0;
      for (let i = 0, ii = input.length; i < ii; i++) {
        const code = input.charCodeAt(i);
        if (code <= 0xff) {
          data[length++] = code;
        } else {
          data[length++] = code >>> 8;
          data[length++] = code & 0xff;
        }
      }
    } else if (ArrayBuffer.isView(input)) {
      data = input.slice();
      length = data.byteLength;
    } else {
      throw new Error("Invalid data format, must be a string or TypedArray.");
    }
    const blockCounts = length >> 2;
    const tailLength = length - blockCounts * 4;
    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);
    let k1 = 0,
      k2 = 0;
    let h1 = this.h1,
      h2 = this.h2;
    const C1 = 0xcc9e2d51,
      C2 = 0x1b873593;
    const C1_LOW = C1 & MASK_LOW,
      C2_LOW = C2 & MASK_LOW;
    for (let i = 0; i < blockCounts; i++) {
      if (i & 1) {
        k1 = dataUint32[i];
        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
        h1 ^= k1;
        h1 = h1 << 13 | h1 >>> 19;
        h1 = h1 * 5 + 0xe6546b64;
      } else {
        k2 = dataUint32[i];
        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;
        k2 = k2 << 15 | k2 >>> 17;
        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;
        h2 ^= k2;
        h2 = h2 << 13 | h2 >>> 19;
        h2 = h2 * 5 + 0xe6546b64;
      }
    }
    k1 = 0;
    switch (tailLength) {
      case 3:
        k1 ^= data[blockCounts * 4 + 2] << 16;
      case 2:
        k1 ^= data[blockCounts * 4 + 1] << 8;
      case 1:
        k1 ^= data[blockCounts * 4];
        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
        if (blockCounts & 1) {
          h1 ^= k1;
        } else {
          h2 ^= k1;
        }
    }
    this.h1 = h1;
    this.h2 = h2;
  }
  hexdigest() {
    let h1 = this.h1,
      h2 = this.h2;
    h1 ^= h2 >>> 1;
    h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;
    h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;
    h1 ^= h2 >>> 1;
    h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;
    h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;
    h1 ^= h2 >>> 1;
    return (h1 >>> 0).toString(16).padStart(8, "0") + (h2 >>> 0).toString(16).padStart(8, "0");
  }
}

;// ./src/core/operator_list.js

function addState(parentState, pattern, checkFn, iterateFn, processFn) {
  let state = parentState;
  for (let i = 0, ii = pattern.length - 1; i < ii; i++) {
    const item = pattern[i];
    state = state[item] ||= [];
  }
  state[pattern.at(-1)] = {
    checkFn,
    iterateFn,
    processFn
  };
}
const InitialState = [];
addState(InitialState, [OPS.save, OPS.transform, OPS.paintInlineImageXObject, OPS.restore], null, function iterateInlineImageGroup(context, i) {
  const fnArray = context.fnArray;
  const iFirstSave = context.iCurr - 3;
  const pos = (i - iFirstSave) % 4;
  switch (pos) {
    case 0:
      return fnArray[i] === OPS.save;
    case 1:
      return fnArray[i] === OPS.transform;
    case 2:
      return fnArray[i] === OPS.paintInlineImageXObject;
    case 3:
      return fnArray[i] === OPS.restore;
  }
  throw new Error(\`iterateInlineImageGroup - invalid pos: \${pos}\`);
}, function foundInlineImageGroup(context, i) {
  const MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;
  const MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;
  const MAX_WIDTH = 1000;
  const IMAGE_PADDING = 1;
  const fnArray = context.fnArray,
    argsArray = context.argsArray;
  const curr = context.iCurr;
  const iFirstSave = curr - 3;
  const iFirstTransform = curr - 2;
  const iFirstPIIXO = curr - 1;
  const count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);
  if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {
    return i - (i - iFirstSave) % 4;
  }
  let maxX = 0;
  const map = [];
  let maxLineHeight = 0;
  let currentX = IMAGE_PADDING,
    currentY = IMAGE_PADDING;
  for (let q = 0; q < count; q++) {
    const transform = argsArray[iFirstTransform + (q << 2)];
    const img = argsArray[iFirstPIIXO + (q << 2)][0];
    if (currentX + img.width > MAX_WIDTH) {
      maxX = Math.max(maxX, currentX);
      currentY += maxLineHeight + 2 * IMAGE_PADDING;
      currentX = 0;
      maxLineHeight = 0;
    }
    map.push({
      transform,
      x: currentX,
      y: currentY,
      w: img.width,
      h: img.height
    });
    currentX += img.width + 2 * IMAGE_PADDING;
    maxLineHeight = Math.max(maxLineHeight, img.height);
  }
  const imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;
  const imgHeight = currentY + maxLineHeight + IMAGE_PADDING;
  const imgData = new Uint8Array(imgWidth * imgHeight * 4);
  const imgRowSize = imgWidth << 2;
  for (let q = 0; q < count; q++) {
    const data = argsArray[iFirstPIIXO + (q << 2)][0].data;
    const rowSize = map[q].w << 2;
    let dataOffset = 0;
    let offset = map[q].x + map[q].y * imgWidth << 2;
    imgData.set(data.subarray(0, rowSize), offset - imgRowSize);
    for (let k = 0, kk = map[q].h; k < kk; k++) {
      imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);
      dataOffset += rowSize;
      offset += imgRowSize;
    }
    imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);
    while (offset >= 0) {
      data[offset - 4] = data[offset];
      data[offset - 3] = data[offset + 1];
      data[offset - 2] = data[offset + 2];
      data[offset - 1] = data[offset + 3];
      data[offset + rowSize] = data[offset + rowSize - 4];
      data[offset + rowSize + 1] = data[offset + rowSize - 3];
      data[offset + rowSize + 2] = data[offset + rowSize - 2];
      data[offset + rowSize + 3] = data[offset + rowSize - 1];
      offset -= imgRowSize;
    }
  }
  const img = {
    width: imgWidth,
    height: imgHeight
  };
  if (context.isOffscreenCanvasSupported) {
    const canvas = new OffscreenCanvas(imgWidth, imgHeight);
    const ctx = canvas.getContext("2d");
    ctx.putImageData(new ImageData(new Uint8ClampedArray(imgData.buffer), imgWidth, imgHeight), 0, 0);
    img.bitmap = canvas.transferToImageBitmap();
    img.data = null;
  } else {
    img.kind = ImageKind.RGBA_32BPP;
    img.data = imgData;
  }
  fnArray.splice(iFirstSave, count * 4, OPS.paintInlineImageXObjectGroup);
  argsArray.splice(iFirstSave, count * 4, [img, map]);
  return iFirstSave + 1;
});
addState(InitialState, [OPS.save, OPS.transform, OPS.paintImageMaskXObject, OPS.restore], null, function iterateImageMaskGroup(context, i) {
  const fnArray = context.fnArray;
  const iFirstSave = context.iCurr - 3;
  const pos = (i - iFirstSave) % 4;
  switch (pos) {
    case 0:
      return fnArray[i] === OPS.save;
    case 1:
      return fnArray[i] === OPS.transform;
    case 2:
      return fnArray[i] === OPS.paintImageMaskXObject;
    case 3:
      return fnArray[i] === OPS.restore;
  }
  throw new Error(\`iterateImageMaskGroup - invalid pos: \${pos}\`);
}, function foundImageMaskGroup(context, i) {
  const MIN_IMAGES_IN_MASKS_BLOCK = 10;
  const MAX_IMAGES_IN_MASKS_BLOCK = 100;
  const MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;
  const fnArray = context.fnArray,
    argsArray = context.argsArray;
  const curr = context.iCurr;
  const iFirstSave = curr - 3;
  const iFirstTransform = curr - 2;
  const iFirstPIMXO = curr - 1;
  let count = Math.floor((i - iFirstSave) / 4);
  if (count < MIN_IMAGES_IN_MASKS_BLOCK) {
    return i - (i - iFirstSave) % 4;
  }
  let isSameImage = false;
  let iTransform, transformArgs;
  const firstPIMXOArg0 = argsArray[iFirstPIMXO][0];
  const firstTransformArg0 = argsArray[iFirstTransform][0],
    firstTransformArg1 = argsArray[iFirstTransform][1],
    firstTransformArg2 = argsArray[iFirstTransform][2],
    firstTransformArg3 = argsArray[iFirstTransform][3];
  if (firstTransformArg1 === firstTransformArg2) {
    isSameImage = true;
    iTransform = iFirstTransform + 4;
    let iPIMXO = iFirstPIMXO + 4;
    for (let q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {
      transformArgs = argsArray[iTransform];
      if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== firstTransformArg1 || transformArgs[2] !== firstTransformArg2 || transformArgs[3] !== firstTransformArg3) {
        if (q < MIN_IMAGES_IN_MASKS_BLOCK) {
          isSameImage = false;
        } else {
          count = q;
        }
        break;
      }
    }
  }
  if (isSameImage) {
    count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);
    const positions = new Float32Array(count * 2);
    iTransform = iFirstTransform;
    for (let q = 0; q < count; q++, iTransform += 4) {
      transformArgs = argsArray[iTransform];
      positions[q << 1] = transformArgs[4];
      positions[(q << 1) + 1] = transformArgs[5];
    }
    fnArray.splice(iFirstSave, count * 4, OPS.paintImageMaskXObjectRepeat);
    argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg1, firstTransformArg2, firstTransformArg3, positions]);
  } else {
    count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);
    const images = [];
    for (let q = 0; q < count; q++) {
      transformArgs = argsArray[iFirstTransform + (q << 2)];
      const maskParams = argsArray[iFirstPIMXO + (q << 2)][0];
      images.push({
        data: maskParams.data,
        width: maskParams.width,
        height: maskParams.height,
        interpolate: maskParams.interpolate,
        count: maskParams.count,
        transform: transformArgs
      });
    }
    fnArray.splice(iFirstSave, count * 4, OPS.paintImageMaskXObjectGroup);
    argsArray.splice(iFirstSave, count * 4, [images]);
  }
  return iFirstSave + 1;
});
addState(InitialState, [OPS.save, OPS.transform, OPS.paintImageXObject, OPS.restore], function (context) {
  const argsArray = context.argsArray;
  const iFirstTransform = context.iCurr - 2;
  return argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0;
}, function iterateImageGroup(context, i) {
  const fnArray = context.fnArray,
    argsArray = context.argsArray;
  const iFirstSave = context.iCurr - 3;
  const pos = (i - iFirstSave) % 4;
  switch (pos) {
    case 0:
      return fnArray[i] === OPS.save;
    case 1:
      if (fnArray[i] !== OPS.transform) {
        return false;
      }
      const iFirstTransform = context.iCurr - 2;
      const firstTransformArg0 = argsArray[iFirstTransform][0];
      const firstTransformArg3 = argsArray[iFirstTransform][3];
      if (argsArray[i][0] !== firstTransformArg0 || argsArray[i][1] !== 0 || argsArray[i][2] !== 0 || argsArray[i][3] !== firstTransformArg3) {
        return false;
      }
      return true;
    case 2:
      if (fnArray[i] !== OPS.paintImageXObject) {
        return false;
      }
      const iFirstPIXO = context.iCurr - 1;
      const firstPIXOArg0 = argsArray[iFirstPIXO][0];
      if (argsArray[i][0] !== firstPIXOArg0) {
        return false;
      }
      return true;
    case 3:
      return fnArray[i] === OPS.restore;
  }
  throw new Error(\`iterateImageGroup - invalid pos: \${pos}\`);
}, function (context, i) {
  const MIN_IMAGES_IN_BLOCK = 3;
  const MAX_IMAGES_IN_BLOCK = 1000;
  const fnArray = context.fnArray,
    argsArray = context.argsArray;
  const curr = context.iCurr;
  const iFirstSave = curr - 3;
  const iFirstTransform = curr - 2;
  const iFirstPIXO = curr - 1;
  const firstPIXOArg0 = argsArray[iFirstPIXO][0];
  const firstTransformArg0 = argsArray[iFirstTransform][0];
  const firstTransformArg3 = argsArray[iFirstTransform][3];
  const count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_BLOCK);
  if (count < MIN_IMAGES_IN_BLOCK) {
    return i - (i - iFirstSave) % 4;
  }
  const positions = new Float32Array(count * 2);
  let iTransform = iFirstTransform;
  for (let q = 0; q < count; q++, iTransform += 4) {
    const transformArgs = argsArray[iTransform];
    positions[q << 1] = transformArgs[4];
    positions[(q << 1) + 1] = transformArgs[5];
  }
  const args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];
  fnArray.splice(iFirstSave, count * 4, OPS.paintImageXObjectRepeat);
  argsArray.splice(iFirstSave, count * 4, args);
  return iFirstSave + 1;
});
addState(InitialState, [OPS.beginText, OPS.setFont, OPS.setTextMatrix, OPS.showText, OPS.endText], null, function iterateShowTextGroup(context, i) {
  const fnArray = context.fnArray,
    argsArray = context.argsArray;
  const iFirstSave = context.iCurr - 4;
  const pos = (i - iFirstSave) % 5;
  switch (pos) {
    case 0:
      return fnArray[i] === OPS.beginText;
    case 1:
      return fnArray[i] === OPS.setFont;
    case 2:
      return fnArray[i] === OPS.setTextMatrix;
    case 3:
      if (fnArray[i] !== OPS.showText) {
        return false;
      }
      const iFirstSetFont = context.iCurr - 3;
      const firstSetFontArg0 = argsArray[iFirstSetFont][0];
      const firstSetFontArg1 = argsArray[iFirstSetFont][1];
      if (argsArray[i][0] !== firstSetFontArg0 || argsArray[i][1] !== firstSetFontArg1) {
        return false;
      }
      return true;
    case 4:
      return fnArray[i] === OPS.endText;
  }
  throw new Error(\`iterateShowTextGroup - invalid pos: \${pos}\`);
}, function (context, i) {
  const MIN_CHARS_IN_BLOCK = 3;
  const MAX_CHARS_IN_BLOCK = 1000;
  const fnArray = context.fnArray,
    argsArray = context.argsArray;
  const curr = context.iCurr;
  const iFirstBeginText = curr - 4;
  const iFirstSetFont = curr - 3;
  const iFirstSetTextMatrix = curr - 2;
  const iFirstShowText = curr - 1;
  const iFirstEndText = curr;
  const firstSetFontArg0 = argsArray[iFirstSetFont][0];
  const firstSetFontArg1 = argsArray[iFirstSetFont][1];
  let count = Math.min(Math.floor((i - iFirstBeginText) / 5), MAX_CHARS_IN_BLOCK);
  if (count < MIN_CHARS_IN_BLOCK) {
    return i - (i - iFirstBeginText) % 5;
  }
  let iFirst = iFirstBeginText;
  if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {
    count++;
    iFirst -= 5;
  }
  let iEndText = iFirst + 4;
  for (let q = 1; q < count; q++) {
    fnArray.splice(iEndText, 3);
    argsArray.splice(iEndText, 3);
    iEndText += 2;
  }
  return iEndText + 1;
});
class NullOptimizer {
  constructor(queue) {
    this.queue = queue;
  }
  _optimize() {}
  push(fn, args) {
    this.queue.fnArray.push(fn);
    this.queue.argsArray.push(args);
    this._optimize();
  }
  flush() {}
  reset() {}
}
class QueueOptimizer extends NullOptimizer {
  constructor(queue) {
    super(queue);
    this.state = null;
    this.context = {
      iCurr: 0,
      fnArray: queue.fnArray,
      argsArray: queue.argsArray,
      isOffscreenCanvasSupported: false
    };
    this.match = null;
    this.lastProcessed = 0;
  }
  set isOffscreenCanvasSupported(value) {
    this.context.isOffscreenCanvasSupported = value;
  }
  _optimize() {
    const fnArray = this.queue.fnArray;
    let i = this.lastProcessed,
      ii = fnArray.length;
    let state = this.state;
    let match = this.match;
    if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {
      this.lastProcessed = ii;
      return;
    }
    const context = this.context;
    while (i < ii) {
      if (match) {
        const iterate = (0, match.iterateFn)(context, i);
        if (iterate) {
          i++;
          continue;
        }
        i = (0, match.processFn)(context, i + 1);
        ii = fnArray.length;
        match = null;
        state = null;
        if (i >= ii) {
          break;
        }
      }
      state = (state || InitialState)[fnArray[i]];
      if (!state || Array.isArray(state)) {
        i++;
        continue;
      }
      context.iCurr = i;
      i++;
      if (state.checkFn && !(0, state.checkFn)(context)) {
        state = null;
        continue;
      }
      match = state;
      state = null;
    }
    this.state = state;
    this.match = match;
    this.lastProcessed = i;
  }
  flush() {
    while (this.match) {
      const length = this.queue.fnArray.length;
      this.lastProcessed = (0, this.match.processFn)(this.context, length);
      this.match = null;
      this.state = null;
      this._optimize();
    }
  }
  reset() {
    this.state = null;
    this.match = null;
    this.lastProcessed = 0;
  }
}
class OperatorList {
  static CHUNK_SIZE = 1000;
  static CHUNK_SIZE_ABOUT = this.CHUNK_SIZE - 5;
  constructor(intent = 0, streamSink) {
    this._streamSink = streamSink;
    this.fnArray = [];
    this.argsArray = [];
    this.optimizer = streamSink && !(intent & RenderingIntentFlag.OPLIST) ? new QueueOptimizer(this) : new NullOptimizer(this);
    this.dependencies = new Set();
    this._totalLength = 0;
    this.weight = 0;
    this._resolved = streamSink ? null : Promise.resolve();
  }
  set isOffscreenCanvasSupported(value) {
    this.optimizer.isOffscreenCanvasSupported = value;
  }
  get length() {
    return this.argsArray.length;
  }
  get ready() {
    return this._resolved || this._streamSink.ready;
  }
  get totalLength() {
    return this._totalLength + this.length;
  }
  addOp(fn, args) {
    this.optimizer.push(fn, args);
    this.weight++;
    if (this._streamSink) {
      if (this.weight >= OperatorList.CHUNK_SIZE) {
        this.flush();
      } else if (this.weight >= OperatorList.CHUNK_SIZE_ABOUT && (fn === OPS.restore || fn === OPS.endText)) {
        this.flush();
      }
    }
  }
  addImageOps(fn, args, optionalContent, hasMask = false) {
    if (hasMask) {
      this.addOp(OPS.save);
      this.addOp(OPS.setGState, [[["SMask", false]]]);
    }
    if (optionalContent !== undefined) {
      this.addOp(OPS.beginMarkedContentProps, ["OC", optionalContent]);
    }
    this.addOp(fn, args);
    if (optionalContent !== undefined) {
      this.addOp(OPS.endMarkedContent, []);
    }
    if (hasMask) {
      this.addOp(OPS.restore);
    }
  }
  addDependency(dependency) {
    if (this.dependencies.has(dependency)) {
      return;
    }
    this.dependencies.add(dependency);
    this.addOp(OPS.dependency, [dependency]);
  }
  addDependencies(dependencies) {
    for (const dependency of dependencies) {
      this.addDependency(dependency);
    }
  }
  addOpList(opList) {
    if (!(opList instanceof OperatorList)) {
      warn('addOpList - ignoring invalid "opList" parameter.');
      return;
    }
    for (const dependency of opList.dependencies) {
      this.dependencies.add(dependency);
    }
    for (let i = 0, ii = opList.length; i < ii; i++) {
      this.addOp(opList.fnArray[i], opList.argsArray[i]);
    }
  }
  getIR() {
    return {
      fnArray: this.fnArray,
      argsArray: this.argsArray,
      length: this.length
    };
  }
  get _transfers() {
    const transfers = [];
    const {
      fnArray,
      argsArray,
      length
    } = this;
    for (let i = 0; i < length; i++) {
      switch (fnArray[i]) {
        case OPS.paintInlineImageXObject:
        case OPS.paintInlineImageXObjectGroup:
        case OPS.paintImageMaskXObject:
          const arg = argsArray[i][0];
          if (!arg.cached && arg.data?.buffer instanceof ArrayBuffer) {
            transfers.push(arg.data.buffer);
          }
          break;
        case OPS.constructPath:
          const [, [data], minMax] = argsArray[i];
          if (data) {
            transfers.push(data.buffer, minMax.buffer);
          }
          break;
      }
    }
    return transfers;
  }
  flush(lastChunk = false, separateAnnots = null) {
    this.optimizer.flush();
    const length = this.length;
    this._totalLength += length;
    this._streamSink.enqueue({
      fnArray: this.fnArray,
      argsArray: this.argsArray,
      lastChunk,
      separateAnnots,
      length
    }, 1, this._transfers);
    this.dependencies.clear();
    this.fnArray.length = 0;
    this.argsArray.length = 0;
    this.weight = 0;
    this.optimizer.reset();
  }
}

;// ./src/core/image.js










function resizeImageMask(src, bpc, w1, h1, w2, h2) {
  const length = w2 * h2;
  let dest;
  if (bpc <= 8) {
    dest = new Uint8Array(length);
  } else if (bpc <= 16) {
    dest = new Uint16Array(length);
  } else {
    dest = new Uint32Array(length);
  }
  const xRatio = w1 / w2;
  const yRatio = h1 / h2;
  let i,
    j,
    py,
    newIndex = 0,
    oldIndex;
  const xScaled = new Uint16Array(w2);
  const w1Scanline = w1;
  for (i = 0; i < w2; i++) {
    xScaled[i] = Math.floor(i * xRatio);
  }
  for (i = 0; i < h2; i++) {
    py = Math.floor(i * yRatio) * w1Scanline;
    for (j = 0; j < w2; j++) {
      oldIndex = py + xScaled[j];
      dest[newIndex++] = src[oldIndex];
    }
  }
  return dest;
}
class PDFImage {
  constructor({
    xref,
    res,
    image,
    isInline = false,
    smask = null,
    mask = null,
    isMask = false,
    pdfFunctionFactory,
    globalColorSpaceCache,
    localColorSpaceCache
  }) {
    this.image = image;
    const dict = image.dict;
    const filter = dict.get("F", "Filter");
    let filterName;
    if (filter instanceof Name) {
      filterName = filter.name;
    } else if (Array.isArray(filter)) {
      const filterZero = xref.fetchIfRef(filter[0]);
      if (filterZero instanceof Name) {
        filterName = filterZero.name;
      }
    }
    switch (filterName) {
      case "JPXDecode":
        ({
          width: image.width,
          height: image.height,
          componentsCount: image.numComps,
          bitsPerComponent: image.bitsPerComponent
        } = JpxImage.parseImageProperties(image.stream));
        image.stream.reset();
        this.jpxDecoderOptions = {
          numComponents: 0,
          isIndexedColormap: false,
          smaskInData: dict.has("SMaskInData")
        };
        break;
      case "JBIG2Decode":
        image.bitsPerComponent = 1;
        image.numComps = 1;
        break;
    }
    let width = dict.get("W", "Width");
    let height = dict.get("H", "Height");
    if (Number.isInteger(image.width) && image.width > 0 && Number.isInteger(image.height) && image.height > 0 && (image.width !== width || image.height !== height)) {
      warn("PDFImage - using the Width/Height of the image data, " + "rather than the image dictionary.");
      width = image.width;
      height = image.height;
    } else {
      const validWidth = typeof width === "number" && width > 0,
        validHeight = typeof height === "number" && height > 0;
      if (!validWidth || !validHeight) {
        if (!image.fallbackDims) {
          throw new FormatError(\`Invalid image width: \${width} or height: \${height}\`);
        }
        warn("PDFImage - using the Width/Height of the parent image, for SMask/Mask data.");
        if (!validWidth) {
          width = image.fallbackDims.width;
        }
        if (!validHeight) {
          height = image.fallbackDims.height;
        }
      }
    }
    this.width = width;
    this.height = height;
    this.interpolate = dict.get("I", "Interpolate");
    this.imageMask = dict.get("IM", "ImageMask") || false;
    this.matte = dict.get("Matte") || false;
    let bitsPerComponent = image.bitsPerComponent;
    if (!bitsPerComponent) {
      bitsPerComponent = dict.get("BPC", "BitsPerComponent");
      if (!bitsPerComponent) {
        if (this.imageMask) {
          bitsPerComponent = 1;
        } else {
          throw new FormatError(\`Bits per component missing in image: \${this.imageMask}\`);
        }
      }
    }
    this.bpc = bitsPerComponent;
    if (!this.imageMask) {
      let colorSpace = dict.getRaw("CS") || dict.getRaw("ColorSpace");
      const hasColorSpace = !!colorSpace;
      if (!hasColorSpace) {
        if (this.jpxDecoderOptions) {
          colorSpace = Name.get("DeviceRGBA");
        } else {
          switch (image.numComps) {
            case 1:
              colorSpace = Name.get("DeviceGray");
              break;
            case 3:
              colorSpace = Name.get("DeviceRGB");
              break;
            case 4:
              colorSpace = Name.get("DeviceCMYK");
              break;
            default:
              throw new Error(\`Images with \${image.numComps} color components not supported.\`);
          }
        }
      } else if (this.jpxDecoderOptions?.smaskInData) {
        colorSpace = Name.get("DeviceRGBA");
      }
      this.colorSpace = ColorSpaceUtils.parse({
        cs: colorSpace,
        xref,
        resources: isInline ? res : null,
        pdfFunctionFactory,
        globalColorSpaceCache,
        localColorSpaceCache
      });
      this.numComps = this.colorSpace.numComps;
      if (this.jpxDecoderOptions) {
        this.jpxDecoderOptions.numComponents = hasColorSpace ? this.numComps : 0;
        this.jpxDecoderOptions.isIndexedColormap = this.colorSpace.name === "Indexed";
      }
    }
    this.decode = dict.getArray("D", "Decode");
    this.needsDecode = false;
    if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent) || isMask && !ColorSpace.isDefaultDecode(this.decode, 1))) {
      this.needsDecode = true;
      const max = (1 << bitsPerComponent) - 1;
      this.decodeCoefficients = [];
      this.decodeAddends = [];
      const isIndexed = this.colorSpace?.name === "Indexed";
      for (let i = 0, j = 0; i < this.decode.length; i += 2, ++j) {
        const dmin = this.decode[i];
        const dmax = this.decode[i + 1];
        this.decodeCoefficients[j] = isIndexed ? (dmax - dmin) / max : dmax - dmin;
        this.decodeAddends[j] = isIndexed ? dmin : max * dmin;
      }
    }
    if (smask) {
      smask.fallbackDims ??= {
        width,
        height
      };
      this.smask = new PDFImage({
        xref,
        res,
        image: smask,
        isInline,
        pdfFunctionFactory,
        globalColorSpaceCache,
        localColorSpaceCache
      });
    } else if (mask) {
      if (mask instanceof BaseStream) {
        const maskDict = mask.dict,
          imageMask = maskDict.get("IM", "ImageMask");
        if (!imageMask) {
          warn("Ignoring /Mask in image without /ImageMask.");
        } else {
          mask.fallbackDims ??= {
            width,
            height
          };
          this.mask = new PDFImage({
            xref,
            res,
            image: mask,
            isInline,
            isMask: true,
            pdfFunctionFactory,
            globalColorSpaceCache,
            localColorSpaceCache
          });
        }
      } else {
        this.mask = mask;
      }
    }
  }
  static async buildImage({
    xref,
    res,
    image,
    isInline = false,
    pdfFunctionFactory,
    globalColorSpaceCache,
    localColorSpaceCache
  }) {
    const imageData = image;
    let smaskData = null;
    let maskData = null;
    const smask = image.dict.get("SMask");
    const mask = image.dict.get("Mask");
    if (smask) {
      if (smask instanceof BaseStream) {
        smaskData = smask;
      } else {
        warn("Unsupported /SMask format.");
      }
    } else if (mask) {
      if (mask instanceof BaseStream || Array.isArray(mask)) {
        maskData = mask;
      } else {
        warn("Unsupported /Mask format.");
      }
    }
    return new PDFImage({
      xref,
      res,
      image: imageData,
      isInline,
      smask: smaskData,
      mask: maskData,
      pdfFunctionFactory,
      globalColorSpaceCache,
      localColorSpaceCache
    });
  }
  static createRawMask({
    imgArray,
    width,
    height,
    imageIsFromDecodeStream,
    inverseDecode,
    interpolate
  }) {
    const computedLength = (width + 7 >> 3) * height;
    const actualLength = imgArray.byteLength;
    const haveFullData = computedLength === actualLength;
    let data, i;
    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {
      data = imgArray;
    } else if (!inverseDecode) {
      data = new Uint8Array(imgArray);
    } else {
      data = new Uint8Array(computedLength);
      data.set(imgArray);
      data.fill(0xff, actualLength);
    }
    if (inverseDecode) {
      for (i = 0; i < actualLength; i++) {
        data[i] ^= 0xff;
      }
    }
    return {
      data,
      width,
      height,
      interpolate
    };
  }
  static async createMask({
    imgArray,
    width,
    height,
    imageIsFromDecodeStream,
    inverseDecode,
    interpolate,
    isOffscreenCanvasSupported = false
  }) {
    const isSingleOpaquePixel = width === 1 && height === 1 && inverseDecode === (imgArray.length === 0 || !!(imgArray[0] & 128));
    if (isSingleOpaquePixel) {
      return {
        isSingleOpaquePixel
      };
    }
    if (isOffscreenCanvasSupported) {
      if (ImageResizer.needsToBeResized(width, height)) {
        const data = new Uint8ClampedArray(width * height * 4);
        convertBlackAndWhiteToRGBA({
          src: imgArray,
          dest: data,
          width,
          height,
          nonBlackColor: 0,
          inverseDecode
        });
        return ImageResizer.createImage({
          kind: ImageKind.RGBA_32BPP,
          data,
          width,
          height,
          interpolate
        });
      }
      const canvas = new OffscreenCanvas(width, height);
      const ctx = canvas.getContext("2d");
      const imgData = ctx.createImageData(width, height);
      convertBlackAndWhiteToRGBA({
        src: imgArray,
        dest: imgData.data,
        width,
        height,
        nonBlackColor: 0,
        inverseDecode
      });
      ctx.putImageData(imgData, 0, 0);
      const bitmap = canvas.transferToImageBitmap();
      return {
        data: null,
        width,
        height,
        interpolate,
        bitmap
      };
    }
    return this.createRawMask({
      imgArray,
      width,
      height,
      inverseDecode,
      imageIsFromDecodeStream,
      interpolate
    });
  }
  get drawWidth() {
    return Math.max(this.width, this.smask?.width || 0, this.mask?.width || 0);
  }
  get drawHeight() {
    return Math.max(this.height, this.smask?.height || 0, this.mask?.height || 0);
  }
  decodeBuffer(buffer) {
    const bpc = this.bpc;
    const numComps = this.numComps;
    const decodeAddends = this.decodeAddends;
    const decodeCoefficients = this.decodeCoefficients;
    const max = (1 << bpc) - 1;
    let i, ii;
    if (bpc === 1) {
      for (i = 0, ii = buffer.length; i < ii; i++) {
        buffer[i] = +!buffer[i];
      }
      return;
    }
    let index = 0;
    for (i = 0, ii = this.width * this.height; i < ii; i++) {
      for (let j = 0; j < numComps; j++) {
        buffer[index] = MathClamp(decodeAddends[j] + buffer[index] * decodeCoefficients[j], 0, max);
        index++;
      }
    }
  }
  getComponents(buffer) {
    const bpc = this.bpc;
    if (bpc === 8) {
      return buffer;
    }
    const width = this.width;
    const height = this.height;
    const numComps = this.numComps;
    const length = width * height * numComps;
    let bufferPos = 0;
    let output;
    if (bpc <= 8) {
      output = new Uint8Array(length);
    } else if (bpc <= 16) {
      output = new Uint16Array(length);
    } else {
      output = new Uint32Array(length);
    }
    const rowComps = width * numComps;
    const max = (1 << bpc) - 1;
    let i = 0,
      ii,
      buf;
    if (bpc === 1) {
      let mask, loop1End, loop2End;
      for (let j = 0; j < height; j++) {
        loop1End = i + (rowComps & ~7);
        loop2End = i + rowComps;
        while (i < loop1End) {
          buf = buffer[bufferPos++];
          output[i] = buf >> 7 & 1;
          output[i + 1] = buf >> 6 & 1;
          output[i + 2] = buf >> 5 & 1;
          output[i + 3] = buf >> 4 & 1;
          output[i + 4] = buf >> 3 & 1;
          output[i + 5] = buf >> 2 & 1;
          output[i + 6] = buf >> 1 & 1;
          output[i + 7] = buf & 1;
          i += 8;
        }
        if (i < loop2End) {
          buf = buffer[bufferPos++];
          mask = 128;
          while (i < loop2End) {
            output[i++] = +!!(buf & mask);
            mask >>= 1;
          }
        }
      }
    } else {
      let bits = 0;
      buf = 0;
      for (i = 0, ii = length; i < ii; ++i) {
        if (i % rowComps === 0) {
          buf = 0;
          bits = 0;
        }
        while (bits < bpc) {
          buf = buf << 8 | buffer[bufferPos++];
          bits += 8;
        }
        const remainingBits = bits - bpc;
        let value = buf >> remainingBits;
        if (value < 0) {
          value = 0;
        } else if (value > max) {
          value = max;
        }
        output[i] = value;
        buf &= (1 << remainingBits) - 1;
        bits = remainingBits;
      }
    }
    return output;
  }
  async fillOpacity(rgbaBuf, width, height, actualHeight, image) {
    const smask = this.smask;
    const mask = this.mask;
    let alphaBuf, sw, sh, i, ii, j;
    if (smask) {
      sw = smask.width;
      sh = smask.height;
      alphaBuf = new Uint8ClampedArray(sw * sh);
      await smask.fillGrayBuffer(alphaBuf);
      if (sw !== width || sh !== height) {
        alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);
      }
    } else if (mask) {
      if (mask instanceof PDFImage) {
        sw = mask.width;
        sh = mask.height;
        alphaBuf = new Uint8ClampedArray(sw * sh);
        mask.numComps = 1;
        await mask.fillGrayBuffer(alphaBuf);
        for (i = 0, ii = sw * sh; i < ii; ++i) {
          alphaBuf[i] = 255 - alphaBuf[i];
        }
        if (sw !== width || sh !== height) {
          alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);
        }
      } else if (Array.isArray(mask)) {
        alphaBuf = new Uint8ClampedArray(width * height);
        const numComps = this.numComps;
        for (i = 0, ii = width * height; i < ii; ++i) {
          let opacity = 0;
          const imageOffset = i * numComps;
          for (j = 0; j < numComps; ++j) {
            const color = image[imageOffset + j];
            const maskOffset = j * 2;
            if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {
              opacity = 255;
              break;
            }
          }
          alphaBuf[i] = opacity;
        }
      } else {
        throw new FormatError("Unknown mask format.");
      }
    }
    if (alphaBuf) {
      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {
        rgbaBuf[j] = alphaBuf[i];
      }
    } else {
      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {
        rgbaBuf[j] = 255;
      }
    }
  }
  undoPreblend(buffer, width, height) {
    const matte = this.smask?.matte;
    if (!matte) {
      return;
    }
    const matteRgb = this.colorSpace.getRgb(matte, 0);
    const matteR = matteRgb[0];
    const matteG = matteRgb[1];
    const matteB = matteRgb[2];
    const length = width * height * 4;
    for (let i = 0; i < length; i += 4) {
      const alpha = buffer[i + 3];
      if (alpha === 0) {
        buffer[i] = 255;
        buffer[i + 1] = 255;
        buffer[i + 2] = 255;
        continue;
      }
      const k = 255 / alpha;
      buffer[i] = (buffer[i] - matteR) * k + matteR;
      buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;
      buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;
    }
  }
  async createImageData(forceRGBA = false, isOffscreenCanvasSupported = false) {
    const drawWidth = this.drawWidth;
    const drawHeight = this.drawHeight;
    const imgData = {
      width: drawWidth,
      height: drawHeight,
      interpolate: this.interpolate,
      kind: 0,
      data: null
    };
    const numComps = this.numComps;
    const originalWidth = this.width;
    const originalHeight = this.height;
    const bpc = this.bpc;
    const rowBytes = originalWidth * numComps * bpc + 7 >> 3;
    const mustBeResized = isOffscreenCanvasSupported && ImageResizer.needsToBeResized(drawWidth, drawHeight);
    if (!this.smask && !this.mask && this.colorSpace.name === "DeviceRGBA") {
      imgData.kind = ImageKind.RGBA_32BPP;
      const imgArray = imgData.data = await this.getImageBytes(originalHeight * originalWidth * 4, {});
      if (isOffscreenCanvasSupported) {
        if (!mustBeResized) {
          return this.createBitmap(ImageKind.RGBA_32BPP, drawWidth, drawHeight, imgArray);
        }
        return ImageResizer.createImage(imgData, false);
      }
      return imgData;
    }
    if (!forceRGBA) {
      let kind;
      if (this.colorSpace.name === "DeviceGray" && bpc === 1) {
        kind = ImageKind.GRAYSCALE_1BPP;
      } else if (this.colorSpace.name === "DeviceRGB" && bpc === 8 && !this.needsDecode) {
        kind = ImageKind.RGB_24BPP;
      }
      if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {
        const image = await this.#getImage(originalWidth, originalHeight);
        if (image) {
          return image;
        }
        const data = await this.getImageBytes(originalHeight * rowBytes, {});
        if (isOffscreenCanvasSupported) {
          if (mustBeResized) {
            return ImageResizer.createImage({
              data,
              kind,
              width: drawWidth,
              height: drawHeight,
              interpolate: this.interpolate
            }, this.needsDecode);
          }
          return this.createBitmap(kind, originalWidth, originalHeight, data);
        }
        imgData.kind = kind;
        imgData.data = data;
        if (this.needsDecode) {
          assert(kind === ImageKind.GRAYSCALE_1BPP, "PDFImage.createImageData: The image must be grayscale.");
          const buffer = imgData.data;
          for (let i = 0, ii = buffer.length; i < ii; i++) {
            buffer[i] ^= 0xff;
          }
        }
        return imgData;
      }
      if (this.image instanceof JpegStream && !this.smask && !this.mask && !this.needsDecode) {
        let imageLength = originalHeight * rowBytes;
        if (isOffscreenCanvasSupported && !mustBeResized) {
          let isHandled = false;
          switch (this.colorSpace.name) {
            case "DeviceGray":
              imageLength *= 4;
              isHandled = true;
              break;
            case "DeviceRGB":
              imageLength = imageLength / 3 * 4;
              isHandled = true;
              break;
            case "DeviceCMYK":
              isHandled = true;
              break;
          }
          if (isHandled) {
            const image = await this.#getImage(drawWidth, drawHeight);
            if (image) {
              return image;
            }
            const rgba = await this.getImageBytes(imageLength, {
              drawWidth,
              drawHeight,
              forceRGBA: true
            });
            return this.createBitmap(ImageKind.RGBA_32BPP, drawWidth, drawHeight, rgba);
          }
        } else {
          switch (this.colorSpace.name) {
            case "DeviceGray":
              imageLength *= 3;
            case "DeviceRGB":
            case "DeviceCMYK":
              imgData.kind = ImageKind.RGB_24BPP;
              imgData.data = await this.getImageBytes(imageLength, {
                drawWidth,
                drawHeight,
                forceRGB: true
              });
              if (mustBeResized) {
                return ImageResizer.createImage(imgData);
              }
              return imgData;
          }
        }
      }
    }
    const imgArray = await this.getImageBytes(originalHeight * rowBytes, {
      internal: true
    });
    const actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;
    const comps = this.getComponents(imgArray);
    let alpha01, maybeUndoPreblend;
    let canvas, ctx, canvasImgData, data;
    if (isOffscreenCanvasSupported && !mustBeResized) {
      canvas = new OffscreenCanvas(drawWidth, drawHeight);
      ctx = canvas.getContext("2d");
      canvasImgData = ctx.createImageData(drawWidth, drawHeight);
      data = canvasImgData.data;
    }
    imgData.kind = ImageKind.RGBA_32BPP;
    if (!forceRGBA && !this.smask && !this.mask) {
      if (!isOffscreenCanvasSupported || mustBeResized) {
        imgData.kind = ImageKind.RGB_24BPP;
        data = new Uint8ClampedArray(drawWidth * drawHeight * 3);
        alpha01 = 0;
      } else {
        const arr = new Uint32Array(data.buffer);
        arr.fill(FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff);
        alpha01 = 1;
      }
      maybeUndoPreblend = false;
    } else {
      if (!isOffscreenCanvasSupported || mustBeResized) {
        data = new Uint8ClampedArray(drawWidth * drawHeight * 4);
      }
      alpha01 = 1;
      maybeUndoPreblend = true;
      await this.fillOpacity(data, drawWidth, drawHeight, actualHeight, comps);
    }
    if (this.needsDecode) {
      this.decodeBuffer(comps);
    }
    this.colorSpace.fillRgb(data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);
    if (maybeUndoPreblend) {
      this.undoPreblend(data, drawWidth, actualHeight);
    }
    if (isOffscreenCanvasSupported && !mustBeResized) {
      ctx.putImageData(canvasImgData, 0, 0);
      const bitmap = canvas.transferToImageBitmap();
      return {
        data: null,
        width: drawWidth,
        height: drawHeight,
        bitmap,
        interpolate: this.interpolate
      };
    }
    imgData.data = data;
    if (mustBeResized) {
      return ImageResizer.createImage(imgData);
    }
    return imgData;
  }
  async fillGrayBuffer(buffer) {
    const numComps = this.numComps;
    if (numComps !== 1) {
      throw new FormatError(\`Reading gray scale from a color image: \${numComps}\`);
    }
    const width = this.width;
    const height = this.height;
    const bpc = this.bpc;
    const rowBytes = width * numComps * bpc + 7 >> 3;
    const imgArray = await this.getImageBytes(height * rowBytes, {
      internal: true
    });
    const comps = this.getComponents(imgArray);
    let i, length;
    if (bpc === 1) {
      length = width * height;
      if (this.needsDecode) {
        for (i = 0; i < length; ++i) {
          buffer[i] = comps[i] - 1 & 255;
        }
      } else {
        for (i = 0; i < length; ++i) {
          buffer[i] = -comps[i] & 255;
        }
      }
      return;
    }
    if (this.needsDecode) {
      this.decodeBuffer(comps);
    }
    length = width * height;
    const scale = 255 / ((1 << bpc) - 1);
    for (i = 0; i < length; ++i) {
      buffer[i] = scale * comps[i];
    }
  }
  createBitmap(kind, width, height, src) {
    const canvas = new OffscreenCanvas(width, height);
    const ctx = canvas.getContext("2d");
    let imgData;
    if (kind === ImageKind.RGBA_32BPP) {
      imgData = new ImageData(src, width, height);
    } else {
      imgData = ctx.createImageData(width, height);
      convertToRGBA({
        kind,
        src,
        dest: new Uint32Array(imgData.data.buffer),
        width,
        height,
        inverseDecode: this.needsDecode
      });
    }
    ctx.putImageData(imgData, 0, 0);
    const bitmap = canvas.transferToImageBitmap();
    return {
      data: null,
      width,
      height,
      bitmap,
      interpolate: this.interpolate
    };
  }
  async #getImage(width, height) {
    const bitmap = await this.image.getTransferableImage();
    if (!bitmap) {
      return null;
    }
    return {
      data: null,
      width,
      height,
      bitmap,
      interpolate: this.interpolate
    };
  }
  async getImageBytes(length, {
    drawWidth,
    drawHeight,
    forceRGBA = false,
    forceRGB = false,
    internal = false
  }) {
    this.image.reset();
    this.image.drawWidth = drawWidth || this.width;
    this.image.drawHeight = drawHeight || this.height;
    this.image.forceRGBA = !!forceRGBA;
    this.image.forceRGB = !!forceRGB;
    const imageBytes = await this.image.getImageData(length, this.jpxDecoderOptions);
    if (internal || this.image instanceof DecodeStream) {
      return imageBytes;
    }
    assert(imageBytes instanceof Uint8Array, 'PDFImage.getImageBytes: Unsupported "imageBytes" type.');
    return new Uint8Array(imageBytes);
  }
}

;// ./src/core/evaluator.js



























const DefaultPartialEvaluatorOptions = Object.freeze({
  maxImageSize: -1,
  disableFontFace: false,
  ignoreErrors: false,
  isEvalSupported: true,
  isOffscreenCanvasSupported: false,
  isImageDecoderSupported: false,
  canvasMaxAreaInBytes: -1,
  fontExtraProperties: false,
  useSystemFonts: true,
  useWasm: true,
  useWorkerFetch: true,
  cMapUrl: null,
  iccUrl: null,
  standardFontDataUrl: null,
  wasmUrl: null
});
const PatternType = {
  TILING: 1,
  SHADING: 2
};
const TEXT_CHUNK_BATCH_SIZE = 10;
const deferred = Promise.resolve();
function normalizeBlendMode(value, parsingArray = false) {
  if (Array.isArray(value)) {
    for (const val of value) {
      const maybeBM = normalizeBlendMode(val, true);
      if (maybeBM) {
        return maybeBM;
      }
    }
    warn(\`Unsupported blend mode Array: \${value}\`);
    return "source-over";
  }
  if (!(value instanceof Name)) {
    if (parsingArray) {
      return null;
    }
    return "source-over";
  }
  switch (value.name) {
    case "Normal":
    case "Compatible":
      return "source-over";
    case "Multiply":
      return "multiply";
    case "Screen":
      return "screen";
    case "Overlay":
      return "overlay";
    case "Darken":
      return "darken";
    case "Lighten":
      return "lighten";
    case "ColorDodge":
      return "color-dodge";
    case "ColorBurn":
      return "color-burn";
    case "HardLight":
      return "hard-light";
    case "SoftLight":
      return "soft-light";
    case "Difference":
      return "difference";
    case "Exclusion":
      return "exclusion";
    case "Hue":
      return "hue";
    case "Saturation":
      return "saturation";
    case "Color":
      return "color";
    case "Luminosity":
      return "luminosity";
  }
  if (parsingArray) {
    return null;
  }
  warn(\`Unsupported blend mode: \${value.name}\`);
  return "source-over";
}
function addLocallyCachedImageOps(opList, data) {
  if (data.objId) {
    opList.addDependency(data.objId);
  }
  opList.addImageOps(data.fn, data.args, data.optionalContent, data.hasMask);
  if (data.fn === OPS.paintImageMaskXObject && data.args[0]?.count > 0) {
    data.args[0].count++;
  }
}
class TimeSlotManager {
  static TIME_SLOT_DURATION_MS = 20;
  static CHECK_TIME_EVERY = 100;
  constructor() {
    this.reset();
  }
  check() {
    if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {
      return false;
    }
    this.checked = 0;
    return this.endTime <= Date.now();
  }
  reset() {
    this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;
    this.checked = 0;
  }
}
class PartialEvaluator {
  constructor({
    xref,
    handler,
    pageIndex,
    idFactory,
    fontCache,
    builtInCMapCache,
    standardFontDataCache,
    globalColorSpaceCache,
    globalImageCache,
    systemFontCache,
    options = null
  }) {
    this.xref = xref;
    this.handler = handler;
    this.pageIndex = pageIndex;
    this.idFactory = idFactory;
    this.fontCache = fontCache;
    this.builtInCMapCache = builtInCMapCache;
    this.standardFontDataCache = standardFontDataCache;
    this.globalColorSpaceCache = globalColorSpaceCache;
    this.globalImageCache = globalImageCache;
    this.systemFontCache = systemFontCache;
    this.options = options || DefaultPartialEvaluatorOptions;
    this.type3FontRefs = null;
    this._regionalImageCache = new RegionalImageCache();
    this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);
  }
  get _pdfFunctionFactory() {
    const pdfFunctionFactory = new PDFFunctionFactory({
      xref: this.xref,
      isEvalSupported: this.options.isEvalSupported
    });
    return shadow(this, "_pdfFunctionFactory", pdfFunctionFactory);
  }
  get parsingType3Font() {
    return !!this.type3FontRefs;
  }
  clone(newOptions = null) {
    const newEvaluator = Object.create(this);
    newEvaluator.options = Object.assign(Object.create(null), this.options, newOptions);
    return newEvaluator;
  }
  hasBlendModes(resources, nonBlendModesSet) {
    if (!(resources instanceof Dict)) {
      return false;
    }
    if (resources.objId && nonBlendModesSet.has(resources.objId)) {
      return false;
    }
    const processed = new RefSet(nonBlendModesSet);
    if (resources.objId) {
      processed.put(resources.objId);
    }
    const nodes = [resources],
      xref = this.xref;
    while (nodes.length) {
      const node = nodes.shift();
      const graphicStates = node.get("ExtGState");
      if (graphicStates instanceof Dict) {
        for (let graphicState of graphicStates.getRawValues()) {
          if (graphicState instanceof Ref) {
            if (processed.has(graphicState)) {
              continue;
            }
            try {
              graphicState = xref.fetch(graphicState);
            } catch (ex) {
              processed.put(graphicState);
              info(\`hasBlendModes - ignoring ExtGState: "\${ex}".\`);
              continue;
            }
          }
          if (!(graphicState instanceof Dict)) {
            continue;
          }
          if (graphicState.objId) {
            processed.put(graphicState.objId);
          }
          const bm = graphicState.get("BM");
          if (bm instanceof Name) {
            if (bm.name !== "Normal") {
              return true;
            }
            continue;
          }
          if (bm !== undefined && Array.isArray(bm)) {
            for (const element of bm) {
              if (element instanceof Name && element.name !== "Normal") {
                return true;
              }
            }
          }
        }
      }
      const xObjects = node.get("XObject");
      if (!(xObjects instanceof Dict)) {
        continue;
      }
      for (let xObject of xObjects.getRawValues()) {
        if (xObject instanceof Ref) {
          if (processed.has(xObject)) {
            continue;
          }
          try {
            xObject = xref.fetch(xObject);
          } catch (ex) {
            processed.put(xObject);
            info(\`hasBlendModes - ignoring XObject: "\${ex}".\`);
            continue;
          }
        }
        if (!(xObject instanceof BaseStream)) {
          continue;
        }
        if (xObject.dict.objId) {
          processed.put(xObject.dict.objId);
        }
        const xResources = xObject.dict.get("Resources");
        if (!(xResources instanceof Dict)) {
          continue;
        }
        if (xResources.objId && processed.has(xResources.objId)) {
          continue;
        }
        nodes.push(xResources);
        if (xResources.objId) {
          processed.put(xResources.objId);
        }
      }
    }
    for (const ref of processed) {
      nonBlendModesSet.put(ref);
    }
    return false;
  }
  async fetchBuiltInCMap(name) {
    const cachedData = this.builtInCMapCache.get(name);
    if (cachedData) {
      return cachedData;
    }
    let data;
    if (this.options.useWorkerFetch) {
      data = {
        cMapData: await fetchBinaryData(\`\${this.options.cMapUrl}\${name}.bcmap\`),
        isCompressed: true
      };
    } else {
      data = await this.handler.sendWithPromise("FetchBinaryData", {
        type: "cMapReaderFactory",
        name
      });
    }
    this.builtInCMapCache.set(name, data);
    return data;
  }
  async fetchStandardFontData(name) {
    const cachedData = this.standardFontDataCache.get(name);
    if (cachedData) {
      return new Stream(cachedData);
    }
    if (this.options.useSystemFonts && name !== "Symbol" && name !== "ZapfDingbats") {
      return null;
    }
    const standardFontNameToFileName = getFontNameToFileMap(),
      filename = standardFontNameToFileName[name];
    let data;
    try {
      if (this.options.useWorkerFetch) {
        data = await fetchBinaryData(\`\${this.options.standardFontDataUrl}\${filename}\`);
      } else {
        data = await this.handler.sendWithPromise("FetchBinaryData", {
          type: "standardFontDataFactory",
          filename
        });
      }
    } catch (ex) {
      warn(ex);
      return null;
    }
    this.standardFontDataCache.set(name, data);
    return new Stream(data);
  }
  async buildFormXObject(resources, xobj, smask, operatorList, task, initialState, localColorSpaceCache) {
    const dict = xobj.dict;
    const matrix = lookupMatrix(dict.getArray("Matrix"), null);
    const bbox = lookupNormalRect(dict.getArray("BBox"), null);
    let optionalContent, groupOptions;
    if (dict.has("OC")) {
      optionalContent = await this.parseMarkedContentProps(dict.get("OC"), resources);
    }
    if (optionalContent !== undefined) {
      operatorList.addOp(OPS.beginMarkedContentProps, ["OC", optionalContent]);
    }
    const group = dict.get("Group");
    if (group) {
      groupOptions = {
        matrix,
        bbox,
        smask,
        isolated: false,
        knockout: false
      };
      const groupSubtype = group.get("S");
      let colorSpace = null;
      if (isName(groupSubtype, "Transparency")) {
        groupOptions.isolated = group.get("I") || false;
        groupOptions.knockout = group.get("K") || false;
        if (group.has("CS")) {
          const cs = this._getColorSpace(group.getRaw("CS"), resources, localColorSpaceCache);
          colorSpace = cs instanceof ColorSpace ? cs : await this._handleColorSpace(cs);
        }
      }
      if (smask?.backdrop) {
        colorSpace ||= ColorSpaceUtils.rgb;
        smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);
      }
      operatorList.addOp(OPS.beginGroup, [groupOptions]);
    }
    const args = group ? [matrix, null] : [matrix, bbox];
    operatorList.addOp(OPS.paintFormXObjectBegin, args);
    await this.getOperatorList({
      stream: xobj,
      task,
      resources: dict.get("Resources") || resources,
      operatorList,
      initialState
    });
    operatorList.addOp(OPS.paintFormXObjectEnd, []);
    if (group) {
      operatorList.addOp(OPS.endGroup, [groupOptions]);
    }
    if (optionalContent !== undefined) {
      operatorList.addOp(OPS.endMarkedContent, []);
    }
  }
  _sendImgData(objId, imgData, cacheGlobally = false) {
    const transfers = imgData ? [imgData.bitmap || imgData.data.buffer] : null;
    if (this.parsingType3Font || cacheGlobally) {
      return this.handler.send("commonobj", [objId, "Image", imgData], transfers);
    }
    return this.handler.send("obj", [objId, this.pageIndex, "Image", imgData], transfers);
  }
  async buildPaintImageXObject({
    resources,
    image,
    isInline = false,
    operatorList,
    cacheKey,
    localImageCache,
    localColorSpaceCache
  }) {
    const dict = image.dict;
    const imageRef = dict.objId;
    const w = dict.get("W", "Width");
    const h = dict.get("H", "Height");
    if (!(w && typeof w === "number") || !(h && typeof h === "number")) {
      warn("Image dimensions are missing, or not numbers.");
      return;
    }
    const maxImageSize = this.options.maxImageSize;
    if (maxImageSize !== -1 && w * h > maxImageSize) {
      const msg = "Image exceeded maximum allowed size and was removed.";
      if (this.options.ignoreErrors) {
        warn(msg);
        return;
      }
      throw new Error(msg);
    }
    let optionalContent;
    if (dict.has("OC")) {
      optionalContent = await this.parseMarkedContentProps(dict.get("OC"), resources);
    }
    const imageMask = dict.get("IM", "ImageMask") || false;
    let imgData, fn, args;
    if (imageMask) {
      const interpolate = dict.get("I", "Interpolate");
      const bitStrideLength = w + 7 >> 3;
      const imgArray = image.getBytes(bitStrideLength * h);
      const decode = dict.getArray("D", "Decode");
      if (this.parsingType3Font) {
        imgData = PDFImage.createRawMask({
          imgArray,
          width: w,
          height: h,
          imageIsFromDecodeStream: image instanceof DecodeStream,
          inverseDecode: decode?.[0] > 0,
          interpolate
        });
        imgData.cached = !!cacheKey;
        fn = OPS.paintImageMaskXObject;
        args = [imgData];
        operatorList.addImageOps(fn, args, optionalContent);
        if (cacheKey) {
          const cacheData = {
            fn,
            args,
            optionalContent
          };
          localImageCache.set(cacheKey, imageRef, cacheData);
          if (imageRef) {
            this._regionalImageCache.set(null, imageRef, cacheData);
          }
        }
        return;
      }
      imgData = await PDFImage.createMask({
        imgArray,
        width: w,
        height: h,
        imageIsFromDecodeStream: image instanceof DecodeStream,
        inverseDecode: decode?.[0] > 0,
        interpolate,
        isOffscreenCanvasSupported: this.options.isOffscreenCanvasSupported
      });
      if (imgData.isSingleOpaquePixel) {
        fn = OPS.paintSolidColorImageMask;
        args = [];
        operatorList.addImageOps(fn, args, optionalContent);
        if (cacheKey) {
          const cacheData = {
            fn,
            args,
            optionalContent
          };
          localImageCache.set(cacheKey, imageRef, cacheData);
          if (imageRef) {
            this._regionalImageCache.set(null, imageRef, cacheData);
          }
        }
        return;
      }
      const objId = \`mask_\${this.idFactory.createObjId()}\`;
      operatorList.addDependency(objId);
      imgData.dataLen = imgData.bitmap ? imgData.width * imgData.height * 4 : imgData.data.length;
      this._sendImgData(objId, imgData);
      fn = OPS.paintImageMaskXObject;
      args = [{
        data: objId,
        width: imgData.width,
        height: imgData.height,
        interpolate: imgData.interpolate,
        count: 1
      }];
      operatorList.addImageOps(fn, args, optionalContent);
      if (cacheKey) {
        const cacheData = {
          objId,
          fn,
          args,
          optionalContent
        };
        localImageCache.set(cacheKey, imageRef, cacheData);
        if (imageRef) {
          this._regionalImageCache.set(null, imageRef, cacheData);
        }
      }
      return;
    }
    const SMALL_IMAGE_DIMENSIONS = 200;
    const hasMask = dict.has("SMask") || dict.has("Mask");
    if (isInline && w + h < SMALL_IMAGE_DIMENSIONS && !hasMask) {
      try {
        const imageObj = new PDFImage({
          xref: this.xref,
          res: resources,
          image,
          isInline,
          pdfFunctionFactory: this._pdfFunctionFactory,
          globalColorSpaceCache: this.globalColorSpaceCache,
          localColorSpaceCache
        });
        imgData = await imageObj.createImageData(true, false);
        operatorList.isOffscreenCanvasSupported = this.options.isOffscreenCanvasSupported;
        operatorList.addImageOps(OPS.paintInlineImageXObject, [imgData], optionalContent);
      } catch (reason) {
        const msg = \`Unable to decode inline image: "\${reason}".\`;
        if (!this.options.ignoreErrors) {
          throw new Error(msg);
        }
        warn(msg);
      }
      return;
    }
    let objId = \`img_\${this.idFactory.createObjId()}\`,
      cacheGlobally = false;
    if (this.parsingType3Font) {
      objId = \`\${this.idFactory.getDocId()}_type3_\${objId}\`;
    } else if (cacheKey && imageRef) {
      cacheGlobally = this.globalImageCache.shouldCache(imageRef, this.pageIndex);
      if (cacheGlobally) {
        assert(!isInline, "Cannot cache an inline image globally.");
        objId = \`\${this.idFactory.getDocId()}_\${objId}\`;
      }
    }
    operatorList.addDependency(objId);
    fn = OPS.paintImageXObject;
    args = [objId, w, h];
    operatorList.addImageOps(fn, args, optionalContent, hasMask);
    if (cacheGlobally) {
      if (this.globalImageCache.hasDecodeFailed(imageRef)) {
        this.globalImageCache.setData(imageRef, {
          objId,
          fn,
          args,
          optionalContent,
          hasMask,
          byteSize: 0
        });
        this._sendImgData(objId, null, cacheGlobally);
        return;
      }
      if (w * h > 250000 || hasMask) {
        const localLength = await this.handler.sendWithPromise("commonobj", [objId, "CopyLocalImage", {
          imageRef
        }]);
        if (localLength) {
          this.globalImageCache.setData(imageRef, {
            objId,
            fn,
            args,
            optionalContent,
            hasMask,
            byteSize: 0
          });
          this.globalImageCache.addByteSize(imageRef, localLength);
          return;
        }
      }
    }
    PDFImage.buildImage({
      xref: this.xref,
      res: resources,
      image,
      isInline,
      pdfFunctionFactory: this._pdfFunctionFactory,
      globalColorSpaceCache: this.globalColorSpaceCache,
      localColorSpaceCache
    }).then(async imageObj => {
      imgData = await imageObj.createImageData(false, this.options.isOffscreenCanvasSupported);
      imgData.dataLen = imgData.bitmap ? imgData.width * imgData.height * 4 : imgData.data.length;
      imgData.ref = imageRef;
      if (cacheGlobally) {
        this.globalImageCache.addByteSize(imageRef, imgData.dataLen);
      }
      return this._sendImgData(objId, imgData, cacheGlobally);
    }).catch(reason => {
      warn(\`Unable to decode image "\${objId}": "\${reason}".\`);
      if (imageRef) {
        this.globalImageCache.addDecodeFailed(imageRef);
      }
      return this._sendImgData(objId, null, cacheGlobally);
    });
    if (cacheKey) {
      const cacheData = {
        objId,
        fn,
        args,
        optionalContent,
        hasMask
      };
      localImageCache.set(cacheKey, imageRef, cacheData);
      if (imageRef) {
        this._regionalImageCache.set(null, imageRef, cacheData);
        if (cacheGlobally) {
          this.globalImageCache.setData(imageRef, {
            objId,
            fn,
            args,
            optionalContent,
            hasMask,
            byteSize: 0
          });
        }
      }
    }
  }
  handleSMask(smask, resources, operatorList, task, stateManager, localColorSpaceCache) {
    const smaskContent = smask.get("G");
    const smaskOptions = {
      subtype: smask.get("S").name,
      backdrop: smask.get("BC")
    };
    const transferObj = smask.get("TR");
    if (isPDFFunction(transferObj)) {
      const transferFn = this._pdfFunctionFactory.create(transferObj);
      const transferMap = new Uint8Array(256);
      const tmp = new Float32Array(1);
      for (let i = 0; i < 256; i++) {
        tmp[0] = i / 255;
        transferFn(tmp, 0, tmp, 0);
        transferMap[i] = tmp[0] * 255 | 0;
      }
      smaskOptions.transferMap = transferMap;
    }
    return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone({
      newPath: true
    }), localColorSpaceCache);
  }
  handleTransferFunction(tr) {
    let transferArray;
    if (Array.isArray(tr)) {
      transferArray = tr;
    } else if (isPDFFunction(tr)) {
      transferArray = [tr];
    } else {
      return null;
    }
    const transferMaps = [];
    let numFns = 0,
      numEffectfulFns = 0;
    for (const entry of transferArray) {
      const transferObj = this.xref.fetchIfRef(entry);
      numFns++;
      if (isName(transferObj, "Identity")) {
        transferMaps.push(null);
        continue;
      } else if (!isPDFFunction(transferObj)) {
        return null;
      }
      const transferFn = this._pdfFunctionFactory.create(transferObj);
      const transferMap = new Uint8Array(256),
        tmp = new Float32Array(1);
      for (let j = 0; j < 256; j++) {
        tmp[0] = j / 255;
        transferFn(tmp, 0, tmp, 0);
        transferMap[j] = tmp[0] * 255 | 0;
      }
      transferMaps.push(transferMap);
      numEffectfulFns++;
    }
    if (!(numFns === 1 || numFns === 4)) {
      return null;
    }
    if (numEffectfulFns === 0) {
      return null;
    }
    return transferMaps;
  }
  handleTilingType(fn, color, resources, pattern, patternDict, operatorList, task, localTilingPatternCache) {
    const tilingOpList = new OperatorList();
    const patternResources = Dict.merge({
      xref: this.xref,
      dictArray: [patternDict.get("Resources"), resources]
    });
    return this.getOperatorList({
      stream: pattern,
      task,
      resources: patternResources,
      operatorList: tilingOpList
    }).then(function () {
      const operatorListIR = tilingOpList.getIR();
      const tilingPatternIR = getTilingPatternIR(operatorListIR, patternDict, color);
      operatorList.addDependencies(tilingOpList.dependencies);
      operatorList.addOp(fn, tilingPatternIR);
      if (patternDict.objId) {
        localTilingPatternCache.set(null, patternDict.objId, {
          operatorListIR,
          dict: patternDict
        });
      }
    }).catch(reason => {
      if (reason instanceof AbortException) {
        return;
      }
      if (this.options.ignoreErrors) {
        warn(\`handleTilingType - ignoring pattern: "\${reason}".\`);
        return;
      }
      throw reason;
    });
  }
  async handleSetFont(resources, fontArgs, fontRef, operatorList, task, state, fallbackFontDict = null, cssFontInfo = null) {
    const fontName = fontArgs?.[0] instanceof Name ? fontArgs[0].name : null;
    const translated = await this.loadFont(fontName, fontRef, resources, task, fallbackFontDict, cssFontInfo);
    if (translated.font.isType3Font) {
      operatorList.addDependencies(translated.type3Dependencies);
    }
    state.font = translated.font;
    translated.send(this.handler);
    return translated.loadedName;
  }
  handleText(chars, state) {
    const font = state.font;
    const glyphs = font.charsToGlyphs(chars);
    if (font.data) {
      const isAddToPathSet = !!(state.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG);
      if (isAddToPathSet || state.fillColorSpace.name === "Pattern" || font.disableFontFace) {
        PartialEvaluator.buildFontPaths(font, glyphs, this.handler, this.options);
      }
    }
    return glyphs;
  }
  ensureStateFont(state) {
    if (state.font) {
      return;
    }
    const reason = new FormatError("Missing setFont (Tf) operator before text rendering operator.");
    if (this.options.ignoreErrors) {
      warn(\`ensureStateFont: "\${reason}".\`);
      return;
    }
    throw reason;
  }
  async setGState({
    resources,
    gState,
    operatorList,
    cacheKey,
    task,
    stateManager,
    localGStateCache,
    localColorSpaceCache
  }) {
    const gStateRef = gState.objId;
    let isSimpleGState = true;
    const gStateObj = [];
    let promise = Promise.resolve();
    for (const [key, value] of gState) {
      switch (key) {
        case "Type":
          break;
        case "LW":
          if (typeof value !== "number") {
            warn(\`Invalid LW (line width): \${value}\`);
            break;
          }
          gStateObj.push([key, Math.abs(value)]);
          break;
        case "LC":
        case "LJ":
        case "ML":
        case "D":
        case "RI":
        case "FL":
        case "CA":
        case "ca":
          gStateObj.push([key, value]);
          break;
        case "Font":
          isSimpleGState = false;
          promise = promise.then(() => this.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function (loadedName) {
            operatorList.addDependency(loadedName);
            gStateObj.push([key, [loadedName, value[1]]]);
          }));
          break;
        case "BM":
          gStateObj.push([key, normalizeBlendMode(value)]);
          break;
        case "SMask":
          if (isName(value, "None")) {
            gStateObj.push([key, false]);
            break;
          }
          if (value instanceof Dict) {
            isSimpleGState = false;
            promise = promise.then(() => this.handleSMask(value, resources, operatorList, task, stateManager, localColorSpaceCache));
            gStateObj.push([key, true]);
          } else {
            warn("Unsupported SMask type");
          }
          break;
        case "TR":
          const transferMaps = this.handleTransferFunction(value);
          gStateObj.push([key, transferMaps]);
          break;
        case "OP":
        case "op":
        case "OPM":
        case "BG":
        case "BG2":
        case "UCR":
        case "UCR2":
        case "TR2":
        case "HT":
        case "SM":
        case "SA":
        case "AIS":
        case "TK":
          info("graphic state operator " + key);
          break;
        default:
          info("Unknown graphic state operator " + key);
          break;
      }
    }
    await promise;
    if (gStateObj.length > 0) {
      operatorList.addOp(OPS.setGState, [gStateObj]);
    }
    if (isSimpleGState) {
      localGStateCache.set(cacheKey, gStateRef, gStateObj);
    }
  }
  loadFont(fontName, font, resources, task, fallbackFontDict = null, cssFontInfo = null) {
    const errorFont = async () => new TranslatedFont({
      loadedName: "g_font_error",
      font: new ErrorFont(\`Font "\${fontName}" is not available.\`),
      dict: font
    });
    let fontRef;
    if (font) {
      if (font instanceof Ref) {
        fontRef = font;
      }
    } else {
      const fontRes = resources.get("Font");
      if (fontRes) {
        fontRef = fontRes.getRaw(fontName);
      }
    }
    if (fontRef) {
      if (this.type3FontRefs?.has(fontRef)) {
        return errorFont();
      }
      if (this.fontCache.has(fontRef)) {
        return this.fontCache.get(fontRef);
      }
      try {
        font = this.xref.fetchIfRef(fontRef);
      } catch (ex) {
        warn(\`loadFont - lookup failed: "\${ex}".\`);
      }
    }
    if (!(font instanceof Dict)) {
      if (!this.options.ignoreErrors && !this.parsingType3Font) {
        warn(\`Font "\${fontName}" is not available.\`);
        return errorFont();
      }
      warn(\`Font "\${fontName}" is not available -- attempting to fallback to a default font.\`);
      font = fallbackFontDict || PartialEvaluator.fallbackFontDict;
    }
    if (font.cacheKey && this.fontCache.has(font.cacheKey)) {
      return this.fontCache.get(font.cacheKey);
    }
    const {
      promise,
      resolve
    } = Promise.withResolvers();
    let preEvaluatedFont;
    try {
      preEvaluatedFont = this.preEvaluateFont(font);
      preEvaluatedFont.cssFontInfo = cssFontInfo;
    } catch (reason) {
      warn(\`loadFont - preEvaluateFont failed: "\${reason}".\`);
      return errorFont();
    }
    const {
      descriptor,
      hash
    } = preEvaluatedFont;
    const fontRefIsRef = fontRef instanceof Ref;
    let fontID;
    if (hash && descriptor instanceof Dict) {
      const fontAliases = descriptor.fontAliases ||= Object.create(null);
      if (fontAliases[hash]) {
        const aliasFontRef = fontAliases[hash].aliasRef;
        if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {
          this.fontCache.putAlias(fontRef, aliasFontRef);
          return this.fontCache.get(fontRef);
        }
      } else {
        fontAliases[hash] = {
          fontID: this.idFactory.createFontId()
        };
      }
      if (fontRefIsRef) {
        fontAliases[hash].aliasRef = fontRef;
      }
      fontID = fontAliases[hash].fontID;
    } else {
      fontID = this.idFactory.createFontId();
    }
    assert(fontID?.startsWith("f"), 'The "fontID" must be (correctly) defined.');
    if (fontRefIsRef) {
      this.fontCache.put(fontRef, promise);
    } else {
      font.cacheKey = \`cacheKey_\${fontID}\`;
      this.fontCache.put(font.cacheKey, promise);
    }
    font.loadedName = \`\${this.idFactory.getDocId()}_\${fontID}\`;
    this.translateFont(preEvaluatedFont).then(async translatedFont => {
      const translated = new TranslatedFont({
        loadedName: font.loadedName,
        font: translatedFont,
        dict: font
      });
      if (translatedFont.isType3Font) {
        try {
          await translated.loadType3Data(this, resources, task);
        } catch (reason) {
          throw new Error(\`Type3 font load error: \${reason}\`);
        }
      }
      resolve(translated);
    }).catch(reason => {
      warn(\`loadFont - translateFont failed: "\${reason}".\`);
      resolve(new TranslatedFont({
        loadedName: font.loadedName,
        font: new ErrorFont(reason?.message),
        dict: font
      }));
    });
    return promise;
  }
  buildPath(fn, args, state) {
    const {
      pathMinMax: minMax,
      pathBuffer
    } = state;
    switch (fn | 0) {
      case OPS.rectangle:
        {
          const x = state.currentPointX = args[0];
          const y = state.currentPointY = args[1];
          const width = args[2];
          const height = args[3];
          const xw = x + width;
          const yh = y + height;
          if (width === 0 || height === 0) {
            pathBuffer.push(DrawOPS.moveTo, x, y, DrawOPS.lineTo, xw, yh, DrawOPS.closePath);
          } else {
            pathBuffer.push(DrawOPS.moveTo, x, y, DrawOPS.lineTo, xw, y, DrawOPS.lineTo, xw, yh, DrawOPS.lineTo, x, yh, DrawOPS.closePath);
          }
          Util.rectBoundingBox(x, y, xw, yh, minMax);
          break;
        }
      case OPS.moveTo:
        {
          const x = state.currentPointX = args[0];
          const y = state.currentPointY = args[1];
          pathBuffer.push(DrawOPS.moveTo, x, y);
          Util.pointBoundingBox(x, y, minMax);
          break;
        }
      case OPS.lineTo:
        {
          const x = state.currentPointX = args[0];
          const y = state.currentPointY = args[1];
          pathBuffer.push(DrawOPS.lineTo, x, y);
          Util.pointBoundingBox(x, y, minMax);
          break;
        }
      case OPS.curveTo:
        {
          const startX = state.currentPointX;
          const startY = state.currentPointY;
          const [x1, y1, x2, y2, x, y] = args;
          state.currentPointX = x;
          state.currentPointY = y;
          pathBuffer.push(DrawOPS.curveTo, x1, y1, x2, y2, x, y);
          Util.bezierBoundingBox(startX, startY, x1, y1, x2, y2, x, y, minMax);
          break;
        }
      case OPS.curveTo2:
        {
          const startX = state.currentPointX;
          const startY = state.currentPointY;
          const [x1, y1, x, y] = args;
          state.currentPointX = x;
          state.currentPointY = y;
          pathBuffer.push(DrawOPS.curveTo, startX, startY, x1, y1, x, y);
          Util.bezierBoundingBox(startX, startY, startX, startY, x1, y1, x, y, minMax);
          break;
        }
      case OPS.curveTo3:
        {
          const startX = state.currentPointX;
          const startY = state.currentPointY;
          const [x1, y1, x, y] = args;
          state.currentPointX = x;
          state.currentPointY = y;
          pathBuffer.push(DrawOPS.curveTo, x1, y1, x, y, x, y);
          Util.bezierBoundingBox(startX, startY, x1, y1, x, y, x, y, minMax);
          break;
        }
      case OPS.closePath:
        pathBuffer.push(DrawOPS.closePath);
        break;
    }
  }
  _getColorSpace(cs, resources, localColorSpaceCache) {
    return ColorSpaceUtils.parse({
      cs,
      xref: this.xref,
      resources,
      pdfFunctionFactory: this._pdfFunctionFactory,
      globalColorSpaceCache: this.globalColorSpaceCache,
      localColorSpaceCache,
      asyncIfNotCached: true
    });
  }
  async _handleColorSpace(csPromise) {
    try {
      return await csPromise;
    } catch (ex) {
      if (ex instanceof AbortException) {
        return null;
      }
      if (this.options.ignoreErrors) {
        warn(\`_handleColorSpace - ignoring ColorSpace: "\${ex}".\`);
        return null;
      }
      throw ex;
    }
  }
  parseShading({
    shading,
    resources,
    localColorSpaceCache,
    localShadingPatternCache
  }) {
    let id = localShadingPatternCache.get(shading);
    if (id) {
      return id;
    }
    let patternIR;
    try {
      const shadingFill = Pattern.parseShading(shading, this.xref, resources, this._pdfFunctionFactory, this.globalColorSpaceCache, localColorSpaceCache);
      patternIR = shadingFill.getIR();
    } catch (reason) {
      if (reason instanceof AbortException) {
        return null;
      }
      if (this.options.ignoreErrors) {
        warn(\`parseShading - ignoring shading: "\${reason}".\`);
        localShadingPatternCache.set(shading, null);
        return null;
      }
      throw reason;
    }
    id = \`pattern_\${this.idFactory.createObjId()}\`;
    if (this.parsingType3Font) {
      id = \`\${this.idFactory.getDocId()}_type3_\${id}\`;
    }
    localShadingPatternCache.set(shading, id);
    if (this.parsingType3Font) {
      this.handler.send("commonobj", [id, "Pattern", patternIR]);
    } else {
      this.handler.send("obj", [id, this.pageIndex, "Pattern", patternIR]);
    }
    return id;
  }
  handleColorN(operatorList, fn, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache) {
    const patternName = args.pop();
    if (patternName instanceof Name) {
      const rawPattern = patterns.getRaw(patternName.name);
      const localTilingPattern = rawPattern instanceof Ref && localTilingPatternCache.getByRef(rawPattern);
      if (localTilingPattern) {
        try {
          const color = cs.base ? cs.base.getRgb(args, 0) : null;
          const tilingPatternIR = getTilingPatternIR(localTilingPattern.operatorListIR, localTilingPattern.dict, color);
          operatorList.addOp(fn, tilingPatternIR);
          return undefined;
        } catch {}
      }
      const pattern = this.xref.fetchIfRef(rawPattern);
      if (pattern) {
        const dict = pattern instanceof BaseStream ? pattern.dict : pattern;
        const typeNum = dict.get("PatternType");
        if (typeNum === PatternType.TILING) {
          const color = cs.base ? cs.base.getRgb(args, 0) : null;
          return this.handleTilingType(fn, color, resources, pattern, dict, operatorList, task, localTilingPatternCache);
        } else if (typeNum === PatternType.SHADING) {
          const shading = dict.get("Shading");
          const objId = this.parseShading({
            shading,
            resources,
            localColorSpaceCache,
            localShadingPatternCache
          });
          if (objId) {
            const matrix = lookupMatrix(dict.getArray("Matrix"), null);
            operatorList.addOp(fn, ["Shading", objId, matrix]);
          }
          return undefined;
        }
        throw new FormatError(\`Unknown PatternType: \${typeNum}\`);
      }
    }
    throw new FormatError(\`Unknown PatternName: \${patternName}\`);
  }
  _parseVisibilityExpression(array, nestingCounter, currentResult) {
    const MAX_NESTING = 10;
    if (++nestingCounter > MAX_NESTING) {
      warn("Visibility expression is too deeply nested");
      return;
    }
    const length = array.length;
    const operator = this.xref.fetchIfRef(array[0]);
    if (length < 2 || !(operator instanceof Name)) {
      warn("Invalid visibility expression");
      return;
    }
    switch (operator.name) {
      case "And":
      case "Or":
      case "Not":
        currentResult.push(operator.name);
        break;
      default:
        warn(\`Invalid operator \${operator.name} in visibility expression\`);
        return;
    }
    for (let i = 1; i < length; i++) {
      const raw = array[i];
      const object = this.xref.fetchIfRef(raw);
      if (Array.isArray(object)) {
        const nestedResult = [];
        currentResult.push(nestedResult);
        this._parseVisibilityExpression(object, nestingCounter, nestedResult);
      } else if (raw instanceof Ref) {
        currentResult.push(raw.toString());
      }
    }
  }
  async parseMarkedContentProps(contentProperties, resources) {
    let optionalContent;
    if (contentProperties instanceof Name) {
      const properties = resources.get("Properties");
      optionalContent = properties.get(contentProperties.name);
    } else if (contentProperties instanceof Dict) {
      optionalContent = contentProperties;
    } else {
      throw new FormatError("Optional content properties malformed.");
    }
    const optionalContentType = optionalContent.get("Type")?.name;
    if (optionalContentType === "OCG") {
      return {
        type: optionalContentType,
        id: optionalContent.objId
      };
    } else if (optionalContentType === "OCMD") {
      const expression = optionalContent.get("VE");
      if (Array.isArray(expression)) {
        const result = [];
        this._parseVisibilityExpression(expression, 0, result);
        if (result.length > 0) {
          return {
            type: "OCMD",
            expression: result
          };
        }
      }
      const optionalContentGroups = optionalContent.get("OCGs");
      if (Array.isArray(optionalContentGroups) || optionalContentGroups instanceof Dict) {
        const groupIds = [];
        if (Array.isArray(optionalContentGroups)) {
          for (const ocg of optionalContentGroups) {
            groupIds.push(ocg.toString());
          }
        } else {
          groupIds.push(optionalContentGroups.objId);
        }
        return {
          type: optionalContentType,
          ids: groupIds,
          policy: optionalContent.get("P") instanceof Name ? optionalContent.get("P").name : null,
          expression: null
        };
      } else if (optionalContentGroups instanceof Ref) {
        return {
          type: optionalContentType,
          id: optionalContentGroups.toString()
        };
      }
    }
    return null;
  }
  getOperatorList({
    stream,
    task,
    resources,
    operatorList,
    initialState = null,
    fallbackFontDict = null
  }) {
    resources ||= Dict.empty;
    initialState ||= new EvalState();
    if (!operatorList) {
      throw new Error('getOperatorList: missing "operatorList" parameter');
    }
    const self = this;
    const xref = this.xref;
    const localImageCache = new LocalImageCache();
    const localColorSpaceCache = new LocalColorSpaceCache();
    const localGStateCache = new LocalGStateCache();
    const localTilingPatternCache = new LocalTilingPatternCache();
    const localShadingPatternCache = new Map();
    const xobjs = resources.get("XObject") || Dict.empty;
    const patterns = resources.get("Pattern") || Dict.empty;
    const stateManager = new StateManager(initialState);
    const preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
    const timeSlotManager = new TimeSlotManager();
    function closePendingRestoreOPS(argument) {
      for (let i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {
        operatorList.addOp(OPS.restore, []);
      }
    }
    return new Promise(function promiseBody(resolve, reject) {
      const next = function (promise) {
        Promise.all([promise, operatorList.ready]).then(function () {
          try {
            promiseBody(resolve, reject);
          } catch (ex) {
            reject(ex);
          }
        }, reject);
      };
      task.ensureNotTerminated();
      timeSlotManager.reset();
      const operation = {};
      let stop, i, ii, cs, name, isValidName;
      while (!(stop = timeSlotManager.check())) {
        operation.args = null;
        if (!preprocessor.read(operation)) {
          break;
        }
        let args = operation.args;
        let fn = operation.fn;
        switch (fn | 0) {
          case OPS.paintXObject:
            isValidName = args[0] instanceof Name;
            name = args[0].name;
            if (isValidName) {
              const localImage = localImageCache.getByName(name);
              if (localImage) {
                addLocallyCachedImageOps(operatorList, localImage);
                args = null;
                continue;
              }
            }
            next(new Promise(function (resolveXObject, rejectXObject) {
              if (!isValidName) {
                throw new FormatError("XObject must be referred to by name.");
              }
              let xobj = xobjs.getRaw(name);
              if (xobj instanceof Ref) {
                const localImage = localImageCache.getByRef(xobj) || self._regionalImageCache.getByRef(xobj);
                if (localImage) {
                  addLocallyCachedImageOps(operatorList, localImage);
                  resolveXObject();
                  return;
                }
                const globalImage = self.globalImageCache.getData(xobj, self.pageIndex);
                if (globalImage) {
                  operatorList.addDependency(globalImage.objId);
                  operatorList.addImageOps(globalImage.fn, globalImage.args, globalImage.optionalContent, globalImage.hasMask);
                  resolveXObject();
                  return;
                }
                xobj = xref.fetch(xobj);
              }
              if (!(xobj instanceof BaseStream)) {
                throw new FormatError("XObject should be a stream");
              }
              const type = xobj.dict.get("Subtype");
              if (!(type instanceof Name)) {
                throw new FormatError("XObject should have a Name subtype");
              }
              if (type.name === "Form") {
                stateManager.save();
                self.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone({
                  newPath: true
                }), localColorSpaceCache).then(function () {
                  stateManager.restore();
                  resolveXObject();
                }, rejectXObject);
                return;
              } else if (type.name === "Image") {
                self.buildPaintImageXObject({
                  resources,
                  image: xobj,
                  operatorList,
                  cacheKey: name,
                  localImageCache,
                  localColorSpaceCache
                }).then(resolveXObject, rejectXObject);
                return;
              } else if (type.name === "PS") {
                info("Ignored XObject subtype PS");
              } else {
                throw new FormatError(\`Unhandled XObject subtype \${type.name}\`);
              }
              resolveXObject();
            }).catch(function (reason) {
              if (reason instanceof AbortException) {
                return;
              }
              if (self.options.ignoreErrors) {
                warn(\`getOperatorList - ignoring XObject: "\${reason}".\`);
                return;
              }
              throw reason;
            }));
            return;
          case OPS.setFont:
            const fontSize = args[1];
            next(self.handleSetFont(resources, args, null, operatorList, task, stateManager.state, fallbackFontDict).then(function (loadedName) {
              operatorList.addDependency(loadedName);
              operatorList.addOp(OPS.setFont, [loadedName, fontSize]);
            }));
            return;
          case OPS.endInlineImage:
            const cacheKey = args[0].cacheKey;
            if (cacheKey) {
              const localImage = localImageCache.getByName(cacheKey);
              if (localImage) {
                addLocallyCachedImageOps(operatorList, localImage);
                args = null;
                continue;
              }
            }
            next(self.buildPaintImageXObject({
              resources,
              image: args[0],
              isInline: true,
              operatorList,
              cacheKey,
              localImageCache,
              localColorSpaceCache
            }));
            return;
          case OPS.showText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            args[0] = self.handleText(args[0], stateManager.state);
            break;
          case OPS.showSpacedText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            const combinedGlyphs = [],
              state = stateManager.state;
            for (const arrItem of args[0]) {
              if (typeof arrItem === "string") {
                combinedGlyphs.push(...self.handleText(arrItem, state));
              } else if (typeof arrItem === "number") {
                combinedGlyphs.push(arrItem);
              }
            }
            args[0] = combinedGlyphs;
            fn = OPS.showText;
            break;
          case OPS.nextLineShowText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            operatorList.addOp(OPS.nextLine);
            args[0] = self.handleText(args[0], stateManager.state);
            fn = OPS.showText;
            break;
          case OPS.nextLineSetSpacingShowText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            operatorList.addOp(OPS.nextLine);
            operatorList.addOp(OPS.setWordSpacing, [args.shift()]);
            operatorList.addOp(OPS.setCharSpacing, [args.shift()]);
            args[0] = self.handleText(args[0], stateManager.state);
            fn = OPS.showText;
            break;
          case OPS.setTextRenderingMode:
            stateManager.state.textRenderingMode = args[0];
            break;
          case OPS.setFillColorSpace:
            {
              const fillCS = self._getColorSpace(args[0], resources, localColorSpaceCache);
              if (fillCS instanceof ColorSpace) {
                stateManager.state.fillColorSpace = fillCS;
                continue;
              }
              next(self._handleColorSpace(fillCS).then(colorSpace => {
                stateManager.state.fillColorSpace = colorSpace || ColorSpaceUtils.gray;
              }));
              return;
            }
          case OPS.setStrokeColorSpace:
            {
              const strokeCS = self._getColorSpace(args[0], resources, localColorSpaceCache);
              if (strokeCS instanceof ColorSpace) {
                stateManager.state.strokeColorSpace = strokeCS;
                continue;
              }
              next(self._handleColorSpace(strokeCS).then(colorSpace => {
                stateManager.state.strokeColorSpace = colorSpace || ColorSpaceUtils.gray;
              }));
              return;
            }
          case OPS.setFillColor:
            cs = stateManager.state.fillColorSpace;
            args = cs.getRgb(args, 0);
            fn = OPS.setFillRGBColor;
            break;
          case OPS.setStrokeColor:
            cs = stateManager.state.strokeColorSpace;
            args = cs.getRgb(args, 0);
            fn = OPS.setStrokeRGBColor;
            break;
          case OPS.setFillGray:
            stateManager.state.fillColorSpace = ColorSpaceUtils.gray;
            args = ColorSpaceUtils.gray.getRgb(args, 0);
            fn = OPS.setFillRGBColor;
            break;
          case OPS.setStrokeGray:
            stateManager.state.strokeColorSpace = ColorSpaceUtils.gray;
            args = ColorSpaceUtils.gray.getRgb(args, 0);
            fn = OPS.setStrokeRGBColor;
            break;
          case OPS.setFillCMYKColor:
            stateManager.state.fillColorSpace = ColorSpaceUtils.cmyk;
            args = ColorSpaceUtils.cmyk.getRgb(args, 0);
            fn = OPS.setFillRGBColor;
            break;
          case OPS.setStrokeCMYKColor:
            stateManager.state.strokeColorSpace = ColorSpaceUtils.cmyk;
            args = ColorSpaceUtils.cmyk.getRgb(args, 0);
            fn = OPS.setStrokeRGBColor;
            break;
          case OPS.setFillRGBColor:
            stateManager.state.fillColorSpace = ColorSpaceUtils.rgb;
            args = ColorSpaceUtils.rgb.getRgb(args, 0);
            break;
          case OPS.setStrokeRGBColor:
            stateManager.state.strokeColorSpace = ColorSpaceUtils.rgb;
            args = ColorSpaceUtils.rgb.getRgb(args, 0);
            break;
          case OPS.setFillColorN:
            cs = stateManager.state.patternFillColorSpace;
            if (!cs) {
              if (isNumberArray(args, null)) {
                args = ColorSpaceUtils.gray.getRgb(args, 0);
                fn = OPS.setFillRGBColor;
                break;
              }
              args = [];
              fn = OPS.setFillTransparent;
              break;
            }
            if (cs.name === "Pattern") {
              next(self.handleColorN(operatorList, OPS.setFillColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache));
              return;
            }
            args = cs.getRgb(args, 0);
            fn = OPS.setFillRGBColor;
            break;
          case OPS.setStrokeColorN:
            cs = stateManager.state.patternStrokeColorSpace;
            if (!cs) {
              if (isNumberArray(args, null)) {
                args = ColorSpaceUtils.gray.getRgb(args, 0);
                fn = OPS.setStrokeRGBColor;
                break;
              }
              args = [];
              fn = OPS.setStrokeTransparent;
              break;
            }
            if (cs.name === "Pattern") {
              next(self.handleColorN(operatorList, OPS.setStrokeColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache));
              return;
            }
            args = cs.getRgb(args, 0);
            fn = OPS.setStrokeRGBColor;
            break;
          case OPS.shadingFill:
            let shading;
            try {
              const shadingRes = resources.get("Shading");
              if (!shadingRes) {
                throw new FormatError("No shading resource found");
              }
              shading = shadingRes.get(args[0].name);
              if (!shading) {
                throw new FormatError("No shading object found");
              }
            } catch (reason) {
              if (reason instanceof AbortException) {
                continue;
              }
              if (self.options.ignoreErrors) {
                warn(\`getOperatorList - ignoring Shading: "\${reason}".\`);
                continue;
              }
              throw reason;
            }
            const patternId = self.parseShading({
              shading,
              resources,
              localColorSpaceCache,
              localShadingPatternCache
            });
            if (!patternId) {
              continue;
            }
            args = [patternId];
            fn = OPS.shadingFill;
            break;
          case OPS.setGState:
            isValidName = args[0] instanceof Name;
            name = args[0].name;
            if (isValidName) {
              const localGStateObj = localGStateCache.getByName(name);
              if (localGStateObj) {
                if (localGStateObj.length > 0) {
                  operatorList.addOp(OPS.setGState, [localGStateObj]);
                }
                args = null;
                continue;
              }
            }
            next(new Promise(function (resolveGState, rejectGState) {
              if (!isValidName) {
                throw new FormatError("GState must be referred to by name.");
              }
              const extGState = resources.get("ExtGState");
              if (!(extGState instanceof Dict)) {
                throw new FormatError("ExtGState should be a dictionary.");
              }
              const gState = extGState.get(name);
              if (!(gState instanceof Dict)) {
                throw new FormatError("GState should be a dictionary.");
              }
              self.setGState({
                resources,
                gState,
                operatorList,
                cacheKey: name,
                task,
                stateManager,
                localGStateCache,
                localColorSpaceCache
              }).then(resolveGState, rejectGState);
            }).catch(function (reason) {
              if (reason instanceof AbortException) {
                return;
              }
              if (self.options.ignoreErrors) {
                warn(\`getOperatorList - ignoring ExtGState: "\${reason}".\`);
                return;
              }
              throw reason;
            }));
            return;
          case OPS.setLineWidth:
            {
              const [thickness] = args;
              if (typeof thickness !== "number") {
                warn(\`Invalid setLineWidth: \${thickness}\`);
                continue;
              }
              args[0] = Math.abs(thickness);
              break;
            }
          case OPS.moveTo:
          case OPS.lineTo:
          case OPS.curveTo:
          case OPS.curveTo2:
          case OPS.curveTo3:
          case OPS.closePath:
          case OPS.rectangle:
            self.buildPath(fn, args, stateManager.state);
            continue;
          case OPS.stroke:
          case OPS.closeStroke:
          case OPS.fill:
          case OPS.eoFill:
          case OPS.fillStroke:
          case OPS.eoFillStroke:
          case OPS.closeFillStroke:
          case OPS.closeEOFillStroke:
          case OPS.endPath:
            {
              const {
                state: {
                  pathBuffer,
                  pathMinMax
                }
              } = stateManager;
              if (fn === OPS.closeStroke || fn === OPS.closeFillStroke || fn === OPS.closeEOFillStroke) {
                pathBuffer.push(DrawOPS.closePath);
              }
              if (pathBuffer.length === 0) {
                operatorList.addOp(OPS.constructPath, [fn, [null], null]);
              } else {
                operatorList.addOp(OPS.constructPath, [fn, [new Float32Array(pathBuffer)], pathMinMax.slice()]);
                pathBuffer.length = 0;
                pathMinMax.set([Infinity, Infinity, -Infinity, -Infinity], 0);
              }
              continue;
            }
          case OPS.markPoint:
          case OPS.markPointProps:
          case OPS.beginCompat:
          case OPS.endCompat:
            continue;
          case OPS.beginMarkedContentProps:
            if (!(args[0] instanceof Name)) {
              warn(\`Expected name for beginMarkedContentProps arg0=\${args[0]}\`);
              operatorList.addOp(OPS.beginMarkedContentProps, ["OC", null]);
              continue;
            }
            if (args[0].name === "OC") {
              next(self.parseMarkedContentProps(args[1], resources).then(data => {
                operatorList.addOp(OPS.beginMarkedContentProps, ["OC", data]);
              }).catch(reason => {
                if (reason instanceof AbortException) {
                  return;
                }
                if (self.options.ignoreErrors) {
                  warn(\`getOperatorList - ignoring beginMarkedContentProps: "\${reason}".\`);
                  operatorList.addOp(OPS.beginMarkedContentProps, ["OC", null]);
                  return;
                }
                throw reason;
              }));
              return;
            }
            args = [args[0].name, args[1] instanceof Dict ? args[1].get("MCID") : null];
            break;
          case OPS.beginMarkedContent:
          case OPS.endMarkedContent:
          default:
            if (args !== null) {
              for (i = 0, ii = args.length; i < ii; i++) {
                if (args[i] instanceof Dict) {
                  break;
                }
              }
              if (i < ii) {
                warn("getOperatorList - ignoring operator: " + fn);
                continue;
              }
            }
        }
        operatorList.addOp(fn, args);
      }
      if (stop) {
        next(deferred);
        return;
      }
      closePendingRestoreOPS();
      resolve();
    }).catch(reason => {
      if (reason instanceof AbortException) {
        return;
      }
      if (this.options.ignoreErrors) {
        warn(\`getOperatorList - ignoring errors during "\${task.name}" \` + \`task: "\${reason}".\`);
        closePendingRestoreOPS();
        return;
      }
      throw reason;
    });
  }
  getTextContent({
    stream,
    task,
    resources,
    stateManager = null,
    includeMarkedContent = false,
    sink,
    seenStyles = new Set(),
    viewBox,
    lang = null,
    markedContentData = null,
    disableNormalization = false,
    keepWhiteSpace = false
  }) {
    resources ||= Dict.empty;
    stateManager ||= new StateManager(new TextState());
    if (includeMarkedContent) {
      markedContentData ||= {
        level: 0
      };
    }
    const textContent = {
      items: [],
      styles: Object.create(null),
      lang
    };
    const textContentItem = {
      initialized: false,
      str: [],
      totalWidth: 0,
      totalHeight: 0,
      width: 0,
      height: 0,
      vertical: false,
      prevTransform: null,
      textAdvanceScale: 0,
      spaceInFlowMin: 0,
      spaceInFlowMax: 0,
      trackingSpaceMin: Infinity,
      negativeSpaceMax: -Infinity,
      notASpace: -Infinity,
      transform: null,
      fontName: null,
      hasEOL: false
    };
    const twoLastChars = [" ", " "];
    let twoLastCharsPos = 0;
    function saveLastChar(char) {
      const nextPos = (twoLastCharsPos + 1) % 2;
      const ret = twoLastChars[twoLastCharsPos] !== " " && twoLastChars[nextPos] === " ";
      twoLastChars[twoLastCharsPos] = char;
      twoLastCharsPos = nextPos;
      return !keepWhiteSpace && ret;
    }
    function shouldAddWhitepsace() {
      return !keepWhiteSpace && twoLastChars[twoLastCharsPos] !== " " && twoLastChars[(twoLastCharsPos + 1) % 2] === " ";
    }
    function resetLastChars() {
      twoLastChars[0] = twoLastChars[1] = " ";
      twoLastCharsPos = 0;
    }
    const TRACKING_SPACE_FACTOR = 0.102;
    const NOT_A_SPACE_FACTOR = 0.03;
    const NEGATIVE_SPACE_FACTOR = -0.2;
    const SPACE_IN_FLOW_MIN_FACTOR = 0.102;
    const SPACE_IN_FLOW_MAX_FACTOR = 0.6;
    const VERTICAL_SHIFT_RATIO = 0.25;
    const self = this;
    const xref = this.xref;
    const showSpacedTextBuffer = [];
    let xobjs = null;
    const emptyXObjectCache = new LocalImageCache();
    const emptyGStateCache = new LocalGStateCache();
    const preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
    let textState;
    function pushWhitespace({
      width = 0,
      height = 0,
      transform = textContentItem.prevTransform,
      fontName = textContentItem.fontName
    }) {
      textContent.items.push({
        str: " ",
        dir: "ltr",
        width,
        height,
        transform,
        fontName,
        hasEOL: false
      });
    }
    function getCurrentTextTransform() {
      const font = textState.font;
      const tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];
      if (font.isType3Font && (textState.fontSize <= 1 || font.isCharBBox) && !isArrayEqual(textState.fontMatrix, FONT_IDENTITY_MATRIX)) {
        const glyphHeight = font.bbox[3] - font.bbox[1];
        if (glyphHeight > 0) {
          tsm[3] *= glyphHeight * textState.fontMatrix[3];
        }
      }
      return Util.transform(textState.ctm, Util.transform(textState.textMatrix, tsm));
    }
    function ensureTextContentItem() {
      if (textContentItem.initialized) {
        return textContentItem;
      }
      const {
        font,
        loadedName
      } = textState;
      if (!seenStyles.has(loadedName)) {
        seenStyles.add(loadedName);
        textContent.styles[loadedName] = {
          fontFamily: font.fallbackName,
          ascent: font.ascent,
          descent: font.descent,
          vertical: font.vertical
        };
        if (self.options.fontExtraProperties && font.systemFontInfo) {
          const style = textContent.styles[loadedName];
          style.fontSubstitution = font.systemFontInfo.css;
          style.fontSubstitutionLoadedName = font.systemFontInfo.loadedName;
        }
      }
      textContentItem.fontName = loadedName;
      const trm = textContentItem.transform = getCurrentTextTransform();
      if (!font.vertical) {
        textContentItem.width = textContentItem.totalWidth = 0;
        textContentItem.height = textContentItem.totalHeight = Math.hypot(trm[2], trm[3]);
        textContentItem.vertical = false;
      } else {
        textContentItem.width = textContentItem.totalWidth = Math.hypot(trm[0], trm[1]);
        textContentItem.height = textContentItem.totalHeight = 0;
        textContentItem.vertical = true;
      }
      const scaleLineX = Math.hypot(textState.textLineMatrix[0], textState.textLineMatrix[1]);
      const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
      textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;
      const {
        fontSize
      } = textState;
      textContentItem.trackingSpaceMin = fontSize * TRACKING_SPACE_FACTOR;
      textContentItem.notASpace = fontSize * NOT_A_SPACE_FACTOR;
      textContentItem.negativeSpaceMax = fontSize * NEGATIVE_SPACE_FACTOR;
      textContentItem.spaceInFlowMin = fontSize * SPACE_IN_FLOW_MIN_FACTOR;
      textContentItem.spaceInFlowMax = fontSize * SPACE_IN_FLOW_MAX_FACTOR;
      textContentItem.hasEOL = false;
      textContentItem.initialized = true;
      return textContentItem;
    }
    function updateAdvanceScale() {
      if (!textContentItem.initialized) {
        return;
      }
      const scaleLineX = Math.hypot(textState.textLineMatrix[0], textState.textLineMatrix[1]);
      const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
      const scaleFactor = scaleCtmX * scaleLineX;
      if (scaleFactor === textContentItem.textAdvanceScale) {
        return;
      }
      if (!textContentItem.vertical) {
        textContentItem.totalWidth += textContentItem.width * textContentItem.textAdvanceScale;
        textContentItem.width = 0;
      } else {
        textContentItem.totalHeight += textContentItem.height * textContentItem.textAdvanceScale;
        textContentItem.height = 0;
      }
      textContentItem.textAdvanceScale = scaleFactor;
    }
    function runBidiTransform(textChunk) {
      let text = textChunk.str.join("");
      if (!disableNormalization) {
        text = normalizeUnicode(text);
      }
      const bidiResult = bidi(text, -1, textChunk.vertical);
      return {
        str: bidiResult.str,
        dir: bidiResult.dir,
        width: Math.abs(textChunk.totalWidth),
        height: Math.abs(textChunk.totalHeight),
        transform: textChunk.transform,
        fontName: textChunk.fontName,
        hasEOL: textChunk.hasEOL
      };
    }
    async function handleSetFont(fontName, fontRef) {
      const translated = await self.loadFont(fontName, fontRef, resources, task);
      textState.loadedName = translated.loadedName;
      textState.font = translated.font;
      textState.fontMatrix = translated.font.fontMatrix || FONT_IDENTITY_MATRIX;
    }
    function applyInverseRotation(x, y, matrix) {
      const scale = Math.hypot(matrix[0], matrix[1]);
      return [(matrix[0] * x + matrix[1] * y) / scale, (matrix[2] * x + matrix[3] * y) / scale];
    }
    function compareWithLastPosition(glyphWidth) {
      const currentTransform = getCurrentTextTransform();
      let posX = currentTransform[4];
      let posY = currentTransform[5];
      if (textState.font?.vertical) {
        if (posX < viewBox[0] || posX > viewBox[2] || posY + glyphWidth < viewBox[1] || posY > viewBox[3]) {
          return false;
        }
      } else if (posX + glyphWidth < viewBox[0] || posX > viewBox[2] || posY < viewBox[1] || posY > viewBox[3]) {
        return false;
      }
      if (!textState.font || !textContentItem.prevTransform) {
        return true;
      }
      let lastPosX = textContentItem.prevTransform[4];
      let lastPosY = textContentItem.prevTransform[5];
      if (lastPosX === posX && lastPosY === posY) {
        return true;
      }
      let rotate = -1;
      if (currentTransform[0] && currentTransform[1] === 0 && currentTransform[2] === 0) {
        rotate = currentTransform[0] > 0 ? 0 : 180;
      } else if (currentTransform[1] && currentTransform[0] === 0 && currentTransform[3] === 0) {
        rotate = currentTransform[1] > 0 ? 90 : 270;
      }
      switch (rotate) {
        case 0:
          break;
        case 90:
          [posX, posY] = [posY, posX];
          [lastPosX, lastPosY] = [lastPosY, lastPosX];
          break;
        case 180:
          [posX, posY, lastPosX, lastPosY] = [-posX, -posY, -lastPosX, -lastPosY];
          break;
        case 270:
          [posX, posY] = [-posY, -posX];
          [lastPosX, lastPosY] = [-lastPosY, -lastPosX];
          break;
        default:
          [posX, posY] = applyInverseRotation(posX, posY, currentTransform);
          [lastPosX, lastPosY] = applyInverseRotation(lastPosX, lastPosY, textContentItem.prevTransform);
      }
      if (textState.font.vertical) {
        const advanceY = (lastPosY - posY) / textContentItem.textAdvanceScale;
        const advanceX = posX - lastPosX;
        const textOrientation = Math.sign(textContentItem.height);
        if (advanceY < textOrientation * textContentItem.negativeSpaceMax) {
          if (Math.abs(advanceX) > 0.5 * textContentItem.width) {
            appendEOL();
            return true;
          }
          resetLastChars();
          flushTextContentItem();
          return true;
        }
        if (Math.abs(advanceX) > textContentItem.width) {
          appendEOL();
          return true;
        }
        if (advanceY <= textOrientation * textContentItem.notASpace) {
          resetLastChars();
        }
        if (advanceY <= textOrientation * textContentItem.trackingSpaceMin) {
          if (shouldAddWhitepsace()) {
            resetLastChars();
            flushTextContentItem();
            pushWhitespace({
              height: Math.abs(advanceY)
            });
          } else {
            textContentItem.height += advanceY;
          }
        } else if (!addFakeSpaces(advanceY, textContentItem.prevTransform, textOrientation)) {
          if (textContentItem.str.length === 0) {
            resetLastChars();
            pushWhitespace({
              height: Math.abs(advanceY)
            });
          } else {
            textContentItem.height += advanceY;
          }
        }
        if (Math.abs(advanceX) > textContentItem.width * VERTICAL_SHIFT_RATIO) {
          flushTextContentItem();
        }
        return true;
      }
      const advanceX = (posX - lastPosX) / textContentItem.textAdvanceScale;
      const advanceY = posY - lastPosY;
      const textOrientation = Math.sign(textContentItem.width);
      if (advanceX < textOrientation * textContentItem.negativeSpaceMax) {
        if (Math.abs(advanceY) > 0.5 * textContentItem.height) {
          appendEOL();
          return true;
        }
        resetLastChars();
        flushTextContentItem();
        return true;
      }
      if (Math.abs(advanceY) > textContentItem.height) {
        appendEOL();
        return true;
      }
      if (advanceX <= textOrientation * textContentItem.notASpace) {
        resetLastChars();
      }
      if (advanceX <= textOrientation * textContentItem.trackingSpaceMin) {
        if (shouldAddWhitepsace()) {
          resetLastChars();
          flushTextContentItem();
          pushWhitespace({
            width: Math.abs(advanceX)
          });
        } else {
          textContentItem.width += advanceX;
        }
      } else if (!addFakeSpaces(advanceX, textContentItem.prevTransform, textOrientation)) {
        if (textContentItem.str.length === 0) {
          resetLastChars();
          pushWhitespace({
            width: Math.abs(advanceX)
          });
        } else {
          textContentItem.width += advanceX;
        }
      }
      if (Math.abs(advanceY) > textContentItem.height * VERTICAL_SHIFT_RATIO) {
        flushTextContentItem();
      }
      return true;
    }
    function buildTextContentItem({
      chars,
      extraSpacing
    }) {
      const font = textState.font;
      if (!chars) {
        const charSpacing = textState.charSpacing + extraSpacing;
        if (charSpacing) {
          if (!font.vertical) {
            textState.translateTextMatrix(charSpacing * textState.textHScale, 0);
          } else {
            textState.translateTextMatrix(0, -charSpacing);
          }
        }
        if (keepWhiteSpace) {
          compareWithLastPosition(0);
        }
        return;
      }
      const glyphs = font.charsToGlyphs(chars);
      const scale = textState.fontMatrix[0] * textState.fontSize;
      for (let i = 0, ii = glyphs.length; i < ii; i++) {
        const glyph = glyphs[i];
        const {
          category
        } = glyph;
        if (category.isInvisibleFormatMark) {
          continue;
        }
        let charSpacing = textState.charSpacing + (i + 1 === ii ? extraSpacing : 0);
        let glyphWidth = glyph.width;
        if (font.vertical) {
          glyphWidth = glyph.vmetric ? glyph.vmetric[0] : -glyphWidth;
        }
        let scaledDim = glyphWidth * scale;
        if (!keepWhiteSpace && category.isWhitespace) {
          if (!font.vertical) {
            charSpacing += scaledDim + textState.wordSpacing;
            textState.translateTextMatrix(charSpacing * textState.textHScale, 0);
          } else {
            charSpacing += -scaledDim + textState.wordSpacing;
            textState.translateTextMatrix(0, -charSpacing);
          }
          saveLastChar(" ");
          continue;
        }
        if (!category.isZeroWidthDiacritic && !compareWithLastPosition(scaledDim)) {
          if (!font.vertical) {
            textState.translateTextMatrix(scaledDim * textState.textHScale, 0);
          } else {
            textState.translateTextMatrix(0, scaledDim);
          }
          continue;
        }
        const textChunk = ensureTextContentItem();
        if (category.isZeroWidthDiacritic) {
          scaledDim = 0;
        }
        if (!font.vertical) {
          scaledDim *= textState.textHScale;
          textState.translateTextMatrix(scaledDim, 0);
          textChunk.width += scaledDim;
        } else {
          textState.translateTextMatrix(0, scaledDim);
          scaledDim = Math.abs(scaledDim);
          textChunk.height += scaledDim;
        }
        if (scaledDim) {
          textChunk.prevTransform = getCurrentTextTransform();
        }
        const glyphUnicode = glyph.unicode;
        if (saveLastChar(glyphUnicode)) {
          textChunk.str.push(" ");
        }
        textChunk.str.push(glyphUnicode);
        if (charSpacing) {
          if (!font.vertical) {
            textState.translateTextMatrix(charSpacing * textState.textHScale, 0);
          } else {
            textState.translateTextMatrix(0, -charSpacing);
          }
        }
      }
    }
    function appendEOL() {
      resetLastChars();
      if (textContentItem.initialized) {
        textContentItem.hasEOL = true;
        flushTextContentItem();
      } else {
        textContent.items.push({
          str: "",
          dir: "ltr",
          width: 0,
          height: 0,
          transform: getCurrentTextTransform(),
          fontName: textState.loadedName,
          hasEOL: true
        });
      }
    }
    function addFakeSpaces(width, transf, textOrientation) {
      if (textOrientation * textContentItem.spaceInFlowMin <= width && width <= textOrientation * textContentItem.spaceInFlowMax) {
        if (textContentItem.initialized) {
          resetLastChars();
          textContentItem.str.push(" ");
        }
        return false;
      }
      const fontName = textContentItem.fontName;
      let height = 0;
      if (textContentItem.vertical) {
        height = width;
        width = 0;
      }
      flushTextContentItem();
      resetLastChars();
      pushWhitespace({
        width: Math.abs(width),
        height: Math.abs(height),
        transform: transf || getCurrentTextTransform(),
        fontName
      });
      return true;
    }
    function flushTextContentItem() {
      if (!textContentItem.initialized || !textContentItem.str) {
        return;
      }
      if (!textContentItem.vertical) {
        textContentItem.totalWidth += textContentItem.width * textContentItem.textAdvanceScale;
      } else {
        textContentItem.totalHeight += textContentItem.height * textContentItem.textAdvanceScale;
      }
      textContent.items.push(runBidiTransform(textContentItem));
      textContentItem.initialized = false;
      textContentItem.str.length = 0;
    }
    function enqueueChunk(batch = false) {
      const length = textContent.items.length;
      if (length === 0) {
        return;
      }
      if (batch && length < TEXT_CHUNK_BATCH_SIZE) {
        return;
      }
      sink.enqueue(textContent, length);
      textContent.items = [];
      textContent.styles = Object.create(null);
    }
    const timeSlotManager = new TimeSlotManager();
    return new Promise(function promiseBody(resolve, reject) {
      const next = function (promise) {
        enqueueChunk(true);
        Promise.all([promise, sink.ready]).then(function () {
          try {
            promiseBody(resolve, reject);
          } catch (ex) {
            reject(ex);
          }
        }, reject);
      };
      task.ensureNotTerminated();
      timeSlotManager.reset();
      const operation = {};
      let stop,
        name,
        isValidName,
        args = [];
      while (!(stop = timeSlotManager.check())) {
        args.length = 0;
        operation.args = args;
        if (!preprocessor.read(operation)) {
          break;
        }
        const previousState = textState;
        textState = stateManager.state;
        const fn = operation.fn;
        args = operation.args;
        switch (fn | 0) {
          case OPS.setFont:
            const fontNameArg = args[0].name,
              fontSizeArg = args[1];
            if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {
              break;
            }
            flushTextContentItem();
            textState.fontName = fontNameArg;
            textState.fontSize = fontSizeArg;
            next(handleSetFont(fontNameArg, null));
            return;
          case OPS.setTextRise:
            textState.textRise = args[0];
            break;
          case OPS.setHScale:
            textState.textHScale = args[0] / 100;
            break;
          case OPS.setLeading:
            textState.leading = args[0];
            break;
          case OPS.moveText:
            textState.translateTextLineMatrix(args[0], args[1]);
            textState.textMatrix = textState.textLineMatrix.slice();
            break;
          case OPS.setLeadingMoveText:
            textState.leading = -args[1];
            textState.translateTextLineMatrix(args[0], args[1]);
            textState.textMatrix = textState.textLineMatrix.slice();
            break;
          case OPS.nextLine:
            textState.carriageReturn();
            break;
          case OPS.setTextMatrix:
            textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
            textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
            updateAdvanceScale();
            break;
          case OPS.setCharSpacing:
            textState.charSpacing = args[0];
            break;
          case OPS.setWordSpacing:
            textState.wordSpacing = args[0];
            break;
          case OPS.beginText:
            textState.textMatrix = IDENTITY_MATRIX.slice();
            textState.textLineMatrix = IDENTITY_MATRIX.slice();
            break;
          case OPS.showSpacedText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            const spaceFactor = (textState.font.vertical ? 1 : -1) * textState.fontSize / 1000;
            const elements = args[0];
            for (let i = 0, ii = elements.length; i < ii; i++) {
              const item = elements[i];
              if (typeof item === "string") {
                showSpacedTextBuffer.push(item);
              } else if (typeof item === "number" && item !== 0) {
                const str = showSpacedTextBuffer.join("");
                showSpacedTextBuffer.length = 0;
                buildTextContentItem({
                  chars: str,
                  extraSpacing: item * spaceFactor
                });
              }
            }
            if (showSpacedTextBuffer.length > 0) {
              const str = showSpacedTextBuffer.join("");
              showSpacedTextBuffer.length = 0;
              buildTextContentItem({
                chars: str,
                extraSpacing: 0
              });
            }
            break;
          case OPS.showText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            buildTextContentItem({
              chars: args[0],
              extraSpacing: 0
            });
            break;
          case OPS.nextLineShowText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            textState.carriageReturn();
            buildTextContentItem({
              chars: args[0],
              extraSpacing: 0
            });
            break;
          case OPS.nextLineSetSpacingShowText:
            if (!stateManager.state.font) {
              self.ensureStateFont(stateManager.state);
              continue;
            }
            textState.wordSpacing = args[0];
            textState.charSpacing = args[1];
            textState.carriageReturn();
            buildTextContentItem({
              chars: args[2],
              extraSpacing: 0
            });
            break;
          case OPS.paintXObject:
            flushTextContentItem();
            xobjs ??= resources.get("XObject") || Dict.empty;
            isValidName = args[0] instanceof Name;
            name = args[0].name;
            if (isValidName && emptyXObjectCache.getByName(name)) {
              break;
            }
            next(new Promise(function (resolveXObject, rejectXObject) {
              if (!isValidName) {
                throw new FormatError("XObject must be referred to by name.");
              }
              let xobj = xobjs.getRaw(name);
              if (xobj instanceof Ref) {
                if (emptyXObjectCache.getByRef(xobj)) {
                  resolveXObject();
                  return;
                }
                const globalImage = self.globalImageCache.getData(xobj, self.pageIndex);
                if (globalImage) {
                  resolveXObject();
                  return;
                }
                xobj = xref.fetch(xobj);
              }
              if (!(xobj instanceof BaseStream)) {
                throw new FormatError("XObject should be a stream");
              }
              const type = xobj.dict.get("Subtype");
              if (!(type instanceof Name)) {
                throw new FormatError("XObject should have a Name subtype");
              }
              if (type.name !== "Form") {
                emptyXObjectCache.set(name, xobj.dict.objId, true);
                resolveXObject();
                return;
              }
              const currentState = stateManager.state.clone();
              const xObjStateManager = new StateManager(currentState);
              const matrix = lookupMatrix(xobj.dict.getArray("Matrix"), null);
              if (matrix) {
                xObjStateManager.transform(matrix);
              }
              enqueueChunk();
              const sinkWrapper = {
                enqueueInvoked: false,
                enqueue(chunk, size) {
                  this.enqueueInvoked = true;
                  sink.enqueue(chunk, size);
                },
                get desiredSize() {
                  return sink.desiredSize;
                },
                get ready() {
                  return sink.ready;
                }
              };
              self.getTextContent({
                stream: xobj,
                task,
                resources: xobj.dict.get("Resources") || resources,
                stateManager: xObjStateManager,
                includeMarkedContent,
                sink: sinkWrapper,
                seenStyles,
                viewBox,
                lang,
                markedContentData,
                disableNormalization,
                keepWhiteSpace
              }).then(function () {
                if (!sinkWrapper.enqueueInvoked) {
                  emptyXObjectCache.set(name, xobj.dict.objId, true);
                }
                resolveXObject();
              }, rejectXObject);
            }).catch(function (reason) {
              if (reason instanceof AbortException) {
                return;
              }
              if (self.options.ignoreErrors) {
                warn(\`getTextContent - ignoring XObject: "\${reason}".\`);
                return;
              }
              throw reason;
            }));
            return;
          case OPS.setGState:
            isValidName = args[0] instanceof Name;
            name = args[0].name;
            if (isValidName && emptyGStateCache.getByName(name)) {
              break;
            }
            next(new Promise(function (resolveGState, rejectGState) {
              if (!isValidName) {
                throw new FormatError("GState must be referred to by name.");
              }
              const extGState = resources.get("ExtGState");
              if (!(extGState instanceof Dict)) {
                throw new FormatError("ExtGState should be a dictionary.");
              }
              const gState = extGState.get(name);
              if (!(gState instanceof Dict)) {
                throw new FormatError("GState should be a dictionary.");
              }
              const gStateFont = gState.get("Font");
              if (!gStateFont) {
                emptyGStateCache.set(name, gState.objId, true);
                resolveGState();
                return;
              }
              flushTextContentItem();
              textState.fontName = null;
              textState.fontSize = gStateFont[1];
              handleSetFont(null, gStateFont[0]).then(resolveGState, rejectGState);
            }).catch(function (reason) {
              if (reason instanceof AbortException) {
                return;
              }
              if (self.options.ignoreErrors) {
                warn(\`getTextContent - ignoring ExtGState: "\${reason}".\`);
                return;
              }
              throw reason;
            }));
            return;
          case OPS.beginMarkedContent:
            flushTextContentItem();
            if (includeMarkedContent) {
              markedContentData.level++;
              textContent.items.push({
                type: "beginMarkedContent",
                tag: args[0] instanceof Name ? args[0].name : null
              });
            }
            break;
          case OPS.beginMarkedContentProps:
            flushTextContentItem();
            if (includeMarkedContent) {
              markedContentData.level++;
              let mcid = null;
              if (args[1] instanceof Dict) {
                mcid = args[1].get("MCID");
              }
              textContent.items.push({
                type: "beginMarkedContentProps",
                id: Number.isInteger(mcid) ? \`\${self.idFactory.getPageObjId()}_mc\${mcid}\` : null,
                tag: args[0] instanceof Name ? args[0].name : null
              });
            }
            break;
          case OPS.endMarkedContent:
            flushTextContentItem();
            if (includeMarkedContent) {
              if (markedContentData.level === 0) {
                break;
              }
              markedContentData.level--;
              textContent.items.push({
                type: "endMarkedContent"
              });
            }
            break;
          case OPS.restore:
            if (previousState && (previousState.font !== textState.font || previousState.fontSize !== textState.fontSize || previousState.fontName !== textState.fontName)) {
              flushTextContentItem();
            }
            break;
        }
        if (textContent.items.length >= sink.desiredSize) {
          stop = true;
          break;
        }
      }
      if (stop) {
        next(deferred);
        return;
      }
      flushTextContentItem();
      enqueueChunk();
      resolve();
    }).catch(reason => {
      if (reason instanceof AbortException) {
        return;
      }
      if (this.options.ignoreErrors) {
        warn(\`getTextContent - ignoring errors during "\${task.name}" \` + \`task: "\${reason}".\`);
        flushTextContentItem();
        enqueueChunk();
        return;
      }
      throw reason;
    });
  }
  async extractDataStructures(dict, properties) {
    const xref = this.xref;
    let cidToGidBytes;
    const toUnicodePromise = this.readToUnicode(properties.toUnicode);
    if (properties.composite) {
      const cidSystemInfo = dict.get("CIDSystemInfo");
      if (cidSystemInfo instanceof Dict) {
        properties.cidSystemInfo = {
          registry: stringToPDFString(cidSystemInfo.get("Registry")),
          ordering: stringToPDFString(cidSystemInfo.get("Ordering")),
          supplement: cidSystemInfo.get("Supplement")
        };
      }
      try {
        const cidToGidMap = dict.get("CIDToGIDMap");
        if (cidToGidMap instanceof BaseStream) {
          cidToGidBytes = cidToGidMap.getBytes();
        }
      } catch (ex) {
        if (!this.options.ignoreErrors) {
          throw ex;
        }
        warn(\`extractDataStructures - ignoring CIDToGIDMap data: "\${ex}".\`);
      }
    }
    const differences = [];
    let baseEncodingName = null;
    let encoding;
    if (dict.has("Encoding")) {
      encoding = dict.get("Encoding");
      if (encoding instanceof Dict) {
        baseEncodingName = encoding.get("BaseEncoding");
        baseEncodingName = baseEncodingName instanceof Name ? baseEncodingName.name : null;
        if (encoding.has("Differences")) {
          const diffEncoding = encoding.get("Differences");
          let index = 0;
          for (const entry of diffEncoding) {
            const data = xref.fetchIfRef(entry);
            if (typeof data === "number") {
              index = data;
            } else if (data instanceof Name) {
              differences[index++] = data.name;
            } else {
              throw new FormatError(\`Invalid entry in 'Differences' array: \${data}\`);
            }
          }
        }
      } else if (encoding instanceof Name) {
        baseEncodingName = encoding.name;
      } else {
        const msg = "Encoding is not a Name nor a Dict";
        if (!this.options.ignoreErrors) {
          throw new FormatError(msg);
        }
        warn(msg);
      }
      if (baseEncodingName !== "MacRomanEncoding" && baseEncodingName !== "MacExpertEncoding" && baseEncodingName !== "WinAnsiEncoding") {
        baseEncodingName = null;
      }
    }
    const nonEmbeddedFont = !properties.file || properties.isInternalFont,
      isSymbolsFontName = getSymbolsFonts()[properties.name];
    if (baseEncodingName && nonEmbeddedFont && isSymbolsFontName) {
      baseEncodingName = null;
    }
    if (baseEncodingName) {
      properties.defaultEncoding = getEncoding(baseEncodingName);
    } else {
      const isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
      const isNonsymbolicFont = !!(properties.flags & FontFlags.Nonsymbolic);
      encoding = StandardEncoding;
      if (properties.type === "TrueType" && !isNonsymbolicFont) {
        encoding = WinAnsiEncoding;
      }
      if (isSymbolicFont || isSymbolsFontName) {
        encoding = MacRomanEncoding;
        if (nonEmbeddedFont) {
          if (/Symbol/i.test(properties.name)) {
            encoding = SymbolSetEncoding;
          } else if (/Dingbats/i.test(properties.name)) {
            encoding = ZapfDingbatsEncoding;
          } else if (/Wingdings/i.test(properties.name)) {
            encoding = WinAnsiEncoding;
          }
        }
      }
      properties.defaultEncoding = encoding;
    }
    properties.differences = differences;
    properties.baseEncodingName = baseEncodingName;
    properties.hasEncoding = !!baseEncodingName || differences.length > 0;
    properties.dict = dict;
    properties.toUnicode = await toUnicodePromise;
    const builtToUnicode = await this.buildToUnicode(properties);
    properties.toUnicode = builtToUnicode;
    if (cidToGidBytes) {
      properties.cidToGidMap = this.readCidToGidMap(cidToGidBytes, builtToUnicode);
    }
    return properties;
  }
  _simpleFontToUnicode(properties, forceGlyphs = false) {
    assert(!properties.composite, "Must be a simple font.");
    const toUnicode = [];
    const encoding = properties.defaultEncoding.slice();
    const baseEncodingName = properties.baseEncodingName;
    const differences = properties.differences;
    for (const charcode in differences) {
      const glyphName = differences[charcode];
      if (glyphName === ".notdef") {
        continue;
      }
      encoding[charcode] = glyphName;
    }
    const glyphsUnicodeMap = getGlyphsUnicode();
    for (const charcode in encoding) {
      let glyphName = encoding[charcode];
      if (glyphName === "") {
        continue;
      }
      let unicode = glyphsUnicodeMap[glyphName];
      if (unicode !== undefined) {
        toUnicode[charcode] = String.fromCharCode(unicode);
        continue;
      }
      let code = 0;
      switch (glyphName[0]) {
        case "G":
          if (glyphName.length === 3) {
            code = parseInt(glyphName.substring(1), 16);
          }
          break;
        case "g":
          if (glyphName.length === 5) {
            code = parseInt(glyphName.substring(1), 16);
          }
          break;
        case "C":
        case "c":
          if (glyphName.length >= 3 && glyphName.length <= 4) {
            const codeStr = glyphName.substring(1);
            if (forceGlyphs) {
              code = parseInt(codeStr, 16);
              break;
            }
            code = +codeStr;
            if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {
              return this._simpleFontToUnicode(properties, true);
            }
          }
          break;
        case "u":
          unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
          if (unicode !== -1) {
            code = unicode;
          }
          break;
        default:
          switch (glyphName) {
            case "f_h":
            case "f_t":
            case "T_h":
              toUnicode[charcode] = glyphName.replaceAll("_", "");
              continue;
          }
          break;
      }
      if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {
        if (baseEncodingName && code === +charcode) {
          const baseEncoding = getEncoding(baseEncodingName);
          if (baseEncoding && (glyphName = baseEncoding[charcode])) {
            toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);
            continue;
          }
        }
        toUnicode[charcode] = String.fromCodePoint(code);
      }
    }
    return toUnicode;
  }
  async buildToUnicode(properties) {
    properties.hasIncludedToUnicodeMap = properties.toUnicode?.length > 0;
    if (properties.hasIncludedToUnicodeMap) {
      if (!properties.composite && properties.hasEncoding) {
        properties.fallbackToUnicode = this._simpleFontToUnicode(properties);
      }
      return properties.toUnicode;
    }
    if (!properties.composite) {
      return new ToUnicodeMap(this._simpleFontToUnicode(properties));
    }
    if (properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof IdentityCMap) || properties.cidSystemInfo?.registry === "Adobe" && (properties.cidSystemInfo.ordering === "GB1" || properties.cidSystemInfo.ordering === "CNS1" || properties.cidSystemInfo.ordering === "Japan1" || properties.cidSystemInfo.ordering === "Korea1"))) {
      const {
        registry,
        ordering
      } = properties.cidSystemInfo;
      const ucs2CMapName = Name.get(\`\${registry}-\${ordering}-UCS2\`);
      const ucs2CMap = await CMapFactory.create({
        encoding: ucs2CMapName,
        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
        useCMap: null
      });
      const toUnicode = [],
        buf = [];
      properties.cMap.forEach(function (charcode, cid) {
        if (cid > 0xffff) {
          throw new FormatError("Max size of CID is 65,535");
        }
        const ucs2 = ucs2CMap.lookup(cid);
        if (ucs2) {
          buf.length = 0;
          for (let i = 0, ii = ucs2.length; i < ii; i += 2) {
            buf.push((ucs2.charCodeAt(i) << 8) + ucs2.charCodeAt(i + 1));
          }
          toUnicode[charcode] = String.fromCharCode(...buf);
        }
      });
      return new ToUnicodeMap(toUnicode);
    }
    return new IdentityToUnicodeMap(properties.firstChar, properties.lastChar);
  }
  async readToUnicode(cmapObj) {
    if (!cmapObj) {
      return null;
    }
    if (cmapObj instanceof Name) {
      const cmap = await CMapFactory.create({
        encoding: cmapObj,
        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
        useCMap: null
      });
      if (cmap instanceof IdentityCMap) {
        return new IdentityToUnicodeMap(0, 0xffff);
      }
      return new ToUnicodeMap(cmap.getMap());
    }
    if (cmapObj instanceof BaseStream) {
      try {
        const cmap = await CMapFactory.create({
          encoding: cmapObj,
          fetchBuiltInCMap: this._fetchBuiltInCMapBound,
          useCMap: null
        });
        if (cmap instanceof IdentityCMap) {
          return new IdentityToUnicodeMap(0, 0xffff);
        }
        const map = new Array(cmap.length);
        cmap.forEach(function (charCode, token) {
          if (typeof token === "number") {
            map[charCode] = String.fromCodePoint(token);
            return;
          }
          if (token.length % 2 !== 0) {
            token = "\\u0000" + token;
          }
          const str = [];
          for (let k = 0; k < token.length; k += 2) {
            const w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);
            if ((w1 & 0xf800) !== 0xd800) {
              str.push(w1);
              continue;
            }
            k += 2;
            const w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);
            str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);
          }
          map[charCode] = String.fromCodePoint(...str);
        });
        return new ToUnicodeMap(map);
      } catch (reason) {
        if (reason instanceof AbortException) {
          return null;
        }
        if (this.options.ignoreErrors) {
          warn(\`readToUnicode - ignoring ToUnicode data: "\${reason}".\`);
          return null;
        }
        throw reason;
      }
    }
    return null;
  }
  readCidToGidMap(glyphsData, toUnicode) {
    const result = [];
    for (let j = 0, jj = glyphsData.length; j < jj; j++) {
      const glyphID = glyphsData[j++] << 8 | glyphsData[j];
      const code = j >> 1;
      if (glyphID === 0 && !toUnicode.has(code)) {
        continue;
      }
      result[code] = glyphID;
    }
    return result;
  }
  extractWidths(dict, descriptor, properties) {
    const xref = this.xref;
    let glyphsWidths = [];
    let defaultWidth = 0;
    const glyphsVMetrics = [];
    let defaultVMetrics;
    if (properties.composite) {
      const dw = dict.get("DW");
      defaultWidth = typeof dw === "number" ? Math.ceil(dw) : 1000;
      const widths = dict.get("W");
      if (Array.isArray(widths)) {
        for (let i = 0, ii = widths.length; i < ii; i++) {
          let start = xref.fetchIfRef(widths[i++]);
          if (!Number.isInteger(start)) {
            break;
          }
          const code = xref.fetchIfRef(widths[i]);
          if (Array.isArray(code)) {
            for (const c of code) {
              const width = xref.fetchIfRef(c);
              if (typeof width === "number") {
                glyphsWidths[start] = width;
              }
              start++;
            }
          } else if (Number.isInteger(code)) {
            const width = xref.fetchIfRef(widths[++i]);
            if (typeof width !== "number") {
              continue;
            }
            for (let j = start; j <= code; j++) {
              glyphsWidths[j] = width;
            }
          } else {
            break;
          }
        }
      }
      if (properties.vertical) {
        const dw2 = dict.getArray("DW2");
        let vmetrics = isNumberArray(dw2, 2) ? dw2 : [880, -1000];
        defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];
        vmetrics = dict.get("W2");
        if (Array.isArray(vmetrics)) {
          for (let i = 0, ii = vmetrics.length; i < ii; i++) {
            let start = xref.fetchIfRef(vmetrics[i++]);
            if (!Number.isInteger(start)) {
              break;
            }
            const code = xref.fetchIfRef(vmetrics[i]);
            if (Array.isArray(code)) {
              for (let j = 0, jj = code.length; j < jj; j++) {
                const vmetric = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];
                if (isNumberArray(vmetric, null)) {
                  glyphsVMetrics[start] = vmetric;
                }
                start++;
              }
            } else if (Number.isInteger(code)) {
              const vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];
              if (!isNumberArray(vmetric, null)) {
                continue;
              }
              for (let j = start; j <= code; j++) {
                glyphsVMetrics[j] = vmetric;
              }
            } else {
              break;
            }
          }
        }
      }
    } else {
      const widths = dict.get("Widths");
      if (Array.isArray(widths)) {
        let j = properties.firstChar;
        for (const w of widths) {
          const width = xref.fetchIfRef(w);
          if (typeof width === "number") {
            glyphsWidths[j] = width;
          }
          j++;
        }
        const missingWidth = descriptor.get("MissingWidth");
        defaultWidth = typeof missingWidth === "number" ? missingWidth : 0;
      } else {
        const baseFontName = dict.get("BaseFont");
        if (baseFontName instanceof Name) {
          const metrics = this.getBaseFontMetrics(baseFontName.name);
          glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);
          defaultWidth = metrics.defaultWidth;
        }
      }
    }
    let isMonospace = true;
    let firstWidth = defaultWidth;
    for (const glyph in glyphsWidths) {
      const glyphWidth = glyphsWidths[glyph];
      if (!glyphWidth) {
        continue;
      }
      if (!firstWidth) {
        firstWidth = glyphWidth;
        continue;
      }
      if (firstWidth !== glyphWidth) {
        isMonospace = false;
        break;
      }
    }
    if (isMonospace) {
      properties.flags |= FontFlags.FixedPitch;
    } else {
      properties.flags &= ~FontFlags.FixedPitch;
    }
    properties.defaultWidth = defaultWidth;
    properties.widths = glyphsWidths;
    properties.defaultVMetrics = defaultVMetrics;
    properties.vmetrics = glyphsVMetrics;
  }
  isSerifFont(baseFontName) {
    const fontNameWoStyle = baseFontName.split("-", 1)[0];
    return fontNameWoStyle in getSerifFonts() || /serif/gi.test(fontNameWoStyle);
  }
  getBaseFontMetrics(name) {
    let defaultWidth = 0;
    let widths = Object.create(null);
    let monospace = false;
    const stdFontMap = getStdFontMap();
    let lookupName = stdFontMap[name] || name;
    const Metrics = getMetrics();
    if (!(lookupName in Metrics)) {
      lookupName = this.isSerifFont(name) ? "Times-Roman" : "Helvetica";
    }
    const glyphWidths = Metrics[lookupName];
    if (typeof glyphWidths === "number") {
      defaultWidth = glyphWidths;
      monospace = true;
    } else {
      widths = glyphWidths();
    }
    return {
      defaultWidth,
      monospace,
      widths
    };
  }
  buildCharCodeToWidth(widthsByGlyphName, properties) {
    const widths = Object.create(null);
    const differences = properties.differences;
    const encoding = properties.defaultEncoding;
    for (let charCode = 0; charCode < 256; charCode++) {
      if (charCode in differences && widthsByGlyphName[differences[charCode]]) {
        widths[charCode] = widthsByGlyphName[differences[charCode]];
        continue;
      }
      if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {
        widths[charCode] = widthsByGlyphName[encoding[charCode]];
        continue;
      }
    }
    return widths;
  }
  preEvaluateFont(dict) {
    const baseDict = dict;
    let type = dict.get("Subtype");
    if (!(type instanceof Name)) {
      throw new FormatError("invalid font Subtype");
    }
    let composite = false;
    let hash;
    if (type.name === "Type0") {
      const df = dict.get("DescendantFonts");
      if (!df) {
        throw new FormatError("Descendant fonts are not specified");
      }
      dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;
      if (!(dict instanceof Dict)) {
        throw new FormatError("Descendant font is not a dictionary.");
      }
      type = dict.get("Subtype");
      if (!(type instanceof Name)) {
        throw new FormatError("invalid font Subtype");
      }
      composite = true;
    }
    let firstChar = dict.get("FirstChar");
    if (!Number.isInteger(firstChar)) {
      firstChar = 0;
    }
    let lastChar = dict.get("LastChar");
    if (!Number.isInteger(lastChar)) {
      lastChar = composite ? 0xffff : 0xff;
    }
    const descriptor = dict.get("FontDescriptor");
    const toUnicode = dict.get("ToUnicode") || baseDict.get("ToUnicode");
    if (descriptor) {
      hash = new MurmurHash3_64();
      const encoding = baseDict.getRaw("Encoding");
      if (encoding instanceof Name) {
        hash.update(encoding.name);
      } else if (encoding instanceof Ref) {
        hash.update(encoding.toString());
      } else if (encoding instanceof Dict) {
        for (const entry of encoding.getRawValues()) {
          if (entry instanceof Name) {
            hash.update(entry.name);
          } else if (entry instanceof Ref) {
            hash.update(entry.toString());
          } else if (Array.isArray(entry)) {
            const diffLength = entry.length,
              diffBuf = new Array(diffLength);
            for (let j = 0; j < diffLength; j++) {
              const diffEntry = entry[j];
              if (diffEntry instanceof Name) {
                diffBuf[j] = diffEntry.name;
              } else if (typeof diffEntry === "number" || diffEntry instanceof Ref) {
                diffBuf[j] = diffEntry.toString();
              }
            }
            hash.update(diffBuf.join());
          }
        }
      }
      hash.update(\`\${firstChar}-\${lastChar}\`);
      if (toUnicode instanceof BaseStream) {
        const stream = toUnicode.str || toUnicode;
        const uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);
        hash.update(uint8array);
      } else if (toUnicode instanceof Name) {
        hash.update(toUnicode.name);
      }
      const widths = dict.get("Widths") || baseDict.get("Widths");
      if (Array.isArray(widths)) {
        const widthsBuf = [];
        for (const entry of widths) {
          if (typeof entry === "number" || entry instanceof Ref) {
            widthsBuf.push(entry.toString());
          }
        }
        hash.update(widthsBuf.join());
      }
      if (composite) {
        hash.update("compositeFont");
        const compositeWidths = dict.get("W") || baseDict.get("W");
        if (Array.isArray(compositeWidths)) {
          const widthsBuf = [];
          for (const entry of compositeWidths) {
            if (typeof entry === "number" || entry instanceof Ref) {
              widthsBuf.push(entry.toString());
            } else if (Array.isArray(entry)) {
              const subWidthsBuf = [];
              for (const element of entry) {
                if (typeof element === "number" || element instanceof Ref) {
                  subWidthsBuf.push(element.toString());
                }
              }
              widthsBuf.push(\`[\${subWidthsBuf.join()}]\`);
            }
          }
          hash.update(widthsBuf.join());
        }
        const cidToGidMap = dict.getRaw("CIDToGIDMap") || baseDict.getRaw("CIDToGIDMap");
        if (cidToGidMap instanceof Name) {
          hash.update(cidToGidMap.name);
        } else if (cidToGidMap instanceof Ref) {
          hash.update(cidToGidMap.toString());
        } else if (cidToGidMap instanceof BaseStream) {
          hash.update(cidToGidMap.peekBytes());
        }
      }
    }
    return {
      descriptor,
      dict,
      baseDict,
      composite,
      type: type.name,
      firstChar,
      lastChar,
      toUnicode,
      hash: hash ? hash.hexdigest() : ""
    };
  }
  async translateFont({
    descriptor,
    dict,
    baseDict,
    composite,
    type,
    firstChar,
    lastChar,
    toUnicode,
    cssFontInfo
  }) {
    const isType3Font = type === "Type3";
    if (!descriptor) {
      if (isType3Font) {
        const bbox = lookupNormalRect(dict.getArray("FontBBox"), [0, 0, 0, 0]);
        descriptor = new Dict(null);
        descriptor.set("FontName", Name.get(type));
        descriptor.set("FontBBox", bbox);
      } else {
        let baseFontName = dict.get("BaseFont");
        if (!(baseFontName instanceof Name)) {
          throw new FormatError("Base font is not specified");
        }
        baseFontName = baseFontName.name.replaceAll(/[,_]/g, "-");
        const metrics = this.getBaseFontMetrics(baseFontName);
        const fontNameWoStyle = baseFontName.split("-", 1)[0];
        const flags = (this.isSerifFont(fontNameWoStyle) ? FontFlags.Serif : 0) | (metrics.monospace ? FontFlags.FixedPitch : 0) | (getSymbolsFonts()[fontNameWoStyle] ? FontFlags.Symbolic : FontFlags.Nonsymbolic);
        const properties = {
          type,
          name: baseFontName,
          loadedName: baseDict.loadedName,
          systemFontInfo: null,
          widths: metrics.widths,
          defaultWidth: metrics.defaultWidth,
          isSimulatedFlags: true,
          flags,
          firstChar,
          lastChar,
          toUnicode,
          xHeight: 0,
          capHeight: 0,
          italicAngle: 0,
          isType3Font
        };
        const widths = dict.get("Widths");
        const standardFontName = getStandardFontName(baseFontName);
        let file = null;
        if (standardFontName) {
          file = await this.fetchStandardFontData(standardFontName);
          properties.isInternalFont = !!file;
        }
        if (!properties.isInternalFont && this.options.useSystemFonts) {
          properties.systemFontInfo = getFontSubstitution(this.systemFontCache, this.idFactory, this.options.standardFontDataUrl, baseFontName, standardFontName, type);
        }
        const newProperties = await this.extractDataStructures(dict, properties);
        if (Array.isArray(widths)) {
          const glyphWidths = [];
          let j = firstChar;
          for (const w of widths) {
            const width = this.xref.fetchIfRef(w);
            if (typeof width === "number") {
              glyphWidths[j] = width;
            }
            j++;
          }
          newProperties.widths = glyphWidths;
        } else {
          newProperties.widths = this.buildCharCodeToWidth(metrics.widths, newProperties);
        }
        return new Font(baseFontName, file, newProperties, this.options);
      }
    }
    let fontName = descriptor.get("FontName");
    let baseFont = dict.get("BaseFont");
    if (typeof fontName === "string") {
      fontName = Name.get(fontName);
    }
    if (typeof baseFont === "string") {
      baseFont = Name.get(baseFont);
    }
    const fontNameStr = fontName?.name;
    const baseFontStr = baseFont?.name;
    if (!isType3Font && fontNameStr !== baseFontStr) {
      info(\`The FontDescriptor's FontName is "\${fontNameStr}" but \` + \`should be the same as the Font's BaseFont "\${baseFontStr}".\`);
      if (fontNameStr && baseFontStr && (baseFontStr.startsWith(fontNameStr) || !isKnownFontName(fontNameStr) && isKnownFontName(baseFontStr))) {
        fontName = null;
      }
    }
    fontName ||= baseFont;
    if (!(fontName instanceof Name)) {
      throw new FormatError("invalid font name");
    }
    let fontFile, subtype, length1, length2, length3;
    try {
      fontFile = descriptor.get("FontFile", "FontFile2", "FontFile3");
      if (fontFile) {
        if (!(fontFile instanceof BaseStream)) {
          throw new FormatError("FontFile should be a stream");
        } else if (fontFile.isEmpty) {
          throw new FormatError("FontFile is empty");
        }
      }
    } catch (ex) {
      if (!this.options.ignoreErrors) {
        throw ex;
      }
      warn(\`translateFont - fetching "\${fontName.name}" font file: "\${ex}".\`);
      fontFile = null;
    }
    let isInternalFont = false;
    let glyphScaleFactors = null;
    let systemFontInfo = null;
    if (fontFile) {
      if (fontFile.dict) {
        const subtypeEntry = fontFile.dict.get("Subtype");
        if (subtypeEntry instanceof Name) {
          subtype = subtypeEntry.name;
        }
        length1 = fontFile.dict.get("Length1");
        length2 = fontFile.dict.get("Length2");
        length3 = fontFile.dict.get("Length3");
      }
    } else if (cssFontInfo) {
      const standardFontName = getXfaFontName(fontName.name);
      if (standardFontName) {
        cssFontInfo.fontFamily = \`\${cssFontInfo.fontFamily}-PdfJS-XFA\`;
        cssFontInfo.metrics = standardFontName.metrics || null;
        glyphScaleFactors = standardFontName.factors || null;
        fontFile = await this.fetchStandardFontData(standardFontName.name);
        isInternalFont = !!fontFile;
        baseDict = dict = getXfaFontDict(fontName.name);
        composite = true;
      }
    } else if (!isType3Font) {
      const standardFontName = getStandardFontName(fontName.name);
      if (standardFontName) {
        fontFile = await this.fetchStandardFontData(standardFontName);
        isInternalFont = !!fontFile;
      }
      if (!isInternalFont && this.options.useSystemFonts) {
        systemFontInfo = getFontSubstitution(this.systemFontCache, this.idFactory, this.options.standardFontDataUrl, fontName.name, standardFontName, type);
      }
    }
    const fontMatrix = lookupMatrix(dict.getArray("FontMatrix"), FONT_IDENTITY_MATRIX);
    const bbox = lookupNormalRect(descriptor.getArray("FontBBox") || dict.getArray("FontBBox"), undefined);
    let ascent = descriptor.get("Ascent");
    if (typeof ascent !== "number") {
      ascent = undefined;
    }
    let descent = descriptor.get("Descent");
    if (typeof descent !== "number") {
      descent = undefined;
    }
    let xHeight = descriptor.get("XHeight");
    if (typeof xHeight !== "number") {
      xHeight = 0;
    }
    let capHeight = descriptor.get("CapHeight");
    if (typeof capHeight !== "number") {
      capHeight = 0;
    }
    let flags = descriptor.get("Flags");
    if (!Number.isInteger(flags)) {
      flags = 0;
    }
    let italicAngle = descriptor.get("ItalicAngle");
    if (typeof italicAngle !== "number") {
      italicAngle = 0;
    }
    const properties = {
      type,
      name: fontName.name,
      subtype,
      file: fontFile,
      length1,
      length2,
      length3,
      isInternalFont,
      loadedName: baseDict.loadedName,
      composite,
      fixedPitch: false,
      fontMatrix,
      firstChar,
      lastChar,
      toUnicode,
      bbox,
      ascent,
      descent,
      xHeight,
      capHeight,
      flags,
      italicAngle,
      isType3Font,
      cssFontInfo,
      scaleFactors: glyphScaleFactors,
      systemFontInfo
    };
    if (composite) {
      const cidEncoding = baseDict.get("Encoding");
      if (cidEncoding instanceof Name) {
        properties.cidEncoding = cidEncoding.name;
      }
      const cMap = await CMapFactory.create({
        encoding: cidEncoding,
        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
        useCMap: null
      });
      properties.cMap = cMap;
      properties.vertical = properties.cMap.vertical;
    }
    const newProperties = await this.extractDataStructures(dict, properties);
    this.extractWidths(dict, descriptor, newProperties);
    return new Font(fontName.name, fontFile, newProperties, this.options);
  }
  static buildFontPaths(font, glyphs, handler, evaluatorOptions) {
    function buildPath(fontChar) {
      const glyphName = \`\${font.loadedName}_path_\${fontChar}\`;
      try {
        if (font.renderer.hasBuiltPath(fontChar)) {
          return;
        }
        handler.send("commonobj", [glyphName, "FontPath", font.renderer.getPathJs(fontChar)]);
      } catch (reason) {
        if (evaluatorOptions.ignoreErrors) {
          warn(\`buildFontPaths - ignoring \${glyphName} glyph: "\${reason}".\`);
          return;
        }
        throw reason;
      }
    }
    for (const glyph of glyphs) {
      buildPath(glyph.fontChar);
      const accent = glyph.accent;
      if (accent?.fontChar) {
        buildPath(accent.fontChar);
      }
    }
  }
  static get fallbackFontDict() {
    const dict = new Dict();
    dict.set("BaseFont", Name.get("Helvetica"));
    dict.set("Type", Name.get("FallbackType"));
    dict.set("Subtype", Name.get("FallbackType"));
    dict.set("Encoding", Name.get("WinAnsiEncoding"));
    return shadow(this, "fallbackFontDict", dict);
  }
}
class TranslatedFont {
  #sent = false;
  #type3Loaded = null;
  constructor({
    loadedName,
    font,
    dict
  }) {
    this.loadedName = loadedName;
    this.font = font;
    this.dict = dict;
    this.type3Dependencies = font.isType3Font ? new Set() : null;
  }
  send(handler) {
    if (this.#sent) {
      return;
    }
    this.#sent = true;
    handler.send("commonobj", [this.loadedName, "Font", this.font.exportData()]);
  }
  fallback(handler, evaluatorOptions) {
    if (!this.font.data) {
      return;
    }
    this.font.disableFontFace = true;
    PartialEvaluator.buildFontPaths(this.font, this.font.glyphCacheValues, handler, evaluatorOptions);
  }
  loadType3Data(evaluator, resources, task) {
    if (this.#type3Loaded) {
      return this.#type3Loaded;
    }
    const {
      font,
      type3Dependencies
    } = this;
    assert(font.isType3Font, "Must be a Type3 font.");
    const type3Evaluator = evaluator.clone({
      ignoreErrors: false
    });
    const type3FontRefs = new RefSet(evaluator.type3FontRefs);
    if (this.dict.objId && !type3FontRefs.has(this.dict.objId)) {
      type3FontRefs.put(this.dict.objId);
    }
    type3Evaluator.type3FontRefs = type3FontRefs;
    let loadCharProcsPromise = Promise.resolve();
    const charProcs = this.dict.get("CharProcs");
    const fontResources = this.dict.get("Resources") || resources;
    const charProcOperatorList = Object.create(null);
    const fontBBox = Util.normalizeRect(font.bbox || [0, 0, 0, 0]),
      width = fontBBox[2] - fontBBox[0],
      height = fontBBox[3] - fontBBox[1];
    const fontBBoxSize = Math.hypot(width, height);
    for (const key of charProcs.getKeys()) {
      loadCharProcsPromise = loadCharProcsPromise.then(() => {
        const glyphStream = charProcs.get(key);
        const operatorList = new OperatorList();
        return type3Evaluator.getOperatorList({
          stream: glyphStream,
          task,
          resources: fontResources,
          operatorList
        }).then(() => {
          switch (operatorList.fnArray[0]) {
            case OPS.setCharWidthAndBounds:
              this.#removeType3ColorOperators(operatorList, fontBBoxSize);
              break;
            case OPS.setCharWidth:
              if (!fontBBoxSize) {
                this.#guessType3FontBBox(operatorList);
              }
              break;
          }
          charProcOperatorList[key] = operatorList.getIR();
          for (const dependency of operatorList.dependencies) {
            type3Dependencies.add(dependency);
          }
        }).catch(function (reason) {
          warn(\`Type3 font resource "\${key}" is not available.\`);
          const dummyOperatorList = new OperatorList();
          charProcOperatorList[key] = dummyOperatorList.getIR();
        });
      });
    }
    this.#type3Loaded = loadCharProcsPromise.then(() => {
      font.charProcOperatorList = charProcOperatorList;
      if (this._bbox) {
        font.isCharBBox = true;
        font.bbox = this._bbox;
      }
    });
    return this.#type3Loaded;
  }
  #removeType3ColorOperators(operatorList, fontBBoxSize = NaN) {
    const charBBox = Util.normalizeRect(operatorList.argsArray[0].slice(2)),
      width = charBBox[2] - charBBox[0],
      height = charBBox[3] - charBBox[1];
    const charBBoxSize = Math.hypot(width, height);
    if (width === 0 || height === 0) {
      operatorList.fnArray.splice(0, 1);
      operatorList.argsArray.splice(0, 1);
    } else if (fontBBoxSize === 0 || Math.round(charBBoxSize / fontBBoxSize) >= 10) {
      this._bbox ??= [Infinity, Infinity, -Infinity, -Infinity];
      Util.rectBoundingBox(...charBBox, this._bbox);
    }
    let i = 0,
      ii = operatorList.length;
    while (i < ii) {
      switch (operatorList.fnArray[i]) {
        case OPS.setCharWidthAndBounds:
          break;
        case OPS.setStrokeColorSpace:
        case OPS.setFillColorSpace:
        case OPS.setStrokeColor:
        case OPS.setStrokeColorN:
        case OPS.setFillColor:
        case OPS.setFillColorN:
        case OPS.setStrokeGray:
        case OPS.setFillGray:
        case OPS.setStrokeRGBColor:
        case OPS.setFillRGBColor:
        case OPS.setStrokeCMYKColor:
        case OPS.setFillCMYKColor:
        case OPS.shadingFill:
        case OPS.setRenderingIntent:
          operatorList.fnArray.splice(i, 1);
          operatorList.argsArray.splice(i, 1);
          ii--;
          continue;
        case OPS.setGState:
          const [gStateObj] = operatorList.argsArray[i];
          let j = 0,
            jj = gStateObj.length;
          while (j < jj) {
            const [gStateKey] = gStateObj[j];
            switch (gStateKey) {
              case "TR":
              case "TR2":
              case "HT":
              case "BG":
              case "BG2":
              case "UCR":
              case "UCR2":
                gStateObj.splice(j, 1);
                jj--;
                continue;
            }
            j++;
          }
          break;
      }
      i++;
    }
  }
  #guessType3FontBBox(operatorList) {
    let i = 1;
    const ii = operatorList.length;
    while (i < ii) {
      switch (operatorList.fnArray[i]) {
        case OPS.constructPath:
          const minMax = operatorList.argsArray[i][2];
          this._bbox ??= [Infinity, Infinity, -Infinity, -Infinity];
          Util.rectBoundingBox(...minMax, this._bbox);
          break;
      }
      i++;
    }
  }
}
class StateManager {
  constructor(initialState = new EvalState()) {
    this.state = initialState;
    this.stateStack = [];
  }
  save() {
    const old = this.state;
    this.stateStack.push(this.state);
    this.state = old.clone();
  }
  restore() {
    const prev = this.stateStack.pop();
    if (prev) {
      this.state = prev;
    }
  }
  transform(args) {
    this.state.ctm = Util.transform(this.state.ctm, args);
  }
}
class TextState {
  constructor() {
    this.ctm = new Float32Array(IDENTITY_MATRIX);
    this.fontName = null;
    this.fontSize = 0;
    this.loadedName = null;
    this.font = null;
    this.fontMatrix = FONT_IDENTITY_MATRIX;
    this.textMatrix = IDENTITY_MATRIX.slice();
    this.textLineMatrix = IDENTITY_MATRIX.slice();
    this.charSpacing = 0;
    this.wordSpacing = 0;
    this.leading = 0;
    this.textHScale = 1;
    this.textRise = 0;
  }
  setTextMatrix(a, b, c, d, e, f) {
    const m = this.textMatrix;
    m[0] = a;
    m[1] = b;
    m[2] = c;
    m[3] = d;
    m[4] = e;
    m[5] = f;
  }
  setTextLineMatrix(a, b, c, d, e, f) {
    const m = this.textLineMatrix;
    m[0] = a;
    m[1] = b;
    m[2] = c;
    m[3] = d;
    m[4] = e;
    m[5] = f;
  }
  translateTextMatrix(x, y) {
    const m = this.textMatrix;
    m[4] = m[0] * x + m[2] * y + m[4];
    m[5] = m[1] * x + m[3] * y + m[5];
  }
  translateTextLineMatrix(x, y) {
    const m = this.textLineMatrix;
    m[4] = m[0] * x + m[2] * y + m[4];
    m[5] = m[1] * x + m[3] * y + m[5];
  }
  carriageReturn() {
    this.translateTextLineMatrix(0, -this.leading);
    this.textMatrix = this.textLineMatrix.slice();
  }
  clone() {
    const clone = Object.create(this);
    clone.textMatrix = this.textMatrix.slice();
    clone.textLineMatrix = this.textLineMatrix.slice();
    clone.fontMatrix = this.fontMatrix.slice();
    return clone;
  }
}
class EvalState {
  constructor() {
    this.ctm = new Float32Array(IDENTITY_MATRIX);
    this.font = null;
    this.textRenderingMode = TextRenderingMode.FILL;
    this._fillColorSpace = this._strokeColorSpace = ColorSpaceUtils.gray;
    this.patternFillColorSpace = null;
    this.patternStrokeColorSpace = null;
    this.currentPointX = this.currentPointY = 0;
    this.pathMinMax = new Float32Array([Infinity, Infinity, -Infinity, -Infinity]);
    this.pathBuffer = [];
  }
  get fillColorSpace() {
    return this._fillColorSpace;
  }
  set fillColorSpace(colorSpace) {
    this._fillColorSpace = this.patternFillColorSpace = colorSpace;
  }
  get strokeColorSpace() {
    return this._strokeColorSpace;
  }
  set strokeColorSpace(colorSpace) {
    this._strokeColorSpace = this.patternStrokeColorSpace = colorSpace;
  }
  clone({
    newPath = false
  } = {}) {
    const clone = Object.create(this);
    if (newPath) {
      clone.pathBuffer = [];
      clone.pathMinMax = new Float32Array([Infinity, Infinity, -Infinity, -Infinity]);
    }
    return clone;
  }
}
class EvaluatorPreprocessor {
  static get opMap() {
    return shadow(this, "opMap", Object.assign(Object.create(null), {
      w: {
        id: OPS.setLineWidth,
        numArgs: 1,
        variableArgs: false
      },
      J: {
        id: OPS.setLineCap,
        numArgs: 1,
        variableArgs: false
      },
      j: {
        id: OPS.setLineJoin,
        numArgs: 1,
        variableArgs: false
      },
      M: {
        id: OPS.setMiterLimit,
        numArgs: 1,
        variableArgs: false
      },
      d: {
        id: OPS.setDash,
        numArgs: 2,
        variableArgs: false
      },
      ri: {
        id: OPS.setRenderingIntent,
        numArgs: 1,
        variableArgs: false
      },
      i: {
        id: OPS.setFlatness,
        numArgs: 1,
        variableArgs: false
      },
      gs: {
        id: OPS.setGState,
        numArgs: 1,
        variableArgs: false
      },
      q: {
        id: OPS.save,
        numArgs: 0,
        variableArgs: false
      },
      Q: {
        id: OPS.restore,
        numArgs: 0,
        variableArgs: false
      },
      cm: {
        id: OPS.transform,
        numArgs: 6,
        variableArgs: false
      },
      m: {
        id: OPS.moveTo,
        numArgs: 2,
        variableArgs: false
      },
      l: {
        id: OPS.lineTo,
        numArgs: 2,
        variableArgs: false
      },
      c: {
        id: OPS.curveTo,
        numArgs: 6,
        variableArgs: false
      },
      v: {
        id: OPS.curveTo2,
        numArgs: 4,
        variableArgs: false
      },
      y: {
        id: OPS.curveTo3,
        numArgs: 4,
        variableArgs: false
      },
      h: {
        id: OPS.closePath,
        numArgs: 0,
        variableArgs: false
      },
      re: {
        id: OPS.rectangle,
        numArgs: 4,
        variableArgs: false
      },
      S: {
        id: OPS.stroke,
        numArgs: 0,
        variableArgs: false
      },
      s: {
        id: OPS.closeStroke,
        numArgs: 0,
        variableArgs: false
      },
      f: {
        id: OPS.fill,
        numArgs: 0,
        variableArgs: false
      },
      F: {
        id: OPS.fill,
        numArgs: 0,
        variableArgs: false
      },
      "f*": {
        id: OPS.eoFill,
        numArgs: 0,
        variableArgs: false
      },
      B: {
        id: OPS.fillStroke,
        numArgs: 0,
        variableArgs: false
      },
      "B*": {
        id: OPS.eoFillStroke,
        numArgs: 0,
        variableArgs: false
      },
      b: {
        id: OPS.closeFillStroke,
        numArgs: 0,
        variableArgs: false
      },
      "b*": {
        id: OPS.closeEOFillStroke,
        numArgs: 0,
        variableArgs: false
      },
      n: {
        id: OPS.endPath,
        numArgs: 0,
        variableArgs: false
      },
      W: {
        id: OPS.clip,
        numArgs: 0,
        variableArgs: false
      },
      "W*": {
        id: OPS.eoClip,
        numArgs: 0,
        variableArgs: false
      },
      BT: {
        id: OPS.beginText,
        numArgs: 0,
        variableArgs: false
      },
      ET: {
        id: OPS.endText,
        numArgs: 0,
        variableArgs: false
      },
      Tc: {
        id: OPS.setCharSpacing,
        numArgs: 1,
        variableArgs: false
      },
      Tw: {
        id: OPS.setWordSpacing,
        numArgs: 1,
        variableArgs: false
      },
      Tz: {
        id: OPS.setHScale,
        numArgs: 1,
        variableArgs: false
      },
      TL: {
        id: OPS.setLeading,
        numArgs: 1,
        variableArgs: false
      },
      Tf: {
        id: OPS.setFont,
        numArgs: 2,
        variableArgs: false
      },
      Tr: {
        id: OPS.setTextRenderingMode,
        numArgs: 1,
        variableArgs: false
      },
      Ts: {
        id: OPS.setTextRise,
        numArgs: 1,
        variableArgs: false
      },
      Td: {
        id: OPS.moveText,
        numArgs: 2,
        variableArgs: false
      },
      TD: {
        id: OPS.setLeadingMoveText,
        numArgs: 2,
        variableArgs: false
      },
      Tm: {
        id: OPS.setTextMatrix,
        numArgs: 6,
        variableArgs: false
      },
      "T*": {
        id: OPS.nextLine,
        numArgs: 0,
        variableArgs: false
      },
      Tj: {
        id: OPS.showText,
        numArgs: 1,
        variableArgs: false
      },
      TJ: {
        id: OPS.showSpacedText,
        numArgs: 1,
        variableArgs: false
      },
      "'": {
        id: OPS.nextLineShowText,
        numArgs: 1,
        variableArgs: false
      },
      '"': {
        id: OPS.nextLineSetSpacingShowText,
        numArgs: 3,
        variableArgs: false
      },
      d0: {
        id: OPS.setCharWidth,
        numArgs: 2,
        variableArgs: false
      },
      d1: {
        id: OPS.setCharWidthAndBounds,
        numArgs: 6,
        variableArgs: false
      },
      CS: {
        id: OPS.setStrokeColorSpace,
        numArgs: 1,
        variableArgs: false
      },
      cs: {
        id: OPS.setFillColorSpace,
        numArgs: 1,
        variableArgs: false
      },
      SC: {
        id: OPS.setStrokeColor,
        numArgs: 4,
        variableArgs: true
      },
      SCN: {
        id: OPS.setStrokeColorN,
        numArgs: 33,
        variableArgs: true
      },
      sc: {
        id: OPS.setFillColor,
        numArgs: 4,
        variableArgs: true
      },
      scn: {
        id: OPS.setFillColorN,
        numArgs: 33,
        variableArgs: true
      },
      G: {
        id: OPS.setStrokeGray,
        numArgs: 1,
        variableArgs: false
      },
      g: {
        id: OPS.setFillGray,
        numArgs: 1,
        variableArgs: false
      },
      RG: {
        id: OPS.setStrokeRGBColor,
        numArgs: 3,
        variableArgs: false
      },
      rg: {
        id: OPS.setFillRGBColor,
        numArgs: 3,
        variableArgs: false
      },
      K: {
        id: OPS.setStrokeCMYKColor,
        numArgs: 4,
        variableArgs: false
      },
      k: {
        id: OPS.setFillCMYKColor,
        numArgs: 4,
        variableArgs: false
      },
      sh: {
        id: OPS.shadingFill,
        numArgs: 1,
        variableArgs: false
      },
      BI: {
        id: OPS.beginInlineImage,
        numArgs: 0,
        variableArgs: false
      },
      ID: {
        id: OPS.beginImageData,
        numArgs: 0,
        variableArgs: false
      },
      EI: {
        id: OPS.endInlineImage,
        numArgs: 1,
        variableArgs: false
      },
      Do: {
        id: OPS.paintXObject,
        numArgs: 1,
        variableArgs: false
      },
      MP: {
        id: OPS.markPoint,
        numArgs: 1,
        variableArgs: false
      },
      DP: {
        id: OPS.markPointProps,
        numArgs: 2,
        variableArgs: false
      },
      BMC: {
        id: OPS.beginMarkedContent,
        numArgs: 1,
        variableArgs: false
      },
      BDC: {
        id: OPS.beginMarkedContentProps,
        numArgs: 2,
        variableArgs: false
      },
      EMC: {
        id: OPS.endMarkedContent,
        numArgs: 0,
        variableArgs: false
      },
      BX: {
        id: OPS.beginCompat,
        numArgs: 0,
        variableArgs: false
      },
      EX: {
        id: OPS.endCompat,
        numArgs: 0,
        variableArgs: false
      },
      BM: null,
      BD: null,
      true: null,
      fa: null,
      fal: null,
      fals: null,
      false: null,
      nu: null,
      nul: null,
      null: null
    }));
  }
  static MAX_INVALID_PATH_OPS = 10;
  constructor(stream, xref, stateManager = new StateManager()) {
    this.parser = new Parser({
      lexer: new Lexer(stream, EvaluatorPreprocessor.opMap),
      xref
    });
    this.stateManager = stateManager;
    this.nonProcessedArgs = [];
    this._isPathOp = false;
    this._numInvalidPathOPS = 0;
  }
  get savedStatesDepth() {
    return this.stateManager.stateStack.length;
  }
  read(operation) {
    let args = operation.args;
    while (true) {
      const obj = this.parser.getObj();
      if (obj instanceof Cmd) {
        const cmd = obj.cmd;
        const opSpec = EvaluatorPreprocessor.opMap[cmd];
        if (!opSpec) {
          warn(\`Unknown command "\${cmd}".\`);
          continue;
        }
        const fn = opSpec.id;
        const numArgs = opSpec.numArgs;
        let argsLength = args !== null ? args.length : 0;
        if (!this._isPathOp) {
          this._numInvalidPathOPS = 0;
        }
        this._isPathOp = fn >= OPS.moveTo && fn <= OPS.endPath;
        if (!opSpec.variableArgs) {
          if (argsLength !== numArgs) {
            const nonProcessedArgs = this.nonProcessedArgs;
            while (argsLength > numArgs) {
              nonProcessedArgs.push(args.shift());
              argsLength--;
            }
            while (argsLength < numArgs && nonProcessedArgs.length !== 0) {
              if (args === null) {
                args = [];
              }
              args.unshift(nonProcessedArgs.pop());
              argsLength++;
            }
          }
          if (argsLength < numArgs) {
            const partialMsg = \`command \${cmd}: expected \${numArgs} args, \` + \`but received \${argsLength} args.\`;
            if (this._isPathOp && ++this._numInvalidPathOPS > EvaluatorPreprocessor.MAX_INVALID_PATH_OPS) {
              throw new FormatError(\`Invalid \${partialMsg}\`);
            }
            warn(\`Skipping \${partialMsg}\`);
            if (args !== null) {
              args.length = 0;
            }
            continue;
          }
        } else if (argsLength > numArgs) {
          info(\`Command \${cmd}: expected [0, \${numArgs}] args, \` + \`but received \${argsLength} args.\`);
        }
        this.preprocessCommand(fn, args);
        operation.fn = fn;
        operation.args = args;
        return true;
      }
      if (obj === EOF) {
        return false;
      }
      if (obj !== null) {
        if (args === null) {
          args = [];
        }
        args.push(obj);
        if (args.length > 33) {
          throw new FormatError("Too many arguments");
        }
      }
    }
  }
  preprocessCommand(fn, args) {
    switch (fn | 0) {
      case OPS.save:
        this.stateManager.save();
        break;
      case OPS.restore:
        this.stateManager.restore();
        break;
      case OPS.transform:
        this.stateManager.transform(args);
        break;
    }
  }
}

;// ./src/core/default_appearance.js








class DefaultAppearanceEvaluator extends EvaluatorPreprocessor {
  constructor(str) {
    super(new StringStream(str));
  }
  parse() {
    const operation = {
      fn: 0,
      args: []
    };
    const result = {
      fontSize: 0,
      fontName: "",
      fontColor: new Uint8ClampedArray(3)
    };
    try {
      while (true) {
        operation.args.length = 0;
        if (!this.read(operation)) {
          break;
        }
        if (this.savedStatesDepth !== 0) {
          continue;
        }
        const {
          fn,
          args
        } = operation;
        switch (fn | 0) {
          case OPS.setFont:
            const [fontName, fontSize] = args;
            if (fontName instanceof Name) {
              result.fontName = fontName.name;
            }
            if (typeof fontSize === "number" && fontSize > 0) {
              result.fontSize = fontSize;
            }
            break;
          case OPS.setFillRGBColor:
            ColorSpaceUtils.rgb.getRgbItem(args, 0, result.fontColor, 0);
            break;
          case OPS.setFillGray:
            ColorSpaceUtils.gray.getRgbItem(args, 0, result.fontColor, 0);
            break;
          case OPS.setFillCMYKColor:
            ColorSpaceUtils.cmyk.getRgbItem(args, 0, result.fontColor, 0);
            break;
        }
      }
    } catch (reason) {
      warn(\`parseDefaultAppearance - ignoring errors: "\${reason}".\`);
    }
    return result;
  }
}
function parseDefaultAppearance(str) {
  return new DefaultAppearanceEvaluator(str).parse();
}
class AppearanceStreamEvaluator extends EvaluatorPreprocessor {
  constructor(stream, evaluatorOptions, xref, globalColorSpaceCache) {
    super(stream);
    this.stream = stream;
    this.evaluatorOptions = evaluatorOptions;
    this.xref = xref;
    this.globalColorSpaceCache = globalColorSpaceCache;
    this.resources = stream.dict?.get("Resources");
  }
  parse() {
    const operation = {
      fn: 0,
      args: []
    };
    let result = {
      scaleFactor: 1,
      fontSize: 0,
      fontName: "",
      fontColor: new Uint8ClampedArray(3),
      fillColorSpace: ColorSpaceUtils.gray
    };
    let breakLoop = false;
    const stack = [];
    try {
      while (true) {
        operation.args.length = 0;
        if (breakLoop || !this.read(operation)) {
          break;
        }
        const {
          fn,
          args
        } = operation;
        switch (fn | 0) {
          case OPS.save:
            stack.push({
              scaleFactor: result.scaleFactor,
              fontSize: result.fontSize,
              fontName: result.fontName,
              fontColor: result.fontColor.slice(),
              fillColorSpace: result.fillColorSpace
            });
            break;
          case OPS.restore:
            result = stack.pop() || result;
            break;
          case OPS.setTextMatrix:
            result.scaleFactor *= Math.hypot(args[0], args[1]);
            break;
          case OPS.setFont:
            const [fontName, fontSize] = args;
            if (fontName instanceof Name) {
              result.fontName = fontName.name;
            }
            if (typeof fontSize === "number" && fontSize > 0) {
              result.fontSize = fontSize * result.scaleFactor;
            }
            break;
          case OPS.setFillColorSpace:
            result.fillColorSpace = ColorSpaceUtils.parse({
              cs: args[0],
              xref: this.xref,
              resources: this.resources,
              pdfFunctionFactory: this._pdfFunctionFactory,
              globalColorSpaceCache: this.globalColorSpaceCache,
              localColorSpaceCache: this._localColorSpaceCache
            });
            break;
          case OPS.setFillColor:
            const cs = result.fillColorSpace;
            cs.getRgbItem(args, 0, result.fontColor, 0);
            break;
          case OPS.setFillRGBColor:
            ColorSpaceUtils.rgb.getRgbItem(args, 0, result.fontColor, 0);
            break;
          case OPS.setFillGray:
            ColorSpaceUtils.gray.getRgbItem(args, 0, result.fontColor, 0);
            break;
          case OPS.setFillCMYKColor:
            ColorSpaceUtils.cmyk.getRgbItem(args, 0, result.fontColor, 0);
            break;
          case OPS.showText:
          case OPS.showSpacedText:
          case OPS.nextLineShowText:
          case OPS.nextLineSetSpacingShowText:
            breakLoop = true;
            break;
        }
      }
    } catch (reason) {
      warn(\`parseAppearanceStream - ignoring errors: "\${reason}".\`);
    }
    this.stream.reset();
    delete result.scaleFactor;
    delete result.fillColorSpace;
    return result;
  }
  get _localColorSpaceCache() {
    return shadow(this, "_localColorSpaceCache", new LocalColorSpaceCache());
  }
  get _pdfFunctionFactory() {
    const pdfFunctionFactory = new PDFFunctionFactory({
      xref: this.xref,
      isEvalSupported: this.evaluatorOptions.isEvalSupported
    });
    return shadow(this, "_pdfFunctionFactory", pdfFunctionFactory);
  }
}
function parseAppearanceStream(stream, evaluatorOptions, xref, globalColorSpaceCache) {
  return new AppearanceStreamEvaluator(stream, evaluatorOptions, xref, globalColorSpaceCache).parse();
}
function getPdfColor(color, isFill) {
  if (color[0] === color[1] && color[1] === color[2]) {
    const gray = color[0] / 255;
    return \`\${numberToString(gray)} \${isFill ? "g" : "G"}\`;
  }
  return Array.from(color, c => numberToString(c / 255)).join(" ") + \` \${isFill ? "rg" : "RG"}\`;
}
function createDefaultAppearance({
  fontSize,
  fontName,
  fontColor
}) {
  return \`/\${escapePDFName(fontName)} \${fontSize} Tf \${getPdfColor(fontColor, true)}\`;
}
class FakeUnicodeFont {
  constructor(xref, fontFamily) {
    this.xref = xref;
    this.widths = null;
    this.firstChar = Infinity;
    this.lastChar = -Infinity;
    this.fontFamily = fontFamily;
    const canvas = new OffscreenCanvas(1, 1);
    this.ctxMeasure = canvas.getContext("2d", {
      willReadFrequently: true
    });
    if (!FakeUnicodeFont._fontNameId) {
      FakeUnicodeFont._fontNameId = 1;
    }
    this.fontName = Name.get(\`InvalidPDFjsFont_\${fontFamily}_\${FakeUnicodeFont._fontNameId++}\`);
  }
  get fontDescriptorRef() {
    if (!FakeUnicodeFont._fontDescriptorRef) {
      const fontDescriptor = new Dict(this.xref);
      fontDescriptor.set("Type", Name.get("FontDescriptor"));
      fontDescriptor.set("FontName", this.fontName);
      fontDescriptor.set("FontFamily", "MyriadPro Regular");
      fontDescriptor.set("FontBBox", [0, 0, 0, 0]);
      fontDescriptor.set("FontStretch", Name.get("Normal"));
      fontDescriptor.set("FontWeight", 400);
      fontDescriptor.set("ItalicAngle", 0);
      FakeUnicodeFont._fontDescriptorRef = this.xref.getNewPersistentRef(fontDescriptor);
    }
    return FakeUnicodeFont._fontDescriptorRef;
  }
  get descendantFontRef() {
    const descendantFont = new Dict(this.xref);
    descendantFont.set("BaseFont", this.fontName);
    descendantFont.set("Type", Name.get("Font"));
    descendantFont.set("Subtype", Name.get("CIDFontType0"));
    descendantFont.set("CIDToGIDMap", Name.get("Identity"));
    descendantFont.set("FirstChar", this.firstChar);
    descendantFont.set("LastChar", this.lastChar);
    descendantFont.set("FontDescriptor", this.fontDescriptorRef);
    descendantFont.set("DW", 1000);
    const widths = [];
    const chars = [...this.widths.entries()].sort();
    let currentChar = null;
    let currentWidths = null;
    for (const [char, width] of chars) {
      if (!currentChar) {
        currentChar = char;
        currentWidths = [width];
        continue;
      }
      if (char === currentChar + currentWidths.length) {
        currentWidths.push(width);
      } else {
        widths.push(currentChar, currentWidths);
        currentChar = char;
        currentWidths = [width];
      }
    }
    if (currentChar) {
      widths.push(currentChar, currentWidths);
    }
    descendantFont.set("W", widths);
    const cidSystemInfo = new Dict(this.xref);
    cidSystemInfo.set("Ordering", "Identity");
    cidSystemInfo.set("Registry", "Adobe");
    cidSystemInfo.set("Supplement", 0);
    descendantFont.set("CIDSystemInfo", cidSystemInfo);
    return this.xref.getNewPersistentRef(descendantFont);
  }
  get baseFontRef() {
    const baseFont = new Dict(this.xref);
    baseFont.set("BaseFont", this.fontName);
    baseFont.set("Type", Name.get("Font"));
    baseFont.set("Subtype", Name.get("Type0"));
    baseFont.set("Encoding", Name.get("Identity-H"));
    baseFont.set("DescendantFonts", [this.descendantFontRef]);
    baseFont.set("ToUnicode", Name.get("Identity-H"));
    return this.xref.getNewPersistentRef(baseFont);
  }
  get resources() {
    const resources = new Dict(this.xref);
    const font = new Dict(this.xref);
    font.set(this.fontName.name, this.baseFontRef);
    resources.set("Font", font);
    return resources;
  }
  _createContext() {
    this.widths = new Map();
    this.ctxMeasure.font = \`1000px \${this.fontFamily}\`;
    return this.ctxMeasure;
  }
  createFontResources(text) {
    const ctx = this._createContext();
    for (const line of text.split(/\\r\\n?|\\n/)) {
      for (const char of line.split("")) {
        const code = char.charCodeAt(0);
        if (this.widths.has(code)) {
          continue;
        }
        const metrics = ctx.measureText(char);
        const width = Math.ceil(metrics.width);
        this.widths.set(code, width);
        this.firstChar = Math.min(code, this.firstChar);
        this.lastChar = Math.max(code, this.lastChar);
      }
    }
    return this.resources;
  }
  static getFirstPositionInfo(rect, rotation, fontSize) {
    const [x1, y1, x2, y2] = rect;
    let w = x2 - x1;
    let h = y2 - y1;
    if (rotation % 180 !== 0) {
      [w, h] = [h, w];
    }
    const lineHeight = LINE_FACTOR * fontSize;
    const lineDescent = LINE_DESCENT_FACTOR * fontSize;
    return {
      coords: [0, h + lineDescent - lineHeight],
      bbox: [0, 0, w, h],
      matrix: rotation !== 0 ? getRotationMatrix(rotation, h, lineHeight) : undefined
    };
  }
  createAppearance(text, rect, rotation, fontSize, bgColor, strokeAlpha) {
    const ctx = this._createContext();
    const lines = [];
    let maxWidth = -Infinity;
    for (const line of text.split(/\\r\\n?|\\n/)) {
      lines.push(line);
      const lineWidth = ctx.measureText(line).width;
      maxWidth = Math.max(maxWidth, lineWidth);
      for (const code of codePointIter(line)) {
        const char = String.fromCodePoint(code);
        let width = this.widths.get(code);
        if (width === undefined) {
          const metrics = ctx.measureText(char);
          width = Math.ceil(metrics.width);
          this.widths.set(code, width);
          this.firstChar = Math.min(code, this.firstChar);
          this.lastChar = Math.max(code, this.lastChar);
        }
      }
    }
    maxWidth *= fontSize / 1000;
    const [x1, y1, x2, y2] = rect;
    let w = x2 - x1;
    let h = y2 - y1;
    if (rotation % 180 !== 0) {
      [w, h] = [h, w];
    }
    let hscale = 1;
    if (maxWidth > w) {
      hscale = w / maxWidth;
    }
    let vscale = 1;
    const lineHeight = LINE_FACTOR * fontSize;
    const lineDescent = LINE_DESCENT_FACTOR * fontSize;
    const maxHeight = lineHeight * lines.length;
    if (maxHeight > h) {
      vscale = h / maxHeight;
    }
    const fscale = Math.min(hscale, vscale);
    const newFontSize = fontSize * fscale;
    const buffer = ["q", \`0 0 \${numberToString(w)} \${numberToString(h)} re W n\`, \`BT\`, \`1 0 0 1 0 \${numberToString(h + lineDescent)} Tm 0 Tc \${getPdfColor(bgColor, true)}\`, \`/\${this.fontName.name} \${numberToString(newFontSize)} Tf\`];
    const {
      resources
    } = this;
    strokeAlpha = typeof strokeAlpha === "number" && strokeAlpha >= 0 && strokeAlpha <= 1 ? strokeAlpha : 1;
    if (strokeAlpha !== 1) {
      buffer.push("/R0 gs");
      const extGState = new Dict(this.xref);
      const r0 = new Dict(this.xref);
      r0.set("ca", strokeAlpha);
      r0.set("CA", strokeAlpha);
      r0.set("Type", Name.get("ExtGState"));
      extGState.set("R0", r0);
      resources.set("ExtGState", extGState);
    }
    const vShift = numberToString(lineHeight);
    for (const line of lines) {
      buffer.push(\`0 -\${vShift} Td <\${stringToUTF16HexString(line)}> Tj\`);
    }
    buffer.push("ET", "Q");
    const appearance = buffer.join("\\n");
    const appearanceStreamDict = new Dict(this.xref);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", [0, 0, w, h]);
    appearanceStreamDict.set("Length", appearance.length);
    appearanceStreamDict.set("Resources", resources);
    if (rotation) {
      const matrix = getRotationMatrix(rotation, w, h);
      appearanceStreamDict.set("Matrix", matrix);
    }
    const ap = new StringStream(appearance);
    ap.dict = appearanceStreamDict;
    return ap;
  }
}

;// ./src/core/name_number_tree.js


class NameOrNumberTree {
  constructor(root, xref, type) {
    this.root = root;
    this.xref = xref;
    this._type = type;
  }
  getAll() {
    const map = new Map();
    if (!this.root) {
      return map;
    }
    const xref = this.xref;
    const processed = new RefSet();
    processed.put(this.root);
    const queue = [this.root];
    while (queue.length > 0) {
      const obj = xref.fetchIfRef(queue.shift());
      if (!(obj instanceof Dict)) {
        continue;
      }
      if (obj.has("Kids")) {
        const kids = obj.get("Kids");
        if (!Array.isArray(kids)) {
          continue;
        }
        for (const kid of kids) {
          if (processed.has(kid)) {
            throw new FormatError(\`Duplicate entry in "\${this._type}" tree.\`);
          }
          queue.push(kid);
          processed.put(kid);
        }
        continue;
      }
      const entries = obj.get(this._type);
      if (!Array.isArray(entries)) {
        continue;
      }
      for (let i = 0, ii = entries.length; i < ii; i += 2) {
        map.set(xref.fetchIfRef(entries[i]), xref.fetchIfRef(entries[i + 1]));
      }
    }
    return map;
  }
  getRaw(key) {
    if (!this.root) {
      return null;
    }
    const xref = this.xref;
    let kidsOrEntries = xref.fetchIfRef(this.root);
    let loopCount = 0;
    const MAX_LEVELS = 10;
    while (kidsOrEntries.has("Kids")) {
      if (++loopCount > MAX_LEVELS) {
        warn(\`Search depth limit reached for "\${this._type}" tree.\`);
        return null;
      }
      const kids = kidsOrEntries.get("Kids");
      if (!Array.isArray(kids)) {
        return null;
      }
      let l = 0,
        r = kids.length - 1;
      while (l <= r) {
        const m = l + r >> 1;
        const kid = xref.fetchIfRef(kids[m]);
        const limits = kid.get("Limits");
        if (key < xref.fetchIfRef(limits[0])) {
          r = m - 1;
        } else if (key > xref.fetchIfRef(limits[1])) {
          l = m + 1;
        } else {
          kidsOrEntries = kid;
          break;
        }
      }
      if (l > r) {
        return null;
      }
    }
    const entries = kidsOrEntries.get(this._type);
    if (Array.isArray(entries)) {
      let l = 0,
        r = entries.length - 2;
      while (l <= r) {
        const tmp = l + r >> 1,
          m = tmp + (tmp & 1);
        const currentKey = xref.fetchIfRef(entries[m]);
        if (key < currentKey) {
          r = m - 2;
        } else if (key > currentKey) {
          l = m + 2;
        } else {
          return entries[m + 1];
        }
      }
    }
    return null;
  }
  get(key) {
    return this.xref.fetchIfRef(this.getRaw(key));
  }
}
class NameTree extends NameOrNumberTree {
  constructor(root, xref) {
    super(root, xref, "Names");
  }
}
class NumberTree extends NameOrNumberTree {
  constructor(root, xref) {
    super(root, xref, "Nums");
  }
}

;// ./src/core/cleanup_helper.js




function clearGlobalCaches() {
  clearPatternCaches();
  clearPrimitiveCaches();
  clearUnicodeCaches();
  JpxImage.cleanup();
}

;// ./src/core/file_spec.js



function pickPlatformItem(dict) {
  if (!(dict instanceof Dict)) {
    return null;
  }
  if (dict.has("UF")) {
    return dict.get("UF");
  } else if (dict.has("F")) {
    return dict.get("F");
  } else if (dict.has("Unix")) {
    return dict.get("Unix");
  } else if (dict.has("Mac")) {
    return dict.get("Mac");
  } else if (dict.has("DOS")) {
    return dict.get("DOS");
  }
  return null;
}
function stripPath(str) {
  return str.substring(str.lastIndexOf("/") + 1);
}
class FileSpec {
  #contentAvailable = false;
  constructor(root, xref, skipContent = false) {
    if (!(root instanceof Dict)) {
      return;
    }
    this.xref = xref;
    this.root = root;
    if (root.has("FS")) {
      this.fs = root.get("FS");
    }
    if (root.has("RF")) {
      warn("Related file specifications are not supported");
    }
    if (!skipContent) {
      if (root.has("EF")) {
        this.#contentAvailable = true;
      } else {
        warn("Non-embedded file specifications are not supported");
      }
    }
  }
  get filename() {
    let filename = "";
    const item = pickPlatformItem(this.root);
    if (item && typeof item === "string") {
      filename = stringToPDFString(item).replaceAll("\\\\\\\\", "\\\\").replaceAll("\\\\/", "/").replaceAll("\\\\", "/");
    }
    return shadow(this, "filename", filename || "unnamed");
  }
  get content() {
    if (!this.#contentAvailable) {
      return null;
    }
    this._contentRef ||= pickPlatformItem(this.root?.get("EF"));
    let content = null;
    if (this._contentRef) {
      const fileObj = this.xref.fetchIfRef(this._contentRef);
      if (fileObj instanceof BaseStream) {
        content = fileObj.getBytes();
      } else {
        warn("Embedded file specification points to non-existing/invalid content");
      }
    } else {
      warn("Embedded file specification does not have any content");
    }
    return content;
  }
  get description() {
    let description = "";
    const desc = this.root?.get("Desc");
    if (desc && typeof desc === "string") {
      description = stringToPDFString(desc);
    }
    return shadow(this, "description", description);
  }
  get serializable() {
    return {
      rawFilename: this.filename,
      filename: stripPath(this.filename),
      content: this.content,
      description: this.description
    };
  }
}

;// ./src/core/xml_parser.js

const XMLParserErrorCode = {
  NoError: 0,
  EndOfDocument: -1,
  UnterminatedCdat: -2,
  UnterminatedXmlDeclaration: -3,
  UnterminatedDoctypeDeclaration: -4,
  UnterminatedComment: -5,
  MalformedElement: -6,
  OutOfMemory: -7,
  UnterminatedAttributeValue: -8,
  UnterminatedElement: -9,
  ElementNeverBegun: -10
};
function isWhitespace(s, index) {
  const ch = s[index];
  return ch === " " || ch === "\\n" || ch === "\\r" || ch === "\\t";
}
function isWhitespaceString(s) {
  for (let i = 0, ii = s.length; i < ii; i++) {
    if (!isWhitespace(s, i)) {
      return false;
    }
  }
  return true;
}
class XMLParserBase {
  _resolveEntities(s) {
    return s.replaceAll(/&([^;]+);/g, (all, entity) => {
      if (entity.substring(0, 2) === "#x") {
        return String.fromCodePoint(parseInt(entity.substring(2), 16));
      } else if (entity.substring(0, 1) === "#") {
        return String.fromCodePoint(parseInt(entity.substring(1), 10));
      }
      switch (entity) {
        case "lt":
          return "<";
        case "gt":
          return ">";
        case "amp":
          return "&";
        case "quot":
          return '"';
        case "apos":
          return "'";
      }
      return this.onResolveEntity(entity);
    });
  }
  _parseContent(s, start) {
    const attributes = [];
    let pos = start;
    function skipWs() {
      while (pos < s.length && isWhitespace(s, pos)) {
        ++pos;
      }
    }
    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {
      ++pos;
    }
    const name = s.substring(start, pos);
    skipWs();
    while (pos < s.length && s[pos] !== ">" && s[pos] !== "/" && s[pos] !== "?") {
      skipWs();
      let attrName = "",
        attrValue = "";
      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== "=") {
        attrName += s[pos];
        ++pos;
      }
      skipWs();
      if (s[pos] !== "=") {
        return null;
      }
      ++pos;
      skipWs();
      const attrEndChar = s[pos];
      if (attrEndChar !== '"' && attrEndChar !== "'") {
        return null;
      }
      const attrEndIndex = s.indexOf(attrEndChar, ++pos);
      if (attrEndIndex < 0) {
        return null;
      }
      attrValue = s.substring(pos, attrEndIndex);
      attributes.push({
        name: attrName,
        value: this._resolveEntities(attrValue)
      });
      pos = attrEndIndex + 1;
      skipWs();
    }
    return {
      name,
      attributes,
      parsed: pos - start
    };
  }
  _parseProcessingInstruction(s, start) {
    let pos = start;
    function skipWs() {
      while (pos < s.length && isWhitespace(s, pos)) {
        ++pos;
      }
    }
    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "?" && s[pos] !== "/") {
      ++pos;
    }
    const name = s.substring(start, pos);
    skipWs();
    const attrStart = pos;
    while (pos < s.length && (s[pos] !== "?" || s[pos + 1] !== ">")) {
      ++pos;
    }
    const value = s.substring(attrStart, pos);
    return {
      name,
      value,
      parsed: pos - start
    };
  }
  parseXml(s) {
    let i = 0;
    while (i < s.length) {
      const ch = s[i];
      let j = i;
      if (ch === "<") {
        ++j;
        const ch2 = s[j];
        let q;
        switch (ch2) {
          case "/":
            ++j;
            q = s.indexOf(">", j);
            if (q < 0) {
              this.onError(XMLParserErrorCode.UnterminatedElement);
              return;
            }
            this.onEndElement(s.substring(j, q));
            j = q + 1;
            break;
          case "?":
            ++j;
            const pi = this._parseProcessingInstruction(s, j);
            if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== "?>") {
              this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);
              return;
            }
            this.onPi(pi.name, pi.value);
            j += pi.parsed + 2;
            break;
          case "!":
            if (s.substring(j + 1, j + 3) === "--") {
              q = s.indexOf("-->", j + 3);
              if (q < 0) {
                this.onError(XMLParserErrorCode.UnterminatedComment);
                return;
              }
              this.onComment(s.substring(j + 3, q));
              j = q + 3;
            } else if (s.substring(j + 1, j + 8) === "[CDATA[") {
              q = s.indexOf("]]>", j + 8);
              if (q < 0) {
                this.onError(XMLParserErrorCode.UnterminatedCdat);
                return;
              }
              this.onCdata(s.substring(j + 8, q));
              j = q + 3;
            } else if (s.substring(j + 1, j + 8) === "DOCTYPE") {
              const q2 = s.indexOf("[", j + 8);
              let complexDoctype = false;
              q = s.indexOf(">", j + 8);
              if (q < 0) {
                this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);
                return;
              }
              if (q2 > 0 && q > q2) {
                q = s.indexOf("]>", j + 8);
                if (q < 0) {
                  this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);
                  return;
                }
                complexDoctype = true;
              }
              const doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));
              this.onDoctype(doctypeContent);
              j = q + (complexDoctype ? 2 : 1);
            } else {
              this.onError(XMLParserErrorCode.MalformedElement);
              return;
            }
            break;
          default:
            const content = this._parseContent(s, j);
            if (content === null) {
              this.onError(XMLParserErrorCode.MalformedElement);
              return;
            }
            let isClosed = false;
            if (s.substring(j + content.parsed, j + content.parsed + 2) === "/>") {
              isClosed = true;
            } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== ">") {
              this.onError(XMLParserErrorCode.UnterminatedElement);
              return;
            }
            this.onBeginElement(content.name, content.attributes, isClosed);
            j += content.parsed + (isClosed ? 2 : 1);
            break;
        }
      } else {
        while (j < s.length && s[j] !== "<") {
          j++;
        }
        const text = s.substring(i, j);
        this.onText(this._resolveEntities(text));
      }
      i = j;
    }
  }
  onResolveEntity(name) {
    return \`&\${name};\`;
  }
  onPi(name, value) {}
  onComment(text) {}
  onCdata(text) {}
  onDoctype(doctypeContent) {}
  onText(text) {}
  onBeginElement(name, attributes, isEmpty) {}
  onEndElement(name) {}
  onError(code) {}
}
class SimpleDOMNode {
  constructor(nodeName, nodeValue) {
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    Object.defineProperty(this, "parentNode", {
      value: null,
      writable: true
    });
  }
  get firstChild() {
    return this.childNodes?.[0];
  }
  get nextSibling() {
    const childNodes = this.parentNode.childNodes;
    if (!childNodes) {
      return undefined;
    }
    const index = childNodes.indexOf(this);
    if (index === -1) {
      return undefined;
    }
    return childNodes[index + 1];
  }
  get textContent() {
    if (!this.childNodes) {
      return this.nodeValue || "";
    }
    return this.childNodes.map(child => child.textContent).join("");
  }
  get children() {
    return this.childNodes || [];
  }
  hasChildNodes() {
    return this.childNodes?.length > 0;
  }
  searchNode(paths, pos) {
    if (pos >= paths.length) {
      return this;
    }
    const component = paths[pos];
    if (component.name.startsWith("#") && pos < paths.length - 1) {
      return this.searchNode(paths, pos + 1);
    }
    const stack = [];
    let node = this;
    while (true) {
      if (component.name === node.nodeName) {
        if (component.pos === 0) {
          const res = node.searchNode(paths, pos + 1);
          if (res !== null) {
            return res;
          }
        } else if (stack.length === 0) {
          return null;
        } else {
          const [parent] = stack.pop();
          let siblingPos = 0;
          for (const child of parent.childNodes) {
            if (component.name === child.nodeName) {
              if (siblingPos === component.pos) {
                return child.searchNode(paths, pos + 1);
              }
              siblingPos++;
            }
          }
          return node.searchNode(paths, pos + 1);
        }
      }
      if (node.childNodes?.length > 0) {
        stack.push([node, 0]);
        node = node.childNodes[0];
      } else if (stack.length === 0) {
        return null;
      } else {
        while (stack.length !== 0) {
          const [parent, currentPos] = stack.pop();
          const newPos = currentPos + 1;
          if (newPos < parent.childNodes.length) {
            stack.push([parent, newPos]);
            node = parent.childNodes[newPos];
            break;
          }
        }
        if (stack.length === 0) {
          return null;
        }
      }
    }
  }
  dump(buffer) {
    if (this.nodeName === "#text") {
      buffer.push(encodeToXmlString(this.nodeValue));
      return;
    }
    buffer.push(\`<\${this.nodeName}\`);
    if (this.attributes) {
      for (const attribute of this.attributes) {
        buffer.push(\` \${attribute.name}="\${encodeToXmlString(attribute.value)}"\`);
      }
    }
    if (this.hasChildNodes()) {
      buffer.push(">");
      for (const child of this.childNodes) {
        child.dump(buffer);
      }
      buffer.push(\`</\${this.nodeName}>\`);
    } else if (this.nodeValue) {
      buffer.push(\`>\${encodeToXmlString(this.nodeValue)}</\${this.nodeName}>\`);
    } else {
      buffer.push("/>");
    }
  }
}
class SimpleXMLParser extends XMLParserBase {
  constructor({
    hasAttributes = false,
    lowerCaseName = false
  }) {
    super();
    this._currentFragment = null;
    this._stack = null;
    this._errorCode = XMLParserErrorCode.NoError;
    this._hasAttributes = hasAttributes;
    this._lowerCaseName = lowerCaseName;
  }
  parseFromString(data) {
    this._currentFragment = [];
    this._stack = [];
    this._errorCode = XMLParserErrorCode.NoError;
    this.parseXml(data);
    if (this._errorCode !== XMLParserErrorCode.NoError) {
      return undefined;
    }
    const [documentElement] = this._currentFragment;
    if (!documentElement) {
      return undefined;
    }
    return {
      documentElement
    };
  }
  onText(text) {
    if (isWhitespaceString(text)) {
      return;
    }
    const node = new SimpleDOMNode("#text", text);
    this._currentFragment.push(node);
  }
  onCdata(text) {
    const node = new SimpleDOMNode("#text", text);
    this._currentFragment.push(node);
  }
  onBeginElement(name, attributes, isEmpty) {
    if (this._lowerCaseName) {
      name = name.toLowerCase();
    }
    const node = new SimpleDOMNode(name);
    node.childNodes = [];
    if (this._hasAttributes) {
      node.attributes = attributes;
    }
    this._currentFragment.push(node);
    if (isEmpty) {
      return;
    }
    this._stack.push(this._currentFragment);
    this._currentFragment = node.childNodes;
  }
  onEndElement(name) {
    this._currentFragment = this._stack.pop() || [];
    const lastElement = this._currentFragment.at(-1);
    if (!lastElement) {
      return null;
    }
    for (const childNode of lastElement.childNodes) {
      childNode.parentNode = lastElement;
    }
    return lastElement;
  }
  onError(code) {
    this._errorCode = code;
  }
}

;// ./src/core/metadata_parser.js

class MetadataParser {
  constructor(data) {
    data = this._repair(data);
    const parser = new SimpleXMLParser({
      lowerCaseName: true
    });
    const xmlDocument = parser.parseFromString(data);
    this._metadataMap = new Map();
    this._data = data;
    if (xmlDocument) {
      this._parse(xmlDocument);
    }
  }
  _repair(data) {
    return data.replace(/^[^<]+/, "").replaceAll(/>\\\\376\\\\377([^<]+)/g, function (all, codes) {
      const bytes = codes.replaceAll(/\\\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {
        return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);
      }).replaceAll(/&(amp|apos|gt|lt|quot);/g, function (str, name) {
        switch (name) {
          case "amp":
            return "&";
          case "apos":
            return "'";
          case "gt":
            return ">";
          case "lt":
            return "<";
          case "quot":
            return '"';
        }
        throw new Error(\`_repair: \${name} isn't defined.\`);
      });
      const charBuf = [">"];
      for (let i = 0, ii = bytes.length; i < ii; i += 2) {
        const code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);
        if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {
          charBuf.push(String.fromCharCode(code));
        } else {
          charBuf.push("&#x" + (0x10000 + code).toString(16).substring(1) + ";");
        }
      }
      return charBuf.join("");
    });
  }
  _getSequence(entry) {
    const name = entry.nodeName;
    if (name !== "rdf:bag" && name !== "rdf:seq" && name !== "rdf:alt") {
      return null;
    }
    return entry.childNodes.filter(node => node.nodeName === "rdf:li");
  }
  _parseArray(entry) {
    if (!entry.hasChildNodes()) {
      return;
    }
    const [seqNode] = entry.childNodes;
    const sequence = this._getSequence(seqNode) || [];
    this._metadataMap.set(entry.nodeName, sequence.map(node => node.textContent.trim()));
  }
  _parse(xmlDocument) {
    let rdf = xmlDocument.documentElement;
    if (rdf.nodeName !== "rdf:rdf") {
      rdf = rdf.firstChild;
      while (rdf && rdf.nodeName !== "rdf:rdf") {
        rdf = rdf.nextSibling;
      }
    }
    if (!rdf || rdf.nodeName !== "rdf:rdf" || !rdf.hasChildNodes()) {
      return;
    }
    for (const desc of rdf.childNodes) {
      if (desc.nodeName !== "rdf:description") {
        continue;
      }
      for (const entry of desc.childNodes) {
        const name = entry.nodeName;
        switch (name) {
          case "#text":
            continue;
          case "dc:creator":
          case "dc:subject":
            this._parseArray(entry);
            continue;
        }
        this._metadataMap.set(name, entry.textContent.trim());
      }
    }
  }
  get serializable() {
    return {
      parsedData: this._metadataMap,
      rawData: this._data
    };
  }
}

;// ./src/core/struct_tree.js




const MAX_DEPTH = 40;
const StructElementType = {
  PAGE_CONTENT: 1,
  STREAM_CONTENT: 2,
  OBJECT: 3,
  ANNOTATION: 4,
  ELEMENT: 5
};
class StructTreeRoot {
  constructor(xref, rootDict, rootRef) {
    this.xref = xref;
    this.dict = rootDict;
    this.ref = rootRef instanceof Ref ? rootRef : null;
    this.roleMap = new Map();
    this.structParentIds = null;
  }
  init() {
    this.readRoleMap();
  }
  #addIdToPage(pageRef, id, type) {
    if (!(pageRef instanceof Ref) || id < 0) {
      return;
    }
    this.structParentIds ||= new RefSetCache();
    let ids = this.structParentIds.get(pageRef);
    if (!ids) {
      ids = [];
      this.structParentIds.put(pageRef, ids);
    }
    ids.push([id, type]);
  }
  addAnnotationIdToPage(pageRef, id) {
    this.#addIdToPage(pageRef, id, StructElementType.ANNOTATION);
  }
  readRoleMap() {
    const roleMapDict = this.dict.get("RoleMap");
    if (!(roleMapDict instanceof Dict)) {
      return;
    }
    for (const [key, value] of roleMapDict) {
      if (value instanceof Name) {
        this.roleMap.set(key, value.name);
      }
    }
  }
  static async canCreateStructureTree({
    catalogRef,
    pdfManager,
    newAnnotationsByPage
  }) {
    if (!(catalogRef instanceof Ref)) {
      warn("Cannot save the struct tree: no catalog reference.");
      return false;
    }
    let nextKey = 0;
    let hasNothingToUpdate = true;
    for (const [pageIndex, elements] of newAnnotationsByPage) {
      const {
        ref: pageRef
      } = await pdfManager.getPage(pageIndex);
      if (!(pageRef instanceof Ref)) {
        warn(\`Cannot save the struct tree: page \${pageIndex} has no ref.\`);
        hasNothingToUpdate = true;
        break;
      }
      for (const element of elements) {
        if (element.accessibilityData?.type) {
          element.parentTreeId = nextKey++;
          hasNothingToUpdate = false;
        }
      }
    }
    if (hasNothingToUpdate) {
      for (const elements of newAnnotationsByPage.values()) {
        for (const element of elements) {
          delete element.parentTreeId;
        }
      }
      return false;
    }
    return true;
  }
  static async createStructureTree({
    newAnnotationsByPage,
    xref,
    catalogRef,
    pdfManager,
    changes
  }) {
    const root = pdfManager.catalog.cloneDict();
    const cache = new RefSetCache();
    cache.put(catalogRef, root);
    const structTreeRootRef = xref.getNewTemporaryRef();
    root.set("StructTreeRoot", structTreeRootRef);
    const structTreeRoot = new Dict(xref);
    structTreeRoot.set("Type", Name.get("StructTreeRoot"));
    const parentTreeRef = xref.getNewTemporaryRef();
    structTreeRoot.set("ParentTree", parentTreeRef);
    const kids = [];
    structTreeRoot.set("K", kids);
    cache.put(structTreeRootRef, structTreeRoot);
    const parentTree = new Dict(xref);
    const nums = [];
    parentTree.set("Nums", nums);
    const nextKey = await this.#writeKids({
      newAnnotationsByPage,
      structTreeRootRef,
      structTreeRoot: null,
      kids,
      nums,
      xref,
      pdfManager,
      changes,
      cache
    });
    structTreeRoot.set("ParentTreeNextKey", nextKey);
    cache.put(parentTreeRef, parentTree);
    for (const [ref, obj] of cache.items()) {
      changes.put(ref, {
        data: obj
      });
    }
  }
  async canUpdateStructTree({
    pdfManager,
    newAnnotationsByPage
  }) {
    if (!this.ref) {
      warn("Cannot update the struct tree: no root reference.");
      return false;
    }
    let nextKey = this.dict.get("ParentTreeNextKey");
    if (!Number.isInteger(nextKey) || nextKey < 0) {
      warn("Cannot update the struct tree: invalid next key.");
      return false;
    }
    const parentTree = this.dict.get("ParentTree");
    if (!(parentTree instanceof Dict)) {
      warn("Cannot update the struct tree: ParentTree isn't a dict.");
      return false;
    }
    const nums = parentTree.get("Nums");
    if (!Array.isArray(nums)) {
      warn("Cannot update the struct tree: nums isn't an array.");
      return false;
    }
    const numberTree = new NumberTree(parentTree, this.xref);
    for (const pageIndex of newAnnotationsByPage.keys()) {
      const {
        pageDict
      } = await pdfManager.getPage(pageIndex);
      if (!pageDict.has("StructParents")) {
        continue;
      }
      const id = pageDict.get("StructParents");
      if (!Number.isInteger(id) || !Array.isArray(numberTree.get(id))) {
        warn(\`Cannot save the struct tree: page \${pageIndex} has a wrong id.\`);
        return false;
      }
    }
    let hasNothingToUpdate = true;
    for (const [pageIndex, elements] of newAnnotationsByPage) {
      const {
        pageDict
      } = await pdfManager.getPage(pageIndex);
      StructTreeRoot.#collectParents({
        elements,
        xref: this.xref,
        pageDict,
        numberTree
      });
      for (const element of elements) {
        if (element.accessibilityData?.type) {
          if (!(element.accessibilityData.structParent >= 0)) {
            element.parentTreeId = nextKey++;
          }
          hasNothingToUpdate = false;
        }
      }
    }
    if (hasNothingToUpdate) {
      for (const elements of newAnnotationsByPage.values()) {
        for (const element of elements) {
          delete element.parentTreeId;
          delete element.structTreeParent;
        }
      }
      return false;
    }
    return true;
  }
  async updateStructureTree({
    newAnnotationsByPage,
    pdfManager,
    changes
  }) {
    const {
      ref: structTreeRootRef,
      xref
    } = this;
    const structTreeRoot = this.dict.clone();
    const cache = new RefSetCache();
    cache.put(structTreeRootRef, structTreeRoot);
    let parentTreeRef = structTreeRoot.getRaw("ParentTree");
    let parentTree;
    if (parentTreeRef instanceof Ref) {
      parentTree = xref.fetch(parentTreeRef);
    } else {
      parentTree = parentTreeRef;
      parentTreeRef = xref.getNewTemporaryRef();
      structTreeRoot.set("ParentTree", parentTreeRef);
    }
    parentTree = parentTree.clone();
    cache.put(parentTreeRef, parentTree);
    let nums = parentTree.getRaw("Nums");
    let numsRef = null;
    if (nums instanceof Ref) {
      numsRef = nums;
      nums = xref.fetch(numsRef);
    }
    nums = nums.slice();
    if (!numsRef) {
      parentTree.set("Nums", nums);
    }
    const newNextKey = await StructTreeRoot.#writeKids({
      newAnnotationsByPage,
      structTreeRootRef,
      structTreeRoot: this,
      kids: null,
      nums,
      xref,
      pdfManager,
      changes,
      cache
    });
    if (newNextKey === -1) {
      return;
    }
    structTreeRoot.set("ParentTreeNextKey", newNextKey);
    if (numsRef) {
      cache.put(numsRef, nums);
    }
    for (const [ref, obj] of cache.items()) {
      changes.put(ref, {
        data: obj
      });
    }
  }
  static async #writeKids({
    newAnnotationsByPage,
    structTreeRootRef,
    structTreeRoot,
    kids,
    nums,
    xref,
    pdfManager,
    changes,
    cache
  }) {
    const objr = Name.get("OBJR");
    let nextKey = -1;
    let structTreePageObjs;
    for (const [pageIndex, elements] of newAnnotationsByPage) {
      const page = await pdfManager.getPage(pageIndex);
      const {
        ref: pageRef
      } = page;
      const isPageRef = pageRef instanceof Ref;
      for (const {
        accessibilityData,
        ref,
        parentTreeId,
        structTreeParent
      } of elements) {
        if (!accessibilityData?.type) {
          continue;
        }
        const {
          structParent
        } = accessibilityData;
        if (structTreeRoot && Number.isInteger(structParent) && structParent >= 0) {
          let objs = (structTreePageObjs ||= new Map()).get(pageIndex);
          if (objs === undefined) {
            const structTreePage = new StructTreePage(structTreeRoot, page.pageDict);
            objs = structTreePage.collectObjects(pageRef);
            structTreePageObjs.set(pageIndex, objs);
          }
          const objRef = objs?.get(structParent);
          if (objRef) {
            const tagDict = xref.fetch(objRef).clone();
            StructTreeRoot.#writeProperties(tagDict, accessibilityData);
            changes.put(objRef, {
              data: tagDict
            });
            continue;
          }
        }
        nextKey = Math.max(nextKey, parentTreeId);
        const tagRef = xref.getNewTemporaryRef();
        const tagDict = new Dict(xref);
        StructTreeRoot.#writeProperties(tagDict, accessibilityData);
        await this.#updateParentTag({
          structTreeParent,
          tagDict,
          newTagRef: tagRef,
          structTreeRootRef,
          fallbackKids: kids,
          xref,
          cache
        });
        const objDict = new Dict(xref);
        tagDict.set("K", objDict);
        objDict.set("Type", objr);
        if (isPageRef) {
          objDict.set("Pg", pageRef);
        }
        objDict.set("Obj", ref);
        cache.put(tagRef, tagDict);
        nums.push(parentTreeId, tagRef);
      }
    }
    return nextKey + 1;
  }
  static #writeProperties(tagDict, {
    type,
    title,
    lang,
    alt,
    expanded,
    actualText
  }) {
    tagDict.set("S", Name.get(type));
    if (title) {
      tagDict.set("T", stringToAsciiOrUTF16BE(title));
    }
    if (lang) {
      tagDict.set("Lang", stringToAsciiOrUTF16BE(lang));
    }
    if (alt) {
      tagDict.set("Alt", stringToAsciiOrUTF16BE(alt));
    }
    if (expanded) {
      tagDict.set("E", stringToAsciiOrUTF16BE(expanded));
    }
    if (actualText) {
      tagDict.set("ActualText", stringToAsciiOrUTF16BE(actualText));
    }
  }
  static #collectParents({
    elements,
    xref,
    pageDict,
    numberTree
  }) {
    const idToElements = new Map();
    for (const element of elements) {
      if (element.structTreeParentId) {
        const id = parseInt(element.structTreeParentId.split("_mc")[1], 10);
        let elems = idToElements.get(id);
        if (!elems) {
          elems = [];
          idToElements.set(id, elems);
        }
        elems.push(element);
      }
    }
    const id = pageDict.get("StructParents");
    if (!Number.isInteger(id)) {
      return;
    }
    const parentArray = numberTree.get(id);
    const updateElement = (kid, pageKid, kidRef) => {
      const elems = idToElements.get(kid);
      if (elems) {
        const parentRef = pageKid.getRaw("P");
        const parentDict = xref.fetchIfRef(parentRef);
        if (parentRef instanceof Ref && parentDict instanceof Dict) {
          const params = {
            ref: kidRef,
            dict: pageKid
          };
          for (const element of elems) {
            element.structTreeParent = params;
          }
        }
        return true;
      }
      return false;
    };
    for (const kidRef of parentArray) {
      if (!(kidRef instanceof Ref)) {
        continue;
      }
      const pageKid = xref.fetch(kidRef);
      const k = pageKid.get("K");
      if (Number.isInteger(k)) {
        updateElement(k, pageKid, kidRef);
        continue;
      }
      if (!Array.isArray(k)) {
        continue;
      }
      for (let kid of k) {
        kid = xref.fetchIfRef(kid);
        if (Number.isInteger(kid) && updateElement(kid, pageKid, kidRef)) {
          break;
        }
        if (!(kid instanceof Dict)) {
          continue;
        }
        if (!isName(kid.get("Type"), "MCR")) {
          break;
        }
        const mcid = kid.get("MCID");
        if (Number.isInteger(mcid) && updateElement(mcid, pageKid, kidRef)) {
          break;
        }
      }
    }
  }
  static async #updateParentTag({
    structTreeParent,
    tagDict,
    newTagRef,
    structTreeRootRef,
    fallbackKids,
    xref,
    cache
  }) {
    let ref = null;
    let parentRef;
    if (structTreeParent) {
      ({
        ref
      } = structTreeParent);
      parentRef = structTreeParent.dict.getRaw("P") || structTreeRootRef;
    } else {
      parentRef = structTreeRootRef;
    }
    tagDict.set("P", parentRef);
    const parentDict = xref.fetchIfRef(parentRef);
    if (!parentDict) {
      fallbackKids.push(newTagRef);
      return;
    }
    let cachedParentDict = cache.get(parentRef);
    if (!cachedParentDict) {
      cachedParentDict = parentDict.clone();
      cache.put(parentRef, cachedParentDict);
    }
    const parentKidsRaw = cachedParentDict.getRaw("K");
    let cachedParentKids = parentKidsRaw instanceof Ref ? cache.get(parentKidsRaw) : null;
    if (!cachedParentKids) {
      cachedParentKids = xref.fetchIfRef(parentKidsRaw);
      cachedParentKids = Array.isArray(cachedParentKids) ? cachedParentKids.slice() : [parentKidsRaw];
      const parentKidsRef = xref.getNewTemporaryRef();
      cachedParentDict.set("K", parentKidsRef);
      cache.put(parentKidsRef, cachedParentKids);
    }
    const index = cachedParentKids.indexOf(ref);
    cachedParentKids.splice(index >= 0 ? index + 1 : cachedParentKids.length, 0, newTagRef);
  }
}
class StructElementNode {
  constructor(tree, dict) {
    this.tree = tree;
    this.xref = tree.xref;
    this.dict = dict;
    this.kids = [];
    this.parseKids();
  }
  get role() {
    const nameObj = this.dict.get("S");
    const name = nameObj instanceof Name ? nameObj.name : "";
    const {
      root
    } = this.tree;
    return root.roleMap.get(name) ?? name;
  }
  parseKids() {
    let pageObjId = null;
    const objRef = this.dict.getRaw("Pg");
    if (objRef instanceof Ref) {
      pageObjId = objRef.toString();
    }
    const kids = this.dict.get("K");
    if (Array.isArray(kids)) {
      for (const kid of kids) {
        const element = this.parseKid(pageObjId, this.xref.fetchIfRef(kid));
        if (element) {
          this.kids.push(element);
        }
      }
    } else {
      const element = this.parseKid(pageObjId, kids);
      if (element) {
        this.kids.push(element);
      }
    }
  }
  parseKid(pageObjId, kid) {
    if (Number.isInteger(kid)) {
      if (this.tree.pageDict.objId !== pageObjId) {
        return null;
      }
      return new StructElement({
        type: StructElementType.PAGE_CONTENT,
        mcid: kid,
        pageObjId
      });
    }
    if (!(kid instanceof Dict)) {
      return null;
    }
    const pageRef = kid.getRaw("Pg");
    if (pageRef instanceof Ref) {
      pageObjId = pageRef.toString();
    }
    const type = kid.get("Type") instanceof Name ? kid.get("Type").name : null;
    if (type === "MCR") {
      if (this.tree.pageDict.objId !== pageObjId) {
        return null;
      }
      const kidRef = kid.getRaw("Stm");
      return new StructElement({
        type: StructElementType.STREAM_CONTENT,
        refObjId: kidRef instanceof Ref ? kidRef.toString() : null,
        pageObjId,
        mcid: kid.get("MCID")
      });
    }
    if (type === "OBJR") {
      if (this.tree.pageDict.objId !== pageObjId) {
        return null;
      }
      const kidRef = kid.getRaw("Obj");
      return new StructElement({
        type: StructElementType.OBJECT,
        refObjId: kidRef instanceof Ref ? kidRef.toString() : null,
        pageObjId
      });
    }
    return new StructElement({
      type: StructElementType.ELEMENT,
      dict: kid
    });
  }
}
class StructElement {
  constructor({
    type,
    dict = null,
    mcid = null,
    pageObjId = null,
    refObjId = null
  }) {
    this.type = type;
    this.dict = dict;
    this.mcid = mcid;
    this.pageObjId = pageObjId;
    this.refObjId = refObjId;
    this.parentNode = null;
  }
}
class StructTreePage {
  constructor(structTreeRoot, pageDict) {
    this.root = structTreeRoot;
    this.xref = structTreeRoot?.xref ?? null;
    this.rootDict = structTreeRoot?.dict ?? null;
    this.pageDict = pageDict;
    this.nodes = [];
  }
  collectObjects(pageRef) {
    if (!this.root || !this.rootDict || !(pageRef instanceof Ref)) {
      return null;
    }
    const parentTree = this.rootDict.get("ParentTree");
    if (!parentTree) {
      return null;
    }
    const ids = this.root.structParentIds?.get(pageRef);
    if (!ids) {
      return null;
    }
    const map = new Map();
    const numberTree = new NumberTree(parentTree, this.xref);
    for (const [elemId] of ids) {
      const obj = numberTree.getRaw(elemId);
      if (obj instanceof Ref) {
        map.set(elemId, obj);
      }
    }
    return map;
  }
  parse(pageRef) {
    if (!this.root || !this.rootDict || !(pageRef instanceof Ref)) {
      return;
    }
    const parentTree = this.rootDict.get("ParentTree");
    if (!parentTree) {
      return;
    }
    const id = this.pageDict.get("StructParents");
    const ids = this.root.structParentIds?.get(pageRef);
    if (!Number.isInteger(id) && !ids) {
      return;
    }
    const map = new Map();
    const numberTree = new NumberTree(parentTree, this.xref);
    if (Number.isInteger(id)) {
      const parentArray = numberTree.get(id);
      if (Array.isArray(parentArray)) {
        for (const ref of parentArray) {
          if (ref instanceof Ref) {
            this.addNode(this.xref.fetch(ref), map);
          }
        }
      }
    }
    if (!ids) {
      return;
    }
    for (const [elemId, type] of ids) {
      const obj = numberTree.get(elemId);
      if (obj) {
        const elem = this.addNode(this.xref.fetchIfRef(obj), map);
        if (elem?.kids?.length === 1 && elem.kids[0].type === StructElementType.OBJECT) {
          elem.kids[0].type = type;
        }
      }
    }
  }
  addNode(dict, map, level = 0) {
    if (level > MAX_DEPTH) {
      warn("StructTree MAX_DEPTH reached.");
      return null;
    }
    if (!(dict instanceof Dict)) {
      return null;
    }
    if (map.has(dict)) {
      return map.get(dict);
    }
    const element = new StructElementNode(this, dict);
    map.set(dict, element);
    const parent = dict.get("P");
    if (!parent || isName(parent.get("Type"), "StructTreeRoot")) {
      if (!this.addTopLevelNode(dict, element)) {
        map.delete(dict);
      }
      return element;
    }
    const parentNode = this.addNode(parent, map, level + 1);
    if (!parentNode) {
      return element;
    }
    let save = false;
    for (const kid of parentNode.kids) {
      if (kid.type === StructElementType.ELEMENT && kid.dict === dict) {
        kid.parentNode = element;
        save = true;
      }
    }
    if (!save) {
      map.delete(dict);
    }
    return element;
  }
  addTopLevelNode(dict, element) {
    const obj = this.rootDict.get("K");
    if (!obj) {
      return false;
    }
    if (obj instanceof Dict) {
      if (obj.objId !== dict.objId) {
        return false;
      }
      this.nodes[0] = element;
      return true;
    }
    if (!Array.isArray(obj)) {
      return true;
    }
    let save = false;
    for (let i = 0; i < obj.length; i++) {
      const kidRef = obj[i];
      if (kidRef?.toString() === dict.objId) {
        this.nodes[i] = element;
        save = true;
      }
    }
    return save;
  }
  get serializable() {
    function nodeToSerializable(node, parent, level = 0) {
      if (level > MAX_DEPTH) {
        warn("StructTree too deep to be fully serialized.");
        return;
      }
      const obj = Object.create(null);
      obj.role = node.role;
      obj.children = [];
      parent.children.push(obj);
      let alt = node.dict.get("Alt");
      if (typeof alt !== "string") {
        alt = node.dict.get("ActualText");
      }
      if (typeof alt === "string") {
        obj.alt = stringToPDFString(alt);
      }
      const a = node.dict.get("A");
      if (a instanceof Dict) {
        const bbox = lookupNormalRect(a.getArray("BBox"), null);
        if (bbox) {
          obj.bbox = bbox;
        } else {
          const width = a.get("Width");
          const height = a.get("Height");
          if (typeof width === "number" && width > 0 && typeof height === "number" && height > 0) {
            obj.bbox = [0, 0, width, height];
          }
        }
      }
      const lang = node.dict.get("Lang");
      if (typeof lang === "string") {
        obj.lang = stringToPDFString(lang);
      }
      for (const kid of node.kids) {
        const kidElement = kid.type === StructElementType.ELEMENT ? kid.parentNode : null;
        if (kidElement) {
          nodeToSerializable(kidElement, obj, level + 1);
          continue;
        } else if (kid.type === StructElementType.PAGE_CONTENT || kid.type === StructElementType.STREAM_CONTENT) {
          obj.children.push({
            type: "content",
            id: \`p\${kid.pageObjId}_mc\${kid.mcid}\`
          });
        } else if (kid.type === StructElementType.OBJECT) {
          obj.children.push({
            type: "object",
            id: kid.refObjId
          });
        } else if (kid.type === StructElementType.ANNOTATION) {
          obj.children.push({
            type: "annotation",
            id: \`\${AnnotationPrefix}\${kid.refObjId}\`
          });
        }
      }
    }
    const root = Object.create(null);
    root.children = [];
    root.role = "Root";
    for (const child of this.nodes) {
      if (!child) {
        continue;
      }
      nodeToSerializable(child, root);
    }
    return root;
  }
}

;// ./src/core/catalog.js











const isRef = v => v instanceof Ref;
const isValidExplicitDest = _isValidExplicitDest.bind(null, isRef, isName);
function fetchDest(dest) {
  if (dest instanceof Dict) {
    dest = dest.get("D");
  }
  return isValidExplicitDest(dest) ? dest : null;
}
function fetchRemoteDest(action) {
  let dest = action.get("D");
  if (dest) {
    if (dest instanceof Name) {
      dest = dest.name;
    }
    if (typeof dest === "string") {
      return stringToPDFString(dest);
    } else if (isValidExplicitDest(dest)) {
      return JSON.stringify(dest);
    }
  }
  return null;
}
class Catalog {
  constructor(pdfManager, xref) {
    this.pdfManager = pdfManager;
    this.xref = xref;
    this._catDict = xref.getCatalogObj();
    if (!(this._catDict instanceof Dict)) {
      throw new FormatError("Catalog object is not a dictionary.");
    }
    this.toplevelPagesDict;
    this._actualNumPages = null;
    this.fontCache = new RefSetCache();
    this.builtInCMapCache = new Map();
    this.standardFontDataCache = new Map();
    this.globalColorSpaceCache = new GlobalColorSpaceCache();
    this.globalImageCache = new GlobalImageCache();
    this.pageKidsCountCache = new RefSetCache();
    this.pageIndexCache = new RefSetCache();
    this.pageDictCache = new RefSetCache();
    this.nonBlendModesSet = new RefSet();
    this.systemFontCache = new Map();
  }
  cloneDict() {
    return this._catDict.clone();
  }
  get version() {
    const version = this._catDict.get("Version");
    if (version instanceof Name) {
      if (PDF_VERSION_REGEXP.test(version.name)) {
        return shadow(this, "version", version.name);
      }
      warn(\`Invalid PDF catalog version: \${version.name}\`);
    }
    return shadow(this, "version", null);
  }
  get lang() {
    const lang = this._catDict.get("Lang");
    return shadow(this, "lang", lang && typeof lang === "string" ? stringToPDFString(lang) : null);
  }
  get needsRendering() {
    const needsRendering = this._catDict.get("NeedsRendering");
    return shadow(this, "needsRendering", typeof needsRendering === "boolean" ? needsRendering : false);
  }
  get collection() {
    let collection = null;
    try {
      const obj = this._catDict.get("Collection");
      if (obj instanceof Dict && obj.size > 0) {
        collection = obj;
      }
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      info("Cannot fetch Collection entry; assuming no collection is present.");
    }
    return shadow(this, "collection", collection);
  }
  get acroForm() {
    let acroForm = null;
    try {
      const obj = this._catDict.get("AcroForm");
      if (obj instanceof Dict && obj.size > 0) {
        acroForm = obj;
      }
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      info("Cannot fetch AcroForm entry; assuming no forms are present.");
    }
    return shadow(this, "acroForm", acroForm);
  }
  get acroFormRef() {
    const value = this._catDict.getRaw("AcroForm");
    return shadow(this, "acroFormRef", value instanceof Ref ? value : null);
  }
  get metadata() {
    const streamRef = this._catDict.getRaw("Metadata");
    if (!(streamRef instanceof Ref)) {
      return shadow(this, "metadata", null);
    }
    let metadata = null;
    try {
      const stream = this.xref.fetch(streamRef, !this.xref.encrypt?.encryptMetadata);
      if (stream instanceof BaseStream && stream.dict instanceof Dict) {
        const type = stream.dict.get("Type");
        const subtype = stream.dict.get("Subtype");
        if (isName(type, "Metadata") && isName(subtype, "XML")) {
          const data = stringToUTF8String(stream.getString());
          if (data) {
            metadata = new MetadataParser(data).serializable;
          }
        }
      }
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      info(\`Skipping invalid Metadata: "\${ex}".\`);
    }
    return shadow(this, "metadata", metadata);
  }
  get markInfo() {
    let markInfo = null;
    try {
      markInfo = this._readMarkInfo();
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn("Unable to read mark info.");
    }
    return shadow(this, "markInfo", markInfo);
  }
  _readMarkInfo() {
    const obj = this._catDict.get("MarkInfo");
    if (!(obj instanceof Dict)) {
      return null;
    }
    const markInfo = {
      Marked: false,
      UserProperties: false,
      Suspects: false
    };
    for (const key in markInfo) {
      const value = obj.get(key);
      if (typeof value === "boolean") {
        markInfo[key] = value;
      }
    }
    return markInfo;
  }
  get structTreeRoot() {
    let structTree = null;
    try {
      structTree = this.#readStructTreeRoot();
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn("Unable read to structTreeRoot info.");
    }
    return shadow(this, "structTreeRoot", structTree);
  }
  #readStructTreeRoot() {
    const rawObj = this._catDict.getRaw("StructTreeRoot");
    const obj = this.xref.fetchIfRef(rawObj);
    if (!(obj instanceof Dict)) {
      return null;
    }
    const root = new StructTreeRoot(this.xref, obj, rawObj);
    root.init();
    return root;
  }
  get toplevelPagesDict() {
    const pagesObj = this._catDict.get("Pages");
    if (!(pagesObj instanceof Dict)) {
      throw new FormatError("Invalid top-level pages dictionary.");
    }
    return shadow(this, "toplevelPagesDict", pagesObj);
  }
  get documentOutline() {
    let obj = null;
    try {
      obj = this._readDocumentOutline();
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn("Unable to read document outline.");
    }
    return shadow(this, "documentOutline", obj);
  }
  _readDocumentOutline() {
    let obj = this._catDict.get("Outlines");
    if (!(obj instanceof Dict)) {
      return null;
    }
    obj = obj.getRaw("First");
    if (!(obj instanceof Ref)) {
      return null;
    }
    const root = {
      items: []
    };
    const queue = [{
      obj,
      parent: root
    }];
    const processed = new RefSet();
    processed.put(obj);
    const xref = this.xref,
      blackColor = new Uint8ClampedArray(3);
    while (queue.length > 0) {
      const i = queue.shift();
      const outlineDict = xref.fetchIfRef(i.obj);
      if (outlineDict === null) {
        continue;
      }
      if (!outlineDict.has("Title")) {
        warn("Invalid outline item encountered.");
      }
      const data = {
        url: null,
        dest: null,
        action: null
      };
      Catalog.parseDestDictionary({
        destDict: outlineDict,
        resultObj: data,
        docBaseUrl: this.baseUrl,
        docAttachments: this.attachments
      });
      const title = outlineDict.get("Title");
      const flags = outlineDict.get("F") || 0;
      const color = outlineDict.getArray("C");
      const count = outlineDict.get("Count");
      let rgbColor = blackColor;
      if (isNumberArray(color, 3) && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {
        rgbColor = ColorSpaceUtils.rgb.getRgb(color, 0);
      }
      const outlineItem = {
        action: data.action,
        attachment: data.attachment,
        dest: data.dest,
        url: data.url,
        unsafeUrl: data.unsafeUrl,
        newWindow: data.newWindow,
        setOCGState: data.setOCGState,
        title: typeof title === "string" ? stringToPDFString(title) : "",
        color: rgbColor,
        count: Number.isInteger(count) ? count : undefined,
        bold: !!(flags & 2),
        italic: !!(flags & 1),
        items: []
      };
      i.parent.items.push(outlineItem);
      obj = outlineDict.getRaw("First");
      if (obj instanceof Ref && !processed.has(obj)) {
        queue.push({
          obj,
          parent: outlineItem
        });
        processed.put(obj);
      }
      obj = outlineDict.getRaw("Next");
      if (obj instanceof Ref && !processed.has(obj)) {
        queue.push({
          obj,
          parent: i.parent
        });
        processed.put(obj);
      }
    }
    return root.items.length > 0 ? root.items : null;
  }
  get permissions() {
    let permissions = null;
    try {
      permissions = this._readPermissions();
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn("Unable to read permissions.");
    }
    return shadow(this, "permissions", permissions);
  }
  _readPermissions() {
    const encrypt = this.xref.trailer.get("Encrypt");
    if (!(encrypt instanceof Dict)) {
      return null;
    }
    let flags = encrypt.get("P");
    if (typeof flags !== "number") {
      return null;
    }
    flags += 2 ** 32;
    const permissions = [];
    for (const key in PermissionFlag) {
      const value = PermissionFlag[key];
      if (flags & value) {
        permissions.push(value);
      }
    }
    return permissions;
  }
  get optionalContentConfig() {
    let config = null;
    try {
      const properties = this._catDict.get("OCProperties");
      if (!properties) {
        return shadow(this, "optionalContentConfig", null);
      }
      const defaultConfig = properties.get("D");
      if (!defaultConfig) {
        return shadow(this, "optionalContentConfig", null);
      }
      const groupsData = properties.get("OCGs");
      if (!Array.isArray(groupsData)) {
        return shadow(this, "optionalContentConfig", null);
      }
      const groupRefCache = new RefSetCache();
      for (const groupRef of groupsData) {
        if (!(groupRef instanceof Ref) || groupRefCache.has(groupRef)) {
          continue;
        }
        groupRefCache.put(groupRef, this.#readOptionalContentGroup(groupRef));
      }
      config = this.#readOptionalContentConfig(defaultConfig, groupRefCache);
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn(\`Unable to read optional content config: \${ex}\`);
    }
    return shadow(this, "optionalContentConfig", config);
  }
  #readOptionalContentGroup(groupRef) {
    const group = this.xref.fetch(groupRef);
    const obj = {
      id: groupRef.toString(),
      name: null,
      intent: null,
      usage: {
        print: null,
        view: null
      },
      rbGroups: []
    };
    const name = group.get("Name");
    if (typeof name === "string") {
      obj.name = stringToPDFString(name);
    }
    let intent = group.getArray("Intent");
    if (!Array.isArray(intent)) {
      intent = [intent];
    }
    if (intent.every(i => i instanceof Name)) {
      obj.intent = intent.map(i => i.name);
    }
    const usage = group.get("Usage");
    if (!(usage instanceof Dict)) {
      return obj;
    }
    const usageObj = obj.usage;
    const print = usage.get("Print");
    if (print instanceof Dict) {
      const printState = print.get("PrintState");
      if (printState instanceof Name) {
        switch (printState.name) {
          case "ON":
          case "OFF":
            usageObj.print = {
              printState: printState.name
            };
        }
      }
    }
    const view = usage.get("View");
    if (view instanceof Dict) {
      const viewState = view.get("ViewState");
      if (viewState instanceof Name) {
        switch (viewState.name) {
          case "ON":
          case "OFF":
            usageObj.view = {
              viewState: viewState.name
            };
        }
      }
    }
    return obj;
  }
  #readOptionalContentConfig(config, groupRefCache) {
    function parseOnOff(refs) {
      const onParsed = [];
      if (Array.isArray(refs)) {
        for (const value of refs) {
          if (value instanceof Ref && groupRefCache.has(value)) {
            onParsed.push(value.toString());
          }
        }
      }
      return onParsed;
    }
    function parseOrder(refs, nestedLevels = 0) {
      if (!Array.isArray(refs)) {
        return null;
      }
      const order = [];
      for (const value of refs) {
        if (value instanceof Ref && groupRefCache.has(value)) {
          parsedOrderRefs.put(value);
          order.push(value.toString());
          continue;
        }
        const nestedOrder = parseNestedOrder(value, nestedLevels);
        if (nestedOrder) {
          order.push(nestedOrder);
        }
      }
      if (nestedLevels > 0) {
        return order;
      }
      const hiddenGroups = [];
      for (const [groupRef] of groupRefCache.items()) {
        if (parsedOrderRefs.has(groupRef)) {
          continue;
        }
        hiddenGroups.push(groupRef.toString());
      }
      if (hiddenGroups.length) {
        order.push({
          name: null,
          order: hiddenGroups
        });
      }
      return order;
    }
    function parseNestedOrder(ref, nestedLevels) {
      if (++nestedLevels > MAX_NESTED_LEVELS) {
        warn("parseNestedOrder - reached MAX_NESTED_LEVELS.");
        return null;
      }
      const value = xref.fetchIfRef(ref);
      if (!Array.isArray(value)) {
        return null;
      }
      const nestedName = xref.fetchIfRef(value[0]);
      if (typeof nestedName !== "string") {
        return null;
      }
      const nestedOrder = parseOrder(value.slice(1), nestedLevels);
      if (!nestedOrder?.length) {
        return null;
      }
      return {
        name: stringToPDFString(nestedName),
        order: nestedOrder
      };
    }
    function parseRBGroups(rbGroups) {
      if (!Array.isArray(rbGroups)) {
        return;
      }
      for (const value of rbGroups) {
        const rbGroup = xref.fetchIfRef(value);
        if (!Array.isArray(rbGroup) || !rbGroup.length) {
          continue;
        }
        const parsedRbGroup = new Set();
        for (const ref of rbGroup) {
          if (ref instanceof Ref && groupRefCache.has(ref) && !parsedRbGroup.has(ref.toString())) {
            parsedRbGroup.add(ref.toString());
            groupRefCache.get(ref).rbGroups.push(parsedRbGroup);
          }
        }
      }
    }
    const xref = this.xref,
      parsedOrderRefs = new RefSet(),
      MAX_NESTED_LEVELS = 10;
    parseRBGroups(config.get("RBGroups"));
    return {
      name: typeof config.get("Name") === "string" ? stringToPDFString(config.get("Name")) : null,
      creator: typeof config.get("Creator") === "string" ? stringToPDFString(config.get("Creator")) : null,
      baseState: config.get("BaseState") instanceof Name ? config.get("BaseState").name : null,
      on: parseOnOff(config.get("ON")),
      off: parseOnOff(config.get("OFF")),
      order: parseOrder(config.get("Order")),
      groups: [...groupRefCache]
    };
  }
  setActualNumPages(num = null) {
    this._actualNumPages = num;
  }
  get hasActualNumPages() {
    return this._actualNumPages !== null;
  }
  get _pagesCount() {
    const obj = this.toplevelPagesDict.get("Count");
    if (!Number.isInteger(obj)) {
      throw new FormatError("Page count in top-level pages dictionary is not an integer.");
    }
    return shadow(this, "_pagesCount", obj);
  }
  get numPages() {
    return this.hasActualNumPages ? this._actualNumPages : this._pagesCount;
  }
  get destinations() {
    const rawDests = this.#readDests(),
      dests = Object.create(null);
    for (const obj of rawDests) {
      if (obj instanceof NameTree) {
        for (const [key, value] of obj.getAll()) {
          const dest = fetchDest(value);
          if (dest) {
            dests[stringToPDFString(key)] = dest;
          }
        }
      } else if (obj instanceof Dict) {
        for (const [key, value] of obj) {
          const dest = fetchDest(value);
          if (dest) {
            dests[key] ||= dest;
          }
        }
      }
    }
    return shadow(this, "destinations", dests);
  }
  getDestination(id) {
    const rawDests = this.#readDests();
    for (const obj of rawDests) {
      if (obj instanceof NameTree || obj instanceof Dict) {
        const dest = fetchDest(obj.get(id));
        if (dest) {
          return dest;
        }
      }
    }
    if (rawDests[0] instanceof NameTree) {
      const dest = this.destinations[id];
      if (dest) {
        warn(\`Found "\${id}" at an incorrect position in the NameTree.\`);
        return dest;
      }
    }
    return null;
  }
  #readDests() {
    const obj = this._catDict.get("Names");
    const rawDests = [];
    if (obj?.has("Dests")) {
      rawDests.push(new NameTree(obj.getRaw("Dests"), this.xref));
    }
    if (this._catDict.has("Dests")) {
      rawDests.push(this._catDict.get("Dests"));
    }
    return rawDests;
  }
  get pageLabels() {
    let obj = null;
    try {
      obj = this._readPageLabels();
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn("Unable to read page labels.");
    }
    return shadow(this, "pageLabels", obj);
  }
  _readPageLabels() {
    const obj = this._catDict.getRaw("PageLabels");
    if (!obj) {
      return null;
    }
    const pageLabels = new Array(this.numPages);
    let style = null,
      prefix = "";
    const numberTree = new NumberTree(obj, this.xref);
    const nums = numberTree.getAll();
    let currentLabel = "",
      currentIndex = 1;
    for (let i = 0, ii = this.numPages; i < ii; i++) {
      const labelDict = nums.get(i);
      if (labelDict !== undefined) {
        if (!(labelDict instanceof Dict)) {
          throw new FormatError("PageLabel is not a dictionary.");
        }
        if (labelDict.has("Type") && !isName(labelDict.get("Type"), "PageLabel")) {
          throw new FormatError("Invalid type in PageLabel dictionary.");
        }
        if (labelDict.has("S")) {
          const s = labelDict.get("S");
          if (!(s instanceof Name)) {
            throw new FormatError("Invalid style in PageLabel dictionary.");
          }
          style = s.name;
        } else {
          style = null;
        }
        if (labelDict.has("P")) {
          const p = labelDict.get("P");
          if (typeof p !== "string") {
            throw new FormatError("Invalid prefix in PageLabel dictionary.");
          }
          prefix = stringToPDFString(p);
        } else {
          prefix = "";
        }
        if (labelDict.has("St")) {
          const st = labelDict.get("St");
          if (!(Number.isInteger(st) && st >= 1)) {
            throw new FormatError("Invalid start in PageLabel dictionary.");
          }
          currentIndex = st;
        } else {
          currentIndex = 1;
        }
      }
      switch (style) {
        case "D":
          currentLabel = currentIndex;
          break;
        case "R":
        case "r":
          currentLabel = toRomanNumerals(currentIndex, style === "r");
          break;
        case "A":
        case "a":
          const LIMIT = 26;
          const A_UPPER_CASE = 0x41,
            A_LOWER_CASE = 0x61;
          const baseCharCode = style === "a" ? A_LOWER_CASE : A_UPPER_CASE;
          const letterIndex = currentIndex - 1;
          const character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);
          currentLabel = character.repeat(Math.floor(letterIndex / LIMIT) + 1);
          break;
        default:
          if (style) {
            throw new FormatError(\`Invalid style "\${style}" in PageLabel dictionary.\`);
          }
          currentLabel = "";
      }
      pageLabels[i] = prefix + currentLabel;
      currentIndex++;
    }
    return pageLabels;
  }
  get pageLayout() {
    const obj = this._catDict.get("PageLayout");
    let pageLayout = "";
    if (obj instanceof Name) {
      switch (obj.name) {
        case "SinglePage":
        case "OneColumn":
        case "TwoColumnLeft":
        case "TwoColumnRight":
        case "TwoPageLeft":
        case "TwoPageRight":
          pageLayout = obj.name;
      }
    }
    return shadow(this, "pageLayout", pageLayout);
  }
  get pageMode() {
    const obj = this._catDict.get("PageMode");
    let pageMode = "UseNone";
    if (obj instanceof Name) {
      switch (obj.name) {
        case "UseNone":
        case "UseOutlines":
        case "UseThumbs":
        case "FullScreen":
        case "UseOC":
        case "UseAttachments":
          pageMode = obj.name;
      }
    }
    return shadow(this, "pageMode", pageMode);
  }
  get viewerPreferences() {
    const obj = this._catDict.get("ViewerPreferences");
    if (!(obj instanceof Dict)) {
      return shadow(this, "viewerPreferences", null);
    }
    let prefs = null;
    for (const [key, value] of obj) {
      let prefValue;
      switch (key) {
        case "HideToolbar":
        case "HideMenubar":
        case "HideWindowUI":
        case "FitWindow":
        case "CenterWindow":
        case "DisplayDocTitle":
        case "PickTrayByPDFSize":
          if (typeof value === "boolean") {
            prefValue = value;
          }
          break;
        case "NonFullScreenPageMode":
          if (value instanceof Name) {
            switch (value.name) {
              case "UseNone":
              case "UseOutlines":
              case "UseThumbs":
              case "UseOC":
                prefValue = value.name;
                break;
              default:
                prefValue = "UseNone";
            }
          }
          break;
        case "Direction":
          if (value instanceof Name) {
            switch (value.name) {
              case "L2R":
              case "R2L":
                prefValue = value.name;
                break;
              default:
                prefValue = "L2R";
            }
          }
          break;
        case "ViewArea":
        case "ViewClip":
        case "PrintArea":
        case "PrintClip":
          if (value instanceof Name) {
            switch (value.name) {
              case "MediaBox":
              case "CropBox":
              case "BleedBox":
              case "TrimBox":
              case "ArtBox":
                prefValue = value.name;
                break;
              default:
                prefValue = "CropBox";
            }
          }
          break;
        case "PrintScaling":
          if (value instanceof Name) {
            switch (value.name) {
              case "None":
              case "AppDefault":
                prefValue = value.name;
                break;
              default:
                prefValue = "AppDefault";
            }
          }
          break;
        case "Duplex":
          if (value instanceof Name) {
            switch (value.name) {
              case "Simplex":
              case "DuplexFlipShortEdge":
              case "DuplexFlipLongEdge":
                prefValue = value.name;
                break;
              default:
                prefValue = "None";
            }
          }
          break;
        case "PrintPageRange":
          if (Array.isArray(value) && value.length % 2 === 0) {
            const isValid = value.every((page, i, arr) => Number.isInteger(page) && page > 0 && (i === 0 || page >= arr[i - 1]) && page <= this.numPages);
            if (isValid) {
              prefValue = value;
            }
          }
          break;
        case "NumCopies":
          if (Number.isInteger(value) && value > 0) {
            prefValue = value;
          }
          break;
        default:
          warn(\`Ignoring non-standard key in ViewerPreferences: \${key}.\`);
          continue;
      }
      if (prefValue === undefined) {
        warn(\`Bad value, for key "\${key}", in ViewerPreferences: \${value}.\`);
        continue;
      }
      if (!prefs) {
        prefs = Object.create(null);
      }
      prefs[key] = prefValue;
    }
    return shadow(this, "viewerPreferences", prefs);
  }
  get openAction() {
    const obj = this._catDict.get("OpenAction");
    const openAction = Object.create(null);
    if (obj instanceof Dict) {
      const destDict = new Dict(this.xref);
      destDict.set("A", obj);
      const resultObj = {
        url: null,
        dest: null,
        action: null
      };
      Catalog.parseDestDictionary({
        destDict,
        resultObj
      });
      if (Array.isArray(resultObj.dest)) {
        openAction.dest = resultObj.dest;
      } else if (resultObj.action) {
        openAction.action = resultObj.action;
      }
    } else if (Array.isArray(obj)) {
      openAction.dest = obj;
    }
    return shadow(this, "openAction", objectSize(openAction) > 0 ? openAction : null);
  }
  get attachments() {
    const obj = this._catDict.get("Names");
    let attachments = null;
    if (obj instanceof Dict && obj.has("EmbeddedFiles")) {
      const nameTree = new NameTree(obj.getRaw("EmbeddedFiles"), this.xref);
      for (const [key, value] of nameTree.getAll()) {
        const fs = new FileSpec(value, this.xref);
        if (!attachments) {
          attachments = Object.create(null);
        }
        attachments[stringToPDFString(key)] = fs.serializable;
      }
    }
    return shadow(this, "attachments", attachments);
  }
  get xfaImages() {
    const obj = this._catDict.get("Names");
    let xfaImages = null;
    if (obj instanceof Dict && obj.has("XFAImages")) {
      const nameTree = new NameTree(obj.getRaw("XFAImages"), this.xref);
      for (const [key, value] of nameTree.getAll()) {
        if (!xfaImages) {
          xfaImages = new Dict(this.xref);
        }
        xfaImages.set(stringToPDFString(key), value);
      }
    }
    return shadow(this, "xfaImages", xfaImages);
  }
  _collectJavaScript() {
    const obj = this._catDict.get("Names");
    let javaScript = null;
    function appendIfJavaScriptDict(name, jsDict) {
      if (!(jsDict instanceof Dict)) {
        return;
      }
      if (!isName(jsDict.get("S"), "JavaScript")) {
        return;
      }
      let js = jsDict.get("JS");
      if (js instanceof BaseStream) {
        js = js.getString();
      } else if (typeof js !== "string") {
        return;
      }
      js = stringToPDFString(js).replaceAll("\\x00", "");
      if (js) {
        (javaScript ||= new Map()).set(name, js);
      }
    }
    if (obj instanceof Dict && obj.has("JavaScript")) {
      const nameTree = new NameTree(obj.getRaw("JavaScript"), this.xref);
      for (const [key, value] of nameTree.getAll()) {
        appendIfJavaScriptDict(stringToPDFString(key), value);
      }
    }
    const openAction = this._catDict.get("OpenAction");
    if (openAction) {
      appendIfJavaScriptDict("OpenAction", openAction);
    }
    return javaScript;
  }
  get jsActions() {
    const javaScript = this._collectJavaScript();
    let actions = collectActions(this.xref, this._catDict, DocumentActionEventType);
    if (javaScript) {
      actions ||= Object.create(null);
      for (const [key, val] of javaScript) {
        if (key in actions) {
          actions[key].push(val);
        } else {
          actions[key] = [val];
        }
      }
    }
    return shadow(this, "jsActions", actions);
  }
  async cleanup(manuallyTriggered = false) {
    clearGlobalCaches();
    this.globalColorSpaceCache.clear();
    this.globalImageCache.clear(manuallyTriggered);
    this.pageKidsCountCache.clear();
    this.pageIndexCache.clear();
    this.pageDictCache.clear();
    this.nonBlendModesSet.clear();
    for (const {
      dict
    } of await Promise.all(this.fontCache)) {
      delete dict.cacheKey;
    }
    this.fontCache.clear();
    this.builtInCMapCache.clear();
    this.standardFontDataCache.clear();
    this.systemFontCache.clear();
  }
  async getPageDict(pageIndex) {
    const nodesToVisit = [this.toplevelPagesDict];
    const visitedNodes = new RefSet();
    const pagesRef = this._catDict.getRaw("Pages");
    if (pagesRef instanceof Ref) {
      visitedNodes.put(pagesRef);
    }
    const xref = this.xref,
      pageKidsCountCache = this.pageKidsCountCache,
      pageIndexCache = this.pageIndexCache,
      pageDictCache = this.pageDictCache;
    let currentPageIndex = 0;
    while (nodesToVisit.length) {
      const currentNode = nodesToVisit.pop();
      if (currentNode instanceof Ref) {
        const count = pageKidsCountCache.get(currentNode);
        if (count >= 0 && currentPageIndex + count <= pageIndex) {
          currentPageIndex += count;
          continue;
        }
        if (visitedNodes.has(currentNode)) {
          throw new FormatError("Pages tree contains circular reference.");
        }
        visitedNodes.put(currentNode);
        const obj = await (pageDictCache.get(currentNode) || xref.fetchAsync(currentNode));
        if (obj instanceof Dict) {
          let type = obj.getRaw("Type");
          if (type instanceof Ref) {
            type = await xref.fetchAsync(type);
          }
          if (isName(type, "Page") || !obj.has("Kids")) {
            if (!pageKidsCountCache.has(currentNode)) {
              pageKidsCountCache.put(currentNode, 1);
            }
            if (!pageIndexCache.has(currentNode)) {
              pageIndexCache.put(currentNode, currentPageIndex);
            }
            if (currentPageIndex === pageIndex) {
              return [obj, currentNode];
            }
            currentPageIndex++;
            continue;
          }
        }
        nodesToVisit.push(obj);
        continue;
      }
      if (!(currentNode instanceof Dict)) {
        throw new FormatError("Page dictionary kid reference points to wrong type of object.");
      }
      const {
        objId
      } = currentNode;
      let count = currentNode.getRaw("Count");
      if (count instanceof Ref) {
        count = await xref.fetchAsync(count);
      }
      if (Number.isInteger(count) && count >= 0) {
        if (objId && !pageKidsCountCache.has(objId)) {
          pageKidsCountCache.put(objId, count);
        }
        if (currentPageIndex + count <= pageIndex) {
          currentPageIndex += count;
          continue;
        }
      }
      let kids = currentNode.getRaw("Kids");
      if (kids instanceof Ref) {
        kids = await xref.fetchAsync(kids);
      }
      if (!Array.isArray(kids)) {
        let type = currentNode.getRaw("Type");
        if (type instanceof Ref) {
          type = await xref.fetchAsync(type);
        }
        if (isName(type, "Page") || !currentNode.has("Kids")) {
          if (currentPageIndex === pageIndex) {
            return [currentNode, null];
          }
          currentPageIndex++;
          continue;
        }
        throw new FormatError("Page dictionary kids object is not an array.");
      }
      for (let last = kids.length - 1; last >= 0; last--) {
        const lastKid = kids[last];
        nodesToVisit.push(lastKid);
        if (currentNode === this.toplevelPagesDict && lastKid instanceof Ref && !pageDictCache.has(lastKid)) {
          pageDictCache.put(lastKid, xref.fetchAsync(lastKid));
        }
      }
    }
    throw new Error(\`Page index \${pageIndex} not found.\`);
  }
  async getAllPageDicts(recoveryMode = false) {
    const {
      ignoreErrors
    } = this.pdfManager.evaluatorOptions;
    const queue = [{
      currentNode: this.toplevelPagesDict,
      posInKids: 0
    }];
    const visitedNodes = new RefSet();
    const pagesRef = this._catDict.getRaw("Pages");
    if (pagesRef instanceof Ref) {
      visitedNodes.put(pagesRef);
    }
    const map = new Map(),
      xref = this.xref,
      pageIndexCache = this.pageIndexCache;
    let pageIndex = 0;
    function addPageDict(pageDict, pageRef) {
      if (pageRef && !pageIndexCache.has(pageRef)) {
        pageIndexCache.put(pageRef, pageIndex);
      }
      map.set(pageIndex++, [pageDict, pageRef]);
    }
    function addPageError(error) {
      if (error instanceof XRefEntryException && !recoveryMode) {
        throw error;
      }
      if (recoveryMode && ignoreErrors && pageIndex === 0) {
        warn(\`getAllPageDicts - Skipping invalid first page: "\${error}".\`);
        error = Dict.empty;
      }
      map.set(pageIndex++, [error, null]);
    }
    while (queue.length > 0) {
      const queueItem = queue.at(-1);
      const {
        currentNode,
        posInKids
      } = queueItem;
      let kids = currentNode.getRaw("Kids");
      if (kids instanceof Ref) {
        try {
          kids = await xref.fetchAsync(kids);
        } catch (ex) {
          addPageError(ex);
          break;
        }
      }
      if (!Array.isArray(kids)) {
        addPageError(new FormatError("Page dictionary kids object is not an array."));
        break;
      }
      if (posInKids >= kids.length) {
        queue.pop();
        continue;
      }
      const kidObj = kids[posInKids];
      let obj;
      if (kidObj instanceof Ref) {
        if (visitedNodes.has(kidObj)) {
          addPageError(new FormatError("Pages tree contains circular reference."));
          break;
        }
        visitedNodes.put(kidObj);
        try {
          obj = await xref.fetchAsync(kidObj);
        } catch (ex) {
          addPageError(ex);
          break;
        }
      } else {
        obj = kidObj;
      }
      if (!(obj instanceof Dict)) {
        addPageError(new FormatError("Page dictionary kid reference points to wrong type of object."));
        break;
      }
      let type = obj.getRaw("Type");
      if (type instanceof Ref) {
        try {
          type = await xref.fetchAsync(type);
        } catch (ex) {
          addPageError(ex);
          break;
        }
      }
      if (isName(type, "Page") || !obj.has("Kids")) {
        addPageDict(obj, kidObj instanceof Ref ? kidObj : null);
      } else {
        queue.push({
          currentNode: obj,
          posInKids: 0
        });
      }
      queueItem.posInKids++;
    }
    return map;
  }
  getPageIndex(pageRef) {
    const cachedPageIndex = this.pageIndexCache.get(pageRef);
    if (cachedPageIndex !== undefined) {
      return Promise.resolve(cachedPageIndex);
    }
    const xref = this.xref;
    function pagesBeforeRef(kidRef) {
      let total = 0,
        parentRef;
      return xref.fetchAsync(kidRef).then(function (node) {
        if (isRefsEqual(kidRef, pageRef) && !isDict(node, "Page") && !(node instanceof Dict && !node.has("Type") && node.has("Contents"))) {
          throw new FormatError("The reference does not point to a /Page dictionary.");
        }
        if (!node) {
          return null;
        }
        if (!(node instanceof Dict)) {
          throw new FormatError("Node must be a dictionary.");
        }
        parentRef = node.getRaw("Parent");
        return node.getAsync("Parent");
      }).then(function (parent) {
        if (!parent) {
          return null;
        }
        if (!(parent instanceof Dict)) {
          throw new FormatError("Parent must be a dictionary.");
        }
        return parent.getAsync("Kids");
      }).then(function (kids) {
        if (!kids) {
          return null;
        }
        const kidPromises = [];
        let found = false;
        for (const kid of kids) {
          if (!(kid instanceof Ref)) {
            throw new FormatError("Kid must be a reference.");
          }
          if (isRefsEqual(kid, kidRef)) {
            found = true;
            break;
          }
          kidPromises.push(xref.fetchAsync(kid).then(function (obj) {
            if (!(obj instanceof Dict)) {
              throw new FormatError("Kid node must be a dictionary.");
            }
            if (obj.has("Count")) {
              total += obj.get("Count");
            } else {
              total++;
            }
          }));
        }
        if (!found) {
          throw new FormatError("Kid reference not found in parent's kids.");
        }
        return Promise.all(kidPromises).then(() => [total, parentRef]);
      });
    }
    let total = 0;
    const next = ref => pagesBeforeRef(ref).then(args => {
      if (!args) {
        this.pageIndexCache.put(pageRef, total);
        return total;
      }
      const [count, parentRef] = args;
      total += count;
      return next(parentRef);
    });
    return next(pageRef);
  }
  get baseUrl() {
    const uri = this._catDict.get("URI");
    if (uri instanceof Dict) {
      const base = uri.get("Base");
      if (typeof base === "string") {
        const absoluteUrl = createValidAbsoluteUrl(base, null, {
          tryConvertEncoding: true
        });
        if (absoluteUrl) {
          return shadow(this, "baseUrl", absoluteUrl.href);
        }
      }
    }
    return shadow(this, "baseUrl", this.pdfManager.docBaseUrl);
  }
  static parseDestDictionary({
    destDict,
    resultObj,
    docBaseUrl = null,
    docAttachments = null
  }) {
    if (!(destDict instanceof Dict)) {
      warn("parseDestDictionary: \`destDict\` must be a dictionary.");
      return;
    }
    let action = destDict.get("A"),
      url,
      dest;
    if (!(action instanceof Dict)) {
      if (destDict.has("Dest")) {
        action = destDict.get("Dest");
      } else {
        action = destDict.get("AA");
        if (action instanceof Dict) {
          if (action.has("D")) {
            action = action.get("D");
          } else if (action.has("U")) {
            action = action.get("U");
          }
        }
      }
    }
    if (action instanceof Dict) {
      const actionType = action.get("S");
      if (!(actionType instanceof Name)) {
        warn("parseDestDictionary: Invalid type in Action dictionary.");
        return;
      }
      const actionName = actionType.name;
      switch (actionName) {
        case "ResetForm":
          const flags = action.get("Flags");
          const include = ((typeof flags === "number" ? flags : 0) & 1) === 0;
          const fields = [];
          const refs = [];
          for (const obj of action.get("Fields") || []) {
            if (obj instanceof Ref) {
              refs.push(obj.toString());
            } else if (typeof obj === "string") {
              fields.push(stringToPDFString(obj));
            }
          }
          resultObj.resetForm = {
            fields,
            refs,
            include
          };
          break;
        case "URI":
          url = action.get("URI");
          if (url instanceof Name) {
            url = "/" + url.name;
          }
          break;
        case "GoTo":
          dest = action.get("D");
          break;
        case "Launch":
        case "GoToR":
          const urlDict = action.get("F");
          if (urlDict instanceof Dict) {
            const fs = new FileSpec(urlDict, null, true);
            const {
              rawFilename
            } = fs.serializable;
            url = rawFilename;
          } else if (typeof urlDict === "string") {
            url = urlDict;
          }
          const remoteDest = fetchRemoteDest(action);
          if (remoteDest && typeof url === "string") {
            url = url.split("#", 1)[0] + "#" + remoteDest;
          }
          const newWindow = action.get("NewWindow");
          if (typeof newWindow === "boolean") {
            resultObj.newWindow = newWindow;
          }
          break;
        case "GoToE":
          const target = action.get("T");
          let attachment;
          if (docAttachments && target instanceof Dict) {
            const relationship = target.get("R");
            const name = target.get("N");
            if (isName(relationship, "C") && typeof name === "string") {
              attachment = docAttachments[stringToPDFString(name)];
            }
          }
          if (attachment) {
            resultObj.attachment = attachment;
            const attachmentDest = fetchRemoteDest(action);
            if (attachmentDest) {
              resultObj.attachmentDest = attachmentDest;
            }
          } else {
            warn(\`parseDestDictionary - unimplemented "GoToE" action.\`);
          }
          break;
        case "Named":
          const namedAction = action.get("N");
          if (namedAction instanceof Name) {
            resultObj.action = namedAction.name;
          }
          break;
        case "SetOCGState":
          const state = action.get("State");
          const preserveRB = action.get("PreserveRB");
          if (!Array.isArray(state) || state.length === 0) {
            break;
          }
          const stateArr = [];
          for (const elem of state) {
            if (elem instanceof Name) {
              switch (elem.name) {
                case "ON":
                case "OFF":
                case "Toggle":
                  stateArr.push(elem.name);
                  break;
              }
            } else if (elem instanceof Ref) {
              stateArr.push(elem.toString());
            }
          }
          if (stateArr.length !== state.length) {
            break;
          }
          resultObj.setOCGState = {
            state: stateArr,
            preserveRB: typeof preserveRB === "boolean" ? preserveRB : true
          };
          break;
        case "JavaScript":
          const jsAction = action.get("JS");
          let js;
          if (jsAction instanceof BaseStream) {
            js = jsAction.getString();
          } else if (typeof jsAction === "string") {
            js = jsAction;
          }
          const jsURL = js && recoverJsURL(stringToPDFString(js));
          if (jsURL) {
            url = jsURL.url;
            resultObj.newWindow = jsURL.newWindow;
            break;
          }
        default:
          if (actionName === "JavaScript" || actionName === "SubmitForm") {
            break;
          }
          warn(\`parseDestDictionary - unsupported action: "\${actionName}".\`);
          break;
      }
    } else if (destDict.has("Dest")) {
      dest = destDict.get("Dest");
    }
    if (typeof url === "string") {
      const absoluteUrl = createValidAbsoluteUrl(url, docBaseUrl, {
        addDefaultProtocol: true,
        tryConvertEncoding: true
      });
      if (absoluteUrl) {
        resultObj.url = absoluteUrl.href;
      }
      resultObj.unsafeUrl = url;
    }
    if (dest) {
      if (dest instanceof Name) {
        dest = dest.name;
      }
      if (typeof dest === "string") {
        resultObj.dest = stringToPDFString(dest);
      } else if (isValidExplicitDest(dest)) {
        resultObj.dest = dest;
      }
    }
  }
}

;// ./src/core/object_loader.js




function mayHaveChildren(value) {
  return value instanceof Ref || value instanceof Dict || value instanceof BaseStream || Array.isArray(value);
}
function addChildren(node, nodesToVisit) {
  if (node instanceof Dict) {
    node = node.getRawValues();
  } else if (node instanceof BaseStream) {
    node = node.dict.getRawValues();
  } else if (!Array.isArray(node)) {
    return;
  }
  for (const rawValue of node) {
    if (mayHaveChildren(rawValue)) {
      nodesToVisit.push(rawValue);
    }
  }
}
class ObjectLoader {
  constructor(dict, keys, xref) {
    this.dict = dict;
    this.keys = keys;
    this.xref = xref;
    this.refSet = null;
  }
  async load() {
    if (this.xref.stream.isDataLoaded) {
      return undefined;
    }
    const {
      keys,
      dict
    } = this;
    this.refSet = new RefSet();
    const nodesToVisit = [];
    for (const key of keys) {
      const rawValue = dict.getRaw(key);
      if (rawValue !== undefined) {
        nodesToVisit.push(rawValue);
      }
    }
    return this._walk(nodesToVisit);
  }
  async _walk(nodesToVisit) {
    const nodesToRevisit = [];
    const pendingRequests = [];
    while (nodesToVisit.length) {
      let currentNode = nodesToVisit.pop();
      if (currentNode instanceof Ref) {
        if (this.refSet.has(currentNode)) {
          continue;
        }
        try {
          this.refSet.put(currentNode);
          currentNode = this.xref.fetch(currentNode);
        } catch (ex) {
          if (!(ex instanceof MissingDataException)) {
            warn(\`ObjectLoader._walk - requesting all data: "\${ex}".\`);
            this.refSet = null;
            const {
              manager
            } = this.xref.stream;
            return manager.requestAllChunks();
          }
          nodesToRevisit.push(currentNode);
          pendingRequests.push({
            begin: ex.begin,
            end: ex.end
          });
        }
      }
      if (currentNode instanceof BaseStream) {
        const baseStreams = currentNode.getBaseStreams();
        if (baseStreams) {
          let foundMissingData = false;
          for (const stream of baseStreams) {
            if (stream.isDataLoaded) {
              continue;
            }
            foundMissingData = true;
            pendingRequests.push({
              begin: stream.start,
              end: stream.end
            });
          }
          if (foundMissingData) {
            nodesToRevisit.push(currentNode);
          }
        }
      }
      addChildren(currentNode, nodesToVisit);
    }
    if (pendingRequests.length) {
      await this.xref.stream.manager.requestRanges(pendingRequests);
      for (const node of nodesToRevisit) {
        if (node instanceof Ref) {
          this.refSet.remove(node);
        }
      }
      return this._walk(nodesToRevisit);
    }
    this.refSet = null;
    return undefined;
  }
}

;// ./src/core/xfa/symbol_utils.js
const $acceptWhitespace = Symbol();
const $addHTML = Symbol();
const $appendChild = Symbol();
const $childrenToHTML = Symbol();
const $clean = Symbol();
const $cleanPage = Symbol();
const $cleanup = Symbol();
const $clone = Symbol();
const $consumed = Symbol();
const $content = Symbol("content");
const $data = Symbol("data");
const $dump = Symbol();
const $extra = Symbol("extra");
const $finalize = Symbol();
const $flushHTML = Symbol();
const $getAttributeIt = Symbol();
const $getAttributes = Symbol();
const $getAvailableSpace = Symbol();
const $getChildrenByClass = Symbol();
const $getChildrenByName = Symbol();
const $getChildrenByNameIt = Symbol();
const $getDataValue = Symbol();
const $getExtra = Symbol();
const $getRealChildrenByNameIt = Symbol();
const $getChildren = Symbol();
const $getContainedChildren = Symbol();
const $getNextPage = Symbol();
const $getSubformParent = Symbol();
const $getParent = Symbol();
const $getTemplateRoot = Symbol();
const $globalData = Symbol();
const $hasSettableValue = Symbol();
const $ids = Symbol();
const $indexOf = Symbol();
const $insertAt = Symbol();
const $isCDATAXml = Symbol();
const $isBindable = Symbol();
const $isDataValue = Symbol();
const $isDescendent = Symbol();
const $isNsAgnostic = Symbol();
const $isSplittable = Symbol();
const $isThereMoreWidth = Symbol();
const $isTransparent = Symbol();
const $isUsable = Symbol();
const $lastAttribute = Symbol();
const $namespaceId = Symbol("namespaceId");
const $nodeName = Symbol("nodeName");
const $nsAttributes = Symbol();
const $onChild = Symbol();
const $onChildCheck = Symbol();
const $onText = Symbol();
const $pushGlyphs = Symbol();
const $popPara = Symbol();
const $pushPara = Symbol();
const $removeChild = Symbol();
const $root = Symbol("root");
const $resolvePrototypes = Symbol();
const $searchNode = Symbol();
const $setId = Symbol();
const $setSetAttributes = Symbol();
const $setValue = Symbol();
const $tabIndex = Symbol();
const $text = Symbol();
const $toPages = Symbol();
const $toHTML = Symbol();
const $toString = Symbol();
const $toStyle = Symbol();
const $uid = Symbol("uid");

;// ./src/core/xfa/namespaces.js
const $buildXFAObject = Symbol();
const NamespaceIds = {
  config: {
    id: 0,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xci/")
  },
  connectionSet: {
    id: 1,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xfa-connection-set/")
  },
  datasets: {
    id: 2,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xfa-data/")
  },
  form: {
    id: 3,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xfa-form/")
  },
  localeSet: {
    id: 4,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xfa-locale-set/")
  },
  pdf: {
    id: 5,
    check: ns => ns === "http://ns.adobe.com/xdp/pdf/"
  },
  signature: {
    id: 6,
    check: ns => ns === "http://www.w3.org/2000/09/xmldsig#"
  },
  sourceSet: {
    id: 7,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xfa-source-set/")
  },
  stylesheet: {
    id: 8,
    check: ns => ns === "http://www.w3.org/1999/XSL/Transform"
  },
  template: {
    id: 9,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xfa-template/")
  },
  xdc: {
    id: 10,
    check: ns => ns.startsWith("http://www.xfa.org/schema/xdc/")
  },
  xdp: {
    id: 11,
    check: ns => ns === "http://ns.adobe.com/xdp/"
  },
  xfdf: {
    id: 12,
    check: ns => ns === "http://ns.adobe.com/xfdf/"
  },
  xhtml: {
    id: 13,
    check: ns => ns === "http://www.w3.org/1999/xhtml"
  },
  xmpmeta: {
    id: 14,
    check: ns => ns === "http://ns.adobe.com/xmpmeta/"
  }
};

;// ./src/core/xfa/utils.js

const dimConverters = {
  pt: x => x,
  cm: x => x / 2.54 * 72,
  mm: x => x / (10 * 2.54) * 72,
  in: x => x * 72,
  px: x => x
};
const measurementPattern = /([+-]?\\d+\\.?\\d*)(.*)/;
function stripQuotes(str) {
  if (str.startsWith("'") || str.startsWith('"')) {
    return str.slice(1, -1);
  }
  return str;
}
function getInteger({
  data,
  defaultValue,
  validate
}) {
  if (!data) {
    return defaultValue;
  }
  data = data.trim();
  const n = parseInt(data, 10);
  if (!isNaN(n) && validate(n)) {
    return n;
  }
  return defaultValue;
}
function getFloat({
  data,
  defaultValue,
  validate
}) {
  if (!data) {
    return defaultValue;
  }
  data = data.trim();
  const n = parseFloat(data);
  if (!isNaN(n) && validate(n)) {
    return n;
  }
  return defaultValue;
}
function getKeyword({
  data,
  defaultValue,
  validate
}) {
  if (!data) {
    return defaultValue;
  }
  data = data.trim();
  if (validate(data)) {
    return data;
  }
  return defaultValue;
}
function getStringOption(data, options) {
  return getKeyword({
    data,
    defaultValue: options[0],
    validate: k => options.includes(k)
  });
}
function getMeasurement(str, def = "0") {
  def ||= "0";
  if (!str) {
    return getMeasurement(def);
  }
  const match = str.trim().match(measurementPattern);
  if (!match) {
    return getMeasurement(def);
  }
  const [, valueStr, unit] = match;
  const value = parseFloat(valueStr);
  if (isNaN(value)) {
    return getMeasurement(def);
  }
  if (value === 0) {
    return 0;
  }
  const conv = dimConverters[unit];
  if (conv) {
    return conv(value);
  }
  return value;
}
function getRatio(data) {
  if (!data) {
    return {
      num: 1,
      den: 1
    };
  }
  const ratio = data.split(":", 2).map(x => parseFloat(x.trim())).filter(x => !isNaN(x));
  if (ratio.length === 1) {
    ratio.push(1);
  }
  if (ratio.length === 0) {
    return {
      num: 1,
      den: 1
    };
  }
  const [num, den] = ratio;
  return {
    num,
    den
  };
}
function getRelevant(data) {
  if (!data) {
    return [];
  }
  return data.trim().split(/\\s+/).map(e => ({
    excluded: e[0] === "-",
    viewname: e.substring(1)
  }));
}
function getColor(data, def = [0, 0, 0]) {
  let [r, g, b] = def;
  if (!data) {
    return {
      r,
      g,
      b
    };
  }
  const color = data.split(",", 3).map(c => MathClamp(parseInt(c.trim(), 10), 0, 255)).map(c => isNaN(c) ? 0 : c);
  if (color.length < 3) {
    return {
      r,
      g,
      b
    };
  }
  [r, g, b] = color;
  return {
    r,
    g,
    b
  };
}
function getBBox(data) {
  const def = -1;
  if (!data) {
    return {
      x: def,
      y: def,
      width: def,
      height: def
    };
  }
  const bbox = data.split(",", 4).map(m => getMeasurement(m.trim(), "-1"));
  if (bbox.length < 4 || bbox[2] < 0 || bbox[3] < 0) {
    return {
      x: def,
      y: def,
      width: def,
      height: def
    };
  }
  const [x, y, width, height] = bbox;
  return {
    x,
    y,
    width,
    height
  };
}
class HTMLResult {
  static get FAILURE() {
    return shadow(this, "FAILURE", new HTMLResult(false, null, null, null));
  }
  static get EMPTY() {
    return shadow(this, "EMPTY", new HTMLResult(true, null, null, null));
  }
  constructor(success, html, bbox, breakNode) {
    this.success = success;
    this.html = html;
    this.bbox = bbox;
    this.breakNode = breakNode;
  }
  isBreak() {
    return !!this.breakNode;
  }
  static breakNode(node) {
    return new HTMLResult(false, null, null, node);
  }
  static success(html, bbox = null) {
    return new HTMLResult(true, html, bbox, null);
  }
}

;// ./src/core/xfa/fonts.js



class FontFinder {
  constructor(pdfFonts) {
    this.fonts = new Map();
    this.cache = new Map();
    this.warned = new Set();
    this.defaultFont = null;
    this.add(pdfFonts);
  }
  add(pdfFonts, reallyMissingFonts = null) {
    for (const pdfFont of pdfFonts) {
      this.addPdfFont(pdfFont);
    }
    for (const pdfFont of this.fonts.values()) {
      if (!pdfFont.regular) {
        pdfFont.regular = pdfFont.italic || pdfFont.bold || pdfFont.bolditalic;
      }
    }
    if (!reallyMissingFonts || reallyMissingFonts.size === 0) {
      return;
    }
    const myriad = this.fonts.get("PdfJS-Fallback-PdfJS-XFA");
    for (const missing of reallyMissingFonts) {
      this.fonts.set(missing, myriad);
    }
  }
  addPdfFont(pdfFont) {
    const cssFontInfo = pdfFont.cssFontInfo;
    const name = cssFontInfo.fontFamily;
    let font = this.fonts.get(name);
    if (!font) {
      font = Object.create(null);
      this.fonts.set(name, font);
      if (!this.defaultFont) {
        this.defaultFont = font;
      }
    }
    let property = "";
    const fontWeight = parseFloat(cssFontInfo.fontWeight);
    if (parseFloat(cssFontInfo.italicAngle) !== 0) {
      property = fontWeight >= 700 ? "bolditalic" : "italic";
    } else if (fontWeight >= 700) {
      property = "bold";
    }
    if (!property) {
      if (pdfFont.name.includes("Bold") || pdfFont.psName?.includes("Bold")) {
        property = "bold";
      }
      if (pdfFont.name.includes("Italic") || pdfFont.name.endsWith("It") || pdfFont.psName?.includes("Italic") || pdfFont.psName?.endsWith("It")) {
        property += "italic";
      }
    }
    if (!property) {
      property = "regular";
    }
    font[property] = pdfFont;
  }
  getDefault() {
    return this.defaultFont;
  }
  find(fontName, mustWarn = true) {
    let font = this.fonts.get(fontName) || this.cache.get(fontName);
    if (font) {
      return font;
    }
    const pattern = /,|-|_| |bolditalic|bold|italic|regular|it/gi;
    let name = fontName.replaceAll(pattern, "");
    font = this.fonts.get(name);
    if (font) {
      this.cache.set(fontName, font);
      return font;
    }
    name = name.toLowerCase();
    const maybe = [];
    for (const [family, pdfFont] of this.fonts.entries()) {
      if (family.replaceAll(pattern, "").toLowerCase().startsWith(name)) {
        maybe.push(pdfFont);
      }
    }
    if (maybe.length === 0) {
      for (const [, pdfFont] of this.fonts.entries()) {
        if (pdfFont.regular.name?.replaceAll(pattern, "").toLowerCase().startsWith(name)) {
          maybe.push(pdfFont);
        }
      }
    }
    if (maybe.length === 0) {
      name = name.replaceAll(/psmt|mt/gi, "");
      for (const [family, pdfFont] of this.fonts.entries()) {
        if (family.replaceAll(pattern, "").toLowerCase().startsWith(name)) {
          maybe.push(pdfFont);
        }
      }
    }
    if (maybe.length === 0) {
      for (const pdfFont of this.fonts.values()) {
        if (pdfFont.regular.name?.replaceAll(pattern, "").toLowerCase().startsWith(name)) {
          maybe.push(pdfFont);
        }
      }
    }
    if (maybe.length >= 1) {
      if (maybe.length !== 1 && mustWarn) {
        warn(\`XFA - Too many choices to guess the correct font: \${fontName}\`);
      }
      this.cache.set(fontName, maybe[0]);
      return maybe[0];
    }
    if (mustWarn && !this.warned.has(fontName)) {
      this.warned.add(fontName);
      warn(\`XFA - Cannot find the font: \${fontName}\`);
    }
    return null;
  }
}
function selectFont(xfaFont, typeface) {
  if (xfaFont.posture === "italic") {
    if (xfaFont.weight === "bold") {
      return typeface.bolditalic;
    }
    return typeface.italic;
  } else if (xfaFont.weight === "bold") {
    return typeface.bold;
  }
  return typeface.regular;
}
function fonts_getMetrics(xfaFont, real = false) {
  let pdfFont = null;
  if (xfaFont) {
    const name = stripQuotes(xfaFont.typeface);
    const typeface = xfaFont[$globalData].fontFinder.find(name);
    pdfFont = selectFont(xfaFont, typeface);
  }
  if (!pdfFont) {
    return {
      lineHeight: 12,
      lineGap: 2,
      lineNoGap: 10
    };
  }
  const size = xfaFont.size || 10;
  const lineHeight = pdfFont.lineHeight ? Math.max(real ? 0 : 1.2, pdfFont.lineHeight) : 1.2;
  const lineGap = pdfFont.lineGap === undefined ? 0.2 : pdfFont.lineGap;
  return {
    lineHeight: lineHeight * size,
    lineGap: lineGap * size,
    lineNoGap: Math.max(1, lineHeight - lineGap) * size
  };
}

;// ./src/core/xfa/text.js

const WIDTH_FACTOR = 1.02;
class FontInfo {
  constructor(xfaFont, margin, lineHeight, fontFinder) {
    this.lineHeight = lineHeight;
    this.paraMargin = margin || {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    };
    if (!xfaFont) {
      [this.pdfFont, this.xfaFont] = this.defaultFont(fontFinder);
      return;
    }
    this.xfaFont = {
      typeface: xfaFont.typeface,
      posture: xfaFont.posture,
      weight: xfaFont.weight,
      size: xfaFont.size,
      letterSpacing: xfaFont.letterSpacing
    };
    const typeface = fontFinder.find(xfaFont.typeface);
    if (!typeface) {
      [this.pdfFont, this.xfaFont] = this.defaultFont(fontFinder);
      return;
    }
    this.pdfFont = selectFont(xfaFont, typeface);
    if (!this.pdfFont) {
      [this.pdfFont, this.xfaFont] = this.defaultFont(fontFinder);
    }
  }
  defaultFont(fontFinder) {
    const font = fontFinder.find("Helvetica", false) || fontFinder.find("Myriad Pro", false) || fontFinder.find("Arial", false) || fontFinder.getDefault();
    if (font?.regular) {
      const pdfFont = font.regular;
      const info = pdfFont.cssFontInfo;
      const xfaFont = {
        typeface: info.fontFamily,
        posture: "normal",
        weight: "normal",
        size: 10,
        letterSpacing: 0
      };
      return [pdfFont, xfaFont];
    }
    const xfaFont = {
      typeface: "Courier",
      posture: "normal",
      weight: "normal",
      size: 10,
      letterSpacing: 0
    };
    return [null, xfaFont];
  }
}
class FontSelector {
  constructor(defaultXfaFont, defaultParaMargin, defaultLineHeight, fontFinder) {
    this.fontFinder = fontFinder;
    this.stack = [new FontInfo(defaultXfaFont, defaultParaMargin, defaultLineHeight, fontFinder)];
  }
  pushData(xfaFont, margin, lineHeight) {
    const lastFont = this.stack.at(-1);
    for (const name of ["typeface", "posture", "weight", "size", "letterSpacing"]) {
      if (!xfaFont[name]) {
        xfaFont[name] = lastFont.xfaFont[name];
      }
    }
    for (const name of ["top", "bottom", "left", "right"]) {
      if (isNaN(margin[name])) {
        margin[name] = lastFont.paraMargin[name];
      }
    }
    const fontInfo = new FontInfo(xfaFont, margin, lineHeight || lastFont.lineHeight, this.fontFinder);
    if (!fontInfo.pdfFont) {
      fontInfo.pdfFont = lastFont.pdfFont;
    }
    this.stack.push(fontInfo);
  }
  popFont() {
    this.stack.pop();
  }
  topFont() {
    return this.stack.at(-1);
  }
}
class TextMeasure {
  constructor(defaultXfaFont, defaultParaMargin, defaultLineHeight, fonts) {
    this.glyphs = [];
    this.fontSelector = new FontSelector(defaultXfaFont, defaultParaMargin, defaultLineHeight, fonts);
    this.extraHeight = 0;
  }
  pushData(xfaFont, margin, lineHeight) {
    this.fontSelector.pushData(xfaFont, margin, lineHeight);
  }
  popFont(xfaFont) {
    return this.fontSelector.popFont();
  }
  addPara() {
    const lastFont = this.fontSelector.topFont();
    this.extraHeight += lastFont.paraMargin.top + lastFont.paraMargin.bottom;
  }
  addString(str) {
    if (!str) {
      return;
    }
    const lastFont = this.fontSelector.topFont();
    const fontSize = lastFont.xfaFont.size;
    if (lastFont.pdfFont) {
      const letterSpacing = lastFont.xfaFont.letterSpacing;
      const pdfFont = lastFont.pdfFont;
      const fontLineHeight = pdfFont.lineHeight || 1.2;
      const lineHeight = lastFont.lineHeight || Math.max(1.2, fontLineHeight) * fontSize;
      const lineGap = pdfFont.lineGap === undefined ? 0.2 : pdfFont.lineGap;
      const noGap = fontLineHeight - lineGap;
      const firstLineHeight = Math.max(1, noGap) * fontSize;
      const scale = fontSize / 1000;
      const fallbackWidth = pdfFont.defaultWidth || pdfFont.charsToGlyphs(" ")[0].width;
      for (const line of str.split(/[\\u2029\\n]/)) {
        const encodedLine = pdfFont.encodeString(line).join("");
        const glyphs = pdfFont.charsToGlyphs(encodedLine);
        for (const glyph of glyphs) {
          const width = glyph.width || fallbackWidth;
          this.glyphs.push([width * scale + letterSpacing, lineHeight, firstLineHeight, glyph.unicode, false]);
        }
        this.glyphs.push([0, 0, 0, "\\n", true]);
      }
      this.glyphs.pop();
      return;
    }
    for (const line of str.split(/[\\u2029\\n]/)) {
      for (const char of line.split("")) {
        this.glyphs.push([fontSize, 1.2 * fontSize, fontSize, char, false]);
      }
      this.glyphs.push([0, 0, 0, "\\n", true]);
    }
    this.glyphs.pop();
  }
  compute(maxWidth) {
    let lastSpacePos = -1,
      lastSpaceWidth = 0,
      width = 0,
      height = 0,
      currentLineWidth = 0,
      currentLineHeight = 0;
    let isBroken = false;
    let isFirstLine = true;
    for (let i = 0, ii = this.glyphs.length; i < ii; i++) {
      const [glyphWidth, lineHeight, firstLineHeight, char, isEOL] = this.glyphs[i];
      const isSpace = char === " ";
      const glyphHeight = isFirstLine ? firstLineHeight : lineHeight;
      if (isEOL) {
        width = Math.max(width, currentLineWidth);
        currentLineWidth = 0;
        height += currentLineHeight;
        currentLineHeight = glyphHeight;
        lastSpacePos = -1;
        lastSpaceWidth = 0;
        isFirstLine = false;
        continue;
      }
      if (isSpace) {
        if (currentLineWidth + glyphWidth > maxWidth) {
          width = Math.max(width, currentLineWidth);
          currentLineWidth = 0;
          height += currentLineHeight;
          currentLineHeight = glyphHeight;
          lastSpacePos = -1;
          lastSpaceWidth = 0;
          isBroken = true;
          isFirstLine = false;
        } else {
          currentLineHeight = Math.max(glyphHeight, currentLineHeight);
          lastSpaceWidth = currentLineWidth;
          currentLineWidth += glyphWidth;
          lastSpacePos = i;
        }
        continue;
      }
      if (currentLineWidth + glyphWidth > maxWidth) {
        height += currentLineHeight;
        currentLineHeight = glyphHeight;
        if (lastSpacePos !== -1) {
          i = lastSpacePos;
          width = Math.max(width, lastSpaceWidth);
          currentLineWidth = 0;
          lastSpacePos = -1;
          lastSpaceWidth = 0;
        } else {
          width = Math.max(width, currentLineWidth);
          currentLineWidth = glyphWidth;
        }
        isBroken = true;
        isFirstLine = false;
        continue;
      }
      currentLineWidth += glyphWidth;
      currentLineHeight = Math.max(glyphHeight, currentLineHeight);
    }
    width = Math.max(width, currentLineWidth);
    height += currentLineHeight + this.extraHeight;
    return {
      width: WIDTH_FACTOR * width,
      height,
      isBroken
    };
  }
}

;// ./src/core/xfa/som.js


const namePattern = /^[^.[]+/;
const indexPattern = /^[^\\]]+/;
const operators = {
  dot: 0,
  dotDot: 1,
  dotHash: 2,
  dotBracket: 3,
  dotParen: 4
};
const shortcuts = new Map([["$data", (root, current) => root.datasets ? root.datasets.data : root], ["$record", (root, current) => (root.datasets ? root.datasets.data : root)[$getChildren]()[0]], ["$template", (root, current) => root.template], ["$connectionSet", (root, current) => root.connectionSet], ["$form", (root, current) => root.form], ["$layout", (root, current) => root.layout], ["$host", (root, current) => root.host], ["$dataWindow", (root, current) => root.dataWindow], ["$event", (root, current) => root.event], ["!", (root, current) => root.datasets], ["$xfa", (root, current) => root], ["xfa", (root, current) => root], ["$", (root, current) => current]]);
const somCache = new WeakMap();
function parseIndex(index) {
  index = index.trim();
  if (index === "*") {
    return Infinity;
  }
  return parseInt(index, 10) || 0;
}
function parseExpression(expr, dotDotAllowed, noExpr = true) {
  let match = expr.match(namePattern);
  if (!match) {
    return null;
  }
  let [name] = match;
  const parsed = [{
    name,
    cacheName: "." + name,
    index: 0,
    js: null,
    formCalc: null,
    operator: operators.dot
  }];
  let pos = name.length;
  while (pos < expr.length) {
    const spos = pos;
    const char = expr.charAt(pos++);
    if (char === "[") {
      match = expr.slice(pos).match(indexPattern);
      if (!match) {
        warn("XFA - Invalid index in SOM expression");
        return null;
      }
      parsed.at(-1).index = parseIndex(match[0]);
      pos += match[0].length + 1;
      continue;
    }
    let operator;
    switch (expr.charAt(pos)) {
      case ".":
        if (!dotDotAllowed) {
          return null;
        }
        pos++;
        operator = operators.dotDot;
        break;
      case "#":
        pos++;
        operator = operators.dotHash;
        break;
      case "[":
        if (noExpr) {
          warn("XFA - SOM expression contains a FormCalc subexpression which is not supported for now.");
          return null;
        }
        operator = operators.dotBracket;
        break;
      case "(":
        if (noExpr) {
          warn("XFA - SOM expression contains a JavaScript subexpression which is not supported for now.");
          return null;
        }
        operator = operators.dotParen;
        break;
      default:
        operator = operators.dot;
        break;
    }
    match = expr.slice(pos).match(namePattern);
    if (!match) {
      break;
    }
    [name] = match;
    pos += name.length;
    parsed.push({
      name,
      cacheName: expr.slice(spos, pos),
      operator,
      index: 0,
      js: null,
      formCalc: null
    });
  }
  return parsed;
}
function searchNode(root, container, expr, dotDotAllowed = true, useCache = true) {
  const parsed = parseExpression(expr, dotDotAllowed);
  if (!parsed) {
    return null;
  }
  const fn = shortcuts.get(parsed[0].name);
  let i = 0;
  let isQualified;
  if (fn) {
    isQualified = true;
    root = [fn(root, container)];
    i = 1;
  } else {
    isQualified = container === null;
    root = [container || root];
  }
  for (let ii = parsed.length; i < ii; i++) {
    const {
      name,
      cacheName,
      operator,
      index
    } = parsed[i];
    const nodes = [];
    for (const node of root) {
      if (!node.isXFAObject) {
        continue;
      }
      let children, cached;
      if (useCache) {
        cached = somCache.get(node);
        if (!cached) {
          cached = new Map();
          somCache.set(node, cached);
        }
        children = cached.get(cacheName);
      }
      if (!children) {
        switch (operator) {
          case operators.dot:
            children = node[$getChildrenByName](name, false);
            break;
          case operators.dotDot:
            children = node[$getChildrenByName](name, true);
            break;
          case operators.dotHash:
            children = node[$getChildrenByClass](name);
            children = children.isXFAObjectArray ? children.children : [children];
            break;
          default:
            break;
        }
        if (useCache) {
          cached.set(cacheName, children);
        }
      }
      if (children.length > 0) {
        nodes.push(children);
      }
    }
    if (nodes.length === 0 && !isQualified && i === 0) {
      const parent = container[$getParent]();
      container = parent;
      if (!container) {
        return null;
      }
      i = -1;
      root = [container];
      continue;
    }
    root = isFinite(index) ? nodes.filter(node => index < node.length).map(node => node[index]) : nodes.flat();
  }
  if (root.length === 0) {
    return null;
  }
  return root;
}
function createDataNode(root, container, expr) {
  const parsed = parseExpression(expr);
  if (!parsed) {
    return null;
  }
  if (parsed.some(x => x.operator === operators.dotDot)) {
    return null;
  }
  const fn = shortcuts.get(parsed[0].name);
  let i = 0;
  if (fn) {
    root = fn(root, container);
    i = 1;
  } else {
    root = container || root;
  }
  for (let ii = parsed.length; i < ii; i++) {
    const {
      name,
      operator,
      index
    } = parsed[i];
    if (!isFinite(index)) {
      parsed[i].index = 0;
      return root.createNodes(parsed.slice(i));
    }
    let children;
    switch (operator) {
      case operators.dot:
        children = root[$getChildrenByName](name, false);
        break;
      case operators.dotDot:
        children = root[$getChildrenByName](name, true);
        break;
      case operators.dotHash:
        children = root[$getChildrenByClass](name);
        children = children.isXFAObjectArray ? children.children : [children];
        break;
      default:
        break;
    }
    if (children.length === 0) {
      return root.createNodes(parsed.slice(i));
    }
    if (index < children.length) {
      const child = children[index];
      if (!child.isXFAObject) {
        warn(\`XFA - Cannot create a node.\`);
        return null;
      }
      root = child;
    } else {
      parsed[i].index = index - children.length;
      return root.createNodes(parsed.slice(i));
    }
  }
  return null;
}

;// ./src/core/xfa/xfa_object.js






const _applyPrototype = Symbol();
const _attributes = Symbol();
const _attributeNames = Symbol();
const _children = Symbol("_children");
const _cloneAttribute = Symbol();
const _dataValue = Symbol();
const _defaultValue = Symbol();
const _filteredChildrenGenerator = Symbol();
const _getPrototype = Symbol();
const _getUnsetAttributes = Symbol();
const _hasChildren = Symbol();
const _max = Symbol();
const _options = Symbol();
const _parent = Symbol("parent");
const _resolvePrototypesHelper = Symbol();
const _setAttributes = Symbol();
const _validator = Symbol();
let uid = 0;
const NS_DATASETS = NamespaceIds.datasets.id;
class XFAObject {
  constructor(nsId, name, hasChildren = false) {
    this[$namespaceId] = nsId;
    this[$nodeName] = name;
    this[_hasChildren] = hasChildren;
    this[_parent] = null;
    this[_children] = [];
    this[$uid] = \`\${name}\${uid++}\`;
    this[$globalData] = null;
  }
  get isXFAObject() {
    return true;
  }
  get isXFAObjectArray() {
    return false;
  }
  createNodes(path) {
    let root = this,
      node = null;
    for (const {
      name,
      index
    } of path) {
      for (let i = 0, ii = isFinite(index) ? index : 0; i <= ii; i++) {
        const nsId = root[$namespaceId] === NS_DATASETS ? -1 : root[$namespaceId];
        node = new XmlObject(nsId, name);
        root[$appendChild](node);
      }
      root = node;
    }
    return node;
  }
  [$onChild](child) {
    if (!this[_hasChildren] || !this[$onChildCheck](child)) {
      return false;
    }
    const name = child[$nodeName];
    const node = this[name];
    if (node instanceof XFAObjectArray) {
      if (node.push(child)) {
        this[$appendChild](child);
        return true;
      }
    } else {
      if (node !== null) {
        this[$removeChild](node);
      }
      this[name] = child;
      this[$appendChild](child);
      return true;
    }
    let id = "";
    if (this.id) {
      id = \` (id: \${this.id})\`;
    } else if (this.name) {
      id = \` (name: \${this.name} \${this.h.value})\`;
    }
    warn(\`XFA - node "\${this[$nodeName]}"\${id} has already enough "\${name}"!\`);
    return false;
  }
  [$onChildCheck](child) {
    return this.hasOwnProperty(child[$nodeName]) && child[$namespaceId] === this[$namespaceId];
  }
  [$isNsAgnostic]() {
    return false;
  }
  [$acceptWhitespace]() {
    return false;
  }
  [$isCDATAXml]() {
    return false;
  }
  [$isBindable]() {
    return false;
  }
  [$popPara]() {
    if (this.para) {
      this[$getTemplateRoot]()[$extra].paraStack.pop();
    }
  }
  [$pushPara]() {
    this[$getTemplateRoot]()[$extra].paraStack.push(this.para);
  }
  [$setId](ids) {
    if (this.id && this[$namespaceId] === NamespaceIds.template.id) {
      ids.set(this.id, this);
    }
  }
  [$getTemplateRoot]() {
    return this[$globalData].template;
  }
  [$isSplittable]() {
    return false;
  }
  [$isThereMoreWidth]() {
    return false;
  }
  [$appendChild](child) {
    child[_parent] = this;
    this[_children].push(child);
    if (!child[$globalData] && this[$globalData]) {
      child[$globalData] = this[$globalData];
    }
  }
  [$removeChild](child) {
    const i = this[_children].indexOf(child);
    this[_children].splice(i, 1);
  }
  [$hasSettableValue]() {
    return this.hasOwnProperty("value");
  }
  [$setValue](_) {}
  [$onText](_) {}
  [$finalize]() {}
  [$clean](builder) {
    delete this[_hasChildren];
    if (this[$cleanup]) {
      builder.clean(this[$cleanup]);
      delete this[$cleanup];
    }
  }
  [$indexOf](child) {
    return this[_children].indexOf(child);
  }
  [$insertAt](i, child) {
    child[_parent] = this;
    this[_children].splice(i, 0, child);
    if (!child[$globalData] && this[$globalData]) {
      child[$globalData] = this[$globalData];
    }
  }
  [$isTransparent]() {
    return !this.name;
  }
  [$lastAttribute]() {
    return "";
  }
  [$text]() {
    if (this[_children].length === 0) {
      return this[$content];
    }
    return this[_children].map(c => c[$text]()).join("");
  }
  get [_attributeNames]() {
    const proto = Object.getPrototypeOf(this);
    if (!proto._attributes) {
      const attributes = proto._attributes = new Set();
      for (const name of Object.getOwnPropertyNames(this)) {
        if (this[name] === null || this[name] instanceof XFAObject || this[name] instanceof XFAObjectArray) {
          break;
        }
        attributes.add(name);
      }
    }
    return shadow(this, _attributeNames, proto._attributes);
  }
  [$isDescendent](parent) {
    let node = this;
    while (node) {
      if (node === parent) {
        return true;
      }
      node = node[$getParent]();
    }
    return false;
  }
  [$getParent]() {
    return this[_parent];
  }
  [$getSubformParent]() {
    return this[$getParent]();
  }
  [$getChildren](name = null) {
    if (!name) {
      return this[_children];
    }
    return this[name];
  }
  [$dump]() {
    const dumped = Object.create(null);
    if (this[$content]) {
      dumped.$content = this[$content];
    }
    for (const name of Object.getOwnPropertyNames(this)) {
      const value = this[name];
      if (value === null) {
        continue;
      }
      if (value instanceof XFAObject) {
        dumped[name] = value[$dump]();
      } else if (value instanceof XFAObjectArray) {
        if (!value.isEmpty()) {
          dumped[name] = value.dump();
        }
      } else {
        dumped[name] = value;
      }
    }
    return dumped;
  }
  [$toStyle]() {
    return null;
  }
  [$toHTML]() {
    return HTMLResult.EMPTY;
  }
  *[$getContainedChildren]() {
    for (const node of this[$getChildren]()) {
      yield node;
    }
  }
  *[_filteredChildrenGenerator](filter, include) {
    for (const node of this[$getContainedChildren]()) {
      if (!filter || include === filter.has(node[$nodeName])) {
        const availableSpace = this[$getAvailableSpace]();
        const res = node[$toHTML](availableSpace);
        if (!res.success) {
          this[$extra].failingNode = node;
        }
        yield res;
      }
    }
  }
  [$flushHTML]() {
    return null;
  }
  [$addHTML](html, bbox) {
    this[$extra].children.push(html);
  }
  [$getAvailableSpace]() {}
  [$childrenToHTML]({
    filter = null,
    include = true
  }) {
    if (!this[$extra].generator) {
      this[$extra].generator = this[_filteredChildrenGenerator](filter, include);
    } else {
      const availableSpace = this[$getAvailableSpace]();
      const res = this[$extra].failingNode[$toHTML](availableSpace);
      if (!res.success) {
        return res;
      }
      if (res.html) {
        this[$addHTML](res.html, res.bbox);
      }
      delete this[$extra].failingNode;
    }
    while (true) {
      const gen = this[$extra].generator.next();
      if (gen.done) {
        break;
      }
      const res = gen.value;
      if (!res.success) {
        return res;
      }
      if (res.html) {
        this[$addHTML](res.html, res.bbox);
      }
    }
    this[$extra].generator = null;
    return HTMLResult.EMPTY;
  }
  [$setSetAttributes](attributes) {
    this[_setAttributes] = new Set(Object.keys(attributes));
  }
  [_getUnsetAttributes](protoAttributes) {
    const allAttr = this[_attributeNames];
    const setAttr = this[_setAttributes];
    return [...protoAttributes].filter(x => allAttr.has(x) && !setAttr.has(x));
  }
  [$resolvePrototypes](ids, ancestors = new Set()) {
    for (const child of this[_children]) {
      child[_resolvePrototypesHelper](ids, ancestors);
    }
  }
  [_resolvePrototypesHelper](ids, ancestors) {
    const proto = this[_getPrototype](ids, ancestors);
    if (proto) {
      this[_applyPrototype](proto, ids, ancestors);
    } else {
      this[$resolvePrototypes](ids, ancestors);
    }
  }
  [_getPrototype](ids, ancestors) {
    const {
      use,
      usehref
    } = this;
    if (!use && !usehref) {
      return null;
    }
    let proto = null;
    let somExpression = null;
    let id = null;
    let ref = use;
    if (usehref) {
      ref = usehref;
      if (usehref.startsWith("#som(") && usehref.endsWith(")")) {
        somExpression = usehref.slice("#som(".length, -1);
      } else if (usehref.startsWith(".#som(") && usehref.endsWith(")")) {
        somExpression = usehref.slice(".#som(".length, -1);
      } else if (usehref.startsWith("#")) {
        id = usehref.slice(1);
      } else if (usehref.startsWith(".#")) {
        id = usehref.slice(2);
      }
    } else if (use.startsWith("#")) {
      id = use.slice(1);
    } else {
      somExpression = use;
    }
    this.use = this.usehref = "";
    if (id) {
      proto = ids.get(id);
    } else {
      proto = searchNode(ids.get($root), this, somExpression, true, false);
      if (proto) {
        proto = proto[0];
      }
    }
    if (!proto) {
      warn(\`XFA - Invalid prototype reference: \${ref}.\`);
      return null;
    }
    if (proto[$nodeName] !== this[$nodeName]) {
      warn(\`XFA - Incompatible prototype: \${proto[$nodeName]} !== \${this[$nodeName]}.\`);
      return null;
    }
    if (ancestors.has(proto)) {
      warn(\`XFA - Cycle detected in prototypes use.\`);
      return null;
    }
    ancestors.add(proto);
    const protoProto = proto[_getPrototype](ids, ancestors);
    if (protoProto) {
      proto[_applyPrototype](protoProto, ids, ancestors);
    }
    proto[$resolvePrototypes](ids, ancestors);
    ancestors.delete(proto);
    return proto;
  }
  [_applyPrototype](proto, ids, ancestors) {
    if (ancestors.has(proto)) {
      warn(\`XFA - Cycle detected in prototypes use.\`);
      return;
    }
    if (!this[$content] && proto[$content]) {
      this[$content] = proto[$content];
    }
    const newAncestors = new Set(ancestors);
    newAncestors.add(proto);
    for (const unsetAttrName of this[_getUnsetAttributes](proto[_setAttributes])) {
      this[unsetAttrName] = proto[unsetAttrName];
      if (this[_setAttributes]) {
        this[_setAttributes].add(unsetAttrName);
      }
    }
    for (const name of Object.getOwnPropertyNames(this)) {
      if (this[_attributeNames].has(name)) {
        continue;
      }
      const value = this[name];
      const protoValue = proto[name];
      if (value instanceof XFAObjectArray) {
        for (const child of value[_children]) {
          child[_resolvePrototypesHelper](ids, ancestors);
        }
        for (let i = value[_children].length, ii = protoValue[_children].length; i < ii; i++) {
          const child = proto[_children][i][$clone]();
          if (value.push(child)) {
            child[_parent] = this;
            this[_children].push(child);
            child[_resolvePrototypesHelper](ids, ancestors);
          } else {
            break;
          }
        }
        continue;
      }
      if (value !== null) {
        value[$resolvePrototypes](ids, ancestors);
        if (protoValue) {
          value[_applyPrototype](protoValue, ids, ancestors);
        }
        continue;
      }
      if (protoValue !== null) {
        const child = protoValue[$clone]();
        child[_parent] = this;
        this[name] = child;
        this[_children].push(child);
        child[_resolvePrototypesHelper](ids, ancestors);
      }
    }
  }
  static [_cloneAttribute](obj) {
    if (Array.isArray(obj)) {
      return obj.map(x => XFAObject[_cloneAttribute](x));
    }
    if (typeof obj === "object" && obj !== null) {
      return Object.assign({}, obj);
    }
    return obj;
  }
  [$clone]() {
    const clone = Object.create(Object.getPrototypeOf(this));
    for (const $symbol of Object.getOwnPropertySymbols(this)) {
      try {
        clone[$symbol] = this[$symbol];
      } catch {
        shadow(clone, $symbol, this[$symbol]);
      }
    }
    clone[$uid] = \`\${clone[$nodeName]}\${uid++}\`;
    clone[_children] = [];
    for (const name of Object.getOwnPropertyNames(this)) {
      if (this[_attributeNames].has(name)) {
        clone[name] = XFAObject[_cloneAttribute](this[name]);
        continue;
      }
      const value = this[name];
      clone[name] = value instanceof XFAObjectArray ? new XFAObjectArray(value[_max]) : null;
    }
    for (const child of this[_children]) {
      const name = child[$nodeName];
      const clonedChild = child[$clone]();
      clone[_children].push(clonedChild);
      clonedChild[_parent] = clone;
      if (clone[name] === null) {
        clone[name] = clonedChild;
      } else {
        clone[name][_children].push(clonedChild);
      }
    }
    return clone;
  }
  [$getChildren](name = null) {
    if (!name) {
      return this[_children];
    }
    return this[_children].filter(c => c[$nodeName] === name);
  }
  [$getChildrenByClass](name) {
    return this[name];
  }
  [$getChildrenByName](name, allTransparent, first = true) {
    return Array.from(this[$getChildrenByNameIt](name, allTransparent, first));
  }
  *[$getChildrenByNameIt](name, allTransparent, first = true) {
    if (name === "parent") {
      yield this[_parent];
      return;
    }
    for (const child of this[_children]) {
      if (child[$nodeName] === name) {
        yield child;
      }
      if (child.name === name) {
        yield child;
      }
      if (allTransparent || child[$isTransparent]()) {
        yield* child[$getChildrenByNameIt](name, allTransparent, false);
      }
    }
    if (first && this[_attributeNames].has(name)) {
      yield new XFAAttribute(this, name, this[name]);
    }
  }
}
class XFAObjectArray {
  constructor(max = Infinity) {
    this[_max] = max;
    this[_children] = [];
  }
  get isXFAObject() {
    return false;
  }
  get isXFAObjectArray() {
    return true;
  }
  push(child) {
    const len = this[_children].length;
    if (len <= this[_max]) {
      this[_children].push(child);
      return true;
    }
    warn(\`XFA - node "\${child[$nodeName]}" accepts no more than \${this[_max]} children\`);
    return false;
  }
  isEmpty() {
    return this[_children].length === 0;
  }
  dump() {
    return this[_children].length === 1 ? this[_children][0][$dump]() : this[_children].map(x => x[$dump]());
  }
  [$clone]() {
    const clone = new XFAObjectArray(this[_max]);
    clone[_children] = this[_children].map(c => c[$clone]());
    return clone;
  }
  get children() {
    return this[_children];
  }
  clear() {
    this[_children].length = 0;
  }
}
class XFAAttribute {
  constructor(node, name, value) {
    this[_parent] = node;
    this[$nodeName] = name;
    this[$content] = value;
    this[$consumed] = false;
    this[$uid] = \`attribute\${uid++}\`;
  }
  [$getParent]() {
    return this[_parent];
  }
  [$isDataValue]() {
    return true;
  }
  [$getDataValue]() {
    return this[$content].trim();
  }
  [$setValue](value) {
    value = value.value || "";
    this[$content] = value.toString();
  }
  [$text]() {
    return this[$content];
  }
  [$isDescendent](parent) {
    return this[_parent] === parent || this[_parent][$isDescendent](parent);
  }
}
class XmlObject extends XFAObject {
  constructor(nsId, name, attributes = {}) {
    super(nsId, name);
    this[$content] = "";
    this[_dataValue] = null;
    if (name !== "#text") {
      const map = new Map();
      this[_attributes] = map;
      for (const [attrName, value] of Object.entries(attributes)) {
        map.set(attrName, new XFAAttribute(this, attrName, value));
      }
      if (attributes.hasOwnProperty($nsAttributes)) {
        const dataNode = attributes[$nsAttributes].xfa.dataNode;
        if (dataNode !== undefined) {
          if (dataNode === "dataGroup") {
            this[_dataValue] = false;
          } else if (dataNode === "dataValue") {
            this[_dataValue] = true;
          }
        }
      }
    }
    this[$consumed] = false;
  }
  [$toString](buf) {
    const tagName = this[$nodeName];
    if (tagName === "#text") {
      buf.push(encodeToXmlString(this[$content]));
      return;
    }
    const utf8TagName = utf8StringToString(tagName);
    const prefix = this[$namespaceId] === NS_DATASETS ? "xfa:" : "";
    buf.push(\`<\${prefix}\${utf8TagName}\`);
    for (const [name, value] of this[_attributes].entries()) {
      const utf8Name = utf8StringToString(name);
      buf.push(\` \${utf8Name}="\${encodeToXmlString(value[$content])}"\`);
    }
    if (this[_dataValue] !== null) {
      if (this[_dataValue]) {
        buf.push(\` xfa:dataNode="dataValue"\`);
      } else {
        buf.push(\` xfa:dataNode="dataGroup"\`);
      }
    }
    if (!this[$content] && this[_children].length === 0) {
      buf.push("/>");
      return;
    }
    buf.push(">");
    if (this[$content]) {
      if (typeof this[$content] === "string") {
        buf.push(encodeToXmlString(this[$content]));
      } else {
        this[$content][$toString](buf);
      }
    } else {
      for (const child of this[_children]) {
        child[$toString](buf);
      }
    }
    buf.push(\`</\${prefix}\${utf8TagName}>\`);
  }
  [$onChild](child) {
    if (this[$content]) {
      const node = new XmlObject(this[$namespaceId], "#text");
      this[$appendChild](node);
      node[$content] = this[$content];
      this[$content] = "";
    }
    this[$appendChild](child);
    return true;
  }
  [$onText](str) {
    this[$content] += str;
  }
  [$finalize]() {
    if (this[$content] && this[_children].length > 0) {
      const node = new XmlObject(this[$namespaceId], "#text");
      this[$appendChild](node);
      node[$content] = this[$content];
      delete this[$content];
    }
  }
  [$toHTML]() {
    if (this[$nodeName] === "#text") {
      return HTMLResult.success({
        name: "#text",
        value: this[$content]
      });
    }
    return HTMLResult.EMPTY;
  }
  [$getChildren](name = null) {
    if (!name) {
      return this[_children];
    }
    return this[_children].filter(c => c[$nodeName] === name);
  }
  [$getAttributes]() {
    return this[_attributes];
  }
  [$getChildrenByClass](name) {
    const value = this[_attributes].get(name);
    if (value !== undefined) {
      return value;
    }
    return this[$getChildren](name);
  }
  *[$getChildrenByNameIt](name, allTransparent) {
    const value = this[_attributes].get(name);
    if (value) {
      yield value;
    }
    for (const child of this[_children]) {
      if (child[$nodeName] === name) {
        yield child;
      }
      if (allTransparent) {
        yield* child[$getChildrenByNameIt](name, allTransparent);
      }
    }
  }
  *[$getAttributeIt](name, skipConsumed) {
    const value = this[_attributes].get(name);
    if (value && (!skipConsumed || !value[$consumed])) {
      yield value;
    }
    for (const child of this[_children]) {
      yield* child[$getAttributeIt](name, skipConsumed);
    }
  }
  *[$getRealChildrenByNameIt](name, allTransparent, skipConsumed) {
    for (const child of this[_children]) {
      if (child[$nodeName] === name && (!skipConsumed || !child[$consumed])) {
        yield child;
      }
      if (allTransparent) {
        yield* child[$getRealChildrenByNameIt](name, allTransparent, skipConsumed);
      }
    }
  }
  [$isDataValue]() {
    if (this[_dataValue] === null) {
      return this[_children].length === 0 || this[_children][0][$namespaceId] === NamespaceIds.xhtml.id;
    }
    return this[_dataValue];
  }
  [$getDataValue]() {
    if (this[_dataValue] === null) {
      if (this[_children].length === 0) {
        return this[$content].trim();
      }
      if (this[_children][0][$namespaceId] === NamespaceIds.xhtml.id) {
        return this[_children][0][$text]().trim();
      }
      return null;
    }
    return this[$content].trim();
  }
  [$setValue](value) {
    value = value.value || "";
    this[$content] = value.toString();
  }
  [$dump](hasNS = false) {
    const dumped = Object.create(null);
    if (hasNS) {
      dumped.$ns = this[$namespaceId];
    }
    if (this[$content]) {
      dumped.$content = this[$content];
    }
    dumped.$name = this[$nodeName];
    dumped.children = [];
    for (const child of this[_children]) {
      dumped.children.push(child[$dump](hasNS));
    }
    dumped.attributes = Object.create(null);
    for (const [name, value] of this[_attributes]) {
      dumped.attributes[name] = value[$content];
    }
    return dumped;
  }
}
class ContentObject extends XFAObject {
  constructor(nsId, name) {
    super(nsId, name);
    this[$content] = "";
  }
  [$onText](text) {
    this[$content] += text;
  }
  [$finalize]() {}
}
class OptionObject extends ContentObject {
  constructor(nsId, name, options) {
    super(nsId, name);
    this[_options] = options;
  }
  [$finalize]() {
    this[$content] = getKeyword({
      data: this[$content],
      defaultValue: this[_options][0],
      validate: k => this[_options].includes(k)
    });
  }
  [$clean](builder) {
    super[$clean](builder);
    delete this[_options];
  }
}
class StringObject extends ContentObject {
  [$finalize]() {
    this[$content] = this[$content].trim();
  }
}
class IntegerObject extends ContentObject {
  constructor(nsId, name, defaultValue, validator) {
    super(nsId, name);
    this[_defaultValue] = defaultValue;
    this[_validator] = validator;
  }
  [$finalize]() {
    this[$content] = getInteger({
      data: this[$content],
      defaultValue: this[_defaultValue],
      validate: this[_validator]
    });
  }
  [$clean](builder) {
    super[$clean](builder);
    delete this[_defaultValue];
    delete this[_validator];
  }
}
class Option01 extends IntegerObject {
  constructor(nsId, name) {
    super(nsId, name, 0, n => n === 1);
  }
}
class Option10 extends IntegerObject {
  constructor(nsId, name) {
    super(nsId, name, 1, n => n === 0);
  }
}

;// ./src/core/xfa/html_utils.js






function measureToString(m) {
  if (typeof m === "string") {
    return "0px";
  }
  return Number.isInteger(m) ? \`\${m}px\` : \`\${m.toFixed(2)}px\`;
}
const converters = {
  anchorType(node, style) {
    const parent = node[$getSubformParent]();
    if (!parent || parent.layout && parent.layout !== "position") {
      return;
    }
    if (!("transform" in style)) {
      style.transform = "";
    }
    switch (node.anchorType) {
      case "bottomCenter":
        style.transform += "translate(-50%, -100%)";
        break;
      case "bottomLeft":
        style.transform += "translate(0,-100%)";
        break;
      case "bottomRight":
        style.transform += "translate(-100%,-100%)";
        break;
      case "middleCenter":
        style.transform += "translate(-50%,-50%)";
        break;
      case "middleLeft":
        style.transform += "translate(0,-50%)";
        break;
      case "middleRight":
        style.transform += "translate(-100%,-50%)";
        break;
      case "topCenter":
        style.transform += "translate(-50%,0)";
        break;
      case "topRight":
        style.transform += "translate(-100%,0)";
        break;
    }
  },
  dimensions(node, style) {
    const parent = node[$getSubformParent]();
    let width = node.w;
    const height = node.h;
    if (parent.layout?.includes("row")) {
      const extra = parent[$extra];
      const colSpan = node.colSpan;
      let w;
      if (colSpan === -1) {
        w = Math.sumPrecise(extra.columnWidths.slice(extra.currentColumn));
        extra.currentColumn = 0;
      } else {
        w = Math.sumPrecise(extra.columnWidths.slice(extra.currentColumn, extra.currentColumn + colSpan));
        extra.currentColumn = (extra.currentColumn + node.colSpan) % extra.columnWidths.length;
      }
      if (!isNaN(w)) {
        width = node.w = w;
      }
    }
    style.width = width !== "" ? measureToString(width) : "auto";
    style.height = height !== "" ? measureToString(height) : "auto";
  },
  position(node, style) {
    const parent = node[$getSubformParent]();
    if (parent?.layout && parent.layout !== "position") {
      return;
    }
    style.position = "absolute";
    style.left = measureToString(node.x);
    style.top = measureToString(node.y);
  },
  rotate(node, style) {
    if (node.rotate) {
      if (!("transform" in style)) {
        style.transform = "";
      }
      style.transform += \`rotate(-\${node.rotate}deg)\`;
      style.transformOrigin = "top left";
    }
  },
  presence(node, style) {
    switch (node.presence) {
      case "invisible":
        style.visibility = "hidden";
        break;
      case "hidden":
      case "inactive":
        style.display = "none";
        break;
    }
  },
  hAlign(node, style) {
    if (node[$nodeName] === "para") {
      switch (node.hAlign) {
        case "justifyAll":
          style.textAlign = "justify-all";
          break;
        case "radix":
          style.textAlign = "left";
          break;
        default:
          style.textAlign = node.hAlign;
      }
    } else {
      switch (node.hAlign) {
        case "left":
          style.alignSelf = "start";
          break;
        case "center":
          style.alignSelf = "center";
          break;
        case "right":
          style.alignSelf = "end";
          break;
      }
    }
  },
  margin(node, style) {
    if (node.margin) {
      style.margin = node.margin[$toStyle]().margin;
    }
  }
};
function setMinMaxDimensions(node, style) {
  const parent = node[$getSubformParent]();
  if (parent.layout === "position") {
    if (node.minW > 0) {
      style.minWidth = measureToString(node.minW);
    }
    if (node.maxW > 0) {
      style.maxWidth = measureToString(node.maxW);
    }
    if (node.minH > 0) {
      style.minHeight = measureToString(node.minH);
    }
    if (node.maxH > 0) {
      style.maxHeight = measureToString(node.maxH);
    }
  }
}
function layoutText(text, xfaFont, margin, lineHeight, fontFinder, width) {
  const measure = new TextMeasure(xfaFont, margin, lineHeight, fontFinder);
  if (typeof text === "string") {
    measure.addString(text);
  } else {
    text[$pushGlyphs](measure);
  }
  return measure.compute(width);
}
function layoutNode(node, availableSpace) {
  let height = null;
  let width = null;
  let isBroken = false;
  if ((!node.w || !node.h) && node.value) {
    let marginH = 0;
    let marginV = 0;
    if (node.margin) {
      marginH = node.margin.leftInset + node.margin.rightInset;
      marginV = node.margin.topInset + node.margin.bottomInset;
    }
    let lineHeight = null;
    let margin = null;
    if (node.para) {
      margin = Object.create(null);
      lineHeight = node.para.lineHeight === "" ? null : node.para.lineHeight;
      margin.top = node.para.spaceAbove === "" ? 0 : node.para.spaceAbove;
      margin.bottom = node.para.spaceBelow === "" ? 0 : node.para.spaceBelow;
      margin.left = node.para.marginLeft === "" ? 0 : node.para.marginLeft;
      margin.right = node.para.marginRight === "" ? 0 : node.para.marginRight;
    }
    let font = node.font;
    if (!font) {
      const root = node[$getTemplateRoot]();
      let parent = node[$getParent]();
      while (parent && parent !== root) {
        if (parent.font) {
          font = parent.font;
          break;
        }
        parent = parent[$getParent]();
      }
    }
    const maxWidth = (node.w || availableSpace.width) - marginH;
    const fontFinder = node[$globalData].fontFinder;
    if (node.value.exData && node.value.exData[$content] && node.value.exData.contentType === "text/html") {
      const res = layoutText(node.value.exData[$content], font, margin, lineHeight, fontFinder, maxWidth);
      width = res.width;
      height = res.height;
      isBroken = res.isBroken;
    } else {
      const text = node.value[$text]();
      if (text) {
        const res = layoutText(text, font, margin, lineHeight, fontFinder, maxWidth);
        width = res.width;
        height = res.height;
        isBroken = res.isBroken;
      }
    }
    if (width !== null && !node.w) {
      width += marginH;
    }
    if (height !== null && !node.h) {
      height += marginV;
    }
  }
  return {
    w: width,
    h: height,
    isBroken
  };
}
function computeBbox(node, html, availableSpace) {
  let bbox;
  if (node.w !== "" && node.h !== "") {
    bbox = [node.x, node.y, node.w, node.h];
  } else {
    if (!availableSpace) {
      return null;
    }
    let width = node.w;
    if (width === "") {
      if (node.maxW === 0) {
        const parent = node[$getSubformParent]();
        width = parent.layout === "position" && parent.w !== "" ? 0 : node.minW;
      } else {
        width = Math.min(node.maxW, availableSpace.width);
      }
      html.attributes.style.width = measureToString(width);
    }
    let height = node.h;
    if (height === "") {
      if (node.maxH === 0) {
        const parent = node[$getSubformParent]();
        height = parent.layout === "position" && parent.h !== "" ? 0 : node.minH;
      } else {
        height = Math.min(node.maxH, availableSpace.height);
      }
      html.attributes.style.height = measureToString(height);
    }
    bbox = [node.x, node.y, width, height];
  }
  return bbox;
}
function fixDimensions(node) {
  const parent = node[$getSubformParent]();
  if (parent.layout?.includes("row")) {
    const extra = parent[$extra];
    const colSpan = node.colSpan;
    let width;
    if (colSpan === -1) {
      width = Math.sumPrecise(extra.columnWidths.slice(extra.currentColumn));
    } else {
      width = Math.sumPrecise(extra.columnWidths.slice(extra.currentColumn, extra.currentColumn + colSpan));
    }
    if (!isNaN(width)) {
      node.w = width;
    }
  }
  if (parent.layout && parent.layout !== "position") {
    node.x = node.y = 0;
  }
  if (node.layout === "table") {
    if (node.w === "" && Array.isArray(node.columnWidths)) {
      node.w = Math.sumPrecise(node.columnWidths);
    }
  }
}
function layoutClass(node) {
  switch (node.layout) {
    case "position":
      return "xfaPosition";
    case "lr-tb":
      return "xfaLrTb";
    case "rl-row":
      return "xfaRlRow";
    case "rl-tb":
      return "xfaRlTb";
    case "row":
      return "xfaRow";
    case "table":
      return "xfaTable";
    case "tb":
      return "xfaTb";
    default:
      return "xfaPosition";
  }
}
function toStyle(node, ...names) {
  const style = Object.create(null);
  for (const name of names) {
    const value = node[name];
    if (value === null) {
      continue;
    }
    if (converters.hasOwnProperty(name)) {
      converters[name](node, style);
      continue;
    }
    if (value instanceof XFAObject) {
      const newStyle = value[$toStyle]();
      if (newStyle) {
        Object.assign(style, newStyle);
      } else {
        warn(\`(DEBUG) - XFA - style for \${name} not implemented yet\`);
      }
    }
  }
  return style;
}
function createWrapper(node, html) {
  const {
    attributes
  } = html;
  const {
    style
  } = attributes;
  const wrapper = {
    name: "div",
    attributes: {
      class: ["xfaWrapper"],
      style: Object.create(null)
    },
    children: []
  };
  attributes.class.push("xfaWrapped");
  if (node.border) {
    const {
      widths,
      insets
    } = node.border[$extra];
    let width, height;
    let top = insets[0];
    let left = insets[3];
    const insetsH = insets[0] + insets[2];
    const insetsW = insets[1] + insets[3];
    switch (node.border.hand) {
      case "even":
        top -= widths[0] / 2;
        left -= widths[3] / 2;
        width = \`calc(100% + \${(widths[1] + widths[3]) / 2 - insetsW}px)\`;
        height = \`calc(100% + \${(widths[0] + widths[2]) / 2 - insetsH}px)\`;
        break;
      case "left":
        top -= widths[0];
        left -= widths[3];
        width = \`calc(100% + \${widths[1] + widths[3] - insetsW}px)\`;
        height = \`calc(100% + \${widths[0] + widths[2] - insetsH}px)\`;
        break;
      case "right":
        width = insetsW ? \`calc(100% - \${insetsW}px)\` : "100%";
        height = insetsH ? \`calc(100% - \${insetsH}px)\` : "100%";
        break;
    }
    const classNames = ["xfaBorder"];
    if (isPrintOnly(node.border)) {
      classNames.push("xfaPrintOnly");
    }
    const border = {
      name: "div",
      attributes: {
        class: classNames,
        style: {
          top: \`\${top}px\`,
          left: \`\${left}px\`,
          width,
          height
        }
      },
      children: []
    };
    for (const key of ["border", "borderWidth", "borderColor", "borderRadius", "borderStyle"]) {
      if (style[key] !== undefined) {
        border.attributes.style[key] = style[key];
        delete style[key];
      }
    }
    wrapper.children.push(border, html);
  } else {
    wrapper.children.push(html);
  }
  for (const key of ["background", "backgroundClip", "top", "left", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "transform", "transformOrigin", "visibility"]) {
    if (style[key] !== undefined) {
      wrapper.attributes.style[key] = style[key];
      delete style[key];
    }
  }
  wrapper.attributes.style.position = style.position === "absolute" ? "absolute" : "relative";
  delete style.position;
  if (style.alignSelf) {
    wrapper.attributes.style.alignSelf = style.alignSelf;
    delete style.alignSelf;
  }
  return wrapper;
}
function fixTextIndent(styles) {
  const indent = getMeasurement(styles.textIndent, "0px");
  if (indent >= 0) {
    return;
  }
  const align = styles.textAlign === "right" ? "right" : "left";
  const name = "padding" + (align === "left" ? "Left" : "Right");
  const padding = getMeasurement(styles[name], "0px");
  styles[name] = \`\${padding - indent}px\`;
}
function setAccess(node, classNames) {
  switch (node.access) {
    case "nonInteractive":
      classNames.push("xfaNonInteractive");
      break;
    case "readOnly":
      classNames.push("xfaReadOnly");
      break;
    case "protected":
      classNames.push("xfaDisabled");
      break;
  }
}
function isPrintOnly(node) {
  return node.relevant.length > 0 && !node.relevant[0].excluded && node.relevant[0].viewname === "print";
}
function getCurrentPara(node) {
  const stack = node[$getTemplateRoot]()[$extra].paraStack;
  return stack.length ? stack.at(-1) : null;
}
function setPara(node, nodeStyle, value) {
  if (value.attributes.class?.includes("xfaRich")) {
    if (nodeStyle) {
      if (node.h === "") {
        nodeStyle.height = "auto";
      }
      if (node.w === "") {
        nodeStyle.width = "auto";
      }
    }
    const para = getCurrentPara(node);
    if (para) {
      const valueStyle = value.attributes.style;
      valueStyle.display = "flex";
      valueStyle.flexDirection = "column";
      switch (para.vAlign) {
        case "top":
          valueStyle.justifyContent = "start";
          break;
        case "bottom":
          valueStyle.justifyContent = "end";
          break;
        case "middle":
          valueStyle.justifyContent = "center";
          break;
      }
      const paraStyle = para[$toStyle]();
      for (const [key, val] of Object.entries(paraStyle)) {
        if (!(key in valueStyle)) {
          valueStyle[key] = val;
        }
      }
    }
  }
}
function setFontFamily(xfaFont, node, fontFinder, style) {
  if (!fontFinder) {
    delete style.fontFamily;
    return;
  }
  const name = stripQuotes(xfaFont.typeface);
  style.fontFamily = \`"\${name}"\`;
  const typeface = fontFinder.find(name);
  if (typeface) {
    const {
      fontFamily
    } = typeface.regular.cssFontInfo;
    if (fontFamily !== name) {
      style.fontFamily = \`"\${fontFamily}"\`;
    }
    const para = getCurrentPara(node);
    if (para && para.lineHeight !== "") {
      return;
    }
    if (style.lineHeight) {
      return;
    }
    const pdfFont = selectFont(xfaFont, typeface);
    if (pdfFont) {
      style.lineHeight = Math.max(1.2, pdfFont.lineHeight);
    }
  }
}
function fixURL(str) {
  const absoluteUrl = createValidAbsoluteUrl(str, null, {
    addDefaultProtocol: true,
    tryConvertEncoding: true
  });
  return absoluteUrl ? absoluteUrl.href : null;
}

;// ./src/core/xfa/layout.js



function createLine(node, children) {
  return {
    name: "div",
    attributes: {
      class: [node.layout === "lr-tb" ? "xfaLr" : "xfaRl"]
    },
    children
  };
}
function flushHTML(node) {
  if (!node[$extra]) {
    return null;
  }
  const attributes = node[$extra].attributes;
  const html = {
    name: "div",
    attributes,
    children: node[$extra].children
  };
  if (node[$extra].failingNode) {
    const htmlFromFailing = node[$extra].failingNode[$flushHTML]();
    if (htmlFromFailing) {
      if (node.layout.endsWith("-tb")) {
        html.children.push(createLine(node, [htmlFromFailing]));
      } else {
        html.children.push(htmlFromFailing);
      }
    }
  }
  if (html.children.length === 0) {
    return null;
  }
  return html;
}
function addHTML(node, html, bbox) {
  const extra = node[$extra];
  const availableSpace = extra.availableSpace;
  const [x, y, w, h] = bbox;
  switch (node.layout) {
    case "position":
      {
        extra.width = Math.max(extra.width, x + w);
        extra.height = Math.max(extra.height, y + h);
        extra.children.push(html);
        break;
      }
    case "lr-tb":
    case "rl-tb":
      if (!extra.line || extra.attempt === 1) {
        extra.line = createLine(node, []);
        extra.children.push(extra.line);
        extra.numberInLine = 0;
      }
      extra.numberInLine += 1;
      extra.line.children.push(html);
      if (extra.attempt === 0) {
        extra.currentWidth += w;
        extra.height = Math.max(extra.height, extra.prevHeight + h);
      } else {
        extra.currentWidth = w;
        extra.prevHeight = extra.height;
        extra.height += h;
        extra.attempt = 0;
      }
      extra.width = Math.max(extra.width, extra.currentWidth);
      break;
    case "rl-row":
    case "row":
      {
        extra.children.push(html);
        extra.width += w;
        extra.height = Math.max(extra.height, h);
        const height = measureToString(extra.height);
        for (const child of extra.children) {
          child.attributes.style.height = height;
        }
        break;
      }
    case "table":
      {
        extra.width = MathClamp(w, extra.width, availableSpace.width);
        extra.height += h;
        extra.children.push(html);
        break;
      }
    case "tb":
      {
        extra.width = MathClamp(w, extra.width, availableSpace.width);
        extra.height += h;
        extra.children.push(html);
        break;
      }
  }
}
function getAvailableSpace(node) {
  const availableSpace = node[$extra].availableSpace;
  const marginV = node.margin ? node.margin.topInset + node.margin.bottomInset : 0;
  const marginH = node.margin ? node.margin.leftInset + node.margin.rightInset : 0;
  switch (node.layout) {
    case "lr-tb":
    case "rl-tb":
      if (node[$extra].attempt === 0) {
        return {
          width: availableSpace.width - marginH - node[$extra].currentWidth,
          height: availableSpace.height - marginV - node[$extra].prevHeight
        };
      }
      return {
        width: availableSpace.width - marginH,
        height: availableSpace.height - marginV - node[$extra].height
      };
    case "rl-row":
    case "row":
      const width = Math.sumPrecise(node[$extra].columnWidths.slice(node[$extra].currentColumn));
      return {
        width,
        height: availableSpace.height - marginH
      };
    case "table":
    case "tb":
      return {
        width: availableSpace.width - marginH,
        height: availableSpace.height - marginV - node[$extra].height
      };
    case "position":
    default:
      return availableSpace;
  }
}
function getTransformedBBox(node) {
  let w = node.w === "" ? NaN : node.w;
  let h = node.h === "" ? NaN : node.h;
  let [centerX, centerY] = [0, 0];
  switch (node.anchorType || "") {
    case "bottomCenter":
      [centerX, centerY] = [w / 2, h];
      break;
    case "bottomLeft":
      [centerX, centerY] = [0, h];
      break;
    case "bottomRight":
      [centerX, centerY] = [w, h];
      break;
    case "middleCenter":
      [centerX, centerY] = [w / 2, h / 2];
      break;
    case "middleLeft":
      [centerX, centerY] = [0, h / 2];
      break;
    case "middleRight":
      [centerX, centerY] = [w, h / 2];
      break;
    case "topCenter":
      [centerX, centerY] = [w / 2, 0];
      break;
    case "topRight":
      [centerX, centerY] = [w, 0];
      break;
  }
  let x, y;
  switch (node.rotate || 0) {
    case 0:
      [x, y] = [-centerX, -centerY];
      break;
    case 90:
      [x, y] = [-centerY, centerX];
      [w, h] = [h, -w];
      break;
    case 180:
      [x, y] = [centerX, centerY];
      [w, h] = [-w, -h];
      break;
    case 270:
      [x, y] = [centerY, -centerX];
      [w, h] = [-h, w];
      break;
  }
  return [node.x + x + Math.min(0, w), node.y + y + Math.min(0, h), Math.abs(w), Math.abs(h)];
}
function checkDimensions(node, space) {
  if (node[$getTemplateRoot]()[$extra].firstUnsplittable === null) {
    return true;
  }
  if (node.w === 0 || node.h === 0) {
    return true;
  }
  const ERROR = 2;
  const parent = node[$getSubformParent]();
  const attempt = parent[$extra]?.attempt || 0;
  const [, y, w, h] = getTransformedBBox(node);
  switch (parent.layout) {
    case "lr-tb":
    case "rl-tb":
      if (attempt === 0) {
        if (!node[$getTemplateRoot]()[$extra].noLayoutFailure) {
          if (node.h !== "" && Math.round(h - space.height) > ERROR) {
            return false;
          }
          if (node.w !== "") {
            if (Math.round(w - space.width) <= ERROR) {
              return true;
            }
            if (parent[$extra].numberInLine === 0) {
              return space.height > ERROR;
            }
            return false;
          }
          return space.width > ERROR;
        }
        if (node.w !== "") {
          return Math.round(w - space.width) <= ERROR;
        }
        return space.width > ERROR;
      }
      if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
        return true;
      }
      if (node.h !== "" && Math.round(h - space.height) > ERROR) {
        return false;
      }
      if (node.w === "" || Math.round(w - space.width) <= ERROR) {
        return space.height > ERROR;
      }
      if (parent[$isThereMoreWidth]()) {
        return false;
      }
      return space.height > ERROR;
    case "table":
    case "tb":
      if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
        return true;
      }
      if (node.h !== "" && !node[$isSplittable]()) {
        return Math.round(h - space.height) <= ERROR;
      }
      if (node.w === "" || Math.round(w - space.width) <= ERROR) {
        return space.height > ERROR;
      }
      if (parent[$isThereMoreWidth]()) {
        return false;
      }
      return space.height > ERROR;
    case "position":
      if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
        return true;
      }
      if (node.h === "" || Math.round(h + y - space.height) <= ERROR) {
        return true;
      }
      const area = node[$getTemplateRoot]()[$extra].currentContentArea;
      return h + y > area.h;
    case "rl-row":
    case "row":
      if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
        return true;
      }
      if (node.h !== "") {
        return Math.round(h - space.height) <= ERROR;
      }
      return true;
    default:
      return true;
  }
}

;// ./src/core/xfa/template.js










const TEMPLATE_NS_ID = NamespaceIds.template.id;
const SVG_NS = "http://www.w3.org/2000/svg";
const MAX_ATTEMPTS_FOR_LRTB_LAYOUT = 2;
const MAX_EMPTY_PAGES = 3;
const DEFAULT_TAB_INDEX = 5000;
const HEADING_PATTERN = /^H(\\d+)$/;
const MIMES = new Set(["image/gif", "image/jpeg", "image/jpg", "image/pjpeg", "image/png", "image/apng", "image/x-png", "image/bmp", "image/x-ms-bmp", "image/tiff", "image/tif", "application/octet-stream"]);
const IMAGES_HEADERS = [[[0x42, 0x4d], "image/bmp"], [[0xff, 0xd8, 0xff], "image/jpeg"], [[0x49, 0x49, 0x2a, 0x00], "image/tiff"], [[0x4d, 0x4d, 0x00, 0x2a], "image/tiff"], [[0x47, 0x49, 0x46, 0x38, 0x39, 0x61], "image/gif"], [[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a], "image/png"]];
function getBorderDims(node) {
  if (!node || !node.border) {
    return {
      w: 0,
      h: 0
    };
  }
  const borderExtra = node.border[$getExtra]();
  if (!borderExtra) {
    return {
      w: 0,
      h: 0
    };
  }
  return {
    w: borderExtra.widths[0] + borderExtra.widths[2] + borderExtra.insets[0] + borderExtra.insets[2],
    h: borderExtra.widths[1] + borderExtra.widths[3] + borderExtra.insets[1] + borderExtra.insets[3]
  };
}
function hasMargin(node) {
  return node.margin && (node.margin.topInset || node.margin.rightInset || node.margin.bottomInset || node.margin.leftInset);
}
function _setValue(templateNode, value) {
  if (!templateNode.value) {
    const nodeValue = new Value({});
    templateNode[$appendChild](nodeValue);
    templateNode.value = nodeValue;
  }
  templateNode.value[$setValue](value);
}
function* getContainedChildren(node) {
  for (const child of node[$getChildren]()) {
    if (child instanceof SubformSet) {
      yield* child[$getContainedChildren]();
      continue;
    }
    yield child;
  }
}
function isRequired(node) {
  return node.validate?.nullTest === "error";
}
function setTabIndex(node) {
  while (node) {
    if (!node.traversal) {
      node[$tabIndex] = node[$getParent]()[$tabIndex];
      return;
    }
    if (node[$tabIndex]) {
      return;
    }
    let next = null;
    for (const child of node.traversal[$getChildren]()) {
      if (child.operation === "next") {
        next = child;
        break;
      }
    }
    if (!next || !next.ref) {
      node[$tabIndex] = node[$getParent]()[$tabIndex];
      return;
    }
    const root = node[$getTemplateRoot]();
    node[$tabIndex] = ++root[$tabIndex];
    const ref = root[$searchNode](next.ref, node);
    if (!ref) {
      return;
    }
    node = ref[0];
  }
}
function applyAssist(obj, attributes) {
  const assist = obj.assist;
  if (assist) {
    const assistTitle = assist[$toHTML]();
    if (assistTitle) {
      attributes.title = assistTitle;
    }
    const role = assist.role;
    const match = role.match(HEADING_PATTERN);
    if (match) {
      const ariaRole = "heading";
      const ariaLevel = match[1];
      attributes.role = ariaRole;
      attributes["aria-level"] = ariaLevel;
    }
  }
  if (obj.layout === "table") {
    attributes.role = "table";
  } else if (obj.layout === "row") {
    attributes.role = "row";
  } else {
    const parent = obj[$getParent]();
    if (parent.layout === "row") {
      attributes.role = parent.assist?.role === "TH" ? "columnheader" : "cell";
    }
  }
}
function ariaLabel(obj) {
  if (!obj.assist) {
    return null;
  }
  const assist = obj.assist;
  if (assist.speak && assist.speak[$content] !== "") {
    return assist.speak[$content];
  }
  if (assist.toolTip) {
    return assist.toolTip[$content];
  }
  return null;
}
function valueToHtml(value) {
  return HTMLResult.success({
    name: "div",
    attributes: {
      class: ["xfaRich"],
      style: Object.create(null)
    },
    children: [{
      name: "span",
      attributes: {
        style: Object.create(null)
      },
      value
    }]
  });
}
function setFirstUnsplittable(node) {
  const root = node[$getTemplateRoot]();
  if (root[$extra].firstUnsplittable === null) {
    root[$extra].firstUnsplittable = node;
    root[$extra].noLayoutFailure = true;
  }
}
function unsetFirstUnsplittable(node) {
  const root = node[$getTemplateRoot]();
  if (root[$extra].firstUnsplittable === node) {
    root[$extra].noLayoutFailure = false;
  }
}
function handleBreak(node) {
  if (node[$extra]) {
    return false;
  }
  node[$extra] = Object.create(null);
  if (node.targetType === "auto") {
    return false;
  }
  const root = node[$getTemplateRoot]();
  let target = null;
  if (node.target) {
    target = root[$searchNode](node.target, node[$getParent]());
    if (!target) {
      return false;
    }
    target = target[0];
  }
  const {
    currentPageArea,
    currentContentArea
  } = root[$extra];
  if (node.targetType === "pageArea") {
    if (!(target instanceof PageArea)) {
      target = null;
    }
    if (node.startNew) {
      node[$extra].target = target || currentPageArea;
      return true;
    } else if (target && target !== currentPageArea) {
      node[$extra].target = target;
      return true;
    }
    return false;
  }
  if (!(target instanceof ContentArea)) {
    target = null;
  }
  const pageArea = target && target[$getParent]();
  let index;
  let nextPageArea = pageArea;
  if (node.startNew) {
    if (target) {
      const contentAreas = pageArea.contentArea.children;
      const indexForCurrent = contentAreas.indexOf(currentContentArea);
      const indexForTarget = contentAreas.indexOf(target);
      if (indexForCurrent !== -1 && indexForCurrent < indexForTarget) {
        nextPageArea = null;
      }
      index = indexForTarget - 1;
    } else {
      index = currentPageArea.contentArea.children.indexOf(currentContentArea);
    }
  } else if (target && target !== currentContentArea) {
    const contentAreas = pageArea.contentArea.children;
    index = contentAreas.indexOf(target) - 1;
    nextPageArea = pageArea === currentPageArea ? null : pageArea;
  } else {
    return false;
  }
  node[$extra].target = nextPageArea;
  node[$extra].index = index;
  return true;
}
function handleOverflow(node, extraNode, space) {
  const root = node[$getTemplateRoot]();
  const saved = root[$extra].noLayoutFailure;
  const savedMethod = extraNode[$getSubformParent];
  extraNode[$getSubformParent] = () => node;
  root[$extra].noLayoutFailure = true;
  const res = extraNode[$toHTML](space);
  node[$addHTML](res.html, res.bbox);
  root[$extra].noLayoutFailure = saved;
  extraNode[$getSubformParent] = savedMethod;
}
class AppearanceFilter extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "appearanceFilter");
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Arc extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "arc", true);
    this.circular = getInteger({
      data: attributes.circular,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.hand = getStringOption(attributes.hand, ["even", "left", "right"]);
    this.id = attributes.id || "";
    this.startAngle = getFloat({
      data: attributes.startAngle,
      defaultValue: 0,
      validate: x => true
    });
    this.sweepAngle = getFloat({
      data: attributes.sweepAngle,
      defaultValue: 360,
      validate: x => true
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.edge = null;
    this.fill = null;
  }
  [$toHTML]() {
    const edge = this.edge || new Edge({});
    const edgeStyle = edge[$toStyle]();
    const style = Object.create(null);
    if (this.fill?.presence === "visible") {
      Object.assign(style, this.fill[$toStyle]());
    } else {
      style.fill = "transparent";
    }
    style.strokeWidth = measureToString(edge.presence === "visible" ? edge.thickness : 0);
    style.stroke = edgeStyle.color;
    let arc;
    const attributes = {
      xmlns: SVG_NS,
      style: {
        width: "100%",
        height: "100%",
        overflow: "visible"
      }
    };
    if (this.sweepAngle === 360) {
      arc = {
        name: "ellipse",
        attributes: {
          xmlns: SVG_NS,
          cx: "50%",
          cy: "50%",
          rx: "50%",
          ry: "50%",
          style
        }
      };
    } else {
      const startAngle = this.startAngle * Math.PI / 180;
      const sweepAngle = this.sweepAngle * Math.PI / 180;
      const largeArc = this.sweepAngle > 180 ? 1 : 0;
      const [x1, y1, x2, y2] = [50 * (1 + Math.cos(startAngle)), 50 * (1 - Math.sin(startAngle)), 50 * (1 + Math.cos(startAngle + sweepAngle)), 50 * (1 - Math.sin(startAngle + sweepAngle))];
      arc = {
        name: "path",
        attributes: {
          xmlns: SVG_NS,
          d: \`M \${x1} \${y1} A 50 50 0 \${largeArc} 0 \${x2} \${y2}\`,
          vectorEffect: "non-scaling-stroke",
          style
        }
      };
      Object.assign(attributes, {
        viewBox: "0 0 100 100",
        preserveAspectRatio: "none"
      });
    }
    const svg = {
      name: "svg",
      children: [arc],
      attributes
    };
    const parent = this[$getParent]()[$getParent]();
    if (hasMargin(parent)) {
      return HTMLResult.success({
        name: "div",
        attributes: {
          style: {
            display: "inline",
            width: "100%",
            height: "100%"
          }
        },
        children: [svg]
      });
    }
    svg.attributes.style.position = "absolute";
    return HTMLResult.success(svg);
  }
}
class Area extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "area", true);
    this.colSpan = getInteger({
      data: attributes.colSpan,
      defaultValue: 1,
      validate: n => n >= 1 || n === -1
    });
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.x = getMeasurement(attributes.x, "0pt");
    this.y = getMeasurement(attributes.y, "0pt");
    this.desc = null;
    this.extras = null;
    this.area = new XFAObjectArray();
    this.draw = new XFAObjectArray();
    this.exObject = new XFAObjectArray();
    this.exclGroup = new XFAObjectArray();
    this.field = new XFAObjectArray();
    this.subform = new XFAObjectArray();
    this.subformSet = new XFAObjectArray();
  }
  *[$getContainedChildren]() {
    yield* getContainedChildren(this);
  }
  [$isTransparent]() {
    return true;
  }
  [$isBindable]() {
    return true;
  }
  [$addHTML](html, bbox) {
    const [x, y, w, h] = bbox;
    this[$extra].width = Math.max(this[$extra].width, x + w);
    this[$extra].height = Math.max(this[$extra].height, y + h);
    this[$extra].children.push(html);
  }
  [$getAvailableSpace]() {
    return this[$extra].availableSpace;
  }
  [$toHTML](availableSpace) {
    const style = toStyle(this, "position");
    const attributes = {
      style,
      id: this[$uid],
      class: ["xfaArea"]
    };
    if (isPrintOnly(this)) {
      attributes.class.push("xfaPrintOnly");
    }
    if (this.name) {
      attributes.xfaName = this.name;
    }
    const children = [];
    this[$extra] = {
      children,
      width: 0,
      height: 0,
      availableSpace
    };
    const result = this[$childrenToHTML]({
      filter: new Set(["area", "draw", "field", "exclGroup", "subform", "subformSet"]),
      include: true
    });
    if (!result.success) {
      if (result.isBreak()) {
        return result;
      }
      delete this[$extra];
      return HTMLResult.FAILURE;
    }
    style.width = measureToString(this[$extra].width);
    style.height = measureToString(this[$extra].height);
    const html = {
      name: "div",
      attributes,
      children
    };
    const bbox = [this.x, this.y, this[$extra].width, this[$extra].height];
    delete this[$extra];
    return HTMLResult.success(html, bbox);
  }
}
class Assist extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "assist", true);
    this.id = attributes.id || "";
    this.role = attributes.role || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.speak = null;
    this.toolTip = null;
  }
  [$toHTML]() {
    return this.toolTip?.[$content] || null;
  }
}
class Barcode extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "barcode", true);
    this.charEncoding = getKeyword({
      data: attributes.charEncoding ? attributes.charEncoding.toLowerCase() : "",
      defaultValue: "",
      validate: k => ["utf-8", "big-five", "fontspecific", "gbk", "gb-18030", "gb-2312", "ksc-5601", "none", "shift-jis", "ucs-2", "utf-16"].includes(k) || k.match(/iso-8859-\\d{2}/)
    });
    this.checksum = getStringOption(attributes.checksum, ["none", "1mod10", "1mod10_1mod11", "2mod10", "auto"]);
    this.dataColumnCount = getInteger({
      data: attributes.dataColumnCount,
      defaultValue: -1,
      validate: x => x >= 0
    });
    this.dataLength = getInteger({
      data: attributes.dataLength,
      defaultValue: -1,
      validate: x => x >= 0
    });
    this.dataPrep = getStringOption(attributes.dataPrep, ["none", "flateCompress"]);
    this.dataRowCount = getInteger({
      data: attributes.dataRowCount,
      defaultValue: -1,
      validate: x => x >= 0
    });
    this.endChar = attributes.endChar || "";
    this.errorCorrectionLevel = getInteger({
      data: attributes.errorCorrectionLevel,
      defaultValue: -1,
      validate: x => x >= 0 && x <= 8
    });
    this.id = attributes.id || "";
    this.moduleHeight = getMeasurement(attributes.moduleHeight, "5mm");
    this.moduleWidth = getMeasurement(attributes.moduleWidth, "0.25mm");
    this.printCheckDigit = getInteger({
      data: attributes.printCheckDigit,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.rowColumnRatio = getRatio(attributes.rowColumnRatio);
    this.startChar = attributes.startChar || "";
    this.textLocation = getStringOption(attributes.textLocation, ["below", "above", "aboveEmbedded", "belowEmbedded", "none"]);
    this.truncate = getInteger({
      data: attributes.truncate,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.type = getStringOption(attributes.type ? attributes.type.toLowerCase() : "", ["aztec", "codabar", "code2of5industrial", "code2of5interleaved", "code2of5matrix", "code2of5standard", "code3of9", "code3of9extended", "code11", "code49", "code93", "code128", "code128a", "code128b", "code128c", "code128sscc", "datamatrix", "ean8", "ean8add2", "ean8add5", "ean13", "ean13add2", "ean13add5", "ean13pwcd", "fim", "logmars", "maxicode", "msi", "pdf417", "pdf417macro", "plessey", "postauscust2", "postauscust3", "postausreplypaid", "postausstandard", "postukrm4scc", "postusdpbc", "postusimb", "postusstandard", "postus5zip", "qrcode", "rfid", "rss14", "rss14expanded", "rss14limited", "rss14stacked", "rss14stackedomni", "rss14truncated", "telepen", "ucc128", "ucc128random", "ucc128sscc", "upca", "upcaadd2", "upcaadd5", "upcapwcd", "upce", "upceadd2", "upceadd5", "upcean2", "upcean5", "upsmaxicode"]);
    this.upsMode = getStringOption(attributes.upsMode, ["usCarrier", "internationalCarrier", "secureSymbol", "standardSymbol"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.wideNarrowRatio = getRatio(attributes.wideNarrowRatio);
    this.encrypt = null;
    this.extras = null;
  }
}
class Bind extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "bind", true);
    this.match = getStringOption(attributes.match, ["once", "dataRef", "global", "none"]);
    this.ref = attributes.ref || "";
    this.picture = null;
  }
}
class BindItems extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "bindItems");
    this.connection = attributes.connection || "";
    this.labelRef = attributes.labelRef || "";
    this.ref = attributes.ref || "";
    this.valueRef = attributes.valueRef || "";
  }
}
class Bookend extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "bookend");
    this.id = attributes.id || "";
    this.leader = attributes.leader || "";
    this.trailer = attributes.trailer || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class BooleanElement extends Option01 {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "boolean");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$toHTML](availableSpace) {
    return valueToHtml(this[$content] === 1 ? "1" : "0");
  }
}
class Border extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "border", true);
    this.break = getStringOption(attributes.break, ["close", "open"]);
    this.hand = getStringOption(attributes.hand, ["even", "left", "right"]);
    this.id = attributes.id || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.corner = new XFAObjectArray(4);
    this.edge = new XFAObjectArray(4);
    this.extras = null;
    this.fill = null;
    this.margin = null;
  }
  [$getExtra]() {
    if (!this[$extra]) {
      const edges = this.edge.children.slice();
      if (edges.length < 4) {
        const defaultEdge = edges.at(-1) || new Edge({});
        for (let i = edges.length; i < 4; i++) {
          edges.push(defaultEdge);
        }
      }
      const widths = edges.map(edge => edge.thickness);
      const insets = [0, 0, 0, 0];
      if (this.margin) {
        insets[0] = this.margin.topInset;
        insets[1] = this.margin.rightInset;
        insets[2] = this.margin.bottomInset;
        insets[3] = this.margin.leftInset;
      }
      this[$extra] = {
        widths,
        insets,
        edges
      };
    }
    return this[$extra];
  }
  [$toStyle]() {
    const {
      edges
    } = this[$getExtra]();
    const edgeStyles = edges.map(node => {
      const style = node[$toStyle]();
      style.color ||= "#000000";
      return style;
    });
    const style = Object.create(null);
    if (this.margin) {
      Object.assign(style, this.margin[$toStyle]());
    }
    if (this.fill?.presence === "visible") {
      Object.assign(style, this.fill[$toStyle]());
    }
    if (this.corner.children.some(node => node.radius !== 0)) {
      const cornerStyles = this.corner.children.map(node => node[$toStyle]());
      if (cornerStyles.length === 2 || cornerStyles.length === 3) {
        const last = cornerStyles.at(-1);
        for (let i = cornerStyles.length; i < 4; i++) {
          cornerStyles.push(last);
        }
      }
      style.borderRadius = cornerStyles.map(s => s.radius).join(" ");
    }
    switch (this.presence) {
      case "invisible":
      case "hidden":
        style.borderStyle = "";
        break;
      case "inactive":
        style.borderStyle = "none";
        break;
      default:
        style.borderStyle = edgeStyles.map(s => s.style).join(" ");
        break;
    }
    style.borderWidth = edgeStyles.map(s => s.width).join(" ");
    style.borderColor = edgeStyles.map(s => s.color).join(" ");
    return style;
  }
}
class Break extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "break", true);
    this.after = getStringOption(attributes.after, ["auto", "contentArea", "pageArea", "pageEven", "pageOdd"]);
    this.afterTarget = attributes.afterTarget || "";
    this.before = getStringOption(attributes.before, ["auto", "contentArea", "pageArea", "pageEven", "pageOdd"]);
    this.beforeTarget = attributes.beforeTarget || "";
    this.bookendLeader = attributes.bookendLeader || "";
    this.bookendTrailer = attributes.bookendTrailer || "";
    this.id = attributes.id || "";
    this.overflowLeader = attributes.overflowLeader || "";
    this.overflowTarget = attributes.overflowTarget || "";
    this.overflowTrailer = attributes.overflowTrailer || "";
    this.startNew = getInteger({
      data: attributes.startNew,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
  }
}
class BreakAfter extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "breakAfter", true);
    this.id = attributes.id || "";
    this.leader = attributes.leader || "";
    this.startNew = getInteger({
      data: attributes.startNew,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.target = attributes.target || "";
    this.targetType = getStringOption(attributes.targetType, ["auto", "contentArea", "pageArea"]);
    this.trailer = attributes.trailer || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.script = null;
  }
}
class BreakBefore extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "breakBefore", true);
    this.id = attributes.id || "";
    this.leader = attributes.leader || "";
    this.startNew = getInteger({
      data: attributes.startNew,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.target = attributes.target || "";
    this.targetType = getStringOption(attributes.targetType, ["auto", "contentArea", "pageArea"]);
    this.trailer = attributes.trailer || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.script = null;
  }
  [$toHTML](availableSpace) {
    this[$extra] = {};
    return HTMLResult.FAILURE;
  }
}
class Button extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "button", true);
    this.highlight = getStringOption(attributes.highlight, ["inverted", "none", "outline", "push"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
  }
  [$toHTML](availableSpace) {
    const parent = this[$getParent]();
    const grandpa = parent[$getParent]();
    const htmlButton = {
      name: "button",
      attributes: {
        id: this[$uid],
        class: ["xfaButton"],
        style: {}
      },
      children: []
    };
    for (const event of grandpa.event.children) {
      if (event.activity !== "click" || !event.script) {
        continue;
      }
      const jsURL = recoverJsURL(event.script[$content]);
      if (!jsURL) {
        continue;
      }
      const href = fixURL(jsURL.url);
      if (!href) {
        continue;
      }
      htmlButton.children.push({
        name: "a",
        attributes: {
          id: "link" + this[$uid],
          href,
          newWindow: jsURL.newWindow,
          class: ["xfaLink"],
          style: {}
        },
        children: []
      });
    }
    return HTMLResult.success(htmlButton);
  }
}
class Calculate extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "calculate", true);
    this.id = attributes.id || "";
    this.override = getStringOption(attributes.override, ["disabled", "error", "ignore", "warning"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.message = null;
    this.script = null;
  }
}
class Caption extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "caption", true);
    this.id = attributes.id || "";
    this.placement = getStringOption(attributes.placement, ["left", "bottom", "inline", "right", "top"]);
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.reserve = Math.ceil(getMeasurement(attributes.reserve));
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.font = null;
    this.margin = null;
    this.para = null;
    this.value = null;
  }
  [$setValue](value) {
    _setValue(this, value);
  }
  [$getExtra](availableSpace) {
    if (!this[$extra]) {
      let {
        width,
        height
      } = availableSpace;
      switch (this.placement) {
        case "left":
        case "right":
        case "inline":
          width = this.reserve <= 0 ? width : this.reserve;
          break;
        case "top":
        case "bottom":
          height = this.reserve <= 0 ? height : this.reserve;
          break;
      }
      this[$extra] = layoutNode(this, {
        width,
        height
      });
    }
    return this[$extra];
  }
  [$toHTML](availableSpace) {
    if (!this.value) {
      return HTMLResult.EMPTY;
    }
    this[$pushPara]();
    const value = this.value[$toHTML](availableSpace).html;
    if (!value) {
      this[$popPara]();
      return HTMLResult.EMPTY;
    }
    const savedReserve = this.reserve;
    if (this.reserve <= 0) {
      const {
        w,
        h
      } = this[$getExtra](availableSpace);
      switch (this.placement) {
        case "left":
        case "right":
        case "inline":
          this.reserve = w;
          break;
        case "top":
        case "bottom":
          this.reserve = h;
          break;
      }
    }
    const children = [];
    if (typeof value === "string") {
      children.push({
        name: "#text",
        value
      });
    } else {
      children.push(value);
    }
    const style = toStyle(this, "font", "margin", "visibility");
    switch (this.placement) {
      case "left":
      case "right":
        if (this.reserve > 0) {
          style.width = measureToString(this.reserve);
        }
        break;
      case "top":
      case "bottom":
        if (this.reserve > 0) {
          style.height = measureToString(this.reserve);
        }
        break;
    }
    setPara(this, null, value);
    this[$popPara]();
    this.reserve = savedReserve;
    return HTMLResult.success({
      name: "div",
      attributes: {
        style,
        class: ["xfaCaption"]
      },
      children
    });
  }
}
class Certificate extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "certificate");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Certificates extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "certificates", true);
    this.credentialServerPolicy = getStringOption(attributes.credentialServerPolicy, ["optional", "required"]);
    this.id = attributes.id || "";
    this.url = attributes.url || "";
    this.urlPolicy = attributes.urlPolicy || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.encryption = null;
    this.issuers = null;
    this.keyUsage = null;
    this.oids = null;
    this.signing = null;
    this.subjectDNs = null;
  }
}
class CheckButton extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "checkButton", true);
    this.id = attributes.id || "";
    this.mark = getStringOption(attributes.mark, ["default", "check", "circle", "cross", "diamond", "square", "star"]);
    this.shape = getStringOption(attributes.shape, ["square", "round"]);
    this.size = getMeasurement(attributes.size, "10pt");
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.border = null;
    this.extras = null;
    this.margin = null;
  }
  [$toHTML](availableSpace) {
    const style = toStyle("margin");
    const size = measureToString(this.size);
    style.width = style.height = size;
    let type;
    let className;
    let groupId;
    const field = this[$getParent]()[$getParent]();
    const items = field.items.children.length && field.items.children[0][$toHTML]().html || [];
    const exportedValue = {
      on: (items[0] !== undefined ? items[0] : "on").toString(),
      off: (items[1] !== undefined ? items[1] : "off").toString()
    };
    const value = field.value?.[$text]() || "off";
    const checked = value === exportedValue.on || undefined;
    const container = field[$getSubformParent]();
    const fieldId = field[$uid];
    let dataId;
    if (container instanceof ExclGroup) {
      groupId = container[$uid];
      type = "radio";
      className = "xfaRadio";
      dataId = container[$data]?.[$uid] || container[$uid];
    } else {
      type = "checkbox";
      className = "xfaCheckbox";
      dataId = field[$data]?.[$uid] || field[$uid];
    }
    const input = {
      name: "input",
      attributes: {
        class: [className],
        style,
        fieldId,
        dataId,
        type,
        checked,
        xfaOn: exportedValue.on,
        xfaOff: exportedValue.off,
        "aria-label": ariaLabel(field),
        "aria-required": false
      }
    };
    if (groupId) {
      input.attributes.name = groupId;
    }
    if (isRequired(field)) {
      input.attributes["aria-required"] = true;
      input.attributes.required = true;
    }
    return HTMLResult.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [input]
    });
  }
}
class ChoiceList extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "choiceList", true);
    this.commitOn = getStringOption(attributes.commitOn, ["select", "exit"]);
    this.id = attributes.id || "";
    this.open = getStringOption(attributes.open, ["userControl", "always", "multiSelect", "onEntry"]);
    this.textEntry = getInteger({
      data: attributes.textEntry,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.border = null;
    this.extras = null;
    this.margin = null;
  }
  [$toHTML](availableSpace) {
    const style = toStyle(this, "border", "margin");
    const ui = this[$getParent]();
    const field = ui[$getParent]();
    const fontSize = field.font?.size || 10;
    const optionStyle = {
      fontSize: \`calc(\${fontSize}px * var(--total-scale-factor))\`
    };
    const children = [];
    if (field.items.children.length > 0) {
      const items = field.items;
      let displayedIndex = 0;
      let saveIndex = 0;
      if (items.children.length === 2) {
        displayedIndex = items.children[0].save;
        saveIndex = 1 - displayedIndex;
      }
      const displayed = items.children[displayedIndex][$toHTML]().html;
      const values = items.children[saveIndex][$toHTML]().html;
      let selected = false;
      const value = field.value?.[$text]() || "";
      for (let i = 0, ii = displayed.length; i < ii; i++) {
        const option = {
          name: "option",
          attributes: {
            value: values[i] || displayed[i],
            style: optionStyle
          },
          value: displayed[i]
        };
        if (values[i] === value) {
          option.attributes.selected = selected = true;
        }
        children.push(option);
      }
      if (!selected) {
        children.splice(0, 0, {
          name: "option",
          attributes: {
            hidden: true,
            selected: true
          },
          value: " "
        });
      }
    }
    const selectAttributes = {
      class: ["xfaSelect"],
      fieldId: field[$uid],
      dataId: field[$data]?.[$uid] || field[$uid],
      style,
      "aria-label": ariaLabel(field),
      "aria-required": false
    };
    if (isRequired(field)) {
      selectAttributes["aria-required"] = true;
      selectAttributes.required = true;
    }
    if (this.open === "multiSelect") {
      selectAttributes.multiple = true;
    }
    return HTMLResult.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [{
        name: "select",
        children,
        attributes: selectAttributes
      }]
    });
  }
}
class Color extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "color", true);
    this.cSpace = getStringOption(attributes.cSpace, ["SRGB"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.value = attributes.value ? getColor(attributes.value) : "";
    this.extras = null;
  }
  [$hasSettableValue]() {
    return false;
  }
  [$toStyle]() {
    return this.value ? Util.makeHexColor(this.value.r, this.value.g, this.value.b) : null;
  }
}
class Comb extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "comb");
    this.id = attributes.id || "";
    this.numberOfCells = getInteger({
      data: attributes.numberOfCells,
      defaultValue: 0,
      validate: x => x >= 0
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Connect extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "connect", true);
    this.connection = attributes.connection || "";
    this.id = attributes.id || "";
    this.ref = attributes.ref || "";
    this.usage = getStringOption(attributes.usage, ["exportAndImport", "exportOnly", "importOnly"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.picture = null;
  }
}
class ContentArea extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "contentArea", true);
    this.h = getMeasurement(attributes.h);
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.w = getMeasurement(attributes.w);
    this.x = getMeasurement(attributes.x, "0pt");
    this.y = getMeasurement(attributes.y, "0pt");
    this.desc = null;
    this.extras = null;
  }
  [$toHTML](availableSpace) {
    const left = measureToString(this.x);
    const top = measureToString(this.y);
    const style = {
      left,
      top,
      width: measureToString(this.w),
      height: measureToString(this.h)
    };
    const classNames = ["xfaContentarea"];
    if (isPrintOnly(this)) {
      classNames.push("xfaPrintOnly");
    }
    return HTMLResult.success({
      name: "div",
      children: [],
      attributes: {
        style,
        class: classNames,
        id: this[$uid]
      }
    });
  }
}
class Corner extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "corner", true);
    this.id = attributes.id || "";
    this.inverted = getInteger({
      data: attributes.inverted,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.join = getStringOption(attributes.join, ["square", "round"]);
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.radius = getMeasurement(attributes.radius);
    this.stroke = getStringOption(attributes.stroke, ["solid", "dashDot", "dashDotDot", "dashed", "dotted", "embossed", "etched", "lowered", "raised"]);
    this.thickness = getMeasurement(attributes.thickness, "0.5pt");
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.color = null;
    this.extras = null;
  }
  [$toStyle]() {
    const style = toStyle(this, "visibility");
    style.radius = measureToString(this.join === "square" ? 0 : this.radius);
    return style;
  }
}
class DateElement extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "date");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    const date = this[$content].trim();
    this[$content] = date ? new Date(date) : null;
  }
  [$toHTML](availableSpace) {
    return valueToHtml(this[$content] ? this[$content].toString() : "");
  }
}
class DateTime extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "dateTime");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    const date = this[$content].trim();
    this[$content] = date ? new Date(date) : null;
  }
  [$toHTML](availableSpace) {
    return valueToHtml(this[$content] ? this[$content].toString() : "");
  }
}
class DateTimeEdit extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "dateTimeEdit", true);
    this.hScrollPolicy = getStringOption(attributes.hScrollPolicy, ["auto", "off", "on"]);
    this.id = attributes.id || "";
    this.picker = getStringOption(attributes.picker, ["host", "none"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.border = null;
    this.comb = null;
    this.extras = null;
    this.margin = null;
  }
  [$toHTML](availableSpace) {
    const style = toStyle(this, "border", "font", "margin");
    const field = this[$getParent]()[$getParent]();
    const html = {
      name: "input",
      attributes: {
        type: "text",
        fieldId: field[$uid],
        dataId: field[$data]?.[$uid] || field[$uid],
        class: ["xfaTextfield"],
        style,
        "aria-label": ariaLabel(field),
        "aria-required": false
      }
    };
    if (isRequired(field)) {
      html.attributes["aria-required"] = true;
      html.attributes.required = true;
    }
    return HTMLResult.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [html]
    });
  }
}
class Decimal extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "decimal");
    this.fracDigits = getInteger({
      data: attributes.fracDigits,
      defaultValue: 2,
      validate: x => true
    });
    this.id = attributes.id || "";
    this.leadDigits = getInteger({
      data: attributes.leadDigits,
      defaultValue: -1,
      validate: x => true
    });
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    const number = parseFloat(this[$content].trim());
    this[$content] = isNaN(number) ? null : number;
  }
  [$toHTML](availableSpace) {
    return valueToHtml(this[$content] !== null ? this[$content].toString() : "");
  }
}
class DefaultUi extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "defaultUi", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
  }
}
class Desc extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "desc", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.boolean = new XFAObjectArray();
    this.date = new XFAObjectArray();
    this.dateTime = new XFAObjectArray();
    this.decimal = new XFAObjectArray();
    this.exData = new XFAObjectArray();
    this.float = new XFAObjectArray();
    this.image = new XFAObjectArray();
    this.integer = new XFAObjectArray();
    this.text = new XFAObjectArray();
    this.time = new XFAObjectArray();
  }
}
class DigestMethod extends OptionObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "digestMethod", ["", "SHA1", "SHA256", "SHA512", "RIPEMD160"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class DigestMethods extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "digestMethods", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.digestMethod = new XFAObjectArray();
  }
}
class Draw extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "draw", true);
    this.anchorType = getStringOption(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
    this.colSpan = getInteger({
      data: attributes.colSpan,
      defaultValue: 1,
      validate: n => n >= 1 || n === -1
    });
    this.h = attributes.h ? getMeasurement(attributes.h) : "";
    this.hAlign = getStringOption(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
    this.id = attributes.id || "";
    this.locale = attributes.locale || "";
    this.maxH = getMeasurement(attributes.maxH, "0pt");
    this.maxW = getMeasurement(attributes.maxW, "0pt");
    this.minH = getMeasurement(attributes.minH, "0pt");
    this.minW = getMeasurement(attributes.minW, "0pt");
    this.name = attributes.name || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.relevant = getRelevant(attributes.relevant);
    this.rotate = getInteger({
      data: attributes.rotate,
      defaultValue: 0,
      validate: x => x % 90 === 0
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.w = attributes.w ? getMeasurement(attributes.w) : "";
    this.x = getMeasurement(attributes.x, "0pt");
    this.y = getMeasurement(attributes.y, "0pt");
    this.assist = null;
    this.border = null;
    this.caption = null;
    this.desc = null;
    this.extras = null;
    this.font = null;
    this.keep = null;
    this.margin = null;
    this.para = null;
    this.traversal = null;
    this.ui = null;
    this.value = null;
    this.setProperty = new XFAObjectArray();
  }
  [$setValue](value) {
    _setValue(this, value);
  }
  [$toHTML](availableSpace) {
    setTabIndex(this);
    if (this.presence === "hidden" || this.presence === "inactive") {
      return HTMLResult.EMPTY;
    }
    fixDimensions(this);
    this[$pushPara]();
    const savedW = this.w;
    const savedH = this.h;
    const {
      w,
      h,
      isBroken
    } = layoutNode(this, availableSpace);
    if (w && this.w === "") {
      if (isBroken && this[$getSubformParent]()[$isThereMoreWidth]()) {
        this[$popPara]();
        return HTMLResult.FAILURE;
      }
      this.w = w;
    }
    if (h && this.h === "") {
      this.h = h;
    }
    setFirstUnsplittable(this);
    if (!checkDimensions(this, availableSpace)) {
      this.w = savedW;
      this.h = savedH;
      this[$popPara]();
      return HTMLResult.FAILURE;
    }
    unsetFirstUnsplittable(this);
    const style = toStyle(this, "font", "hAlign", "dimensions", "position", "presence", "rotate", "anchorType", "border", "margin");
    setMinMaxDimensions(this, style);
    if (style.margin) {
      style.padding = style.margin;
      delete style.margin;
    }
    const classNames = ["xfaDraw"];
    if (this.font) {
      classNames.push("xfaFont");
    }
    if (isPrintOnly(this)) {
      classNames.push("xfaPrintOnly");
    }
    const attributes = {
      style,
      id: this[$uid],
      class: classNames
    };
    if (this.name) {
      attributes.xfaName = this.name;
    }
    const html = {
      name: "div",
      attributes,
      children: []
    };
    applyAssist(this, attributes);
    const bbox = computeBbox(this, html, availableSpace);
    const value = this.value ? this.value[$toHTML](availableSpace).html : null;
    if (value === null) {
      this.w = savedW;
      this.h = savedH;
      this[$popPara]();
      return HTMLResult.success(createWrapper(this, html), bbox);
    }
    html.children.push(value);
    setPara(this, style, value);
    this.w = savedW;
    this.h = savedH;
    this[$popPara]();
    return HTMLResult.success(createWrapper(this, html), bbox);
  }
}
class Edge extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "edge", true);
    this.cap = getStringOption(attributes.cap, ["square", "butt", "round"]);
    this.id = attributes.id || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.stroke = getStringOption(attributes.stroke, ["solid", "dashDot", "dashDotDot", "dashed", "dotted", "embossed", "etched", "lowered", "raised"]);
    this.thickness = getMeasurement(attributes.thickness, "0.5pt");
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.color = null;
    this.extras = null;
  }
  [$toStyle]() {
    const style = toStyle(this, "visibility");
    Object.assign(style, {
      linecap: this.cap,
      width: measureToString(this.thickness),
      color: this.color ? this.color[$toStyle]() : "#000000",
      style: ""
    });
    if (this.presence !== "visible") {
      style.style = "none";
    } else {
      switch (this.stroke) {
        case "solid":
          style.style = "solid";
          break;
        case "dashDot":
          style.style = "dashed";
          break;
        case "dashDotDot":
          style.style = "dashed";
          break;
        case "dashed":
          style.style = "dashed";
          break;
        case "dotted":
          style.style = "dotted";
          break;
        case "embossed":
          style.style = "ridge";
          break;
        case "etched":
          style.style = "groove";
          break;
        case "lowered":
          style.style = "inset";
          break;
        case "raised":
          style.style = "outset";
          break;
      }
    }
    return style;
  }
}
class Encoding extends OptionObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "encoding", ["adbe.x509.rsa_sha1", "adbe.pkcs7.detached", "adbe.pkcs7.sha1"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Encodings extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "encodings", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.encoding = new XFAObjectArray();
  }
}
class Encrypt extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "encrypt", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.certificate = null;
  }
}
class EncryptData extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "encryptData", true);
    this.id = attributes.id || "";
    this.operation = getStringOption(attributes.operation, ["encrypt", "decrypt"]);
    this.target = attributes.target || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.filter = null;
    this.manifest = null;
  }
}
class Encryption extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "encryption", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.certificate = new XFAObjectArray();
  }
}
class EncryptionMethod extends OptionObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "encryptionMethod", ["", "AES256-CBC", "TRIPLEDES-CBC", "AES128-CBC", "AES192-CBC"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class EncryptionMethods extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "encryptionMethods", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.encryptionMethod = new XFAObjectArray();
  }
}
class Event extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "event", true);
    this.activity = getStringOption(attributes.activity, ["click", "change", "docClose", "docReady", "enter", "exit", "full", "indexChange", "initialize", "mouseDown", "mouseEnter", "mouseExit", "mouseUp", "postExecute", "postOpen", "postPrint", "postSave", "postSign", "postSubmit", "preExecute", "preOpen", "prePrint", "preSave", "preSign", "preSubmit", "ready", "validationState"]);
    this.id = attributes.id || "";
    this.listen = getStringOption(attributes.listen, ["refOnly", "refAndDescendents"]);
    this.name = attributes.name || "";
    this.ref = attributes.ref || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.encryptData = null;
    this.execute = null;
    this.script = null;
    this.signData = null;
    this.submit = null;
  }
}
class ExData extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "exData");
    this.contentType = attributes.contentType || "";
    this.href = attributes.href || "";
    this.id = attributes.id || "";
    this.maxLength = getInteger({
      data: attributes.maxLength,
      defaultValue: -1,
      validate: x => x >= -1
    });
    this.name = attributes.name || "";
    this.rid = attributes.rid || "";
    this.transferEncoding = getStringOption(attributes.transferEncoding, ["none", "base64", "package"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$isCDATAXml]() {
    return this.contentType === "text/html";
  }
  [$onChild](child) {
    if (this.contentType === "text/html" && child[$namespaceId] === NamespaceIds.xhtml.id) {
      this[$content] = child;
      return true;
    }
    if (this.contentType === "text/xml") {
      this[$content] = child;
      return true;
    }
    return false;
  }
  [$toHTML](availableSpace) {
    if (this.contentType !== "text/html" || !this[$content]) {
      return HTMLResult.EMPTY;
    }
    return this[$content][$toHTML](availableSpace);
  }
}
class ExObject extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "exObject", true);
    this.archive = attributes.archive || "";
    this.classId = attributes.classId || "";
    this.codeBase = attributes.codeBase || "";
    this.codeType = attributes.codeType || "";
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.boolean = new XFAObjectArray();
    this.date = new XFAObjectArray();
    this.dateTime = new XFAObjectArray();
    this.decimal = new XFAObjectArray();
    this.exData = new XFAObjectArray();
    this.exObject = new XFAObjectArray();
    this.float = new XFAObjectArray();
    this.image = new XFAObjectArray();
    this.integer = new XFAObjectArray();
    this.text = new XFAObjectArray();
    this.time = new XFAObjectArray();
  }
}
class ExclGroup extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "exclGroup", true);
    this.access = getStringOption(attributes.access, ["open", "nonInteractive", "protected", "readOnly"]);
    this.accessKey = attributes.accessKey || "";
    this.anchorType = getStringOption(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
    this.colSpan = getInteger({
      data: attributes.colSpan,
      defaultValue: 1,
      validate: n => n >= 1 || n === -1
    });
    this.h = attributes.h ? getMeasurement(attributes.h) : "";
    this.hAlign = getStringOption(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
    this.id = attributes.id || "";
    this.layout = getStringOption(attributes.layout, ["position", "lr-tb", "rl-row", "rl-tb", "row", "table", "tb"]);
    this.maxH = getMeasurement(attributes.maxH, "0pt");
    this.maxW = getMeasurement(attributes.maxW, "0pt");
    this.minH = getMeasurement(attributes.minH, "0pt");
    this.minW = getMeasurement(attributes.minW, "0pt");
    this.name = attributes.name || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.w = attributes.w ? getMeasurement(attributes.w) : "";
    this.x = getMeasurement(attributes.x, "0pt");
    this.y = getMeasurement(attributes.y, "0pt");
    this.assist = null;
    this.bind = null;
    this.border = null;
    this.calculate = null;
    this.caption = null;
    this.desc = null;
    this.extras = null;
    this.margin = null;
    this.para = null;
    this.traversal = null;
    this.validate = null;
    this.connect = new XFAObjectArray();
    this.event = new XFAObjectArray();
    this.field = new XFAObjectArray();
    this.setProperty = new XFAObjectArray();
  }
  [$isBindable]() {
    return true;
  }
  [$hasSettableValue]() {
    return true;
  }
  [$setValue](value) {
    for (const field of this.field.children) {
      if (!field.value) {
        const nodeValue = new Value({});
        field[$appendChild](nodeValue);
        field.value = nodeValue;
      }
      field.value[$setValue](value);
    }
  }
  [$isThereMoreWidth]() {
    return this.layout.endsWith("-tb") && this[$extra].attempt === 0 && this[$extra].numberInLine > 0 || this[$getParent]()[$isThereMoreWidth]();
  }
  [$isSplittable]() {
    const parent = this[$getSubformParent]();
    if (!parent[$isSplittable]()) {
      return false;
    }
    if (this[$extra]._isSplittable !== undefined) {
      return this[$extra]._isSplittable;
    }
    if (this.layout === "position" || this.layout.includes("row")) {
      this[$extra]._isSplittable = false;
      return false;
    }
    if (parent.layout?.endsWith("-tb") && parent[$extra].numberInLine !== 0) {
      return false;
    }
    this[$extra]._isSplittable = true;
    return true;
  }
  [$flushHTML]() {
    return flushHTML(this);
  }
  [$addHTML](html, bbox) {
    addHTML(this, html, bbox);
  }
  [$getAvailableSpace]() {
    return getAvailableSpace(this);
  }
  [$toHTML](availableSpace) {
    setTabIndex(this);
    if (this.presence === "hidden" || this.presence === "inactive" || this.h === 0 || this.w === 0) {
      return HTMLResult.EMPTY;
    }
    fixDimensions(this);
    const children = [];
    const attributes = {
      id: this[$uid],
      class: []
    };
    setAccess(this, attributes.class);
    if (!this[$extra]) {
      this[$extra] = Object.create(null);
    }
    Object.assign(this[$extra], {
      children,
      attributes,
      attempt: 0,
      line: null,
      numberInLine: 0,
      availableSpace: {
        width: Math.min(this.w || Infinity, availableSpace.width),
        height: Math.min(this.h || Infinity, availableSpace.height)
      },
      width: 0,
      height: 0,
      prevHeight: 0,
      currentWidth: 0
    });
    const isSplittable = this[$isSplittable]();
    if (!isSplittable) {
      setFirstUnsplittable(this);
    }
    if (!checkDimensions(this, availableSpace)) {
      return HTMLResult.FAILURE;
    }
    const filter = new Set(["field"]);
    if (this.layout.includes("row")) {
      const columnWidths = this[$getSubformParent]().columnWidths;
      if (Array.isArray(columnWidths) && columnWidths.length > 0) {
        this[$extra].columnWidths = columnWidths;
        this[$extra].currentColumn = 0;
      }
    }
    const style = toStyle(this, "anchorType", "dimensions", "position", "presence", "border", "margin", "hAlign");
    const classNames = ["xfaExclgroup"];
    const cl = layoutClass(this);
    if (cl) {
      classNames.push(cl);
    }
    if (isPrintOnly(this)) {
      classNames.push("xfaPrintOnly");
    }
    attributes.style = style;
    attributes.class = classNames;
    if (this.name) {
      attributes.xfaName = this.name;
    }
    this[$pushPara]();
    const isLrTb = this.layout === "lr-tb" || this.layout === "rl-tb";
    const maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;
    for (; this[$extra].attempt < maxRun; this[$extra].attempt++) {
      if (isLrTb && this[$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1) {
        this[$extra].numberInLine = 0;
      }
      const result = this[$childrenToHTML]({
        filter,
        include: true
      });
      if (result.success) {
        break;
      }
      if (result.isBreak()) {
        this[$popPara]();
        return result;
      }
      if (isLrTb && this[$extra].attempt === 0 && this[$extra].numberInLine === 0 && !this[$getTemplateRoot]()[$extra].noLayoutFailure) {
        this[$extra].attempt = maxRun;
        break;
      }
    }
    this[$popPara]();
    if (!isSplittable) {
      unsetFirstUnsplittable(this);
    }
    if (this[$extra].attempt === maxRun) {
      if (!isSplittable) {
        delete this[$extra];
      }
      return HTMLResult.FAILURE;
    }
    let marginH = 0;
    let marginV = 0;
    if (this.margin) {
      marginH = this.margin.leftInset + this.margin.rightInset;
      marginV = this.margin.topInset + this.margin.bottomInset;
    }
    const width = Math.max(this[$extra].width + marginH, this.w || 0);
    const height = Math.max(this[$extra].height + marginV, this.h || 0);
    const bbox = [this.x, this.y, width, height];
    if (this.w === "") {
      style.width = measureToString(width);
    }
    if (this.h === "") {
      style.height = measureToString(height);
    }
    const html = {
      name: "div",
      attributes,
      children
    };
    applyAssist(this, attributes);
    delete this[$extra];
    return HTMLResult.success(createWrapper(this, html), bbox);
  }
}
class Execute extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "execute");
    this.connection = attributes.connection || "";
    this.executeType = getStringOption(attributes.executeType, ["import", "remerge"]);
    this.id = attributes.id || "";
    this.runAt = getStringOption(attributes.runAt, ["client", "both", "server"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Extras extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "extras", true);
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.boolean = new XFAObjectArray();
    this.date = new XFAObjectArray();
    this.dateTime = new XFAObjectArray();
    this.decimal = new XFAObjectArray();
    this.exData = new XFAObjectArray();
    this.extras = new XFAObjectArray();
    this.float = new XFAObjectArray();
    this.image = new XFAObjectArray();
    this.integer = new XFAObjectArray();
    this.text = new XFAObjectArray();
    this.time = new XFAObjectArray();
  }
}
class Field extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "field", true);
    this.access = getStringOption(attributes.access, ["open", "nonInteractive", "protected", "readOnly"]);
    this.accessKey = attributes.accessKey || "";
    this.anchorType = getStringOption(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
    this.colSpan = getInteger({
      data: attributes.colSpan,
      defaultValue: 1,
      validate: n => n >= 1 || n === -1
    });
    this.h = attributes.h ? getMeasurement(attributes.h) : "";
    this.hAlign = getStringOption(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
    this.id = attributes.id || "";
    this.locale = attributes.locale || "";
    this.maxH = getMeasurement(attributes.maxH, "0pt");
    this.maxW = getMeasurement(attributes.maxW, "0pt");
    this.minH = getMeasurement(attributes.minH, "0pt");
    this.minW = getMeasurement(attributes.minW, "0pt");
    this.name = attributes.name || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.relevant = getRelevant(attributes.relevant);
    this.rotate = getInteger({
      data: attributes.rotate,
      defaultValue: 0,
      validate: x => x % 90 === 0
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.w = attributes.w ? getMeasurement(attributes.w) : "";
    this.x = getMeasurement(attributes.x, "0pt");
    this.y = getMeasurement(attributes.y, "0pt");
    this.assist = null;
    this.bind = null;
    this.border = null;
    this.calculate = null;
    this.caption = null;
    this.desc = null;
    this.extras = null;
    this.font = null;
    this.format = null;
    this.items = new XFAObjectArray(2);
    this.keep = null;
    this.margin = null;
    this.para = null;
    this.traversal = null;
    this.ui = null;
    this.validate = null;
    this.value = null;
    this.bindItems = new XFAObjectArray();
    this.connect = new XFAObjectArray();
    this.event = new XFAObjectArray();
    this.setProperty = new XFAObjectArray();
  }
  [$isBindable]() {
    return true;
  }
  [$setValue](value) {
    _setValue(this, value);
  }
  [$toHTML](availableSpace) {
    setTabIndex(this);
    if (!this.ui) {
      this.ui = new Ui({});
      this.ui[$globalData] = this[$globalData];
      this[$appendChild](this.ui);
      let node;
      switch (this.items.children.length) {
        case 0:
          node = new TextEdit({});
          this.ui.textEdit = node;
          break;
        case 1:
          node = new CheckButton({});
          this.ui.checkButton = node;
          break;
        case 2:
          node = new ChoiceList({});
          this.ui.choiceList = node;
          break;
      }
      this.ui[$appendChild](node);
    }
    if (!this.ui || this.presence === "hidden" || this.presence === "inactive" || this.h === 0 || this.w === 0) {
      return HTMLResult.EMPTY;
    }
    if (this.caption) {
      delete this.caption[$extra];
    }
    this[$pushPara]();
    const caption = this.caption ? this.caption[$toHTML](availableSpace).html : null;
    const savedW = this.w;
    const savedH = this.h;
    let marginH = 0;
    let marginV = 0;
    if (this.margin) {
      marginH = this.margin.leftInset + this.margin.rightInset;
      marginV = this.margin.topInset + this.margin.bottomInset;
    }
    let borderDims = null;
    if (this.w === "" || this.h === "") {
      let width = null;
      let height = null;
      let uiW = 0;
      let uiH = 0;
      if (this.ui.checkButton) {
        uiW = uiH = this.ui.checkButton.size;
      } else {
        const {
          w,
          h
        } = layoutNode(this, availableSpace);
        if (w !== null) {
          uiW = w;
          uiH = h;
        } else {
          uiH = fonts_getMetrics(this.font, true).lineNoGap;
        }
      }
      borderDims = getBorderDims(this.ui[$getExtra]());
      uiW += borderDims.w;
      uiH += borderDims.h;
      if (this.caption) {
        const {
          w,
          h,
          isBroken
        } = this.caption[$getExtra](availableSpace);
        if (isBroken && this[$getSubformParent]()[$isThereMoreWidth]()) {
          this[$popPara]();
          return HTMLResult.FAILURE;
        }
        width = w;
        height = h;
        switch (this.caption.placement) {
          case "left":
          case "right":
          case "inline":
            width += uiW;
            break;
          case "top":
          case "bottom":
            height += uiH;
            break;
        }
      } else {
        width = uiW;
        height = uiH;
      }
      if (width && this.w === "") {
        width += marginH;
        this.w = Math.min(this.maxW <= 0 ? Infinity : this.maxW, this.minW + 1 < width ? width : this.minW);
      }
      if (height && this.h === "") {
        height += marginV;
        this.h = Math.min(this.maxH <= 0 ? Infinity : this.maxH, this.minH + 1 < height ? height : this.minH);
      }
    }
    this[$popPara]();
    fixDimensions(this);
    setFirstUnsplittable(this);
    if (!checkDimensions(this, availableSpace)) {
      this.w = savedW;
      this.h = savedH;
      this[$popPara]();
      return HTMLResult.FAILURE;
    }
    unsetFirstUnsplittable(this);
    const style = toStyle(this, "font", "dimensions", "position", "rotate", "anchorType", "presence", "margin", "hAlign");
    setMinMaxDimensions(this, style);
    const classNames = ["xfaField"];
    if (this.font) {
      classNames.push("xfaFont");
    }
    if (isPrintOnly(this)) {
      classNames.push("xfaPrintOnly");
    }
    const attributes = {
      style,
      id: this[$uid],
      class: classNames
    };
    if (style.margin) {
      style.padding = style.margin;
      delete style.margin;
    }
    setAccess(this, classNames);
    if (this.name) {
      attributes.xfaName = this.name;
    }
    const children = [];
    const html = {
      name: "div",
      attributes,
      children
    };
    applyAssist(this, attributes);
    const borderStyle = this.border ? this.border[$toStyle]() : null;
    const bbox = computeBbox(this, html, availableSpace);
    const ui = this.ui[$toHTML]().html;
    if (!ui) {
      Object.assign(style, borderStyle);
      return HTMLResult.success(createWrapper(this, html), bbox);
    }
    if (this[$tabIndex]) {
      if (ui.children?.[0]) {
        ui.children[0].attributes.tabindex = this[$tabIndex];
      } else {
        ui.attributes.tabindex = this[$tabIndex];
      }
    }
    if (!ui.attributes.style) {
      ui.attributes.style = Object.create(null);
    }
    let aElement = null;
    if (this.ui.button) {
      if (ui.children.length === 1) {
        [aElement] = ui.children.splice(0, 1);
      }
      Object.assign(ui.attributes.style, borderStyle);
    } else {
      Object.assign(style, borderStyle);
    }
    children.push(ui);
    if (this.value) {
      if (this.ui.imageEdit) {
        ui.children.push(this.value[$toHTML]().html);
      } else if (!this.ui.button) {
        let value = "";
        if (this.value.exData) {
          value = this.value.exData[$text]();
        } else if (this.value.text) {
          value = this.value.text[$getExtra]();
        } else {
          const htmlValue = this.value[$toHTML]().html;
          if (htmlValue !== null) {
            value = htmlValue.children[0].value;
          }
        }
        if (this.ui.textEdit && this.value.text?.maxChars) {
          ui.children[0].attributes.maxLength = this.value.text.maxChars;
        }
        if (value) {
          if (this.ui.numericEdit) {
            value = parseFloat(value);
            value = isNaN(value) ? "" : value.toString();
          }
          if (ui.children[0].name === "textarea") {
            ui.children[0].attributes.textContent = value;
          } else {
            ui.children[0].attributes.value = value;
          }
        }
      }
    }
    if (!this.ui.imageEdit && ui.children?.[0] && this.h) {
      borderDims = borderDims || getBorderDims(this.ui[$getExtra]());
      let captionHeight = 0;
      if (this.caption && ["top", "bottom"].includes(this.caption.placement)) {
        captionHeight = this.caption.reserve;
        if (captionHeight <= 0) {
          captionHeight = this.caption[$getExtra](availableSpace).h;
        }
        const inputHeight = this.h - captionHeight - marginV - borderDims.h;
        ui.children[0].attributes.style.height = measureToString(inputHeight);
      } else {
        ui.children[0].attributes.style.height = "100%";
      }
    }
    if (aElement) {
      ui.children.push(aElement);
    }
    if (!caption) {
      if (ui.attributes.class) {
        ui.attributes.class.push("xfaLeft");
      }
      this.w = savedW;
      this.h = savedH;
      return HTMLResult.success(createWrapper(this, html), bbox);
    }
    if (this.ui.button) {
      if (style.padding) {
        delete style.padding;
      }
      if (caption.name === "div") {
        caption.name = "span";
      }
      ui.children.push(caption);
      return HTMLResult.success(html, bbox);
    } else if (this.ui.checkButton) {
      caption.attributes.class[0] = "xfaCaptionForCheckButton";
    }
    if (!ui.attributes.class) {
      ui.attributes.class = [];
    }
    ui.children.splice(0, 0, caption);
    switch (this.caption.placement) {
      case "left":
        ui.attributes.class.push("xfaLeft");
        break;
      case "right":
        ui.attributes.class.push("xfaRight");
        break;
      case "top":
        ui.attributes.class.push("xfaTop");
        break;
      case "bottom":
        ui.attributes.class.push("xfaBottom");
        break;
      case "inline":
        ui.attributes.class.push("xfaLeft");
        break;
    }
    this.w = savedW;
    this.h = savedH;
    return HTMLResult.success(createWrapper(this, html), bbox);
  }
}
class Fill extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "fill", true);
    this.id = attributes.id || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.color = null;
    this.extras = null;
    this.linear = null;
    this.pattern = null;
    this.radial = null;
    this.solid = null;
    this.stipple = null;
  }
  [$toStyle]() {
    const parent = this[$getParent]();
    const grandpa = parent[$getParent]();
    const ggrandpa = grandpa[$getParent]();
    const style = Object.create(null);
    let propName = "color";
    let altPropName = propName;
    if (parent instanceof Border) {
      propName = "background-color";
      altPropName = "background";
      if (ggrandpa instanceof Ui) {
        style.backgroundColor = "white";
      }
    }
    if (parent instanceof Rectangle || parent instanceof Arc) {
      propName = altPropName = "fill";
      style.fill = "white";
    }
    for (const name of Object.getOwnPropertyNames(this)) {
      if (name === "extras" || name === "color") {
        continue;
      }
      const obj = this[name];
      if (!(obj instanceof XFAObject)) {
        continue;
      }
      const color = obj[$toStyle](this.color);
      if (color) {
        style[color.startsWith("#") ? propName : altPropName] = color;
      }
      return style;
    }
    if (this.color?.value) {
      const color = this.color[$toStyle]();
      style[color.startsWith("#") ? propName : altPropName] = color;
    }
    return style;
  }
}
class Filter extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "filter", true);
    this.addRevocationInfo = getStringOption(attributes.addRevocationInfo, ["", "required", "optional", "none"]);
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.version = getInteger({
      data: this.version,
      defaultValue: 5,
      validate: x => x >= 1 && x <= 5
    });
    this.appearanceFilter = null;
    this.certificates = null;
    this.digestMethods = null;
    this.encodings = null;
    this.encryptionMethods = null;
    this.handler = null;
    this.lockDocument = null;
    this.mdp = null;
    this.reasons = null;
    this.timeStamp = null;
  }
}
class Float extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "float");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    const number = parseFloat(this[$content].trim());
    this[$content] = isNaN(number) ? null : number;
  }
  [$toHTML](availableSpace) {
    return valueToHtml(this[$content] !== null ? this[$content].toString() : "");
  }
}
class template_Font extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "font", true);
    this.baselineShift = getMeasurement(attributes.baselineShift);
    this.fontHorizontalScale = getFloat({
      data: attributes.fontHorizontalScale,
      defaultValue: 100,
      validate: x => x >= 0
    });
    this.fontVerticalScale = getFloat({
      data: attributes.fontVerticalScale,
      defaultValue: 100,
      validate: x => x >= 0
    });
    this.id = attributes.id || "";
    this.kerningMode = getStringOption(attributes.kerningMode, ["none", "pair"]);
    this.letterSpacing = getMeasurement(attributes.letterSpacing, "0");
    this.lineThrough = getInteger({
      data: attributes.lineThrough,
      defaultValue: 0,
      validate: x => x === 1 || x === 2
    });
    this.lineThroughPeriod = getStringOption(attributes.lineThroughPeriod, ["all", "word"]);
    this.overline = getInteger({
      data: attributes.overline,
      defaultValue: 0,
      validate: x => x === 1 || x === 2
    });
    this.overlinePeriod = getStringOption(attributes.overlinePeriod, ["all", "word"]);
    this.posture = getStringOption(attributes.posture, ["normal", "italic"]);
    this.size = getMeasurement(attributes.size, "10pt");
    this.typeface = attributes.typeface || "Courier";
    this.underline = getInteger({
      data: attributes.underline,
      defaultValue: 0,
      validate: x => x === 1 || x === 2
    });
    this.underlinePeriod = getStringOption(attributes.underlinePeriod, ["all", "word"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.weight = getStringOption(attributes.weight, ["normal", "bold"]);
    this.extras = null;
    this.fill = null;
  }
  [$clean](builder) {
    super[$clean](builder);
    this[$globalData].usedTypefaces.add(this.typeface);
  }
  [$toStyle]() {
    const style = toStyle(this, "fill");
    const color = style.color;
    if (color) {
      if (color === "#000000") {
        delete style.color;
      } else if (!color.startsWith("#")) {
        style.background = color;
        style.backgroundClip = "text";
        style.color = "transparent";
      }
    }
    if (this.baselineShift) {
      style.verticalAlign = measureToString(this.baselineShift);
    }
    style.fontKerning = this.kerningMode === "none" ? "none" : "normal";
    style.letterSpacing = measureToString(this.letterSpacing);
    if (this.lineThrough !== 0) {
      style.textDecoration = "line-through";
      if (this.lineThrough === 2) {
        style.textDecorationStyle = "double";
      }
    }
    if (this.overline !== 0) {
      style.textDecoration = "overline";
      if (this.overline === 2) {
        style.textDecorationStyle = "double";
      }
    }
    style.fontStyle = this.posture;
    style.fontSize = measureToString(0.99 * this.size);
    setFontFamily(this, this, this[$globalData].fontFinder, style);
    if (this.underline !== 0) {
      style.textDecoration = "underline";
      if (this.underline === 2) {
        style.textDecorationStyle = "double";
      }
    }
    style.fontWeight = this.weight;
    return style;
  }
}
class Format extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "format", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.picture = null;
  }
}
class Handler extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "handler");
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Hyphenation extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "hyphenation");
    this.excludeAllCaps = getInteger({
      data: attributes.excludeAllCaps,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.excludeInitialCap = getInteger({
      data: attributes.excludeInitialCap,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.hyphenate = getInteger({
      data: attributes.hyphenate,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.id = attributes.id || "";
    this.pushCharacterCount = getInteger({
      data: attributes.pushCharacterCount,
      defaultValue: 3,
      validate: x => x >= 0
    });
    this.remainCharacterCount = getInteger({
      data: attributes.remainCharacterCount,
      defaultValue: 3,
      validate: x => x >= 0
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.wordCharacterCount = getInteger({
      data: attributes.wordCharacterCount,
      defaultValue: 7,
      validate: x => x >= 0
    });
  }
}
class Image extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "image");
    this.aspect = getStringOption(attributes.aspect, ["fit", "actual", "height", "none", "width"]);
    this.contentType = attributes.contentType || "";
    this.href = attributes.href || "";
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.transferEncoding = getStringOption(attributes.transferEncoding, ["base64", "none", "package"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$toHTML]() {
    if (this.contentType && !MIMES.has(this.contentType.toLowerCase())) {
      return HTMLResult.EMPTY;
    }
    let buffer = this[$globalData].images && this[$globalData].images.get(this.href);
    if (!buffer && (this.href || !this[$content])) {
      return HTMLResult.EMPTY;
    }
    if (!buffer && this.transferEncoding === "base64") {
      buffer = fromBase64Util(this[$content]);
    }
    if (!buffer) {
      return HTMLResult.EMPTY;
    }
    if (!this.contentType) {
      for (const [header, type] of IMAGES_HEADERS) {
        if (buffer.length > header.length && header.every((x, i) => x === buffer[i])) {
          this.contentType = type;
          break;
        }
      }
      if (!this.contentType) {
        return HTMLResult.EMPTY;
      }
    }
    const blob = new Blob([buffer], {
      type: this.contentType
    });
    let style;
    switch (this.aspect) {
      case "fit":
      case "actual":
        break;
      case "height":
        style = {
          height: "100%",
          objectFit: "fill"
        };
        break;
      case "none":
        style = {
          width: "100%",
          height: "100%",
          objectFit: "fill"
        };
        break;
      case "width":
        style = {
          width: "100%",
          objectFit: "fill"
        };
        break;
    }
    const parent = this[$getParent]();
    return HTMLResult.success({
      name: "img",
      attributes: {
        class: ["xfaImage"],
        style,
        src: URL.createObjectURL(blob),
        alt: parent ? ariaLabel(parent[$getParent]()) : null
      }
    });
  }
}
class ImageEdit extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "imageEdit", true);
    this.data = getStringOption(attributes.data, ["link", "embed"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.border = null;
    this.extras = null;
    this.margin = null;
  }
  [$toHTML](availableSpace) {
    if (this.data === "embed") {
      return HTMLResult.success({
        name: "div",
        children: [],
        attributes: {}
      });
    }
    return HTMLResult.EMPTY;
  }
}
class Integer extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "integer");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    const number = parseInt(this[$content].trim(), 10);
    this[$content] = isNaN(number) ? null : number;
  }
  [$toHTML](availableSpace) {
    return valueToHtml(this[$content] !== null ? this[$content].toString() : "");
  }
}
class Issuers extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "issuers", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.certificate = new XFAObjectArray();
  }
}
class Items extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "items", true);
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.ref = attributes.ref || "";
    this.save = getInteger({
      data: attributes.save,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.boolean = new XFAObjectArray();
    this.date = new XFAObjectArray();
    this.dateTime = new XFAObjectArray();
    this.decimal = new XFAObjectArray();
    this.exData = new XFAObjectArray();
    this.float = new XFAObjectArray();
    this.image = new XFAObjectArray();
    this.integer = new XFAObjectArray();
    this.text = new XFAObjectArray();
    this.time = new XFAObjectArray();
  }
  [$toHTML]() {
    const output = [];
    for (const child of this[$getChildren]()) {
      output.push(child[$text]());
    }
    return HTMLResult.success(output);
  }
}
class Keep extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "keep", true);
    this.id = attributes.id || "";
    const options = ["none", "contentArea", "pageArea"];
    this.intact = getStringOption(attributes.intact, options);
    this.next = getStringOption(attributes.next, options);
    this.previous = getStringOption(attributes.previous, options);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
  }
}
class KeyUsage extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "keyUsage");
    const options = ["", "yes", "no"];
    this.crlSign = getStringOption(attributes.crlSign, options);
    this.dataEncipherment = getStringOption(attributes.dataEncipherment, options);
    this.decipherOnly = getStringOption(attributes.decipherOnly, options);
    this.digitalSignature = getStringOption(attributes.digitalSignature, options);
    this.encipherOnly = getStringOption(attributes.encipherOnly, options);
    this.id = attributes.id || "";
    this.keyAgreement = getStringOption(attributes.keyAgreement, options);
    this.keyCertSign = getStringOption(attributes.keyCertSign, options);
    this.keyEncipherment = getStringOption(attributes.keyEncipherment, options);
    this.nonRepudiation = getStringOption(attributes.nonRepudiation, options);
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Line extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "line", true);
    this.hand = getStringOption(attributes.hand, ["even", "left", "right"]);
    this.id = attributes.id || "";
    this.slope = getStringOption(attributes.slope, ["\\\\", "/"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.edge = null;
  }
  [$toHTML]() {
    const parent = this[$getParent]()[$getParent]();
    const edge = this.edge || new Edge({});
    const edgeStyle = edge[$toStyle]();
    const style = Object.create(null);
    const thickness = edge.presence === "visible" ? edge.thickness : 0;
    style.strokeWidth = measureToString(thickness);
    style.stroke = edgeStyle.color;
    let x1, y1, x2, y2;
    let width = "100%";
    let height = "100%";
    if (parent.w <= thickness) {
      [x1, y1, x2, y2] = ["50%", 0, "50%", "100%"];
      width = style.strokeWidth;
    } else if (parent.h <= thickness) {
      [x1, y1, x2, y2] = [0, "50%", "100%", "50%"];
      height = style.strokeWidth;
    } else if (this.slope === "\\\\") {
      [x1, y1, x2, y2] = [0, 0, "100%", "100%"];
    } else {
      [x1, y1, x2, y2] = [0, "100%", "100%", 0];
    }
    const line = {
      name: "line",
      attributes: {
        xmlns: SVG_NS,
        x1,
        y1,
        x2,
        y2,
        style
      }
    };
    const svg = {
      name: "svg",
      children: [line],
      attributes: {
        xmlns: SVG_NS,
        width,
        height,
        style: {
          overflow: "visible"
        }
      }
    };
    if (hasMargin(parent)) {
      return HTMLResult.success({
        name: "div",
        attributes: {
          style: {
            display: "inline",
            width: "100%",
            height: "100%"
          }
        },
        children: [svg]
      });
    }
    svg.attributes.style.position = "absolute";
    return HTMLResult.success(svg);
  }
}
class Linear extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "linear", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["toRight", "toBottom", "toLeft", "toTop"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.color = null;
    this.extras = null;
  }
  [$toStyle](startColor) {
    startColor = startColor ? startColor[$toStyle]() : "#FFFFFF";
    const transf = this.type.replace(/([RBLT])/, " $1").toLowerCase();
    const endColor = this.color ? this.color[$toStyle]() : "#000000";
    return \`linear-gradient(\${transf}, \${startColor}, \${endColor})\`;
  }
}
class LockDocument extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "lockDocument");
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    this[$content] = getStringOption(this[$content], ["auto", "0", "1"]);
  }
}
class Manifest extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "manifest", true);
    this.action = getStringOption(attributes.action, ["include", "all", "exclude"]);
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.ref = new XFAObjectArray();
  }
}
class Margin extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "margin", true);
    this.bottomInset = getMeasurement(attributes.bottomInset, "0");
    this.id = attributes.id || "";
    this.leftInset = getMeasurement(attributes.leftInset, "0");
    this.rightInset = getMeasurement(attributes.rightInset, "0");
    this.topInset = getMeasurement(attributes.topInset, "0");
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
  }
  [$toStyle]() {
    return {
      margin: measureToString(this.topInset) + " " + measureToString(this.rightInset) + " " + measureToString(this.bottomInset) + " " + measureToString(this.leftInset)
    };
  }
}
class Mdp extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "mdp");
    this.id = attributes.id || "";
    this.permissions = getInteger({
      data: attributes.permissions,
      defaultValue: 2,
      validate: x => x === 1 || x === 3
    });
    this.signatureType = getStringOption(attributes.signatureType, ["filler", "author"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Medium extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "medium");
    this.id = attributes.id || "";
    this.imagingBBox = getBBox(attributes.imagingBBox);
    this.long = getMeasurement(attributes.long);
    this.orientation = getStringOption(attributes.orientation, ["portrait", "landscape"]);
    this.short = getMeasurement(attributes.short);
    this.stock = attributes.stock || "";
    this.trayIn = getStringOption(attributes.trayIn, ["auto", "delegate", "pageFront"]);
    this.trayOut = getStringOption(attributes.trayOut, ["auto", "delegate"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Message extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "message", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.text = new XFAObjectArray();
  }
}
class NumericEdit extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "numericEdit", true);
    this.hScrollPolicy = getStringOption(attributes.hScrollPolicy, ["auto", "off", "on"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.border = null;
    this.comb = null;
    this.extras = null;
    this.margin = null;
  }
  [$toHTML](availableSpace) {
    const style = toStyle(this, "border", "font", "margin");
    const field = this[$getParent]()[$getParent]();
    const html = {
      name: "input",
      attributes: {
        type: "text",
        fieldId: field[$uid],
        dataId: field[$data]?.[$uid] || field[$uid],
        class: ["xfaTextfield"],
        style,
        "aria-label": ariaLabel(field),
        "aria-required": false
      }
    };
    if (isRequired(field)) {
      html.attributes["aria-required"] = true;
      html.attributes.required = true;
    }
    return HTMLResult.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [html]
    });
  }
}
class Occur extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "occur", true);
    this.id = attributes.id || "";
    this.initial = attributes.initial !== "" ? getInteger({
      data: attributes.initial,
      defaultValue: "",
      validate: x => true
    }) : "";
    this.max = attributes.max !== "" ? getInteger({
      data: attributes.max,
      defaultValue: 1,
      validate: x => true
    }) : "";
    this.min = attributes.min !== "" ? getInteger({
      data: attributes.min,
      defaultValue: 1,
      validate: x => true
    }) : "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
  }
  [$clean]() {
    const parent = this[$getParent]();
    const originalMin = this.min;
    if (this.min === "") {
      this.min = parent instanceof PageArea || parent instanceof PageSet ? 0 : 1;
    }
    if (this.max === "") {
      if (originalMin === "") {
        this.max = parent instanceof PageArea || parent instanceof PageSet ? -1 : 1;
      } else {
        this.max = this.min;
      }
    }
    if (this.max !== -1 && this.max < this.min) {
      this.max = this.min;
    }
    if (this.initial === "") {
      this.initial = parent instanceof Template ? 1 : this.min;
    }
  }
}
class Oid extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "oid");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Oids extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "oids", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.oid = new XFAObjectArray();
  }
}
class Overflow extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "overflow");
    this.id = attributes.id || "";
    this.leader = attributes.leader || "";
    this.target = attributes.target || "";
    this.trailer = attributes.trailer || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$getExtra]() {
    if (!this[$extra]) {
      const parent = this[$getParent]();
      const root = this[$getTemplateRoot]();
      const target = root[$searchNode](this.target, parent);
      const leader = root[$searchNode](this.leader, parent);
      const trailer = root[$searchNode](this.trailer, parent);
      this[$extra] = {
        target: target?.[0] || null,
        leader: leader?.[0] || null,
        trailer: trailer?.[0] || null,
        addLeader: false,
        addTrailer: false
      };
    }
    return this[$extra];
  }
}
class PageArea extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "pageArea", true);
    this.blankOrNotBlank = getStringOption(attributes.blankOrNotBlank, ["any", "blank", "notBlank"]);
    this.id = attributes.id || "";
    this.initialNumber = getInteger({
      data: attributes.initialNumber,
      defaultValue: 1,
      validate: x => true
    });
    this.name = attributes.name || "";
    this.numbered = getInteger({
      data: attributes.numbered,
      defaultValue: 1,
      validate: x => true
    });
    this.oddOrEven = getStringOption(attributes.oddOrEven, ["any", "even", "odd"]);
    this.pagePosition = getStringOption(attributes.pagePosition, ["any", "first", "last", "only", "rest"]);
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.desc = null;
    this.extras = null;
    this.medium = null;
    this.occur = null;
    this.area = new XFAObjectArray();
    this.contentArea = new XFAObjectArray();
    this.draw = new XFAObjectArray();
    this.exclGroup = new XFAObjectArray();
    this.field = new XFAObjectArray();
    this.subform = new XFAObjectArray();
  }
  [$isUsable]() {
    if (!this[$extra]) {
      this[$extra] = {
        numberOfUse: 0
      };
      return true;
    }
    return !this.occur || this.occur.max === -1 || this[$extra].numberOfUse < this.occur.max;
  }
  [$cleanPage]() {
    delete this[$extra];
  }
  [$getNextPage]() {
    if (!this[$extra]) {
      this[$extra] = {
        numberOfUse: 0
      };
    }
    const parent = this[$getParent]();
    if (parent.relation === "orderedOccurrence") {
      if (this[$isUsable]()) {
        this[$extra].numberOfUse += 1;
        return this;
      }
    }
    return parent[$getNextPage]();
  }
  [$getAvailableSpace]() {
    return this[$extra].space || {
      width: 0,
      height: 0
    };
  }
  [$toHTML]() {
    if (!this[$extra]) {
      this[$extra] = {
        numberOfUse: 1
      };
    }
    const children = [];
    this[$extra].children = children;
    const style = Object.create(null);
    if (this.medium && this.medium.short && this.medium.long) {
      style.width = measureToString(this.medium.short);
      style.height = measureToString(this.medium.long);
      this[$extra].space = {
        width: this.medium.short,
        height: this.medium.long
      };
      if (this.medium.orientation === "landscape") {
        const x = style.width;
        style.width = style.height;
        style.height = x;
        this[$extra].space = {
          width: this.medium.long,
          height: this.medium.short
        };
      }
    } else {
      warn("XFA - No medium specified in pageArea: please file a bug.");
    }
    this[$childrenToHTML]({
      filter: new Set(["area", "draw", "field", "subform"]),
      include: true
    });
    this[$childrenToHTML]({
      filter: new Set(["contentArea"]),
      include: true
    });
    return HTMLResult.success({
      name: "div",
      children,
      attributes: {
        class: ["xfaPage"],
        id: this[$uid],
        style,
        xfaName: this.name
      }
    });
  }
}
class PageSet extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "pageSet", true);
    this.duplexImposition = getStringOption(attributes.duplexImposition, ["longEdge", "shortEdge"]);
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.relation = getStringOption(attributes.relation, ["orderedOccurrence", "duplexPaginated", "simplexPaginated"]);
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.occur = null;
    this.pageArea = new XFAObjectArray();
    this.pageSet = new XFAObjectArray();
  }
  [$cleanPage]() {
    for (const page of this.pageArea.children) {
      page[$cleanPage]();
    }
    for (const page of this.pageSet.children) {
      page[$cleanPage]();
    }
  }
  [$isUsable]() {
    return !this.occur || this.occur.max === -1 || this[$extra].numberOfUse < this.occur.max;
  }
  [$getNextPage]() {
    if (!this[$extra]) {
      this[$extra] = {
        numberOfUse: 1,
        pageIndex: -1,
        pageSetIndex: -1
      };
    }
    if (this.relation === "orderedOccurrence") {
      if (this[$extra].pageIndex + 1 < this.pageArea.children.length) {
        this[$extra].pageIndex += 1;
        const pageArea = this.pageArea.children[this[$extra].pageIndex];
        return pageArea[$getNextPage]();
      }
      if (this[$extra].pageSetIndex + 1 < this.pageSet.children.length) {
        this[$extra].pageSetIndex += 1;
        return this.pageSet.children[this[$extra].pageSetIndex][$getNextPage]();
      }
      if (this[$isUsable]()) {
        this[$extra].numberOfUse += 1;
        this[$extra].pageIndex = -1;
        this[$extra].pageSetIndex = -1;
        return this[$getNextPage]();
      }
      const parent = this[$getParent]();
      if (parent instanceof PageSet) {
        return parent[$getNextPage]();
      }
      this[$cleanPage]();
      return this[$getNextPage]();
    }
    const pageNumber = this[$getTemplateRoot]()[$extra].pageNumber;
    const parity = pageNumber % 2 === 0 ? "even" : "odd";
    const position = pageNumber === 0 ? "first" : "rest";
    let page = this.pageArea.children.find(p => p.oddOrEven === parity && p.pagePosition === position);
    if (page) {
      return page;
    }
    page = this.pageArea.children.find(p => p.oddOrEven === "any" && p.pagePosition === position);
    if (page) {
      return page;
    }
    page = this.pageArea.children.find(p => p.oddOrEven === "any" && p.pagePosition === "any");
    if (page) {
      return page;
    }
    return this.pageArea.children[0];
  }
}
class Para extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "para", true);
    this.hAlign = getStringOption(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
    this.id = attributes.id || "";
    this.lineHeight = attributes.lineHeight ? getMeasurement(attributes.lineHeight, "0pt") : "";
    this.marginLeft = attributes.marginLeft ? getMeasurement(attributes.marginLeft, "0pt") : "";
    this.marginRight = attributes.marginRight ? getMeasurement(attributes.marginRight, "0pt") : "";
    this.orphans = getInteger({
      data: attributes.orphans,
      defaultValue: 0,
      validate: x => x >= 0
    });
    this.preserve = attributes.preserve || "";
    this.radixOffset = attributes.radixOffset ? getMeasurement(attributes.radixOffset, "0pt") : "";
    this.spaceAbove = attributes.spaceAbove ? getMeasurement(attributes.spaceAbove, "0pt") : "";
    this.spaceBelow = attributes.spaceBelow ? getMeasurement(attributes.spaceBelow, "0pt") : "";
    this.tabDefault = attributes.tabDefault ? getMeasurement(this.tabDefault) : "";
    this.tabStops = (attributes.tabStops || "").trim().split(/\\s+/).map((x, i) => i % 2 === 1 ? getMeasurement(x) : x);
    this.textIndent = attributes.textIndent ? getMeasurement(attributes.textIndent, "0pt") : "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.vAlign = getStringOption(attributes.vAlign, ["top", "bottom", "middle"]);
    this.widows = getInteger({
      data: attributes.widows,
      defaultValue: 0,
      validate: x => x >= 0
    });
    this.hyphenation = null;
  }
  [$toStyle]() {
    const style = toStyle(this, "hAlign");
    if (this.marginLeft !== "") {
      style.paddingLeft = measureToString(this.marginLeft);
    }
    if (this.marginRight !== "") {
      style.paddingRight = measureToString(this.marginRight);
    }
    if (this.spaceAbove !== "") {
      style.paddingTop = measureToString(this.spaceAbove);
    }
    if (this.spaceBelow !== "") {
      style.paddingBottom = measureToString(this.spaceBelow);
    }
    if (this.textIndent !== "") {
      style.textIndent = measureToString(this.textIndent);
      fixTextIndent(style);
    }
    if (this.lineHeight > 0) {
      style.lineHeight = measureToString(this.lineHeight);
    }
    if (this.tabDefault !== "") {
      style.tabSize = measureToString(this.tabDefault);
    }
    if (this.tabStops.length > 0) {}
    if (this.hyphenatation) {
      Object.assign(style, this.hyphenatation[$toStyle]());
    }
    return style;
  }
}
class PasswordEdit extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "passwordEdit", true);
    this.hScrollPolicy = getStringOption(attributes.hScrollPolicy, ["auto", "off", "on"]);
    this.id = attributes.id || "";
    this.passwordChar = attributes.passwordChar || "*";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.border = null;
    this.extras = null;
    this.margin = null;
  }
}
class template_Pattern extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "pattern", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["crossHatch", "crossDiagonal", "diagonalLeft", "diagonalRight", "horizontal", "vertical"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.color = null;
    this.extras = null;
  }
  [$toStyle](startColor) {
    startColor = startColor ? startColor[$toStyle]() : "#FFFFFF";
    const endColor = this.color ? this.color[$toStyle]() : "#000000";
    const width = 5;
    const cmd = "repeating-linear-gradient";
    const colors = \`\${startColor},\${startColor} \${width}px,\${endColor} \${width}px,\${endColor} \${2 * width}px\`;
    switch (this.type) {
      case "crossHatch":
        return \`\${cmd}(to top,\${colors}) \${cmd}(to right,\${colors})\`;
      case "crossDiagonal":
        return \`\${cmd}(45deg,\${colors}) \${cmd}(-45deg,\${colors})\`;
      case "diagonalLeft":
        return \`\${cmd}(45deg,\${colors})\`;
      case "diagonalRight":
        return \`\${cmd}(-45deg,\${colors})\`;
      case "horizontal":
        return \`\${cmd}(to top,\${colors})\`;
      case "vertical":
        return \`\${cmd}(to right,\${colors})\`;
    }
    return "";
  }
}
class Picture extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "picture");
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Proto extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "proto", true);
    this.appearanceFilter = new XFAObjectArray();
    this.arc = new XFAObjectArray();
    this.area = new XFAObjectArray();
    this.assist = new XFAObjectArray();
    this.barcode = new XFAObjectArray();
    this.bindItems = new XFAObjectArray();
    this.bookend = new XFAObjectArray();
    this.boolean = new XFAObjectArray();
    this.border = new XFAObjectArray();
    this.break = new XFAObjectArray();
    this.breakAfter = new XFAObjectArray();
    this.breakBefore = new XFAObjectArray();
    this.button = new XFAObjectArray();
    this.calculate = new XFAObjectArray();
    this.caption = new XFAObjectArray();
    this.certificate = new XFAObjectArray();
    this.certificates = new XFAObjectArray();
    this.checkButton = new XFAObjectArray();
    this.choiceList = new XFAObjectArray();
    this.color = new XFAObjectArray();
    this.comb = new XFAObjectArray();
    this.connect = new XFAObjectArray();
    this.contentArea = new XFAObjectArray();
    this.corner = new XFAObjectArray();
    this.date = new XFAObjectArray();
    this.dateTime = new XFAObjectArray();
    this.dateTimeEdit = new XFAObjectArray();
    this.decimal = new XFAObjectArray();
    this.defaultUi = new XFAObjectArray();
    this.desc = new XFAObjectArray();
    this.digestMethod = new XFAObjectArray();
    this.digestMethods = new XFAObjectArray();
    this.draw = new XFAObjectArray();
    this.edge = new XFAObjectArray();
    this.encoding = new XFAObjectArray();
    this.encodings = new XFAObjectArray();
    this.encrypt = new XFAObjectArray();
    this.encryptData = new XFAObjectArray();
    this.encryption = new XFAObjectArray();
    this.encryptionMethod = new XFAObjectArray();
    this.encryptionMethods = new XFAObjectArray();
    this.event = new XFAObjectArray();
    this.exData = new XFAObjectArray();
    this.exObject = new XFAObjectArray();
    this.exclGroup = new XFAObjectArray();
    this.execute = new XFAObjectArray();
    this.extras = new XFAObjectArray();
    this.field = new XFAObjectArray();
    this.fill = new XFAObjectArray();
    this.filter = new XFAObjectArray();
    this.float = new XFAObjectArray();
    this.font = new XFAObjectArray();
    this.format = new XFAObjectArray();
    this.handler = new XFAObjectArray();
    this.hyphenation = new XFAObjectArray();
    this.image = new XFAObjectArray();
    this.imageEdit = new XFAObjectArray();
    this.integer = new XFAObjectArray();
    this.issuers = new XFAObjectArray();
    this.items = new XFAObjectArray();
    this.keep = new XFAObjectArray();
    this.keyUsage = new XFAObjectArray();
    this.line = new XFAObjectArray();
    this.linear = new XFAObjectArray();
    this.lockDocument = new XFAObjectArray();
    this.manifest = new XFAObjectArray();
    this.margin = new XFAObjectArray();
    this.mdp = new XFAObjectArray();
    this.medium = new XFAObjectArray();
    this.message = new XFAObjectArray();
    this.numericEdit = new XFAObjectArray();
    this.occur = new XFAObjectArray();
    this.oid = new XFAObjectArray();
    this.oids = new XFAObjectArray();
    this.overflow = new XFAObjectArray();
    this.pageArea = new XFAObjectArray();
    this.pageSet = new XFAObjectArray();
    this.para = new XFAObjectArray();
    this.passwordEdit = new XFAObjectArray();
    this.pattern = new XFAObjectArray();
    this.picture = new XFAObjectArray();
    this.radial = new XFAObjectArray();
    this.reason = new XFAObjectArray();
    this.reasons = new XFAObjectArray();
    this.rectangle = new XFAObjectArray();
    this.ref = new XFAObjectArray();
    this.script = new XFAObjectArray();
    this.setProperty = new XFAObjectArray();
    this.signData = new XFAObjectArray();
    this.signature = new XFAObjectArray();
    this.signing = new XFAObjectArray();
    this.solid = new XFAObjectArray();
    this.speak = new XFAObjectArray();
    this.stipple = new XFAObjectArray();
    this.subform = new XFAObjectArray();
    this.subformSet = new XFAObjectArray();
    this.subjectDN = new XFAObjectArray();
    this.subjectDNs = new XFAObjectArray();
    this.submit = new XFAObjectArray();
    this.text = new XFAObjectArray();
    this.textEdit = new XFAObjectArray();
    this.time = new XFAObjectArray();
    this.timeStamp = new XFAObjectArray();
    this.toolTip = new XFAObjectArray();
    this.traversal = new XFAObjectArray();
    this.traverse = new XFAObjectArray();
    this.ui = new XFAObjectArray();
    this.validate = new XFAObjectArray();
    this.value = new XFAObjectArray();
    this.variables = new XFAObjectArray();
  }
}
class Radial extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "radial", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["toEdge", "toCenter"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.color = null;
    this.extras = null;
  }
  [$toStyle](startColor) {
    startColor = startColor ? startColor[$toStyle]() : "#FFFFFF";
    const endColor = this.color ? this.color[$toStyle]() : "#000000";
    const colors = this.type === "toEdge" ? \`\${startColor},\${endColor}\` : \`\${endColor},\${startColor}\`;
    return \`radial-gradient(circle at center, \${colors})\`;
  }
}
class Reason extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "reason");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Reasons extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "reasons", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.reason = new XFAObjectArray();
  }
}
class Rectangle extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "rectangle", true);
    this.hand = getStringOption(attributes.hand, ["even", "left", "right"]);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.corner = new XFAObjectArray(4);
    this.edge = new XFAObjectArray(4);
    this.fill = null;
  }
  [$toHTML]() {
    const edge = this.edge.children.length ? this.edge.children[0] : new Edge({});
    const edgeStyle = edge[$toStyle]();
    const style = Object.create(null);
    if (this.fill?.presence === "visible") {
      Object.assign(style, this.fill[$toStyle]());
    } else {
      style.fill = "transparent";
    }
    style.strokeWidth = measureToString(edge.presence === "visible" ? edge.thickness : 0);
    style.stroke = edgeStyle.color;
    const corner = this.corner.children.length ? this.corner.children[0] : new Corner({});
    const cornerStyle = corner[$toStyle]();
    const rect = {
      name: "rect",
      attributes: {
        xmlns: SVG_NS,
        width: "100%",
        height: "100%",
        x: 0,
        y: 0,
        rx: cornerStyle.radius,
        ry: cornerStyle.radius,
        style
      }
    };
    const svg = {
      name: "svg",
      children: [rect],
      attributes: {
        xmlns: SVG_NS,
        style: {
          overflow: "visible"
        },
        width: "100%",
        height: "100%"
      }
    };
    const parent = this[$getParent]()[$getParent]();
    if (hasMargin(parent)) {
      return HTMLResult.success({
        name: "div",
        attributes: {
          style: {
            display: "inline",
            width: "100%",
            height: "100%"
          }
        },
        children: [svg]
      });
    }
    svg.attributes.style.position = "absolute";
    return HTMLResult.success(svg);
  }
}
class RefElement extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "ref");
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Script extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "script");
    this.binding = attributes.binding || "";
    this.contentType = attributes.contentType || "";
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.runAt = getStringOption(attributes.runAt, ["client", "both", "server"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class SetProperty extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "setProperty");
    this.connection = attributes.connection || "";
    this.ref = attributes.ref || "";
    this.target = attributes.target || "";
  }
}
class SignData extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "signData", true);
    this.id = attributes.id || "";
    this.operation = getStringOption(attributes.operation, ["sign", "clear", "verify"]);
    this.ref = attributes.ref || "";
    this.target = attributes.target || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.filter = null;
    this.manifest = null;
  }
}
class Signature extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "signature", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["PDF1.3", "PDF1.6"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.border = null;
    this.extras = null;
    this.filter = null;
    this.manifest = null;
    this.margin = null;
  }
}
class Signing extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "signing", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.certificate = new XFAObjectArray();
  }
}
class Solid extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "solid", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
  }
  [$toStyle](startColor) {
    return startColor ? startColor[$toStyle]() : "#FFFFFF";
  }
}
class Speak extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "speak");
    this.disable = getInteger({
      data: attributes.disable,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.id = attributes.id || "";
    this.priority = getStringOption(attributes.priority, ["custom", "caption", "name", "toolTip"]);
    this.rid = attributes.rid || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Stipple extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "stipple", true);
    this.id = attributes.id || "";
    this.rate = getInteger({
      data: attributes.rate,
      defaultValue: 50,
      validate: x => x >= 0 && x <= 100
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.color = null;
    this.extras = null;
  }
  [$toStyle](bgColor) {
    const alpha = this.rate / 100;
    return Util.makeHexColor(Math.round(bgColor.value.r * (1 - alpha) + this.value.r * alpha), Math.round(bgColor.value.g * (1 - alpha) + this.value.g * alpha), Math.round(bgColor.value.b * (1 - alpha) + this.value.b * alpha));
  }
}
class Subform extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "subform", true);
    this.access = getStringOption(attributes.access, ["open", "nonInteractive", "protected", "readOnly"]);
    this.allowMacro = getInteger({
      data: attributes.allowMacro,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.anchorType = getStringOption(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
    this.colSpan = getInteger({
      data: attributes.colSpan,
      defaultValue: 1,
      validate: n => n >= 1 || n === -1
    });
    this.columnWidths = (attributes.columnWidths || "").trim().split(/\\s+/).map(x => x === "-1" ? -1 : getMeasurement(x));
    this.h = attributes.h ? getMeasurement(attributes.h) : "";
    this.hAlign = getStringOption(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
    this.id = attributes.id || "";
    this.layout = getStringOption(attributes.layout, ["position", "lr-tb", "rl-row", "rl-tb", "row", "table", "tb"]);
    this.locale = attributes.locale || "";
    this.maxH = getMeasurement(attributes.maxH, "0pt");
    this.maxW = getMeasurement(attributes.maxW, "0pt");
    this.mergeMode = getStringOption(attributes.mergeMode, ["consumeData", "matchTemplate"]);
    this.minH = getMeasurement(attributes.minH, "0pt");
    this.minW = getMeasurement(attributes.minW, "0pt");
    this.name = attributes.name || "";
    this.presence = getStringOption(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
    this.relevant = getRelevant(attributes.relevant);
    this.restoreState = getStringOption(attributes.restoreState, ["manual", "auto"]);
    this.scope = getStringOption(attributes.scope, ["name", "none"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.w = attributes.w ? getMeasurement(attributes.w) : "";
    this.x = getMeasurement(attributes.x, "0pt");
    this.y = getMeasurement(attributes.y, "0pt");
    this.assist = null;
    this.bind = null;
    this.bookend = null;
    this.border = null;
    this.break = null;
    this.calculate = null;
    this.desc = null;
    this.extras = null;
    this.keep = null;
    this.margin = null;
    this.occur = null;
    this.overflow = null;
    this.pageSet = null;
    this.para = null;
    this.traversal = null;
    this.validate = null;
    this.variables = null;
    this.area = new XFAObjectArray();
    this.breakAfter = new XFAObjectArray();
    this.breakBefore = new XFAObjectArray();
    this.connect = new XFAObjectArray();
    this.draw = new XFAObjectArray();
    this.event = new XFAObjectArray();
    this.exObject = new XFAObjectArray();
    this.exclGroup = new XFAObjectArray();
    this.field = new XFAObjectArray();
    this.proto = new XFAObjectArray();
    this.setProperty = new XFAObjectArray();
    this.subform = new XFAObjectArray();
    this.subformSet = new XFAObjectArray();
  }
  [$getSubformParent]() {
    const parent = this[$getParent]();
    if (parent instanceof SubformSet) {
      return parent[$getSubformParent]();
    }
    return parent;
  }
  [$isBindable]() {
    return true;
  }
  [$isThereMoreWidth]() {
    return this.layout.endsWith("-tb") && this[$extra].attempt === 0 && this[$extra].numberInLine > 0 || this[$getParent]()[$isThereMoreWidth]();
  }
  *[$getContainedChildren]() {
    yield* getContainedChildren(this);
  }
  [$flushHTML]() {
    return flushHTML(this);
  }
  [$addHTML](html, bbox) {
    addHTML(this, html, bbox);
  }
  [$getAvailableSpace]() {
    return getAvailableSpace(this);
  }
  [$isSplittable]() {
    const parent = this[$getSubformParent]();
    if (!parent[$isSplittable]()) {
      return false;
    }
    if (this[$extra]._isSplittable !== undefined) {
      return this[$extra]._isSplittable;
    }
    if (this.layout === "position" || this.layout.includes("row")) {
      this[$extra]._isSplittable = false;
      return false;
    }
    if (this.keep && this.keep.intact !== "none") {
      this[$extra]._isSplittable = false;
      return false;
    }
    if (parent.layout?.endsWith("-tb") && parent[$extra].numberInLine !== 0) {
      return false;
    }
    this[$extra]._isSplittable = true;
    return true;
  }
  [$toHTML](availableSpace) {
    setTabIndex(this);
    if (this.break) {
      if (this.break.after !== "auto" || this.break.afterTarget !== "") {
        const node = new BreakAfter({
          targetType: this.break.after,
          target: this.break.afterTarget,
          startNew: this.break.startNew.toString()
        });
        node[$globalData] = this[$globalData];
        this[$appendChild](node);
        this.breakAfter.push(node);
      }
      if (this.break.before !== "auto" || this.break.beforeTarget !== "") {
        const node = new BreakBefore({
          targetType: this.break.before,
          target: this.break.beforeTarget,
          startNew: this.break.startNew.toString()
        });
        node[$globalData] = this[$globalData];
        this[$appendChild](node);
        this.breakBefore.push(node);
      }
      if (this.break.overflowTarget !== "") {
        const node = new Overflow({
          target: this.break.overflowTarget,
          leader: this.break.overflowLeader,
          trailer: this.break.overflowTrailer
        });
        node[$globalData] = this[$globalData];
        this[$appendChild](node);
        this.overflow.push(node);
      }
      this[$removeChild](this.break);
      this.break = null;
    }
    if (this.presence === "hidden" || this.presence === "inactive") {
      return HTMLResult.EMPTY;
    }
    if (this.breakBefore.children.length > 1 || this.breakAfter.children.length > 1) {
      warn("XFA - Several breakBefore or breakAfter in subforms: please file a bug.");
    }
    if (this.breakBefore.children.length >= 1) {
      const breakBefore = this.breakBefore.children[0];
      if (handleBreak(breakBefore)) {
        return HTMLResult.breakNode(breakBefore);
      }
    }
    if (this[$extra]?.afterBreakAfter) {
      return HTMLResult.EMPTY;
    }
    fixDimensions(this);
    const children = [];
    const attributes = {
      id: this[$uid],
      class: []
    };
    setAccess(this, attributes.class);
    if (!this[$extra]) {
      this[$extra] = Object.create(null);
    }
    Object.assign(this[$extra], {
      children,
      line: null,
      attributes,
      attempt: 0,
      numberInLine: 0,
      availableSpace: {
        width: Math.min(this.w || Infinity, availableSpace.width),
        height: Math.min(this.h || Infinity, availableSpace.height)
      },
      width: 0,
      height: 0,
      prevHeight: 0,
      currentWidth: 0
    });
    const root = this[$getTemplateRoot]();
    const savedNoLayoutFailure = root[$extra].noLayoutFailure;
    const isSplittable = this[$isSplittable]();
    if (!isSplittable) {
      setFirstUnsplittable(this);
    }
    if (!checkDimensions(this, availableSpace)) {
      return HTMLResult.FAILURE;
    }
    const filter = new Set(["area", "draw", "exclGroup", "field", "subform", "subformSet"]);
    if (this.layout.includes("row")) {
      const columnWidths = this[$getSubformParent]().columnWidths;
      if (Array.isArray(columnWidths) && columnWidths.length > 0) {
        this[$extra].columnWidths = columnWidths;
        this[$extra].currentColumn = 0;
      }
    }
    const style = toStyle(this, "anchorType", "dimensions", "position", "presence", "border", "margin", "hAlign");
    const classNames = ["xfaSubform"];
    const cl = layoutClass(this);
    if (cl) {
      classNames.push(cl);
    }
    attributes.style = style;
    attributes.class = classNames;
    if (this.name) {
      attributes.xfaName = this.name;
    }
    if (this.overflow) {
      const overflowExtra = this.overflow[$getExtra]();
      if (overflowExtra.addLeader) {
        overflowExtra.addLeader = false;
        handleOverflow(this, overflowExtra.leader, availableSpace);
      }
    }
    this[$pushPara]();
    const isLrTb = this.layout === "lr-tb" || this.layout === "rl-tb";
    const maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;
    for (; this[$extra].attempt < maxRun; this[$extra].attempt++) {
      if (isLrTb && this[$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1) {
        this[$extra].numberInLine = 0;
      }
      const result = this[$childrenToHTML]({
        filter,
        include: true
      });
      if (result.success) {
        break;
      }
      if (result.isBreak()) {
        this[$popPara]();
        return result;
      }
      if (isLrTb && this[$extra].attempt === 0 && this[$extra].numberInLine === 0 && !root[$extra].noLayoutFailure) {
        this[$extra].attempt = maxRun;
        break;
      }
    }
    this[$popPara]();
    if (!isSplittable) {
      unsetFirstUnsplittable(this);
    }
    root[$extra].noLayoutFailure = savedNoLayoutFailure;
    if (this[$extra].attempt === maxRun) {
      if (this.overflow) {
        this[$getTemplateRoot]()[$extra].overflowNode = this.overflow;
      }
      if (!isSplittable) {
        delete this[$extra];
      }
      return HTMLResult.FAILURE;
    }
    if (this.overflow) {
      const overflowExtra = this.overflow[$getExtra]();
      if (overflowExtra.addTrailer) {
        overflowExtra.addTrailer = false;
        handleOverflow(this, overflowExtra.trailer, availableSpace);
      }
    }
    let marginH = 0;
    let marginV = 0;
    if (this.margin) {
      marginH = this.margin.leftInset + this.margin.rightInset;
      marginV = this.margin.topInset + this.margin.bottomInset;
    }
    const width = Math.max(this[$extra].width + marginH, this.w || 0);
    const height = Math.max(this[$extra].height + marginV, this.h || 0);
    const bbox = [this.x, this.y, width, height];
    if (this.w === "") {
      style.width = measureToString(width);
    }
    if (this.h === "") {
      style.height = measureToString(height);
    }
    if ((style.width === "0px" || style.height === "0px") && children.length === 0) {
      return HTMLResult.EMPTY;
    }
    const html = {
      name: "div",
      attributes,
      children
    };
    applyAssist(this, attributes);
    const result = HTMLResult.success(createWrapper(this, html), bbox);
    if (this.breakAfter.children.length >= 1) {
      const breakAfter = this.breakAfter.children[0];
      if (handleBreak(breakAfter)) {
        this[$extra].afterBreakAfter = result;
        return HTMLResult.breakNode(breakAfter);
      }
    }
    delete this[$extra];
    return result;
  }
}
class SubformSet extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "subformSet", true);
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.relation = getStringOption(attributes.relation, ["ordered", "choice", "unordered"]);
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.bookend = null;
    this.break = null;
    this.desc = null;
    this.extras = null;
    this.occur = null;
    this.overflow = null;
    this.breakAfter = new XFAObjectArray();
    this.breakBefore = new XFAObjectArray();
    this.subform = new XFAObjectArray();
    this.subformSet = new XFAObjectArray();
  }
  *[$getContainedChildren]() {
    yield* getContainedChildren(this);
  }
  [$getSubformParent]() {
    let parent = this[$getParent]();
    while (!(parent instanceof Subform)) {
      parent = parent[$getParent]();
    }
    return parent;
  }
  [$isBindable]() {
    return true;
  }
}
class SubjectDN extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "subjectDN");
    this.delimiter = attributes.delimiter || ",";
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    this[$content] = new Map(this[$content].split(this.delimiter).map(kv => {
      kv = kv.split("=", 2);
      kv[0] = kv[0].trim();
      return kv;
    }));
  }
}
class SubjectDNs extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "subjectDNs", true);
    this.id = attributes.id || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.subjectDN = new XFAObjectArray();
  }
}
class Submit extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "submit", true);
    this.embedPDF = getInteger({
      data: attributes.embedPDF,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.format = getStringOption(attributes.format, ["xdp", "formdata", "pdf", "urlencoded", "xfd", "xml"]);
    this.id = attributes.id || "";
    this.target = attributes.target || "";
    this.textEncoding = getKeyword({
      data: attributes.textEncoding ? attributes.textEncoding.toLowerCase() : "",
      defaultValue: "",
      validate: k => ["utf-8", "big-five", "fontspecific", "gbk", "gb-18030", "gb-2312", "ksc-5601", "none", "shift-jis", "ucs-2", "utf-16"].includes(k) || k.match(/iso-8859-\\d{2}/)
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.xdpContent = attributes.xdpContent || "";
    this.encrypt = null;
    this.encryptData = new XFAObjectArray();
    this.signData = new XFAObjectArray();
  }
}
class Template extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "template", true);
    this.baseProfile = getStringOption(attributes.baseProfile, ["full", "interactiveForms"]);
    this.extras = null;
    this.subform = new XFAObjectArray();
  }
  [$finalize]() {
    if (this.subform.children.length === 0) {
      warn("XFA - No subforms in template node.");
    }
    if (this.subform.children.length >= 2) {
      warn("XFA - Several subforms in template node: please file a bug.");
    }
    this[$tabIndex] = DEFAULT_TAB_INDEX;
  }
  [$isSplittable]() {
    return true;
  }
  [$searchNode](expr, container) {
    if (expr.startsWith("#")) {
      return [this[$ids].get(expr.slice(1))];
    }
    return searchNode(this, container, expr, true, true);
  }
  *[$toPages]() {
    if (!this.subform.children.length) {
      return HTMLResult.success({
        name: "div",
        children: []
      });
    }
    this[$extra] = {
      overflowNode: null,
      firstUnsplittable: null,
      currentContentArea: null,
      currentPageArea: null,
      noLayoutFailure: false,
      pageNumber: 1,
      pagePosition: "first",
      oddOrEven: "odd",
      blankOrNotBlank: "nonBlank",
      paraStack: []
    };
    const root = this.subform.children[0];
    root.pageSet[$cleanPage]();
    const pageAreas = root.pageSet.pageArea.children;
    const mainHtml = {
      name: "div",
      children: []
    };
    let pageArea = null;
    let breakBefore = null;
    let breakBeforeTarget = null;
    if (root.breakBefore.children.length >= 1) {
      breakBefore = root.breakBefore.children[0];
      breakBeforeTarget = breakBefore.target;
    } else if (root.subform.children.length >= 1 && root.subform.children[0].breakBefore.children.length >= 1) {
      breakBefore = root.subform.children[0].breakBefore.children[0];
      breakBeforeTarget = breakBefore.target;
    } else if (root.break?.beforeTarget) {
      breakBefore = root.break;
      breakBeforeTarget = breakBefore.beforeTarget;
    } else if (root.subform.children.length >= 1 && root.subform.children[0].break?.beforeTarget) {
      breakBefore = root.subform.children[0].break;
      breakBeforeTarget = breakBefore.beforeTarget;
    }
    if (breakBefore) {
      const target = this[$searchNode](breakBeforeTarget, breakBefore[$getParent]());
      if (target instanceof PageArea) {
        pageArea = target;
        breakBefore[$extra] = {};
      }
    }
    if (!pageArea) {
      pageArea = pageAreas[0];
    }
    pageArea[$extra] = {
      numberOfUse: 1
    };
    const pageAreaParent = pageArea[$getParent]();
    pageAreaParent[$extra] = {
      numberOfUse: 1,
      pageIndex: pageAreaParent.pageArea.children.indexOf(pageArea),
      pageSetIndex: 0
    };
    let targetPageArea;
    let leader = null;
    let trailer = null;
    let hasSomething = true;
    let hasSomethingCounter = 0;
    let startIndex = 0;
    while (true) {
      if (!hasSomething) {
        mainHtml.children.pop();
        if (++hasSomethingCounter === MAX_EMPTY_PAGES) {
          warn("XFA - Something goes wrong: please file a bug.");
          return mainHtml;
        }
      } else {
        hasSomethingCounter = 0;
      }
      targetPageArea = null;
      this[$extra].currentPageArea = pageArea;
      const page = pageArea[$toHTML]().html;
      mainHtml.children.push(page);
      if (leader) {
        this[$extra].noLayoutFailure = true;
        page.children.push(leader[$toHTML](pageArea[$extra].space).html);
        leader = null;
      }
      if (trailer) {
        this[$extra].noLayoutFailure = true;
        page.children.push(trailer[$toHTML](pageArea[$extra].space).html);
        trailer = null;
      }
      const contentAreas = pageArea.contentArea.children;
      const htmlContentAreas = page.children.filter(node => node.attributes.class.includes("xfaContentarea"));
      hasSomething = false;
      this[$extra].firstUnsplittable = null;
      this[$extra].noLayoutFailure = false;
      const flush = index => {
        const html = root[$flushHTML]();
        if (html) {
          hasSomething ||= html.children?.length > 0;
          htmlContentAreas[index].children.push(html);
        }
      };
      for (let i = startIndex, ii = contentAreas.length; i < ii; i++) {
        const contentArea = this[$extra].currentContentArea = contentAreas[i];
        const space = {
          width: contentArea.w,
          height: contentArea.h
        };
        startIndex = 0;
        if (leader) {
          htmlContentAreas[i].children.push(leader[$toHTML](space).html);
          leader = null;
        }
        if (trailer) {
          htmlContentAreas[i].children.push(trailer[$toHTML](space).html);
          trailer = null;
        }
        const html = root[$toHTML](space);
        if (html.success) {
          if (html.html) {
            hasSomething ||= html.html.children?.length > 0;
            htmlContentAreas[i].children.push(html.html);
          } else if (!hasSomething && mainHtml.children.length > 1) {
            mainHtml.children.pop();
          }
          return mainHtml;
        }
        if (html.isBreak()) {
          const node = html.breakNode;
          flush(i);
          if (node.targetType === "auto") {
            continue;
          }
          if (node.leader) {
            leader = this[$searchNode](node.leader, node[$getParent]());
            leader = leader ? leader[0] : null;
          }
          if (node.trailer) {
            trailer = this[$searchNode](node.trailer, node[$getParent]());
            trailer = trailer ? trailer[0] : null;
          }
          if (node.targetType === "pageArea") {
            targetPageArea = node[$extra].target;
            i = Infinity;
          } else if (!node[$extra].target) {
            i = node[$extra].index;
          } else {
            targetPageArea = node[$extra].target;
            startIndex = node[$extra].index + 1;
            i = Infinity;
          }
          continue;
        }
        if (this[$extra].overflowNode) {
          const node = this[$extra].overflowNode;
          this[$extra].overflowNode = null;
          const overflowExtra = node[$getExtra]();
          const target = overflowExtra.target;
          overflowExtra.addLeader = overflowExtra.leader !== null;
          overflowExtra.addTrailer = overflowExtra.trailer !== null;
          flush(i);
          const currentIndex = i;
          i = Infinity;
          if (target instanceof PageArea) {
            targetPageArea = target;
          } else if (target instanceof ContentArea) {
            const index = contentAreas.indexOf(target);
            if (index !== -1) {
              if (index > currentIndex) {
                i = index - 1;
              } else {
                startIndex = index;
              }
            } else {
              targetPageArea = target[$getParent]();
              startIndex = targetPageArea.contentArea.children.indexOf(target);
            }
          }
          continue;
        }
        flush(i);
      }
      this[$extra].pageNumber += 1;
      if (targetPageArea) {
        if (targetPageArea[$isUsable]()) {
          targetPageArea[$extra].numberOfUse += 1;
        } else {
          targetPageArea = null;
        }
      }
      pageArea = targetPageArea || pageArea[$getNextPage]();
      yield null;
    }
  }
}
class Text extends ContentObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "text");
    this.id = attributes.id || "";
    this.maxChars = getInteger({
      data: attributes.maxChars,
      defaultValue: 0,
      validate: x => x >= 0
    });
    this.name = attributes.name || "";
    this.rid = attributes.rid || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$acceptWhitespace]() {
    return true;
  }
  [$onChild](child) {
    if (child[$namespaceId] === NamespaceIds.xhtml.id) {
      this[$content] = child;
      return true;
    }
    warn(\`XFA - Invalid content in Text: \${child[$nodeName]}.\`);
    return false;
  }
  [$onText](str) {
    if (this[$content] instanceof XFAObject) {
      return;
    }
    super[$onText](str);
  }
  [$finalize]() {
    if (typeof this[$content] === "string") {
      this[$content] = this[$content].replaceAll("\\r\\n", "\\n");
    }
  }
  [$getExtra]() {
    if (typeof this[$content] === "string") {
      return this[$content].split(/[\\u2029\\u2028\\n]/).filter(line => !!line).join("\\n");
    }
    return this[$content][$text]();
  }
  [$toHTML](availableSpace) {
    if (typeof this[$content] === "string") {
      const html = valueToHtml(this[$content]).html;
      if (this[$content].includes("\\u2029")) {
        html.name = "div";
        html.children = [];
        this[$content].split("\\u2029").map(para => para.split(/[\\u2028\\n]/).flatMap(line => [{
          name: "span",
          value: line
        }, {
          name: "br"
        }])).forEach(lines => {
          html.children.push({
            name: "p",
            children: lines
          });
        });
      } else if (/[\\u2028\\n]/.test(this[$content])) {
        html.name = "div";
        html.children = [];
        this[$content].split(/[\\u2028\\n]/).forEach(line => {
          html.children.push({
            name: "span",
            value: line
          }, {
            name: "br"
          });
        });
      }
      return HTMLResult.success(html);
    }
    return this[$content][$toHTML](availableSpace);
  }
}
class TextEdit extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "textEdit", true);
    this.allowRichText = getInteger({
      data: attributes.allowRichText,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.hScrollPolicy = getStringOption(attributes.hScrollPolicy, ["auto", "off", "on"]);
    this.id = attributes.id || "";
    this.multiLine = getInteger({
      data: attributes.multiLine,
      defaultValue: "",
      validate: x => x === 0 || x === 1
    });
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.vScrollPolicy = getStringOption(attributes.vScrollPolicy, ["auto", "off", "on"]);
    this.border = null;
    this.comb = null;
    this.extras = null;
    this.margin = null;
  }
  [$toHTML](availableSpace) {
    const style = toStyle(this, "border", "font", "margin");
    let html;
    const field = this[$getParent]()[$getParent]();
    if (this.multiLine === "") {
      this.multiLine = field instanceof Draw ? 1 : 0;
    }
    if (this.multiLine === 1) {
      html = {
        name: "textarea",
        attributes: {
          dataId: field[$data]?.[$uid] || field[$uid],
          fieldId: field[$uid],
          class: ["xfaTextfield"],
          style,
          "aria-label": ariaLabel(field),
          "aria-required": false
        }
      };
    } else {
      html = {
        name: "input",
        attributes: {
          type: "text",
          dataId: field[$data]?.[$uid] || field[$uid],
          fieldId: field[$uid],
          class: ["xfaTextfield"],
          style,
          "aria-label": ariaLabel(field),
          "aria-required": false
        }
      };
    }
    if (isRequired(field)) {
      html.attributes["aria-required"] = true;
      html.attributes.required = true;
    }
    return HTMLResult.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [html]
    });
  }
}
class Time extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "time");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
  [$finalize]() {
    const date = this[$content].trim();
    this[$content] = date ? new Date(date) : null;
  }
  [$toHTML](availableSpace) {
    return valueToHtml(this[$content] ? this[$content].toString() : "");
  }
}
class TimeStamp extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "timeStamp");
    this.id = attributes.id || "";
    this.server = attributes.server || "";
    this.type = getStringOption(attributes.type, ["optional", "required"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class ToolTip extends StringObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "toolTip");
    this.id = attributes.id || "";
    this.rid = attributes.rid || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Traversal extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "traversal", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.traverse = new XFAObjectArray();
  }
}
class Traverse extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "traverse", true);
    this.id = attributes.id || "";
    this.operation = getStringOption(attributes.operation, ["next", "back", "down", "first", "left", "right", "up"]);
    this.ref = attributes.ref || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.script = null;
  }
  get name() {
    return this.operation;
  }
  [$isTransparent]() {
    return false;
  }
}
class Ui extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "ui", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.picture = null;
    this.barcode = null;
    this.button = null;
    this.checkButton = null;
    this.choiceList = null;
    this.dateTimeEdit = null;
    this.defaultUi = null;
    this.imageEdit = null;
    this.numericEdit = null;
    this.passwordEdit = null;
    this.signature = null;
    this.textEdit = null;
  }
  [$getExtra]() {
    if (this[$extra] === undefined) {
      for (const name of Object.getOwnPropertyNames(this)) {
        if (name === "extras" || name === "picture") {
          continue;
        }
        const obj = this[name];
        if (!(obj instanceof XFAObject)) {
          continue;
        }
        this[$extra] = obj;
        return obj;
      }
      this[$extra] = null;
    }
    return this[$extra];
  }
  [$toHTML](availableSpace) {
    const obj = this[$getExtra]();
    if (obj) {
      return obj[$toHTML](availableSpace);
    }
    return HTMLResult.EMPTY;
  }
}
class Validate extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "validate", true);
    this.formatTest = getStringOption(attributes.formatTest, ["warning", "disabled", "error"]);
    this.id = attributes.id || "";
    this.nullTest = getStringOption(attributes.nullTest, ["disabled", "error", "warning"]);
    this.scriptTest = getStringOption(attributes.scriptTest, ["error", "disabled", "warning"]);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.extras = null;
    this.message = null;
    this.picture = null;
    this.script = null;
  }
}
class Value extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "value", true);
    this.id = attributes.id || "";
    this.override = getInteger({
      data: attributes.override,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.relevant = getRelevant(attributes.relevant);
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.arc = null;
    this.boolean = null;
    this.date = null;
    this.dateTime = null;
    this.decimal = null;
    this.exData = null;
    this.float = null;
    this.image = null;
    this.integer = null;
    this.line = null;
    this.rectangle = null;
    this.text = null;
    this.time = null;
  }
  [$setValue](value) {
    const parent = this[$getParent]();
    if (parent instanceof Field) {
      if (parent.ui?.imageEdit) {
        if (!this.image) {
          this.image = new Image({});
          this[$appendChild](this.image);
        }
        this.image[$content] = value[$content];
        return;
      }
    }
    const valueName = value[$nodeName];
    if (this[valueName] !== null) {
      this[valueName][$content] = value[$content];
      return;
    }
    for (const name of Object.getOwnPropertyNames(this)) {
      const obj = this[name];
      if (obj instanceof XFAObject) {
        this[name] = null;
        this[$removeChild](obj);
      }
    }
    this[value[$nodeName]] = value;
    this[$appendChild](value);
  }
  [$text]() {
    if (this.exData) {
      if (typeof this.exData[$content] === "string") {
        return this.exData[$content].trim();
      }
      return this.exData[$content][$text]().trim();
    }
    for (const name of Object.getOwnPropertyNames(this)) {
      if (name === "image") {
        continue;
      }
      const obj = this[name];
      if (obj instanceof XFAObject) {
        return (obj[$content] || "").toString().trim();
      }
    }
    return null;
  }
  [$toHTML](availableSpace) {
    for (const name of Object.getOwnPropertyNames(this)) {
      const obj = this[name];
      if (!(obj instanceof XFAObject)) {
        continue;
      }
      return obj[$toHTML](availableSpace);
    }
    return HTMLResult.EMPTY;
  }
}
class Variables extends XFAObject {
  constructor(attributes) {
    super(TEMPLATE_NS_ID, "variables", true);
    this.id = attributes.id || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
    this.boolean = new XFAObjectArray();
    this.date = new XFAObjectArray();
    this.dateTime = new XFAObjectArray();
    this.decimal = new XFAObjectArray();
    this.exData = new XFAObjectArray();
    this.float = new XFAObjectArray();
    this.image = new XFAObjectArray();
    this.integer = new XFAObjectArray();
    this.manifest = new XFAObjectArray();
    this.script = new XFAObjectArray();
    this.text = new XFAObjectArray();
    this.time = new XFAObjectArray();
  }
  [$isTransparent]() {
    return true;
  }
}
class TemplateNamespace {
  static [$buildXFAObject](name, attributes) {
    if (TemplateNamespace.hasOwnProperty(name)) {
      const node = TemplateNamespace[name](attributes);
      node[$setSetAttributes](attributes);
      return node;
    }
    return undefined;
  }
  static appearanceFilter(attrs) {
    return new AppearanceFilter(attrs);
  }
  static arc(attrs) {
    return new Arc(attrs);
  }
  static area(attrs) {
    return new Area(attrs);
  }
  static assist(attrs) {
    return new Assist(attrs);
  }
  static barcode(attrs) {
    return new Barcode(attrs);
  }
  static bind(attrs) {
    return new Bind(attrs);
  }
  static bindItems(attrs) {
    return new BindItems(attrs);
  }
  static bookend(attrs) {
    return new Bookend(attrs);
  }
  static boolean(attrs) {
    return new BooleanElement(attrs);
  }
  static border(attrs) {
    return new Border(attrs);
  }
  static break(attrs) {
    return new Break(attrs);
  }
  static breakAfter(attrs) {
    return new BreakAfter(attrs);
  }
  static breakBefore(attrs) {
    return new BreakBefore(attrs);
  }
  static button(attrs) {
    return new Button(attrs);
  }
  static calculate(attrs) {
    return new Calculate(attrs);
  }
  static caption(attrs) {
    return new Caption(attrs);
  }
  static certificate(attrs) {
    return new Certificate(attrs);
  }
  static certificates(attrs) {
    return new Certificates(attrs);
  }
  static checkButton(attrs) {
    return new CheckButton(attrs);
  }
  static choiceList(attrs) {
    return new ChoiceList(attrs);
  }
  static color(attrs) {
    return new Color(attrs);
  }
  static comb(attrs) {
    return new Comb(attrs);
  }
  static connect(attrs) {
    return new Connect(attrs);
  }
  static contentArea(attrs) {
    return new ContentArea(attrs);
  }
  static corner(attrs) {
    return new Corner(attrs);
  }
  static date(attrs) {
    return new DateElement(attrs);
  }
  static dateTime(attrs) {
    return new DateTime(attrs);
  }
  static dateTimeEdit(attrs) {
    return new DateTimeEdit(attrs);
  }
  static decimal(attrs) {
    return new Decimal(attrs);
  }
  static defaultUi(attrs) {
    return new DefaultUi(attrs);
  }
  static desc(attrs) {
    return new Desc(attrs);
  }
  static digestMethod(attrs) {
    return new DigestMethod(attrs);
  }
  static digestMethods(attrs) {
    return new DigestMethods(attrs);
  }
  static draw(attrs) {
    return new Draw(attrs);
  }
  static edge(attrs) {
    return new Edge(attrs);
  }
  static encoding(attrs) {
    return new Encoding(attrs);
  }
  static encodings(attrs) {
    return new Encodings(attrs);
  }
  static encrypt(attrs) {
    return new Encrypt(attrs);
  }
  static encryptData(attrs) {
    return new EncryptData(attrs);
  }
  static encryption(attrs) {
    return new Encryption(attrs);
  }
  static encryptionMethod(attrs) {
    return new EncryptionMethod(attrs);
  }
  static encryptionMethods(attrs) {
    return new EncryptionMethods(attrs);
  }
  static event(attrs) {
    return new Event(attrs);
  }
  static exData(attrs) {
    return new ExData(attrs);
  }
  static exObject(attrs) {
    return new ExObject(attrs);
  }
  static exclGroup(attrs) {
    return new ExclGroup(attrs);
  }
  static execute(attrs) {
    return new Execute(attrs);
  }
  static extras(attrs) {
    return new Extras(attrs);
  }
  static field(attrs) {
    return new Field(attrs);
  }
  static fill(attrs) {
    return new Fill(attrs);
  }
  static filter(attrs) {
    return new Filter(attrs);
  }
  static float(attrs) {
    return new Float(attrs);
  }
  static font(attrs) {
    return new template_Font(attrs);
  }
  static format(attrs) {
    return new Format(attrs);
  }
  static handler(attrs) {
    return new Handler(attrs);
  }
  static hyphenation(attrs) {
    return new Hyphenation(attrs);
  }
  static image(attrs) {
    return new Image(attrs);
  }
  static imageEdit(attrs) {
    return new ImageEdit(attrs);
  }
  static integer(attrs) {
    return new Integer(attrs);
  }
  static issuers(attrs) {
    return new Issuers(attrs);
  }
  static items(attrs) {
    return new Items(attrs);
  }
  static keep(attrs) {
    return new Keep(attrs);
  }
  static keyUsage(attrs) {
    return new KeyUsage(attrs);
  }
  static line(attrs) {
    return new Line(attrs);
  }
  static linear(attrs) {
    return new Linear(attrs);
  }
  static lockDocument(attrs) {
    return new LockDocument(attrs);
  }
  static manifest(attrs) {
    return new Manifest(attrs);
  }
  static margin(attrs) {
    return new Margin(attrs);
  }
  static mdp(attrs) {
    return new Mdp(attrs);
  }
  static medium(attrs) {
    return new Medium(attrs);
  }
  static message(attrs) {
    return new Message(attrs);
  }
  static numericEdit(attrs) {
    return new NumericEdit(attrs);
  }
  static occur(attrs) {
    return new Occur(attrs);
  }
  static oid(attrs) {
    return new Oid(attrs);
  }
  static oids(attrs) {
    return new Oids(attrs);
  }
  static overflow(attrs) {
    return new Overflow(attrs);
  }
  static pageArea(attrs) {
    return new PageArea(attrs);
  }
  static pageSet(attrs) {
    return new PageSet(attrs);
  }
  static para(attrs) {
    return new Para(attrs);
  }
  static passwordEdit(attrs) {
    return new PasswordEdit(attrs);
  }
  static pattern(attrs) {
    return new template_Pattern(attrs);
  }
  static picture(attrs) {
    return new Picture(attrs);
  }
  static proto(attrs) {
    return new Proto(attrs);
  }
  static radial(attrs) {
    return new Radial(attrs);
  }
  static reason(attrs) {
    return new Reason(attrs);
  }
  static reasons(attrs) {
    return new Reasons(attrs);
  }
  static rectangle(attrs) {
    return new Rectangle(attrs);
  }
  static ref(attrs) {
    return new RefElement(attrs);
  }
  static script(attrs) {
    return new Script(attrs);
  }
  static setProperty(attrs) {
    return new SetProperty(attrs);
  }
  static signData(attrs) {
    return new SignData(attrs);
  }
  static signature(attrs) {
    return new Signature(attrs);
  }
  static signing(attrs) {
    return new Signing(attrs);
  }
  static solid(attrs) {
    return new Solid(attrs);
  }
  static speak(attrs) {
    return new Speak(attrs);
  }
  static stipple(attrs) {
    return new Stipple(attrs);
  }
  static subform(attrs) {
    return new Subform(attrs);
  }
  static subformSet(attrs) {
    return new SubformSet(attrs);
  }
  static subjectDN(attrs) {
    return new SubjectDN(attrs);
  }
  static subjectDNs(attrs) {
    return new SubjectDNs(attrs);
  }
  static submit(attrs) {
    return new Submit(attrs);
  }
  static template(attrs) {
    return new Template(attrs);
  }
  static text(attrs) {
    return new Text(attrs);
  }
  static textEdit(attrs) {
    return new TextEdit(attrs);
  }
  static time(attrs) {
    return new Time(attrs);
  }
  static timeStamp(attrs) {
    return new TimeStamp(attrs);
  }
  static toolTip(attrs) {
    return new ToolTip(attrs);
  }
  static traversal(attrs) {
    return new Traversal(attrs);
  }
  static traverse(attrs) {
    return new Traverse(attrs);
  }
  static ui(attrs) {
    return new Ui(attrs);
  }
  static validate(attrs) {
    return new Validate(attrs);
  }
  static value(attrs) {
    return new Value(attrs);
  }
  static variables(attrs) {
    return new Variables(attrs);
  }
}

;// ./src/core/xfa/bind.js






const bind_NS_DATASETS = NamespaceIds.datasets.id;
function createText(content) {
  const node = new Text({});
  node[$content] = content;
  return node;
}
class Binder {
  constructor(root) {
    this.root = root;
    this.datasets = root.datasets;
    this.data = root.datasets?.data || new XmlObject(NamespaceIds.datasets.id, "data");
    this.emptyMerge = this.data[$getChildren]().length === 0;
    this.root.form = this.form = root.template[$clone]();
  }
  _isConsumeData() {
    return !this.emptyMerge && this._mergeMode;
  }
  _isMatchTemplate() {
    return !this._isConsumeData();
  }
  bind() {
    this._bindElement(this.form, this.data);
    return this.form;
  }
  getData() {
    return this.data;
  }
  _bindValue(formNode, data, picture) {
    formNode[$data] = data;
    if (formNode[$hasSettableValue]()) {
      if (data[$isDataValue]()) {
        const value = data[$getDataValue]();
        formNode[$setValue](createText(value));
      } else if (formNode instanceof Field && formNode.ui?.choiceList?.open === "multiSelect") {
        const value = data[$getChildren]().map(child => child[$content].trim()).join("\\n");
        formNode[$setValue](createText(value));
      } else if (this._isConsumeData()) {
        warn(\`XFA - Nodes haven't the same type.\`);
      }
    } else if (!data[$isDataValue]() || this._isMatchTemplate()) {
      this._bindElement(formNode, data);
    } else {
      warn(\`XFA - Nodes haven't the same type.\`);
    }
  }
  _findDataByNameToConsume(name, isValue, dataNode, global) {
    if (!name) {
      return null;
    }
    let generator, match;
    for (let i = 0; i < 3; i++) {
      generator = dataNode[$getRealChildrenByNameIt](name, false, true);
      while (true) {
        match = generator.next().value;
        if (!match) {
          break;
        }
        if (isValue === match[$isDataValue]()) {
          return match;
        }
      }
      if (dataNode[$namespaceId] === NamespaceIds.datasets.id && dataNode[$nodeName] === "data") {
        break;
      }
      dataNode = dataNode[$getParent]();
    }
    if (!global) {
      return null;
    }
    generator = this.data[$getRealChildrenByNameIt](name, true, false);
    match = generator.next().value;
    if (match) {
      return match;
    }
    generator = this.data[$getAttributeIt](name, true);
    match = generator.next().value;
    if (match?.[$isDataValue]()) {
      return match;
    }
    return null;
  }
  _setProperties(formNode, dataNode) {
    if (!formNode.hasOwnProperty("setProperty")) {
      return;
    }
    for (const {
      ref,
      target,
      connection
    } of formNode.setProperty.children) {
      if (connection) {
        continue;
      }
      if (!ref) {
        continue;
      }
      const nodes = searchNode(this.root, dataNode, ref, false, false);
      if (!nodes) {
        warn(\`XFA - Invalid reference: \${ref}.\`);
        continue;
      }
      const [node] = nodes;
      if (!node[$isDescendent](this.data)) {
        warn(\`XFA - Invalid node: must be a data node.\`);
        continue;
      }
      const targetNodes = searchNode(this.root, formNode, target, false, false);
      if (!targetNodes) {
        warn(\`XFA - Invalid target: \${target}.\`);
        continue;
      }
      const [targetNode] = targetNodes;
      if (!targetNode[$isDescendent](formNode)) {
        warn(\`XFA - Invalid target: must be a property or subproperty.\`);
        continue;
      }
      const targetParent = targetNode[$getParent]();
      if (targetNode instanceof SetProperty || targetParent instanceof SetProperty) {
        warn(\`XFA - Invalid target: cannot be a setProperty or one of its properties.\`);
        continue;
      }
      if (targetNode instanceof BindItems || targetParent instanceof BindItems) {
        warn(\`XFA - Invalid target: cannot be a bindItems or one of its properties.\`);
        continue;
      }
      const content = node[$text]();
      const name = targetNode[$nodeName];
      if (targetNode instanceof XFAAttribute) {
        const attrs = Object.create(null);
        attrs[name] = content;
        const obj = Reflect.construct(Object.getPrototypeOf(targetParent).constructor, [attrs]);
        targetParent[name] = obj[name];
        continue;
      }
      if (!targetNode.hasOwnProperty($content)) {
        warn(\`XFA - Invalid node to use in setProperty\`);
        continue;
      }
      targetNode[$data] = node;
      targetNode[$content] = content;
      targetNode[$finalize]();
    }
  }
  _bindItems(formNode, dataNode) {
    if (!formNode.hasOwnProperty("items") || !formNode.hasOwnProperty("bindItems") || formNode.bindItems.isEmpty()) {
      return;
    }
    for (const item of formNode.items.children) {
      formNode[$removeChild](item);
    }
    formNode.items.clear();
    const labels = new Items({});
    const values = new Items({});
    formNode[$appendChild](labels);
    formNode.items.push(labels);
    formNode[$appendChild](values);
    formNode.items.push(values);
    for (const {
      ref,
      labelRef,
      valueRef,
      connection
    } of formNode.bindItems.children) {
      if (connection) {
        continue;
      }
      if (!ref) {
        continue;
      }
      const nodes = searchNode(this.root, dataNode, ref, false, false);
      if (!nodes) {
        warn(\`XFA - Invalid reference: \${ref}.\`);
        continue;
      }
      for (const node of nodes) {
        if (!node[$isDescendent](this.datasets)) {
          warn(\`XFA - Invalid ref (\${ref}): must be a datasets child.\`);
          continue;
        }
        const labelNodes = searchNode(this.root, node, labelRef, true, false);
        if (!labelNodes) {
          warn(\`XFA - Invalid label: \${labelRef}.\`);
          continue;
        }
        const [labelNode] = labelNodes;
        if (!labelNode[$isDescendent](this.datasets)) {
          warn(\`XFA - Invalid label: must be a datasets child.\`);
          continue;
        }
        const valueNodes = searchNode(this.root, node, valueRef, true, false);
        if (!valueNodes) {
          warn(\`XFA - Invalid value: \${valueRef}.\`);
          continue;
        }
        const [valueNode] = valueNodes;
        if (!valueNode[$isDescendent](this.datasets)) {
          warn(\`XFA - Invalid value: must be a datasets child.\`);
          continue;
        }
        const label = createText(labelNode[$text]());
        const value = createText(valueNode[$text]());
        labels[$appendChild](label);
        labels.text.push(label);
        values[$appendChild](value);
        values.text.push(value);
      }
    }
  }
  _bindOccurrences(formNode, matches, picture) {
    let baseClone;
    if (matches.length > 1) {
      baseClone = formNode[$clone]();
      baseClone[$removeChild](baseClone.occur);
      baseClone.occur = null;
    }
    this._bindValue(formNode, matches[0], picture);
    this._setProperties(formNode, matches[0]);
    this._bindItems(formNode, matches[0]);
    if (matches.length === 1) {
      return;
    }
    const parent = formNode[$getParent]();
    const name = formNode[$nodeName];
    const pos = parent[$indexOf](formNode);
    for (let i = 1, ii = matches.length; i < ii; i++) {
      const match = matches[i];
      const clone = baseClone[$clone]();
      parent[name].push(clone);
      parent[$insertAt](pos + i, clone);
      this._bindValue(clone, match, picture);
      this._setProperties(clone, match);
      this._bindItems(clone, match);
    }
  }
  _createOccurrences(formNode) {
    if (!this.emptyMerge) {
      return;
    }
    const {
      occur
    } = formNode;
    if (!occur || occur.initial <= 1) {
      return;
    }
    const parent = formNode[$getParent]();
    const name = formNode[$nodeName];
    if (!(parent[name] instanceof XFAObjectArray)) {
      return;
    }
    let currentNumber;
    if (formNode.name) {
      currentNumber = parent[name].children.filter(e => e.name === formNode.name).length;
    } else {
      currentNumber = parent[name].children.length;
    }
    const pos = parent[$indexOf](formNode) + 1;
    const ii = occur.initial - currentNumber;
    if (ii) {
      const nodeClone = formNode[$clone]();
      nodeClone[$removeChild](nodeClone.occur);
      nodeClone.occur = null;
      parent[name].push(nodeClone);
      parent[$insertAt](pos, nodeClone);
      for (let i = 1; i < ii; i++) {
        const clone = nodeClone[$clone]();
        parent[name].push(clone);
        parent[$insertAt](pos + i, clone);
      }
    }
  }
  _getOccurInfo(formNode) {
    const {
      name,
      occur
    } = formNode;
    if (!occur || !name) {
      return [1, 1];
    }
    const max = occur.max === -1 ? Infinity : occur.max;
    return [occur.min, max];
  }
  _setAndBind(formNode, dataNode) {
    this._setProperties(formNode, dataNode);
    this._bindItems(formNode, dataNode);
    this._bindElement(formNode, dataNode);
  }
  _bindElement(formNode, dataNode) {
    const uselessNodes = [];
    this._createOccurrences(formNode);
    for (const child of formNode[$getChildren]()) {
      if (child[$data]) {
        continue;
      }
      if (this._mergeMode === undefined && child[$nodeName] === "subform") {
        this._mergeMode = child.mergeMode === "consumeData";
        const dataChildren = dataNode[$getChildren]();
        if (dataChildren.length > 0) {
          this._bindOccurrences(child, [dataChildren[0]], null);
        } else if (this.emptyMerge) {
          const nsId = dataNode[$namespaceId] === bind_NS_DATASETS ? -1 : dataNode[$namespaceId];
          const dataChild = child[$data] = new XmlObject(nsId, child.name || "root");
          dataNode[$appendChild](dataChild);
          this._bindElement(child, dataChild);
        }
        continue;
      }
      if (!child[$isBindable]()) {
        continue;
      }
      let global = false;
      let picture = null;
      let ref = null;
      let match = null;
      if (child.bind) {
        switch (child.bind.match) {
          case "none":
            this._setAndBind(child, dataNode);
            continue;
          case "global":
            global = true;
            break;
          case "dataRef":
            if (!child.bind.ref) {
              warn(\`XFA - ref is empty in node \${child[$nodeName]}.\`);
              this._setAndBind(child, dataNode);
              continue;
            }
            ref = child.bind.ref;
            break;
          default:
            break;
        }
        if (child.bind.picture) {
          picture = child.bind.picture[$content];
        }
      }
      const [min, max] = this._getOccurInfo(child);
      if (ref) {
        match = searchNode(this.root, dataNode, ref, true, false);
        if (match === null) {
          match = createDataNode(this.data, dataNode, ref);
          if (!match) {
            continue;
          }
          if (this._isConsumeData()) {
            match[$consumed] = true;
          }
          this._setAndBind(child, match);
          continue;
        } else {
          if (this._isConsumeData()) {
            match = match.filter(node => !node[$consumed]);
          }
          if (match.length > max) {
            match = match.slice(0, max);
          } else if (match.length === 0) {
            match = null;
          }
          if (match && this._isConsumeData()) {
            match.forEach(node => {
              node[$consumed] = true;
            });
          }
        }
      } else {
        if (!child.name) {
          this._setAndBind(child, dataNode);
          continue;
        }
        if (this._isConsumeData()) {
          const matches = [];
          while (matches.length < max) {
            const found = this._findDataByNameToConsume(child.name, child[$hasSettableValue](), dataNode, global);
            if (!found) {
              break;
            }
            found[$consumed] = true;
            matches.push(found);
          }
          match = matches.length > 0 ? matches : null;
        } else {
          match = dataNode[$getRealChildrenByNameIt](child.name, false, this.emptyMerge).next().value;
          if (!match) {
            if (min === 0) {
              uselessNodes.push(child);
              continue;
            }
            const nsId = dataNode[$namespaceId] === bind_NS_DATASETS ? -1 : dataNode[$namespaceId];
            match = child[$data] = new XmlObject(nsId, child.name);
            if (this.emptyMerge) {
              match[$consumed] = true;
            }
            dataNode[$appendChild](match);
            this._setAndBind(child, match);
            continue;
          }
          if (this.emptyMerge) {
            match[$consumed] = true;
          }
          match = [match];
        }
      }
      if (match) {
        this._bindOccurrences(child, match, picture);
      } else if (min > 0) {
        this._setAndBind(child, dataNode);
      } else {
        uselessNodes.push(child);
      }
    }
    uselessNodes.forEach(node => node[$getParent]()[$removeChild](node));
  }
}

;// ./src/core/xfa/data.js

class DataHandler {
  constructor(root, data) {
    this.data = data;
    this.dataset = root.datasets || null;
  }
  serialize(storage) {
    const stack = [[-1, this.data[$getChildren]()]];
    while (stack.length > 0) {
      const last = stack.at(-1);
      const [i, children] = last;
      if (i + 1 === children.length) {
        stack.pop();
        continue;
      }
      const child = children[++last[0]];
      const storageEntry = storage.get(child[$uid]);
      if (storageEntry) {
        child[$setValue](storageEntry);
      } else {
        const attributes = child[$getAttributes]();
        for (const value of attributes.values()) {
          const entry = storage.get(value[$uid]);
          if (entry) {
            value[$setValue](entry);
            break;
          }
        }
      }
      const nodes = child[$getChildren]();
      if (nodes.length > 0) {
        stack.push([-1, nodes]);
      }
    }
    const buf = [\`<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\`];
    if (this.dataset) {
      for (const child of this.dataset[$getChildren]()) {
        if (child[$nodeName] !== "data") {
          child[$toString](buf);
        }
      }
    }
    this.data[$toString](buf);
    buf.push("</xfa:datasets>");
    return buf.join("");
  }
}

;// ./src/core/xfa/config.js





const CONFIG_NS_ID = NamespaceIds.config.id;
class Acrobat extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "acrobat", true);
    this.acrobat7 = null;
    this.autoSave = null;
    this.common = null;
    this.validate = null;
    this.validateApprovalSignatures = null;
    this.submitUrl = new XFAObjectArray();
  }
}
class Acrobat7 extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "acrobat7", true);
    this.dynamicRender = null;
  }
}
class ADBE_JSConsole extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "ADBE_JSConsole", ["delegate", "Enable", "Disable"]);
  }
}
class ADBE_JSDebugger extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "ADBE_JSDebugger", ["delegate", "Enable", "Disable"]);
  }
}
class AddSilentPrint extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "addSilentPrint");
  }
}
class AddViewerPreferences extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "addViewerPreferences");
  }
}
class AdjustData extends Option10 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "adjustData");
  }
}
class AdobeExtensionLevel extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "adobeExtensionLevel", 0, n => n >= 1 && n <= 8);
  }
}
class Agent extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "agent", true);
    this.name = attributes.name ? attributes.name.trim() : "";
    this.common = new XFAObjectArray();
  }
}
class AlwaysEmbed extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "alwaysEmbed");
  }
}
class Amd extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "amd");
  }
}
class config_Area extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "area");
    this.level = getInteger({
      data: attributes.level,
      defaultValue: 0,
      validate: n => n >= 1 && n <= 3
    });
    this.name = getStringOption(attributes.name, ["", "barcode", "coreinit", "deviceDriver", "font", "general", "layout", "merge", "script", "signature", "sourceSet", "templateCache"]);
  }
}
class Attributes extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "attributes", ["preserve", "delegate", "ignore"]);
  }
}
class AutoSave extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "autoSave", ["disabled", "enabled"]);
  }
}
class Base extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "base");
  }
}
class BatchOutput extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "batchOutput");
    this.format = getStringOption(attributes.format, ["none", "concat", "zip", "zipCompress"]);
  }
}
class BehaviorOverride extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "behaviorOverride");
  }
  [$finalize]() {
    this[$content] = new Map(this[$content].trim().split(/\\s+/).filter(x => x.includes(":")).map(x => x.split(":", 2)));
  }
}
class Cache extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "cache", true);
    this.templateCache = null;
  }
}
class Change extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "change");
  }
}
class Common extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "common", true);
    this.data = null;
    this.locale = null;
    this.localeSet = null;
    this.messaging = null;
    this.suppressBanner = null;
    this.template = null;
    this.validationMessaging = null;
    this.versionControl = null;
    this.log = new XFAObjectArray();
  }
}
class Compress extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "compress");
    this.scope = getStringOption(attributes.scope, ["imageOnly", "document"]);
  }
}
class CompressLogicalStructure extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "compressLogicalStructure");
  }
}
class CompressObjectStream extends Option10 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "compressObjectStream");
  }
}
class Compression extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "compression", true);
    this.compressLogicalStructure = null;
    this.compressObjectStream = null;
    this.level = null;
    this.type = null;
  }
}
class Config extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "config", true);
    this.acrobat = null;
    this.present = null;
    this.trace = null;
    this.agent = new XFAObjectArray();
  }
}
class Conformance extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "conformance", ["A", "B"]);
  }
}
class ContentCopy extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "contentCopy");
  }
}
class Copies extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "copies", 1, n => n >= 1);
  }
}
class Creator extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "creator");
  }
}
class CurrentPage extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "currentPage", 0, n => n >= 0);
  }
}
class Data extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "data", true);
    this.adjustData = null;
    this.attributes = null;
    this.incrementalLoad = null;
    this.outputXSL = null;
    this.range = null;
    this.record = null;
    this.startNode = null;
    this.uri = null;
    this.window = null;
    this.xsl = null;
    this.excludeNS = new XFAObjectArray();
    this.transform = new XFAObjectArray();
  }
}
class Debug extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "debug", true);
    this.uri = null;
  }
}
class DefaultTypeface extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "defaultTypeface");
    this.writingScript = getStringOption(attributes.writingScript, ["*", "Arabic", "Cyrillic", "EastEuropeanRoman", "Greek", "Hebrew", "Japanese", "Korean", "Roman", "SimplifiedChinese", "Thai", "TraditionalChinese", "Vietnamese"]);
  }
}
class Destination extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "destination", ["pdf", "pcl", "ps", "webClient", "zpl"]);
  }
}
class DocumentAssembly extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "documentAssembly");
  }
}
class Driver extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "driver", true);
    this.name = attributes.name ? attributes.name.trim() : "";
    this.fontInfo = null;
    this.xdc = null;
  }
}
class DuplexOption extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "duplexOption", ["simplex", "duplexFlipLongEdge", "duplexFlipShortEdge"]);
  }
}
class DynamicRender extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "dynamicRender", ["forbidden", "required"]);
  }
}
class Embed extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "embed");
  }
}
class config_Encrypt extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "encrypt");
  }
}
class config_Encryption extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "encryption", true);
    this.encrypt = null;
    this.encryptionLevel = null;
    this.permissions = null;
  }
}
class EncryptionLevel extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "encryptionLevel", ["40bit", "128bit"]);
  }
}
class Enforce extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "enforce");
  }
}
class Equate extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "equate");
    this.force = getInteger({
      data: attributes.force,
      defaultValue: 1,
      validate: n => n === 0
    });
    this.from = attributes.from || "";
    this.to = attributes.to || "";
  }
}
class EquateRange extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "equateRange");
    this.from = attributes.from || "";
    this.to = attributes.to || "";
    this._unicodeRange = attributes.unicodeRange || "";
  }
  get unicodeRange() {
    const ranges = [];
    const unicodeRegex = /U\\+([0-9a-fA-F]+)/;
    const unicodeRange = this._unicodeRange;
    for (let range of unicodeRange.split(",").map(x => x.trim()).filter(x => !!x)) {
      range = range.split("-", 2).map(x => {
        const found = x.match(unicodeRegex);
        if (!found) {
          return 0;
        }
        return parseInt(found[1], 16);
      });
      if (range.length === 1) {
        range.push(range[0]);
      }
      ranges.push(range);
    }
    return shadow(this, "unicodeRange", ranges);
  }
}
class Exclude extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "exclude");
  }
  [$finalize]() {
    this[$content] = this[$content].trim().split(/\\s+/).filter(x => x && ["calculate", "close", "enter", "exit", "initialize", "ready", "validate"].includes(x));
  }
}
class ExcludeNS extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "excludeNS");
  }
}
class FlipLabel extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "flipLabel", ["usePrinterSetting", "on", "off"]);
  }
}
class config_FontInfo extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "fontInfo", true);
    this.embed = null;
    this.map = null;
    this.subsetBelow = null;
    this.alwaysEmbed = new XFAObjectArray();
    this.defaultTypeface = new XFAObjectArray();
    this.neverEmbed = new XFAObjectArray();
  }
}
class FormFieldFilling extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "formFieldFilling");
  }
}
class GroupParent extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "groupParent");
  }
}
class IfEmpty extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "ifEmpty", ["dataValue", "dataGroup", "ignore", "remove"]);
  }
}
class IncludeXDPContent extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "includeXDPContent");
  }
}
class IncrementalLoad extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "incrementalLoad", ["none", "forwardOnly"]);
  }
}
class IncrementalMerge extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "incrementalMerge");
  }
}
class Interactive extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "interactive");
  }
}
class Jog extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "jog", ["usePrinterSetting", "none", "pageSet"]);
  }
}
class LabelPrinter extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "labelPrinter", true);
    this.name = getStringOption(attributes.name, ["zpl", "dpl", "ipl", "tcpl"]);
    this.batchOutput = null;
    this.flipLabel = null;
    this.fontInfo = null;
    this.xdc = null;
  }
}
class Layout extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "layout", ["paginate", "panel"]);
  }
}
class Level extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "level", 0, n => n > 0);
  }
}
class Linearized extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "linearized");
  }
}
class Locale extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "locale");
  }
}
class LocaleSet extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "localeSet");
  }
}
class Log extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "log", true);
    this.mode = null;
    this.threshold = null;
    this.to = null;
    this.uri = null;
  }
}
class MapElement extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "map", true);
    this.equate = new XFAObjectArray();
    this.equateRange = new XFAObjectArray();
  }
}
class MediumInfo extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "mediumInfo", true);
    this.map = null;
  }
}
class config_Message extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "message", true);
    this.msgId = null;
    this.severity = null;
  }
}
class Messaging extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "messaging", true);
    this.message = new XFAObjectArray();
  }
}
class Mode extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "mode", ["append", "overwrite"]);
  }
}
class ModifyAnnots extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "modifyAnnots");
  }
}
class MsgId extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "msgId", 1, n => n >= 1);
  }
}
class NameAttr extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "nameAttr");
  }
}
class NeverEmbed extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "neverEmbed");
  }
}
class NumberOfCopies extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "numberOfCopies", null, n => n >= 2 && n <= 5);
  }
}
class OpenAction extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "openAction", true);
    this.destination = null;
  }
}
class Output extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "output", true);
    this.to = null;
    this.type = null;
    this.uri = null;
  }
}
class OutputBin extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "outputBin");
  }
}
class OutputXSL extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "outputXSL", true);
    this.uri = null;
  }
}
class Overprint extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "overprint", ["none", "both", "draw", "field"]);
  }
}
class Packets extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "packets");
  }
  [$finalize]() {
    if (this[$content] === "*") {
      return;
    }
    this[$content] = this[$content].trim().split(/\\s+/).filter(x => ["config", "datasets", "template", "xfdf", "xslt"].includes(x));
  }
}
class PageOffset extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "pageOffset");
    this.x = getInteger({
      data: attributes.x,
      defaultValue: "useXDCSetting",
      validate: n => true
    });
    this.y = getInteger({
      data: attributes.y,
      defaultValue: "useXDCSetting",
      validate: n => true
    });
  }
}
class PageRange extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "pageRange");
  }
  [$finalize]() {
    const numbers = this[$content].trim().split(/\\s+/).map(x => parseInt(x, 10));
    const ranges = [];
    for (let i = 0, ii = numbers.length; i < ii; i += 2) {
      ranges.push(numbers.slice(i, i + 2));
    }
    this[$content] = ranges;
  }
}
class Pagination extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "pagination", ["simplex", "duplexShortEdge", "duplexLongEdge"]);
  }
}
class PaginationOverride extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "paginationOverride", ["none", "forceDuplex", "forceDuplexLongEdge", "forceDuplexShortEdge", "forceSimplex"]);
  }
}
class Part extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "part", 1, n => false);
  }
}
class Pcl extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "pcl", true);
    this.name = attributes.name || "";
    this.batchOutput = null;
    this.fontInfo = null;
    this.jog = null;
    this.mediumInfo = null;
    this.outputBin = null;
    this.pageOffset = null;
    this.staple = null;
    this.xdc = null;
  }
}
class Pdf extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "pdf", true);
    this.name = attributes.name || "";
    this.adobeExtensionLevel = null;
    this.batchOutput = null;
    this.compression = null;
    this.creator = null;
    this.encryption = null;
    this.fontInfo = null;
    this.interactive = null;
    this.linearized = null;
    this.openAction = null;
    this.pdfa = null;
    this.producer = null;
    this.renderPolicy = null;
    this.scriptModel = null;
    this.silentPrint = null;
    this.submitFormat = null;
    this.tagged = null;
    this.version = null;
    this.viewerPreferences = null;
    this.xdc = null;
  }
}
class Pdfa extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "pdfa", true);
    this.amd = null;
    this.conformance = null;
    this.includeXDPContent = null;
    this.part = null;
  }
}
class Permissions extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "permissions", true);
    this.accessibleContent = null;
    this.change = null;
    this.contentCopy = null;
    this.documentAssembly = null;
    this.formFieldFilling = null;
    this.modifyAnnots = null;
    this.plaintextMetadata = null;
    this.print = null;
    this.printHighQuality = null;
  }
}
class PickTrayByPDFSize extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "pickTrayByPDFSize");
  }
}
class config_Picture extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "picture");
  }
}
class PlaintextMetadata extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "plaintextMetadata");
  }
}
class Presence extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "presence", ["preserve", "dissolve", "dissolveStructure", "ignore", "remove"]);
  }
}
class Present extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "present", true);
    this.behaviorOverride = null;
    this.cache = null;
    this.common = null;
    this.copies = null;
    this.destination = null;
    this.incrementalMerge = null;
    this.layout = null;
    this.output = null;
    this.overprint = null;
    this.pagination = null;
    this.paginationOverride = null;
    this.script = null;
    this.validate = null;
    this.xdp = null;
    this.driver = new XFAObjectArray();
    this.labelPrinter = new XFAObjectArray();
    this.pcl = new XFAObjectArray();
    this.pdf = new XFAObjectArray();
    this.ps = new XFAObjectArray();
    this.submitUrl = new XFAObjectArray();
    this.webClient = new XFAObjectArray();
    this.zpl = new XFAObjectArray();
  }
}
class Print extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "print");
  }
}
class PrintHighQuality extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "printHighQuality");
  }
}
class PrintScaling extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "printScaling", ["appdefault", "noScaling"]);
  }
}
class PrinterName extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "printerName");
  }
}
class Producer extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "producer");
  }
}
class Ps extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "ps", true);
    this.name = attributes.name || "";
    this.batchOutput = null;
    this.fontInfo = null;
    this.jog = null;
    this.mediumInfo = null;
    this.outputBin = null;
    this.staple = null;
    this.xdc = null;
  }
}
class Range extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "range");
  }
  [$finalize]() {
    this[$content] = this[$content].split(",", 2).map(range => range.split("-").map(x => parseInt(x.trim(), 10))).filter(range => range.every(x => !isNaN(x))).map(range => {
      if (range.length === 1) {
        range.push(range[0]);
      }
      return range;
    });
  }
}
class Record extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "record");
  }
  [$finalize]() {
    this[$content] = this[$content].trim();
    const n = parseInt(this[$content], 10);
    if (!isNaN(n) && n >= 0) {
      this[$content] = n;
    }
  }
}
class Relevant extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "relevant");
  }
  [$finalize]() {
    this[$content] = this[$content].trim().split(/\\s+/);
  }
}
class Rename extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "rename");
  }
  [$finalize]() {
    this[$content] = this[$content].trim();
    if (this[$content].toLowerCase().startsWith("xml") || new RegExp("[\\\\p{L}_][\\\\p{L}\\\\d._\\\\p{M}-]*", "u").test(this[$content])) {
      warn("XFA - Rename: invalid XFA name");
    }
  }
}
class RenderPolicy extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "renderPolicy", ["server", "client"]);
  }
}
class RunScripts extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "runScripts", ["both", "client", "none", "server"]);
  }
}
class config_Script extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "script", true);
    this.currentPage = null;
    this.exclude = null;
    this.runScripts = null;
  }
}
class ScriptModel extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "scriptModel", ["XFA", "none"]);
  }
}
class Severity extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "severity", ["ignore", "error", "information", "trace", "warning"]);
  }
}
class SilentPrint extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "silentPrint", true);
    this.addSilentPrint = null;
    this.printerName = null;
  }
}
class Staple extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "staple");
    this.mode = getStringOption(attributes.mode, ["usePrinterSetting", "on", "off"]);
  }
}
class StartNode extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "startNode");
  }
}
class StartPage extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "startPage", 0, n => true);
  }
}
class SubmitFormat extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "submitFormat", ["html", "delegate", "fdf", "xml", "pdf"]);
  }
}
class SubmitUrl extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "submitUrl");
  }
}
class SubsetBelow extends IntegerObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "subsetBelow", 100, n => n >= 0 && n <= 100);
  }
}
class SuppressBanner extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "suppressBanner");
  }
}
class Tagged extends Option01 {
  constructor(attributes) {
    super(CONFIG_NS_ID, "tagged");
  }
}
class config_Template extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "template", true);
    this.base = null;
    this.relevant = null;
    this.startPage = null;
    this.uri = null;
    this.xsl = null;
  }
}
class Threshold extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "threshold", ["trace", "error", "information", "warning"]);
  }
}
class To extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "to", ["null", "memory", "stderr", "stdout", "system", "uri"]);
  }
}
class TemplateCache extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "templateCache");
    this.maxEntries = getInteger({
      data: attributes.maxEntries,
      defaultValue: 5,
      validate: n => n >= 0
    });
  }
}
class Trace extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "trace", true);
    this.area = new XFAObjectArray();
  }
}
class Transform extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "transform", true);
    this.groupParent = null;
    this.ifEmpty = null;
    this.nameAttr = null;
    this.picture = null;
    this.presence = null;
    this.rename = null;
    this.whitespace = null;
  }
}
class Type extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "type", ["none", "ascii85", "asciiHex", "ccittfax", "flate", "lzw", "runLength", "native", "xdp", "mergedXDP"]);
  }
}
class Uri extends StringObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "uri");
  }
}
class config_Validate extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "validate", ["preSubmit", "prePrint", "preExecute", "preSave"]);
  }
}
class ValidateApprovalSignatures extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "validateApprovalSignatures");
  }
  [$finalize]() {
    this[$content] = this[$content].trim().split(/\\s+/).filter(x => ["docReady", "postSign"].includes(x));
  }
}
class ValidationMessaging extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "validationMessaging", ["allMessagesIndividually", "allMessagesTogether", "firstMessageOnly", "noMessages"]);
  }
}
class Version extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "version", ["1.7", "1.6", "1.5", "1.4", "1.3", "1.2"]);
  }
}
class VersionControl extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "VersionControl");
    this.outputBelow = getStringOption(attributes.outputBelow, ["warn", "error", "update"]);
    this.sourceAbove = getStringOption(attributes.sourceAbove, ["warn", "error"]);
    this.sourceBelow = getStringOption(attributes.sourceBelow, ["update", "maintain"]);
  }
}
class ViewerPreferences extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "viewerPreferences", true);
    this.ADBE_JSConsole = null;
    this.ADBE_JSDebugger = null;
    this.addViewerPreferences = null;
    this.duplexOption = null;
    this.enforce = null;
    this.numberOfCopies = null;
    this.pageRange = null;
    this.pickTrayByPDFSize = null;
    this.printScaling = null;
  }
}
class WebClient extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "webClient", true);
    this.name = attributes.name ? attributes.name.trim() : "";
    this.fontInfo = null;
    this.xdc = null;
  }
}
class Whitespace extends OptionObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "whitespace", ["preserve", "ltrim", "normalize", "rtrim", "trim"]);
  }
}
class Window extends ContentObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "window");
  }
  [$finalize]() {
    const pair = this[$content].split(",", 2).map(x => parseInt(x.trim(), 10));
    if (pair.some(x => isNaN(x))) {
      this[$content] = [0, 0];
      return;
    }
    if (pair.length === 1) {
      pair.push(pair[0]);
    }
    this[$content] = pair;
  }
}
class Xdc extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "xdc", true);
    this.uri = new XFAObjectArray();
    this.xsl = new XFAObjectArray();
  }
}
class Xdp extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "xdp", true);
    this.packets = null;
  }
}
class Xsl extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "xsl", true);
    this.debug = null;
    this.uri = null;
  }
}
class Zpl extends XFAObject {
  constructor(attributes) {
    super(CONFIG_NS_ID, "zpl", true);
    this.name = attributes.name ? attributes.name.trim() : "";
    this.batchOutput = null;
    this.flipLabel = null;
    this.fontInfo = null;
    this.xdc = null;
  }
}
class ConfigNamespace {
  static [$buildXFAObject](name, attributes) {
    if (ConfigNamespace.hasOwnProperty(name)) {
      return ConfigNamespace[name](attributes);
    }
    return undefined;
  }
  static acrobat(attrs) {
    return new Acrobat(attrs);
  }
  static acrobat7(attrs) {
    return new Acrobat7(attrs);
  }
  static ADBE_JSConsole(attrs) {
    return new ADBE_JSConsole(attrs);
  }
  static ADBE_JSDebugger(attrs) {
    return new ADBE_JSDebugger(attrs);
  }
  static addSilentPrint(attrs) {
    return new AddSilentPrint(attrs);
  }
  static addViewerPreferences(attrs) {
    return new AddViewerPreferences(attrs);
  }
  static adjustData(attrs) {
    return new AdjustData(attrs);
  }
  static adobeExtensionLevel(attrs) {
    return new AdobeExtensionLevel(attrs);
  }
  static agent(attrs) {
    return new Agent(attrs);
  }
  static alwaysEmbed(attrs) {
    return new AlwaysEmbed(attrs);
  }
  static amd(attrs) {
    return new Amd(attrs);
  }
  static area(attrs) {
    return new config_Area(attrs);
  }
  static attributes(attrs) {
    return new Attributes(attrs);
  }
  static autoSave(attrs) {
    return new AutoSave(attrs);
  }
  static base(attrs) {
    return new Base(attrs);
  }
  static batchOutput(attrs) {
    return new BatchOutput(attrs);
  }
  static behaviorOverride(attrs) {
    return new BehaviorOverride(attrs);
  }
  static cache(attrs) {
    return new Cache(attrs);
  }
  static change(attrs) {
    return new Change(attrs);
  }
  static common(attrs) {
    return new Common(attrs);
  }
  static compress(attrs) {
    return new Compress(attrs);
  }
  static compressLogicalStructure(attrs) {
    return new CompressLogicalStructure(attrs);
  }
  static compressObjectStream(attrs) {
    return new CompressObjectStream(attrs);
  }
  static compression(attrs) {
    return new Compression(attrs);
  }
  static config(attrs) {
    return new Config(attrs);
  }
  static conformance(attrs) {
    return new Conformance(attrs);
  }
  static contentCopy(attrs) {
    return new ContentCopy(attrs);
  }
  static copies(attrs) {
    return new Copies(attrs);
  }
  static creator(attrs) {
    return new Creator(attrs);
  }
  static currentPage(attrs) {
    return new CurrentPage(attrs);
  }
  static data(attrs) {
    return new Data(attrs);
  }
  static debug(attrs) {
    return new Debug(attrs);
  }
  static defaultTypeface(attrs) {
    return new DefaultTypeface(attrs);
  }
  static destination(attrs) {
    return new Destination(attrs);
  }
  static documentAssembly(attrs) {
    return new DocumentAssembly(attrs);
  }
  static driver(attrs) {
    return new Driver(attrs);
  }
  static duplexOption(attrs) {
    return new DuplexOption(attrs);
  }
  static dynamicRender(attrs) {
    return new DynamicRender(attrs);
  }
  static embed(attrs) {
    return new Embed(attrs);
  }
  static encrypt(attrs) {
    return new config_Encrypt(attrs);
  }
  static encryption(attrs) {
    return new config_Encryption(attrs);
  }
  static encryptionLevel(attrs) {
    return new EncryptionLevel(attrs);
  }
  static enforce(attrs) {
    return new Enforce(attrs);
  }
  static equate(attrs) {
    return new Equate(attrs);
  }
  static equateRange(attrs) {
    return new EquateRange(attrs);
  }
  static exclude(attrs) {
    return new Exclude(attrs);
  }
  static excludeNS(attrs) {
    return new ExcludeNS(attrs);
  }
  static flipLabel(attrs) {
    return new FlipLabel(attrs);
  }
  static fontInfo(attrs) {
    return new config_FontInfo(attrs);
  }
  static formFieldFilling(attrs) {
    return new FormFieldFilling(attrs);
  }
  static groupParent(attrs) {
    return new GroupParent(attrs);
  }
  static ifEmpty(attrs) {
    return new IfEmpty(attrs);
  }
  static includeXDPContent(attrs) {
    return new IncludeXDPContent(attrs);
  }
  static incrementalLoad(attrs) {
    return new IncrementalLoad(attrs);
  }
  static incrementalMerge(attrs) {
    return new IncrementalMerge(attrs);
  }
  static interactive(attrs) {
    return new Interactive(attrs);
  }
  static jog(attrs) {
    return new Jog(attrs);
  }
  static labelPrinter(attrs) {
    return new LabelPrinter(attrs);
  }
  static layout(attrs) {
    return new Layout(attrs);
  }
  static level(attrs) {
    return new Level(attrs);
  }
  static linearized(attrs) {
    return new Linearized(attrs);
  }
  static locale(attrs) {
    return new Locale(attrs);
  }
  static localeSet(attrs) {
    return new LocaleSet(attrs);
  }
  static log(attrs) {
    return new Log(attrs);
  }
  static map(attrs) {
    return new MapElement(attrs);
  }
  static mediumInfo(attrs) {
    return new MediumInfo(attrs);
  }
  static message(attrs) {
    return new config_Message(attrs);
  }
  static messaging(attrs) {
    return new Messaging(attrs);
  }
  static mode(attrs) {
    return new Mode(attrs);
  }
  static modifyAnnots(attrs) {
    return new ModifyAnnots(attrs);
  }
  static msgId(attrs) {
    return new MsgId(attrs);
  }
  static nameAttr(attrs) {
    return new NameAttr(attrs);
  }
  static neverEmbed(attrs) {
    return new NeverEmbed(attrs);
  }
  static numberOfCopies(attrs) {
    return new NumberOfCopies(attrs);
  }
  static openAction(attrs) {
    return new OpenAction(attrs);
  }
  static output(attrs) {
    return new Output(attrs);
  }
  static outputBin(attrs) {
    return new OutputBin(attrs);
  }
  static outputXSL(attrs) {
    return new OutputXSL(attrs);
  }
  static overprint(attrs) {
    return new Overprint(attrs);
  }
  static packets(attrs) {
    return new Packets(attrs);
  }
  static pageOffset(attrs) {
    return new PageOffset(attrs);
  }
  static pageRange(attrs) {
    return new PageRange(attrs);
  }
  static pagination(attrs) {
    return new Pagination(attrs);
  }
  static paginationOverride(attrs) {
    return new PaginationOverride(attrs);
  }
  static part(attrs) {
    return new Part(attrs);
  }
  static pcl(attrs) {
    return new Pcl(attrs);
  }
  static pdf(attrs) {
    return new Pdf(attrs);
  }
  static pdfa(attrs) {
    return new Pdfa(attrs);
  }
  static permissions(attrs) {
    return new Permissions(attrs);
  }
  static pickTrayByPDFSize(attrs) {
    return new PickTrayByPDFSize(attrs);
  }
  static picture(attrs) {
    return new config_Picture(attrs);
  }
  static plaintextMetadata(attrs) {
    return new PlaintextMetadata(attrs);
  }
  static presence(attrs) {
    return new Presence(attrs);
  }
  static present(attrs) {
    return new Present(attrs);
  }
  static print(attrs) {
    return new Print(attrs);
  }
  static printHighQuality(attrs) {
    return new PrintHighQuality(attrs);
  }
  static printScaling(attrs) {
    return new PrintScaling(attrs);
  }
  static printerName(attrs) {
    return new PrinterName(attrs);
  }
  static producer(attrs) {
    return new Producer(attrs);
  }
  static ps(attrs) {
    return new Ps(attrs);
  }
  static range(attrs) {
    return new Range(attrs);
  }
  static record(attrs) {
    return new Record(attrs);
  }
  static relevant(attrs) {
    return new Relevant(attrs);
  }
  static rename(attrs) {
    return new Rename(attrs);
  }
  static renderPolicy(attrs) {
    return new RenderPolicy(attrs);
  }
  static runScripts(attrs) {
    return new RunScripts(attrs);
  }
  static script(attrs) {
    return new config_Script(attrs);
  }
  static scriptModel(attrs) {
    return new ScriptModel(attrs);
  }
  static severity(attrs) {
    return new Severity(attrs);
  }
  static silentPrint(attrs) {
    return new SilentPrint(attrs);
  }
  static staple(attrs) {
    return new Staple(attrs);
  }
  static startNode(attrs) {
    return new StartNode(attrs);
  }
  static startPage(attrs) {
    return new StartPage(attrs);
  }
  static submitFormat(attrs) {
    return new SubmitFormat(attrs);
  }
  static submitUrl(attrs) {
    return new SubmitUrl(attrs);
  }
  static subsetBelow(attrs) {
    return new SubsetBelow(attrs);
  }
  static suppressBanner(attrs) {
    return new SuppressBanner(attrs);
  }
  static tagged(attrs) {
    return new Tagged(attrs);
  }
  static template(attrs) {
    return new config_Template(attrs);
  }
  static templateCache(attrs) {
    return new TemplateCache(attrs);
  }
  static threshold(attrs) {
    return new Threshold(attrs);
  }
  static to(attrs) {
    return new To(attrs);
  }
  static trace(attrs) {
    return new Trace(attrs);
  }
  static transform(attrs) {
    return new Transform(attrs);
  }
  static type(attrs) {
    return new Type(attrs);
  }
  static uri(attrs) {
    return new Uri(attrs);
  }
  static validate(attrs) {
    return new config_Validate(attrs);
  }
  static validateApprovalSignatures(attrs) {
    return new ValidateApprovalSignatures(attrs);
  }
  static validationMessaging(attrs) {
    return new ValidationMessaging(attrs);
  }
  static version(attrs) {
    return new Version(attrs);
  }
  static versionControl(attrs) {
    return new VersionControl(attrs);
  }
  static viewerPreferences(attrs) {
    return new ViewerPreferences(attrs);
  }
  static webClient(attrs) {
    return new WebClient(attrs);
  }
  static whitespace(attrs) {
    return new Whitespace(attrs);
  }
  static window(attrs) {
    return new Window(attrs);
  }
  static xdc(attrs) {
    return new Xdc(attrs);
  }
  static xdp(attrs) {
    return new Xdp(attrs);
  }
  static xsl(attrs) {
    return new Xsl(attrs);
  }
  static zpl(attrs) {
    return new Zpl(attrs);
  }
}

;// ./src/core/xfa/connection_set.js


const CONNECTION_SET_NS_ID = NamespaceIds.connectionSet.id;
class ConnectionSet extends XFAObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "connectionSet", true);
    this.wsdlConnection = new XFAObjectArray();
    this.xmlConnection = new XFAObjectArray();
    this.xsdConnection = new XFAObjectArray();
  }
}
class EffectiveInputPolicy extends XFAObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "effectiveInputPolicy");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class EffectiveOutputPolicy extends XFAObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "effectiveOutputPolicy");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class Operation extends StringObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "operation");
    this.id = attributes.id || "";
    this.input = attributes.input || "";
    this.name = attributes.name || "";
    this.output = attributes.output || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class RootElement extends StringObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "rootElement");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class SoapAction extends StringObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "soapAction");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class SoapAddress extends StringObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "soapAddress");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class connection_set_Uri extends StringObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "uri");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class WsdlAddress extends StringObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "wsdlAddress");
    this.id = attributes.id || "";
    this.name = attributes.name || "";
    this.use = attributes.use || "";
    this.usehref = attributes.usehref || "";
  }
}
class WsdlConnection extends XFAObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "wsdlConnection", true);
    this.dataDescription = attributes.dataDescription || "";
    this.name = attributes.name || "";
    this.effectiveInputPolicy = null;
    this.effectiveOutputPolicy = null;
    this.operation = null;
    this.soapAction = null;
    this.soapAddress = null;
    this.wsdlAddress = null;
  }
}
class XmlConnection extends XFAObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "xmlConnection", true);
    this.dataDescription = attributes.dataDescription || "";
    this.name = attributes.name || "";
    this.uri = null;
  }
}
class XsdConnection extends XFAObject {
  constructor(attributes) {
    super(CONNECTION_SET_NS_ID, "xsdConnection", true);
    this.dataDescription = attributes.dataDescription || "";
    this.name = attributes.name || "";
    this.rootElement = null;
    this.uri = null;
  }
}
class ConnectionSetNamespace {
  static [$buildXFAObject](name, attributes) {
    if (ConnectionSetNamespace.hasOwnProperty(name)) {
      return ConnectionSetNamespace[name](attributes);
    }
    return undefined;
  }
  static connectionSet(attrs) {
    return new ConnectionSet(attrs);
  }
  static effectiveInputPolicy(attrs) {
    return new EffectiveInputPolicy(attrs);
  }
  static effectiveOutputPolicy(attrs) {
    return new EffectiveOutputPolicy(attrs);
  }
  static operation(attrs) {
    return new Operation(attrs);
  }
  static rootElement(attrs) {
    return new RootElement(attrs);
  }
  static soapAction(attrs) {
    return new SoapAction(attrs);
  }
  static soapAddress(attrs) {
    return new SoapAddress(attrs);
  }
  static uri(attrs) {
    return new connection_set_Uri(attrs);
  }
  static wsdlAddress(attrs) {
    return new WsdlAddress(attrs);
  }
  static wsdlConnection(attrs) {
    return new WsdlConnection(attrs);
  }
  static xmlConnection(attrs) {
    return new XmlConnection(attrs);
  }
  static xsdConnection(attrs) {
    return new XsdConnection(attrs);
  }
}

;// ./src/core/xfa/datasets.js



const DATASETS_NS_ID = NamespaceIds.datasets.id;
class datasets_Data extends XmlObject {
  constructor(attributes) {
    super(DATASETS_NS_ID, "data", attributes);
  }
  [$isNsAgnostic]() {
    return true;
  }
}
class Datasets extends XFAObject {
  constructor(attributes) {
    super(DATASETS_NS_ID, "datasets", true);
    this.data = null;
    this.Signature = null;
  }
  [$onChild](child) {
    const name = child[$nodeName];
    if (name === "data" && child[$namespaceId] === DATASETS_NS_ID || name === "Signature" && child[$namespaceId] === NamespaceIds.signature.id) {
      this[name] = child;
    }
    this[$appendChild](child);
  }
}
class DatasetsNamespace {
  static [$buildXFAObject](name, attributes) {
    if (DatasetsNamespace.hasOwnProperty(name)) {
      return DatasetsNamespace[name](attributes);
    }
    return undefined;
  }
  static datasets(attributes) {
    return new Datasets(attributes);
  }
  static data(attributes) {
    return new datasets_Data(attributes);
  }
}

;// ./src/core/xfa/locale_set.js



const LOCALE_SET_NS_ID = NamespaceIds.localeSet.id;
class CalendarSymbols extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "calendarSymbols", true);
    this.name = "gregorian";
    this.dayNames = new XFAObjectArray(2);
    this.eraNames = null;
    this.meridiemNames = null;
    this.monthNames = new XFAObjectArray(2);
  }
}
class CurrencySymbol extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "currencySymbol");
    this.name = getStringOption(attributes.name, ["symbol", "isoname", "decimal"]);
  }
}
class CurrencySymbols extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "currencySymbols", true);
    this.currencySymbol = new XFAObjectArray(3);
  }
}
class DatePattern extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "datePattern");
    this.name = getStringOption(attributes.name, ["full", "long", "med", "short"]);
  }
}
class DatePatterns extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "datePatterns", true);
    this.datePattern = new XFAObjectArray(4);
  }
}
class DateTimeSymbols extends ContentObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "dateTimeSymbols");
  }
}
class Day extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "day");
  }
}
class DayNames extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "dayNames", true);
    this.abbr = getInteger({
      data: attributes.abbr,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.day = new XFAObjectArray(7);
  }
}
class Era extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "era");
  }
}
class EraNames extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "eraNames", true);
    this.era = new XFAObjectArray(2);
  }
}
class locale_set_Locale extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "locale", true);
    this.desc = attributes.desc || "";
    this.name = "isoname";
    this.calendarSymbols = null;
    this.currencySymbols = null;
    this.datePatterns = null;
    this.dateTimeSymbols = null;
    this.numberPatterns = null;
    this.numberSymbols = null;
    this.timePatterns = null;
    this.typeFaces = null;
  }
}
class locale_set_LocaleSet extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "localeSet", true);
    this.locale = new XFAObjectArray();
  }
}
class Meridiem extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "meridiem");
  }
}
class MeridiemNames extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "meridiemNames", true);
    this.meridiem = new XFAObjectArray(2);
  }
}
class Month extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "month");
  }
}
class MonthNames extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "monthNames", true);
    this.abbr = getInteger({
      data: attributes.abbr,
      defaultValue: 0,
      validate: x => x === 1
    });
    this.month = new XFAObjectArray(12);
  }
}
class NumberPattern extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "numberPattern");
    this.name = getStringOption(attributes.name, ["full", "long", "med", "short"]);
  }
}
class NumberPatterns extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "numberPatterns", true);
    this.numberPattern = new XFAObjectArray(4);
  }
}
class NumberSymbol extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "numberSymbol");
    this.name = getStringOption(attributes.name, ["decimal", "grouping", "percent", "minus", "zero"]);
  }
}
class NumberSymbols extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "numberSymbols", true);
    this.numberSymbol = new XFAObjectArray(5);
  }
}
class TimePattern extends StringObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "timePattern");
    this.name = getStringOption(attributes.name, ["full", "long", "med", "short"]);
  }
}
class TimePatterns extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "timePatterns", true);
    this.timePattern = new XFAObjectArray(4);
  }
}
class TypeFace extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "typeFace", true);
    this.name = attributes.name | "";
  }
}
class TypeFaces extends XFAObject {
  constructor(attributes) {
    super(LOCALE_SET_NS_ID, "typeFaces", true);
    this.typeFace = new XFAObjectArray();
  }
}
class LocaleSetNamespace {
  static [$buildXFAObject](name, attributes) {
    if (LocaleSetNamespace.hasOwnProperty(name)) {
      return LocaleSetNamespace[name](attributes);
    }
    return undefined;
  }
  static calendarSymbols(attrs) {
    return new CalendarSymbols(attrs);
  }
  static currencySymbol(attrs) {
    return new CurrencySymbol(attrs);
  }
  static currencySymbols(attrs) {
    return new CurrencySymbols(attrs);
  }
  static datePattern(attrs) {
    return new DatePattern(attrs);
  }
  static datePatterns(attrs) {
    return new DatePatterns(attrs);
  }
  static dateTimeSymbols(attrs) {
    return new DateTimeSymbols(attrs);
  }
  static day(attrs) {
    return new Day(attrs);
  }
  static dayNames(attrs) {
    return new DayNames(attrs);
  }
  static era(attrs) {
    return new Era(attrs);
  }
  static eraNames(attrs) {
    return new EraNames(attrs);
  }
  static locale(attrs) {
    return new locale_set_Locale(attrs);
  }
  static localeSet(attrs) {
    return new locale_set_LocaleSet(attrs);
  }
  static meridiem(attrs) {
    return new Meridiem(attrs);
  }
  static meridiemNames(attrs) {
    return new MeridiemNames(attrs);
  }
  static month(attrs) {
    return new Month(attrs);
  }
  static monthNames(attrs) {
    return new MonthNames(attrs);
  }
  static numberPattern(attrs) {
    return new NumberPattern(attrs);
  }
  static numberPatterns(attrs) {
    return new NumberPatterns(attrs);
  }
  static numberSymbol(attrs) {
    return new NumberSymbol(attrs);
  }
  static numberSymbols(attrs) {
    return new NumberSymbols(attrs);
  }
  static timePattern(attrs) {
    return new TimePattern(attrs);
  }
  static timePatterns(attrs) {
    return new TimePatterns(attrs);
  }
  static typeFace(attrs) {
    return new TypeFace(attrs);
  }
  static typeFaces(attrs) {
    return new TypeFaces(attrs);
  }
}

;// ./src/core/xfa/signature.js


const SIGNATURE_NS_ID = NamespaceIds.signature.id;
class signature_Signature extends XFAObject {
  constructor(attributes) {
    super(SIGNATURE_NS_ID, "signature", true);
  }
}
class SignatureNamespace {
  static [$buildXFAObject](name, attributes) {
    if (SignatureNamespace.hasOwnProperty(name)) {
      return SignatureNamespace[name](attributes);
    }
    return undefined;
  }
  static signature(attributes) {
    return new signature_Signature(attributes);
  }
}

;// ./src/core/xfa/stylesheet.js


const STYLESHEET_NS_ID = NamespaceIds.stylesheet.id;
class Stylesheet extends XFAObject {
  constructor(attributes) {
    super(STYLESHEET_NS_ID, "stylesheet", true);
  }
}
class StylesheetNamespace {
  static [$buildXFAObject](name, attributes) {
    if (StylesheetNamespace.hasOwnProperty(name)) {
      return StylesheetNamespace[name](attributes);
    }
    return undefined;
  }
  static stylesheet(attributes) {
    return new Stylesheet(attributes);
  }
}

;// ./src/core/xfa/xdp.js



const XDP_NS_ID = NamespaceIds.xdp.id;
class xdp_Xdp extends XFAObject {
  constructor(attributes) {
    super(XDP_NS_ID, "xdp", true);
    this.uuid = attributes.uuid || "";
    this.timeStamp = attributes.timeStamp || "";
    this.config = null;
    this.connectionSet = null;
    this.datasets = null;
    this.localeSet = null;
    this.stylesheet = new XFAObjectArray();
    this.template = null;
  }
  [$onChildCheck](child) {
    const ns = NamespaceIds[child[$nodeName]];
    return ns && child[$namespaceId] === ns.id;
  }
}
class XdpNamespace {
  static [$buildXFAObject](name, attributes) {
    if (XdpNamespace.hasOwnProperty(name)) {
      return XdpNamespace[name](attributes);
    }
    return undefined;
  }
  static xdp(attributes) {
    return new xdp_Xdp(attributes);
  }
}

;// ./src/core/xfa/xhtml.js





const XHTML_NS_ID = NamespaceIds.xhtml.id;
const $richText = Symbol();
const VALID_STYLES = new Set(["color", "font", "font-family", "font-size", "font-stretch", "font-style", "font-weight", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "letter-spacing", "line-height", "orphans", "page-break-after", "page-break-before", "page-break-inside", "tab-interval", "tab-stop", "text-align", "text-decoration", "text-indent", "vertical-align", "widows", "kerning-mode", "xfa-font-horizontal-scale", "xfa-font-vertical-scale", "xfa-spacerun", "xfa-tab-stops"]);
const StyleMapping = new Map([["page-break-after", "breakAfter"], ["page-break-before", "breakBefore"], ["page-break-inside", "breakInside"], ["kerning-mode", value => value === "none" ? "none" : "normal"], ["xfa-font-horizontal-scale", value => \`scaleX(\${Math.max(0, parseInt(value) / 100).toFixed(2)})\`], ["xfa-font-vertical-scale", value => \`scaleY(\${Math.max(0, parseInt(value) / 100).toFixed(2)})\`], ["xfa-spacerun", ""], ["xfa-tab-stops", ""], ["font-size", (value, original) => {
  value = original.fontSize = Math.abs(getMeasurement(value));
  return measureToString(0.99 * value);
}], ["letter-spacing", value => measureToString(getMeasurement(value))], ["line-height", value => measureToString(getMeasurement(value))], ["margin", value => measureToString(getMeasurement(value))], ["margin-bottom", value => measureToString(getMeasurement(value))], ["margin-left", value => measureToString(getMeasurement(value))], ["margin-right", value => measureToString(getMeasurement(value))], ["margin-top", value => measureToString(getMeasurement(value))], ["text-indent", value => measureToString(getMeasurement(value))], ["font-family", value => value], ["vertical-align", value => measureToString(getMeasurement(value))]]);
const spacesRegExp = /\\s+/g;
const crlfRegExp = /[\\r\\n]+/g;
const crlfForRichTextRegExp = /\\r\\n?/g;
function mapStyle(styleStr, node, richText) {
  const style = Object.create(null);
  if (!styleStr) {
    return style;
  }
  const original = Object.create(null);
  for (const [key, value] of styleStr.split(";").map(s => s.split(":", 2))) {
    const mapping = StyleMapping.get(key);
    if (mapping === "") {
      continue;
    }
    let newValue = value;
    if (mapping) {
      newValue = typeof mapping === "string" ? mapping : mapping(value, original);
    }
    if (key.endsWith("scale")) {
      style.transform = style.transform ? \`\${style[key]} \${newValue}\` : newValue;
    } else {
      style[key.replaceAll(/-([a-zA-Z])/g, (_, x) => x.toUpperCase())] = newValue;
    }
  }
  if (style.fontFamily) {
    setFontFamily({
      typeface: style.fontFamily,
      weight: style.fontWeight || "normal",
      posture: style.fontStyle || "normal",
      size: original.fontSize || 0
    }, node, node[$globalData].fontFinder, style);
  }
  if (richText && style.verticalAlign && style.verticalAlign !== "0px" && style.fontSize) {
    const SUB_SUPER_SCRIPT_FACTOR = 0.583;
    const VERTICAL_FACTOR = 0.333;
    const fontSize = getMeasurement(style.fontSize);
    style.fontSize = measureToString(fontSize * SUB_SUPER_SCRIPT_FACTOR);
    style.verticalAlign = measureToString(Math.sign(getMeasurement(style.verticalAlign)) * fontSize * VERTICAL_FACTOR);
  }
  if (richText && style.fontSize) {
    style.fontSize = \`calc(\${style.fontSize} * var(--total-scale-factor))\`;
  }
  fixTextIndent(style);
  return style;
}
function checkStyle(node) {
  if (!node.style) {
    return "";
  }
  return node.style.split(";").filter(s => !!s.trim()).map(s => s.split(":", 2).map(t => t.trim())).filter(([key, value]) => {
    if (key === "font-family") {
      node[$globalData].usedTypefaces.add(value);
    }
    return VALID_STYLES.has(key);
  }).map(kv => kv.join(":")).join(";");
}
const NoWhites = new Set(["body", "html"]);
class XhtmlObject extends XmlObject {
  constructor(attributes, name) {
    super(XHTML_NS_ID, name);
    this[$richText] = false;
    this.style = attributes.style || "";
  }
  [$clean](builder) {
    super[$clean](builder);
    this.style = checkStyle(this);
  }
  [$acceptWhitespace]() {
    return !NoWhites.has(this[$nodeName]);
  }
  [$onText](str, richText = false) {
    if (!richText) {
      str = str.replaceAll(crlfRegExp, "");
      if (!this.style.includes("xfa-spacerun:yes")) {
        str = str.replaceAll(spacesRegExp, " ");
      }
    } else {
      this[$richText] = true;
    }
    if (str) {
      this[$content] += str;
    }
  }
  [$pushGlyphs](measure, mustPop = true) {
    const xfaFont = Object.create(null);
    const margin = {
      top: NaN,
      bottom: NaN,
      left: NaN,
      right: NaN
    };
    let lineHeight = null;
    for (const [key, value] of this.style.split(";").map(s => s.split(":", 2))) {
      switch (key) {
        case "font-family":
          xfaFont.typeface = stripQuotes(value);
          break;
        case "font-size":
          xfaFont.size = getMeasurement(value);
          break;
        case "font-weight":
          xfaFont.weight = value;
          break;
        case "font-style":
          xfaFont.posture = value;
          break;
        case "letter-spacing":
          xfaFont.letterSpacing = getMeasurement(value);
          break;
        case "margin":
          const values = value.split(/ \\t/).map(x => getMeasurement(x));
          switch (values.length) {
            case 1:
              margin.top = margin.bottom = margin.left = margin.right = values[0];
              break;
            case 2:
              margin.top = margin.bottom = values[0];
              margin.left = margin.right = values[1];
              break;
            case 3:
              margin.top = values[0];
              margin.bottom = values[2];
              margin.left = margin.right = values[1];
              break;
            case 4:
              margin.top = values[0];
              margin.left = values[1];
              margin.bottom = values[2];
              margin.right = values[3];
              break;
          }
          break;
        case "margin-top":
          margin.top = getMeasurement(value);
          break;
        case "margin-bottom":
          margin.bottom = getMeasurement(value);
          break;
        case "margin-left":
          margin.left = getMeasurement(value);
          break;
        case "margin-right":
          margin.right = getMeasurement(value);
          break;
        case "line-height":
          lineHeight = getMeasurement(value);
          break;
      }
    }
    measure.pushData(xfaFont, margin, lineHeight);
    if (this[$content]) {
      measure.addString(this[$content]);
    } else {
      for (const child of this[$getChildren]()) {
        if (child[$nodeName] === "#text") {
          measure.addString(child[$content]);
          continue;
        }
        child[$pushGlyphs](measure);
      }
    }
    if (mustPop) {
      measure.popFont();
    }
  }
  [$toHTML](availableSpace) {
    const children = [];
    this[$extra] = {
      children
    };
    this[$childrenToHTML]({});
    if (children.length === 0 && !this[$content]) {
      return HTMLResult.EMPTY;
    }
    let value;
    if (this[$richText]) {
      value = this[$content] ? this[$content].replaceAll(crlfForRichTextRegExp, "\\n") : undefined;
    } else {
      value = this[$content] || undefined;
    }
    return HTMLResult.success({
      name: this[$nodeName],
      attributes: {
        href: this.href,
        style: mapStyle(this.style, this, this[$richText])
      },
      children,
      value
    });
  }
}
class A extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "a");
    this.href = fixURL(attributes.href) || "";
  }
}
class B extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "b");
  }
  [$pushGlyphs](measure) {
    measure.pushFont({
      weight: "bold"
    });
    super[$pushGlyphs](measure);
    measure.popFont();
  }
}
class Body extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "body");
  }
  [$toHTML](availableSpace) {
    const res = super[$toHTML](availableSpace);
    const {
      html
    } = res;
    if (!html) {
      return HTMLResult.EMPTY;
    }
    html.name = "div";
    html.attributes.class = ["xfaRich"];
    return res;
  }
}
class Br extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "br");
  }
  [$text]() {
    return "\\n";
  }
  [$pushGlyphs](measure) {
    measure.addString("\\n");
  }
  [$toHTML](availableSpace) {
    return HTMLResult.success({
      name: "br"
    });
  }
}
class Html extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "html");
  }
  [$toHTML](availableSpace) {
    const children = [];
    this[$extra] = {
      children
    };
    this[$childrenToHTML]({});
    if (children.length === 0) {
      return HTMLResult.success({
        name: "div",
        attributes: {
          class: ["xfaRich"],
          style: {}
        },
        value: this[$content] || ""
      });
    }
    if (children.length === 1) {
      const child = children[0];
      if (child.attributes?.class.includes("xfaRich")) {
        return HTMLResult.success(child);
      }
    }
    return HTMLResult.success({
      name: "div",
      attributes: {
        class: ["xfaRich"],
        style: {}
      },
      children
    });
  }
}
class I extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "i");
  }
  [$pushGlyphs](measure) {
    measure.pushFont({
      posture: "italic"
    });
    super[$pushGlyphs](measure);
    measure.popFont();
  }
}
class Li extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "li");
  }
}
class Ol extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "ol");
  }
}
class P extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "p");
  }
  [$pushGlyphs](measure) {
    super[$pushGlyphs](measure, false);
    measure.addString("\\n");
    measure.addPara();
    measure.popFont();
  }
  [$text]() {
    const siblings = this[$getParent]()[$getChildren]();
    if (siblings.at(-1) === this) {
      return super[$text]();
    }
    return super[$text]() + "\\n";
  }
}
class Span extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "span");
  }
}
class Sub extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "sub");
  }
}
class Sup extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "sup");
  }
}
class Ul extends XhtmlObject {
  constructor(attributes) {
    super(attributes, "ul");
  }
}
class XhtmlNamespace {
  static [$buildXFAObject](name, attributes) {
    if (XhtmlNamespace.hasOwnProperty(name)) {
      return XhtmlNamespace[name](attributes);
    }
    return undefined;
  }
  static a(attributes) {
    return new A(attributes);
  }
  static b(attributes) {
    return new B(attributes);
  }
  static body(attributes) {
    return new Body(attributes);
  }
  static br(attributes) {
    return new Br(attributes);
  }
  static html(attributes) {
    return new Html(attributes);
  }
  static i(attributes) {
    return new I(attributes);
  }
  static li(attributes) {
    return new Li(attributes);
  }
  static ol(attributes) {
    return new Ol(attributes);
  }
  static p(attributes) {
    return new P(attributes);
  }
  static span(attributes) {
    return new Span(attributes);
  }
  static sub(attributes) {
    return new Sub(attributes);
  }
  static sup(attributes) {
    return new Sup(attributes);
  }
  static ul(attributes) {
    return new Ul(attributes);
  }
}

;// ./src/core/xfa/setup.js









const NamespaceSetUp = {
  config: ConfigNamespace,
  connection: ConnectionSetNamespace,
  datasets: DatasetsNamespace,
  localeSet: LocaleSetNamespace,
  signature: SignatureNamespace,
  stylesheet: StylesheetNamespace,
  template: TemplateNamespace,
  xdp: XdpNamespace,
  xhtml: XhtmlNamespace
};

;// ./src/core/xfa/unknown.js


class UnknownNamespace {
  constructor(nsId) {
    this.namespaceId = nsId;
  }
  [$buildXFAObject](name, attributes) {
    return new XmlObject(this.namespaceId, name, attributes);
  }
}

;// ./src/core/xfa/builder.js







class Root extends XFAObject {
  constructor(ids) {
    super(-1, "root", Object.create(null));
    this.element = null;
    this[$ids] = ids;
  }
  [$onChild](child) {
    this.element = child;
    return true;
  }
  [$finalize]() {
    super[$finalize]();
    if (this.element.template instanceof Template) {
      this[$ids].set($root, this.element);
      this.element.template[$resolvePrototypes](this[$ids]);
      this.element.template[$ids] = this[$ids];
    }
  }
}
class Empty extends XFAObject {
  constructor() {
    super(-1, "", Object.create(null));
  }
  [$onChild](_) {
    return false;
  }
}
class Builder {
  constructor(rootNameSpace = null) {
    this._namespaceStack = [];
    this._nsAgnosticLevel = 0;
    this._namespacePrefixes = new Map();
    this._namespaces = new Map();
    this._nextNsId = Math.max(...Object.values(NamespaceIds).map(({
      id
    }) => id));
    this._currentNamespace = rootNameSpace || new UnknownNamespace(++this._nextNsId);
  }
  buildRoot(ids) {
    return new Root(ids);
  }
  build({
    nsPrefix,
    name,
    attributes,
    namespace,
    prefixes
  }) {
    const hasNamespaceDef = namespace !== null;
    if (hasNamespaceDef) {
      this._namespaceStack.push(this._currentNamespace);
      this._currentNamespace = this._searchNamespace(namespace);
    }
    if (prefixes) {
      this._addNamespacePrefix(prefixes);
    }
    if (attributes.hasOwnProperty($nsAttributes)) {
      const dataTemplate = NamespaceSetUp.datasets;
      const nsAttrs = attributes[$nsAttributes];
      let xfaAttrs = null;
      for (const [ns, attrs] of Object.entries(nsAttrs)) {
        const nsToUse = this._getNamespaceToUse(ns);
        if (nsToUse === dataTemplate) {
          xfaAttrs = {
            xfa: attrs
          };
          break;
        }
      }
      if (xfaAttrs) {
        attributes[$nsAttributes] = xfaAttrs;
      } else {
        delete attributes[$nsAttributes];
      }
    }
    const namespaceToUse = this._getNamespaceToUse(nsPrefix);
    const node = namespaceToUse?.[$buildXFAObject](name, attributes) || new Empty();
    if (node[$isNsAgnostic]()) {
      this._nsAgnosticLevel++;
    }
    if (hasNamespaceDef || prefixes || node[$isNsAgnostic]()) {
      node[$cleanup] = {
        hasNamespace: hasNamespaceDef,
        prefixes,
        nsAgnostic: node[$isNsAgnostic]()
      };
    }
    return node;
  }
  isNsAgnostic() {
    return this._nsAgnosticLevel > 0;
  }
  _searchNamespace(nsName) {
    let ns = this._namespaces.get(nsName);
    if (ns) {
      return ns;
    }
    for (const [name, {
      check
    }] of Object.entries(NamespaceIds)) {
      if (check(nsName)) {
        ns = NamespaceSetUp[name];
        if (ns) {
          this._namespaces.set(nsName, ns);
          return ns;
        }
        break;
      }
    }
    ns = new UnknownNamespace(++this._nextNsId);
    this._namespaces.set(nsName, ns);
    return ns;
  }
  _addNamespacePrefix(prefixes) {
    for (const {
      prefix,
      value
    } of prefixes) {
      const namespace = this._searchNamespace(value);
      let prefixStack = this._namespacePrefixes.get(prefix);
      if (!prefixStack) {
        prefixStack = [];
        this._namespacePrefixes.set(prefix, prefixStack);
      }
      prefixStack.push(namespace);
    }
  }
  _getNamespaceToUse(prefix) {
    if (!prefix) {
      return this._currentNamespace;
    }
    const prefixStack = this._namespacePrefixes.get(prefix);
    if (prefixStack?.length > 0) {
      return prefixStack.at(-1);
    }
    warn(\`Unknown namespace prefix: \${prefix}.\`);
    return null;
  }
  clean(data) {
    const {
      hasNamespace,
      prefixes,
      nsAgnostic
    } = data;
    if (hasNamespace) {
      this._currentNamespace = this._namespaceStack.pop();
    }
    if (prefixes) {
      prefixes.forEach(({
        prefix
      }) => {
        this._namespacePrefixes.get(prefix).pop();
      });
    }
    if (nsAgnostic) {
      this._nsAgnosticLevel--;
    }
  }
}

;// ./src/core/xfa/parser.js




class XFAParser extends XMLParserBase {
  constructor(rootNameSpace = null, richText = false) {
    super();
    this._builder = new Builder(rootNameSpace);
    this._stack = [];
    this._globalData = {
      usedTypefaces: new Set()
    };
    this._ids = new Map();
    this._current = this._builder.buildRoot(this._ids);
    this._errorCode = XMLParserErrorCode.NoError;
    this._whiteRegex = /^\\s+$/;
    this._nbsps = /\\xa0+/g;
    this._richText = richText;
  }
  parse(data) {
    this.parseXml(data);
    if (this._errorCode !== XMLParserErrorCode.NoError) {
      return undefined;
    }
    this._current[$finalize]();
    return this._current.element;
  }
  onText(text) {
    text = text.replace(this._nbsps, match => match.slice(1) + " ");
    if (this._richText || this._current[$acceptWhitespace]()) {
      this._current[$onText](text, this._richText);
      return;
    }
    if (this._whiteRegex.test(text)) {
      return;
    }
    this._current[$onText](text.trim());
  }
  onCdata(text) {
    this._current[$onText](text);
  }
  _mkAttributes(attributes, tagName) {
    let namespace = null;
    let prefixes = null;
    const attributeObj = Object.create({});
    for (const {
      name,
      value
    } of attributes) {
      if (name === "xmlns") {
        if (!namespace) {
          namespace = value;
        } else {
          warn(\`XFA - multiple namespace definition in <\${tagName}>\`);
        }
      } else if (name.startsWith("xmlns:")) {
        const prefix = name.substring("xmlns:".length);
        if (!prefixes) {
          prefixes = [];
        }
        prefixes.push({
          prefix,
          value
        });
      } else {
        const i = name.indexOf(":");
        if (i === -1) {
          attributeObj[name] = value;
        } else {
          let nsAttrs = attributeObj[$nsAttributes];
          if (!nsAttrs) {
            nsAttrs = attributeObj[$nsAttributes] = Object.create(null);
          }
          const [ns, attrName] = [name.slice(0, i), name.slice(i + 1)];
          const attrs = nsAttrs[ns] ||= Object.create(null);
          attrs[attrName] = value;
        }
      }
    }
    return [namespace, prefixes, attributeObj];
  }
  _getNameAndPrefix(name, nsAgnostic) {
    const i = name.indexOf(":");
    if (i === -1) {
      return [name, null];
    }
    return [name.substring(i + 1), nsAgnostic ? "" : name.substring(0, i)];
  }
  onBeginElement(tagName, attributes, isEmpty) {
    const [namespace, prefixes, attributesObj] = this._mkAttributes(attributes, tagName);
    const [name, nsPrefix] = this._getNameAndPrefix(tagName, this._builder.isNsAgnostic());
    const node = this._builder.build({
      nsPrefix,
      name,
      attributes: attributesObj,
      namespace,
      prefixes
    });
    node[$globalData] = this._globalData;
    if (isEmpty) {
      node[$finalize]();
      if (this._current[$onChild](node)) {
        node[$setId](this._ids);
      }
      node[$clean](this._builder);
      return;
    }
    this._stack.push(this._current);
    this._current = node;
  }
  onEndElement(name) {
    const node = this._current;
    if (node[$isCDATAXml]() && typeof node[$content] === "string") {
      const parser = new XFAParser();
      parser._globalData = this._globalData;
      const root = parser.parse(node[$content]);
      node[$content] = null;
      node[$onChild](root);
    }
    node[$finalize]();
    this._current = this._stack.pop();
    if (this._current[$onChild](node)) {
      node[$setId](this._ids);
    }
    node[$clean](this._builder);
  }
  onError(code) {
    this._errorCode = code;
  }
}

;// ./src/core/xfa/factory.js








class XFAFactory {
  constructor(data) {
    try {
      this.root = new XFAParser().parse(XFAFactory._createDocument(data));
      const binder = new Binder(this.root);
      this.form = binder.bind();
      this.dataHandler = new DataHandler(this.root, binder.getData());
      this.form[$globalData].template = this.form;
    } catch (e) {
      warn(\`XFA - an error occurred during parsing and binding: \${e}\`);
    }
  }
  isValid() {
    return this.root && this.form;
  }
  _createPagesHelper() {
    const iterator = this.form[$toPages]();
    return new Promise((resolve, reject) => {
      const nextIteration = () => {
        try {
          const value = iterator.next();
          if (value.done) {
            resolve(value.value);
          } else {
            setTimeout(nextIteration, 0);
          }
        } catch (e) {
          reject(e);
        }
      };
      setTimeout(nextIteration, 0);
    });
  }
  async _createPages() {
    try {
      this.pages = await this._createPagesHelper();
      this.dims = this.pages.children.map(c => {
        const {
          width,
          height
        } = c.attributes.style;
        return [0, 0, parseInt(width), parseInt(height)];
      });
    } catch (e) {
      warn(\`XFA - an error occurred during layout: \${e}\`);
    }
  }
  getBoundingBox(pageIndex) {
    return this.dims[pageIndex];
  }
  async getNumPages() {
    if (!this.pages) {
      await this._createPages();
    }
    return this.dims.length;
  }
  setImages(images) {
    this.form[$globalData].images = images;
  }
  setFonts(fonts) {
    this.form[$globalData].fontFinder = new FontFinder(fonts);
    const missingFonts = [];
    for (let typeface of this.form[$globalData].usedTypefaces) {
      typeface = stripQuotes(typeface);
      const font = this.form[$globalData].fontFinder.find(typeface);
      if (!font) {
        missingFonts.push(typeface);
      }
    }
    if (missingFonts.length > 0) {
      return missingFonts;
    }
    return null;
  }
  appendFonts(fonts, reallyMissingFonts) {
    this.form[$globalData].fontFinder.add(fonts, reallyMissingFonts);
  }
  async getPages() {
    if (!this.pages) {
      await this._createPages();
    }
    const pages = this.pages;
    this.pages = null;
    return pages;
  }
  serializeData(storage) {
    return this.dataHandler.serialize(storage);
  }
  static _createDocument(data) {
    if (!data["/xdp:xdp"]) {
      return data["xdp:xdp"];
    }
    return Object.values(data).join("");
  }
  static getRichTextAsHtml(rc) {
    if (!rc || typeof rc !== "string") {
      return null;
    }
    try {
      let root = new XFAParser(XhtmlNamespace, true).parse(rc);
      if (!["body", "xhtml"].includes(root[$nodeName])) {
        const newRoot = XhtmlNamespace.body({});
        newRoot[$appendChild](root);
        root = newRoot;
      }
      const result = root[$toHTML]();
      if (!result.success) {
        return null;
      }
      const {
        html
      } = result;
      const {
        attributes
      } = html;
      if (attributes) {
        if (attributes.class) {
          attributes.class = attributes.class.filter(attr => !attr.startsWith("xfa"));
        }
        attributes.dir = "auto";
      }
      return {
        html,
        str: root[$text]()
      };
    } catch (e) {
      warn(\`XFA - an error occurred during parsing of rich text: \${e}\`);
    }
    return null;
  }
}

;// ./src/core/annotation.js














class AnnotationFactory {
  static createGlobals(pdfManager) {
    return Promise.all([pdfManager.ensureCatalog("acroForm"), pdfManager.ensureDoc("xfaDatasets"), pdfManager.ensureCatalog("structTreeRoot"), pdfManager.ensureCatalog("baseUrl"), pdfManager.ensureCatalog("attachments"), pdfManager.ensureCatalog("globalColorSpaceCache")]).then(([acroForm, xfaDatasets, structTreeRoot, baseUrl, attachments, globalColorSpaceCache]) => ({
      pdfManager,
      acroForm: acroForm instanceof Dict ? acroForm : Dict.empty,
      xfaDatasets,
      structTreeRoot,
      baseUrl,
      attachments,
      globalColorSpaceCache
    }), reason => {
      warn(\`createGlobals: "\${reason}".\`);
      return null;
    });
  }
  static async create(xref, ref, annotationGlobals, idFactory, collectFields, orphanFields, pageRef) {
    const pageIndex = collectFields ? await this._getPageIndex(xref, ref, annotationGlobals.pdfManager) : null;
    return annotationGlobals.pdfManager.ensure(this, "_create", [xref, ref, annotationGlobals, idFactory, collectFields, orphanFields, pageIndex, pageRef]);
  }
  static _create(xref, ref, annotationGlobals, idFactory, collectFields = false, orphanFields = null, pageIndex = null, pageRef = null) {
    const dict = xref.fetchIfRef(ref);
    if (!(dict instanceof Dict)) {
      return undefined;
    }
    const {
      acroForm,
      pdfManager
    } = annotationGlobals;
    const id = ref instanceof Ref ? ref.toString() : \`annot_\${idFactory.createObjId()}\`;
    let subtype = dict.get("Subtype");
    subtype = subtype instanceof Name ? subtype.name : null;
    const parameters = {
      xref,
      ref,
      dict,
      subtype,
      id,
      annotationGlobals,
      collectFields,
      orphanFields,
      needAppearances: !collectFields && acroForm.get("NeedAppearances") === true,
      pageIndex,
      evaluatorOptions: pdfManager.evaluatorOptions,
      pageRef
    };
    switch (subtype) {
      case "Link":
        return new LinkAnnotation(parameters);
      case "Text":
        return new TextAnnotation(parameters);
      case "Widget":
        let fieldType = getInheritableProperty({
          dict,
          key: "FT"
        });
        fieldType = fieldType instanceof Name ? fieldType.name : null;
        switch (fieldType) {
          case "Tx":
            return new TextWidgetAnnotation(parameters);
          case "Btn":
            return new ButtonWidgetAnnotation(parameters);
          case "Ch":
            return new ChoiceWidgetAnnotation(parameters);
          case "Sig":
            return new SignatureWidgetAnnotation(parameters);
        }
        warn(\`Unimplemented widget field type "\${fieldType}", \` + "falling back to base field type.");
        return new WidgetAnnotation(parameters);
      case "Popup":
        return new PopupAnnotation(parameters);
      case "FreeText":
        return new FreeTextAnnotation(parameters);
      case "Line":
        return new LineAnnotation(parameters);
      case "Square":
        return new SquareAnnotation(parameters);
      case "Circle":
        return new CircleAnnotation(parameters);
      case "PolyLine":
        return new PolylineAnnotation(parameters);
      case "Polygon":
        return new PolygonAnnotation(parameters);
      case "Caret":
        return new CaretAnnotation(parameters);
      case "Ink":
        return new InkAnnotation(parameters);
      case "Highlight":
        return new HighlightAnnotation(parameters);
      case "Underline":
        return new UnderlineAnnotation(parameters);
      case "Squiggly":
        return new SquigglyAnnotation(parameters);
      case "StrikeOut":
        return new StrikeOutAnnotation(parameters);
      case "Stamp":
        return new StampAnnotation(parameters);
      case "FileAttachment":
        return new FileAttachmentAnnotation(parameters);
      default:
        if (!collectFields) {
          if (!subtype) {
            warn("Annotation is missing the required /Subtype.");
          } else {
            warn(\`Unimplemented annotation type "\${subtype}", \` + "falling back to base annotation.");
          }
        }
        return new Annotation(parameters);
    }
  }
  static async _getPageIndex(xref, ref, pdfManager) {
    try {
      const annotDict = await xref.fetchIfRefAsync(ref);
      if (!(annotDict instanceof Dict)) {
        return -1;
      }
      const pageRef = annotDict.getRaw("P");
      if (pageRef instanceof Ref) {
        try {
          const pageIndex = await pdfManager.ensureCatalog("getPageIndex", [pageRef]);
          return pageIndex;
        } catch (ex) {
          info(\`_getPageIndex -- not a valid page reference: "\${ex}".\`);
        }
      }
      if (annotDict.has("Kids")) {
        return -1;
      }
      const numPages = await pdfManager.ensureDoc("numPages");
      for (let pageIndex = 0; pageIndex < numPages; pageIndex++) {
        const page = await pdfManager.getPage(pageIndex);
        const annotations = await pdfManager.ensure(page, "annotations");
        for (const annotRef of annotations) {
          if (annotRef instanceof Ref && isRefsEqual(annotRef, ref)) {
            return pageIndex;
          }
        }
      }
    } catch (ex) {
      warn(\`_getPageIndex: "\${ex}".\`);
    }
    return -1;
  }
  static generateImages(annotations, xref, isOffscreenCanvasSupported) {
    if (!isOffscreenCanvasSupported) {
      warn("generateImages: OffscreenCanvas is not supported, cannot save or print some annotations with images.");
      return null;
    }
    let imagePromises;
    for (const {
      bitmapId,
      bitmap
    } of annotations) {
      if (!bitmap) {
        continue;
      }
      imagePromises ||= new Map();
      imagePromises.set(bitmapId, StampAnnotation.createImage(bitmap, xref));
    }
    return imagePromises;
  }
  static async saveNewAnnotations(evaluator, task, annotations, imagePromises, changes) {
    const xref = evaluator.xref;
    let baseFontRef;
    const promises = [];
    const {
      isOffscreenCanvasSupported
    } = evaluator.options;
    for (const annotation of annotations) {
      if (annotation.deleted) {
        continue;
      }
      switch (annotation.annotationType) {
        case AnnotationEditorType.FREETEXT:
          if (!baseFontRef) {
            const baseFont = new Dict(xref);
            baseFont.set("BaseFont", Name.get("Helvetica"));
            baseFont.set("Type", Name.get("Font"));
            baseFont.set("Subtype", Name.get("Type1"));
            baseFont.set("Encoding", Name.get("WinAnsiEncoding"));
            baseFontRef = xref.getNewTemporaryRef();
            changes.put(baseFontRef, {
              data: baseFont
            });
          }
          promises.push(FreeTextAnnotation.createNewAnnotation(xref, annotation, changes, {
            evaluator,
            task,
            baseFontRef
          }));
          break;
        case AnnotationEditorType.HIGHLIGHT:
          if (annotation.quadPoints) {
            promises.push(HighlightAnnotation.createNewAnnotation(xref, annotation, changes));
          } else {
            promises.push(InkAnnotation.createNewAnnotation(xref, annotation, changes));
          }
          break;
        case AnnotationEditorType.INK:
          promises.push(InkAnnotation.createNewAnnotation(xref, annotation, changes));
          break;
        case AnnotationEditorType.STAMP:
          const image = isOffscreenCanvasSupported ? await imagePromises?.get(annotation.bitmapId) : null;
          if (image?.imageStream) {
            const {
              imageStream,
              smaskStream
            } = image;
            if (smaskStream) {
              const smaskRef = xref.getNewTemporaryRef();
              changes.put(smaskRef, {
                data: smaskStream
              });
              imageStream.dict.set("SMask", smaskRef);
            }
            const imageRef = image.imageRef = xref.getNewTemporaryRef();
            changes.put(imageRef, {
              data: imageStream
            });
            image.imageStream = image.smaskStream = null;
          }
          promises.push(StampAnnotation.createNewAnnotation(xref, annotation, changes, {
            image
          }));
          break;
        case AnnotationEditorType.SIGNATURE:
          promises.push(StampAnnotation.createNewAnnotation(xref, annotation, changes, {}));
          break;
      }
    }
    return {
      annotations: await Promise.all(promises)
    };
  }
  static async printNewAnnotations(annotationGlobals, evaluator, task, annotations, imagePromises) {
    if (!annotations) {
      return null;
    }
    const {
      options,
      xref
    } = evaluator;
    const promises = [];
    for (const annotation of annotations) {
      if (annotation.deleted) {
        continue;
      }
      switch (annotation.annotationType) {
        case AnnotationEditorType.FREETEXT:
          promises.push(FreeTextAnnotation.createNewPrintAnnotation(annotationGlobals, xref, annotation, {
            evaluator,
            task,
            evaluatorOptions: options
          }));
          break;
        case AnnotationEditorType.HIGHLIGHT:
          if (annotation.quadPoints) {
            promises.push(HighlightAnnotation.createNewPrintAnnotation(annotationGlobals, xref, annotation, {
              evaluatorOptions: options
            }));
          } else {
            promises.push(InkAnnotation.createNewPrintAnnotation(annotationGlobals, xref, annotation, {
              evaluatorOptions: options
            }));
          }
          break;
        case AnnotationEditorType.INK:
          promises.push(InkAnnotation.createNewPrintAnnotation(annotationGlobals, xref, annotation, {
            evaluatorOptions: options
          }));
          break;
        case AnnotationEditorType.STAMP:
          const image = options.isOffscreenCanvasSupported ? await imagePromises?.get(annotation.bitmapId) : null;
          if (image?.imageStream) {
            const {
              imageStream,
              smaskStream
            } = image;
            if (smaskStream) {
              imageStream.dict.set("SMask", smaskStream);
            }
            image.imageRef = new JpegStream(imageStream, imageStream.length);
            image.imageStream = image.smaskStream = null;
          }
          promises.push(StampAnnotation.createNewPrintAnnotation(annotationGlobals, xref, annotation, {
            image,
            evaluatorOptions: options
          }));
          break;
        case AnnotationEditorType.SIGNATURE:
          promises.push(StampAnnotation.createNewPrintAnnotation(annotationGlobals, xref, annotation, {
            evaluatorOptions: options
          }));
          break;
      }
    }
    return Promise.all(promises);
  }
}
function getRgbColor(color, defaultColor = new Uint8ClampedArray(3)) {
  if (!Array.isArray(color)) {
    return defaultColor;
  }
  const rgbColor = defaultColor || new Uint8ClampedArray(3);
  switch (color.length) {
    case 0:
      return null;
    case 1:
      ColorSpaceUtils.gray.getRgbItem(color, 0, rgbColor, 0);
      return rgbColor;
    case 3:
      ColorSpaceUtils.rgb.getRgbItem(color, 0, rgbColor, 0);
      return rgbColor;
    case 4:
      ColorSpaceUtils.cmyk.getRgbItem(color, 0, rgbColor, 0);
      return rgbColor;
    default:
      return defaultColor;
  }
}
function getPdfColorArray(color) {
  return Array.from(color, c => c / 255);
}
function getQuadPoints(dict, rect) {
  const quadPoints = dict.getArray("QuadPoints");
  if (!isNumberArray(quadPoints, null) || quadPoints.length === 0 || quadPoints.length % 8 > 0) {
    return null;
  }
  const newQuadPoints = new Float32Array(quadPoints.length);
  for (let i = 0, ii = quadPoints.length; i < ii; i += 8) {
    const [x1, y1, x2, y2, x3, y3, x4, y4] = quadPoints.slice(i, i + 8);
    const minX = Math.min(x1, x2, x3, x4);
    const maxX = Math.max(x1, x2, x3, x4);
    const minY = Math.min(y1, y2, y3, y4);
    const maxY = Math.max(y1, y2, y3, y4);
    if (rect !== null && (minX < rect[0] || maxX > rect[2] || minY < rect[1] || maxY > rect[3])) {
      return null;
    }
    newQuadPoints.set([minX, maxY, maxX, maxY, minX, minY, maxX, minY], i);
  }
  return newQuadPoints;
}
function getTransformMatrix(rect, bbox, matrix) {
  const [minX, minY, maxX, maxY] = Util.getAxialAlignedBoundingBox(bbox, matrix);
  if (minX === maxX || minY === maxY) {
    return [1, 0, 0, 1, rect[0], rect[1]];
  }
  const xRatio = (rect[2] - rect[0]) / (maxX - minX);
  const yRatio = (rect[3] - rect[1]) / (maxY - minY);
  return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];
}
class Annotation {
  constructor(params) {
    const {
      dict,
      xref,
      annotationGlobals,
      ref,
      orphanFields
    } = params;
    const parentRef = orphanFields?.get(ref);
    if (parentRef) {
      dict.set("Parent", parentRef);
    }
    this.setTitle(dict.get("T"));
    this.setContents(dict.get("Contents"));
    this.setModificationDate(dict.get("M"));
    this.setFlags(dict.get("F"));
    this.setRectangle(dict.getArray("Rect"));
    this.setColor(dict.getArray("C"));
    this.setBorderStyle(dict);
    this.setAppearance(dict);
    this.setOptionalContent(dict);
    const MK = dict.get("MK");
    this.setBorderAndBackgroundColors(MK);
    this.setRotation(MK, dict);
    this.ref = params.ref instanceof Ref ? params.ref : null;
    this._streams = [];
    if (this.appearance) {
      this._streams.push(this.appearance);
    }
    const isLocked = !!(this.flags & AnnotationFlag.LOCKED);
    const isContentLocked = !!(this.flags & AnnotationFlag.LOCKEDCONTENTS);
    this.data = {
      annotationFlags: this.flags,
      borderStyle: this.borderStyle,
      color: this.color,
      backgroundColor: this.backgroundColor,
      borderColor: this.borderColor,
      rotation: this.rotation,
      contentsObj: this._contents,
      hasAppearance: !!this.appearance,
      id: params.id,
      modificationDate: this.modificationDate,
      rect: this.rectangle,
      subtype: params.subtype,
      hasOwnCanvas: false,
      noRotate: !!(this.flags & AnnotationFlag.NOROTATE),
      noHTML: isLocked && isContentLocked,
      isEditable: false,
      structParent: -1
    };
    if (annotationGlobals.structTreeRoot) {
      let structParent = dict.get("StructParent");
      this.data.structParent = structParent = Number.isInteger(structParent) && structParent >= 0 ? structParent : -1;
      annotationGlobals.structTreeRoot.addAnnotationIdToPage(params.pageRef, structParent);
    }
    if (params.collectFields) {
      const kids = dict.get("Kids");
      if (Array.isArray(kids)) {
        const kidIds = [];
        for (const kid of kids) {
          if (kid instanceof Ref) {
            kidIds.push(kid.toString());
          }
        }
        if (kidIds.length !== 0) {
          this.data.kidIds = kidIds;
        }
      }
      this.data.actions = collectActions(xref, dict, AnnotationActionEventType);
      this.data.fieldName = this._constructFieldName(dict);
      this.data.pageIndex = params.pageIndex;
    }
    const it = dict.get("IT");
    if (it instanceof Name) {
      this.data.it = it.name;
    }
    this._isOffscreenCanvasSupported = params.evaluatorOptions.isOffscreenCanvasSupported;
    this._fallbackFontDict = null;
    this._needAppearances = false;
  }
  _hasFlag(flags, flag) {
    return !!(flags & flag);
  }
  _buildFlags(noView, noPrint) {
    let {
      flags
    } = this;
    if (noView === undefined) {
      if (noPrint === undefined) {
        return undefined;
      }
      if (noPrint) {
        return flags & ~AnnotationFlag.PRINT;
      }
      return flags & ~AnnotationFlag.HIDDEN | AnnotationFlag.PRINT;
    }
    if (noView) {
      flags |= AnnotationFlag.PRINT;
      if (noPrint) {
        return flags & ~AnnotationFlag.NOVIEW | AnnotationFlag.HIDDEN;
      }
      return flags & ~AnnotationFlag.HIDDEN | AnnotationFlag.NOVIEW;
    }
    flags &= ~(AnnotationFlag.HIDDEN | AnnotationFlag.NOVIEW);
    if (noPrint) {
      return flags & ~AnnotationFlag.PRINT;
    }
    return flags | AnnotationFlag.PRINT;
  }
  _isViewable(flags) {
    return !this._hasFlag(flags, AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, AnnotationFlag.NOVIEW);
  }
  _isPrintable(flags) {
    return this._hasFlag(flags, AnnotationFlag.PRINT) && !this._hasFlag(flags, AnnotationFlag.HIDDEN) && !this._hasFlag(flags, AnnotationFlag.INVISIBLE);
  }
  mustBeViewed(annotationStorage, _renderForms) {
    const noView = annotationStorage?.get(this.data.id)?.noView;
    if (noView !== undefined) {
      return !noView;
    }
    return this.viewable && !this._hasFlag(this.flags, AnnotationFlag.HIDDEN);
  }
  mustBePrinted(annotationStorage) {
    const noPrint = annotationStorage?.get(this.data.id)?.noPrint;
    if (noPrint !== undefined) {
      return !noPrint;
    }
    return this.printable;
  }
  mustBeViewedWhenEditing(isEditing, modifiedIds = null) {
    return isEditing ? !this.data.isEditable : !modifiedIds?.has(this.data.id);
  }
  get viewable() {
    if (this.data.quadPoints === null) {
      return false;
    }
    if (this.flags === 0) {
      return true;
    }
    return this._isViewable(this.flags);
  }
  get printable() {
    if (this.data.quadPoints === null) {
      return false;
    }
    if (this.flags === 0) {
      return false;
    }
    return this._isPrintable(this.flags);
  }
  _parseStringHelper(data) {
    const str = typeof data === "string" ? stringToPDFString(data) : "";
    const dir = str && bidi(str).dir === "rtl" ? "rtl" : "ltr";
    return {
      str,
      dir
    };
  }
  setDefaultAppearance(params) {
    const {
      dict,
      annotationGlobals
    } = params;
    const defaultAppearance = getInheritableProperty({
      dict,
      key: "DA"
    }) || annotationGlobals.acroForm.get("DA");
    this._defaultAppearance = typeof defaultAppearance === "string" ? defaultAppearance : "";
    this.data.defaultAppearanceData = parseDefaultAppearance(this._defaultAppearance);
  }
  setTitle(title) {
    this._title = this._parseStringHelper(title);
  }
  setContents(contents) {
    this._contents = this._parseStringHelper(contents);
  }
  setModificationDate(modificationDate) {
    this.modificationDate = typeof modificationDate === "string" ? modificationDate : null;
  }
  setFlags(flags) {
    this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;
    if (this.flags & AnnotationFlag.INVISIBLE && this.constructor.name !== "Annotation") {
      this.flags ^= AnnotationFlag.INVISIBLE;
    }
  }
  hasFlag(flag) {
    return this._hasFlag(this.flags, flag);
  }
  setRectangle(rectangle) {
    this.rectangle = lookupNormalRect(rectangle, [0, 0, 0, 0]);
  }
  setColor(color) {
    this.color = getRgbColor(color);
  }
  setLineEndings(lineEndings) {
    this.lineEndings = ["None", "None"];
    if (Array.isArray(lineEndings) && lineEndings.length === 2) {
      for (let i = 0; i < 2; i++) {
        const obj = lineEndings[i];
        if (obj instanceof Name) {
          switch (obj.name) {
            case "None":
              continue;
            case "Square":
            case "Circle":
            case "Diamond":
            case "OpenArrow":
            case "ClosedArrow":
            case "Butt":
            case "ROpenArrow":
            case "RClosedArrow":
            case "Slash":
              this.lineEndings[i] = obj.name;
              continue;
          }
        }
        warn(\`Ignoring invalid lineEnding: \${obj}\`);
      }
    }
  }
  setRotation(mk, dict) {
    this.rotation = 0;
    let angle = mk instanceof Dict ? mk.get("R") || 0 : dict.get("Rotate") || 0;
    if (Number.isInteger(angle) && angle !== 0) {
      angle %= 360;
      if (angle < 0) {
        angle += 360;
      }
      if (angle % 90 === 0) {
        this.rotation = angle;
      }
    }
  }
  setBorderAndBackgroundColors(mk) {
    if (mk instanceof Dict) {
      this.borderColor = getRgbColor(mk.getArray("BC"), null);
      this.backgroundColor = getRgbColor(mk.getArray("BG"), null);
    } else {
      this.borderColor = this.backgroundColor = null;
    }
  }
  setBorderStyle(borderStyle) {
    this.borderStyle = new AnnotationBorderStyle();
    if (!(borderStyle instanceof Dict)) {
      return;
    }
    if (borderStyle.has("BS")) {
      const dict = borderStyle.get("BS");
      if (dict instanceof Dict) {
        const dictType = dict.get("Type");
        if (!dictType || isName(dictType, "Border")) {
          this.borderStyle.setWidth(dict.get("W"), this.rectangle);
          this.borderStyle.setStyle(dict.get("S"));
          this.borderStyle.setDashArray(dict.getArray("D"));
        }
      }
    } else if (borderStyle.has("Border")) {
      const array = borderStyle.getArray("Border");
      if (Array.isArray(array) && array.length >= 3) {
        this.borderStyle.setHorizontalCornerRadius(array[0]);
        this.borderStyle.setVerticalCornerRadius(array[1]);
        this.borderStyle.setWidth(array[2], this.rectangle);
        if (array.length === 4) {
          this.borderStyle.setDashArray(array[3], true);
        }
      }
    } else {
      this.borderStyle.setWidth(0);
    }
  }
  setAppearance(dict) {
    this.appearance = null;
    const appearanceStates = dict.get("AP");
    if (!(appearanceStates instanceof Dict)) {
      return;
    }
    const normalAppearanceState = appearanceStates.get("N");
    if (normalAppearanceState instanceof BaseStream) {
      this.appearance = normalAppearanceState;
      return;
    }
    if (!(normalAppearanceState instanceof Dict)) {
      return;
    }
    const as = dict.get("AS");
    if (!(as instanceof Name) || !normalAppearanceState.has(as.name)) {
      return;
    }
    const appearance = normalAppearanceState.get(as.name);
    if (appearance instanceof BaseStream) {
      this.appearance = appearance;
    }
  }
  setOptionalContent(dict) {
    this.oc = null;
    const oc = dict.get("OC");
    if (oc instanceof Name) {
      warn("setOptionalContent: Support for /Name-entry is not implemented.");
    } else if (oc instanceof Dict) {
      this.oc = oc;
    }
  }
  loadResources(keys, appearance) {
    return appearance.dict.getAsync("Resources").then(resources => {
      if (!resources) {
        return undefined;
      }
      const objectLoader = new ObjectLoader(resources, keys, resources.xref);
      return objectLoader.load().then(() => resources);
    });
  }
  async getOperatorList(evaluator, task, intent, annotationStorage) {
    const {
      hasOwnCanvas,
      id,
      rect
    } = this.data;
    let appearance = this.appearance;
    const isUsingOwnCanvas = !!(hasOwnCanvas && intent & RenderingIntentFlag.DISPLAY);
    if (isUsingOwnCanvas && (this.width === 0 || this.height === 0)) {
      this.data.hasOwnCanvas = false;
      return {
        opList: new OperatorList(),
        separateForm: false,
        separateCanvas: false
      };
    }
    if (!appearance) {
      if (!isUsingOwnCanvas) {
        return {
          opList: new OperatorList(),
          separateForm: false,
          separateCanvas: false
        };
      }
      appearance = new StringStream("");
      appearance.dict = new Dict();
    }
    const appearanceDict = appearance.dict;
    const resources = await this.loadResources(["ExtGState", "ColorSpace", "Pattern", "Shading", "XObject", "Font"], appearance);
    const bbox = lookupRect(appearanceDict.getArray("BBox"), [0, 0, 1, 1]);
    const matrix = lookupMatrix(appearanceDict.getArray("Matrix"), IDENTITY_MATRIX);
    const transform = getTransformMatrix(rect, bbox, matrix);
    const opList = new OperatorList();
    let optionalContent;
    if (this.oc) {
      optionalContent = await evaluator.parseMarkedContentProps(this.oc, null);
    }
    if (optionalContent !== undefined) {
      opList.addOp(OPS.beginMarkedContentProps, ["OC", optionalContent]);
    }
    opList.addOp(OPS.beginAnnotation, [id, rect, transform, matrix, isUsingOwnCanvas]);
    await evaluator.getOperatorList({
      stream: appearance,
      task,
      resources,
      operatorList: opList,
      fallbackFontDict: this._fallbackFontDict
    });
    opList.addOp(OPS.endAnnotation, []);
    if (optionalContent !== undefined) {
      opList.addOp(OPS.endMarkedContent, []);
    }
    this.reset();
    return {
      opList,
      separateForm: false,
      separateCanvas: isUsingOwnCanvas
    };
  }
  async save(evaluator, task, annotationStorage, changes) {
    return null;
  }
  get hasTextContent() {
    return false;
  }
  async extractTextContent(evaluator, task, viewBox) {
    if (!this.appearance) {
      return;
    }
    const resources = await this.loadResources(["ExtGState", "Font", "Properties", "XObject"], this.appearance);
    const text = [];
    const buffer = [];
    let firstPosition = null;
    const sink = {
      desiredSize: Math.Infinity,
      ready: true,
      enqueue(chunk, size) {
        for (const item of chunk.items) {
          if (item.str === undefined) {
            continue;
          }
          firstPosition ||= item.transform.slice(-2);
          buffer.push(item.str);
          if (item.hasEOL) {
            text.push(buffer.join("").trimEnd());
            buffer.length = 0;
          }
        }
      }
    };
    await evaluator.getTextContent({
      stream: this.appearance,
      task,
      resources,
      includeMarkedContent: true,
      keepWhiteSpace: true,
      sink,
      viewBox
    });
    this.reset();
    if (buffer.length) {
      text.push(buffer.join("").trimEnd());
    }
    if (text.length > 1 || text[0]) {
      const appearanceDict = this.appearance.dict;
      const bbox = lookupRect(appearanceDict.getArray("BBox"), null);
      const matrix = lookupMatrix(appearanceDict.getArray("Matrix"), null);
      this.data.textPosition = this._transformPoint(firstPosition, bbox, matrix);
      this.data.textContent = text;
    }
  }
  _transformPoint(coords, bbox, matrix) {
    const {
      rect
    } = this.data;
    bbox ||= [0, 0, 1, 1];
    matrix ||= [1, 0, 0, 1, 0, 0];
    const transform = getTransformMatrix(rect, bbox, matrix);
    transform[4] -= rect[0];
    transform[5] -= rect[1];
    coords = Util.applyTransform(coords, transform);
    return Util.applyTransform(coords, matrix);
  }
  getFieldObject() {
    if (this.data.kidIds) {
      return {
        id: this.data.id,
        actions: this.data.actions,
        name: this.data.fieldName,
        strokeColor: this.data.borderColor,
        fillColor: this.data.backgroundColor,
        type: "",
        kidIds: this.data.kidIds,
        page: this.data.pageIndex,
        rotation: this.rotation
      };
    }
    return null;
  }
  reset() {
    for (const stream of this._streams) {
      stream.reset();
    }
  }
  _constructFieldName(dict) {
    if (!dict.has("T") && !dict.has("Parent")) {
      warn("Unknown field name, falling back to empty field name.");
      return "";
    }
    if (!dict.has("Parent")) {
      return stringToPDFString(dict.get("T"));
    }
    const fieldName = [];
    if (dict.has("T")) {
      fieldName.unshift(stringToPDFString(dict.get("T")));
    }
    let loopDict = dict;
    const visited = new RefSet();
    if (dict.objId) {
      visited.put(dict.objId);
    }
    while (loopDict.has("Parent")) {
      loopDict = loopDict.get("Parent");
      if (!(loopDict instanceof Dict) || loopDict.objId && visited.has(loopDict.objId)) {
        break;
      }
      if (loopDict.objId) {
        visited.put(loopDict.objId);
      }
      if (loopDict.has("T")) {
        fieldName.unshift(stringToPDFString(loopDict.get("T")));
      }
    }
    return fieldName.join(".");
  }
  get width() {
    return this.data.rect[2] - this.data.rect[0];
  }
  get height() {
    return this.data.rect[3] - this.data.rect[1];
  }
}
class AnnotationBorderStyle {
  constructor() {
    this.width = 1;
    this.rawWidth = 1;
    this.style = AnnotationBorderStyleType.SOLID;
    this.dashArray = [3];
    this.horizontalCornerRadius = 0;
    this.verticalCornerRadius = 0;
  }
  setWidth(width, rect = [0, 0, 0, 0]) {
    if (width instanceof Name) {
      this.width = 0;
      return;
    }
    if (typeof width === "number") {
      if (width > 0) {
        this.rawWidth = width;
        const maxWidth = (rect[2] - rect[0]) / 2;
        const maxHeight = (rect[3] - rect[1]) / 2;
        if (maxWidth > 0 && maxHeight > 0 && (width > maxWidth || width > maxHeight)) {
          warn(\`AnnotationBorderStyle.setWidth - ignoring width: \${width}\`);
          width = 1;
        }
      }
      this.width = width;
    }
  }
  setStyle(style) {
    if (!(style instanceof Name)) {
      return;
    }
    switch (style.name) {
      case "S":
        this.style = AnnotationBorderStyleType.SOLID;
        break;
      case "D":
        this.style = AnnotationBorderStyleType.DASHED;
        break;
      case "B":
        this.style = AnnotationBorderStyleType.BEVELED;
        break;
      case "I":
        this.style = AnnotationBorderStyleType.INSET;
        break;
      case "U":
        this.style = AnnotationBorderStyleType.UNDERLINE;
        break;
      default:
        break;
    }
  }
  setDashArray(dashArray, forceStyle = false) {
    if (Array.isArray(dashArray)) {
      let isValid = true;
      let allZeros = true;
      for (const element of dashArray) {
        const validNumber = +element >= 0;
        if (!validNumber) {
          isValid = false;
          break;
        } else if (element > 0) {
          allZeros = false;
        }
      }
      if (dashArray.length === 0 || isValid && !allZeros) {
        this.dashArray = dashArray;
        if (forceStyle) {
          this.setStyle(Name.get("D"));
        }
      } else {
        this.width = 0;
      }
    } else if (dashArray) {
      this.width = 0;
    }
  }
  setHorizontalCornerRadius(radius) {
    if (Number.isInteger(radius)) {
      this.horizontalCornerRadius = radius;
    }
  }
  setVerticalCornerRadius(radius) {
    if (Number.isInteger(radius)) {
      this.verticalCornerRadius = radius;
    }
  }
}
class MarkupAnnotation extends Annotation {
  constructor(params) {
    super(params);
    const {
      dict
    } = params;
    if (dict.has("IRT")) {
      const rawIRT = dict.getRaw("IRT");
      this.data.inReplyTo = rawIRT instanceof Ref ? rawIRT.toString() : null;
      const rt = dict.get("RT");
      this.data.replyType = rt instanceof Name ? rt.name : AnnotationReplyType.REPLY;
    }
    let popupRef = null;
    if (this.data.replyType === AnnotationReplyType.GROUP) {
      const parent = dict.get("IRT");
      this.setTitle(parent.get("T"));
      this.data.titleObj = this._title;
      this.setContents(parent.get("Contents"));
      this.data.contentsObj = this._contents;
      if (!parent.has("CreationDate")) {
        this.data.creationDate = null;
      } else {
        this.setCreationDate(parent.get("CreationDate"));
        this.data.creationDate = this.creationDate;
      }
      if (!parent.has("M")) {
        this.data.modificationDate = null;
      } else {
        this.setModificationDate(parent.get("M"));
        this.data.modificationDate = this.modificationDate;
      }
      popupRef = parent.getRaw("Popup");
      if (!parent.has("C")) {
        this.data.color = null;
      } else {
        this.setColor(parent.getArray("C"));
        this.data.color = this.color;
      }
    } else {
      this.data.titleObj = this._title;
      this.setCreationDate(dict.get("CreationDate"));
      this.data.creationDate = this.creationDate;
      popupRef = dict.getRaw("Popup");
      if (!dict.has("C")) {
        this.data.color = null;
      }
    }
    this.data.popupRef = popupRef instanceof Ref ? popupRef.toString() : null;
    if (dict.has("RC")) {
      this.data.richText = XFAFactory.getRichTextAsHtml(dict.get("RC"));
    }
  }
  setCreationDate(creationDate) {
    this.creationDate = typeof creationDate === "string" ? creationDate : null;
  }
  _setDefaultAppearance({
    xref,
    extra,
    strokeColor,
    fillColor,
    blendMode,
    strokeAlpha,
    fillAlpha,
    pointsCallback
  }) {
    const bbox = this.data.rect = [Infinity, Infinity, -Infinity, -Infinity];
    const buffer = ["q"];
    if (extra) {
      buffer.push(extra);
    }
    if (strokeColor) {
      buffer.push(\`\${strokeColor[0]} \${strokeColor[1]} \${strokeColor[2]} RG\`);
    }
    if (fillColor) {
      buffer.push(\`\${fillColor[0]} \${fillColor[1]} \${fillColor[2]} rg\`);
    }
    const pointsArray = this.data.quadPoints || Float32Array.from([this.rectangle[0], this.rectangle[3], this.rectangle[2], this.rectangle[3], this.rectangle[0], this.rectangle[1], this.rectangle[2], this.rectangle[1]]);
    for (let i = 0, ii = pointsArray.length; i < ii; i += 8) {
      const points = pointsCallback(buffer, pointsArray.subarray(i, i + 8));
      Util.rectBoundingBox(...points, bbox);
    }
    buffer.push("Q");
    const formDict = new Dict(xref);
    const appearanceStreamDict = new Dict(xref);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    const appearanceStream = new StringStream(buffer.join(" "));
    appearanceStream.dict = appearanceStreamDict;
    formDict.set("Fm0", appearanceStream);
    const gsDict = new Dict(xref);
    if (blendMode) {
      gsDict.set("BM", Name.get(blendMode));
    }
    if (typeof strokeAlpha === "number") {
      gsDict.set("CA", strokeAlpha);
    }
    if (typeof fillAlpha === "number") {
      gsDict.set("ca", fillAlpha);
    }
    const stateDict = new Dict(xref);
    stateDict.set("GS0", gsDict);
    const resources = new Dict(xref);
    resources.set("ExtGState", stateDict);
    resources.set("XObject", formDict);
    const appearanceDict = new Dict(xref);
    appearanceDict.set("Resources", resources);
    appearanceDict.set("BBox", bbox);
    this.appearance = new StringStream("/GS0 gs /Fm0 Do");
    this.appearance.dict = appearanceDict;
    this._streams.push(this.appearance, appearanceStream);
  }
  static async createNewAnnotation(xref, annotation, changes, params) {
    const annotationRef = annotation.ref ||= xref.getNewTemporaryRef();
    const ap = await this.createNewAppearanceStream(annotation, xref, params);
    let annotationDict;
    if (ap) {
      const apRef = xref.getNewTemporaryRef();
      annotationDict = this.createNewDict(annotation, xref, {
        apRef
      });
      changes.put(apRef, {
        data: ap
      });
    } else {
      annotationDict = this.createNewDict(annotation, xref, {});
    }
    if (Number.isInteger(annotation.parentTreeId)) {
      annotationDict.set("StructParent", annotation.parentTreeId);
    }
    changes.put(annotationRef, {
      data: annotationDict
    });
    return {
      ref: annotationRef
    };
  }
  static async createNewPrintAnnotation(annotationGlobals, xref, annotation, params) {
    const ap = await this.createNewAppearanceStream(annotation, xref, params);
    const annotationDict = this.createNewDict(annotation, xref, ap ? {
      ap
    } : {});
    const newAnnotation = new this.prototype.constructor({
      dict: annotationDict,
      xref,
      annotationGlobals,
      evaluatorOptions: params.evaluatorOptions
    });
    if (annotation.ref) {
      newAnnotation.ref = newAnnotation.refToReplace = annotation.ref;
    }
    return newAnnotation;
  }
}
class WidgetAnnotation extends Annotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref,
      annotationGlobals
    } = params;
    const data = this.data;
    this._needAppearances = params.needAppearances;
    data.annotationType = AnnotationType.WIDGET;
    if (data.fieldName === undefined) {
      data.fieldName = this._constructFieldName(dict);
    }
    if (data.actions === undefined) {
      data.actions = collectActions(xref, dict, AnnotationActionEventType);
    }
    let fieldValue = getInheritableProperty({
      dict,
      key: "V",
      getArray: true
    });
    data.fieldValue = this._decodeFormValue(fieldValue);
    const defaultFieldValue = getInheritableProperty({
      dict,
      key: "DV",
      getArray: true
    });
    data.defaultFieldValue = this._decodeFormValue(defaultFieldValue);
    if (fieldValue === undefined && annotationGlobals.xfaDatasets) {
      const path = this._title.str;
      if (path) {
        this._hasValueFromXFA = true;
        data.fieldValue = fieldValue = annotationGlobals.xfaDatasets.getValue(path);
      }
    }
    if (fieldValue === undefined && data.defaultFieldValue !== null) {
      data.fieldValue = data.defaultFieldValue;
    }
    data.alternativeText = stringToPDFString(dict.get("TU") || "");
    this.setDefaultAppearance(params);
    data.hasAppearance ||= this._needAppearances && data.fieldValue !== undefined && data.fieldValue !== null;
    const fieldType = getInheritableProperty({
      dict,
      key: "FT"
    });
    data.fieldType = fieldType instanceof Name ? fieldType.name : null;
    const localResources = getInheritableProperty({
      dict,
      key: "DR"
    });
    const acroFormResources = annotationGlobals.acroForm.get("DR");
    const appearanceResources = this.appearance?.dict.get("Resources");
    this._fieldResources = {
      localResources,
      acroFormResources,
      appearanceResources,
      mergedResources: Dict.merge({
        xref,
        dictArray: [localResources, appearanceResources, acroFormResources],
        mergeSubDicts: true
      })
    };
    data.fieldFlags = getInheritableProperty({
      dict,
      key: "Ff"
    });
    if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {
      data.fieldFlags = 0;
    }
    data.password = this.hasFieldFlag(AnnotationFieldFlag.PASSWORD);
    data.readOnly = this.hasFieldFlag(AnnotationFieldFlag.READONLY);
    data.required = this.hasFieldFlag(AnnotationFieldFlag.REQUIRED);
    data.hidden = this._hasFlag(data.annotationFlags, AnnotationFlag.HIDDEN) || this._hasFlag(data.annotationFlags, AnnotationFlag.NOVIEW);
  }
  _decodeFormValue(formValue) {
    if (Array.isArray(formValue)) {
      return formValue.filter(item => typeof item === "string").map(item => stringToPDFString(item));
    } else if (formValue instanceof Name) {
      return stringToPDFString(formValue.name);
    } else if (typeof formValue === "string") {
      return stringToPDFString(formValue);
    }
    return null;
  }
  hasFieldFlag(flag) {
    return !!(this.data.fieldFlags & flag);
  }
  _isViewable(flags) {
    return true;
  }
  mustBeViewed(annotationStorage, renderForms) {
    if (renderForms) {
      return this.viewable;
    }
    return super.mustBeViewed(annotationStorage, renderForms) && !this._hasFlag(this.flags, AnnotationFlag.NOVIEW);
  }
  getRotationMatrix(annotationStorage) {
    let rotation = annotationStorage?.get(this.data.id)?.rotation;
    if (rotation === undefined) {
      rotation = this.rotation;
    }
    return rotation === 0 ? IDENTITY_MATRIX : getRotationMatrix(rotation, this.width, this.height);
  }
  getBorderAndBackgroundAppearances(annotationStorage) {
    let rotation = annotationStorage?.get(this.data.id)?.rotation;
    if (rotation === undefined) {
      rotation = this.rotation;
    }
    if (!this.backgroundColor && !this.borderColor) {
      return "";
    }
    const rect = rotation === 0 || rotation === 180 ? \`0 0 \${this.width} \${this.height} re\` : \`0 0 \${this.height} \${this.width} re\`;
    let str = "";
    if (this.backgroundColor) {
      str = \`\${getPdfColor(this.backgroundColor, true)} \${rect} f \`;
    }
    if (this.borderColor) {
      const borderWidth = this.borderStyle.width || 1;
      str += \`\${borderWidth} w \${getPdfColor(this.borderColor, false)} \${rect} S \`;
    }
    return str;
  }
  async getOperatorList(evaluator, task, intent, annotationStorage) {
    if (intent & RenderingIntentFlag.ANNOTATIONS_FORMS && !(this instanceof SignatureWidgetAnnotation) && !this.data.noHTML && !this.data.hasOwnCanvas) {
      return {
        opList: new OperatorList(),
        separateForm: true,
        separateCanvas: false
      };
    }
    if (!this._hasText) {
      return super.getOperatorList(evaluator, task, intent, annotationStorage);
    }
    const content = await this._getAppearance(evaluator, task, intent, annotationStorage);
    if (this.appearance && content === null) {
      return super.getOperatorList(evaluator, task, intent, annotationStorage);
    }
    const opList = new OperatorList();
    if (!this._defaultAppearance || content === null) {
      return {
        opList,
        separateForm: false,
        separateCanvas: false
      };
    }
    const isUsingOwnCanvas = !!(this.data.hasOwnCanvas && intent & RenderingIntentFlag.DISPLAY);
    const matrix = [1, 0, 0, 1, 0, 0];
    const bbox = [0, 0, this.width, this.height];
    const transform = getTransformMatrix(this.data.rect, bbox, matrix);
    let optionalContent;
    if (this.oc) {
      optionalContent = await evaluator.parseMarkedContentProps(this.oc, null);
    }
    if (optionalContent !== undefined) {
      opList.addOp(OPS.beginMarkedContentProps, ["OC", optionalContent]);
    }
    opList.addOp(OPS.beginAnnotation, [this.data.id, this.data.rect, transform, this.getRotationMatrix(annotationStorage), isUsingOwnCanvas]);
    const stream = new StringStream(content);
    await evaluator.getOperatorList({
      stream,
      task,
      resources: this._fieldResources.mergedResources,
      operatorList: opList
    });
    opList.addOp(OPS.endAnnotation, []);
    if (optionalContent !== undefined) {
      opList.addOp(OPS.endMarkedContent, []);
    }
    return {
      opList,
      separateForm: false,
      separateCanvas: isUsingOwnCanvas
    };
  }
  _getMKDict(rotation) {
    const mk = new Dict(null);
    if (rotation) {
      mk.set("R", rotation);
    }
    if (this.borderColor) {
      mk.set("BC", getPdfColorArray(this.borderColor));
    }
    if (this.backgroundColor) {
      mk.set("BG", getPdfColorArray(this.backgroundColor));
    }
    return mk.size > 0 ? mk : null;
  }
  amendSavedDict(annotationStorage, dict) {}
  setValue(dict, value, xref, changes) {
    const {
      dict: parentDict,
      ref: parentRef
    } = getParentToUpdate(dict, this.ref, xref);
    if (!parentDict) {
      dict.set("V", value);
    } else if (!changes.has(parentRef)) {
      const newParentDict = parentDict.clone();
      newParentDict.set("V", value);
      changes.put(parentRef, {
        data: newParentDict
      });
      return newParentDict;
    }
    return null;
  }
  async save(evaluator, task, annotationStorage, changes) {
    const storageEntry = annotationStorage?.get(this.data.id);
    const flags = this._buildFlags(storageEntry?.noView, storageEntry?.noPrint);
    let value = storageEntry?.value,
      rotation = storageEntry?.rotation;
    if (value === this.data.fieldValue || value === undefined) {
      if (!this._hasValueFromXFA && rotation === undefined && flags === undefined) {
        return;
      }
      value ||= this.data.fieldValue;
    }
    if (rotation === undefined && !this._hasValueFromXFA && Array.isArray(value) && Array.isArray(this.data.fieldValue) && isArrayEqual(value, this.data.fieldValue) && flags === undefined) {
      return;
    }
    if (rotation === undefined) {
      rotation = this.rotation;
    }
    let appearance = null;
    if (!this._needAppearances) {
      appearance = await this._getAppearance(evaluator, task, RenderingIntentFlag.SAVE, annotationStorage);
      if (appearance === null && flags === undefined) {
        return;
      }
    } else {}
    let needAppearances = false;
    if (appearance?.needAppearances) {
      needAppearances = true;
      appearance = null;
    }
    const {
      xref
    } = evaluator;
    const originalDict = xref.fetchIfRef(this.ref);
    if (!(originalDict instanceof Dict)) {
      return;
    }
    const dict = new Dict(xref);
    for (const key of originalDict.getKeys()) {
      if (key !== "AP") {
        dict.set(key, originalDict.getRaw(key));
      }
    }
    if (flags !== undefined) {
      dict.set("F", flags);
      if (appearance === null && !needAppearances) {
        const ap = originalDict.getRaw("AP");
        if (ap) {
          dict.set("AP", ap);
        }
      }
    }
    const xfa = {
      path: this.data.fieldName,
      value
    };
    const newParentDict = this.setValue(dict, Array.isArray(value) ? value.map(stringToAsciiOrUTF16BE) : stringToAsciiOrUTF16BE(value), xref, changes);
    this.amendSavedDict(annotationStorage, newParentDict || dict);
    const maybeMK = this._getMKDict(rotation);
    if (maybeMK) {
      dict.set("MK", maybeMK);
    }
    changes.put(this.ref, {
      data: dict,
      xfa,
      needAppearances
    });
    if (appearance !== null) {
      const newRef = xref.getNewTemporaryRef();
      const AP = new Dict(xref);
      dict.set("AP", AP);
      AP.set("N", newRef);
      const resources = this._getSaveFieldResources(xref);
      const appearanceStream = new StringStream(appearance);
      const appearanceDict = appearanceStream.dict = new Dict(xref);
      appearanceDict.set("Subtype", Name.get("Form"));
      appearanceDict.set("Resources", resources);
      appearanceDict.set("BBox", [0, 0, this.width, this.height]);
      const rotationMatrix = this.getRotationMatrix(annotationStorage);
      if (rotationMatrix !== IDENTITY_MATRIX) {
        appearanceDict.set("Matrix", rotationMatrix);
      }
      changes.put(newRef, {
        data: appearanceStream,
        xfa: null,
        needAppearances: false
      });
    }
    dict.set("M", \`D:\${getModificationDate()}\`);
  }
  async _getAppearance(evaluator, task, intent, annotationStorage) {
    if (this.data.password) {
      return null;
    }
    const storageEntry = annotationStorage?.get(this.data.id);
    let value, rotation;
    if (storageEntry) {
      value = storageEntry.formattedValue || storageEntry.value;
      rotation = storageEntry.rotation;
    }
    if (rotation === undefined && value === undefined && !this._needAppearances) {
      if (!this._hasValueFromXFA || this.appearance) {
        return null;
      }
    }
    const colors = this.getBorderAndBackgroundAppearances(annotationStorage);
    if (value === undefined) {
      value = this.data.fieldValue;
      if (!value) {
        return \`/Tx BMC q \${colors}Q EMC\`;
      }
    }
    if (Array.isArray(value) && value.length === 1) {
      value = value[0];
    }
    assert(typeof value === "string", "Expected \`value\` to be a string.");
    value = value.trimEnd();
    if (this.data.combo) {
      const option = this.data.options.find(({
        exportValue
      }) => value === exportValue);
      value = option?.displayValue || value;
    }
    if (value === "") {
      return \`/Tx BMC q \${colors}Q EMC\`;
    }
    if (rotation === undefined) {
      rotation = this.rotation;
    }
    let lineCount = -1;
    let lines;
    if (this.data.multiLine) {
      lines = value.split(/\\r\\n?|\\n/).map(line => line.normalize("NFC"));
      lineCount = lines.length;
    } else {
      lines = [value.replace(/\\r\\n?|\\n/, "").normalize("NFC")];
    }
    const defaultPadding = 1;
    const defaultHPadding = 2;
    let {
      width: totalWidth,
      height: totalHeight
    } = this;
    if (rotation === 90 || rotation === 270) {
      [totalWidth, totalHeight] = [totalHeight, totalWidth];
    }
    if (!this._defaultAppearance) {
      this.data.defaultAppearanceData = parseDefaultAppearance(this._defaultAppearance = "/Helvetica 0 Tf 0 g");
    }
    let font = await WidgetAnnotation._getFontData(evaluator, task, this.data.defaultAppearanceData, this._fieldResources.mergedResources);
    let defaultAppearance, fontSize, lineHeight;
    const encodedLines = [];
    let encodingError = false;
    for (const line of lines) {
      const encodedString = font.encodeString(line);
      if (encodedString.length > 1) {
        encodingError = true;
      }
      encodedLines.push(encodedString.join(""));
    }
    if (encodingError && intent & RenderingIntentFlag.SAVE) {
      return {
        needAppearances: true
      };
    }
    if (encodingError && this._isOffscreenCanvasSupported) {
      const fontFamily = this.data.comb ? "monospace" : "sans-serif";
      const fakeUnicodeFont = new FakeUnicodeFont(evaluator.xref, fontFamily);
      const resources = fakeUnicodeFont.createFontResources(lines.join(""));
      const newFont = resources.getRaw("Font");
      if (this._fieldResources.mergedResources.has("Font")) {
        const oldFont = this._fieldResources.mergedResources.get("Font");
        for (const key of newFont.getKeys()) {
          oldFont.set(key, newFont.getRaw(key));
        }
      } else {
        this._fieldResources.mergedResources.set("Font", newFont);
      }
      const fontName = fakeUnicodeFont.fontName.name;
      font = await WidgetAnnotation._getFontData(evaluator, task, {
        fontName,
        fontSize: 0
      }, resources);
      for (let i = 0, ii = encodedLines.length; i < ii; i++) {
        encodedLines[i] = stringToUTF16String(lines[i]);
      }
      const savedDefaultAppearance = Object.assign(Object.create(null), this.data.defaultAppearanceData);
      this.data.defaultAppearanceData.fontSize = 0;
      this.data.defaultAppearanceData.fontName = fontName;
      [defaultAppearance, fontSize, lineHeight] = this._computeFontSize(totalHeight - 2 * defaultPadding, totalWidth - 2 * defaultHPadding, value, font, lineCount);
      this.data.defaultAppearanceData = savedDefaultAppearance;
    } else {
      if (!this._isOffscreenCanvasSupported) {
        warn("_getAppearance: OffscreenCanvas is not supported, annotation may not render correctly.");
      }
      [defaultAppearance, fontSize, lineHeight] = this._computeFontSize(totalHeight - 2 * defaultPadding, totalWidth - 2 * defaultHPadding, value, font, lineCount);
    }
    let descent = font.descent;
    if (isNaN(descent)) {
      descent = BASELINE_FACTOR * lineHeight;
    } else {
      descent = Math.max(BASELINE_FACTOR * lineHeight, Math.abs(descent) * fontSize);
    }
    const defaultVPadding = Math.min(Math.floor((totalHeight - fontSize) / 2), defaultPadding);
    const alignment = this.data.textAlignment;
    if (this.data.multiLine) {
      return this._getMultilineAppearance(defaultAppearance, encodedLines, font, fontSize, totalWidth, totalHeight, alignment, defaultHPadding, defaultVPadding, descent, lineHeight, annotationStorage);
    }
    if (this.data.comb) {
      return this._getCombAppearance(defaultAppearance, font, encodedLines[0], fontSize, totalWidth, totalHeight, defaultHPadding, defaultVPadding, descent, lineHeight, annotationStorage);
    }
    const bottomPadding = defaultVPadding + descent;
    if (alignment === 0 || alignment > 2) {
      return \`/Tx BMC q \${colors}BT \` + defaultAppearance + \` 1 0 0 1 \${numberToString(defaultHPadding)} \${numberToString(bottomPadding)} Tm (\${escapeString(encodedLines[0])}) Tj\` + " ET Q EMC";
    }
    const prevInfo = {
      shift: 0
    };
    const renderedText = this._renderText(encodedLines[0], font, fontSize, totalWidth, alignment, prevInfo, defaultHPadding, bottomPadding);
    return \`/Tx BMC q \${colors}BT \` + defaultAppearance + \` 1 0 0 1 0 0 Tm \${renderedText}\` + " ET Q EMC";
  }
  static async _getFontData(evaluator, task, appearanceData, resources) {
    const operatorList = new OperatorList();
    const initialState = {
      font: null,
      clone() {
        return this;
      }
    };
    const {
      fontName,
      fontSize
    } = appearanceData;
    await evaluator.handleSetFont(resources, [fontName && Name.get(fontName), fontSize], null, operatorList, task, initialState, null);
    return initialState.font;
  }
  _getTextWidth(text, font) {
    return Math.sumPrecise(font.charsToGlyphs(text).map(g => g.width)) / 1000;
  }
  _computeFontSize(height, width, text, font, lineCount) {
    let {
      fontSize
    } = this.data.defaultAppearanceData;
    let lineHeight = (fontSize || 12) * LINE_FACTOR,
      numberOfLines = Math.round(height / lineHeight);
    if (!fontSize) {
      const roundWithTwoDigits = x => Math.floor(x * 100) / 100;
      if (lineCount === -1) {
        const textWidth = this._getTextWidth(text, font);
        fontSize = roundWithTwoDigits(Math.min(height / LINE_FACTOR, width / textWidth));
        numberOfLines = 1;
      } else {
        const lines = text.split(/\\r\\n?|\\n/);
        const cachedLines = [];
        for (const line of lines) {
          const encoded = font.encodeString(line).join("");
          const glyphs = font.charsToGlyphs(encoded);
          const positions = font.getCharPositions(encoded);
          cachedLines.push({
            line: encoded,
            glyphs,
            positions
          });
        }
        const isTooBig = fsize => {
          let totalHeight = 0;
          for (const cache of cachedLines) {
            const chunks = this._splitLine(null, font, fsize, width, cache);
            totalHeight += chunks.length * fsize;
            if (totalHeight > height) {
              return true;
            }
          }
          return false;
        };
        numberOfLines = Math.max(numberOfLines, lineCount);
        while (true) {
          lineHeight = height / numberOfLines;
          fontSize = roundWithTwoDigits(lineHeight / LINE_FACTOR);
          if (isTooBig(fontSize)) {
            numberOfLines++;
            continue;
          }
          break;
        }
      }
      const {
        fontName,
        fontColor
      } = this.data.defaultAppearanceData;
      this._defaultAppearance = createDefaultAppearance({
        fontSize,
        fontName,
        fontColor
      });
    }
    return [this._defaultAppearance, fontSize, height / numberOfLines];
  }
  _renderText(text, font, fontSize, totalWidth, alignment, prevInfo, hPadding, vPadding) {
    let shift;
    if (alignment === 1) {
      const width = this._getTextWidth(text, font) * fontSize;
      shift = (totalWidth - width) / 2;
    } else if (alignment === 2) {
      const width = this._getTextWidth(text, font) * fontSize;
      shift = totalWidth - width - hPadding;
    } else {
      shift = hPadding;
    }
    const shiftStr = numberToString(shift - prevInfo.shift);
    prevInfo.shift = shift;
    vPadding = numberToString(vPadding);
    return \`\${shiftStr} \${vPadding} Td (\${escapeString(text)}) Tj\`;
  }
  _getSaveFieldResources(xref) {
    const {
      localResources,
      appearanceResources,
      acroFormResources
    } = this._fieldResources;
    const fontName = this.data.defaultAppearanceData?.fontName;
    if (!fontName) {
      return localResources || Dict.empty;
    }
    for (const resources of [localResources, appearanceResources]) {
      if (resources instanceof Dict) {
        const localFont = resources.get("Font");
        if (localFont instanceof Dict && localFont.has(fontName)) {
          return resources;
        }
      }
    }
    if (acroFormResources instanceof Dict) {
      const acroFormFont = acroFormResources.get("Font");
      if (acroFormFont instanceof Dict && acroFormFont.has(fontName)) {
        const subFontDict = new Dict(xref);
        subFontDict.set(fontName, acroFormFont.getRaw(fontName));
        const subResourcesDict = new Dict(xref);
        subResourcesDict.set("Font", subFontDict);
        return Dict.merge({
          xref,
          dictArray: [subResourcesDict, localResources],
          mergeSubDicts: true
        });
      }
    }
    return localResources || Dict.empty;
  }
  getFieldObject() {
    return null;
  }
}
class TextWidgetAnnotation extends WidgetAnnotation {
  constructor(params) {
    super(params);
    const {
      dict
    } = params;
    if (dict.has("PMD")) {
      this.flags |= AnnotationFlag.HIDDEN;
      this.data.hidden = true;
      warn("Barcodes are not supported");
    }
    this.data.hasOwnCanvas = this.data.readOnly && !this.data.noHTML;
    this._hasText = true;
    if (typeof this.data.fieldValue !== "string") {
      this.data.fieldValue = "";
    }
    let alignment = getInheritableProperty({
      dict,
      key: "Q"
    });
    if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {
      alignment = null;
    }
    this.data.textAlignment = alignment;
    let maximumLength = getInheritableProperty({
      dict,
      key: "MaxLen"
    });
    if (!Number.isInteger(maximumLength) || maximumLength < 0) {
      maximumLength = 0;
    }
    this.data.maxLen = maximumLength;
    this.data.multiLine = this.hasFieldFlag(AnnotationFieldFlag.MULTILINE);
    this.data.comb = this.hasFieldFlag(AnnotationFieldFlag.COMB) && !this.data.multiLine && !this.data.password && !this.hasFieldFlag(AnnotationFieldFlag.FILESELECT) && this.data.maxLen !== 0;
    this.data.doNotScroll = this.hasFieldFlag(AnnotationFieldFlag.DONOTSCROLL);
  }
  get hasTextContent() {
    return !!this.appearance && !this._needAppearances;
  }
  _getCombAppearance(defaultAppearance, font, text, fontSize, width, height, hPadding, vPadding, descent, lineHeight, annotationStorage) {
    const combWidth = width / this.data.maxLen;
    const colors = this.getBorderAndBackgroundAppearances(annotationStorage);
    const buf = [];
    const positions = font.getCharPositions(text);
    for (const [start, end] of positions) {
      buf.push(\`(\${escapeString(text.substring(start, end))}) Tj\`);
    }
    const renderedComb = buf.join(\` \${numberToString(combWidth)} 0 Td \`);
    return \`/Tx BMC q \${colors}BT \` + defaultAppearance + \` 1 0 0 1 \${numberToString(hPadding)} \${numberToString(vPadding + descent)} Tm \${renderedComb}\` + " ET Q EMC";
  }
  _getMultilineAppearance(defaultAppearance, lines, font, fontSize, width, height, alignment, hPadding, vPadding, descent, lineHeight, annotationStorage) {
    const buf = [];
    const totalWidth = width - 2 * hPadding;
    const prevInfo = {
      shift: 0
    };
    for (let i = 0, ii = lines.length; i < ii; i++) {
      const line = lines[i];
      const chunks = this._splitLine(line, font, fontSize, totalWidth);
      for (let j = 0, jj = chunks.length; j < jj; j++) {
        const chunk = chunks[j];
        const vShift = i === 0 && j === 0 ? -vPadding - (lineHeight - descent) : -lineHeight;
        buf.push(this._renderText(chunk, font, fontSize, width, alignment, prevInfo, hPadding, vShift));
      }
    }
    const colors = this.getBorderAndBackgroundAppearances(annotationStorage);
    const renderedText = buf.join("\\n");
    return \`/Tx BMC q \${colors}BT \` + defaultAppearance + \` 1 0 0 1 0 \${numberToString(height)} Tm \${renderedText}\` + " ET Q EMC";
  }
  _splitLine(line, font, fontSize, width, cache = {}) {
    line = cache.line || line;
    const glyphs = cache.glyphs || font.charsToGlyphs(line);
    if (glyphs.length <= 1) {
      return [line];
    }
    const positions = cache.positions || font.getCharPositions(line);
    const scale = fontSize / 1000;
    const chunks = [];
    let lastSpacePosInStringStart = -1,
      lastSpacePosInStringEnd = -1,
      lastSpacePos = -1,
      startChunk = 0,
      currentWidth = 0;
    for (let i = 0, ii = glyphs.length; i < ii; i++) {
      const [start, end] = positions[i];
      const glyph = glyphs[i];
      const glyphWidth = glyph.width * scale;
      if (glyph.unicode === " ") {
        if (currentWidth + glyphWidth > width) {
          chunks.push(line.substring(startChunk, start));
          startChunk = start;
          currentWidth = glyphWidth;
          lastSpacePosInStringStart = -1;
          lastSpacePos = -1;
        } else {
          currentWidth += glyphWidth;
          lastSpacePosInStringStart = start;
          lastSpacePosInStringEnd = end;
          lastSpacePos = i;
        }
      } else if (currentWidth + glyphWidth > width) {
        if (lastSpacePosInStringStart !== -1) {
          chunks.push(line.substring(startChunk, lastSpacePosInStringEnd));
          startChunk = lastSpacePosInStringEnd;
          i = lastSpacePos + 1;
          lastSpacePosInStringStart = -1;
          currentWidth = 0;
        } else {
          chunks.push(line.substring(startChunk, start));
          startChunk = start;
          currentWidth = glyphWidth;
        }
      } else {
        currentWidth += glyphWidth;
      }
    }
    if (startChunk < line.length) {
      chunks.push(line.substring(startChunk, line.length));
    }
    return chunks;
  }
  async extractTextContent(evaluator, task, viewBox) {
    await super.extractTextContent(evaluator, task, viewBox);
    const text = this.data.textContent;
    if (!text) {
      return;
    }
    const allText = text.join("\\n");
    if (allText === this.data.fieldValue) {
      return;
    }
    const regex = allText.replaceAll(/([.*+?^\${}()|[\\]\\\\])|(\\s+)/g, (_m, p1) => p1 ? \`\\\\\${p1}\` : "\\\\s+");
    if (new RegExp(\`^\\\\s*\${regex}\\\\s*$\`).test(this.data.fieldValue)) {
      this.data.textContent = this.data.fieldValue.split("\\n");
    }
  }
  getFieldObject() {
    return {
      id: this.data.id,
      value: this.data.fieldValue,
      defaultValue: this.data.defaultFieldValue || "",
      multiline: this.data.multiLine,
      password: this.data.password,
      charLimit: this.data.maxLen,
      comb: this.data.comb,
      editable: !this.data.readOnly,
      hidden: this.data.hidden,
      name: this.data.fieldName,
      rect: this.data.rect,
      actions: this.data.actions,
      page: this.data.pageIndex,
      strokeColor: this.data.borderColor,
      fillColor: this.data.backgroundColor,
      rotation: this.rotation,
      type: "text"
    };
  }
}
class ButtonWidgetAnnotation extends WidgetAnnotation {
  constructor(params) {
    super(params);
    this.checkedAppearance = null;
    this.uncheckedAppearance = null;
    const isRadio = this.hasFieldFlag(AnnotationFieldFlag.RADIO),
      isPushButton = this.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);
    this.data.checkBox = !isRadio && !isPushButton;
    this.data.radioButton = isRadio && !isPushButton;
    this.data.pushButton = isPushButton;
    this.data.isTooltipOnly = false;
    if (this.data.checkBox) {
      this._processCheckBox(params);
    } else if (this.data.radioButton) {
      this._processRadioButton(params);
    } else if (this.data.pushButton) {
      this.data.hasOwnCanvas = true;
      this.data.noHTML = false;
      this._processPushButton(params);
    } else {
      warn("Invalid field flags for button widget annotation");
    }
  }
  async getOperatorList(evaluator, task, intent, annotationStorage) {
    if (this.data.pushButton) {
      return super.getOperatorList(evaluator, task, intent, false, annotationStorage);
    }
    let value = null;
    let rotation = null;
    if (annotationStorage) {
      const storageEntry = annotationStorage.get(this.data.id);
      value = storageEntry ? storageEntry.value : null;
      rotation = storageEntry ? storageEntry.rotation : null;
    }
    if (value === null && this.appearance) {
      return super.getOperatorList(evaluator, task, intent, annotationStorage);
    }
    if (value === null || value === undefined) {
      value = this.data.checkBox ? this.data.fieldValue === this.data.exportValue : this.data.fieldValue === this.data.buttonValue;
    }
    const appearance = value ? this.checkedAppearance : this.uncheckedAppearance;
    if (appearance) {
      const savedAppearance = this.appearance;
      const savedMatrix = lookupMatrix(appearance.dict.getArray("Matrix"), IDENTITY_MATRIX);
      if (rotation) {
        appearance.dict.set("Matrix", this.getRotationMatrix(annotationStorage));
      }
      this.appearance = appearance;
      const operatorList = super.getOperatorList(evaluator, task, intent, annotationStorage);
      this.appearance = savedAppearance;
      appearance.dict.set("Matrix", savedMatrix);
      return operatorList;
    }
    return {
      opList: new OperatorList(),
      separateForm: false,
      separateCanvas: false
    };
  }
  async save(evaluator, task, annotationStorage, changes) {
    if (this.data.checkBox) {
      this._saveCheckbox(evaluator, task, annotationStorage, changes);
      return;
    }
    if (this.data.radioButton) {
      this._saveRadioButton(evaluator, task, annotationStorage, changes);
    }
  }
  async _saveCheckbox(evaluator, task, annotationStorage, changes) {
    if (!annotationStorage) {
      return;
    }
    const storageEntry = annotationStorage.get(this.data.id);
    const flags = this._buildFlags(storageEntry?.noView, storageEntry?.noPrint);
    let rotation = storageEntry?.rotation,
      value = storageEntry?.value;
    if (rotation === undefined && flags === undefined) {
      if (value === undefined) {
        return;
      }
      const defaultValue = this.data.fieldValue === this.data.exportValue;
      if (defaultValue === value) {
        return;
      }
    }
    let dict = evaluator.xref.fetchIfRef(this.ref);
    if (!(dict instanceof Dict)) {
      return;
    }
    dict = dict.clone();
    if (rotation === undefined) {
      rotation = this.rotation;
    }
    if (value === undefined) {
      value = this.data.fieldValue === this.data.exportValue;
    }
    const xfa = {
      path: this.data.fieldName,
      value: value ? this.data.exportValue : ""
    };
    const name = Name.get(value ? this.data.exportValue : "Off");
    this.setValue(dict, name, evaluator.xref, changes);
    dict.set("AS", name);
    dict.set("M", \`D:\${getModificationDate()}\`);
    if (flags !== undefined) {
      dict.set("F", flags);
    }
    const maybeMK = this._getMKDict(rotation);
    if (maybeMK) {
      dict.set("MK", maybeMK);
    }
    changes.put(this.ref, {
      data: dict,
      xfa,
      needAppearances: false
    });
  }
  async _saveRadioButton(evaluator, task, annotationStorage, changes) {
    if (!annotationStorage) {
      return;
    }
    const storageEntry = annotationStorage.get(this.data.id);
    const flags = this._buildFlags(storageEntry?.noView, storageEntry?.noPrint);
    let rotation = storageEntry?.rotation,
      value = storageEntry?.value;
    if (rotation === undefined && flags === undefined) {
      if (value === undefined) {
        return;
      }
      const defaultValue = this.data.fieldValue === this.data.buttonValue;
      if (defaultValue === value) {
        return;
      }
    }
    let dict = evaluator.xref.fetchIfRef(this.ref);
    if (!(dict instanceof Dict)) {
      return;
    }
    dict = dict.clone();
    if (value === undefined) {
      value = this.data.fieldValue === this.data.buttonValue;
    }
    if (rotation === undefined) {
      rotation = this.rotation;
    }
    const xfa = {
      path: this.data.fieldName,
      value: value ? this.data.buttonValue : ""
    };
    const name = Name.get(value ? this.data.buttonValue : "Off");
    if (value) {
      this.setValue(dict, name, evaluator.xref, changes);
    }
    dict.set("AS", name);
    dict.set("M", \`D:\${getModificationDate()}\`);
    if (flags !== undefined) {
      dict.set("F", flags);
    }
    const maybeMK = this._getMKDict(rotation);
    if (maybeMK) {
      dict.set("MK", maybeMK);
    }
    changes.put(this.ref, {
      data: dict,
      xfa,
      needAppearances: false
    });
  }
  _getDefaultCheckedAppearance(params, type) {
    const {
      width,
      height
    } = this;
    const bbox = [0, 0, width, height];
    const FONT_RATIO = 0.8;
    const fontSize = Math.min(width, height) * FONT_RATIO;
    let metrics, char;
    if (type === "check") {
      metrics = {
        width: 0.755 * fontSize,
        height: 0.705 * fontSize
      };
      char = "\\x33";
    } else if (type === "disc") {
      metrics = {
        width: 0.791 * fontSize,
        height: 0.705 * fontSize
      };
      char = "\\x6C";
    } else {
      unreachable(\`_getDefaultCheckedAppearance - unsupported type: \${type}\`);
    }
    const xShift = numberToString((width - metrics.width) / 2);
    const yShift = numberToString((height - metrics.height) / 2);
    const appearance = \`q BT /PdfJsZaDb \${fontSize} Tf 0 g \${xShift} \${yShift} Td (\${char}) Tj ET Q\`;
    const appearanceStreamDict = new Dict(params.xref);
    appearanceStreamDict.set("FormType", 1);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", bbox);
    appearanceStreamDict.set("Matrix", [1, 0, 0, 1, 0, 0]);
    appearanceStreamDict.set("Length", appearance.length);
    const resources = new Dict(params.xref);
    const font = new Dict(params.xref);
    font.set("PdfJsZaDb", this.fallbackFontDict);
    resources.set("Font", font);
    appearanceStreamDict.set("Resources", resources);
    this.checkedAppearance = new StringStream(appearance);
    this.checkedAppearance.dict = appearanceStreamDict;
    this._streams.push(this.checkedAppearance);
  }
  _processCheckBox(params) {
    const customAppearance = params.dict.get("AP");
    if (!(customAppearance instanceof Dict)) {
      return;
    }
    const normalAppearance = customAppearance.get("N");
    if (!(normalAppearance instanceof Dict)) {
      return;
    }
    const asValue = this._decodeFormValue(params.dict.get("AS"));
    if (typeof asValue === "string") {
      this.data.fieldValue = asValue;
    }
    const yes = this.data.fieldValue !== null && this.data.fieldValue !== "Off" ? this.data.fieldValue : "Yes";
    const exportValues = normalAppearance.getKeys();
    if (exportValues.length === 0) {
      exportValues.push("Off", yes);
    } else if (exportValues.length === 1) {
      if (exportValues[0] === "Off") {
        exportValues.push(yes);
      } else {
        exportValues.unshift("Off");
      }
    } else if (exportValues.includes(yes)) {
      exportValues.length = 0;
      exportValues.push("Off", yes);
    } else {
      const otherYes = exportValues.find(v => v !== "Off");
      exportValues.length = 0;
      exportValues.push("Off", otherYes);
    }
    if (!exportValues.includes(this.data.fieldValue)) {
      this.data.fieldValue = "Off";
    }
    this.data.exportValue = exportValues[1];
    const checkedAppearance = normalAppearance.get(this.data.exportValue);
    this.checkedAppearance = checkedAppearance instanceof BaseStream ? checkedAppearance : null;
    const uncheckedAppearance = normalAppearance.get("Off");
    this.uncheckedAppearance = uncheckedAppearance instanceof BaseStream ? uncheckedAppearance : null;
    if (this.checkedAppearance) {
      this._streams.push(this.checkedAppearance);
    } else {
      this._getDefaultCheckedAppearance(params, "check");
    }
    if (this.uncheckedAppearance) {
      this._streams.push(this.uncheckedAppearance);
    }
    this._fallbackFontDict = this.fallbackFontDict;
    if (this.data.defaultFieldValue === null) {
      this.data.defaultFieldValue = "Off";
    }
  }
  _processRadioButton(params) {
    this.data.buttonValue = null;
    const fieldParent = params.dict.get("Parent");
    if (fieldParent instanceof Dict) {
      this.parent = params.dict.getRaw("Parent");
      const fieldParentValue = fieldParent.get("V");
      if (fieldParentValue instanceof Name) {
        this.data.fieldValue = this._decodeFormValue(fieldParentValue);
      }
    }
    const appearanceStates = params.dict.get("AP");
    if (!(appearanceStates instanceof Dict)) {
      return;
    }
    const normalAppearance = appearanceStates.get("N");
    if (!(normalAppearance instanceof Dict)) {
      return;
    }
    for (const key of normalAppearance.getKeys()) {
      if (key !== "Off") {
        this.data.buttonValue = this._decodeFormValue(key);
        break;
      }
    }
    const checkedAppearance = normalAppearance.get(this.data.buttonValue);
    this.checkedAppearance = checkedAppearance instanceof BaseStream ? checkedAppearance : null;
    const uncheckedAppearance = normalAppearance.get("Off");
    this.uncheckedAppearance = uncheckedAppearance instanceof BaseStream ? uncheckedAppearance : null;
    if (this.checkedAppearance) {
      this._streams.push(this.checkedAppearance);
    } else {
      this._getDefaultCheckedAppearance(params, "disc");
    }
    if (this.uncheckedAppearance) {
      this._streams.push(this.uncheckedAppearance);
    }
    this._fallbackFontDict = this.fallbackFontDict;
    if (this.data.defaultFieldValue === null) {
      this.data.defaultFieldValue = "Off";
    }
  }
  _processPushButton(params) {
    const {
      dict,
      annotationGlobals
    } = params;
    if (!dict.has("A") && !dict.has("AA") && !this.data.alternativeText) {
      warn("Push buttons without action dictionaries are not supported");
      return;
    }
    this.data.isTooltipOnly = !dict.has("A") && !dict.has("AA");
    Catalog.parseDestDictionary({
      destDict: dict,
      resultObj: this.data,
      docBaseUrl: annotationGlobals.baseUrl,
      docAttachments: annotationGlobals.attachments
    });
  }
  getFieldObject() {
    let type = "button";
    let exportValues;
    if (this.data.checkBox) {
      type = "checkbox";
      exportValues = this.data.exportValue;
    } else if (this.data.radioButton) {
      type = "radiobutton";
      exportValues = this.data.buttonValue;
    }
    return {
      id: this.data.id,
      value: this.data.fieldValue || "Off",
      defaultValue: this.data.defaultFieldValue,
      exportValues,
      editable: !this.data.readOnly,
      name: this.data.fieldName,
      rect: this.data.rect,
      hidden: this.data.hidden,
      actions: this.data.actions,
      page: this.data.pageIndex,
      strokeColor: this.data.borderColor,
      fillColor: this.data.backgroundColor,
      rotation: this.rotation,
      type
    };
  }
  get fallbackFontDict() {
    const dict = new Dict();
    dict.set("BaseFont", Name.get("ZapfDingbats"));
    dict.set("Type", Name.get("FallbackType"));
    dict.set("Subtype", Name.get("FallbackType"));
    dict.set("Encoding", Name.get("ZapfDingbatsEncoding"));
    return shadow(this, "fallbackFontDict", dict);
  }
}
class ChoiceWidgetAnnotation extends WidgetAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.indices = dict.getArray("I");
    this.hasIndices = Array.isArray(this.indices) && this.indices.length > 0;
    this.data.options = [];
    const options = getInheritableProperty({
      dict,
      key: "Opt"
    });
    if (Array.isArray(options)) {
      for (let i = 0, ii = options.length; i < ii; i++) {
        const option = xref.fetchIfRef(options[i]);
        const isOptionArray = Array.isArray(option);
        this.data.options[i] = {
          exportValue: this._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[0]) : option),
          displayValue: this._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[1]) : option)
        };
      }
    }
    if (!this.hasIndices) {
      if (typeof this.data.fieldValue === "string") {
        this.data.fieldValue = [this.data.fieldValue];
      } else if (!this.data.fieldValue) {
        this.data.fieldValue = [];
      }
    } else {
      this.data.fieldValue = [];
      const ii = this.data.options.length;
      for (const i of this.indices) {
        if (Number.isInteger(i) && i >= 0 && i < ii) {
          this.data.fieldValue.push(this.data.options[i].exportValue);
        }
      }
    }
    if (this.data.options.length === 0 && this.data.fieldValue.length > 0) {
      this.data.options = this.data.fieldValue.map(value => ({
        exportValue: value,
        displayValue: value
      }));
    }
    this.data.combo = this.hasFieldFlag(AnnotationFieldFlag.COMBO);
    this.data.multiSelect = this.hasFieldFlag(AnnotationFieldFlag.MULTISELECT);
    this._hasText = true;
  }
  getFieldObject() {
    const type = this.data.combo ? "combobox" : "listbox";
    const value = this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null;
    return {
      id: this.data.id,
      value,
      defaultValue: this.data.defaultFieldValue,
      editable: !this.data.readOnly,
      name: this.data.fieldName,
      rect: this.data.rect,
      numItems: this.data.fieldValue.length,
      multipleSelection: this.data.multiSelect,
      hidden: this.data.hidden,
      actions: this.data.actions,
      items: this.data.options,
      page: this.data.pageIndex,
      strokeColor: this.data.borderColor,
      fillColor: this.data.backgroundColor,
      rotation: this.rotation,
      type
    };
  }
  amendSavedDict(annotationStorage, dict) {
    if (!this.hasIndices) {
      return;
    }
    let values = annotationStorage?.get(this.data.id)?.value;
    if (!Array.isArray(values)) {
      values = [values];
    }
    const indices = [];
    const {
      options
    } = this.data;
    for (let i = 0, j = 0, ii = options.length; i < ii; i++) {
      if (options[i].exportValue === values[j]) {
        indices.push(i);
        j += 1;
      }
    }
    dict.set("I", indices);
  }
  async _getAppearance(evaluator, task, intent, annotationStorage) {
    if (this.data.combo) {
      return super._getAppearance(evaluator, task, intent, annotationStorage);
    }
    let exportedValue, rotation;
    const storageEntry = annotationStorage?.get(this.data.id);
    if (storageEntry) {
      rotation = storageEntry.rotation;
      exportedValue = storageEntry.value;
    }
    if (rotation === undefined && exportedValue === undefined && !this._needAppearances) {
      return null;
    }
    if (exportedValue === undefined) {
      exportedValue = this.data.fieldValue;
    } else if (!Array.isArray(exportedValue)) {
      exportedValue = [exportedValue];
    }
    const defaultPadding = 1;
    const defaultHPadding = 2;
    let {
      width: totalWidth,
      height: totalHeight
    } = this;
    if (rotation === 90 || rotation === 270) {
      [totalWidth, totalHeight] = [totalHeight, totalWidth];
    }
    const lineCount = this.data.options.length;
    const valueIndices = [];
    for (let i = 0; i < lineCount; i++) {
      const {
        exportValue
      } = this.data.options[i];
      if (exportedValue.includes(exportValue)) {
        valueIndices.push(i);
      }
    }
    if (!this._defaultAppearance) {
      this.data.defaultAppearanceData = parseDefaultAppearance(this._defaultAppearance = "/Helvetica 0 Tf 0 g");
    }
    const font = await WidgetAnnotation._getFontData(evaluator, task, this.data.defaultAppearanceData, this._fieldResources.mergedResources);
    let defaultAppearance;
    let {
      fontSize
    } = this.data.defaultAppearanceData;
    if (!fontSize) {
      const lineHeight = (totalHeight - defaultPadding) / lineCount;
      let lineWidth = -1;
      let value;
      for (const {
        displayValue
      } of this.data.options) {
        const width = this._getTextWidth(displayValue, font);
        if (width > lineWidth) {
          lineWidth = width;
          value = displayValue;
        }
      }
      [defaultAppearance, fontSize] = this._computeFontSize(lineHeight, totalWidth - 2 * defaultHPadding, value, font, -1);
    } else {
      defaultAppearance = this._defaultAppearance;
    }
    const lineHeight = fontSize * LINE_FACTOR;
    const vPadding = (lineHeight - fontSize) / 2;
    const numberOfVisibleLines = Math.floor(totalHeight / lineHeight);
    let firstIndex = 0;
    if (valueIndices.length > 0) {
      const minIndex = Math.min(...valueIndices);
      const maxIndex = Math.max(...valueIndices);
      firstIndex = Math.max(0, maxIndex - numberOfVisibleLines + 1);
      if (firstIndex > minIndex) {
        firstIndex = minIndex;
      }
    }
    const end = Math.min(firstIndex + numberOfVisibleLines + 1, lineCount);
    const buf = ["/Tx BMC q", \`1 1 \${totalWidth} \${totalHeight} re W n\`];
    if (valueIndices.length) {
      buf.push("0.600006 0.756866 0.854904 rg");
      for (const index of valueIndices) {
        if (firstIndex <= index && index < end) {
          buf.push(\`1 \${totalHeight - (index - firstIndex + 1) * lineHeight} \${totalWidth} \${lineHeight} re f\`);
        }
      }
    }
    buf.push("BT", defaultAppearance, \`1 0 0 1 0 \${totalHeight} Tm\`);
    const prevInfo = {
      shift: 0
    };
    for (let i = firstIndex; i < end; i++) {
      const {
        displayValue
      } = this.data.options[i];
      const vpadding = i === firstIndex ? vPadding : 0;
      buf.push(this._renderText(displayValue, font, fontSize, totalWidth, 0, prevInfo, defaultHPadding, -lineHeight + vpadding));
    }
    buf.push("ET Q EMC");
    return buf.join("\\n");
  }
}
class SignatureWidgetAnnotation extends WidgetAnnotation {
  constructor(params) {
    super(params);
    this.data.fieldValue = null;
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.noHTML = !this.data.hasOwnCanvas;
  }
  getFieldObject() {
    return {
      id: this.data.id,
      value: null,
      page: this.data.pageIndex,
      type: "signature"
    };
  }
}
class TextAnnotation extends MarkupAnnotation {
  constructor(params) {
    const DEFAULT_ICON_SIZE = 22;
    super(params);
    this.data.noRotate = true;
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.noHTML = false;
    const {
      dict
    } = params;
    this.data.annotationType = AnnotationType.TEXT;
    if (this.data.hasAppearance) {
      this.data.name = "NoIcon";
    } else {
      this.data.rect[1] = this.data.rect[3] - DEFAULT_ICON_SIZE;
      this.data.rect[2] = this.data.rect[0] + DEFAULT_ICON_SIZE;
      this.data.name = dict.has("Name") ? dict.get("Name").name : "Note";
    }
    if (dict.has("State")) {
      this.data.state = dict.get("State") || null;
      this.data.stateModel = dict.get("StateModel") || null;
    } else {
      this.data.state = null;
      this.data.stateModel = null;
    }
  }
}
class LinkAnnotation extends Annotation {
  constructor(params) {
    super(params);
    const {
      dict,
      annotationGlobals
    } = params;
    this.data.annotationType = AnnotationType.LINK;
    this.data.noHTML = false;
    const quadPoints = getQuadPoints(dict, this.rectangle);
    if (quadPoints) {
      this.data.quadPoints = quadPoints;
    }
    this.data.borderColor ||= this.data.color;
    Catalog.parseDestDictionary({
      destDict: dict,
      resultObj: this.data,
      docBaseUrl: annotationGlobals.baseUrl,
      docAttachments: annotationGlobals.attachments
    });
  }
}
class PopupAnnotation extends Annotation {
  constructor(params) {
    super(params);
    const {
      dict
    } = params;
    this.data.annotationType = AnnotationType.POPUP;
    this.data.noHTML = false;
    if (this.width === 0 || this.height === 0) {
      this.data.rect = null;
    }
    let parentItem = dict.get("Parent");
    if (!parentItem) {
      warn("Popup annotation has a missing or invalid parent annotation.");
      return;
    }
    this.data.parentRect = lookupNormalRect(parentItem.getArray("Rect"), null);
    const rt = parentItem.get("RT");
    if (isName(rt, AnnotationReplyType.GROUP)) {
      parentItem = parentItem.get("IRT");
    }
    if (!parentItem.has("M")) {
      this.data.modificationDate = null;
    } else {
      this.setModificationDate(parentItem.get("M"));
      this.data.modificationDate = this.modificationDate;
    }
    if (!parentItem.has("C")) {
      this.data.color = null;
    } else {
      this.setColor(parentItem.getArray("C"));
      this.data.color = this.color;
    }
    if (!this.viewable) {
      const parentFlags = parentItem.get("F");
      if (this._isViewable(parentFlags)) {
        this.setFlags(parentFlags);
      }
    }
    this.setTitle(parentItem.get("T"));
    this.data.titleObj = this._title;
    this.setContents(parentItem.get("Contents"));
    this.data.contentsObj = this._contents;
    if (parentItem.has("RC")) {
      this.data.richText = XFAFactory.getRichTextAsHtml(parentItem.get("RC"));
    }
    this.data.open = !!dict.get("Open");
  }
}
class FreeTextAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.isEditable = !this.data.noHTML;
    this.data.noHTML = false;
    const {
      annotationGlobals,
      evaluatorOptions,
      xref
    } = params;
    this.data.annotationType = AnnotationType.FREETEXT;
    this.setDefaultAppearance(params);
    this._hasAppearance = !!this.appearance;
    if (this._hasAppearance) {
      const {
        fontColor,
        fontSize
      } = parseAppearanceStream(this.appearance, evaluatorOptions, xref, annotationGlobals.globalColorSpaceCache);
      this.data.defaultAppearanceData.fontColor = fontColor;
      this.data.defaultAppearanceData.fontSize = fontSize || 10;
    } else {
      this.data.defaultAppearanceData.fontSize ||= 10;
      const {
        fontColor,
        fontSize
      } = this.data.defaultAppearanceData;
      if (this._contents.str) {
        this.data.textContent = this._contents.str.split(/\\r\\n?|\\n/).map(line => line.trimEnd());
        const {
          coords,
          bbox,
          matrix
        } = FakeUnicodeFont.getFirstPositionInfo(this.rectangle, this.rotation, fontSize);
        this.data.textPosition = this._transformPoint(coords, bbox, matrix);
      }
      if (this._isOffscreenCanvasSupported) {
        const strokeAlpha = params.dict.get("CA");
        const fakeUnicodeFont = new FakeUnicodeFont(xref, "sans-serif");
        this.appearance = fakeUnicodeFont.createAppearance(this._contents.str, this.rectangle, this.rotation, fontSize, fontColor, strokeAlpha);
        this._streams.push(this.appearance);
      } else {
        warn("FreeTextAnnotation: OffscreenCanvas is not supported, annotation may not render correctly.");
      }
    }
  }
  get hasTextContent() {
    return this._hasAppearance;
  }
  static createNewDict(annotation, xref, {
    apRef,
    ap
  }) {
    const {
      color,
      fontSize,
      oldAnnotation,
      rect,
      rotation,
      user,
      value
    } = annotation;
    const freetext = oldAnnotation || new Dict(xref);
    freetext.set("Type", Name.get("Annot"));
    freetext.set("Subtype", Name.get("FreeText"));
    if (oldAnnotation) {
      freetext.set("M", \`D:\${getModificationDate()}\`);
      freetext.delete("RC");
    } else {
      freetext.set("CreationDate", \`D:\${getModificationDate()}\`);
    }
    freetext.set("Rect", rect);
    const da = \`/Helv \${fontSize} Tf \${getPdfColor(color, true)}\`;
    freetext.set("DA", da);
    freetext.set("Contents", stringToAsciiOrUTF16BE(value));
    freetext.set("F", 4);
    freetext.set("Border", [0, 0, 0]);
    freetext.set("Rotate", rotation);
    if (user) {
      freetext.set("T", stringToAsciiOrUTF16BE(user));
    }
    if (apRef || ap) {
      const n = new Dict(xref);
      freetext.set("AP", n);
      if (apRef) {
        n.set("N", apRef);
      } else {
        n.set("N", ap);
      }
    }
    return freetext;
  }
  static async createNewAppearanceStream(annotation, xref, params) {
    const {
      baseFontRef,
      evaluator,
      task
    } = params;
    const {
      color,
      fontSize,
      rect,
      rotation,
      value
    } = annotation;
    const resources = new Dict(xref);
    const font = new Dict(xref);
    if (baseFontRef) {
      font.set("Helv", baseFontRef);
    } else {
      const baseFont = new Dict(xref);
      baseFont.set("BaseFont", Name.get("Helvetica"));
      baseFont.set("Type", Name.get("Font"));
      baseFont.set("Subtype", Name.get("Type1"));
      baseFont.set("Encoding", Name.get("WinAnsiEncoding"));
      font.set("Helv", baseFont);
    }
    resources.set("Font", font);
    const helv = await WidgetAnnotation._getFontData(evaluator, task, {
      fontName: "Helv",
      fontSize
    }, resources);
    const [x1, y1, x2, y2] = rect;
    let w = x2 - x1;
    let h = y2 - y1;
    if (rotation % 180 !== 0) {
      [w, h] = [h, w];
    }
    const lines = value.split("\\n");
    const scale = fontSize / 1000;
    let totalWidth = -Infinity;
    const encodedLines = [];
    for (let line of lines) {
      const encoded = helv.encodeString(line);
      if (encoded.length > 1) {
        return null;
      }
      line = encoded.join("");
      encodedLines.push(line);
      let lineWidth = 0;
      const glyphs = helv.charsToGlyphs(line);
      for (const glyph of glyphs) {
        lineWidth += glyph.width * scale;
      }
      totalWidth = Math.max(totalWidth, lineWidth);
    }
    let hscale = 1;
    if (totalWidth > w) {
      hscale = w / totalWidth;
    }
    let vscale = 1;
    const lineHeight = LINE_FACTOR * fontSize;
    const lineAscent = (LINE_FACTOR - LINE_DESCENT_FACTOR) * fontSize;
    const totalHeight = lineHeight * lines.length;
    if (totalHeight > h) {
      vscale = h / totalHeight;
    }
    const fscale = Math.min(hscale, vscale);
    const newFontSize = fontSize * fscale;
    let firstPoint, clipBox, matrix;
    switch (rotation) {
      case 0:
        matrix = [1, 0, 0, 1];
        clipBox = [rect[0], rect[1], w, h];
        firstPoint = [rect[0], rect[3] - lineAscent];
        break;
      case 90:
        matrix = [0, 1, -1, 0];
        clipBox = [rect[1], -rect[2], w, h];
        firstPoint = [rect[1], -rect[0] - lineAscent];
        break;
      case 180:
        matrix = [-1, 0, 0, -1];
        clipBox = [-rect[2], -rect[3], w, h];
        firstPoint = [-rect[2], -rect[1] - lineAscent];
        break;
      case 270:
        matrix = [0, -1, 1, 0];
        clipBox = [-rect[3], rect[0], w, h];
        firstPoint = [-rect[3], rect[2] - lineAscent];
        break;
    }
    const buffer = ["q", \`\${matrix.join(" ")} 0 0 cm\`, \`\${clipBox.join(" ")} re W n\`, \`BT\`, \`\${getPdfColor(color, true)}\`, \`0 Tc /Helv \${numberToString(newFontSize)} Tf\`];
    buffer.push(\`\${firstPoint.join(" ")} Td (\${escapeString(encodedLines[0])}) Tj\`);
    const vShift = numberToString(lineHeight);
    for (let i = 1, ii = encodedLines.length; i < ii; i++) {
      const line = encodedLines[i];
      buffer.push(\`0 -\${vShift} Td (\${escapeString(line)}) Tj\`);
    }
    buffer.push("ET", "Q");
    const appearance = buffer.join("\\n");
    const appearanceStreamDict = new Dict(xref);
    appearanceStreamDict.set("FormType", 1);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", rect);
    appearanceStreamDict.set("Resources", resources);
    appearanceStreamDict.set("Matrix", [1, 0, 0, 1, -rect[0], -rect[1]]);
    const ap = new StringStream(appearance);
    ap.dict = appearanceStreamDict;
    return ap;
  }
}
class LineAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.LINE;
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.noHTML = false;
    const lineCoordinates = lookupRect(dict.getArray("L"), [0, 0, 0, 0]);
    this.data.lineCoordinates = Util.normalizeRect(lineCoordinates);
    this.setLineEndings(dict.getArray("LE"));
    this.data.lineEndings = this.lineEndings;
    if (!this.appearance) {
      const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
      const strokeAlpha = dict.get("CA");
      const interiorColor = getRgbColor(dict.getArray("IC"), null);
      const fillColor = interiorColor ? getPdfColorArray(interiorColor) : null;
      const fillAlpha = fillColor ? strokeAlpha : null;
      const borderWidth = this.borderStyle.width || 1,
        borderAdjust = 2 * borderWidth;
      const bbox = [this.data.lineCoordinates[0] - borderAdjust, this.data.lineCoordinates[1] - borderAdjust, this.data.lineCoordinates[2] + borderAdjust, this.data.lineCoordinates[3] + borderAdjust];
      if (!Util.intersect(this.rectangle, bbox)) {
        this.rectangle = bbox;
      }
      this._setDefaultAppearance({
        xref,
        extra: \`\${borderWidth} w\`,
        strokeColor,
        fillColor,
        strokeAlpha,
        fillAlpha,
        pointsCallback: (buffer, points) => {
          buffer.push(\`\${lineCoordinates[0]} \${lineCoordinates[1]} m\`, \`\${lineCoordinates[2]} \${lineCoordinates[3]} l\`, "S");
          return [points[0] - borderWidth, points[7] - borderWidth, points[2] + borderWidth, points[3] + borderWidth];
        }
      });
    }
  }
}
class SquareAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.SQUARE;
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.noHTML = false;
    if (!this.appearance) {
      const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
      const strokeAlpha = dict.get("CA");
      const interiorColor = getRgbColor(dict.getArray("IC"), null);
      const fillColor = interiorColor ? getPdfColorArray(interiorColor) : null;
      const fillAlpha = fillColor ? strokeAlpha : null;
      if (this.borderStyle.width === 0 && !fillColor) {
        return;
      }
      this._setDefaultAppearance({
        xref,
        extra: \`\${this.borderStyle.width} w\`,
        strokeColor,
        fillColor,
        strokeAlpha,
        fillAlpha,
        pointsCallback: (buffer, points) => {
          const x = points[4] + this.borderStyle.width / 2;
          const y = points[5] + this.borderStyle.width / 2;
          const width = points[6] - points[4] - this.borderStyle.width;
          const height = points[3] - points[7] - this.borderStyle.width;
          buffer.push(\`\${x} \${y} \${width} \${height} re\`);
          if (fillColor) {
            buffer.push("B");
          } else {
            buffer.push("S");
          }
          return [points[0], points[7], points[2], points[3]];
        }
      });
    }
  }
}
class CircleAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.CIRCLE;
    if (!this.appearance) {
      const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
      const strokeAlpha = dict.get("CA");
      const interiorColor = getRgbColor(dict.getArray("IC"), null);
      const fillColor = interiorColor ? getPdfColorArray(interiorColor) : null;
      const fillAlpha = fillColor ? strokeAlpha : null;
      if (this.borderStyle.width === 0 && !fillColor) {
        return;
      }
      const controlPointsDistance = 4 / 3 * Math.tan(Math.PI / (2 * 4));
      this._setDefaultAppearance({
        xref,
        extra: \`\${this.borderStyle.width} w\`,
        strokeColor,
        fillColor,
        strokeAlpha,
        fillAlpha,
        pointsCallback: (buffer, points) => {
          const x0 = points[0] + this.borderStyle.width / 2;
          const y0 = points[1] - this.borderStyle.width / 2;
          const x1 = points[6] - this.borderStyle.width / 2;
          const y1 = points[7] + this.borderStyle.width / 2;
          const xMid = x0 + (x1 - x0) / 2;
          const yMid = y0 + (y1 - y0) / 2;
          const xOffset = (x1 - x0) / 2 * controlPointsDistance;
          const yOffset = (y1 - y0) / 2 * controlPointsDistance;
          buffer.push(\`\${xMid} \${y1} m\`, \`\${xMid + xOffset} \${y1} \${x1} \${yMid + yOffset} \${x1} \${yMid} c\`, \`\${x1} \${yMid - yOffset} \${xMid + xOffset} \${y0} \${xMid} \${y0} c\`, \`\${xMid - xOffset} \${y0} \${x0} \${yMid - yOffset} \${x0} \${yMid} c\`, \`\${x0} \${yMid + yOffset} \${xMid - xOffset} \${y1} \${xMid} \${y1} c\`, "h");
          if (fillColor) {
            buffer.push("B");
          } else {
            buffer.push("S");
          }
          return [points[0], points[7], points[2], points[3]];
        }
      });
    }
  }
}
class PolylineAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.POLYLINE;
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.noHTML = false;
    this.data.vertices = null;
    if (!(this instanceof PolygonAnnotation)) {
      this.setLineEndings(dict.getArray("LE"));
      this.data.lineEndings = this.lineEndings;
    }
    const rawVertices = dict.getArray("Vertices");
    if (!isNumberArray(rawVertices, null)) {
      return;
    }
    const vertices = this.data.vertices = Float32Array.from(rawVertices);
    if (!this.appearance) {
      const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
      const strokeAlpha = dict.get("CA");
      const borderWidth = this.borderStyle.width || 1,
        borderAdjust = 2 * borderWidth;
      const bbox = [Infinity, Infinity, -Infinity, -Infinity];
      for (let i = 0, ii = vertices.length; i < ii; i += 2) {
        Util.rectBoundingBox(vertices[i] - borderAdjust, vertices[i + 1] - borderAdjust, vertices[i] + borderAdjust, vertices[i + 1] + borderAdjust, bbox);
      }
      if (!Util.intersect(this.rectangle, bbox)) {
        this.rectangle = bbox;
      }
      this._setDefaultAppearance({
        xref,
        extra: \`\${borderWidth} w\`,
        strokeColor,
        strokeAlpha,
        pointsCallback: (buffer, points) => {
          for (let i = 0, ii = vertices.length; i < ii; i += 2) {
            buffer.push(\`\${vertices[i]} \${vertices[i + 1]} \${i === 0 ? "m" : "l"}\`);
          }
          buffer.push("S");
          return [points[0], points[7], points[2], points[3]];
        }
      });
    }
  }
}
class PolygonAnnotation extends PolylineAnnotation {
  constructor(params) {
    super(params);
    this.data.annotationType = AnnotationType.POLYGON;
  }
}
class CaretAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    this.data.annotationType = AnnotationType.CARET;
  }
}
class InkAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.noHTML = false;
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.INK;
    this.data.inkLists = [];
    this.data.isEditable = !this.data.noHTML;
    this.data.noHTML = false;
    this.data.opacity = dict.get("CA") || 1;
    const rawInkLists = dict.getArray("InkList");
    if (!Array.isArray(rawInkLists)) {
      return;
    }
    for (let i = 0, ii = rawInkLists.length; i < ii; ++i) {
      if (!Array.isArray(rawInkLists[i])) {
        continue;
      }
      const inkList = new Float32Array(rawInkLists[i].length);
      this.data.inkLists.push(inkList);
      for (let j = 0, jj = rawInkLists[i].length; j < jj; j += 2) {
        const x = xref.fetchIfRef(rawInkLists[i][j]),
          y = xref.fetchIfRef(rawInkLists[i][j + 1]);
        if (typeof x === "number" && typeof y === "number") {
          inkList[j] = x;
          inkList[j + 1] = y;
        }
      }
    }
    if (!this.appearance) {
      const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
      const strokeAlpha = dict.get("CA");
      const borderWidth = this.borderStyle.width || 1,
        borderAdjust = 2 * borderWidth;
      const bbox = [Infinity, Infinity, -Infinity, -Infinity];
      for (const inkList of this.data.inkLists) {
        for (let i = 0, ii = inkList.length; i < ii; i += 2) {
          Util.rectBoundingBox(inkList[i] - borderAdjust, inkList[i + 1] - borderAdjust, inkList[i] + borderAdjust, inkList[i + 1] + borderAdjust, bbox);
        }
      }
      if (!Util.intersect(this.rectangle, bbox)) {
        this.rectangle = bbox;
      }
      this._setDefaultAppearance({
        xref,
        extra: \`\${borderWidth} w\`,
        strokeColor,
        strokeAlpha,
        pointsCallback: (buffer, points) => {
          for (const inkList of this.data.inkLists) {
            for (let i = 0, ii = inkList.length; i < ii; i += 2) {
              buffer.push(\`\${inkList[i]} \${inkList[i + 1]} \${i === 0 ? "m" : "l"}\`);
            }
            buffer.push("S");
          }
          return [points[0], points[7], points[2], points[3]];
        }
      });
    }
  }
  static createNewDict(annotation, xref, {
    apRef,
    ap
  }) {
    const {
      oldAnnotation,
      color,
      opacity,
      paths,
      outlines,
      rect,
      rotation,
      thickness,
      user
    } = annotation;
    const ink = oldAnnotation || new Dict(xref);
    ink.set("Type", Name.get("Annot"));
    ink.set("Subtype", Name.get("Ink"));
    ink.set(oldAnnotation ? "M" : "CreationDate", \`D:\${getModificationDate()}\`);
    ink.set("Rect", rect);
    ink.set("InkList", outlines?.points || paths.points);
    ink.set("F", 4);
    ink.set("Rotate", rotation);
    if (user) {
      ink.set("T", stringToAsciiOrUTF16BE(user));
    }
    if (outlines) {
      ink.set("IT", Name.get("InkHighlight"));
    }
    const bs = new Dict(xref);
    ink.set("BS", bs);
    bs.set("W", thickness);
    ink.set("C", getPdfColorArray(color));
    ink.set("CA", opacity);
    const n = new Dict(xref);
    ink.set("AP", n);
    if (apRef) {
      n.set("N", apRef);
    } else {
      n.set("N", ap);
    }
    return ink;
  }
  static async createNewAppearanceStream(annotation, xref, params) {
    if (annotation.outlines) {
      return this.createNewAppearanceStreamForHighlight(annotation, xref, params);
    }
    const {
      color,
      rect,
      paths,
      thickness,
      opacity
    } = annotation;
    const appearanceBuffer = [\`\${thickness} w 1 J 1 j\`, \`\${getPdfColor(color, false)}\`];
    if (opacity !== 1) {
      appearanceBuffer.push("/R0 gs");
    }
    for (const outline of paths.lines) {
      appearanceBuffer.push(\`\${numberToString(outline[4])} \${numberToString(outline[5])} m\`);
      for (let i = 6, ii = outline.length; i < ii; i += 6) {
        if (isNaN(outline[i])) {
          appearanceBuffer.push(\`\${numberToString(outline[i + 4])} \${numberToString(outline[i + 5])} l\`);
        } else {
          const [c1x, c1y, c2x, c2y, x, y] = outline.slice(i, i + 6);
          appearanceBuffer.push([c1x, c1y, c2x, c2y, x, y].map(numberToString).join(" ") + " c");
        }
      }
      if (outline.length === 6) {
        appearanceBuffer.push(\`\${numberToString(outline[4])} \${numberToString(outline[5])} l\`);
      }
    }
    appearanceBuffer.push("S");
    const appearance = appearanceBuffer.join("\\n");
    const appearanceStreamDict = new Dict(xref);
    appearanceStreamDict.set("FormType", 1);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", rect);
    appearanceStreamDict.set("Length", appearance.length);
    if (opacity !== 1) {
      const resources = new Dict(xref);
      const extGState = new Dict(xref);
      const r0 = new Dict(xref);
      r0.set("CA", opacity);
      r0.set("Type", Name.get("ExtGState"));
      extGState.set("R0", r0);
      resources.set("ExtGState", extGState);
      appearanceStreamDict.set("Resources", resources);
    }
    const ap = new StringStream(appearance);
    ap.dict = appearanceStreamDict;
    return ap;
  }
  static async createNewAppearanceStreamForHighlight(annotation, xref, params) {
    const {
      color,
      rect,
      outlines: {
        outline
      },
      opacity
    } = annotation;
    const appearanceBuffer = [\`\${getPdfColor(color, true)}\`, "/R0 gs"];
    appearanceBuffer.push(\`\${numberToString(outline[4])} \${numberToString(outline[5])} m\`);
    for (let i = 6, ii = outline.length; i < ii; i += 6) {
      if (isNaN(outline[i])) {
        appearanceBuffer.push(\`\${numberToString(outline[i + 4])} \${numberToString(outline[i + 5])} l\`);
      } else {
        const [c1x, c1y, c2x, c2y, x, y] = outline.slice(i, i + 6);
        appearanceBuffer.push([c1x, c1y, c2x, c2y, x, y].map(numberToString).join(" ") + " c");
      }
    }
    appearanceBuffer.push("h f");
    const appearance = appearanceBuffer.join("\\n");
    const appearanceStreamDict = new Dict(xref);
    appearanceStreamDict.set("FormType", 1);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", rect);
    appearanceStreamDict.set("Length", appearance.length);
    const resources = new Dict(xref);
    const extGState = new Dict(xref);
    resources.set("ExtGState", extGState);
    appearanceStreamDict.set("Resources", resources);
    const r0 = new Dict(xref);
    extGState.set("R0", r0);
    r0.set("BM", Name.get("Multiply"));
    if (opacity !== 1) {
      r0.set("ca", opacity);
      r0.set("Type", Name.get("ExtGState"));
    }
    const ap = new StringStream(appearance);
    ap.dict = appearanceStreamDict;
    return ap;
  }
}
class HighlightAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.HIGHLIGHT;
    this.data.isEditable = !this.data.noHTML;
    this.data.noHTML = false;
    this.data.opacity = dict.get("CA") || 1;
    const quadPoints = this.data.quadPoints = getQuadPoints(dict, null);
    if (quadPoints) {
      const resources = this.appearance?.dict.get("Resources");
      if (!this.appearance || !resources?.has("ExtGState")) {
        if (this.appearance) {
          warn("HighlightAnnotation - ignoring built-in appearance stream.");
        }
        const fillColor = this.color ? getPdfColorArray(this.color) : [1, 1, 0];
        const fillAlpha = dict.get("CA");
        this._setDefaultAppearance({
          xref,
          fillColor,
          blendMode: "Multiply",
          fillAlpha,
          pointsCallback: (buffer, points) => {
            buffer.push(\`\${points[0]} \${points[1]} m\`, \`\${points[2]} \${points[3]} l\`, \`\${points[6]} \${points[7]} l\`, \`\${points[4]} \${points[5]} l\`, "f");
            return [points[0], points[7], points[2], points[3]];
          }
        });
      }
    } else {
      this.data.popupRef = null;
    }
  }
  static createNewDict(annotation, xref, {
    apRef,
    ap
  }) {
    const {
      color,
      oldAnnotation,
      opacity,
      rect,
      rotation,
      user,
      quadPoints
    } = annotation;
    const highlight = oldAnnotation || new Dict(xref);
    highlight.set("Type", Name.get("Annot"));
    highlight.set("Subtype", Name.get("Highlight"));
    highlight.set(oldAnnotation ? "M" : "CreationDate", \`D:\${getModificationDate()}\`);
    highlight.set("CreationDate", \`D:\${getModificationDate()}\`);
    highlight.set("Rect", rect);
    highlight.set("F", 4);
    highlight.set("Border", [0, 0, 0]);
    highlight.set("Rotate", rotation);
    highlight.set("QuadPoints", quadPoints);
    highlight.set("C", getPdfColorArray(color));
    highlight.set("CA", opacity);
    if (user) {
      highlight.set("T", stringToAsciiOrUTF16BE(user));
    }
    if (apRef || ap) {
      const n = new Dict(xref);
      highlight.set("AP", n);
      n.set("N", apRef || ap);
    }
    return highlight;
  }
  static async createNewAppearanceStream(annotation, xref, params) {
    const {
      color,
      rect,
      outlines,
      opacity
    } = annotation;
    const appearanceBuffer = [\`\${getPdfColor(color, true)}\`, "/R0 gs"];
    const buffer = [];
    for (const outline of outlines) {
      buffer.length = 0;
      buffer.push(\`\${numberToString(outline[0])} \${numberToString(outline[1])} m\`);
      for (let i = 2, ii = outline.length; i < ii; i += 2) {
        buffer.push(\`\${numberToString(outline[i])} \${numberToString(outline[i + 1])} l\`);
      }
      buffer.push("h");
      appearanceBuffer.push(buffer.join("\\n"));
    }
    appearanceBuffer.push("f*");
    const appearance = appearanceBuffer.join("\\n");
    const appearanceStreamDict = new Dict(xref);
    appearanceStreamDict.set("FormType", 1);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", rect);
    appearanceStreamDict.set("Length", appearance.length);
    const resources = new Dict(xref);
    const extGState = new Dict(xref);
    resources.set("ExtGState", extGState);
    appearanceStreamDict.set("Resources", resources);
    const r0 = new Dict(xref);
    extGState.set("R0", r0);
    r0.set("BM", Name.get("Multiply"));
    if (opacity !== 1) {
      r0.set("ca", opacity);
      r0.set("Type", Name.get("ExtGState"));
    }
    const ap = new StringStream(appearance);
    ap.dict = appearanceStreamDict;
    return ap;
  }
}
class UnderlineAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.UNDERLINE;
    const quadPoints = this.data.quadPoints = getQuadPoints(dict, null);
    if (quadPoints) {
      if (!this.appearance) {
        const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
        const strokeAlpha = dict.get("CA");
        this._setDefaultAppearance({
          xref,
          extra: "[] 0 d 0.571 w",
          strokeColor,
          strokeAlpha,
          pointsCallback: (buffer, points) => {
            buffer.push(\`\${points[4]} \${points[5] + 1.3} m\`, \`\${points[6]} \${points[7] + 1.3} l\`, "S");
            return [points[0], points[7], points[2], points[3]];
          }
        });
      }
    } else {
      this.data.popupRef = null;
    }
  }
}
class SquigglyAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.SQUIGGLY;
    const quadPoints = this.data.quadPoints = getQuadPoints(dict, null);
    if (quadPoints) {
      if (!this.appearance) {
        const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
        const strokeAlpha = dict.get("CA");
        this._setDefaultAppearance({
          xref,
          extra: "[] 0 d 1 w",
          strokeColor,
          strokeAlpha,
          pointsCallback: (buffer, points) => {
            const dy = (points[1] - points[5]) / 6;
            let shift = dy;
            let x = points[4];
            const y = points[5];
            const xEnd = points[6];
            buffer.push(\`\${x} \${y + shift} m\`);
            do {
              x += 2;
              shift = shift === 0 ? dy : 0;
              buffer.push(\`\${x} \${y + shift} l\`);
            } while (x < xEnd);
            buffer.push("S");
            return [points[4], y - 2 * dy, xEnd, y + 2 * dy];
          }
        });
      }
    } else {
      this.data.popupRef = null;
    }
  }
}
class StrikeOutAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    this.data.annotationType = AnnotationType.STRIKEOUT;
    const quadPoints = this.data.quadPoints = getQuadPoints(dict, null);
    if (quadPoints) {
      if (!this.appearance) {
        const strokeColor = this.color ? getPdfColorArray(this.color) : [0, 0, 0];
        const strokeAlpha = dict.get("CA");
        this._setDefaultAppearance({
          xref,
          extra: "[] 0 d 1 w",
          strokeColor,
          strokeAlpha,
          pointsCallback: (buffer, points) => {
            buffer.push(\`\${(points[0] + points[4]) / 2} \` + \`\${(points[1] + points[5]) / 2} m\`, \`\${(points[2] + points[6]) / 2} \` + \`\${(points[3] + points[7]) / 2} l\`, "S");
            return [points[0], points[7], points[2], points[3]];
          }
        });
      }
    } else {
      this.data.popupRef = null;
    }
  }
}
class StampAnnotation extends MarkupAnnotation {
  #savedHasOwnCanvas = null;
  constructor(params) {
    super(params);
    this.data.annotationType = AnnotationType.STAMP;
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.isEditable = !this.data.noHTML;
    this.data.noHTML = false;
  }
  mustBeViewedWhenEditing(isEditing, modifiedIds = null) {
    if (isEditing) {
      if (!this.data.isEditable) {
        return true;
      }
      this.#savedHasOwnCanvas ??= this.data.hasOwnCanvas;
      this.data.hasOwnCanvas = true;
      return true;
    }
    if (this.#savedHasOwnCanvas !== null) {
      this.data.hasOwnCanvas = this.#savedHasOwnCanvas;
      this.#savedHasOwnCanvas = null;
    }
    return !modifiedIds?.has(this.data.id);
  }
  static async createImage(bitmap, xref) {
    const {
      width,
      height
    } = bitmap;
    const canvas = new OffscreenCanvas(width, height);
    const ctx = canvas.getContext("2d", {
      alpha: true
    });
    ctx.drawImage(bitmap, 0, 0);
    const data = ctx.getImageData(0, 0, width, height).data;
    const buf32 = new Uint32Array(data.buffer);
    const hasAlpha = buf32.some(FeatureTest.isLittleEndian ? x => x >>> 24 !== 0xff : x => (x & 0xff) !== 0xff);
    if (hasAlpha) {
      ctx.fillStyle = "white";
      ctx.fillRect(0, 0, width, height);
      ctx.drawImage(bitmap, 0, 0);
    }
    const jpegBufferPromise = canvas.convertToBlob({
      type: "image/jpeg",
      quality: 1
    }).then(blob => blob.arrayBuffer());
    const xobjectName = Name.get("XObject");
    const imageName = Name.get("Image");
    const image = new Dict(xref);
    image.set("Type", xobjectName);
    image.set("Subtype", imageName);
    image.set("BitsPerComponent", 8);
    image.set("ColorSpace", Name.get("DeviceRGB"));
    image.set("Filter", Name.get("DCTDecode"));
    image.set("BBox", [0, 0, width, height]);
    image.set("Width", width);
    image.set("Height", height);
    let smaskStream = null;
    if (hasAlpha) {
      const alphaBuffer = new Uint8Array(buf32.length);
      if (FeatureTest.isLittleEndian) {
        for (let i = 0, ii = buf32.length; i < ii; i++) {
          alphaBuffer[i] = buf32[i] >>> 24;
        }
      } else {
        for (let i = 0, ii = buf32.length; i < ii; i++) {
          alphaBuffer[i] = buf32[i] & 0xff;
        }
      }
      const smask = new Dict(xref);
      smask.set("Type", xobjectName);
      smask.set("Subtype", imageName);
      smask.set("BitsPerComponent", 8);
      smask.set("ColorSpace", Name.get("DeviceGray"));
      smask.set("Width", width);
      smask.set("Height", height);
      smaskStream = new Stream(alphaBuffer, 0, 0, smask);
    }
    const imageStream = new Stream(await jpegBufferPromise, 0, 0, image);
    return {
      imageStream,
      smaskStream,
      width,
      height
    };
  }
  static createNewDict(annotation, xref, {
    apRef,
    ap
  }) {
    const {
      oldAnnotation,
      rect,
      rotation,
      user
    } = annotation;
    const stamp = oldAnnotation || new Dict(xref);
    stamp.set("Type", Name.get("Annot"));
    stamp.set("Subtype", Name.get("Stamp"));
    stamp.set(oldAnnotation ? "M" : "CreationDate", \`D:\${getModificationDate()}\`);
    stamp.set("Rect", rect);
    stamp.set("F", 4);
    stamp.set("Border", [0, 0, 0]);
    stamp.set("Rotate", rotation);
    if (user) {
      stamp.set("T", stringToAsciiOrUTF16BE(user));
    }
    if (apRef || ap) {
      const n = new Dict(xref);
      stamp.set("AP", n);
      if (apRef) {
        n.set("N", apRef);
      } else {
        n.set("N", ap);
      }
    }
    return stamp;
  }
  static async #createNewAppearanceStreamForDrawing(annotation, xref) {
    const {
      areContours,
      color,
      rect,
      lines,
      thickness
    } = annotation;
    const appearanceBuffer = [\`\${thickness} w 1 J 1 j\`, \`\${getPdfColor(color, areContours)}\`];
    for (const line of lines) {
      appearanceBuffer.push(\`\${numberToString(line[4])} \${numberToString(line[5])} m\`);
      for (let i = 6, ii = line.length; i < ii; i += 6) {
        if (isNaN(line[i])) {
          appearanceBuffer.push(\`\${numberToString(line[i + 4])} \${numberToString(line[i + 5])} l\`);
        } else {
          const [c1x, c1y, c2x, c2y, x, y] = line.slice(i, i + 6);
          appearanceBuffer.push([c1x, c1y, c2x, c2y, x, y].map(numberToString).join(" ") + " c");
        }
      }
      if (line.length === 6) {
        appearanceBuffer.push(\`\${numberToString(line[4])} \${numberToString(line[5])} l\`);
      }
    }
    appearanceBuffer.push(areContours ? "F" : "S");
    const appearance = appearanceBuffer.join("\\n");
    const appearanceStreamDict = new Dict(xref);
    appearanceStreamDict.set("FormType", 1);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", rect);
    appearanceStreamDict.set("Length", appearance.length);
    const ap = new StringStream(appearance);
    ap.dict = appearanceStreamDict;
    return ap;
  }
  static async createNewAppearanceStream(annotation, xref, params) {
    if (annotation.oldAnnotation) {
      return null;
    }
    if (annotation.isSignature) {
      return this.#createNewAppearanceStreamForDrawing(annotation, xref);
    }
    const {
      rotation
    } = annotation;
    const {
      imageRef,
      width,
      height
    } = params.image;
    const resources = new Dict(xref);
    const xobject = new Dict(xref);
    resources.set("XObject", xobject);
    xobject.set("Im0", imageRef);
    const appearance = \`q \${width} 0 0 \${height} 0 0 cm /Im0 Do Q\`;
    const appearanceStreamDict = new Dict(xref);
    appearanceStreamDict.set("FormType", 1);
    appearanceStreamDict.set("Subtype", Name.get("Form"));
    appearanceStreamDict.set("Type", Name.get("XObject"));
    appearanceStreamDict.set("BBox", [0, 0, width, height]);
    appearanceStreamDict.set("Resources", resources);
    if (rotation) {
      const matrix = getRotationMatrix(rotation, width, height);
      appearanceStreamDict.set("Matrix", matrix);
    }
    const ap = new StringStream(appearance);
    ap.dict = appearanceStreamDict;
    return ap;
  }
}
class FileAttachmentAnnotation extends MarkupAnnotation {
  constructor(params) {
    super(params);
    const {
      dict,
      xref
    } = params;
    const file = new FileSpec(dict.get("FS"), xref);
    this.data.annotationType = AnnotationType.FILEATTACHMENT;
    this.data.hasOwnCanvas = this.data.noRotate;
    this.data.noHTML = false;
    this.data.file = file.serializable;
    const name = dict.get("Name");
    this.data.name = name instanceof Name ? stringToPDFString(name.name) : "PushPin";
    const fillAlpha = dict.get("ca");
    this.data.fillAlpha = typeof fillAlpha === "number" && fillAlpha >= 0 && fillAlpha <= 1 ? fillAlpha : null;
  }
}

;// ./src/core/calculate_md5.js

const PARAMS = {
  get r() {
    return shadow(this, "r", new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]));
  },
  get k() {
    return shadow(this, "k", new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]));
  }
};
function calculateMD5(data, offset, length) {
  let h0 = 1732584193,
    h1 = -271733879,
    h2 = -1732584194,
    h3 = 271733878;
  const paddedLength = length + 72 & ~63;
  const padded = new Uint8Array(paddedLength);
  let i, j;
  for (i = 0; i < length; ++i) {
    padded[i] = data[offset++];
  }
  padded[i++] = 0x80;
  const n = paddedLength - 8;
  if (i < n) {
    i = n;
  }
  padded[i++] = length << 3 & 0xff;
  padded[i++] = length >> 5 & 0xff;
  padded[i++] = length >> 13 & 0xff;
  padded[i++] = length >> 21 & 0xff;
  padded[i++] = length >>> 29 & 0xff;
  i += 3;
  const w = new Int32Array(16);
  const {
    k,
    r
  } = PARAMS;
  for (i = 0; i < paddedLength;) {
    for (j = 0; j < 16; ++j, i += 4) {
      w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;
    }
    let a = h0,
      b = h1,
      c = h2,
      d = h3,
      f,
      g;
    for (j = 0; j < 64; ++j) {
      if (j < 16) {
        f = b & c | ~b & d;
        g = j;
      } else if (j < 32) {
        f = d & b | ~d & c;
        g = 5 * j + 1 & 15;
      } else if (j < 48) {
        f = b ^ c ^ d;
        g = 3 * j + 5 & 15;
      } else {
        f = c ^ (b | ~d);
        g = 7 * j & 15;
      }
      const tmp = d,
        rotateArg = a + f + k[j] + w[g] | 0,
        rotate = r[j];
      d = c;
      c = b;
      b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;
      a = tmp;
    }
    h0 = h0 + a | 0;
    h1 = h1 + b | 0;
    h2 = h2 + c | 0;
    h3 = h3 + d | 0;
  }
  return new Uint8Array([h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >>> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >>> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >>> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >>> 24 & 0xFF]);
}

;// ./src/core/dataset_reader.js



function decodeString(str) {
  try {
    return stringToUTF8String(str);
  } catch (ex) {
    warn(\`UTF-8 decoding failed: "\${ex}".\`);
    return str;
  }
}
class DatasetXMLParser extends SimpleXMLParser {
  constructor(options) {
    super(options);
    this.node = null;
  }
  onEndElement(name) {
    const node = super.onEndElement(name);
    if (node && name === "xfa:datasets") {
      this.node = node;
      throw new Error("Aborting DatasetXMLParser.");
    }
  }
}
class DatasetReader {
  constructor(data) {
    if (data.datasets) {
      this.node = new SimpleXMLParser({
        hasAttributes: true
      }).parseFromString(data.datasets).documentElement;
    } else {
      const parser = new DatasetXMLParser({
        hasAttributes: true
      });
      try {
        parser.parseFromString(data["xdp:xdp"]);
      } catch {}
      this.node = parser.node;
    }
  }
  getValue(path) {
    if (!this.node || !path) {
      return "";
    }
    const node = this.node.searchNode(parseXFAPath(path), 0);
    if (!node) {
      return "";
    }
    const first = node.firstChild;
    if (first?.nodeName === "value") {
      return node.children.map(child => decodeString(child.textContent));
    }
    return decodeString(node.textContent);
  }
}

;// ./src/core/calculate_sha_other.js

class Word64 {
  constructor(highInteger, lowInteger) {
    this.high = highInteger | 0;
    this.low = lowInteger | 0;
  }
  and(word) {
    this.high &= word.high;
    this.low &= word.low;
  }
  xor(word) {
    this.high ^= word.high;
    this.low ^= word.low;
  }
  shiftRight(places) {
    if (places >= 32) {
      this.low = this.high >>> places - 32 | 0;
      this.high = 0;
    } else {
      this.low = this.low >>> places | this.high << 32 - places;
      this.high = this.high >>> places | 0;
    }
  }
  rotateRight(places) {
    let low, high;
    if (places & 32) {
      high = this.low;
      low = this.high;
    } else {
      low = this.low;
      high = this.high;
    }
    places &= 31;
    this.low = low >>> places | high << 32 - places;
    this.high = high >>> places | low << 32 - places;
  }
  not() {
    this.high = ~this.high;
    this.low = ~this.low;
  }
  add(word) {
    const lowAdd = (this.low >>> 0) + (word.low >>> 0);
    let highAdd = (this.high >>> 0) + (word.high >>> 0);
    if (lowAdd > 0xffffffff) {
      highAdd += 1;
    }
    this.low = lowAdd | 0;
    this.high = highAdd | 0;
  }
  copyTo(bytes, offset) {
    bytes[offset] = this.high >>> 24 & 0xff;
    bytes[offset + 1] = this.high >> 16 & 0xff;
    bytes[offset + 2] = this.high >> 8 & 0xff;
    bytes[offset + 3] = this.high & 0xff;
    bytes[offset + 4] = this.low >>> 24 & 0xff;
    bytes[offset + 5] = this.low >> 16 & 0xff;
    bytes[offset + 6] = this.low >> 8 & 0xff;
    bytes[offset + 7] = this.low & 0xff;
  }
  assign(word) {
    this.high = word.high;
    this.low = word.low;
  }
}
const calculate_sha_other_PARAMS = {
  get k() {
    return shadow(this, "k", [new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd), new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc), new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019), new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118), new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe), new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2), new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1), new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694), new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3), new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65), new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483), new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5), new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210), new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4), new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725), new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70), new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926), new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df), new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8), new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b), new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001), new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30), new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910), new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8), new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53), new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8), new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb), new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3), new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60), new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec), new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9), new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b), new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207), new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178), new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6), new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b), new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493), new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c), new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a), new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)]);
  }
};
function ch(result, x, y, z, tmp) {
  result.assign(x);
  result.and(y);
  tmp.assign(x);
  tmp.not();
  tmp.and(z);
  result.xor(tmp);
}
function maj(result, x, y, z, tmp) {
  result.assign(x);
  result.and(y);
  tmp.assign(x);
  tmp.and(z);
  result.xor(tmp);
  tmp.assign(y);
  tmp.and(z);
  result.xor(tmp);
}
function sigma(result, x, tmp) {
  result.assign(x);
  result.rotateRight(28);
  tmp.assign(x);
  tmp.rotateRight(34);
  result.xor(tmp);
  tmp.assign(x);
  tmp.rotateRight(39);
  result.xor(tmp);
}
function sigmaPrime(result, x, tmp) {
  result.assign(x);
  result.rotateRight(14);
  tmp.assign(x);
  tmp.rotateRight(18);
  result.xor(tmp);
  tmp.assign(x);
  tmp.rotateRight(41);
  result.xor(tmp);
}
function littleSigma(result, x, tmp) {
  result.assign(x);
  result.rotateRight(1);
  tmp.assign(x);
  tmp.rotateRight(8);
  result.xor(tmp);
  tmp.assign(x);
  tmp.shiftRight(7);
  result.xor(tmp);
}
function littleSigmaPrime(result, x, tmp) {
  result.assign(x);
  result.rotateRight(19);
  tmp.assign(x);
  tmp.rotateRight(61);
  result.xor(tmp);
  tmp.assign(x);
  tmp.shiftRight(6);
  result.xor(tmp);
}
function calculateSHA512(data, offset, length, mode384 = false) {
  let h0, h1, h2, h3, h4, h5, h6, h7;
  if (!mode384) {
    h0 = new Word64(0x6a09e667, 0xf3bcc908);
    h1 = new Word64(0xbb67ae85, 0x84caa73b);
    h2 = new Word64(0x3c6ef372, 0xfe94f82b);
    h3 = new Word64(0xa54ff53a, 0x5f1d36f1);
    h4 = new Word64(0x510e527f, 0xade682d1);
    h5 = new Word64(0x9b05688c, 0x2b3e6c1f);
    h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);
    h7 = new Word64(0x5be0cd19, 0x137e2179);
  } else {
    h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);
    h1 = new Word64(0x629a292a, 0x367cd507);
    h2 = new Word64(0x9159015a, 0x3070dd17);
    h3 = new Word64(0x152fecd8, 0xf70e5939);
    h4 = new Word64(0x67332667, 0xffc00b31);
    h5 = new Word64(0x8eb44a87, 0x68581511);
    h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);
    h7 = new Word64(0x47b5481d, 0xbefa4fa4);
  }
  const paddedLength = Math.ceil((length + 17) / 128) * 128;
  const padded = new Uint8Array(paddedLength);
  let i, j;
  for (i = 0; i < length; ++i) {
    padded[i] = data[offset++];
  }
  padded[i++] = 0x80;
  const n = paddedLength - 16;
  if (i < n) {
    i = n;
  }
  i += 11;
  padded[i++] = length >>> 29 & 0xff;
  padded[i++] = length >> 21 & 0xff;
  padded[i++] = length >> 13 & 0xff;
  padded[i++] = length >> 5 & 0xff;
  padded[i++] = length << 3 & 0xff;
  const w = new Array(80);
  for (i = 0; i < 80; i++) {
    w[i] = new Word64(0, 0);
  }
  const {
    k
  } = calculate_sha_other_PARAMS;
  let a = new Word64(0, 0),
    b = new Word64(0, 0),
    c = new Word64(0, 0);
  let d = new Word64(0, 0),
    e = new Word64(0, 0),
    f = new Word64(0, 0);
  let g = new Word64(0, 0),
    h = new Word64(0, 0);
  const t1 = new Word64(0, 0),
    t2 = new Word64(0, 0);
  const tmp1 = new Word64(0, 0),
    tmp2 = new Word64(0, 0);
  let tmp3;
  for (i = 0; i < paddedLength;) {
    for (j = 0; j < 16; ++j) {
      w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];
      w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];
      i += 8;
    }
    for (j = 16; j < 80; ++j) {
      tmp3 = w[j];
      littleSigmaPrime(tmp3, w[j - 2], tmp2);
      tmp3.add(w[j - 7]);
      littleSigma(tmp1, w[j - 15], tmp2);
      tmp3.add(tmp1);
      tmp3.add(w[j - 16]);
    }
    a.assign(h0);
    b.assign(h1);
    c.assign(h2);
    d.assign(h3);
    e.assign(h4);
    f.assign(h5);
    g.assign(h6);
    h.assign(h7);
    for (j = 0; j < 80; ++j) {
      t1.assign(h);
      sigmaPrime(tmp1, e, tmp2);
      t1.add(tmp1);
      ch(tmp1, e, f, g, tmp2);
      t1.add(tmp1);
      t1.add(k[j]);
      t1.add(w[j]);
      sigma(t2, a, tmp2);
      maj(tmp1, a, b, c, tmp2);
      t2.add(tmp1);
      tmp3 = h;
      h = g;
      g = f;
      f = e;
      d.add(t1);
      e = d;
      d = c;
      c = b;
      b = a;
      tmp3.assign(t1);
      tmp3.add(t2);
      a = tmp3;
    }
    h0.add(a);
    h1.add(b);
    h2.add(c);
    h3.add(d);
    h4.add(e);
    h5.add(f);
    h6.add(g);
    h7.add(h);
  }
  let result;
  if (!mode384) {
    result = new Uint8Array(64);
    h0.copyTo(result, 0);
    h1.copyTo(result, 8);
    h2.copyTo(result, 16);
    h3.copyTo(result, 24);
    h4.copyTo(result, 32);
    h5.copyTo(result, 40);
    h6.copyTo(result, 48);
    h7.copyTo(result, 56);
  } else {
    result = new Uint8Array(48);
    h0.copyTo(result, 0);
    h1.copyTo(result, 8);
    h2.copyTo(result, 16);
    h3.copyTo(result, 24);
    h4.copyTo(result, 32);
    h5.copyTo(result, 40);
  }
  return result;
}
function calculateSHA384(data, offset, length) {
  return calculateSHA512(data, offset, length, true);
}

;// ./src/core/calculate_sha256.js

const calculate_sha256_PARAMS = {
  get k() {
    return shadow(this, "k", [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
  }
};
function rotr(x, n) {
  return x >>> n | x << 32 - n;
}
function calculate_sha256_ch(x, y, z) {
  return x & y ^ ~x & z;
}
function calculate_sha256_maj(x, y, z) {
  return x & y ^ x & z ^ y & z;
}
function calculate_sha256_sigma(x) {
  return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
}
function calculate_sha256_sigmaPrime(x) {
  return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
}
function calculate_sha256_littleSigma(x) {
  return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;
}
function calculate_sha256_littleSigmaPrime(x) {
  return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;
}
function calculateSHA256(data, offset, length) {
  let h0 = 0x6a09e667,
    h1 = 0xbb67ae85,
    h2 = 0x3c6ef372,
    h3 = 0xa54ff53a,
    h4 = 0x510e527f,
    h5 = 0x9b05688c,
    h6 = 0x1f83d9ab,
    h7 = 0x5be0cd19;
  const paddedLength = Math.ceil((length + 9) / 64) * 64;
  const padded = new Uint8Array(paddedLength);
  let i, j;
  for (i = 0; i < length; ++i) {
    padded[i] = data[offset++];
  }
  padded[i++] = 0x80;
  const n = paddedLength - 8;
  if (i < n) {
    i = n;
  }
  i += 3;
  padded[i++] = length >>> 29 & 0xff;
  padded[i++] = length >> 21 & 0xff;
  padded[i++] = length >> 13 & 0xff;
  padded[i++] = length >> 5 & 0xff;
  padded[i++] = length << 3 & 0xff;
  const w = new Uint32Array(64);
  const {
    k
  } = calculate_sha256_PARAMS;
  for (i = 0; i < paddedLength;) {
    for (j = 0; j < 16; ++j) {
      w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];
      i += 4;
    }
    for (j = 16; j < 64; ++j) {
      w[j] = calculate_sha256_littleSigmaPrime(w[j - 2]) + w[j - 7] + calculate_sha256_littleSigma(w[j - 15]) + w[j - 16] | 0;
    }
    let a = h0,
      b = h1,
      c = h2,
      d = h3,
      e = h4,
      f = h5,
      g = h6,
      h = h7,
      t1,
      t2;
    for (j = 0; j < 64; ++j) {
      t1 = h + calculate_sha256_sigmaPrime(e) + calculate_sha256_ch(e, f, g) + k[j] + w[j];
      t2 = calculate_sha256_sigma(a) + calculate_sha256_maj(a, b, c);
      h = g;
      g = f;
      f = e;
      e = d + t1 | 0;
      d = c;
      c = b;
      b = a;
      a = t1 + t2 | 0;
    }
    h0 = h0 + a | 0;
    h1 = h1 + b | 0;
    h2 = h2 + c | 0;
    h3 = h3 + d | 0;
    h4 = h4 + e | 0;
    h5 = h5 + f | 0;
    h6 = h6 + g | 0;
    h7 = h7 + h | 0;
  }
  return new Uint8Array([h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF, h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF]);
}

;// ./src/core/decrypt_stream.js

const chunkSize = 512;
class DecryptStream extends DecodeStream {
  constructor(str, maybeLength, decrypt) {
    super(maybeLength);
    this.str = str;
    this.dict = str.dict;
    this.decrypt = decrypt;
    this.nextChunk = null;
    this.initialized = false;
  }
  readBlock() {
    let chunk;
    if (this.initialized) {
      chunk = this.nextChunk;
    } else {
      chunk = this.str.getBytes(chunkSize);
      this.initialized = true;
    }
    if (!chunk?.length) {
      this.eof = true;
      return;
    }
    this.nextChunk = this.str.getBytes(chunkSize);
    const hasMoreData = this.nextChunk?.length > 0;
    const decrypt = this.decrypt;
    chunk = decrypt(chunk, !hasMoreData);
    const bufferLength = this.bufferLength,
      newLength = bufferLength + chunk.length,
      buffer = this.ensureBuffer(newLength);
    buffer.set(chunk, bufferLength);
    this.bufferLength = newLength;
  }
}

;// ./src/core/crypto.js






class ARCFourCipher {
  constructor(key) {
    this.a = 0;
    this.b = 0;
    const s = new Uint8Array(256);
    const keyLength = key.length;
    for (let i = 0; i < 256; ++i) {
      s[i] = i;
    }
    for (let i = 0, j = 0; i < 256; ++i) {
      const tmp = s[i];
      j = j + tmp + key[i % keyLength] & 0xff;
      s[i] = s[j];
      s[j] = tmp;
    }
    this.s = s;
  }
  encryptBlock(data) {
    let a = this.a,
      b = this.b;
    const s = this.s;
    const n = data.length;
    const output = new Uint8Array(n);
    for (let i = 0; i < n; ++i) {
      a = a + 1 & 0xff;
      const tmp = s[a];
      b = b + tmp & 0xff;
      const tmp2 = s[b];
      s[a] = tmp2;
      s[b] = tmp;
      output[i] = data[i] ^ s[tmp + tmp2 & 0xff];
    }
    this.a = a;
    this.b = b;
    return output;
  }
  decryptBlock(data) {
    return this.encryptBlock(data);
  }
  encrypt(data) {
    return this.encryptBlock(data);
  }
}
class NullCipher {
  decryptBlock(data) {
    return data;
  }
  encrypt(data) {
    return data;
  }
}
class AESBaseCipher {
  _s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);
  _inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);
  _mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);
  _mixCol = new Uint8Array(256).map((_, i) => i < 128 ? i << 1 : i << 1 ^ 0x1b);
  constructor() {
    this.buffer = new Uint8Array(16);
    this.bufferPosition = 0;
  }
  _expandKey(cipherKey) {
    unreachable("Cannot call \`_expandKey\` on the base class");
  }
  _decrypt(input, key) {
    let t, u, v;
    const state = new Uint8Array(16);
    state.set(input);
    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {
      state[j] ^= key[k];
    }
    for (let i = this._cyclesOfRepetition - 1; i >= 1; --i) {
      t = state[13];
      state[13] = state[9];
      state[9] = state[5];
      state[5] = state[1];
      state[1] = t;
      t = state[14];
      u = state[10];
      state[14] = state[6];
      state[10] = state[2];
      state[6] = t;
      state[2] = u;
      t = state[15];
      u = state[11];
      v = state[7];
      state[15] = state[3];
      state[11] = t;
      state[7] = u;
      state[3] = v;
      for (let j = 0; j < 16; ++j) {
        state[j] = this._inv_s[state[j]];
      }
      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {
        state[j] ^= key[k];
      }
      for (let j = 0; j < 16; j += 4) {
        const s0 = this._mix[state[j]];
        const s1 = this._mix[state[j + 1]];
        const s2 = this._mix[state[j + 2]];
        const s3 = this._mix[state[j + 3]];
        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;
        state[j] = t >>> 24 & 0xff;
        state[j + 1] = t >> 16 & 0xff;
        state[j + 2] = t >> 8 & 0xff;
        state[j + 3] = t & 0xff;
      }
    }
    t = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = t;
    t = state[14];
    u = state[10];
    state[14] = state[6];
    state[10] = state[2];
    state[6] = t;
    state[2] = u;
    t = state[15];
    u = state[11];
    v = state[7];
    state[15] = state[3];
    state[11] = t;
    state[7] = u;
    state[3] = v;
    for (let j = 0; j < 16; ++j) {
      state[j] = this._inv_s[state[j]];
      state[j] ^= key[j];
    }
    return state;
  }
  _encrypt(input, key) {
    const s = this._s;
    let t, u, v;
    const state = new Uint8Array(16);
    state.set(input);
    for (let j = 0; j < 16; ++j) {
      state[j] ^= key[j];
    }
    for (let i = 1; i < this._cyclesOfRepetition; i++) {
      for (let j = 0; j < 16; ++j) {
        state[j] = s[state[j]];
      }
      v = state[1];
      state[1] = state[5];
      state[5] = state[9];
      state[9] = state[13];
      state[13] = v;
      v = state[2];
      u = state[6];
      state[2] = state[10];
      state[6] = state[14];
      state[10] = v;
      state[14] = u;
      v = state[3];
      u = state[7];
      t = state[11];
      state[3] = state[15];
      state[7] = v;
      state[11] = u;
      state[15] = t;
      for (let j = 0; j < 16; j += 4) {
        const s0 = state[j];
        const s1 = state[j + 1];
        const s2 = state[j + 2];
        const s3 = state[j + 3];
        t = s0 ^ s1 ^ s2 ^ s3;
        state[j] ^= t ^ this._mixCol[s0 ^ s1];
        state[j + 1] ^= t ^ this._mixCol[s1 ^ s2];
        state[j + 2] ^= t ^ this._mixCol[s2 ^ s3];
        state[j + 3] ^= t ^ this._mixCol[s3 ^ s0];
      }
      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {
        state[j] ^= key[k];
      }
    }
    for (let j = 0; j < 16; ++j) {
      state[j] = s[state[j]];
    }
    v = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = v;
    v = state[2];
    u = state[6];
    state[2] = state[10];
    state[6] = state[14];
    state[10] = v;
    state[14] = u;
    v = state[3];
    u = state[7];
    t = state[11];
    state[3] = state[15];
    state[7] = v;
    state[11] = u;
    state[15] = t;
    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {
      state[j] ^= key[k];
    }
    return state;
  }
  _decryptBlock2(data, finalize) {
    const sourceLength = data.length;
    let buffer = this.buffer,
      bufferLength = this.bufferPosition;
    const result = [];
    let iv = this.iv;
    for (let i = 0; i < sourceLength; ++i) {
      buffer[bufferLength] = data[i];
      ++bufferLength;
      if (bufferLength < 16) {
        continue;
      }
      const plain = this._decrypt(buffer, this._key);
      for (let j = 0; j < 16; ++j) {
        plain[j] ^= iv[j];
      }
      iv = buffer;
      result.push(plain);
      buffer = new Uint8Array(16);
      bufferLength = 0;
    }
    this.buffer = buffer;
    this.bufferLength = bufferLength;
    this.iv = iv;
    if (result.length === 0) {
      return new Uint8Array(0);
    }
    let outputLength = 16 * result.length;
    if (finalize) {
      const lastBlock = result.at(-1);
      let psLen = lastBlock[15];
      if (psLen <= 16) {
        for (let i = 15, ii = 16 - psLen; i >= ii; --i) {
          if (lastBlock[i] !== psLen) {
            psLen = 0;
            break;
          }
        }
        outputLength -= psLen;
        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);
      }
    }
    const output = new Uint8Array(outputLength);
    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {
      output.set(result[i], j);
    }
    return output;
  }
  decryptBlock(data, finalize, iv = null) {
    const sourceLength = data.length;
    const buffer = this.buffer;
    let bufferLength = this.bufferPosition;
    if (iv) {
      this.iv = iv;
    } else {
      for (let i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {
        buffer[bufferLength] = data[i];
      }
      if (bufferLength < 16) {
        this.bufferLength = bufferLength;
        return new Uint8Array(0);
      }
      this.iv = buffer;
      data = data.subarray(16);
    }
    this.buffer = new Uint8Array(16);
    this.bufferLength = 0;
    this.decryptBlock = this._decryptBlock2;
    return this.decryptBlock(data, finalize);
  }
  encrypt(data, iv) {
    const sourceLength = data.length;
    let buffer = this.buffer,
      bufferLength = this.bufferPosition;
    const result = [];
    iv ||= new Uint8Array(16);
    for (let i = 0; i < sourceLength; ++i) {
      buffer[bufferLength] = data[i];
      ++bufferLength;
      if (bufferLength < 16) {
        continue;
      }
      for (let j = 0; j < 16; ++j) {
        buffer[j] ^= iv[j];
      }
      const cipher = this._encrypt(buffer, this._key);
      iv = cipher;
      result.push(cipher);
      buffer = new Uint8Array(16);
      bufferLength = 0;
    }
    this.buffer = buffer;
    this.bufferLength = bufferLength;
    this.iv = iv;
    if (result.length === 0) {
      return new Uint8Array(0);
    }
    const outputLength = 16 * result.length;
    const output = new Uint8Array(outputLength);
    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {
      output.set(result[i], j);
    }
    return output;
  }
}
class AES128Cipher extends AESBaseCipher {
  _rcon = new Uint8Array([0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]);
  constructor(key) {
    super();
    this._cyclesOfRepetition = 10;
    this._keySize = 160;
    this._key = this._expandKey(key);
  }
  _expandKey(cipherKey) {
    const b = 176;
    const s = this._s;
    const rcon = this._rcon;
    const result = new Uint8Array(b);
    result.set(cipherKey);
    for (let j = 16, i = 1; j < b; ++i) {
      let t1 = result[j - 3];
      let t2 = result[j - 2];
      let t3 = result[j - 1];
      let t4 = result[j - 4];
      t1 = s[t1];
      t2 = s[t2];
      t3 = s[t3];
      t4 = s[t4];
      t1 ^= rcon[i];
      for (let n = 0; n < 4; ++n) {
        result[j] = t1 ^= result[j - 16];
        j++;
        result[j] = t2 ^= result[j - 16];
        j++;
        result[j] = t3 ^= result[j - 16];
        j++;
        result[j] = t4 ^= result[j - 16];
        j++;
      }
    }
    return result;
  }
}
class AES256Cipher extends AESBaseCipher {
  constructor(key) {
    super();
    this._cyclesOfRepetition = 14;
    this._keySize = 224;
    this._key = this._expandKey(key);
  }
  _expandKey(cipherKey) {
    const b = 240;
    const s = this._s;
    const result = new Uint8Array(b);
    result.set(cipherKey);
    let r = 1;
    let t1, t2, t3, t4;
    for (let j = 32, i = 1; j < b; ++i) {
      if (j % 32 === 16) {
        t1 = s[t1];
        t2 = s[t2];
        t3 = s[t3];
        t4 = s[t4];
      } else if (j % 32 === 0) {
        t1 = result[j - 3];
        t2 = result[j - 2];
        t3 = result[j - 1];
        t4 = result[j - 4];
        t1 = s[t1];
        t2 = s[t2];
        t3 = s[t3];
        t4 = s[t4];
        t1 ^= r;
        if ((r <<= 1) >= 256) {
          r = (r ^ 0x1b) & 0xff;
        }
      }
      for (let n = 0; n < 4; ++n) {
        result[j] = t1 ^= result[j - 32];
        j++;
        result[j] = t2 ^= result[j - 32];
        j++;
        result[j] = t3 ^= result[j - 32];
        j++;
        result[j] = t4 ^= result[j - 32];
        j++;
      }
    }
    return result;
  }
}
class PDFBase {
  _hash(password, input, userBytes) {
    unreachable("Abstract method \`_hash\` called");
  }
  checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {
    const hashData = new Uint8Array(password.length + 56);
    hashData.set(password, 0);
    hashData.set(ownerValidationSalt, password.length);
    hashData.set(userBytes, password.length + ownerValidationSalt.length);
    const result = this._hash(password, hashData, userBytes);
    return isArrayEqual(result, ownerPassword);
  }
  checkUserPassword(password, userValidationSalt, userPassword) {
    const hashData = new Uint8Array(password.length + 8);
    hashData.set(password, 0);
    hashData.set(userValidationSalt, password.length);
    const result = this._hash(password, hashData, []);
    return isArrayEqual(result, userPassword);
  }
  getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {
    const hashData = new Uint8Array(password.length + 56);
    hashData.set(password, 0);
    hashData.set(ownerKeySalt, password.length);
    hashData.set(userBytes, password.length + ownerKeySalt.length);
    const key = this._hash(password, hashData, userBytes);
    const cipher = new AES256Cipher(key);
    return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));
  }
  getUserKey(password, userKeySalt, userEncryption) {
    const hashData = new Uint8Array(password.length + 8);
    hashData.set(password, 0);
    hashData.set(userKeySalt, password.length);
    const key = this._hash(password, hashData, []);
    const cipher = new AES256Cipher(key);
    return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));
  }
}
class PDF17 extends PDFBase {
  _hash(password, input, userBytes) {
    return calculateSHA256(input, 0, input.length);
  }
}
class PDF20 extends PDFBase {
  _hash(password, input, userBytes) {
    let k = calculateSHA256(input, 0, input.length).subarray(0, 32);
    let e = [0];
    let i = 0;
    while (i < 64 || e.at(-1) > i - 32) {
      const combinedLength = password.length + k.length + userBytes.length,
        combinedArray = new Uint8Array(combinedLength);
      let writeOffset = 0;
      combinedArray.set(password, writeOffset);
      writeOffset += password.length;
      combinedArray.set(k, writeOffset);
      writeOffset += k.length;
      combinedArray.set(userBytes, writeOffset);
      const k1 = new Uint8Array(combinedLength * 64);
      for (let j = 0, pos = 0; j < 64; j++, pos += combinedLength) {
        k1.set(combinedArray, pos);
      }
      const cipher = new AES128Cipher(k.subarray(0, 16));
      e = cipher.encrypt(k1, k.subarray(16, 32));
      const remainder = Math.sumPrecise(e.slice(0, 16)) % 3;
      if (remainder === 0) {
        k = calculateSHA256(e, 0, e.length);
      } else if (remainder === 1) {
        k = calculateSHA384(e, 0, e.length);
      } else if (remainder === 2) {
        k = calculateSHA512(e, 0, e.length);
      }
      i++;
    }
    return k.subarray(0, 32);
  }
}
class CipherTransform {
  constructor(stringCipherConstructor, streamCipherConstructor) {
    this.StringCipherConstructor = stringCipherConstructor;
    this.StreamCipherConstructor = streamCipherConstructor;
  }
  createStream(stream, length) {
    const cipher = new this.StreamCipherConstructor();
    return new DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {
      return cipher.decryptBlock(data, finalize);
    });
  }
  decryptString(s) {
    const cipher = new this.StringCipherConstructor();
    let data = stringToBytes(s);
    data = cipher.decryptBlock(data, true);
    return bytesToString(data);
  }
  encryptString(s) {
    const cipher = new this.StringCipherConstructor();
    if (cipher instanceof AESBaseCipher) {
      const strLen = s.length;
      const pad = 16 - strLen % 16;
      s += String.fromCharCode(pad).repeat(pad);
      const iv = new Uint8Array(16);
      crypto.getRandomValues(iv);
      let data = stringToBytes(s);
      data = cipher.encrypt(data, iv);
      const buf = new Uint8Array(16 + data.length);
      buf.set(iv);
      buf.set(data, 16);
      return bytesToString(buf);
    }
    let data = stringToBytes(s);
    data = cipher.encrypt(data);
    return bytesToString(data);
  }
}
class CipherTransformFactory {
  static get _defaultPasswordBytes() {
    return shadow(this, "_defaultPasswordBytes", new Uint8Array([0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41, 0x64, 0x00, 0x4e, 0x56, 0xff, 0xfa, 0x01, 0x08, 0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80, 0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a]));
  }
  #createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {
    if (password) {
      const passwordLength = Math.min(127, password.length);
      password = password.subarray(0, passwordLength);
    } else {
      password = [];
    }
    const pdfAlgorithm = revision === 6 ? new PDF20() : new PDF17();
    if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {
      return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);
    } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {
      return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);
    }
    return null;
  }
  #prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {
    const hashDataSize = 40 + ownerPassword.length + fileId.length;
    const hashData = new Uint8Array(hashDataSize);
    let i = 0,
      j,
      n;
    if (password) {
      n = Math.min(32, password.length);
      for (; i < n; ++i) {
        hashData[i] = password[i];
      }
    }
    j = 0;
    while (i < 32) {
      hashData[i++] = CipherTransformFactory._defaultPasswordBytes[j++];
    }
    hashData.set(ownerPassword, i);
    i += ownerPassword.length;
    hashData[i++] = flags & 0xff;
    hashData[i++] = flags >> 8 & 0xff;
    hashData[i++] = flags >> 16 & 0xff;
    hashData[i++] = flags >>> 24 & 0xff;
    hashData.set(fileId, i);
    i += fileId.length;
    if (revision >= 4 && !encryptMetadata) {
      hashData.fill(0xff, i, i + 4);
      i += 4;
    }
    let hash = calculateMD5(hashData, 0, i);
    const keyLengthInBytes = keyLength >> 3;
    if (revision >= 3) {
      for (j = 0; j < 50; ++j) {
        hash = calculateMD5(hash, 0, keyLengthInBytes);
      }
    }
    const encryptionKey = hash.subarray(0, keyLengthInBytes);
    let cipher, checkData;
    if (revision >= 3) {
      i = 0;
      hashData.set(CipherTransformFactory._defaultPasswordBytes, i);
      i += 32;
      hashData.set(fileId, i);
      i += fileId.length;
      cipher = new ARCFourCipher(encryptionKey);
      checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));
      n = encryptionKey.length;
      const derivedKey = new Uint8Array(n);
      for (j = 1; j <= 19; ++j) {
        for (let k = 0; k < n; ++k) {
          derivedKey[k] = encryptionKey[k] ^ j;
        }
        cipher = new ARCFourCipher(derivedKey);
        checkData = cipher.encryptBlock(checkData);
      }
    } else {
      cipher = new ARCFourCipher(encryptionKey);
      checkData = cipher.encryptBlock(CipherTransformFactory._defaultPasswordBytes);
    }
    return checkData.every((data, k) => userPassword[k] === data) ? encryptionKey : null;
  }
  #decodeUserPassword(password, ownerPassword, revision, keyLength) {
    const hashData = new Uint8Array(32);
    let i = 0;
    const n = Math.min(32, password.length);
    for (; i < n; ++i) {
      hashData[i] = password[i];
    }
    let j = 0;
    while (i < 32) {
      hashData[i++] = CipherTransformFactory._defaultPasswordBytes[j++];
    }
    let hash = calculateMD5(hashData, 0, i);
    const keyLengthInBytes = keyLength >> 3;
    if (revision >= 3) {
      for (j = 0; j < 50; ++j) {
        hash = calculateMD5(hash, 0, hash.length);
      }
    }
    let cipher, userPassword;
    if (revision >= 3) {
      userPassword = ownerPassword;
      const derivedKey = new Uint8Array(keyLengthInBytes);
      for (j = 19; j >= 0; j--) {
        for (let k = 0; k < keyLengthInBytes; ++k) {
          derivedKey[k] = hash[k] ^ j;
        }
        cipher = new ARCFourCipher(derivedKey);
        userPassword = cipher.encryptBlock(userPassword);
      }
    } else {
      cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));
      userPassword = cipher.encryptBlock(ownerPassword);
    }
    return userPassword;
  }
  #buildObjectKey(num, gen, encryptionKey, isAes = false) {
    const n = encryptionKey.length;
    const key = new Uint8Array(n + 9);
    key.set(encryptionKey);
    let i = n;
    key[i++] = num & 0xff;
    key[i++] = num >> 8 & 0xff;
    key[i++] = num >> 16 & 0xff;
    key[i++] = gen & 0xff;
    key[i++] = gen >> 8 & 0xff;
    if (isAes) {
      key[i++] = 0x73;
      key[i++] = 0x41;
      key[i++] = 0x6c;
      key[i++] = 0x54;
    }
    const hash = calculateMD5(key, 0, i);
    return hash.subarray(0, Math.min(n + 5, 16));
  }
  #buildCipherConstructor(cf, name, num, gen, key) {
    if (!(name instanceof Name)) {
      throw new FormatError("Invalid crypt filter name.");
    }
    const self = this;
    const cryptFilter = cf.get(name.name);
    const cfm = cryptFilter?.get("CFM");
    if (!cfm || cfm.name === "None") {
      return function () {
        return new NullCipher();
      };
    }
    if (cfm.name === "V2") {
      return function () {
        return new ARCFourCipher(self.#buildObjectKey(num, gen, key, false));
      };
    }
    if (cfm.name === "AESV2") {
      return function () {
        return new AES128Cipher(self.#buildObjectKey(num, gen, key, true));
      };
    }
    if (cfm.name === "AESV3") {
      return function () {
        return new AES256Cipher(key);
      };
    }
    throw new FormatError("Unknown crypto method");
  }
  constructor(dict, fileId, password) {
    const filter = dict.get("Filter");
    if (!isName(filter, "Standard")) {
      throw new FormatError("unknown encryption method");
    }
    this.filterName = filter.name;
    this.dict = dict;
    const algorithm = dict.get("V");
    if (!Number.isInteger(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {
      throw new FormatError("unsupported encryption algorithm");
    }
    this.algorithm = algorithm;
    let keyLength = dict.get("Length");
    if (!keyLength) {
      if (algorithm <= 3) {
        keyLength = 40;
      } else {
        const cfDict = dict.get("CF");
        const streamCryptoName = dict.get("StmF");
        if (cfDict instanceof Dict && streamCryptoName instanceof Name) {
          cfDict.suppressEncryption = true;
          const handlerDict = cfDict.get(streamCryptoName.name);
          keyLength = handlerDict?.get("Length") || 128;
          if (keyLength < 40) {
            keyLength <<= 3;
          }
        }
      }
    }
    if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {
      throw new FormatError("invalid key length");
    }
    const ownerBytes = stringToBytes(dict.get("O")),
      userBytes = stringToBytes(dict.get("U"));
    const ownerPassword = ownerBytes.subarray(0, 32);
    const userPassword = userBytes.subarray(0, 32);
    const flags = dict.get("P");
    const revision = dict.get("R");
    const encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get("EncryptMetadata") !== false;
    this.encryptMetadata = encryptMetadata;
    const fileIdBytes = stringToBytes(fileId);
    let passwordBytes;
    if (password) {
      if (revision === 6) {
        try {
          password = utf8StringToString(password);
        } catch {
          warn("CipherTransformFactory: Unable to convert UTF8 encoded password.");
        }
      }
      passwordBytes = stringToBytes(password);
    }
    let encryptionKey;
    if (algorithm !== 5) {
      encryptionKey = this.#prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);
    } else {
      const ownerValidationSalt = ownerBytes.subarray(32, 40);
      const ownerKeySalt = ownerBytes.subarray(40, 48);
      const uBytes = userBytes.subarray(0, 48);
      const userValidationSalt = userBytes.subarray(32, 40);
      const userKeySalt = userBytes.subarray(40, 48);
      const ownerEncryption = stringToBytes(dict.get("OE"));
      const userEncryption = stringToBytes(dict.get("UE"));
      const perms = stringToBytes(dict.get("Perms"));
      encryptionKey = this.#createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);
    }
    if (!encryptionKey) {
      if (!password) {
        throw new PasswordException("No password given", PasswordResponses.NEED_PASSWORD);
      }
      const decodedPassword = this.#decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);
      encryptionKey = this.#prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);
    }
    if (!encryptionKey) {
      throw new PasswordException("Incorrect Password", PasswordResponses.INCORRECT_PASSWORD);
    }
    if (algorithm === 4 && encryptionKey.length < 16) {
      this.encryptionKey = new Uint8Array(16);
      this.encryptionKey.set(encryptionKey);
    } else {
      this.encryptionKey = encryptionKey;
    }
    if (algorithm >= 4) {
      const cf = dict.get("CF");
      if (cf instanceof Dict) {
        cf.suppressEncryption = true;
      }
      this.cf = cf;
      this.stmf = dict.get("StmF") || Name.get("Identity");
      this.strf = dict.get("StrF") || Name.get("Identity");
      this.eff = dict.get("EFF") || this.stmf;
    }
  }
  createCipherTransform(num, gen) {
    if (this.algorithm === 4 || this.algorithm === 5) {
      return new CipherTransform(this.#buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey), this.#buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey));
    }
    const key = this.#buildObjectKey(num, gen, this.encryptionKey, false);
    const cipherConstructor = function () {
      return new ARCFourCipher(key);
    };
    return new CipherTransform(cipherConstructor, cipherConstructor);
  }
}

;// ./src/core/xref.js






class XRef {
  #firstXRefStmPos = null;
  constructor(stream, pdfManager) {
    this.stream = stream;
    this.pdfManager = pdfManager;
    this.entries = [];
    this._xrefStms = new Set();
    this._cacheMap = new Map();
    this._pendingRefs = new RefSet();
    this._newPersistentRefNum = null;
    this._newTemporaryRefNum = null;
    this._persistentRefsCache = null;
  }
  getNewPersistentRef(obj) {
    if (this._newPersistentRefNum === null) {
      this._newPersistentRefNum = this.entries.length || 1;
    }
    const num = this._newPersistentRefNum++;
    this._cacheMap.set(num, obj);
    return Ref.get(num, 0);
  }
  getNewTemporaryRef() {
    if (this._newTemporaryRefNum === null) {
      this._newTemporaryRefNum = this.entries.length || 1;
      if (this._newPersistentRefNum) {
        this._persistentRefsCache = new Map();
        for (let i = this._newTemporaryRefNum; i < this._newPersistentRefNum; i++) {
          this._persistentRefsCache.set(i, this._cacheMap.get(i));
          this._cacheMap.delete(i);
        }
      }
    }
    return Ref.get(this._newTemporaryRefNum++, 0);
  }
  resetNewTemporaryRef() {
    this._newTemporaryRefNum = null;
    if (this._persistentRefsCache) {
      for (const [num, obj] of this._persistentRefsCache) {
        this._cacheMap.set(num, obj);
      }
    }
    this._persistentRefsCache = null;
  }
  setStartXRef(startXRef) {
    this.startXRefQueue = [startXRef];
  }
  parse(recoveryMode = false) {
    let trailerDict;
    if (!recoveryMode) {
      trailerDict = this.readXRef();
    } else {
      warn("Indexing all PDF objects");
      trailerDict = this.indexObjects();
    }
    trailerDict.assignXref(this);
    this.trailer = trailerDict;
    let encrypt;
    try {
      encrypt = trailerDict.get("Encrypt");
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn(\`XRef.parse - Invalid "Encrypt" reference: "\${ex}".\`);
    }
    if (encrypt instanceof Dict) {
      const ids = trailerDict.get("ID");
      const fileId = ids?.length ? ids[0] : "";
      encrypt.suppressEncryption = true;
      this.encrypt = new CipherTransformFactory(encrypt, fileId, this.pdfManager.password);
    }
    let root;
    try {
      root = trailerDict.get("Root");
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn(\`XRef.parse - Invalid "Root" reference: "\${ex}".\`);
    }
    if (root instanceof Dict) {
      try {
        const pages = root.get("Pages");
        if (pages instanceof Dict) {
          this.root = root;
          return;
        }
      } catch (ex) {
        if (ex instanceof MissingDataException) {
          throw ex;
        }
        warn(\`XRef.parse - Invalid "Pages" reference: "\${ex}".\`);
      }
    }
    if (!recoveryMode) {
      throw new XRefParseException();
    }
    throw new InvalidPDFException("Invalid Root reference.");
  }
  processXRefTable(parser) {
    if (!("tableState" in this)) {
      this.tableState = {
        entryNum: 0,
        streamPos: parser.lexer.stream.pos,
        parserBuf1: parser.buf1,
        parserBuf2: parser.buf2
      };
    }
    const obj = this.readXRefTable(parser);
    if (!isCmd(obj, "trailer")) {
      throw new FormatError("Invalid XRef table: could not find trailer dictionary");
    }
    let dict = parser.getObj();
    if (!(dict instanceof Dict) && dict.dict) {
      dict = dict.dict;
    }
    if (!(dict instanceof Dict)) {
      throw new FormatError("Invalid XRef table: could not parse trailer dictionary");
    }
    delete this.tableState;
    return dict;
  }
  readXRefTable(parser) {
    const stream = parser.lexer.stream;
    const tableState = this.tableState;
    stream.pos = tableState.streamPos;
    parser.buf1 = tableState.parserBuf1;
    parser.buf2 = tableState.parserBuf2;
    let obj;
    while (true) {
      if (!("firstEntryNum" in tableState) || !("entryCount" in tableState)) {
        if (isCmd(obj = parser.getObj(), "trailer")) {
          break;
        }
        tableState.firstEntryNum = obj;
        tableState.entryCount = parser.getObj();
      }
      let first = tableState.firstEntryNum;
      const count = tableState.entryCount;
      if (!Number.isInteger(first) || !Number.isInteger(count)) {
        throw new FormatError("Invalid XRef table: wrong types in subsection header");
      }
      for (let i = tableState.entryNum; i < count; i++) {
        tableState.streamPos = stream.pos;
        tableState.entryNum = i;
        tableState.parserBuf1 = parser.buf1;
        tableState.parserBuf2 = parser.buf2;
        const entry = {};
        entry.offset = parser.getObj();
        entry.gen = parser.getObj();
        const type = parser.getObj();
        if (type instanceof Cmd) {
          switch (type.cmd) {
            case "f":
              entry.free = true;
              break;
            case "n":
              entry.uncompressed = true;
              break;
          }
        }
        if (!Number.isInteger(entry.offset) || !Number.isInteger(entry.gen) || !(entry.free || entry.uncompressed)) {
          throw new FormatError(\`Invalid entry in XRef subsection: \${first}, \${count}\`);
        }
        if (i === 0 && entry.free && first === 1) {
          first = 0;
        }
        if (!this.entries[i + first]) {
          this.entries[i + first] = entry;
        }
      }
      tableState.entryNum = 0;
      tableState.streamPos = stream.pos;
      tableState.parserBuf1 = parser.buf1;
      tableState.parserBuf2 = parser.buf2;
      delete tableState.firstEntryNum;
      delete tableState.entryCount;
    }
    if (this.entries[0] && !this.entries[0].free) {
      throw new FormatError("Invalid XRef table: unexpected first object");
    }
    return obj;
  }
  processXRefStream(stream) {
    if (!("streamState" in this)) {
      const {
        dict,
        pos
      } = stream;
      const byteWidths = dict.get("W");
      const range = dict.get("Index") || [0, dict.get("Size")];
      this.streamState = {
        entryRanges: range,
        byteWidths,
        entryNum: 0,
        streamPos: pos
      };
    }
    this.readXRefStream(stream);
    delete this.streamState;
    return stream.dict;
  }
  readXRefStream(stream) {
    const streamState = this.streamState;
    stream.pos = streamState.streamPos;
    const [typeFieldWidth, offsetFieldWidth, generationFieldWidth] = streamState.byteWidths;
    const entryRanges = streamState.entryRanges;
    while (entryRanges.length > 0) {
      const [first, n] = entryRanges;
      if (!Number.isInteger(first) || !Number.isInteger(n)) {
        throw new FormatError(\`Invalid XRef range fields: \${first}, \${n}\`);
      }
      if (!Number.isInteger(typeFieldWidth) || !Number.isInteger(offsetFieldWidth) || !Number.isInteger(generationFieldWidth)) {
        throw new FormatError(\`Invalid XRef entry fields length: \${first}, \${n}\`);
      }
      for (let i = streamState.entryNum; i < n; ++i) {
        streamState.entryNum = i;
        streamState.streamPos = stream.pos;
        let type = 0,
          offset = 0,
          generation = 0;
        for (let j = 0; j < typeFieldWidth; ++j) {
          const typeByte = stream.getByte();
          if (typeByte === -1) {
            throw new FormatError("Invalid XRef byteWidths 'type'.");
          }
          type = type << 8 | typeByte;
        }
        if (typeFieldWidth === 0) {
          type = 1;
        }
        for (let j = 0; j < offsetFieldWidth; ++j) {
          const offsetByte = stream.getByte();
          if (offsetByte === -1) {
            throw new FormatError("Invalid XRef byteWidths 'offset'.");
          }
          offset = offset << 8 | offsetByte;
        }
        for (let j = 0; j < generationFieldWidth; ++j) {
          const generationByte = stream.getByte();
          if (generationByte === -1) {
            throw new FormatError("Invalid XRef byteWidths 'generation'.");
          }
          generation = generation << 8 | generationByte;
        }
        const entry = {};
        entry.offset = offset;
        entry.gen = generation;
        switch (type) {
          case 0:
            entry.free = true;
            break;
          case 1:
            entry.uncompressed = true;
            break;
          case 2:
            break;
          default:
            throw new FormatError(\`Invalid XRef entry type: \${type}\`);
        }
        if (!this.entries[first + i]) {
          this.entries[first + i] = entry;
        }
      }
      streamState.entryNum = 0;
      streamState.streamPos = stream.pos;
      entryRanges.splice(0, 2);
    }
  }
  indexObjects() {
    const TAB = 0x9,
      LF = 0xa,
      CR = 0xd,
      SPACE = 0x20;
    const PERCENT = 0x25,
      LT = 0x3c;
    function readToken(data, offset) {
      let token = "",
        ch = data[offset];
      while (ch !== LF && ch !== CR && ch !== LT) {
        if (++offset >= data.length) {
          break;
        }
        token += String.fromCharCode(ch);
        ch = data[offset];
      }
      return token;
    }
    function skipUntil(data, offset, what) {
      const length = what.length,
        dataLength = data.length;
      let skipped = 0;
      while (offset < dataLength) {
        let i = 0;
        while (i < length && data[offset + i] === what[i]) {
          ++i;
        }
        if (i >= length) {
          break;
        }
        offset++;
        skipped++;
      }
      return skipped;
    }
    const gEndobjRegExp = /\\b(endobj|\\d+\\s+\\d+\\s+obj|xref|trailer\\s*<<)\\b/g;
    const gStartxrefRegExp = /\\b(startxref|\\d+\\s+\\d+\\s+obj)\\b/g;
    const objRegExp = /^(\\d+)\\s+(\\d+)\\s+obj\\b/;
    const trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);
    const startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);
    const xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);
    this.entries.length = 0;
    this._cacheMap.clear();
    const stream = this.stream;
    stream.pos = 0;
    const buffer = stream.getBytes(),
      bufferStr = bytesToString(buffer),
      length = buffer.length;
    let position = stream.start;
    const trailers = [],
      xrefStms = [];
    while (position < length) {
      let ch = buffer[position];
      if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {
        ++position;
        continue;
      }
      if (ch === PERCENT) {
        do {
          ++position;
          if (position >= length) {
            break;
          }
          ch = buffer[position];
        } while (ch !== LF && ch !== CR);
        continue;
      }
      const token = readToken(buffer, position);
      let m;
      if (token.startsWith("xref") && (token.length === 4 || /\\s/.test(token[4]))) {
        position += skipUntil(buffer, position, trailerBytes);
        trailers.push(position);
        position += skipUntil(buffer, position, startxrefBytes);
      } else if (m = objRegExp.exec(token)) {
        const num = m[1] | 0,
          gen = m[2] | 0;
        const startPos = position + token.length;
        let contentLength,
          updateEntries = false;
        if (!this.entries[num]) {
          updateEntries = true;
        } else if (this.entries[num].gen === gen) {
          try {
            const parser = new Parser({
              lexer: new Lexer(stream.makeSubStream(startPos))
            });
            parser.getObj();
            updateEntries = true;
          } catch (ex) {
            if (ex instanceof ParserEOFException) {
              warn(\`indexObjects -- checking object (\${token}): "\${ex}".\`);
            } else {
              updateEntries = true;
            }
          }
        }
        if (updateEntries) {
          this.entries[num] = {
            offset: position - stream.start,
            gen,
            uncompressed: true
          };
        }
        gEndobjRegExp.lastIndex = startPos;
        const match = gEndobjRegExp.exec(bufferStr);
        if (match) {
          const endPos = gEndobjRegExp.lastIndex + 1;
          contentLength = endPos - position;
          if (match[1] !== "endobj") {
            warn(\`indexObjects: Found "\${match[1]}" inside of another "obj", \` + 'caused by missing "endobj" -- trying to recover.');
            contentLength -= match[1].length + 1;
          }
        } else {
          contentLength = length - position;
        }
        const content = buffer.subarray(position, position + contentLength);
        const xrefTagOffset = skipUntil(content, 0, xrefBytes);
        if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {
          xrefStms.push(position - stream.start);
          this._xrefStms.add(position - stream.start);
        }
        position += contentLength;
      } else if (token.startsWith("trailer") && (token.length === 7 || /\\s/.test(token[7]))) {
        trailers.push(position);
        const startPos = position + token.length;
        let contentLength;
        gStartxrefRegExp.lastIndex = startPos;
        const match = gStartxrefRegExp.exec(bufferStr);
        if (match) {
          const endPos = gStartxrefRegExp.lastIndex + 1;
          contentLength = endPos - position;
          if (match[1] !== "startxref") {
            warn(\`indexObjects: Found "\${match[1]}" after "trailer", \` + 'caused by missing "startxref" -- trying to recover.');
            contentLength -= match[1].length + 1;
          }
        } else {
          contentLength = length - position;
        }
        position += contentLength;
      } else {
        position += token.length + 1;
      }
    }
    for (const xrefStm of xrefStms) {
      this.startXRefQueue.push(xrefStm);
      this.readXRef(true);
    }
    const trailerDicts = [];
    let isEncrypted = false;
    for (const trailer of trailers) {
      stream.pos = trailer;
      const parser = new Parser({
        lexer: new Lexer(stream),
        xref: this,
        allowStreams: true,
        recoveryMode: true
      });
      const obj = parser.getObj();
      if (!isCmd(obj, "trailer")) {
        continue;
      }
      const dict = parser.getObj();
      if (!(dict instanceof Dict)) {
        continue;
      }
      trailerDicts.push(dict);
      if (dict.has("Encrypt")) {
        isEncrypted = true;
      }
    }
    let trailerDict, trailerError;
    for (const dict of [...trailerDicts, "genFallback", ...trailerDicts]) {
      if (dict === "genFallback") {
        if (!trailerError) {
          break;
        }
        this._generationFallback = true;
        continue;
      }
      let validPagesDict = false;
      try {
        const rootDict = dict.get("Root");
        if (!(rootDict instanceof Dict)) {
          continue;
        }
        const pagesDict = rootDict.get("Pages");
        if (!(pagesDict instanceof Dict)) {
          continue;
        }
        const pagesCount = pagesDict.get("Count");
        if (Number.isInteger(pagesCount)) {
          validPagesDict = true;
        }
      } catch (ex) {
        trailerError = ex;
        continue;
      }
      if (validPagesDict && (!isEncrypted || dict.has("Encrypt")) && dict.has("ID")) {
        return dict;
      }
      trailerDict = dict;
    }
    if (trailerDict) {
      return trailerDict;
    }
    if (this.topDict) {
      return this.topDict;
    }
    if (!trailerDicts.length) {
      for (const [num, entry] of this.entries.entries()) {
        if (!entry) {
          continue;
        }
        const ref = Ref.get(num, entry.gen);
        let obj;
        try {
          obj = this.fetch(ref);
        } catch {
          continue;
        }
        if (obj instanceof BaseStream) {
          obj = obj.dict;
        }
        if (obj instanceof Dict && obj.has("Root")) {
          return obj;
        }
      }
    }
    throw new InvalidPDFException("Invalid PDF structure.");
  }
  readXRef(recoveryMode = false) {
    const stream = this.stream;
    const startXRefParsedCache = new Set();
    while (this.startXRefQueue.length) {
      try {
        const startXRef = this.startXRefQueue[0];
        if (startXRefParsedCache.has(startXRef)) {
          warn("readXRef - skipping XRef table since it was already parsed.");
          this.startXRefQueue.shift();
          continue;
        }
        startXRefParsedCache.add(startXRef);
        stream.pos = startXRef + stream.start;
        const parser = new Parser({
          lexer: new Lexer(stream),
          xref: this,
          allowStreams: true
        });
        let obj = parser.getObj();
        let dict;
        if (isCmd(obj, "xref")) {
          dict = this.processXRefTable(parser);
          if (!this.topDict) {
            this.topDict = dict;
          }
          obj = dict.get("XRefStm");
          if (Number.isInteger(obj) && !this._xrefStms.has(obj)) {
            this._xrefStms.add(obj);
            this.startXRefQueue.push(obj);
            this.#firstXRefStmPos ??= obj;
          }
        } else if (Number.isInteger(obj)) {
          if (!Number.isInteger(parser.getObj()) || !isCmd(parser.getObj(), "obj") || !((obj = parser.getObj()) instanceof BaseStream)) {
            throw new FormatError("Invalid XRef stream");
          }
          dict = this.processXRefStream(obj);
          if (!this.topDict) {
            this.topDict = dict;
          }
          if (!dict) {
            throw new FormatError("Failed to read XRef stream");
          }
        } else {
          throw new FormatError("Invalid XRef stream header");
        }
        obj = dict.get("Prev");
        if (Number.isInteger(obj)) {
          this.startXRefQueue.push(obj);
        } else if (obj instanceof Ref) {
          this.startXRefQueue.push(obj.num);
        }
      } catch (e) {
        if (e instanceof MissingDataException) {
          throw e;
        }
        info("(while reading XRef): " + e);
      }
      this.startXRefQueue.shift();
    }
    if (this.topDict) {
      return this.topDict;
    }
    if (recoveryMode) {
      return undefined;
    }
    throw new XRefParseException();
  }
  get lastXRefStreamPos() {
    return this.#firstXRefStmPos ?? (this._xrefStms.size > 0 ? Math.max(...this._xrefStms) : null);
  }
  getEntry(i) {
    const xrefEntry = this.entries[i];
    if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {
      return xrefEntry;
    }
    return null;
  }
  fetchIfRef(obj, suppressEncryption = false) {
    if (obj instanceof Ref) {
      return this.fetch(obj, suppressEncryption);
    }
    return obj;
  }
  fetch(ref, suppressEncryption = false) {
    if (!(ref instanceof Ref)) {
      throw new Error("ref object is not a reference");
    }
    const num = ref.num;
    const cacheEntry = this._cacheMap.get(num);
    if (cacheEntry !== undefined) {
      if (cacheEntry instanceof Dict && !cacheEntry.objId) {
        cacheEntry.objId = ref.toString();
      }
      return cacheEntry;
    }
    let xrefEntry = this.getEntry(num);
    if (xrefEntry === null) {
      return xrefEntry;
    }
    if (this._pendingRefs.has(ref)) {
      this._pendingRefs.remove(ref);
      warn(\`Ignoring circular reference: \${ref}.\`);
      return CIRCULAR_REF;
    }
    this._pendingRefs.put(ref);
    try {
      xrefEntry = xrefEntry.uncompressed ? this.fetchUncompressed(ref, xrefEntry, suppressEncryption) : this.fetchCompressed(ref, xrefEntry, suppressEncryption);
      this._pendingRefs.remove(ref);
    } catch (ex) {
      this._pendingRefs.remove(ref);
      throw ex;
    }
    if (xrefEntry instanceof Dict) {
      xrefEntry.objId = ref.toString();
    } else if (xrefEntry instanceof BaseStream) {
      xrefEntry.dict.objId = ref.toString();
    }
    return xrefEntry;
  }
  fetchUncompressed(ref, xrefEntry, suppressEncryption = false) {
    const gen = ref.gen;
    let num = ref.num;
    if (xrefEntry.gen !== gen) {
      const msg = \`Inconsistent generation in XRef: \${ref}\`;
      if (this._generationFallback && xrefEntry.gen < gen) {
        warn(msg);
        return this.fetchUncompressed(Ref.get(num, xrefEntry.gen), xrefEntry, suppressEncryption);
      }
      throw new XRefEntryException(msg);
    }
    const stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);
    const parser = new Parser({
      lexer: new Lexer(stream),
      xref: this,
      allowStreams: true
    });
    const obj1 = parser.getObj();
    const obj2 = parser.getObj();
    const obj3 = parser.getObj();
    if (obj1 !== num || obj2 !== gen || !(obj3 instanceof Cmd)) {
      throw new XRefEntryException(\`Bad (uncompressed) XRef entry: \${ref}\`);
    }
    if (obj3.cmd !== "obj") {
      if (obj3.cmd.startsWith("obj")) {
        num = parseInt(obj3.cmd.substring(3), 10);
        if (!Number.isNaN(num)) {
          return num;
        }
      }
      throw new XRefEntryException(\`Bad (uncompressed) XRef entry: \${ref}\`);
    }
    xrefEntry = this.encrypt && !suppressEncryption ? parser.getObj(this.encrypt.createCipherTransform(num, gen)) : parser.getObj();
    if (!(xrefEntry instanceof BaseStream)) {
      this._cacheMap.set(num, xrefEntry);
    }
    return xrefEntry;
  }
  fetchCompressed(ref, xrefEntry, suppressEncryption = false) {
    const tableOffset = xrefEntry.offset;
    const stream = this.fetch(Ref.get(tableOffset, 0));
    if (!(stream instanceof BaseStream)) {
      throw new FormatError("bad ObjStm stream");
    }
    const first = stream.dict.get("First");
    const n = stream.dict.get("N");
    if (!Number.isInteger(first) || !Number.isInteger(n)) {
      throw new FormatError("invalid first and n parameters for ObjStm stream");
    }
    let parser = new Parser({
      lexer: new Lexer(stream),
      xref: this,
      allowStreams: true
    });
    const nums = new Array(n);
    const offsets = new Array(n);
    for (let i = 0; i < n; ++i) {
      const num = parser.getObj();
      if (!Number.isInteger(num)) {
        throw new FormatError(\`invalid object number in the ObjStm stream: \${num}\`);
      }
      const offset = parser.getObj();
      if (!Number.isInteger(offset)) {
        throw new FormatError(\`invalid object offset in the ObjStm stream: \${offset}\`);
      }
      nums[i] = num;
      offsets[i] = offset;
    }
    const start = (stream.start || 0) + first;
    const entries = new Array(n);
    for (let i = 0; i < n; ++i) {
      const length = i < n - 1 ? offsets[i + 1] - offsets[i] : undefined;
      if (length < 0) {
        throw new FormatError("Invalid offset in the ObjStm stream.");
      }
      parser = new Parser({
        lexer: new Lexer(stream.makeSubStream(start + offsets[i], length, stream.dict)),
        xref: this,
        allowStreams: true
      });
      const obj = parser.getObj();
      entries[i] = obj;
      if (obj instanceof BaseStream) {
        continue;
      }
      const num = nums[i],
        entry = this.entries[num];
      if (entry && entry.offset === tableOffset && entry.gen === i) {
        this._cacheMap.set(num, obj);
      }
    }
    xrefEntry = entries[xrefEntry.gen];
    if (xrefEntry === undefined) {
      throw new XRefEntryException(\`Bad (compressed) XRef entry: \${ref}\`);
    }
    return xrefEntry;
  }
  async fetchIfRefAsync(obj, suppressEncryption) {
    if (obj instanceof Ref) {
      return this.fetchAsync(obj, suppressEncryption);
    }
    return obj;
  }
  async fetchAsync(ref, suppressEncryption) {
    try {
      return this.fetch(ref, suppressEncryption);
    } catch (ex) {
      if (!(ex instanceof MissingDataException)) {
        throw ex;
      }
      await this.pdfManager.requestRange(ex.begin, ex.end);
      return this.fetchAsync(ref, suppressEncryption);
    }
  }
  getCatalogObj() {
    return this.root;
  }
}

;// ./src/core/document.js



















const LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];
class Page {
  constructor({
    pdfManager,
    xref,
    pageIndex,
    pageDict,
    ref,
    globalIdFactory,
    fontCache,
    builtInCMapCache,
    standardFontDataCache,
    globalColorSpaceCache,
    globalImageCache,
    systemFontCache,
    nonBlendModesSet,
    xfaFactory
  }) {
    this.pdfManager = pdfManager;
    this.pageIndex = pageIndex;
    this.pageDict = pageDict;
    this.xref = xref;
    this.ref = ref;
    this.fontCache = fontCache;
    this.builtInCMapCache = builtInCMapCache;
    this.standardFontDataCache = standardFontDataCache;
    this.globalColorSpaceCache = globalColorSpaceCache;
    this.globalImageCache = globalImageCache;
    this.systemFontCache = systemFontCache;
    this.nonBlendModesSet = nonBlendModesSet;
    this.evaluatorOptions = pdfManager.evaluatorOptions;
    this.resourcesPromise = null;
    this.xfaFactory = xfaFactory;
    const idCounters = {
      obj: 0
    };
    this._localIdFactory = class extends globalIdFactory {
      static createObjId() {
        return \`p\${pageIndex}_\${++idCounters.obj}\`;
      }
      static getPageObjId() {
        return \`p\${ref.toString()}\`;
      }
    };
  }
  _getInheritableProperty(key, getArray = false) {
    const value = getInheritableProperty({
      dict: this.pageDict,
      key,
      getArray,
      stopWhenFound: false
    });
    if (!Array.isArray(value)) {
      return value;
    }
    if (value.length === 1 || !(value[0] instanceof Dict)) {
      return value[0];
    }
    return Dict.merge({
      xref: this.xref,
      dictArray: value
    });
  }
  get content() {
    return this.pageDict.getArray("Contents");
  }
  get resources() {
    const resources = this._getInheritableProperty("Resources");
    return shadow(this, "resources", resources instanceof Dict ? resources : Dict.empty);
  }
  _getBoundingBox(name) {
    if (this.xfaData) {
      return this.xfaData.bbox;
    }
    const box = lookupNormalRect(this._getInheritableProperty(name, true), null);
    if (box) {
      if (box[2] - box[0] > 0 && box[3] - box[1] > 0) {
        return box;
      }
      warn(\`Empty, or invalid, /\${name} entry.\`);
    }
    return null;
  }
  get mediaBox() {
    return shadow(this, "mediaBox", this._getBoundingBox("MediaBox") || LETTER_SIZE_MEDIABOX);
  }
  get cropBox() {
    return shadow(this, "cropBox", this._getBoundingBox("CropBox") || this.mediaBox);
  }
  get userUnit() {
    const obj = this.pageDict.get("UserUnit");
    return shadow(this, "userUnit", typeof obj === "number" && obj > 0 ? obj : 1.0);
  }
  get view() {
    const {
      cropBox,
      mediaBox
    } = this;
    if (cropBox !== mediaBox && !isArrayEqual(cropBox, mediaBox)) {
      const box = Util.intersect(cropBox, mediaBox);
      if (box && box[2] - box[0] > 0 && box[3] - box[1] > 0) {
        return shadow(this, "view", box);
      }
      warn("Empty /CropBox and /MediaBox intersection.");
    }
    return shadow(this, "view", mediaBox);
  }
  get rotate() {
    let rotate = this._getInheritableProperty("Rotate") || 0;
    if (rotate % 90 !== 0) {
      rotate = 0;
    } else if (rotate >= 360) {
      rotate %= 360;
    } else if (rotate < 0) {
      rotate = (rotate % 360 + 360) % 360;
    }
    return shadow(this, "rotate", rotate);
  }
  _onSubStreamError(reason, objId) {
    if (this.evaluatorOptions.ignoreErrors) {
      warn(\`getContentStream - ignoring sub-stream (\${objId}): "\${reason}".\`);
      return;
    }
    throw reason;
  }
  async getContentStream() {
    const content = await this.pdfManager.ensure(this, "content");
    if (content instanceof BaseStream) {
      return content;
    }
    if (Array.isArray(content)) {
      return new StreamsSequenceStream(content, this._onSubStreamError.bind(this));
    }
    return new NullStream();
  }
  get xfaData() {
    return shadow(this, "xfaData", this.xfaFactory ? {
      bbox: this.xfaFactory.getBoundingBox(this.pageIndex)
    } : null);
  }
  async #replaceIdByRef(annotations, deletedAnnotations, existingAnnotations) {
    const promises = [];
    for (const annotation of annotations) {
      if (annotation.id) {
        const ref = Ref.fromString(annotation.id);
        if (!ref) {
          warn(\`A non-linked annotation cannot be modified: \${annotation.id}\`);
          continue;
        }
        if (annotation.deleted) {
          deletedAnnotations.put(ref, ref);
          if (annotation.popupRef) {
            const popupRef = Ref.fromString(annotation.popupRef);
            if (popupRef) {
              deletedAnnotations.put(popupRef, popupRef);
            }
          }
          continue;
        }
        existingAnnotations?.put(ref);
        annotation.ref = ref;
        promises.push(this.xref.fetchAsync(ref).then(obj => {
          if (obj instanceof Dict) {
            annotation.oldAnnotation = obj.clone();
          }
        }, () => {
          warn(\`Cannot fetch \\\`oldAnnotation\\\` for: \${ref}.\`);
        }));
        delete annotation.id;
      }
    }
    await Promise.all(promises);
  }
  async saveNewAnnotations(handler, task, annotations, imagePromises, changes) {
    if (this.xfaFactory) {
      throw new Error("XFA: Cannot save new annotations.");
    }
    const partialEvaluator = new PartialEvaluator({
      xref: this.xref,
      handler,
      pageIndex: this.pageIndex,
      idFactory: this._localIdFactory,
      fontCache: this.fontCache,
      builtInCMapCache: this.builtInCMapCache,
      standardFontDataCache: this.standardFontDataCache,
      globalColorSpaceCache: this.globalColorSpaceCache,
      globalImageCache: this.globalImageCache,
      systemFontCache: this.systemFontCache,
      options: this.evaluatorOptions
    });
    const deletedAnnotations = new RefSetCache();
    const existingAnnotations = new RefSet();
    await this.#replaceIdByRef(annotations, deletedAnnotations, existingAnnotations);
    const pageDict = this.pageDict;
    const annotationsArray = this.annotations.filter(a => !(a instanceof Ref && deletedAnnotations.has(a)));
    const newData = await AnnotationFactory.saveNewAnnotations(partialEvaluator, task, annotations, imagePromises, changes);
    for (const {
      ref
    } of newData.annotations) {
      if (ref instanceof Ref && !existingAnnotations.has(ref)) {
        annotationsArray.push(ref);
      }
    }
    const dict = pageDict.clone();
    dict.set("Annots", annotationsArray);
    changes.put(this.ref, {
      data: dict
    });
    for (const deletedRef of deletedAnnotations) {
      changes.put(deletedRef, {
        data: null
      });
    }
  }
  async save(handler, task, annotationStorage, changes) {
    const partialEvaluator = new PartialEvaluator({
      xref: this.xref,
      handler,
      pageIndex: this.pageIndex,
      idFactory: this._localIdFactory,
      fontCache: this.fontCache,
      builtInCMapCache: this.builtInCMapCache,
      standardFontDataCache: this.standardFontDataCache,
      globalColorSpaceCache: this.globalColorSpaceCache,
      globalImageCache: this.globalImageCache,
      systemFontCache: this.systemFontCache,
      options: this.evaluatorOptions
    });
    const annotations = await this._parsedAnnotations;
    const promises = [];
    for (const annotation of annotations) {
      promises.push(annotation.save(partialEvaluator, task, annotationStorage, changes).catch(function (reason) {
        warn("save - ignoring annotation data during " + \`"\${task.name}" task: "\${reason}".\`);
        return null;
      }));
    }
    return Promise.all(promises);
  }
  async loadResources(keys) {
    await (this.resourcesPromise ??= this.pdfManager.ensure(this, "resources"));
    const objectLoader = new ObjectLoader(this.resources, keys, this.xref);
    await objectLoader.load();
  }
  async getOperatorList({
    handler,
    sink,
    task,
    intent,
    cacheKey,
    annotationStorage = null,
    modifiedIds = null
  }) {
    const contentStreamPromise = this.getContentStream();
    const resourcesPromise = this.loadResources(["ColorSpace", "ExtGState", "Font", "Pattern", "Properties", "Shading", "XObject"]);
    const partialEvaluator = new PartialEvaluator({
      xref: this.xref,
      handler,
      pageIndex: this.pageIndex,
      idFactory: this._localIdFactory,
      fontCache: this.fontCache,
      builtInCMapCache: this.builtInCMapCache,
      standardFontDataCache: this.standardFontDataCache,
      globalColorSpaceCache: this.globalColorSpaceCache,
      globalImageCache: this.globalImageCache,
      systemFontCache: this.systemFontCache,
      options: this.evaluatorOptions
    });
    const newAnnotsByPage = !this.xfaFactory ? getNewAnnotationsMap(annotationStorage) : null;
    const newAnnots = newAnnotsByPage?.get(this.pageIndex);
    let newAnnotationsPromise = Promise.resolve(null);
    let deletedAnnotations = null;
    if (newAnnots) {
      const annotationGlobalsPromise = this.pdfManager.ensureDoc("annotationGlobals");
      let imagePromises;
      const missingBitmaps = new Set();
      for (const {
        bitmapId,
        bitmap
      } of newAnnots) {
        if (bitmapId && !bitmap && !missingBitmaps.has(bitmapId)) {
          missingBitmaps.add(bitmapId);
        }
      }
      const {
        isOffscreenCanvasSupported
      } = this.evaluatorOptions;
      if (missingBitmaps.size > 0) {
        const annotationWithBitmaps = newAnnots.slice();
        for (const [key, annotation] of annotationStorage) {
          if (!key.startsWith(AnnotationEditorPrefix)) {
            continue;
          }
          if (annotation.bitmap && missingBitmaps.has(annotation.bitmapId)) {
            annotationWithBitmaps.push(annotation);
          }
        }
        imagePromises = AnnotationFactory.generateImages(annotationWithBitmaps, this.xref, isOffscreenCanvasSupported);
      } else {
        imagePromises = AnnotationFactory.generateImages(newAnnots, this.xref, isOffscreenCanvasSupported);
      }
      deletedAnnotations = new RefSet();
      newAnnotationsPromise = Promise.all([annotationGlobalsPromise, this.#replaceIdByRef(newAnnots, deletedAnnotations, null)]).then(([annotationGlobals]) => {
        if (!annotationGlobals) {
          return null;
        }
        return AnnotationFactory.printNewAnnotations(annotationGlobals, partialEvaluator, task, newAnnots, imagePromises);
      });
    }
    const pageListPromise = Promise.all([contentStreamPromise, resourcesPromise]).then(async ([contentStream]) => {
      const opList = new OperatorList(intent, sink);
      handler.send("StartRenderPage", {
        transparency: partialEvaluator.hasBlendModes(this.resources, this.nonBlendModesSet),
        pageIndex: this.pageIndex,
        cacheKey
      });
      await partialEvaluator.getOperatorList({
        stream: contentStream,
        task,
        resources: this.resources,
        operatorList: opList
      });
      return opList;
    });
    let [pageOpList, annotations, newAnnotations] = await Promise.all([pageListPromise, this._parsedAnnotations, newAnnotationsPromise]);
    if (newAnnotations) {
      annotations = annotations.filter(a => !(a.ref && deletedAnnotations.has(a.ref)));
      for (let i = 0, ii = newAnnotations.length; i < ii; i++) {
        const newAnnotation = newAnnotations[i];
        if (newAnnotation.refToReplace) {
          const j = annotations.findIndex(a => a.ref && isRefsEqual(a.ref, newAnnotation.refToReplace));
          if (j >= 0) {
            annotations.splice(j, 1, newAnnotation);
            newAnnotations.splice(i--, 1);
            ii--;
          }
        }
      }
      annotations = annotations.concat(newAnnotations);
    }
    if (annotations.length === 0 || intent & RenderingIntentFlag.ANNOTATIONS_DISABLE) {
      pageOpList.flush(true);
      return {
        length: pageOpList.totalLength
      };
    }
    const renderForms = !!(intent & RenderingIntentFlag.ANNOTATIONS_FORMS),
      isEditing = !!(intent & RenderingIntentFlag.IS_EDITING),
      intentAny = !!(intent & RenderingIntentFlag.ANY),
      intentDisplay = !!(intent & RenderingIntentFlag.DISPLAY),
      intentPrint = !!(intent & RenderingIntentFlag.PRINT);
    const opListPromises = [];
    for (const annotation of annotations) {
      if (intentAny || intentDisplay && annotation.mustBeViewed(annotationStorage, renderForms) && annotation.mustBeViewedWhenEditing(isEditing, modifiedIds) || intentPrint && annotation.mustBePrinted(annotationStorage)) {
        opListPromises.push(annotation.getOperatorList(partialEvaluator, task, intent, annotationStorage).catch(function (reason) {
          warn("getOperatorList - ignoring annotation data during " + \`"\${task.name}" task: "\${reason}".\`);
          return {
            opList: null,
            separateForm: false,
            separateCanvas: false
          };
        }));
      }
    }
    const opLists = await Promise.all(opListPromises);
    let form = false,
      canvas = false;
    for (const {
      opList,
      separateForm,
      separateCanvas
    } of opLists) {
      pageOpList.addOpList(opList);
      form ||= separateForm;
      canvas ||= separateCanvas;
    }
    pageOpList.flush(true, {
      form,
      canvas
    });
    return {
      length: pageOpList.totalLength
    };
  }
  async extractTextContent({
    handler,
    task,
    includeMarkedContent,
    disableNormalization,
    sink
  }) {
    const contentStreamPromise = this.getContentStream();
    const resourcesPromise = this.loadResources(["ExtGState", "Font", "Properties", "XObject"]);
    const langPromise = this.pdfManager.ensureCatalog("lang");
    const [contentStream,, lang] = await Promise.all([contentStreamPromise, resourcesPromise, langPromise]);
    const partialEvaluator = new PartialEvaluator({
      xref: this.xref,
      handler,
      pageIndex: this.pageIndex,
      idFactory: this._localIdFactory,
      fontCache: this.fontCache,
      builtInCMapCache: this.builtInCMapCache,
      standardFontDataCache: this.standardFontDataCache,
      globalColorSpaceCache: this.globalColorSpaceCache,
      globalImageCache: this.globalImageCache,
      systemFontCache: this.systemFontCache,
      options: this.evaluatorOptions
    });
    return partialEvaluator.getTextContent({
      stream: contentStream,
      task,
      resources: this.resources,
      includeMarkedContent,
      disableNormalization,
      sink,
      viewBox: this.view,
      lang
    });
  }
  async getStructTree() {
    const structTreeRoot = await this.pdfManager.ensureCatalog("structTreeRoot");
    if (!structTreeRoot) {
      return null;
    }
    await this._parsedAnnotations;
    const structTree = await this.pdfManager.ensure(this, "_parseStructTree", [structTreeRoot]);
    return this.pdfManager.ensure(structTree, "serializable");
  }
  _parseStructTree(structTreeRoot) {
    const tree = new StructTreePage(structTreeRoot, this.pageDict);
    tree.parse(this.ref);
    return tree;
  }
  async getAnnotationsData(handler, task, intent) {
    const annotations = await this._parsedAnnotations;
    if (annotations.length === 0) {
      return annotations;
    }
    const annotationsData = [],
      textContentPromises = [];
    let partialEvaluator;
    const intentAny = !!(intent & RenderingIntentFlag.ANY),
      intentDisplay = !!(intent & RenderingIntentFlag.DISPLAY),
      intentPrint = !!(intent & RenderingIntentFlag.PRINT);
    for (const annotation of annotations) {
      const isVisible = intentAny || intentDisplay && annotation.viewable;
      if (isVisible || intentPrint && annotation.printable) {
        annotationsData.push(annotation.data);
      }
      if (annotation.hasTextContent && isVisible) {
        partialEvaluator ||= new PartialEvaluator({
          xref: this.xref,
          handler,
          pageIndex: this.pageIndex,
          idFactory: this._localIdFactory,
          fontCache: this.fontCache,
          builtInCMapCache: this.builtInCMapCache,
          standardFontDataCache: this.standardFontDataCache,
          globalColorSpaceCache: this.globalColorSpaceCache,
          globalImageCache: this.globalImageCache,
          systemFontCache: this.systemFontCache,
          options: this.evaluatorOptions
        });
        textContentPromises.push(annotation.extractTextContent(partialEvaluator, task, [-Infinity, -Infinity, Infinity, Infinity]).catch(function (reason) {
          warn(\`getAnnotationsData - ignoring textContent during "\${task.name}" task: "\${reason}".\`);
        }));
      }
    }
    await Promise.all(textContentPromises);
    return annotationsData;
  }
  get annotations() {
    const annots = this._getInheritableProperty("Annots");
    return shadow(this, "annotations", Array.isArray(annots) ? annots : []);
  }
  get _parsedAnnotations() {
    const promise = this.pdfManager.ensure(this, "annotations").then(async annots => {
      if (annots.length === 0) {
        return annots;
      }
      const [annotationGlobals, fieldObjects] = await Promise.all([this.pdfManager.ensureDoc("annotationGlobals"), this.pdfManager.ensureDoc("fieldObjects")]);
      if (!annotationGlobals) {
        return [];
      }
      const orphanFields = fieldObjects?.orphanFields;
      const annotationPromises = [];
      for (const annotationRef of annots) {
        annotationPromises.push(AnnotationFactory.create(this.xref, annotationRef, annotationGlobals, this._localIdFactory, false, orphanFields, this.ref).catch(function (reason) {
          warn(\`_parsedAnnotations: "\${reason}".\`);
          return null;
        }));
      }
      const sortedAnnotations = [];
      let popupAnnotations, widgetAnnotations;
      for (const annotation of await Promise.all(annotationPromises)) {
        if (!annotation) {
          continue;
        }
        if (annotation instanceof WidgetAnnotation) {
          (widgetAnnotations ||= []).push(annotation);
          continue;
        }
        if (annotation instanceof PopupAnnotation) {
          (popupAnnotations ||= []).push(annotation);
          continue;
        }
        sortedAnnotations.push(annotation);
      }
      if (widgetAnnotations) {
        sortedAnnotations.push(...widgetAnnotations);
      }
      if (popupAnnotations) {
        sortedAnnotations.push(...popupAnnotations);
      }
      return sortedAnnotations;
    });
    return shadow(this, "_parsedAnnotations", promise);
  }
  get jsActions() {
    const actions = collectActions(this.xref, this.pageDict, PageActionEventType);
    return shadow(this, "jsActions", actions);
  }
}
const PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);
const STARTXREF_SIGNATURE = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);
const ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);
function find(stream, signature, limit = 1024, backwards = false) {
  const signatureLength = signature.length;
  const scanBytes = stream.peekBytes(limit);
  const scanLength = scanBytes.length - signatureLength;
  if (scanLength <= 0) {
    return false;
  }
  if (backwards) {
    const signatureEnd = signatureLength - 1;
    let pos = scanBytes.length - 1;
    while (pos >= signatureEnd) {
      let j = 0;
      while (j < signatureLength && scanBytes[pos - j] === signature[signatureEnd - j]) {
        j++;
      }
      if (j >= signatureLength) {
        stream.pos += pos - signatureEnd;
        return true;
      }
      pos--;
    }
  } else {
    let pos = 0;
    while (pos <= scanLength) {
      let j = 0;
      while (j < signatureLength && scanBytes[pos + j] === signature[j]) {
        j++;
      }
      if (j >= signatureLength) {
        stream.pos += pos;
        return true;
      }
      pos++;
    }
  }
  return false;
}
class PDFDocument {
  constructor(pdfManager, stream) {
    if (stream.length <= 0) {
      throw new InvalidPDFException("The PDF file is empty, i.e. its size is zero bytes.");
    }
    this.pdfManager = pdfManager;
    this.stream = stream;
    this.xref = new XRef(stream, pdfManager);
    this._pagePromises = new Map();
    this._version = null;
    const idCounters = {
      font: 0
    };
    this._globalIdFactory = class {
      static getDocId() {
        return \`g_\${pdfManager.docId}\`;
      }
      static createFontId() {
        return \`f\${++idCounters.font}\`;
      }
      static createObjId() {
        unreachable("Abstract method \`createObjId\` called.");
      }
      static getPageObjId() {
        unreachable("Abstract method \`getPageObjId\` called.");
      }
    };
  }
  parse(recoveryMode) {
    this.xref.parse(recoveryMode);
    this.catalog = new Catalog(this.pdfManager, this.xref);
  }
  get linearization() {
    let linearization = null;
    try {
      linearization = Linearization.create(this.stream);
    } catch (err) {
      if (err instanceof MissingDataException) {
        throw err;
      }
      info(err);
    }
    return shadow(this, "linearization", linearization);
  }
  get startXRef() {
    const stream = this.stream;
    let startXRef = 0;
    if (this.linearization) {
      stream.reset();
      if (find(stream, ENDOBJ_SIGNATURE)) {
        stream.skip(6);
        let ch = stream.peekByte();
        while (isWhiteSpace(ch)) {
          stream.pos++;
          ch = stream.peekByte();
        }
        startXRef = stream.pos - stream.start;
      }
    } else {
      const step = 1024;
      const startXRefLength = STARTXREF_SIGNATURE.length;
      let found = false,
        pos = stream.end;
      while (!found && pos > 0) {
        pos -= step - startXRefLength;
        if (pos < 0) {
          pos = 0;
        }
        stream.pos = pos;
        found = find(stream, STARTXREF_SIGNATURE, step, true);
      }
      if (found) {
        stream.skip(9);
        let ch;
        do {
          ch = stream.getByte();
        } while (isWhiteSpace(ch));
        let str = "";
        while (ch >= 0x20 && ch <= 0x39) {
          str += String.fromCharCode(ch);
          ch = stream.getByte();
        }
        startXRef = parseInt(str, 10);
        if (isNaN(startXRef)) {
          startXRef = 0;
        }
      }
    }
    return shadow(this, "startXRef", startXRef);
  }
  checkHeader() {
    const stream = this.stream;
    stream.reset();
    if (!find(stream, PDF_HEADER_SIGNATURE)) {
      return;
    }
    stream.moveStart();
    stream.skip(PDF_HEADER_SIGNATURE.length);
    let version = "",
      ch;
    while ((ch = stream.getByte()) > 0x20 && version.length < 7) {
      version += String.fromCharCode(ch);
    }
    if (PDF_VERSION_REGEXP.test(version)) {
      this._version = version;
    } else {
      warn(\`Invalid PDF header version: \${version}\`);
    }
  }
  parseStartXRef() {
    this.xref.setStartXRef(this.startXRef);
  }
  get numPages() {
    let num = 0;
    if (this.catalog.hasActualNumPages) {
      num = this.catalog.numPages;
    } else if (this.xfaFactory) {
      num = this.xfaFactory.getNumPages();
    } else if (this.linearization) {
      num = this.linearization.numPages;
    } else {
      num = this.catalog.numPages;
    }
    return shadow(this, "numPages", num);
  }
  _hasOnlyDocumentSignatures(fields, recursionDepth = 0) {
    const RECURSION_LIMIT = 10;
    if (!Array.isArray(fields)) {
      return false;
    }
    return fields.every(field => {
      field = this.xref.fetchIfRef(field);
      if (!(field instanceof Dict)) {
        return false;
      }
      if (field.has("Kids")) {
        if (++recursionDepth > RECURSION_LIMIT) {
          warn("_hasOnlyDocumentSignatures: maximum recursion depth reached");
          return false;
        }
        return this._hasOnlyDocumentSignatures(field.get("Kids"), recursionDepth);
      }
      const isSignature = isName(field.get("FT"), "Sig");
      const rectangle = field.get("Rect");
      const isInvisible = Array.isArray(rectangle) && rectangle.every(value => value === 0);
      return isSignature && isInvisible;
    });
  }
  get _xfaStreams() {
    const acroForm = this.catalog.acroForm;
    if (!acroForm) {
      return null;
    }
    const xfa = acroForm.get("XFA");
    const entries = {
      "xdp:xdp": "",
      template: "",
      datasets: "",
      config: "",
      connectionSet: "",
      localeSet: "",
      stylesheet: "",
      "/xdp:xdp": ""
    };
    if (xfa instanceof BaseStream && !xfa.isEmpty) {
      entries["xdp:xdp"] = xfa;
      return entries;
    }
    if (!Array.isArray(xfa) || xfa.length === 0) {
      return null;
    }
    for (let i = 0, ii = xfa.length; i < ii; i += 2) {
      let name;
      if (i === 0) {
        name = "xdp:xdp";
      } else if (i === ii - 2) {
        name = "/xdp:xdp";
      } else {
        name = xfa[i];
      }
      if (!entries.hasOwnProperty(name)) {
        continue;
      }
      const data = this.xref.fetchIfRef(xfa[i + 1]);
      if (!(data instanceof BaseStream) || data.isEmpty) {
        continue;
      }
      entries[name] = data;
    }
    return entries;
  }
  get xfaDatasets() {
    const streams = this._xfaStreams;
    if (!streams) {
      return shadow(this, "xfaDatasets", null);
    }
    for (const key of ["datasets", "xdp:xdp"]) {
      const stream = streams[key];
      if (!stream) {
        continue;
      }
      try {
        const str = stringToUTF8String(stream.getString());
        const data = {
          [key]: str
        };
        return shadow(this, "xfaDatasets", new DatasetReader(data));
      } catch {
        warn("XFA - Invalid utf-8 string.");
        break;
      }
    }
    return shadow(this, "xfaDatasets", null);
  }
  get xfaData() {
    const streams = this._xfaStreams;
    if (!streams) {
      return null;
    }
    const data = Object.create(null);
    for (const [key, stream] of Object.entries(streams)) {
      if (!stream) {
        continue;
      }
      try {
        data[key] = stringToUTF8String(stream.getString());
      } catch {
        warn("XFA - Invalid utf-8 string.");
        return null;
      }
    }
    return data;
  }
  get xfaFactory() {
    let data;
    if (this.pdfManager.enableXfa && this.catalog.needsRendering && this.formInfo.hasXfa && !this.formInfo.hasAcroForm) {
      data = this.xfaData;
    }
    return shadow(this, "xfaFactory", data ? new XFAFactory(data) : null);
  }
  get isPureXfa() {
    return this.xfaFactory ? this.xfaFactory.isValid() : false;
  }
  get htmlForXfa() {
    return this.xfaFactory ? this.xfaFactory.getPages() : null;
  }
  async loadXfaImages() {
    const xfaImagesDict = await this.pdfManager.ensureCatalog("xfaImages");
    if (!xfaImagesDict) {
      return;
    }
    const keys = xfaImagesDict.getKeys();
    const objectLoader = new ObjectLoader(xfaImagesDict, keys, this.xref);
    await objectLoader.load();
    const xfaImages = new Map();
    for (const key of keys) {
      const stream = xfaImagesDict.get(key);
      if (stream instanceof BaseStream) {
        xfaImages.set(key, stream.getBytes());
      }
    }
    this.xfaFactory.setImages(xfaImages);
  }
  async loadXfaFonts(handler, task) {
    const acroForm = await this.pdfManager.ensureCatalog("acroForm");
    if (!acroForm) {
      return;
    }
    const resources = await acroForm.getAsync("DR");
    if (!(resources instanceof Dict)) {
      return;
    }
    const objectLoader = new ObjectLoader(resources, ["Font"], this.xref);
    await objectLoader.load();
    const fontRes = resources.get("Font");
    if (!(fontRes instanceof Dict)) {
      return;
    }
    const options = Object.assign(Object.create(null), this.pdfManager.evaluatorOptions);
    options.useSystemFonts = false;
    const partialEvaluator = new PartialEvaluator({
      xref: this.xref,
      handler,
      pageIndex: -1,
      idFactory: this._globalIdFactory,
      fontCache: this.catalog.fontCache,
      builtInCMapCache: this.catalog.builtInCMapCache,
      standardFontDataCache: this.catalog.standardFontDataCache,
      options
    });
    const operatorList = new OperatorList();
    const pdfFonts = [];
    const initialState = {
      get font() {
        return pdfFonts.at(-1);
      },
      set font(font) {
        pdfFonts.push(font);
      },
      clone() {
        return this;
      }
    };
    const promises = [];
    for (const [fontName, font] of fontRes) {
      const descriptor = font.get("FontDescriptor");
      if (!(descriptor instanceof Dict)) {
        continue;
      }
      let fontFamily = descriptor.get("FontFamily");
      fontFamily = fontFamily.replaceAll(/[ ]+(\\d)/g, "$1");
      const fontWeight = descriptor.get("FontWeight");
      const italicAngle = -descriptor.get("ItalicAngle");
      const cssFontInfo = {
        fontFamily,
        fontWeight,
        italicAngle
      };
      if (!validateCSSFont(cssFontInfo)) {
        continue;
      }
      promises.push(partialEvaluator.handleSetFont(resources, [Name.get(fontName), 1], null, operatorList, task, initialState, null, cssFontInfo).catch(function (reason) {
        warn(\`loadXfaFonts: "\${reason}".\`);
        return null;
      }));
    }
    await Promise.all(promises);
    const missingFonts = this.xfaFactory.setFonts(pdfFonts);
    if (!missingFonts) {
      return;
    }
    options.ignoreErrors = true;
    promises.length = 0;
    pdfFonts.length = 0;
    const reallyMissingFonts = new Set();
    for (const missing of missingFonts) {
      if (!getXfaFontName(\`\${missing}-Regular\`)) {
        reallyMissingFonts.add(missing);
      }
    }
    if (reallyMissingFonts.size) {
      missingFonts.push("PdfJS-Fallback");
    }
    for (const missing of missingFonts) {
      if (reallyMissingFonts.has(missing)) {
        continue;
      }
      for (const fontInfo of [{
        name: "Regular",
        fontWeight: 400,
        italicAngle: 0
      }, {
        name: "Bold",
        fontWeight: 700,
        italicAngle: 0
      }, {
        name: "Italic",
        fontWeight: 400,
        italicAngle: 12
      }, {
        name: "BoldItalic",
        fontWeight: 700,
        italicAngle: 12
      }]) {
        const name = \`\${missing}-\${fontInfo.name}\`;
        const dict = getXfaFontDict(name);
        promises.push(partialEvaluator.handleSetFont(resources, [Name.get(name), 1], null, operatorList, task, initialState, dict, {
          fontFamily: missing,
          fontWeight: fontInfo.fontWeight,
          italicAngle: fontInfo.italicAngle
        }).catch(function (reason) {
          warn(\`loadXfaFonts: "\${reason}".\`);
          return null;
        }));
      }
    }
    await Promise.all(promises);
    this.xfaFactory.appendFonts(pdfFonts, reallyMissingFonts);
  }
  async serializeXfaData(annotationStorage) {
    return this.xfaFactory ? this.xfaFactory.serializeData(annotationStorage) : null;
  }
  get version() {
    return this.catalog.version || this._version;
  }
  get formInfo() {
    const formInfo = {
      hasFields: false,
      hasAcroForm: false,
      hasXfa: false,
      hasSignatures: false
    };
    const acroForm = this.catalog.acroForm;
    if (!acroForm) {
      return shadow(this, "formInfo", formInfo);
    }
    try {
      const fields = acroForm.get("Fields");
      const hasFields = Array.isArray(fields) && fields.length > 0;
      formInfo.hasFields = hasFields;
      const xfa = acroForm.get("XFA");
      formInfo.hasXfa = Array.isArray(xfa) && xfa.length > 0 || xfa instanceof BaseStream && !xfa.isEmpty;
      const sigFlags = acroForm.get("SigFlags");
      const hasSignatures = !!(sigFlags & 0x1);
      const hasOnlyDocumentSignatures = hasSignatures && this._hasOnlyDocumentSignatures(fields);
      formInfo.hasAcroForm = hasFields && !hasOnlyDocumentSignatures;
      formInfo.hasSignatures = hasSignatures;
    } catch (ex) {
      if (ex instanceof MissingDataException) {
        throw ex;
      }
      warn(\`Cannot fetch form information: "\${ex}".\`);
    }
    return shadow(this, "formInfo", formInfo);
  }
  get documentInfo() {
    const docInfo = {
      PDFFormatVersion: this.version,
      Language: this.catalog.lang,
      EncryptFilterName: this.xref.encrypt ? this.xref.encrypt.filterName : null,
      IsLinearized: !!this.linearization,
      IsAcroFormPresent: this.formInfo.hasAcroForm,
      IsXFAPresent: this.formInfo.hasXfa,
      IsCollectionPresent: !!this.catalog.collection,
      IsSignaturesPresent: this.formInfo.hasSignatures
    };
    let infoDict;
    try {
      infoDict = this.xref.trailer.get("Info");
    } catch (err) {
      if (err instanceof MissingDataException) {
        throw err;
      }
      info("The document information dictionary is invalid.");
    }
    if (!(infoDict instanceof Dict)) {
      return shadow(this, "documentInfo", docInfo);
    }
    for (const [key, value] of infoDict) {
      switch (key) {
        case "Title":
        case "Author":
        case "Subject":
        case "Keywords":
        case "Creator":
        case "Producer":
        case "CreationDate":
        case "ModDate":
          if (typeof value === "string") {
            docInfo[key] = stringToPDFString(value);
            continue;
          }
          break;
        case "Trapped":
          if (value instanceof Name) {
            docInfo[key] = value;
            continue;
          }
          break;
        default:
          let customValue;
          switch (typeof value) {
            case "string":
              customValue = stringToPDFString(value);
              break;
            case "number":
            case "boolean":
              customValue = value;
              break;
            default:
              if (value instanceof Name) {
                customValue = value;
              }
              break;
          }
          if (customValue === undefined) {
            warn(\`Bad value, for custom key "\${key}", in Info: \${value}.\`);
            continue;
          }
          if (!docInfo.Custom) {
            docInfo.Custom = Object.create(null);
          }
          docInfo.Custom[key] = customValue;
          continue;
      }
      warn(\`Bad value, for key "\${key}", in Info: \${value}.\`);
    }
    return shadow(this, "documentInfo", docInfo);
  }
  get fingerprints() {
    const FINGERPRINT_FIRST_BYTES = 1024;
    const EMPTY_FINGERPRINT = "\\x00".repeat(16);
    function validate(data) {
      return typeof data === "string" && data.length === 16 && data !== EMPTY_FINGERPRINT;
    }
    const id = this.xref.trailer.get("ID");
    let hashOriginal, hashModified;
    if (Array.isArray(id) && validate(id[0])) {
      hashOriginal = stringToBytes(id[0]);
      if (id[1] !== id[0] && validate(id[1])) {
        hashModified = stringToBytes(id[1]);
      }
    } else {
      hashOriginal = calculateMD5(this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);
    }
    return shadow(this, "fingerprints", [toHexUtil(hashOriginal), hashModified ? toHexUtil(hashModified) : null]);
  }
  async _getLinearizationPage(pageIndex) {
    const {
      catalog,
      linearization,
      xref
    } = this;
    const ref = Ref.get(linearization.objectNumberFirst, 0);
    try {
      const obj = await xref.fetchAsync(ref);
      if (obj instanceof Dict) {
        let type = obj.getRaw("Type");
        if (type instanceof Ref) {
          type = await xref.fetchAsync(type);
        }
        if (isName(type, "Page") || !obj.has("Type") && !obj.has("Kids") && obj.has("Contents")) {
          if (!catalog.pageKidsCountCache.has(ref)) {
            catalog.pageKidsCountCache.put(ref, 1);
          }
          if (!catalog.pageIndexCache.has(ref)) {
            catalog.pageIndexCache.put(ref, 0);
          }
          return [obj, ref];
        }
      }
      throw new FormatError("The Linearization dictionary doesn't point to a valid Page dictionary.");
    } catch (reason) {
      warn(\`_getLinearizationPage: "\${reason.message}".\`);
      return catalog.getPageDict(pageIndex);
    }
  }
  getPage(pageIndex) {
    const cachedPromise = this._pagePromises.get(pageIndex);
    if (cachedPromise) {
      return cachedPromise;
    }
    const {
      catalog,
      linearization,
      xfaFactory
    } = this;
    let promise;
    if (xfaFactory) {
      promise = Promise.resolve([Dict.empty, null]);
    } else if (linearization?.pageFirst === pageIndex) {
      promise = this._getLinearizationPage(pageIndex);
    } else {
      promise = catalog.getPageDict(pageIndex);
    }
    promise = promise.then(([pageDict, ref]) => new Page({
      pdfManager: this.pdfManager,
      xref: this.xref,
      pageIndex,
      pageDict,
      ref,
      globalIdFactory: this._globalIdFactory,
      fontCache: catalog.fontCache,
      builtInCMapCache: catalog.builtInCMapCache,
      standardFontDataCache: catalog.standardFontDataCache,
      globalColorSpaceCache: catalog.globalColorSpaceCache,
      globalImageCache: catalog.globalImageCache,
      systemFontCache: catalog.systemFontCache,
      nonBlendModesSet: catalog.nonBlendModesSet,
      xfaFactory
    }));
    this._pagePromises.set(pageIndex, promise);
    return promise;
  }
  async checkFirstPage(recoveryMode = false) {
    if (recoveryMode) {
      return;
    }
    try {
      await this.getPage(0);
    } catch (reason) {
      if (reason instanceof XRefEntryException) {
        this._pagePromises.delete(0);
        await this.cleanup();
        throw new XRefParseException();
      }
    }
  }
  async checkLastPage(recoveryMode = false) {
    const {
      catalog,
      pdfManager
    } = this;
    catalog.setActualNumPages();
    let numPages;
    try {
      await Promise.all([pdfManager.ensureDoc("xfaFactory"), pdfManager.ensureDoc("linearization"), pdfManager.ensureCatalog("numPages")]);
      if (this.xfaFactory) {
        return;
      } else if (this.linearization) {
        numPages = this.linearization.numPages;
      } else {
        numPages = catalog.numPages;
      }
      if (!Number.isInteger(numPages)) {
        throw new FormatError("Page count is not an integer.");
      } else if (numPages <= 1) {
        return;
      }
      await this.getPage(numPages - 1);
    } catch (reason) {
      this._pagePromises.delete(numPages - 1);
      await this.cleanup();
      if (reason instanceof XRefEntryException && !recoveryMode) {
        throw new XRefParseException();
      }
      warn(\`checkLastPage - invalid /Pages tree /Count: \${numPages}.\`);
      let pagesTree;
      try {
        pagesTree = await catalog.getAllPageDicts(recoveryMode);
      } catch (reasonAll) {
        if (reasonAll instanceof XRefEntryException && !recoveryMode) {
          throw new XRefParseException();
        }
        catalog.setActualNumPages(1);
        return;
      }
      for (const [pageIndex, [pageDict, ref]] of pagesTree) {
        let promise;
        if (pageDict instanceof Error) {
          promise = Promise.reject(pageDict);
          promise.catch(() => {});
        } else {
          promise = Promise.resolve(new Page({
            pdfManager,
            xref: this.xref,
            pageIndex,
            pageDict,
            ref,
            globalIdFactory: this._globalIdFactory,
            fontCache: catalog.fontCache,
            builtInCMapCache: catalog.builtInCMapCache,
            standardFontDataCache: catalog.standardFontDataCache,
            globalColorSpaceCache: this.globalColorSpaceCache,
            globalImageCache: catalog.globalImageCache,
            systemFontCache: catalog.systemFontCache,
            nonBlendModesSet: catalog.nonBlendModesSet,
            xfaFactory: null
          }));
        }
        this._pagePromises.set(pageIndex, promise);
      }
      catalog.setActualNumPages(pagesTree.size);
    }
  }
  async fontFallback(id, handler) {
    const {
      catalog,
      pdfManager
    } = this;
    for (const translatedFont of await Promise.all(catalog.fontCache)) {
      if (translatedFont.loadedName === id) {
        translatedFont.fallback(handler, pdfManager.evaluatorOptions);
        return;
      }
    }
  }
  async cleanup(manuallyTriggered = false) {
    return this.catalog ? this.catalog.cleanup(manuallyTriggered) : clearGlobalCaches();
  }
  async #collectFieldObjects(name, parentRef, fieldRef, promises, annotationGlobals, visitedRefs, orphanFields) {
    const {
      xref
    } = this;
    if (!(fieldRef instanceof Ref) || visitedRefs.has(fieldRef)) {
      return;
    }
    visitedRefs.put(fieldRef);
    const field = await xref.fetchAsync(fieldRef);
    if (!(field instanceof Dict)) {
      return;
    }
    let subtype = await field.getAsync("Subtype");
    subtype = subtype instanceof Name ? subtype.name : null;
    switch (subtype) {
      case "Link":
        return;
    }
    if (field.has("T")) {
      const partName = stringToPDFString(await field.getAsync("T"));
      name = name === "" ? partName : \`\${name}.\${partName}\`;
    } else {
      let obj = field;
      while (true) {
        obj = obj.getRaw("Parent") || parentRef;
        if (obj instanceof Ref) {
          if (visitedRefs.has(obj)) {
            break;
          }
          obj = await xref.fetchAsync(obj);
        }
        if (!(obj instanceof Dict)) {
          break;
        }
        if (obj.has("T")) {
          const partName = stringToPDFString(await obj.getAsync("T"));
          name = name === "" ? partName : \`\${name}.\${partName}\`;
          break;
        }
      }
    }
    if (parentRef && !field.has("Parent") && isName(field.get("Subtype"), "Widget")) {
      orphanFields.put(fieldRef, parentRef);
    }
    if (!promises.has(name)) {
      promises.set(name, []);
    }
    promises.get(name).push(AnnotationFactory.create(xref, fieldRef, annotationGlobals, null, true, orphanFields, null).then(annotation => annotation?.getFieldObject()).catch(function (reason) {
      warn(\`#collectFieldObjects: "\${reason}".\`);
      return null;
    }));
    if (!field.has("Kids")) {
      return;
    }
    const kids = await field.getAsync("Kids");
    if (Array.isArray(kids)) {
      for (const kid of kids) {
        await this.#collectFieldObjects(name, fieldRef, kid, promises, annotationGlobals, visitedRefs, orphanFields);
      }
    }
  }
  get fieldObjects() {
    const promise = this.pdfManager.ensureDoc("formInfo").then(async formInfo => {
      if (!formInfo.hasFields) {
        return null;
      }
      const [annotationGlobals, acroForm] = await Promise.all([this.pdfManager.ensureDoc("annotationGlobals"), this.pdfManager.ensureCatalog("acroForm")]);
      if (!annotationGlobals) {
        return null;
      }
      const visitedRefs = new RefSet();
      const allFields = Object.create(null);
      const fieldPromises = new Map();
      const orphanFields = new RefSetCache();
      for (const fieldRef of await acroForm.getAsync("Fields")) {
        await this.#collectFieldObjects("", null, fieldRef, fieldPromises, annotationGlobals, visitedRefs, orphanFields);
      }
      const allPromises = [];
      for (const [name, promises] of fieldPromises) {
        allPromises.push(Promise.all(promises).then(fields => {
          fields = fields.filter(field => !!field);
          if (fields.length > 0) {
            allFields[name] = fields;
          }
        }));
      }
      await Promise.all(allPromises);
      return {
        allFields: objectSize(allFields) > 0 ? allFields : null,
        orphanFields
      };
    });
    return shadow(this, "fieldObjects", promise);
  }
  get hasJSActions() {
    const promise = this.pdfManager.ensureDoc("_parseHasJSActions");
    return shadow(this, "hasJSActions", promise);
  }
  async _parseHasJSActions() {
    const [catalogJsActions, fieldObjects] = await Promise.all([this.pdfManager.ensureCatalog("jsActions"), this.pdfManager.ensureDoc("fieldObjects")]);
    if (catalogJsActions) {
      return true;
    }
    if (fieldObjects?.allFields) {
      return Object.values(fieldObjects.allFields).some(fieldObject => fieldObject.some(object => object.actions !== null));
    }
    return false;
  }
  get calculationOrderIds() {
    const calculationOrder = this.catalog.acroForm?.get("CO");
    if (!Array.isArray(calculationOrder) || calculationOrder.length === 0) {
      return shadow(this, "calculationOrderIds", null);
    }
    const ids = [];
    for (const id of calculationOrder) {
      if (id instanceof Ref) {
        ids.push(id.toString());
      }
    }
    return shadow(this, "calculationOrderIds", ids.length ? ids : null);
  }
  get annotationGlobals() {
    return shadow(this, "annotationGlobals", AnnotationFactory.createGlobals(this.pdfManager));
  }
}

;// ./src/core/pdf_manager.js









function parseDocBaseUrl(url) {
  if (url) {
    const absoluteUrl = createValidAbsoluteUrl(url);
    if (absoluteUrl) {
      return absoluteUrl.href;
    }
    warn(\`Invalid absolute docBaseUrl: "\${url}".\`);
  }
  return null;
}
class BasePdfManager {
  constructor({
    docBaseUrl,
    docId,
    enableXfa,
    evaluatorOptions,
    handler,
    password
  }) {
    this._docBaseUrl = parseDocBaseUrl(docBaseUrl);
    this._docId = docId;
    this._password = password;
    this.enableXfa = enableXfa;
    evaluatorOptions.isOffscreenCanvasSupported &&= FeatureTest.isOffscreenCanvasSupported;
    evaluatorOptions.isImageDecoderSupported &&= FeatureTest.isImageDecoderSupported;
    this.evaluatorOptions = Object.freeze(evaluatorOptions);
    ImageResizer.setOptions(evaluatorOptions);
    JpegStream.setOptions(evaluatorOptions);
    const options = {
      ...evaluatorOptions,
      handler
    };
    JpxImage.setOptions(options);
    IccColorSpace.setOptions(options);
    CmykICCBasedCS.setOptions(options);
  }
  get docId() {
    return this._docId;
  }
  get password() {
    return this._password;
  }
  get docBaseUrl() {
    return this._docBaseUrl;
  }
  get catalog() {
    return this.pdfDocument.catalog;
  }
  ensureDoc(prop, args) {
    return this.ensure(this.pdfDocument, prop, args);
  }
  ensureXRef(prop, args) {
    return this.ensure(this.pdfDocument.xref, prop, args);
  }
  ensureCatalog(prop, args) {
    return this.ensure(this.pdfDocument.catalog, prop, args);
  }
  getPage(pageIndex) {
    return this.pdfDocument.getPage(pageIndex);
  }
  fontFallback(id, handler) {
    return this.pdfDocument.fontFallback(id, handler);
  }
  loadXfaFonts(handler, task) {
    return this.pdfDocument.loadXfaFonts(handler, task);
  }
  loadXfaImages() {
    return this.pdfDocument.loadXfaImages();
  }
  serializeXfaData(annotationStorage) {
    return this.pdfDocument.serializeXfaData(annotationStorage);
  }
  cleanup(manuallyTriggered = false) {
    return this.pdfDocument.cleanup(manuallyTriggered);
  }
  async ensure(obj, prop, args) {
    unreachable("Abstract method \`ensure\` called");
  }
  requestRange(begin, end) {
    unreachable("Abstract method \`requestRange\` called");
  }
  requestLoadedStream(noFetch = false) {
    unreachable("Abstract method \`requestLoadedStream\` called");
  }
  sendProgressiveData(chunk) {
    unreachable("Abstract method \`sendProgressiveData\` called");
  }
  updatePassword(password) {
    this._password = password;
  }
  terminate(reason) {
    unreachable("Abstract method \`terminate\` called");
  }
}
class LocalPdfManager extends BasePdfManager {
  constructor(args) {
    super(args);
    const stream = new Stream(args.source);
    this.pdfDocument = new PDFDocument(this, stream);
    this._loadedStreamPromise = Promise.resolve(stream);
  }
  async ensure(obj, prop, args) {
    const value = obj[prop];
    if (typeof value === "function") {
      return value.apply(obj, args);
    }
    return value;
  }
  requestRange(begin, end) {
    return Promise.resolve();
  }
  requestLoadedStream(noFetch = false) {
    return this._loadedStreamPromise;
  }
  terminate(reason) {}
}
class NetworkPdfManager extends BasePdfManager {
  constructor(args) {
    super(args);
    this.streamManager = new ChunkedStreamManager(args.source, {
      msgHandler: args.handler,
      length: args.length,
      disableAutoFetch: args.disableAutoFetch,
      rangeChunkSize: args.rangeChunkSize
    });
    this.pdfDocument = new PDFDocument(this, this.streamManager.getStream());
  }
  async ensure(obj, prop, args) {
    try {
      const value = obj[prop];
      if (typeof value === "function") {
        return value.apply(obj, args);
      }
      return value;
    } catch (ex) {
      if (!(ex instanceof MissingDataException)) {
        throw ex;
      }
      await this.requestRange(ex.begin, ex.end);
      return this.ensure(obj, prop, args);
    }
  }
  requestRange(begin, end) {
    return this.streamManager.requestRange(begin, end);
  }
  requestLoadedStream(noFetch = false) {
    return this.streamManager.requestAllChunks(noFetch);
  }
  sendProgressiveData(chunk) {
    this.streamManager.onReceiveData({
      chunk
    });
  }
  terminate(reason) {
    this.streamManager.abort(reason);
  }
}

;// ./src/shared/message_handler.js

const CallbackKind = {
  DATA: 1,
  ERROR: 2
};
const StreamKind = {
  CANCEL: 1,
  CANCEL_COMPLETE: 2,
  CLOSE: 3,
  ENQUEUE: 4,
  ERROR: 5,
  PULL: 6,
  PULL_COMPLETE: 7,
  START_COMPLETE: 8
};
function onFn() {}
function wrapReason(ex) {
  if (ex instanceof AbortException || ex instanceof InvalidPDFException || ex instanceof PasswordException || ex instanceof ResponseException || ex instanceof UnknownErrorException) {
    return ex;
  }
  if (!(ex instanceof Error || typeof ex === "object" && ex !== null)) {
    unreachable('wrapReason: Expected "reason" to be a (possibly cloned) Error.');
  }
  switch (ex.name) {
    case "AbortException":
      return new AbortException(ex.message);
    case "InvalidPDFException":
      return new InvalidPDFException(ex.message);
    case "PasswordException":
      return new PasswordException(ex.message, ex.code);
    case "ResponseException":
      return new ResponseException(ex.message, ex.status, ex.missing);
    case "UnknownErrorException":
      return new UnknownErrorException(ex.message, ex.details);
  }
  return new UnknownErrorException(ex.message, ex.toString());
}
class MessageHandler {
  #messageAC = new AbortController();
  constructor(sourceName, targetName, comObj) {
    this.sourceName = sourceName;
    this.targetName = targetName;
    this.comObj = comObj;
    this.callbackId = 1;
    this.streamId = 1;
    this.streamSinks = Object.create(null);
    this.streamControllers = Object.create(null);
    this.callbackCapabilities = Object.create(null);
    this.actionHandler = Object.create(null);
    comObj.addEventListener("message", this.#onMessage.bind(this), {
      signal: this.#messageAC.signal
    });
  }
  #onMessage({
    data
  }) {
    if (data.targetName !== this.sourceName) {
      return;
    }
    if (data.stream) {
      this.#processStreamMessage(data);
      return;
    }
    if (data.callback) {
      const callbackId = data.callbackId;
      const capability = this.callbackCapabilities[callbackId];
      if (!capability) {
        throw new Error(\`Cannot resolve callback \${callbackId}\`);
      }
      delete this.callbackCapabilities[callbackId];
      if (data.callback === CallbackKind.DATA) {
        capability.resolve(data.data);
      } else if (data.callback === CallbackKind.ERROR) {
        capability.reject(wrapReason(data.reason));
      } else {
        throw new Error("Unexpected callback case");
      }
      return;
    }
    const action = this.actionHandler[data.action];
    if (!action) {
      throw new Error(\`Unknown action from worker: \${data.action}\`);
    }
    if (data.callbackId) {
      const sourceName = this.sourceName,
        targetName = data.sourceName,
        comObj = this.comObj;
      Promise.try(action, data.data).then(function (result) {
        comObj.postMessage({
          sourceName,
          targetName,
          callback: CallbackKind.DATA,
          callbackId: data.callbackId,
          data: result
        });
      }, function (reason) {
        comObj.postMessage({
          sourceName,
          targetName,
          callback: CallbackKind.ERROR,
          callbackId: data.callbackId,
          reason: wrapReason(reason)
        });
      });
      return;
    }
    if (data.streamId) {
      this.#createStreamSink(data);
      return;
    }
    action(data.data);
  }
  on(actionName, handler) {
    const ah = this.actionHandler;
    if (ah[actionName]) {
      throw new Error(\`There is already an actionName called "\${actionName}"\`);
    }
    ah[actionName] = handler;
  }
  send(actionName, data, transfers) {
    this.comObj.postMessage({
      sourceName: this.sourceName,
      targetName: this.targetName,
      action: actionName,
      data
    }, transfers);
  }
  sendWithPromise(actionName, data, transfers) {
    const callbackId = this.callbackId++;
    const capability = Promise.withResolvers();
    this.callbackCapabilities[callbackId] = capability;
    try {
      this.comObj.postMessage({
        sourceName: this.sourceName,
        targetName: this.targetName,
        action: actionName,
        callbackId,
        data
      }, transfers);
    } catch (ex) {
      capability.reject(ex);
    }
    return capability.promise;
  }
  sendWithStream(actionName, data, queueingStrategy, transfers) {
    const streamId = this.streamId++,
      sourceName = this.sourceName,
      targetName = this.targetName,
      comObj = this.comObj;
    return new ReadableStream({
      start: controller => {
        const startCapability = Promise.withResolvers();
        this.streamControllers[streamId] = {
          controller,
          startCall: startCapability,
          pullCall: null,
          cancelCall: null,
          isClosed: false
        };
        comObj.postMessage({
          sourceName,
          targetName,
          action: actionName,
          streamId,
          data,
          desiredSize: controller.desiredSize
        }, transfers);
        return startCapability.promise;
      },
      pull: controller => {
        const pullCapability = Promise.withResolvers();
        this.streamControllers[streamId].pullCall = pullCapability;
        comObj.postMessage({
          sourceName,
          targetName,
          stream: StreamKind.PULL,
          streamId,
          desiredSize: controller.desiredSize
        });
        return pullCapability.promise;
      },
      cancel: reason => {
        assert(reason instanceof Error, "cancel must have a valid reason");
        const cancelCapability = Promise.withResolvers();
        this.streamControllers[streamId].cancelCall = cancelCapability;
        this.streamControllers[streamId].isClosed = true;
        comObj.postMessage({
          sourceName,
          targetName,
          stream: StreamKind.CANCEL,
          streamId,
          reason: wrapReason(reason)
        });
        return cancelCapability.promise;
      }
    }, queueingStrategy);
  }
  #createStreamSink(data) {
    const streamId = data.streamId,
      sourceName = this.sourceName,
      targetName = data.sourceName,
      comObj = this.comObj;
    const self = this,
      action = this.actionHandler[data.action];
    const streamSink = {
      enqueue(chunk, size = 1, transfers) {
        if (this.isCancelled) {
          return;
        }
        const lastDesiredSize = this.desiredSize;
        this.desiredSize -= size;
        if (lastDesiredSize > 0 && this.desiredSize <= 0) {
          this.sinkCapability = Promise.withResolvers();
          this.ready = this.sinkCapability.promise;
        }
        comObj.postMessage({
          sourceName,
          targetName,
          stream: StreamKind.ENQUEUE,
          streamId,
          chunk
        }, transfers);
      },
      close() {
        if (this.isCancelled) {
          return;
        }
        this.isCancelled = true;
        comObj.postMessage({
          sourceName,
          targetName,
          stream: StreamKind.CLOSE,
          streamId
        });
        delete self.streamSinks[streamId];
      },
      error(reason) {
        assert(reason instanceof Error, "error must have a valid reason");
        if (this.isCancelled) {
          return;
        }
        this.isCancelled = true;
        comObj.postMessage({
          sourceName,
          targetName,
          stream: StreamKind.ERROR,
          streamId,
          reason: wrapReason(reason)
        });
      },
      sinkCapability: Promise.withResolvers(),
      onPull: null,
      onCancel: null,
      isCancelled: false,
      desiredSize: data.desiredSize,
      ready: null
    };
    streamSink.sinkCapability.resolve();
    streamSink.ready = streamSink.sinkCapability.promise;
    this.streamSinks[streamId] = streamSink;
    Promise.try(action, data.data, streamSink).then(function () {
      comObj.postMessage({
        sourceName,
        targetName,
        stream: StreamKind.START_COMPLETE,
        streamId,
        success: true
      });
    }, function (reason) {
      comObj.postMessage({
        sourceName,
        targetName,
        stream: StreamKind.START_COMPLETE,
        streamId,
        reason: wrapReason(reason)
      });
    });
  }
  #processStreamMessage(data) {
    const streamId = data.streamId,
      sourceName = this.sourceName,
      targetName = data.sourceName,
      comObj = this.comObj;
    const streamController = this.streamControllers[streamId],
      streamSink = this.streamSinks[streamId];
    switch (data.stream) {
      case StreamKind.START_COMPLETE:
        if (data.success) {
          streamController.startCall.resolve();
        } else {
          streamController.startCall.reject(wrapReason(data.reason));
        }
        break;
      case StreamKind.PULL_COMPLETE:
        if (data.success) {
          streamController.pullCall.resolve();
        } else {
          streamController.pullCall.reject(wrapReason(data.reason));
        }
        break;
      case StreamKind.PULL:
        if (!streamSink) {
          comObj.postMessage({
            sourceName,
            targetName,
            stream: StreamKind.PULL_COMPLETE,
            streamId,
            success: true
          });
          break;
        }
        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
          streamSink.sinkCapability.resolve();
        }
        streamSink.desiredSize = data.desiredSize;
        Promise.try(streamSink.onPull || onFn).then(function () {
          comObj.postMessage({
            sourceName,
            targetName,
            stream: StreamKind.PULL_COMPLETE,
            streamId,
            success: true
          });
        }, function (reason) {
          comObj.postMessage({
            sourceName,
            targetName,
            stream: StreamKind.PULL_COMPLETE,
            streamId,
            reason: wrapReason(reason)
          });
        });
        break;
      case StreamKind.ENQUEUE:
        assert(streamController, "enqueue should have stream controller");
        if (streamController.isClosed) {
          break;
        }
        streamController.controller.enqueue(data.chunk);
        break;
      case StreamKind.CLOSE:
        assert(streamController, "close should have stream controller");
        if (streamController.isClosed) {
          break;
        }
        streamController.isClosed = true;
        streamController.controller.close();
        this.#deleteStreamController(streamController, streamId);
        break;
      case StreamKind.ERROR:
        assert(streamController, "error should have stream controller");
        streamController.controller.error(wrapReason(data.reason));
        this.#deleteStreamController(streamController, streamId);
        break;
      case StreamKind.CANCEL_COMPLETE:
        if (data.success) {
          streamController.cancelCall.resolve();
        } else {
          streamController.cancelCall.reject(wrapReason(data.reason));
        }
        this.#deleteStreamController(streamController, streamId);
        break;
      case StreamKind.CANCEL:
        if (!streamSink) {
          break;
        }
        const dataReason = wrapReason(data.reason);
        Promise.try(streamSink.onCancel || onFn, dataReason).then(function () {
          comObj.postMessage({
            sourceName,
            targetName,
            stream: StreamKind.CANCEL_COMPLETE,
            streamId,
            success: true
          });
        }, function (reason) {
          comObj.postMessage({
            sourceName,
            targetName,
            stream: StreamKind.CANCEL_COMPLETE,
            streamId,
            reason: wrapReason(reason)
          });
        });
        streamSink.sinkCapability.reject(dataReason);
        streamSink.isCancelled = true;
        delete this.streamSinks[streamId];
        break;
      default:
        throw new Error("Unexpected stream case");
    }
  }
  async #deleteStreamController(streamController, streamId) {
    await Promise.allSettled([streamController.startCall?.promise, streamController.pullCall?.promise, streamController.cancelCall?.promise]);
    delete this.streamControllers[streamId];
  }
  destroy() {
    this.#messageAC?.abort();
    this.#messageAC = null;
  }
}

;// ./src/core/writer.js







async function writeObject(ref, obj, buffer, {
  encrypt = null
}) {
  const transform = encrypt?.createCipherTransform(ref.num, ref.gen);
  buffer.push(\`\${ref.num} \${ref.gen} obj\\n\`);
  if (obj instanceof Dict) {
    await writeDict(obj, buffer, transform);
  } else if (obj instanceof BaseStream) {
    await writeStream(obj, buffer, transform);
  } else if (Array.isArray(obj) || ArrayBuffer.isView(obj)) {
    await writeArray(obj, buffer, transform);
  }
  buffer.push("\\nendobj\\n");
}
async function writeDict(dict, buffer, transform) {
  buffer.push("<<");
  for (const key of dict.getKeys()) {
    buffer.push(\` /\${escapePDFName(key)} \`);
    await writeValue(dict.getRaw(key), buffer, transform);
  }
  buffer.push(">>");
}
async function writeStream(stream, buffer, transform) {
  let bytes = stream.getBytes();
  const {
    dict
  } = stream;
  const [filter, params] = await Promise.all([dict.getAsync("Filter"), dict.getAsync("DecodeParms")]);
  const filterZero = Array.isArray(filter) ? await dict.xref.fetchIfRefAsync(filter[0]) : filter;
  const isFilterZeroFlateDecode = isName(filterZero, "FlateDecode");
  const MIN_LENGTH_FOR_COMPRESSING = 256;
  if (bytes.length >= MIN_LENGTH_FOR_COMPRESSING || isFilterZeroFlateDecode) {
    try {
      const cs = new CompressionStream("deflate");
      const writer = cs.writable.getWriter();
      await writer.ready;
      writer.write(bytes).then(async () => {
        await writer.ready;
        await writer.close();
      }).catch(() => {});
      const buf = await new Response(cs.readable).arrayBuffer();
      bytes = new Uint8Array(buf);
      let newFilter, newParams;
      if (!filter) {
        newFilter = Name.get("FlateDecode");
      } else if (!isFilterZeroFlateDecode) {
        newFilter = Array.isArray(filter) ? [Name.get("FlateDecode"), ...filter] : [Name.get("FlateDecode"), filter];
        if (params) {
          newParams = Array.isArray(params) ? [null, ...params] : [null, params];
        }
      }
      if (newFilter) {
        dict.set("Filter", newFilter);
      }
      if (newParams) {
        dict.set("DecodeParms", newParams);
      }
    } catch (ex) {
      info(\`writeStream - cannot compress data: "\${ex}".\`);
    }
  }
  let string = bytesToString(bytes);
  if (transform) {
    string = transform.encryptString(string);
  }
  dict.set("Length", string.length);
  await writeDict(dict, buffer, transform);
  buffer.push(" stream\\n", string, "\\nendstream");
}
async function writeArray(array, buffer, transform) {
  buffer.push("[");
  let first = true;
  for (const val of array) {
    if (!first) {
      buffer.push(" ");
    } else {
      first = false;
    }
    await writeValue(val, buffer, transform);
  }
  buffer.push("]");
}
async function writeValue(value, buffer, transform) {
  if (value instanceof Name) {
    buffer.push(\`/\${escapePDFName(value.name)}\`);
  } else if (value instanceof Ref) {
    buffer.push(\`\${value.num} \${value.gen} R\`);
  } else if (Array.isArray(value) || ArrayBuffer.isView(value)) {
    await writeArray(value, buffer, transform);
  } else if (typeof value === "string") {
    if (transform) {
      value = transform.encryptString(value);
    }
    buffer.push(\`(\${escapeString(value)})\`);
  } else if (typeof value === "number") {
    buffer.push(numberToString(value));
  } else if (typeof value === "boolean") {
    buffer.push(value.toString());
  } else if (value instanceof Dict) {
    await writeDict(value, buffer, transform);
  } else if (value instanceof BaseStream) {
    await writeStream(value, buffer, transform);
  } else if (value === null) {
    buffer.push("null");
  } else {
    warn(\`Unhandled value in writer: \${typeof value}, please file a bug.\`);
  }
}
function writeInt(number, size, offset, buffer) {
  for (let i = size + offset - 1; i > offset - 1; i--) {
    buffer[i] = number & 0xff;
    number >>= 8;
  }
  return offset + size;
}
function writeString(string, offset, buffer) {
  const ii = string.length;
  for (let i = 0; i < ii; i++) {
    buffer[offset + i] = string.charCodeAt(i) & 0xff;
  }
  return offset + ii;
}
function computeMD5(filesize, xrefInfo) {
  const time = Math.floor(Date.now() / 1000);
  const filename = xrefInfo.filename || "";
  const md5Buffer = [time.toString(), filename, filesize.toString(), ...Object.values(xrefInfo.info)];
  const md5BufferLen = Math.sumPrecise(md5Buffer.map(str => str.length));
  const array = new Uint8Array(md5BufferLen);
  let offset = 0;
  for (const str of md5Buffer) {
    offset = writeString(str, offset, array);
  }
  return bytesToString(calculateMD5(array, 0, array.length));
}
function writeXFADataForAcroform(str, changes) {
  const xml = new SimpleXMLParser({
    hasAttributes: true
  }).parseFromString(str);
  for (const {
    xfa
  } of changes) {
    if (!xfa) {
      continue;
    }
    const {
      path,
      value
    } = xfa;
    if (!path) {
      continue;
    }
    const nodePath = parseXFAPath(path);
    let node = xml.documentElement.searchNode(nodePath, 0);
    if (!node && nodePath.length > 1) {
      node = xml.documentElement.searchNode([nodePath.at(-1)], 0);
    }
    if (node) {
      node.childNodes = Array.isArray(value) ? value.map(val => new SimpleDOMNode("value", val)) : [new SimpleDOMNode("#text", value)];
    } else {
      warn(\`Node not found for path: \${path}\`);
    }
  }
  const buffer = [];
  xml.documentElement.dump(buffer);
  return buffer.join("");
}
async function updateAcroform({
  xref,
  acroForm,
  acroFormRef,
  hasXfa,
  hasXfaDatasetsEntry,
  xfaDatasetsRef,
  needAppearances,
  changes
}) {
  if (hasXfa && !hasXfaDatasetsEntry && !xfaDatasetsRef) {
    warn("XFA - Cannot save it");
  }
  if (!needAppearances && (!hasXfa || !xfaDatasetsRef || hasXfaDatasetsEntry)) {
    return;
  }
  const dict = acroForm.clone();
  if (hasXfa && !hasXfaDatasetsEntry) {
    const newXfa = acroForm.get("XFA").slice();
    newXfa.splice(2, 0, "datasets");
    newXfa.splice(3, 0, xfaDatasetsRef);
    dict.set("XFA", newXfa);
  }
  if (needAppearances) {
    dict.set("NeedAppearances", true);
  }
  changes.put(acroFormRef, {
    data: dict
  });
}
function updateXFA({
  xfaData,
  xfaDatasetsRef,
  changes,
  xref
}) {
  if (xfaData === null) {
    const datasets = xref.fetchIfRef(xfaDatasetsRef);
    xfaData = writeXFADataForAcroform(datasets.getString(), changes);
  }
  const xfaDataStream = new StringStream(xfaData);
  xfaDataStream.dict = new Dict(xref);
  xfaDataStream.dict.set("Type", Name.get("EmbeddedFile"));
  changes.put(xfaDatasetsRef, {
    data: xfaDataStream
  });
}
async function getXRefTable(xrefInfo, baseOffset, newRefs, newXref, buffer) {
  buffer.push("xref\\n");
  const indexes = getIndexes(newRefs);
  let indexesPosition = 0;
  for (const {
    ref,
    data
  } of newRefs) {
    if (ref.num === indexes[indexesPosition]) {
      buffer.push(\`\${indexes[indexesPosition]} \${indexes[indexesPosition + 1]}\\n\`);
      indexesPosition += 2;
    }
    if (data !== null) {
      buffer.push(\`\${baseOffset.toString().padStart(10, "0")} \${Math.min(ref.gen, 0xffff).toString().padStart(5, "0")} n\\r\\n\`);
      baseOffset += data.length;
    } else {
      buffer.push(\`0000000000 \${Math.min(ref.gen + 1, 0xffff).toString().padStart(5, "0")} f\\r\\n\`);
    }
  }
  computeIDs(baseOffset, xrefInfo, newXref);
  buffer.push("trailer\\n");
  await writeDict(newXref, buffer);
  buffer.push("\\nstartxref\\n", baseOffset.toString(), "\\n%%EOF\\n");
}
function getIndexes(newRefs) {
  const indexes = [];
  for (const {
    ref
  } of newRefs) {
    if (ref.num === indexes.at(-2) + indexes.at(-1)) {
      indexes[indexes.length - 1] += 1;
    } else {
      indexes.push(ref.num, 1);
    }
  }
  return indexes;
}
async function getXRefStreamTable(xrefInfo, baseOffset, newRefs, newXref, buffer) {
  const xrefTableData = [];
  let maxOffset = 0;
  let maxGen = 0;
  for (const {
    ref,
    data
  } of newRefs) {
    let gen;
    maxOffset = Math.max(maxOffset, baseOffset);
    if (data !== null) {
      gen = Math.min(ref.gen, 0xffff);
      xrefTableData.push([1, baseOffset, gen]);
      baseOffset += data.length;
    } else {
      gen = Math.min(ref.gen + 1, 0xffff);
      xrefTableData.push([0, 0, gen]);
    }
    maxGen = Math.max(maxGen, gen);
  }
  newXref.set("Index", getIndexes(newRefs));
  const offsetSize = getSizeInBytes(maxOffset);
  const maxGenSize = getSizeInBytes(maxGen);
  const sizes = [1, offsetSize, maxGenSize];
  newXref.set("W", sizes);
  computeIDs(baseOffset, xrefInfo, newXref);
  const structSize = Math.sumPrecise(sizes);
  const data = new Uint8Array(structSize * xrefTableData.length);
  const stream = new Stream(data);
  stream.dict = newXref;
  let offset = 0;
  for (const [type, objOffset, gen] of xrefTableData) {
    offset = writeInt(type, sizes[0], offset, data);
    offset = writeInt(objOffset, sizes[1], offset, data);
    offset = writeInt(gen, sizes[2], offset, data);
  }
  await writeObject(xrefInfo.newRef, stream, buffer, {});
  buffer.push("startxref\\n", baseOffset.toString(), "\\n%%EOF\\n");
}
function computeIDs(baseOffset, xrefInfo, newXref) {
  if (Array.isArray(xrefInfo.fileIds) && xrefInfo.fileIds.length > 0) {
    const md5 = computeMD5(baseOffset, xrefInfo);
    newXref.set("ID", [xrefInfo.fileIds[0], md5]);
  }
}
function getTrailerDict(xrefInfo, changes, useXrefStream) {
  const newXref = new Dict(null);
  newXref.set("Prev", xrefInfo.startXRef);
  const refForXrefTable = xrefInfo.newRef;
  if (useXrefStream) {
    changes.put(refForXrefTable, {
      data: ""
    });
    newXref.set("Size", refForXrefTable.num + 1);
    newXref.set("Type", Name.get("XRef"));
  } else {
    newXref.set("Size", refForXrefTable.num);
  }
  if (xrefInfo.rootRef !== null) {
    newXref.set("Root", xrefInfo.rootRef);
  }
  if (xrefInfo.infoRef !== null) {
    newXref.set("Info", xrefInfo.infoRef);
  }
  if (xrefInfo.encryptRef !== null) {
    newXref.set("Encrypt", xrefInfo.encryptRef);
  }
  return newXref;
}
async function writeChanges(changes, xref, buffer = []) {
  const newRefs = [];
  for (const [ref, {
    data
  }] of changes.items()) {
    if (data === null || typeof data === "string") {
      newRefs.push({
        ref,
        data
      });
      continue;
    }
    await writeObject(ref, data, buffer, xref);
    newRefs.push({
      ref,
      data: buffer.join("")
    });
    buffer.length = 0;
  }
  return newRefs.sort((a, b) => a.ref.num - b.ref.num);
}
async function incrementalUpdate({
  originalData,
  xrefInfo,
  changes,
  xref = null,
  hasXfa = false,
  xfaDatasetsRef = null,
  hasXfaDatasetsEntry = false,
  needAppearances,
  acroFormRef = null,
  acroForm = null,
  xfaData = null,
  useXrefStream = false
}) {
  await updateAcroform({
    xref,
    acroForm,
    acroFormRef,
    hasXfa,
    hasXfaDatasetsEntry,
    xfaDatasetsRef,
    needAppearances,
    changes
  });
  if (hasXfa) {
    updateXFA({
      xfaData,
      xfaDatasetsRef,
      changes,
      xref
    });
  }
  const newXref = getTrailerDict(xrefInfo, changes, useXrefStream);
  const buffer = [];
  const newRefs = await writeChanges(changes, xref, buffer);
  let baseOffset = originalData.length;
  const lastByte = originalData.at(-1);
  if (lastByte !== 0x0a && lastByte !== 0x0d) {
    buffer.push("\\n");
    baseOffset += 1;
  }
  for (const {
    data
  } of newRefs) {
    if (data !== null) {
      buffer.push(data);
    }
  }
  await (useXrefStream ? getXRefStreamTable(xrefInfo, baseOffset, newRefs, newXref, buffer) : getXRefTable(xrefInfo, baseOffset, newRefs, newXref, buffer));
  const totalLength = originalData.length + Math.sumPrecise(buffer.map(str => str.length));
  const array = new Uint8Array(totalLength);
  array.set(originalData);
  let offset = originalData.length;
  for (const str of buffer) {
    offset = writeString(str, offset, array);
  }
  return array;
}

;// ./src/core/worker_stream.js

class PDFWorkerStream {
  constructor(msgHandler) {
    this._msgHandler = msgHandler;
    this._contentLength = null;
    this._fullRequestReader = null;
    this._rangeRequestReaders = [];
  }
  getFullReader() {
    assert(!this._fullRequestReader, "PDFWorkerStream.getFullReader can only be called once.");
    this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);
    return this._fullRequestReader;
  }
  getRangeReader(begin, end) {
    const reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);
    this._rangeRequestReaders.push(reader);
    return reader;
  }
  cancelAllRequests(reason) {
    this._fullRequestReader?.cancel(reason);
    for (const reader of this._rangeRequestReaders.slice(0)) {
      reader.cancel(reason);
    }
  }
}
class PDFWorkerStreamReader {
  constructor(msgHandler) {
    this._msgHandler = msgHandler;
    this.onProgress = null;
    this._contentLength = null;
    this._isRangeSupported = false;
    this._isStreamingSupported = false;
    const readableStream = this._msgHandler.sendWithStream("GetReader");
    this._reader = readableStream.getReader();
    this._headersReady = this._msgHandler.sendWithPromise("ReaderHeadersReady").then(data => {
      this._isStreamingSupported = data.isStreamingSupported;
      this._isRangeSupported = data.isRangeSupported;
      this._contentLength = data.contentLength;
    });
  }
  get headersReady() {
    return this._headersReady;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  async read() {
    const {
      value,
      done
    } = await this._reader.read();
    if (done) {
      return {
        value: undefined,
        done: true
      };
    }
    return {
      value: value.buffer,
      done: false
    };
  }
  cancel(reason) {
    this._reader.cancel(reason);
  }
}
class PDFWorkerStreamRangeReader {
  constructor(begin, end, msgHandler) {
    this._msgHandler = msgHandler;
    this.onProgress = null;
    const readableStream = this._msgHandler.sendWithStream("GetRangeReader", {
      begin,
      end
    });
    this._reader = readableStream.getReader();
  }
  get isStreamingSupported() {
    return false;
  }
  async read() {
    const {
      value,
      done
    } = await this._reader.read();
    if (done) {
      return {
        value: undefined,
        done: true
      };
    }
    return {
      value: value.buffer,
      done: false
    };
  }
  cancel(reason) {
    this._reader.cancel(reason);
  }
}

;// ./src/core/worker.js










class WorkerTask {
  constructor(name) {
    this.name = name;
    this.terminated = false;
    this._capability = Promise.withResolvers();
  }
  get finished() {
    return this._capability.promise;
  }
  finish() {
    this._capability.resolve();
  }
  terminate() {
    this.terminated = true;
  }
  ensureNotTerminated() {
    if (this.terminated) {
      throw new Error("Worker task was terminated");
    }
  }
}
class WorkerMessageHandler {
  static {
    if (typeof window === "undefined" && !isNodeJS && typeof self !== "undefined" && typeof self.postMessage === "function" && "onmessage" in self) {
      this.initializeFromPort(self);
    }
  }
  static setup(handler, port) {
    let testMessageProcessed = false;
    handler.on("test", data => {
      if (testMessageProcessed) {
        return;
      }
      testMessageProcessed = true;
      handler.send("test", data instanceof Uint8Array);
    });
    handler.on("configure", data => {
      setVerbosityLevel(data.verbosity);
    });
    handler.on("GetDocRequest", data => this.createDocumentHandler(data, port));
  }
  static createDocumentHandler(docParams, port) {
    let pdfManager;
    let terminated = false;
    let cancelXHRs = null;
    const WorkerTasks = new Set();
    const verbosity = getVerbosityLevel();
    const {
      docId,
      apiVersion
    } = docParams;
    const workerVersion = "5.1.91";
    if (apiVersion !== workerVersion) {
      throw new Error(\`The API version "\${apiVersion}" does not match \` + \`the Worker version "\${workerVersion}".\`);
    }
    const enumerableProperties = [];
    for (const property in []) {
      enumerableProperties.push(property);
    }
    if (enumerableProperties.length) {
      throw new Error("The \`Array.prototype\` contains unexpected enumerable properties: " + enumerableProperties.join(", ") + "; thus breaking e.g. \`for...in\` iteration of \`Array\`s.");
    }
    const workerHandlerName = docId + "_worker";
    let handler = new MessageHandler(workerHandlerName, docId, port);
    function ensureNotTerminated() {
      if (terminated) {
        throw new Error("Worker was terminated");
      }
    }
    function startWorkerTask(task) {
      WorkerTasks.add(task);
    }
    function finishWorkerTask(task) {
      task.finish();
      WorkerTasks.delete(task);
    }
    async function loadDocument(recoveryMode) {
      await pdfManager.ensureDoc("checkHeader");
      await pdfManager.ensureDoc("parseStartXRef");
      await pdfManager.ensureDoc("parse", [recoveryMode]);
      await pdfManager.ensureDoc("checkFirstPage", [recoveryMode]);
      await pdfManager.ensureDoc("checkLastPage", [recoveryMode]);
      const isPureXfa = await pdfManager.ensureDoc("isPureXfa");
      if (isPureXfa) {
        const task = new WorkerTask("loadXfaFonts");
        startWorkerTask(task);
        await Promise.all([pdfManager.loadXfaFonts(handler, task).catch(reason => {}).then(() => finishWorkerTask(task)), pdfManager.loadXfaImages()]);
      }
      const [numPages, fingerprints] = await Promise.all([pdfManager.ensureDoc("numPages"), pdfManager.ensureDoc("fingerprints")]);
      const htmlForXfa = isPureXfa ? await pdfManager.ensureDoc("htmlForXfa") : null;
      return {
        numPages,
        fingerprints,
        htmlForXfa
      };
    }
    async function getPdfManager({
      data,
      password,
      disableAutoFetch,
      rangeChunkSize,
      length,
      docBaseUrl,
      enableXfa,
      evaluatorOptions
    }) {
      const pdfManagerArgs = {
        source: null,
        disableAutoFetch,
        docBaseUrl,
        docId,
        enableXfa,
        evaluatorOptions,
        handler,
        length,
        password,
        rangeChunkSize
      };
      if (data) {
        pdfManagerArgs.source = data;
        return new LocalPdfManager(pdfManagerArgs);
      }
      const pdfStream = new PDFWorkerStream(handler),
        fullRequest = pdfStream.getFullReader();
      const pdfManagerCapability = Promise.withResolvers();
      let newPdfManager,
        cachedChunks = [],
        loaded = 0;
      fullRequest.headersReady.then(function () {
        if (!fullRequest.isRangeSupported) {
          return;
        }
        pdfManagerArgs.source = pdfStream;
        pdfManagerArgs.length = fullRequest.contentLength;
        pdfManagerArgs.disableAutoFetch ||= fullRequest.isStreamingSupported;
        newPdfManager = new NetworkPdfManager(pdfManagerArgs);
        for (const chunk of cachedChunks) {
          newPdfManager.sendProgressiveData(chunk);
        }
        cachedChunks = [];
        pdfManagerCapability.resolve(newPdfManager);
        cancelXHRs = null;
      }).catch(function (reason) {
        pdfManagerCapability.reject(reason);
        cancelXHRs = null;
      });
      new Promise(function (resolve, reject) {
        const readChunk = function ({
          value,
          done
        }) {
          try {
            ensureNotTerminated();
            if (done) {
              if (!newPdfManager) {
                const pdfFile = arrayBuffersToBytes(cachedChunks);
                cachedChunks = [];
                if (length && pdfFile.length !== length) {
                  warn("reported HTTP length is different from actual");
                }
                pdfManagerArgs.source = pdfFile;
                newPdfManager = new LocalPdfManager(pdfManagerArgs);
                pdfManagerCapability.resolve(newPdfManager);
              }
              cancelXHRs = null;
              return;
            }
            loaded += value.byteLength;
            if (!fullRequest.isStreamingSupported) {
              handler.send("DocProgress", {
                loaded,
                total: Math.max(loaded, fullRequest.contentLength || 0)
              });
            }
            if (newPdfManager) {
              newPdfManager.sendProgressiveData(value);
            } else {
              cachedChunks.push(value);
            }
            fullRequest.read().then(readChunk, reject);
          } catch (e) {
            reject(e);
          }
        };
        fullRequest.read().then(readChunk, reject);
      }).catch(function (e) {
        pdfManagerCapability.reject(e);
        cancelXHRs = null;
      });
      cancelXHRs = reason => {
        pdfStream.cancelAllRequests(reason);
      };
      return pdfManagerCapability.promise;
    }
    function setupDoc(data) {
      function onSuccess(doc) {
        ensureNotTerminated();
        handler.send("GetDoc", {
          pdfInfo: doc
        });
      }
      function onFailure(ex) {
        ensureNotTerminated();
        if (ex instanceof PasswordException) {
          const task = new WorkerTask(\`PasswordException: response \${ex.code}\`);
          startWorkerTask(task);
          handler.sendWithPromise("PasswordRequest", ex).then(function ({
            password
          }) {
            finishWorkerTask(task);
            pdfManager.updatePassword(password);
            pdfManagerReady();
          }).catch(function () {
            finishWorkerTask(task);
            handler.send("DocException", ex);
          });
        } else {
          handler.send("DocException", wrapReason(ex));
        }
      }
      function pdfManagerReady() {
        ensureNotTerminated();
        loadDocument(false).then(onSuccess, function (reason) {
          ensureNotTerminated();
          if (!(reason instanceof XRefParseException)) {
            onFailure(reason);
            return;
          }
          pdfManager.requestLoadedStream().then(function () {
            ensureNotTerminated();
            loadDocument(true).then(onSuccess, onFailure);
          });
        });
      }
      ensureNotTerminated();
      getPdfManager(data).then(function (newPdfManager) {
        if (terminated) {
          newPdfManager.terminate(new AbortException("Worker was terminated."));
          throw new Error("Worker was terminated");
        }
        pdfManager = newPdfManager;
        pdfManager.requestLoadedStream(true).then(stream => {
          handler.send("DataLoaded", {
            length: stream.bytes.byteLength
          });
        });
      }).then(pdfManagerReady, onFailure);
    }
    handler.on("GetPage", function (data) {
      return pdfManager.getPage(data.pageIndex).then(function (page) {
        return Promise.all([pdfManager.ensure(page, "rotate"), pdfManager.ensure(page, "ref"), pdfManager.ensure(page, "userUnit"), pdfManager.ensure(page, "view")]).then(function ([rotate, ref, userUnit, view]) {
          return {
            rotate,
            ref,
            refStr: ref?.toString() ?? null,
            userUnit,
            view
          };
        });
      });
    });
    handler.on("GetPageIndex", function (data) {
      const pageRef = Ref.get(data.num, data.gen);
      return pdfManager.ensureCatalog("getPageIndex", [pageRef]);
    });
    handler.on("GetDestinations", function (data) {
      return pdfManager.ensureCatalog("destinations");
    });
    handler.on("GetDestination", function (data) {
      return pdfManager.ensureCatalog("getDestination", [data.id]);
    });
    handler.on("GetPageLabels", function (data) {
      return pdfManager.ensureCatalog("pageLabels");
    });
    handler.on("GetPageLayout", function (data) {
      return pdfManager.ensureCatalog("pageLayout");
    });
    handler.on("GetPageMode", function (data) {
      return pdfManager.ensureCatalog("pageMode");
    });
    handler.on("GetViewerPreferences", function (data) {
      return pdfManager.ensureCatalog("viewerPreferences");
    });
    handler.on("GetOpenAction", function (data) {
      return pdfManager.ensureCatalog("openAction");
    });
    handler.on("GetAttachments", function (data) {
      return pdfManager.ensureCatalog("attachments");
    });
    handler.on("GetDocJSActions", function (data) {
      return pdfManager.ensureCatalog("jsActions");
    });
    handler.on("GetPageJSActions", function ({
      pageIndex
    }) {
      return pdfManager.getPage(pageIndex).then(page => pdfManager.ensure(page, "jsActions"));
    });
    handler.on("GetOutline", function (data) {
      return pdfManager.ensureCatalog("documentOutline");
    });
    handler.on("GetOptionalContentConfig", function (data) {
      return pdfManager.ensureCatalog("optionalContentConfig");
    });
    handler.on("GetPermissions", function (data) {
      return pdfManager.ensureCatalog("permissions");
    });
    handler.on("GetMetadata", function (data) {
      return Promise.all([pdfManager.ensureDoc("documentInfo"), pdfManager.ensureCatalog("metadata")]);
    });
    handler.on("GetMarkInfo", function (data) {
      return pdfManager.ensureCatalog("markInfo");
    });
    handler.on("GetData", function (data) {
      return pdfManager.requestLoadedStream().then(stream => stream.bytes);
    });
    handler.on("GetAnnotations", function ({
      pageIndex,
      intent
    }) {
      return pdfManager.getPage(pageIndex).then(function (page) {
        const task = new WorkerTask(\`GetAnnotations: page \${pageIndex}\`);
        startWorkerTask(task);
        return page.getAnnotationsData(handler, task, intent).then(data => {
          finishWorkerTask(task);
          return data;
        }, reason => {
          finishWorkerTask(task);
          throw reason;
        });
      });
    });
    handler.on("GetFieldObjects", function (data) {
      return pdfManager.ensureDoc("fieldObjects").then(fieldObjects => fieldObjects?.allFields || null);
    });
    handler.on("HasJSActions", function (data) {
      return pdfManager.ensureDoc("hasJSActions");
    });
    handler.on("GetCalculationOrderIds", function (data) {
      return pdfManager.ensureDoc("calculationOrderIds");
    });
    handler.on("SaveDocument", async function ({
      isPureXfa,
      numPages,
      annotationStorage,
      filename
    }) {
      const globalPromises = [pdfManager.requestLoadedStream(), pdfManager.ensureCatalog("acroForm"), pdfManager.ensureCatalog("acroFormRef"), pdfManager.ensureDoc("startXRef"), pdfManager.ensureDoc("xref"), pdfManager.ensureDoc("linearization"), pdfManager.ensureCatalog("structTreeRoot")];
      const changes = new RefSetCache();
      const promises = [];
      const newAnnotationsByPage = !isPureXfa ? getNewAnnotationsMap(annotationStorage) : null;
      const [stream, acroForm, acroFormRef, startXRef, xref, linearization, _structTreeRoot] = await Promise.all(globalPromises);
      const catalogRef = xref.trailer.getRaw("Root") || null;
      let structTreeRoot;
      if (newAnnotationsByPage) {
        if (!_structTreeRoot) {
          if (await StructTreeRoot.canCreateStructureTree({
            catalogRef,
            pdfManager,
            newAnnotationsByPage
          })) {
            structTreeRoot = null;
          }
        } else if (await _structTreeRoot.canUpdateStructTree({
          pdfManager,
          newAnnotationsByPage
        })) {
          structTreeRoot = _structTreeRoot;
        }
        const imagePromises = AnnotationFactory.generateImages(annotationStorage.values(), xref, pdfManager.evaluatorOptions.isOffscreenCanvasSupported);
        const newAnnotationPromises = structTreeRoot === undefined ? promises : [];
        for (const [pageIndex, annotations] of newAnnotationsByPage) {
          newAnnotationPromises.push(pdfManager.getPage(pageIndex).then(page => {
            const task = new WorkerTask(\`Save (editor): page \${pageIndex}\`);
            startWorkerTask(task);
            return page.saveNewAnnotations(handler, task, annotations, imagePromises, changes).finally(function () {
              finishWorkerTask(task);
            });
          }));
        }
        if (structTreeRoot === null) {
          promises.push(Promise.all(newAnnotationPromises).then(async () => {
            await StructTreeRoot.createStructureTree({
              newAnnotationsByPage,
              xref,
              catalogRef,
              pdfManager,
              changes
            });
          }));
        } else if (structTreeRoot) {
          promises.push(Promise.all(newAnnotationPromises).then(async () => {
            await structTreeRoot.updateStructureTree({
              newAnnotationsByPage,
              pdfManager,
              changes
            });
          }));
        }
      }
      if (isPureXfa) {
        promises.push(pdfManager.serializeXfaData(annotationStorage));
      } else {
        for (let pageIndex = 0; pageIndex < numPages; pageIndex++) {
          promises.push(pdfManager.getPage(pageIndex).then(function (page) {
            const task = new WorkerTask(\`Save: page \${pageIndex}\`);
            startWorkerTask(task);
            return page.save(handler, task, annotationStorage, changes).finally(function () {
              finishWorkerTask(task);
            });
          }));
        }
      }
      const refs = await Promise.all(promises);
      let xfaData = null;
      if (isPureXfa) {
        xfaData = refs[0];
        if (!xfaData) {
          return stream.bytes;
        }
      } else if (changes.size === 0) {
        return stream.bytes;
      }
      const needAppearances = acroFormRef && acroForm instanceof Dict && changes.values().some(ref => ref.needAppearances);
      const xfa = acroForm instanceof Dict && acroForm.get("XFA") || null;
      let xfaDatasetsRef = null;
      let hasXfaDatasetsEntry = false;
      if (Array.isArray(xfa)) {
        for (let i = 0, ii = xfa.length; i < ii; i += 2) {
          if (xfa[i] === "datasets") {
            xfaDatasetsRef = xfa[i + 1];
            hasXfaDatasetsEntry = true;
          }
        }
        if (xfaDatasetsRef === null) {
          xfaDatasetsRef = xref.getNewTemporaryRef();
        }
      } else if (xfa) {
        warn("Unsupported XFA type.");
      }
      let newXrefInfo = Object.create(null);
      if (xref.trailer) {
        const infoObj = Object.create(null);
        const xrefInfo = xref.trailer.get("Info") || null;
        if (xrefInfo instanceof Dict) {
          for (const [key, value] of xrefInfo) {
            if (typeof value === "string") {
              infoObj[key] = stringToPDFString(value);
            }
          }
        }
        newXrefInfo = {
          rootRef: catalogRef,
          encryptRef: xref.trailer.getRaw("Encrypt") || null,
          newRef: xref.getNewTemporaryRef(),
          infoRef: xref.trailer.getRaw("Info") || null,
          info: infoObj,
          fileIds: xref.trailer.get("ID") || null,
          startXRef: linearization ? startXRef : xref.lastXRefStreamPos ?? startXRef,
          filename
        };
      }
      return incrementalUpdate({
        originalData: stream.bytes,
        xrefInfo: newXrefInfo,
        changes,
        xref,
        hasXfa: !!xfa,
        xfaDatasetsRef,
        hasXfaDatasetsEntry,
        needAppearances,
        acroFormRef,
        acroForm,
        xfaData,
        useXrefStream: isDict(xref.topDict, "XRef")
      }).finally(() => {
        xref.resetNewTemporaryRef();
      });
    });
    handler.on("GetOperatorList", function (data, sink) {
      const pageIndex = data.pageIndex;
      pdfManager.getPage(pageIndex).then(function (page) {
        const task = new WorkerTask(\`GetOperatorList: page \${pageIndex}\`);
        startWorkerTask(task);
        const start = verbosity >= VerbosityLevel.INFOS ? Date.now() : 0;
        page.getOperatorList({
          handler,
          sink,
          task,
          intent: data.intent,
          cacheKey: data.cacheKey,
          annotationStorage: data.annotationStorage,
          modifiedIds: data.modifiedIds
        }).then(function (operatorListInfo) {
          finishWorkerTask(task);
          if (start) {
            info(\`page=\${pageIndex + 1} - getOperatorList: time=\` + \`\${Date.now() - start}ms, len=\${operatorListInfo.length}\`);
          }
          sink.close();
        }, function (reason) {
          finishWorkerTask(task);
          if (task.terminated) {
            return;
          }
          sink.error(reason);
        });
      });
    });
    handler.on("GetTextContent", function (data, sink) {
      const {
        pageIndex,
        includeMarkedContent,
        disableNormalization
      } = data;
      pdfManager.getPage(pageIndex).then(function (page) {
        const task = new WorkerTask("GetTextContent: page " + pageIndex);
        startWorkerTask(task);
        const start = verbosity >= VerbosityLevel.INFOS ? Date.now() : 0;
        page.extractTextContent({
          handler,
          task,
          sink,
          includeMarkedContent,
          disableNormalization
        }).then(function () {
          finishWorkerTask(task);
          if (start) {
            info(\`page=\${pageIndex + 1} - getTextContent: time=\` + \`\${Date.now() - start}ms\`);
          }
          sink.close();
        }, function (reason) {
          finishWorkerTask(task);
          if (task.terminated) {
            return;
          }
          sink.error(reason);
        });
      });
    });
    handler.on("GetStructTree", function (data) {
      return pdfManager.getPage(data.pageIndex).then(page => pdfManager.ensure(page, "getStructTree"));
    });
    handler.on("FontFallback", function (data) {
      return pdfManager.fontFallback(data.id, handler);
    });
    handler.on("Cleanup", function (data) {
      return pdfManager.cleanup(true);
    });
    handler.on("Terminate", function (data) {
      terminated = true;
      const waitOn = [];
      if (pdfManager) {
        pdfManager.terminate(new AbortException("Worker was terminated."));
        const cleanupPromise = pdfManager.cleanup();
        waitOn.push(cleanupPromise);
        pdfManager = null;
      } else {
        clearGlobalCaches();
      }
      cancelXHRs?.(new AbortException("Worker was terminated."));
      for (const task of WorkerTasks) {
        waitOn.push(task.finished);
        task.terminate();
      }
      return Promise.all(waitOn).then(function () {
        handler.destroy();
        handler = null;
      });
    });
    handler.on("Ready", function (data) {
      setupDoc(docParams);
      docParams = null;
    });
    return workerHandlerName;
  }
  static initializeFromPort(port) {
    const handler = new MessageHandler("worker", "main", port);
    this.setup(handler, port);
    handler.send("ready", null);
  }
}

;// ./src/pdf.worker.js

const pdfjsVersion = "5.1.91";
const pdfjsBuild = "45cbe8bb0";

var __webpack_exports__WorkerMessageHandler = __webpack_exports__.WorkerMessageHandler;
export { __webpack_exports__WorkerMessageHandler as WorkerMessageHandler };

//# sourceMappingURL=pdf.worker.mjs.map`,FB=new Blob([OB],{type:"application/javascript"}),PB=URL.createObjectURL(FB);TB.workerSrc=PB;let ao,_v,jg=null,x1=null,q2=null,V2=null;async function MB(S){const e=await EB(S).promise;let i=[],a=[];const s=/^(\d+)[\.\)]?\s+(.*)$/;function o(E,P){let M=[];for(let F=0;F<E.length;F++){const k=E[F],O=E[F+1],v=k.str.trim();if(/^\d{1,2}$/.test(v)&&k.width<10&&k.transform[5]>P&&O){const R=O.str.trim();if(!/^\d+$/.test(R)){O.str=R+v;continue}}M.push(k)}return M}for(let E=1;E<=e.numPages;E++){const P=await e.getPage(E),F=P.getViewport({scale:1}).height;let O=(await P.getTextContent()).items;O.sort((U,N)=>N.transform[5]-U.transform[5]);let v=[],R=[];for(let U of O)U.transform[5]<F*.3?R.push(U):v.push(U);v=o(v,F*.3);let G=[];{let U=null,N=null;const Z=20;for(const V of v){const B=V.str.trim();if(!B)continue;const J=V.transform[5];U?Math.abs(J-N)<Z?U.text+=" "+B:(G.push(U),U={text:B,y:J}):U={text:B,y:J},N=J}U&&G.push(U),G.sort((V,B)=>B.y-V.y)}let j=[];{let U=null,N=null;const Z=20;for(const V of R){const B=V.str.trim();if(!B)continue;const J=V.transform[5];U?Math.abs(J-N)<Z?U.text+=" "+B:(j.push(U),U={text:B,y:J}):U={text:B,y:J},N=J}U&&j.push(U),j.sort((V,B)=>B.y-V.y)}for(let U of G)i.push({text:U.text,pageNum:E});for(let U of j)a.push({text:U.text,pageNum:E})}let h={},f=[],d=0;for(;d<a.length;){const P=a[d].text,M=P.match(/^(\d+)[\.\)]?\s+(.*)$/);if(M){let F=M[1],k=M[2];for(d++;d<a.length;){const O=a[d].text;if(s.test(O))break;k+=" "+O.trim(),d++}h[F]?h[F]+=" "+k:(h[F]=k,f.push(F))}else{if(f.length>0){let F=f[f.length-1];h[F]+=" "+P.trim()}d++}}let p={},g=[];function x(E){return E.replace(/(\.\s+)(\d+[\.\)]?\s+)/g,"$1###SPLIT###$2").split("###SPLIT###").map(M=>M.trim()).filter(Boolean)}for(let E of f){let P=(h[E]||"").trim(),M=x(P);if(M.length===1)p[E]=M[0],g.push(E);else{let F=M[0].match(/^(\d+)[\.\)]?\s+(.*)$/);F?p[E]=F[2].trim():p[E]=M[0],g.push(E);for(let k=1;k<M.length;k++){let O=M[k].match(/^(\d+)[\.\)]?\s+(.*)$/);if(O){let v=O[1],R=O[2].trim();p[v]=R,g.push(v)}else{let v=g[g.length-1];p[v]+=" "+M[k]}}}}h=p,f=g;const w=["January","February","March","April","May","June","July","August","September","October","November","December"],_=/(^|[\s,"'()\[\].;:\-])(\d+)(?=$|[\s,"'()\[\].;:\-])/g,A=i.map((E,P)=>{let M=E.text.replace(_,(F,k,O,v,R)=>{const G=R.substring(v+F.length);for(let j of w)if(G.trim().startsWith(j))return F;return h[O]?k+`<sup>${O}</sup>`:F});return P===0?`<h1 data-page="${E.pageNum}">${M}</h1>`:P===1?`<p data-page="${E.pageNum}" style="font-style: italic;">${M}</p>`:`<p data-page="${E.pageNum}">${M}</p>`}).join(`
`);f.sort((E,P)=>Number(E)-Number(P));let T="";return f.length>0&&(T=`<div class="aggregated-footnotes"><hr>
`+f.map(E=>{let P=(h[E]||"").trim();return`<p class="footnote"><sup>${E}</sup> ${P}</p>`}).join(`
`)+`
</div>`),A+`
`+T}async function DB(S){for(let n=0;n<S.length;n++){const e=S[n];if(console.log(e.pdfHighlights),e.pdfUrl)try{let i=await MB(e.pdfUrl),a=document.createElement("div");a.innerHTML=i;let s=a.querySelector("h1");s&&s.textContent?e.fullTitle=s.textContent:e.fullTitle=e.title,Array.isArray(e.pdfHighlights)&&e.pdfHighlights.forEach(o=>{const{keyword:h,markerIdx:f,url:d}=o,p=RB(h),g=f==="url"?`<a href="${d}" target="_blank" rel="noopener noreferrer">${h}</a>`:`<span class="marker-highlight" data-marker="${f}">${h}</span>`,x=new RegExp(p,"g");i=i.replace(x,g)}),e.pdfExcerpt=i}catch(i){console.error("PDF parsing failed:",e.pdfUrl,i),e.pdfExcerpt="(Failed to parse PDF text.)",e.fullTitle=e.title}else e.fullTitle=e.title}}function RB(S){return S.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function LB(){const S=document.createElement("div");S.id="pdfModal",S.className="pdf-modal";const n=document.createElement("div");n.className="pdf-modal-content";const e=document.createElement("button");e.className="pdf-modal-close-btn",e.textContent="×",e.addEventListener("click",()=>{S.style.display="none"});const i=document.createElement("div");i.id="pdfContainer",n.appendChild(e),n.appendChild(i),S.appendChild(n),document.body.appendChild(S)}function NB(S){const n=document.getElementById("pdfModal"),e=document.getElementById("pdfContainer");if(!n||!e)return;e.innerHTML="";const i=document.createElement("iframe");i.src=S,i.style.width="100%",i.style.height="600px",e.appendChild(i),n.style.display="flex"}function jB(S,n){let e=document.getElementById("imageOverlay");e||(e=document.createElement("div"),e.id="imageOverlay",e.style.position="fixed",e.style.top=0,e.style.left=0,e.style.width="100%",e.style.height="100%",e.style.backgroundColor="rgba(0,0,0,0.8)",e.style.display="flex",e.style.justifyContent="center",e.style.alignItems="center",e.style.zIndex=1e4,e.addEventListener("click",()=>{e.style.display="none"}),document.body.appendChild(e)),e.innerHTML=`
    <div style="position: relative;">
      <img src="${S}" alt="${n}" style="max-width: 90vw; max-height: 90vh; display: block; margin: 0 auto;">
      <p style="color: #fff; text-align: center; margin-top: 0.5rem;">${n||""}</p>
    </div>
  `,e.style.display="flex"}async function BB(S){const n=bc.imageOverlay(S.overlayImage,S.overlayBounds,{opacity:.9}).addTo(ao);Wk(!0);{const e=S.overlayImage.replace(/\.(jpg|jpeg|png)$/i,".tif");try{const i=await fetch(e);if(!i.ok)throw new Error("HTTP "+i.status);const a=await i.arrayBuffer(),s=new Uint8Array(a,0,4);if(!(s[0]===73&&s[1]===73||s[0]===77&&s[1]===77))throw new Error("Not a TIFF header");const h=await GR(a,{onlyFirstBand:!0,downsampleRatio:2}),f=new T_({georaster:h,opacity:0,resolution:512}).addTo(ao);f.once("load",()=>{V2=f.getBounds(),ao.fitBounds(V2),f.setOpacity(S.overlayOpacity??.7),ao.removeLayer(n),Wk(!1)}),q2=f;return}catch(i){console.warn("[GeoTIFF] failed, fallback:",i),q2&&q2!==n&&ao.removeLayer(q2)}}q2=n,V2=n.getBounds(),ao.fitBounds(V2),Wk(!1)}function UB(S){var n;_v=bc.layerGroup().addTo(ao),(n=S.markers)!=null&&n.length&&S.markers.forEach((e,i)=>{const a=bc.marker(e.coordinates).addTo(_v);a.bindPopup(`<strong>${e.fullTitle||e.title}</strong>`),a.on("click",()=>{ao.flyTo(e.coordinates,18),a.openPopup(),LR(i)})}),HB(V2),zB(S.overlayOpacity??.5)}function GB(S){ao=bc.map("detailMap",{center:S.coordinates,zoom:10,minZoom:7,maxZoom:20}),bc.tileLayer("https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png",{attribution:"Map data © OpenStreetMap contributors, © CARTO"}).addTo(ao),BB(S).then(()=>{UB(S)})}function Wk(S=!0){let n=document.getElementById("geotiffLoading");n||(n=document.createElement("div"),n.id="geotiffLoading",n.style.cssText="position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(255,255,255,.7);z-index:6000;font:700 1.1rem sans-serif",n.textContent="⏳ Loading map…",document.body.appendChild(n)),n.style.display=S?"flex":"none"}function HB(S){const n=bc.control({position:"topright"});n.onAdd=function(){const e=bc.DomUtil.create("button","reset-view-button");return e.innerHTML="⟳ Overview",e.title="Reset to initial view",bc.DomEvent.disableClickPropagation(e),bc.DomEvent.on(e,"click",()=>{if(ao.fitBounds(S),x1!==null){const i=document.getElementById(`markerItem-${x1}`),a=i==null?void 0:i.querySelector(".marker-description");a==null||a.classList.remove("open"),x1=null}_v.getLayers().forEach(i=>{i.closePopup()})}),e},n.addTo(ao)}function zB(S){const n=bc.Control.extend({onAdd:function(){const i=bc.DomUtil.create("div","overlay-opacity-slider");i.style.padding="4px 8px",i.style.background="#fff";const a=document.createElement("input");a.type="range",a.min=0,a.max=1,a.step=.05,a.value=S,a.style.width="100px",i.appendChild(a);const s=document.createElement("span");return s.textContent=S,s.style.marginLeft="6px",i.appendChild(s),bc.DomEvent.disableClickPropagation(i),a.addEventListener("input",o=>{const h=parseFloat(o.target.value);q2.setOpacity(h),s.textContent=h.toFixed(2)}),i}}),e=new n({position:"topright"});ao.addControl(e)}function LR(S){const n=document.getElementById(`markerItem-${S}`);if(!n)return;const e=n.querySelector(".marker-description"),i=n.querySelector(".close-btn");if(x1!==S){if(x1!==null){const a=document.getElementById(`markerItem-${x1}`);if(a){const s=a.querySelector(".marker-description"),o=a.querySelector(".close-btn");s==null||s.classList.remove("open"),o&&(o.style.display="none")}}e.classList.add("open"),i&&(i.style.display="block"),x1=S}}function XB(S,n){n.stopPropagation();const e=document.getElementById(`markerItem-${S}`);if(!e)return;const i=e.querySelector(".marker-description"),a=e.querySelector(".close-btn");i&&i.classList.remove("open"),a&&(a.style.display="none"),x1===S&&(x1=null,ao.fitBounds(V2))}function SP(S,n){ao.flyTo(n,18);const e=_v.getLayers()[S];e&&e.openPopup()}function WB(S){const n=document.getElementById("detailTextContent");if(n.innerHTML="",!S||S.length===0){n.innerHTML="<p>No markers data found.</p>";return}S.forEach((e,i)=>{const a=document.createElement("div");a.className="marker-item",a.id=`markerItem-${i}`;let s=`<p>${e.text||""}</p>`;e.image&&e.imageAlt&&(s+=`
        <div class="marker-image" style="margin-top: 1rem; cursor: pointer;">
          <img src="${e.image}" alt="${e.imageAlt}" style="max-width: 100%; height: auto;"/>
        </div>
      `),(e.pdfTitle||e.pdfAuthor||e.pdfExcerpt)&&(s+=`
        <div class="pdf-info">
          ${e.pdfTitle?`<h4>${e.pdfTitle}</h4>`:""}
          ${e.pdfAuthor?`<p><em>${e.pdfAuthor}</em></p>`:""}
          ${e.pdfExcerpt?`${e.pdfExcerpt}`:""}
        </div>
      `),a.innerHTML=`
      <div class="marker-header">
      <button class="close-btn card-close-btn">✕</button>
      <h3 class="marker-title">${e.fullTitle||e.title}</h3>
      </div>
      <div class="marker-description">
        ${s}
      
      </div>
    `,a.addEventListener("click",()=>{LR(i),SP(i,e.coordinates)});const o=a.querySelector(".close-btn");if(o){const d=document.getElementById("detailTextContent").offsetWidth;o.style.left=`${d-40}px`,o.addEventListener("click",p=>{XB(i,p)})}setTimeout(()=>{const f=a.querySelector(".pdf-button");f&&f.addEventListener("click",d=>{d.stopPropagation();const p=f.getAttribute("data-pdf");NB(p)})},0),setTimeout(()=>{const f=a.querySelector(".marker-image");f&&f.addEventListener("click",d=>{d.stopPropagation(),jB(e.image,e.imageCaption||e.fullTitle||e.title)})},0),new IntersectionObserver(f=>{var d;f[0].isIntersecting&&((d=window.parent)!=null&&d.scrollGuidedEnabled)&&ao.flyTo(e.coordinates,12)},{root:n,threshold:.6}).observe(a),n.appendChild(a)}),setTimeout(()=>{n.querySelectorAll(".marker-highlight").forEach(i=>{i.addEventListener("click",a=>{a.stopPropagation();const s=parseInt(i.getAttribute("data-marker"),10);!isNaN(s)&&S[s]&&SP(s,S[s].coordinates)})})},0)}document.addEventListener("DOMContentLoaded",async()=>{LB();const S=new URLSearchParams(window.location.search),n=parseInt(S.get("id"),10);if(jg=(await(await fetch("/counterMap/data/mapsData.json")).json()).maps.find(a=>a.id===n),!jg){document.getElementById("regionTitle").textContent="Region Not Found";return}document.getElementById("regionTitle").textContent=jg.title,delete bc.Icon.Default.prototype._getIconUrl,bc.Icon.Default.mergeOptions({iconUrl:"https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png",iconRetinaUrl:"https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png",shadowUrl:"https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png"}),jg.markers&&jg.markers.length>0&&await DB(jg.markers),GB(jg),WB(jg.markers)});let $B=window.innerWidth,kP=null;window.addEventListener("resize",()=>{window.innerWidth!==$B&&(clearTimeout(kP),kP=setTimeout(()=>{location.reload()},300))});console.log("detail page loaded");
